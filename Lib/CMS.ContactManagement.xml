<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.ContactManagement</name>
    </assembly>
    <members>
        <member name="T:CMS.ContactManagement.AccountContactInfo">
            <summary>
            AccountContactInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountContactInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountContactInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountContactInfo.AccountContactID">
            <summary>
            Primary key - ID of relation.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountContactInfo.AccountID">
            <summary>
            Gets or sets the ID of the account.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountContactInfo.ContactID">
            <summary>
            Gets or sets the ID of the contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountContactInfo.ContactRoleID">
            <summary>
            Gets or sets the ID of the contact's role.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfo.#ctor">
            <summary>
            Constructor - Creates an empty AccountContactInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AccountContactInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ContactManagement.AccountContactInfoProvider">
            <summary>
            Class providing AccountContactInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.GetRelationships">
            <summary>
            Returns query of all relationships between accounts and contacts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding structure.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.ContactManagement.AccountContactInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding structure.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.ContactManagement.AccountContactInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.GetAccountContactInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified account and contact.
            </summary>
            <param name="accountId">Account ID</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.GetAccountContactInfo(System.Int32)">
            <summary>
            Returns relationship by ID.
            </summary>
            <param name="accountContactId">AccountContactID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.SetAccountContactInfo(CMS.ContactManagement.AccountContactInfo)">
            <summary>
            Sets relationship between specified account and contact.
            </summary>
            <param name="infoObj">Account-contact relationship to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.DeleteAccountContactInfo(CMS.ContactManagement.AccountContactInfo)">
            <summary>
            Deletes relationship between specified account and contact.
            </summary>
            <param name="infoObj">Account-contact relationship to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.DeleteAccountContactInfo(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified account and contact.
            </summary>
            <param name="accountId">Account ID</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.DeleteAccountContactInfo(System.Int32)">
            <summary>
            Deletes relationship with specific AccountContactID.
            </summary>
            <param name="accountContactId">AccountContactID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.DeleteAllAccountContacts(System.String)">
            <summary>
            Deletes relationships between specified accounts and contacts defined in where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.UpdateContactRole(System.Int32,System.String)">
            <summary>
            Updates contact role of relationships between accounts and contacts.
            </summary>
            <param name="roleId">New contact role ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.ResetAccountMainContacts(System.Int32,System.Int32,System.String)">
            <summary>
            Resets main contact IDs of account(s) to NULL if any of the contacts, specified by where-condition, was set as primary or secondary contact.
            </summary>
            <param name="accountId">Account ID - required if called from specific account</param>
            <param name="contactId">Contact ID - required if called from specific contact</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.SetContactsIntoAccount(System.Int32,System.String,System.Int32)">
            <summary>
            Sets relationship between specified account and contact.
            </summary>
            <param name="accountID">Account to be set</param>
            <param name="where">WHERE condition specifying contacts to be set</param>
            <param name="roleID">Account-contact role to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.SetAccountsIntoContact(System.Int32,System.String,System.Int32)">
            <summary>
            Sets relationship between specified account and contact.
            </summary>
            <param name="contactID">Contact to be set</param>
            <param name="where">WHERE condition specifying contacts to be set</param>
            <param name="roleID">Account-contact role to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.GetAccountContactInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified account and contact.
            </summary>
            <param name="accountId">Account ID</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.SetInfo(CMS.ContactManagement.AccountContactInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.DeleteInfo(CMS.ContactManagement.AccountContactInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.DeleteAllAccountContactsInternal(System.String)">
            <summary>
            Deletes realtionships between specified accounts and contacts defined in where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.UpdateContactRoleInternal(System.Int32,System.String)">
            <summary>
            Updates contact role of relationships between accounts and contacts.
            </summary>
            <param name="roleId">New contact role ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.ResetAccountMainContactsInternal(System.Int32,System.Int32,System.String)">
            <summary>
            Resets main contact IDs of account(s) to NULL if any of the contacts, specified by where-condition, was set as primary or secondary contact.
            </summary>
            <param name="accountId">Account ID - required if called from specific account</param>
            <param name="contactId">Contact ID - required if called from specific contact</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.SetContactsIntoAccountInternal(System.Int32,System.String,System.Int32)">
            <summary>
            Sets relationship between specified account and contact.
            </summary>
            <param name="accountID">Account to be set</param>
            <param name="where">WHERE condition specifying contacts to be set</param>
            <param name="roleID">Account-contact role to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactInfoProvider.SetAccountsIntoContactInternal(System.Int32,System.String,System.Int32)">
            <summary>
            Sets relationship between specified account and contact.
            </summary>
            <param name="contactID">Contact to be set</param>
            <param name="where">WHERE condition specifying contacts to be set</param>
            <param name="roleID">Account-contact role to be set</param>
        </member>
        <member name="T:CMS.ContactManagement.AccountContactListInfo">
            <summary>
            Account-Contact relation class used for listing.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountContactListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountContactListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactListInfo.#ctor">
            <summary>
            Constructor - Creates an empty AccountContactListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AccountContactListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountContactListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.AccountInfo">
            <summary>
            AccountInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountStateID">
            <summary>
            Gets or sets the account's state ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountEmail">
            <summary>
            Gets or sets the account's email address.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountCreated">
            <summary>
            Gets or sets the date and time when the account was created.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountNotes">
            <summary>
            Gets or sets the notes for this account.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountOwnerUserID">
            <summary>
            Gets or sets the user that owns this account.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountAddress2">
            <summary>
            Gets or sets the second line of the account's address.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountCity">
            <summary>
            Gets or sets the account's city.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountFax">
            <summary>
            Gets or sets the account's fax number.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountSecondaryContactID">
            <summary>
            Gets or sets the account's secondary contact ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountID">
            <summary>
            Gets or sets the account's ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountPhone">
            <summary>
            Gets or sets the account's phone number.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountPrimaryContactID">
            <summary>
            Gets or sets the account's primary contact ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountName">
            <summary>
            Gets or sets the account's name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountLastModified">
            <summary>
            Gets or sets the date and time when the account was last modified.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountStatusID">
            <summary>
            Gets or sets the account's status ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountAddress1">
            <summary>
            Gets or sets the first line of the account's address.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountWebSite">
            <summary>
            Gets or sets the account's web site URL.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountSubsidiaryOfID">
            <summary>
            Gets or sets the account that is a parent account to this one.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountGUID">
            <summary>
            Gets or sets the account's GUID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountCountryID">
            <summary>
            Gets or sets the account's country ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.AccountZIP">
            <summary>
            Gets or sets the account's postal code.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountInfo.Subsidiaries">
            <summary>
            Collection of subsidiaries belonging to the account.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.#ctor">
            <summary>
            Constructor - Creates an empty AccountInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AccountInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.GetGlobalPermissionName(System.String)">
            <summary>
            Returns name of the permission used for checking global permissions.
            </summary>
            <param name="permissionName">Name of the original permission</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="T:CMS.ContactManagement.AccountInfoProvider">
            <summary>
            Class providing AccountInfo management.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountInfoProvider.deleteLock">
            <summary>
            Locking object for mass deleting.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.#ctor">
            <summary>
            Constructor which sets weak references for ID caching.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.GetAccounts">
            <summary>
            Returns query for all the accounts objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.GetAccountInfo(System.Int32)">
            <summary>
            Returns account with specified ID.
            </summary>
            <param name="accountId">Account ID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.GetAccountInfo(System.Guid)">
            <summary>
            Returns account with specified GUID.
            </summary>
            <param name="accountGuid">Account GUID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.SetAccountInfo(CMS.ContactManagement.AccountInfo)">
            <summary>
            Sets (updates or inserts) specified account.
            </summary>
            <param name="accountObj">Account to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.DeleteAccountInfo(CMS.ContactManagement.AccountInfo)">
            <summary>
            Deletes specified account.
            </summary>
            <param name="accountObj">Account to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.DeleteAccountInfo(System.Int32)">
            <summary>
            Deletes account with specified ID.
            </summary>
            <param name="accountId">Account ID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.DeleteAccountInfos(System.String,System.Boolean)">
            <summary>
            Deletes accounts by specified WHERE condition.
            </summary>
            <param name="where">SQL WHERE condition</param>
            <param name="deleteSubsidiaries">Delete subsidiaries</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.UpdateAccountHQ(System.Int32,System.String)">
            <summary>
            Updates HQ ID of specified accounts.
            </summary>
            <param name="subsidiaryOfID">HQ ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.UpdateAccountStatus(System.Int32,System.String)">
            <summary>
            Updates account status ID of specified accounts.
            </summary>
            <param name="statusId">Account status ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.UpdateAccountPrimaryContact(System.Int32,System.Int32)">
            <summary>
            Updates primary and secondary contact of all accounts.
            </summary>
            <param name="oldContactID">ID of contact to be replaced</param>
            <param name="newContactID">ID of new contact to replace oldContact</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.SetInfo(CMS.ContactManagement.AccountInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.DeleteInfo(CMS.ContactManagement.AccountInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.DeleteAccountInfosInternal(System.String,System.Boolean)">
            <summary>
            Deletes accounts by WHERE condition
            </summary>
            <param name="where">SQL WHERE condition to specify deleted accounts</param>        
            <param name="deleteSubsidiaries">Indicates if subsidiaries should be deleted</param>        
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.UpdateAccountPrimaryContactInternal(System.Int32,System.Int32)">
            <summary>
            Updates primary and secondary contact of all accounts.
            </summary>
            <param name="oldContactID">ID of contact to be replaced</param>
            <param name="newContactID">ID of new contact to replace oldContact</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.UpdateAccountHQInternal(System.Int32,System.String)">
            <summary>
            Updates HQ ID of specified accounts.
            </summary>
            <param name="subsidiaryOfID">HQ account ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountInfoProvider.UpdateAccountStatusInternal(System.Int32,System.String)">
            <summary>
            Updates account status ID of specified accounts.
            </summary>
            <param name="statusId">Account status ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="T:CMS.ContactManagement.AccountListInfo">
            <summary>
            "Virtual" object for loading data from contact view.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountListInfo.#ctor">
            <summary>
            Constructor - Creates an empty AccountListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AccountListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IAccountContactInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.AccountContactInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IAccountContactInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding structure.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.ContactManagement.AccountContactInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IAccountContactInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding structure.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.ContactManagement.AccountContactInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IAccountContactInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
        </member>
        <member name="M:CMS.ContactManagement.IAccountContactInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.ContactManagement.AccountContactInfo"/> binding.
            </summary>
            <param name="accountId">Account ID.</param>
            <param name="contactId">Contact ID.</param>
        </member>
        <member name="T:CMS.ContactManagement.IAccountInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.AccountInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ActivityConstants">
            <summary>
            Contains constants for internal purposes.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ActivityConstants.ACTIVITY_ITEM_ID">
            <summary>
            Activity item id pseudomacro that is supposed to be replaced by actual value in rule condition.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ActivityConstants.ACTIVITY_ITEM_DETAIL_ID">
            <summary>
            Activity item detail id pseudomacro that is supposed to be replaced by actual value in rule condition.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ActivityListInfo">
            <summary>
            "Virtual" object for loading activities for particular contact (not merged).
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ActivityListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ActivityListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ActivityListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ActivityListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ActivityListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactActivityLogValidator">
            <summary>
            Provides method to determining whether the <see cref="T:CMS.ContactManagement.ContactInfo"/> assigned to the given <see cref="T:CMS.Activities.IActivityInfo"/> exists and is monitored or not.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActivityLogValidator.#ctor(CMS.ContactManagement.IContactInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.ContactActivityLogValidator"/> class.
            </summary>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactActivityLogValidator.IsValid(CMS.Activities.IActivityInfo)">
            <summary>
            Determines whether the <see cref="T:CMS.ContactManagement.ContactInfo"/> assigned to given <paramref name="activity"/> exists and is monitored, i.e. 
            <see cref="P:CMS.ContactManagement.ContactInfo.ContactMonitored"/> property is set to <c>true</c>.
            </summary>
            <param name="activity">Activity to be validated</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="activity"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">Thrown when <see cref="P:CMS.Activities.IActivityInfo.ActivityContactID"/> of given <paramref name="activity"/> has to be greater than <c>0</c></exception>
            <returns>True if assigned <see cref="T:CMS.ContactManagement.ContactInfo"/> exists and is monitored; otherwise, false</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactActivityModifier">
            <summary>
            Modifies activity with contact data.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActivityModifier.Modify(CMS.Activities.IActivityInfo)">
            <summary>
            Updates activity contact id if not already set.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactAccountAction">
            <summary>
            Class for Change contact account action
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountAction.ACCOUNT_GUID_PARAMETER_NAME">
            <summary>
            Account guid parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountAction.ROLE_NAME_PARAMETER_NAME">
            <summary>
            Role name parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountAction.CONTACT_ACTION_PARAMETER_NAME">
            <summary>
            Contact action parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountAction.ACTION_ADD">
            <summary>
            Add to or update contact account action parameter value.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountAction.ACTION_REMOVE">
            <summary>
            Remove from contact account action parameter value.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAccountAction.AccountGUID">
            <summary>
            Account identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAccountAction.RoleName">
            <summary>
            Contact role identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAccountAction.ContactAction">
            <summary>
            Gets current action - 0 for ADD TO, 1 for REMOVE FROM account.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAccountAction.Role">
            <summary>
            Role info object
            Null value possible
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAccountAction.RoleID">
            <summary>
            ID of role
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAccountAction.Account">
            <summary>
            Account info object
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountAction.SetAccountContactRelation">
            <summary>
            Inserts or updated relation between contact and account
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactAccountActionDataProvider">
            <summary>
            Class for providing additional data for <see cref="T:CMS.ContactManagement.ContactAccountAction"/> that will be displayed in automation process designer.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountActionDataProvider.GetStepDescription(System.Int32)">
            <summary>
            Returns description in HTML format for "Change account" steps.
            </summary>
            <param name="stepId">ID of the automation step</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactAutomationAction">
            <summary>
            Base class for contact action.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactAutomationAction.Contact">
            <summary>
            Gets current Contact object.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupAction">
            <summary>
            Class for automation action that modifies relation between contact group and contact
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupAction.CONTACT_GROUP_NAME_PARAMETER_NAME">
            <summary>
            Contact group guid parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupAction.CONTACT_ACTION_PARAMETER_NAME">
            <summary>
            Contact action parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupAction.ACTION_ADD">
            <summary>
            Add to contact group action parameter value.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupAction.ACTION_REMOVE">
            <summary>
            Remove from contact group action parameter value.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupAction.ContactGroupName">
            <summary>
            Contact group identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupAction.ContactAction">
            <summary>
            Gets current action - 0 for ADD, 1 for REMOVE contact from contact group.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupActionDataProvider">
            <summary>
            Class for providing additional data for <see cref="T:CMS.ContactManagement.ContactGroupAction"/> that will be displayed in automation process designer.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupActionDataProvider.GetStepDescription(System.Int32)">
            <summary>
            Returns description in HTML format for "Change group" steps.
            </summary>
            <param name="stepId">ID of the automation step</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactPropertyAction">
            <summary>
            Class for Set attribute value
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactPropertyAction.PROPERTY_NAME_PARAMETER_NAME">
            <summary>
            Property name parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactPropertyAction.PROPERTY_VALUE_PARAMETER_NAME">
            <summary>
            Property value parameter name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactPropertyAction.PropertyName">
            <summary>
            Gets property name
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactPropertyAction.PropertyValue">
            <summary>
            Gets property value
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactPropertyAction.Execute">
            <summary>
            Execute
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactPropertyActionDataProvider">
            <summary>
            Class for providing additional data for <see cref="T:CMS.ContactManagement.ContactPropertyAction"/> that will be displayed in automation process designer.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactPropertyActionDataProvider.GetStepDescription(System.Int32)">
            <summary>
            Returns description in HTML format for "Set contact property" steps.
            </summary>
            <param name="stepId">ID of the automation step</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactStatusAction">
            <summary>
            Class for Set contact status action.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactStatusAction.CONTACT_STATUS_PARAMETER_NAME">
            <summary>
            Contact status parameter name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactStatusAction.ContactStatus">
            <summary>
            Gets selected status
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusAction.Execute">
            <summary>
            Executes action
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactStatusActionDataProvider">
            <summary>
            Class for providing additional data for <see cref="T:CMS.ContactManagement.ContactStatusAction"/> that will be displayed in automation process designer.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusActionDataProvider.GetStepDescription(System.Int32)">
            <summary>
            Returns description in HTML format for "Set contact status" steps.
            </summary>
            <param name="stepId">ID of the automation step</param>
        </member>
        <member name="T:CMS.ContactManagement.CustomActivityAction">
            <summary>
            Class for Log custom activity action.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_TYPE_PARAMETER_NAME">
            <summary>
            Activity type parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_TITLE_PARAMETER_NAME">
            <summary>
            Activity title parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_VALUE_PARAMETER_NAME">
            <summary>
            Activity value parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_URL_PARAMETER_NAME">
            <summary>
            Activity URL parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_CAMPAIGN_PARAMETER_NAME">
            <summary>
            Activity campaign parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_UTM_SOURCE_PARAMETER_NAME">
            <summary>
            Activity UTM source parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_COMMENT_PARAMETER_NAME">
            <summary>
            Activity comment parameter name.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.CustomActivityAction.ACTIVITY_SITE_NAME_PARAMETER_NAME">
            <summary>
            Activity site name parameter name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityTitle">
            <summary>
            Activity title.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityValue">
            <summary>
            Activity value.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityUrl">
            <summary>
            Activity URL.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityCampaign">
            <summary>
            Campaign.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityUTMSource">
            <summary>
            Campaign UTM source.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivityComment">
            <summary>
            Comment.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.CustomActivityAction.ActivitySiteName">
            <summary>
            Site name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CustomActivityAction.Execute">
            <summary>
            Executes action.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.CustomActivityActionDataProvider">
            <summary>
            Class for providing additional data for <see cref="T:CMS.ContactManagement.CustomActivityAction"/> that will be displayed in automation process designer.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CustomActivityActionDataProvider.GetStepDescription(System.Int32)">
            <summary>
            Returns description in HTML format for "Log custom activity" steps.
            </summary>
            <param name="stepId">ID of the automation step</param>
        </member>
        <member name="T:CMS.ContactManagement.DeleteContactAction">
            <summary>
            Class for contact deletion action.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DeleteContactAction.Execute">
            <summary>
            Executes action.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.AccountStatusInfo">
            <summary>
            AccountStatusInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountStatusInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.AccountStatusInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountStatusInfo.AccountStatusDisplayName">
            <summary>
            Gets or sets the account status display name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountStatusInfo.AccountStatusID">
            <summary>
            Gets or sets the account status ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountStatusInfo.AccountStatusName">
            <summary>
            Gets or sets the account status name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.AccountStatusInfo.AccountStatusDescription">
            <summary>
            Gets or sets the account status description.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfo.#ctor">
            <summary>
            Constructor - Creates an empty AccountStatusInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AccountStatusInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.ContactManagement.AccountStatusInfoProvider">
            <summary>
            Class providing AccountStatusInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.#ctor">
            <summary>
            Constructor using ID and codename Hashtables.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.GetAccountStatuses">
            <summary>
            Returns a query for all the AccountStatusInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.GetAccountStatusInfo(System.Int32)">
            <summary>
            Returns account status with specified ID.
            </summary>
            <param name="statusId">Account status ID</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.GetAccountStatusInfo(System.String)">
            <summary>
            Returns account status with specified name.
            </summary>
            <param name="statusName">Account status name</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.SetAccountStatusInfo(CMS.ContactManagement.AccountStatusInfo)">
            <summary>
            Sets (updates or inserts) specified account status.
            </summary>
            <param name="statusObj">Account status to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.DeleteAccountStatusInfo(CMS.ContactManagement.AccountStatusInfo)">
            <summary>
            Deletes specified account status.
            </summary>
            <param name="statusObj">Account status to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountStatusInfoProvider.DeleteAccountStatusInfo(System.Int32)">
            <summary>
            Deletes account status with specified ID.
            </summary>
            <param name="statusId">Account status ID</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactRoleInfo">
            <summary>
            ContactRoleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactRoleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactRoleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactRoleInfo.ContactRoleDescription">
            <summary>
            Gets or sets the contact role description.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactRoleInfo.ContactRoleDisplayName">
            <summary>
            Gets or sets the contact role display name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactRoleInfo.ContactRoleName">
            <summary>
            Gets or sets the contact role name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactRoleInfo.ContactRoleID">
            <summary>
            Gets or sets the contact role ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactRoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactRoleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactRoleInfoProvider">
            <summary>
            Class providing ContactRoleInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.#ctor">
            <summary>
            Constructor using ID and codename Hashtables.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.GetContactRoles">
            <summary>
            Returns a query for all the ContactRoleInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.GetContactRoleInfo(System.Int32)">
            <summary>
            Returns contact role with specified ID.
            </summary>
            <param name="roleId">Contact role ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.GetContactRoleInfo(System.String)">
            <summary>
            Returns contact role with specified name.
            </summary>
            <param name="roleName">Contact role name</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.SetContactRoleInfo(CMS.ContactManagement.ContactRoleInfo)">
            <summary>
            Sets (updates or inserts) specified contact role.
            </summary>
            <param name="roleObj">Contact role to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.DeleteContactRoleInfo(CMS.ContactManagement.ContactRoleInfo)">
            <summary>
            Deletes specified contact role.
            </summary>
            <param name="roleObj">Contact role to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactRoleInfoProvider.DeleteContactRoleInfo(System.Int32)">
            <summary>
            Deletes contact role with specified ID.
            </summary>
            <param name="roleId">Contact role ID</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactStatusInfo">
            <summary>
            ContactStatusInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactStatusInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactStatusInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactStatusInfo.ContactStatusDescription">
            <summary>
            Gets or set the contact status description.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactStatusInfo.ContactStatusName">
            <summary>
            Gets or set the contact status name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactStatusInfo.ContactStatusDisplayName">
            <summary>
            Gets or set the contact status display name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactStatusInfo.ContactStatusID">
            <summary>
            Gets or set the contact status ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactStatusInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactStatusInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactStatusInfoProvider">
            <summary>
            Class providing ContactStatusInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.#ctor">
            <summary>
            Constructor using ID and codename Hashtables.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.GetContactStatuses">
            <summary>
            Returns a query for all the ContactStatusInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.GetContactStatusInfo(System.Int32)">
            <summary>
            Returns contact status with specified ID.
            </summary>
            <param name="statusId">Contact status ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.GetContactStatusInfo(System.String)">
            <summary>
            Returns contact status with specified name.
            </summary>
            <param name="statusName">Contact status name</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.SetContactStatusInfo(CMS.ContactManagement.ContactStatusInfo)">
            <summary>
            Sets (updates or inserts) specified contact status.
            </summary>
            <param name="statusObj">Contact status to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.DeleteContactStatusInfo(CMS.ContactManagement.ContactStatusInfo)">
            <summary>
            Deletes specified contact status.
            </summary>
            <param name="statusObj">Contact status to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactStatusInfoProvider.DeleteContactStatusInfo(System.Int32)">
            <summary>
            Deletes contact status with specified ID.
            </summary>
            <param name="statusId">Contact status ID</param>
        </member>
        <member name="T:CMS.ContactManagement.IAccountStatusInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.AccountStatusInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactRoleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactRoleInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactStatusInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactStatusInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactChangeData">
            <summary>
            Container for the contact change data.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.ContactManagement.ContactChangeData"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.#ctor(CMS.Base.IDataContainer)">
            <summary>
            Creates new instance of <see cref="T:CMS.ContactManagement.ContactChangeData"/> and set up its properties from given <paramref name="dataRowContainer"/>.
            </summary>
            <param name="dataRowContainer">Data row container containing the data used for creating the <see cref="T:CMS.ContactManagement.ContactChangeData"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataRowContainer"/> is <c>null</c></exception>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeData.ContactID">
            <summary>
            Contact ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeData.ChangedColumns">
            <summary>
            List of columns which have changed. Is null when <see cref="P:CMS.ContactManagement.ContactChangeData.ContactIsNew"/> is true.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeData.ContactIsNew">
            <summary>
            If true the change represents a new contact creation. <see cref="P:CMS.ContactManagement.ContactChangeData.ChangedColumns" /> are not included if contact is new.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeData.ContactWasMerged">
            <summary>
            Gets or sets the value indicating if the contact was automatically merged.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.Equals(System.Object)">
            <summary>
            Returns true if the object equals to another.
            </summary>
            <param name="obj">Object to compare to</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.CompareColumns(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Compares the two lists of columns
            </summary>
            <param name="list1">First list</param>
            <param name="list2">Second list</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.GetHashCode">
            <summary>
            Gets the object hash code
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeData.FillDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Fills given <paramref name="dataContainer"/> with values from current <see cref="T:CMS.ContactManagement.ContactChangeData"/>.
            </summary>  
            <param name="dataContainer">Data container to be filled</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataContainer"/> is <c>null</c></exception>
        </member>
        <member name="T:CMS.ContactManagement.ContactChangeLogWorker">
            <summary>
            Logs <see cref="T:CMS.ContactManagement.ContactChangeData"/> into the memory queue and periodically bulk inserts it into the DB.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeLogWorker.#ctor">
            <summary>
            Instantiates new instance of <see cref="T:CMS.ContactManagement.ContactChangeLogWorker"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeLogWorker.ProcessItemsImmediately">
            <summary>
            Runs the worker process immediately bypassing the <see cref="P:CMS.ContactManagement.ContactChangeLogWorker.DefaultInterval"/>. This method should be used only in special cases such as test methods.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeLogWorker.DefaultInterval">
            <summary>
            Gets the interval in milliseconds for the worker.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeLogWorker.Finish">
            <summary>
            Finishes the worker process. Implement this method to specify what the worker must do in order to not lose its internal data when being finished. Leave empty if no extra action is required.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeLogWorker.LogContactChange(CMS.ContactManagement.ContactChangeData)">
            <summary>
            Adds UTM parameters to processing queue.
            </summary>
            <param name="contactChangeData">Contact change data to be logged</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeLogWorker.ProcessItem(CMS.ContactManagement.ContactChangeData)">
            <summary>
            Processing of single item. In this implementation this method is not called at all.
            </summary>
            <param name="item">Item to be processed.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeLogWorker.ProcessItems(System.Collections.Generic.IEnumerable{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Processing of all items.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactChangeQueueRepository">
            <summary>
            Represents contact changes repository for storing the <see cref="T:CMS.ContactManagement.ContactChangeData"/> into the contact change queue.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeQueueRepository.Save(CMS.ContactManagement.ContactChangeData)">
            <summary>
            Saves given <paramref name="contactChangeData"/> into the contact change queue.
            </summary>
            <param name="contactChangeData">Contact change to be saved</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactChangeData"/> is <c>null</c></exception>
        </member>
        <member name="T:CMS.ContactManagement.ContactChangeRecalculationQueueInfo">
            <summary>
            ContactChangeRecalculationQueueInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.ContactChangeRecalculationQueueID">
            <summary>
            Contact change recalculation queue ID
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.ContactChangeRecalculationQueueContactID">
            <summary>
            Contact change recalculation queue contact ID
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.ContactChangeRecalculationQueueChangedColumns">
            <summary>
            Contact change recalculation queue changed columns
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.ContactChangeRecalculationQueueContactIsNew">
            <summary>
            Contact change recalculation queue contact is new
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.ContactChangeRecalculationQueueContactWasMerged">
            <summary>
            Contact change recalculation queue contact was merged or split
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactChangeRecalculationQueueInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactChangeRecalculationQueueInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactChangeRecalculationQueueInfoProvider">
            <summary>
            Class providing ContactChangeRecalculationQueueInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactChangeRecalculationQueueInfoProvider.BulkInsert(System.Collections.Generic.IEnumerable{CMS.DataEngine.Internal.IDataTransferObject})">
            <summary>
            Bulk inserts the given <paramref name="contactChange"/>.
            </summary>
            <param name="contactChange">Data table containing values to be inserted</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactChangeQueueRecalculationProvider">
            <summary>
            Provides method for reading the contact changes from the SQL database.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactChangeQueueRecalculationProvider.Dequeue">
            <summary>
            Returns top 10000 items from the queue and at the same time it removes them from the queue.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactChangeRecalculationQueueInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactChangeRecalculationQueueInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactChangeRepository">
            <summary>
            Represents contact change repository.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.IContactChangeRepository.Save(CMS.ContactManagement.ContactChangeData)">
            <summary>
             Saves given <paramref name="contactChangeData"/> info to repository.
            </summary>
            <param name="contactChangeData">Contact change to be saved</param>
        </member>
        <member name="T:CMS.ContactManagement.SqlContactChangeQueueRecalculationProvider">
            <summary>
            Provides method for reading the contact changes from the SQL database.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.SqlContactChangeQueueRecalculationProvider.Dequeue">
            <summary>
            Returns top 10000 items from the queue and at the same time it removes them from the queue.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.CustomerContactDataPropagationChecker">
            <summary>
            Checks whether the propagation of cutomer data to Contact object is allowed.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CustomerContactDataPropagationChecker.IsAllowed">
            <summary>
            Checks whether the propagation of cutomer data to Contact object is allowed.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.UserContactDataPropagationChecker">
            <summary>
            Checks whether the propagation of <see cref="T:CMS.Membership.UserInfo"/> data to Contact object is allowed.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.UserContactDataPropagationChecker.IsAllowed">
            <summary>
            Checks whether the propagation of <see cref="T:CMS.Membership.UserInfo"/> data to Contact object is allowed.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupContactListInfo">
            <summary>
            Contact group contacts list
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupContactListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupContactListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupContactListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactGroupContactListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupContactListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactGroupContactListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupContactListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupContactListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupHandlers">
            <summary>
            Event handlers of the ContactGroups module.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupHandlers.Init">
            <summary>
            Subscribes to events.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupHandlers.EvaluateContactGroupsForContactActionsBatch(System.Object,CMS.ContactManagement.ProcessContactActionsBatchEventArgs)">
            <summary>
            Evaluates all dynamic contact groups after batch of contact actions is logged.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupHandlers.RebuildContactGroups(System.Collections.Generic.IList{CMS.Activities.IActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Rebuilds dynamic contact groups for given contacts.
            </summary>
            <param name="loggedActivities">List of performed activities</param>
            <param name="loggedContactChanges">List of contact's changes</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupHandlers.GetDynamicContactGroups">
            <summary>
            Returns dynamic groups.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupInfo">
            <summary>
            ContactGroupInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupDisplayName">
            <summary>
            Gets or sets the display name of the contact group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupDescription">
            <summary>
            Gets or sets the description of the contact group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupID">
            <summary>
            Gets or sets the ID of the contact group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupName">
            <summary>
            Gets or sets the name of the contact group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupDynamicCondition">
            <summary>
            Gets or sets the macro condition of given group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupEnabled">
            <summary>
            Gets or sets if the contact group is enabled.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupLastModified">
            <summary>
            Gets or sets the date and time when the contact group was last modified.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupGUID">
            <summary>
            Gets or sets the contact group's unique identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.ContactGroupStatus">
            <summary>
            Gets or sets status of dynamic contact group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupInfo.IsRebuildScheduled">
            <summary>
            Gets whether the contact group is being automatically rebuilt.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactGroupInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactGroupInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.GetGlobalPermissionName(System.String)">
            <summary>
            Returns name of the permission used for checking global permissions.
            </summary>
            <param name="permissionName">Name of the original permission</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes dependencies when deleting contact group.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfo.RegisterProperties">
            <summary>
            Register the custom properties
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupInfoProvider">
            <summary>
            Class providing ContactGroupInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.#ctor">
            <summary>
            Constructor using ID and codename Hashtables.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.GetContactGroups">
            <summary>
            Returns a query for all the ContactGroupInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.GetContactGroupInfo(System.Int32)">
            <summary>
            Returns contact group with specified ID.
            </summary>
            <param name="groupId">Contact group ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.GetContactGroupInfo(System.String)">
            <summary>
            Returns contact group with specified name.
            </summary>
            <param name="groupName">Contact group name</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.SetContactGroupInfo(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Sets (updates or inserts) specified contact group.
            </summary>
            <param name="groupObj">Contact group to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.DeleteContactGroupInfo(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Deletes specified contact group.
            </summary>
            <param name="groupObj">Contact group to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoProvider.DeleteContactGroupInfo(System.Int32)">
            <summary>
            Deletes contact group with specified ID.
            </summary>
            <param name="groupId">Contact group ID</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupMemberInfo">
            <summary>
            ContactGroupMembersInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemberInfo.OBJECT_TYPE_CONTACT">
            <summary>
            Object type for contact
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemberInfo.OBJECT_TYPE_ACCOUNT">
            <summary>
            Object type for account
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemberInfo.TYPEINFOCONTACT">
            <summary>
            Type information for group members of type contact.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemberInfo.TYPEINFOACCOUNT">
            <summary>
            Type information for group members of type account.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberID">
            <summary>
            Gets or sets the ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberType">
            <summary>
            Gets or sets the type of the related object.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberContactGroupID">
            <summary>
            Gets or sets the ID of the contact group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberRelatedID">
            <summary>
            Gets or sets the ID of the related object - contact or account.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberFromCondition">
            <summary>
            Gets or sets value indicating if current contact group member is added from dynamic condition.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberFromAccount">
            <summary>
            Gets or sets value indicating if current contact group member is added as an account member.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.ContactGroupMemberFromManual">
            <summary>
            Gets or sets value indicating if current contact group member is manually added.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMemberInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactGroupMemberInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactGroupMemberInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupMemberInfoProvider">
            <summary>
            Class providing ContactGroupMemberInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetRelationships">
            <summary>
            Returns a query of all relationships among contact groups, related objects of specific types.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetContactGroupMemberInfo(System.Int32)">
            <summary>
            Returns relationship by ID.
            </summary>
            <param name="contactGroupMemberId">Contact group member ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.Get(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Gets an instance of the <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding structure.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
            <returns>Returns an instance of <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetAsync(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding structure.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetContactGroupMemberInfoByData(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Returns relationship among specified contact group and related object of specific type.
            </summary>
            <param name="groupId">Contact group ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Member type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.SetContactGroupMemberInfo(CMS.ContactManagement.ContactGroupMemberInfo)">
            <summary>
            Sets relationship among specified contact group and related object of specific type.
            </summary>
            <param name="infoObj">Contact group-related object-object type relationship to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.Add(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum,CMS.ContactManagement.MemberAddedHowEnum)">
            <summary>
            Creates <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
            <param name="addedHow">Possible types of contact addition into contact group.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.SetContactGroupMemberInfo(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum,CMS.ContactManagement.MemberAddedHowEnum)">
            <summary>
            Sets relationship among specified contact group and related object of specific type.
            </summary>	
            <param name="groupId">Contact group ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Member type</param>
            <param name="addedHow">Possible types of contact addition into contact group</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetContactGroupMembers(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Gets contacts in a given contact group.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
            <param name="monitoringEnabled">Indicates if bounced e-mail monitoring is enabled</param>
            <param name="bounceLimit">Bounce e-mail limit</param>
            <remarks>If bounced e-mail monitoring is enabled, only contacts that have less bounces then bounce limit are returned.</remarks>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteContactGroupMemberInfo(CMS.ContactManagement.ContactGroupMemberInfo)">
            <summary>
            Deletes relationship among specified contact group and related object of specific type.
            </summary>
            <param name="infoObj">Contact group-related object-object type relationship to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteContactGroupMemberInfo(System.Int32)">
            <summary>
            Deletes relationship specified by ID.
            </summary>
            <param name="contactGroupMemberId">Contact group member ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.Remove(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Deletes <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteContactGroupMemberInfo(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Deletes relationship among specified contact group and related object of specific type.
            </summary>
            <param name="groupId">Contact group ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Member type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteMemberInfosForContact(System.Int32)">
            <summary>
            Removes specified contact from all groups.
            </summary>
            <param name="contactId">Contact to be removed from groups</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteContactGroupMembers(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Deletes relationships between specified contact groups and related objects (contact, account) defined in where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="contactGroupID">Current groupID. Used only when deleting accounts and removing its contacts.</param>
            <param name="deletingAccount">Indicates if deleting accounts. If TRUE then also contacts will be removed as well.</param>
            <param name="removeAccount">If TRUE then account will be deleted, not only its contacts. Applicable only when deleting accounts.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetNumberOfContactsInGroup(System.Int32)">
            <summary>
            Returns number of contacts in specified contact group.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.SetContactsAsDynamic(CMS.ContactManagement.ContactGroupInfo,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets contacts represented by <paramref name="contactIDsToBeAdded"/> as dynamic members of given Contact Group. 
            Preserves all existing memberships that are not dynamic (manual or from account).
            </summary>
            <param name="contactGroup">Contact group in which the contacts will be assigned (and removed)</param>
            <param name="contactIDsToBeAdded">Contacts that will be set as dynamic in given contact group</param>
            <param name="allContactIDs">
            Contacts which are present in this list and are not in <paramref name="contactIDsToBeAdded"/> will be removed from the group by dynamic condition. 
            If null, this method will remove all contacts which are not in <paramref name="contactIDsToBeAdded"/> from group.
            </param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.SetContactAsDynamic(CMS.ContactManagement.ContactInfo,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets a contact represented by <paramref name="contact"/> as dynamic members of given contact groups represented by <paramref name="contactGroupIDs"/>.
            Preserves all existing memberships that are not dynamic (manual or from account).
            </summary>
            <param name="contact">Contact which will be assigned (and removed) as dynamic member</param>
            <param name="contactGroupIDs">Contact groups that will be set as dynamic membership for given contact group</param>
            <param name="allContactGroupIDs">Contact groups that are in this list and not in <paramref name="contactGroupIDs"/> will be unassigned from <paramref name="allContactGroupIDs"/></param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetContactGroupMemberInfoByDataInternal(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Returns relationship among specified contact group and related object of specific type.
            </summary>
            <param name="groupId">Contact group ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Membership type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.SetInfo(CMS.ContactManagement.ContactGroupMemberInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteInfo(CMS.ContactManagement.ContactGroupMemberInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.DeleteContactGroupMembersInternal(System.String)">
            <summary>
            Deletes relationships between specified contact groups and related objects (contact, account) defined in where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberInfoProvider.GetNumberOfContactsInGroupInternal(System.Int32)">
            <summary>
            Returns number of contacts in specified contact group.
            </summary>
            <param name="contactGroupId">Contact group ID</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupMemberTypeEnum">
            <summary>
            Types of contact group members used by ContactGroupInfo object.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemberTypeEnum.Contact">
            <summary>
            Contact
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemberTypeEnum.Account">
            <summary>
            Account
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupRebuildTaskManager">
            <summary>
            Manages scheduled tasks responsible for rebuilding contact groups.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.EnableScheduledTask(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Enables scheduled task connected to the given contact group.
            If such task does not exits, creates a new one.
            </summary>
            <param name="contactGroup">Contact group containing the scheduled task</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactGroup"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.DisableScheduledTask(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Disables scheduled task connected to the given contact group.
            Does nothing when scheduled task does not exist.
            </summary>
            <param name="contactGroup">Contact group containing the scheduled task</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactGroup"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.GetScheduledTask(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Gets the scheduled task responsible for rebuilding the given contact group.
            </summary>
            <param name="contactGroup">Contact group</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactGroup"/> is null</exception>
            <remarks>Result is cached for 10 minutes under the key starting with "ContactGroupRebuildTaskManager".</remarks>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.DeleteScheduledTask(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Deletes scheduled task related to given contact group if exists.
            </summary>
            <param name="contactGroup">Contact group containing the scheduled task</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactGroup"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.CreateScheduledTask(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Creates new scheduled task with basic properties set.
            </summary>
            <remarks>
            When creating new scheduled task, execution time is set to off peak time.
            </remarks>
            <param name="contactGroup">Contact group info</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.GetRandomOffPeakDateTime">
            <summary>
            Gets randomly chosen date time from the interval 2 AM – 6 AM. The date part will be set to 01/01/0001.
            </summary>
            <remarks>
            The difference between random times is always 5 minutes k-fold.
            </remarks>
            <returns>Random DateTime from the off peak interval</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuildTaskManager.GenerateDefaultTaskInterval">
            <summary>
            Creates default task interval used when creating new task info. 
            </summary>
            <remarks>
            Time will be randomly chosen from interval 2 AM – 6 AM in order to fit execution to off peak time.
            Uses interval of one day, every day in week.
            </remarks>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupStatusEnum">
            <summary>
            Types of contact group status used by ContactGroupInfo object.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupStatusEnum.Unspecified">
            <summary>
            Unspecified
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupStatusEnum.Ready">
            <summary>
            Ready
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupStatusEnum.Rebuilding">
            <summary>
            Rebuilding
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupStatusEnum.ConditionChanged">
            <summary>
            Condition changed - rebuild is required
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupUsageDataSource">
            <summary>
            Provides statistical information about contact groups.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupUsageDataSource.GetData">
            <summary>
            Add contact groups statistics to the usage data collection.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupUsageDataSource.GetEnabledDynamicGroupsCount(System.Collections.Generic.IEnumerable{CMS.ContactManagement.ContactGroupInfo})">
            <summary>
            Returns number of dynamic contact groups.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupUsageDataSource.GetEnabledStaticGroupCount(System.Collections.Generic.IEnumerable{CMS.ContactManagement.ContactGroupInfo})">
            <summary>
            Returns number of static contact groups.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupUsageDataSource.GetContactsCountPerContactGroup">
            <summary>
            Returns number of contacts per each contact group.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupUsageDataSource.GetNumberOfContactGroupsWithAccount">
            <summary>
            Returns how many contact groups contains account.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupMemoryRebuilder">
            <summary>
            Rebuilds the whole contact group by fetching all contacts into the memory and evaluating macro condition on them one by one.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemoryRebuilder.mCachedResolver">
            <summary>
            Cached MacroResolver.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactGroupMemoryRebuilder.PAGE_SIZE">
            <summary>
            Size of page used when recalculating contacts.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemoryRebuilder.RebuildGroup(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Rebuilds a contact group.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemoryRebuilder.RebuildPartOfContactGroup(CMS.ContactManagement.ContactGroupInfo,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Rebuilds only contacts with specified contact IDs.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemoryRebuilder.RebuildGroupsForContact(CMS.ContactManagement.ContactInfo,System.Collections.Generic.List{CMS.ContactManagement.ContactGroupInfo})">
            <summary>
            Rebuilds membership in all contact groups for given contact.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemoryRebuilder.EvaluateDynamicMembership(CMS.ContactManagement.ContactGroupInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Evaluates dynamic membership of a contact in given contact group.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupRebuilder">
            <summary>
            Class for contact group rebuilding.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuilder.#ctor">
            <summary>
            Initializes new instance of <see cref="T:CMS.ContactManagement.ContactGroupRebuilder"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuilder.RebuildGroup(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Rebuilds the whole contact group using the fastest possible rebuilder. This method works synchronously.
            </summary>
            <param name="contactGroup">Contact group to be rebuilt</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupRebuilder.RebuildPartOfContactGroup(CMS.ContactManagement.ContactGroupInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Adds or removes specific contactIDs into the contact group.
            </summary>
            <param name="contactGroup">Contact group to be rebuilded</param>
            <param name="contactIDs">Contacts whose membership in the group will be reevaluated</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupSqlRebuilder">
            <summary>
            Rebuilds the whole contact group. Rebuild is done by converting dynamic macro condition to SQL query and thus leaving most of 
            the work on the SQL Server.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupSqlRebuilder.#ctor(CMS.ContactManagement.ContactGroupInfo)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupSqlRebuilder.CanBeRebuilt">
            <summary>
            Checks whether the contact group has been set and can be recalculated.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupSqlRebuilder.RebuildGroup">
            <summary>
            Recalculates the contact group.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupSqlRebuilder.RebuildPartOfContactGroup(System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Reevaluates membership of the given contacts in the contact group.
            </summary>
            <param name="contactIDs">Contacts whose membership in the group will be reevaluated</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupInfoExtensions">
            <summary>
            Extensions of <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoExtensions.IsAffectedByActivityType(CMS.ContactManagement.ContactGroupInfo,System.String)">
            <summary>
            Checks whether given contact group is affected by given activity type, that means if it needs to be recalculated when it performs.
            </summary>
            <param name="cg">Contact group to check the activity type for</param>
            <param name="activityType">Activity to check affection for. You can use predefined types from <see cref="T:CMS.Activities.PredefinedActivityType"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="activityType"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupInfoExtensions.IsAffectedByAttributeChange(CMS.ContactManagement.ContactGroupInfo,System.String)">
            <summary>
            Checks whether given contact group is affected by contact attribute change, that means if it needs to be recalculated when attribute has changed.
            </summary>
            <param name="cg">Contact group to check the attribute affection</param>
            <param name="attribute">Name of the changed attribute column</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="attribute"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.AffectedContactGroupsFilter">
            <summary>
            Filter used for removing contact groups which should not be recalculated after queuing period.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AffectedContactGroupsFilter.FilterContactGroups(System.Collections.Generic.IList{CMS.ContactManagement.ContactGroupInfo},System.Collections.Generic.ISet{System.String},System.Collections.Generic.ISet{System.String})">
            <summary>
            Filter contact groups to match only the ones that are affected either by activity or attribute change.
            </summary>
            <param name="contactGroups">Contact groups to be filtered</param>
            <param name="activityTypes">Collection of logged activity types</param>
            <param name="changedColumns">Collection of logged contact column changes</param>
            <returns>Filtered collection of contact groups with removed duplicities</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactsAffectingContactGroupFilter">
            <summary>
            Filter used for removing contacts for which should contact group not be recalculated after queuing period.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactsAffectingContactGroupFilter.FilterContacts(CMS.ContactManagement.ContactGroupInfo,System.Collections.Generic.IList{CMS.Activities.IActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Gets set of contacts affecting the given contact group.
            </summary>
            <param name="contactGroup">Contact group to be checked against</param>
            <param name="activities">List of logged activities</param>
            <param name="contactChanges">List of logged contact changes</param>
            <returns>Set of filtered contact IDs</returns>
        </member>
        <member name="T:CMS.ContactManagement.IContactGroupInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactGroupInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactGroupMemberInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactGroupMemberInfoProvider.Get(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Gets an instance of the <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding structure.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
            <returns>Returns an instance of <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IContactGroupMemberInfoProvider.GetAsync(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding structure.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IContactGroupMemberInfoProvider.Remove(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum)">
            <summary>
            Deletes <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
        </member>
        <member name="M:CMS.ContactManagement.IContactGroupMemberInfoProvider.Add(System.Int32,System.Int32,CMS.ContactManagement.ContactGroupMemberTypeEnum,CMS.ContactManagement.MemberAddedHowEnum)">
            <summary>
            Creates <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> binding.
            </summary>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="relatedObjectId">Related object ID.</param>
            <param name="memberType">Member type.</param>
            <param name="addedHow">Possible types of contact addition into contact group.</param>
        </member>
        <member name="T:CMS.ContactManagement.MemberAddedHowEnum">
            <summary>
            Possible types of how can be contact added to contact group.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MemberAddedHowEnum.Dynamic">
            <summary>
            Contact is added through dynamic macro evaluation.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MemberAddedHowEnum.Account">
            <summary>
            Contact is added through account which is member of contact group.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MemberAddedHowEnum.Manual">
            <summary>
            Contact is manually added.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementContext">
            <summary>
            Contact context method and variables.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementContext.CurrentContact">
            <summary>
            Current contact info.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementContext.CurrentContactID">
            <summary>
            Current contact ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementContext.GetCurrentContact(System.Boolean)">
            <summary>
            Returns current contact. Tries to find contact in persistent storage, obtains it from the users or tries to recognize
            it according to known information. If no contact can be found and <paramref name="createAnonymous"/> is true (default), it creates a new anonymous contact. If Online marketing is 
            not enabled or there is no license for ContactManagement found, null is returned. Also, null is returned if request
            is made by crawler (googlebot, etc.). Currently authenticated user is used to find contacts.
            </summary>
            <param name="createAnonymous">Indicates whether anonymous contact should be created if no contact information can be found.</param>
            <returns>Current contact</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementContext.UpdateUserLoginContact(System.String)">
            <summary>
            Returns the contact assigned to the specified user. The contact is retrieved from persistent storage and is compared with all the contacts related to the given user.
            Applies contact merging to resolve the conflicts when the selected contact is already in relationship with another user.
            </summary>
            <remarks>
            Use only for login and registration purposes.
            The method has no effect and returns null if the ContactManagement feature is disabled or unavailable in the license.
            </remarks>      
            <param name="userName">Username of user the contact must be assigned to.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementContext.SetCurrentContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Stores contact in request items, session or cookies.
            </summary>
            <param name="contact">Contact to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementContext.SetCurrentContactInternal(CMS.ContactManagement.ContactInfo)">
            <summary>
            Stores contact in request items, session or cookies.
            </summary>
            <param name="contact">Contact to be set</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementUsageDataSource">
            <summary>
            Module usage tracking data source for contact management module.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactManagementUsageDataSource.mSettingsToLog">
            <summary>
            Settings keys which are logged.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementUsageDataSource.GetData">
            <summary>
            Get all module statistical data.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementUsageDataSource.GetSettingsUsage(System.Boolean)">
            <summary>
            Returns how many times is specific setting used with value which is not same as default value. 
            Only settings on running sites (if <paramref name="global"/> is true), not hidden and not custom are retrieved.
            Only global settings when <paramref name="global"/> is false.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactAccountListInfo">
            <summary>
            Contact-Account relation table.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactAccountListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactAccountListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactAccountListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactAccountListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfo">
            <summary>
            ContactInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactEmail">
            <summary>
            Gets or sets the contact's e-mail address.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactLastModified">
            <summary>
            Gets or sets the date and time when the contact was last modified.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactMonitored">
            <summary>
            Gets or sets whether this contact is monitored.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactBirthday">
            <summary>
            Gets or sets the contact's birth date.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactGender">
            <summary>
            Gets or sets the contact's gender.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactFirstName">
            <summary>
            Gets or sets the contact's first name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactCountryID">
            <summary>
            Gets or sets the contact's country ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactID">
            <summary>
            Gets or sets the contact's ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactMobilePhone">
            <summary>
            Gets or sets the contact's mobile phone number.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactLastName">
            <summary>
            Gets or sets the contact's last name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactCity">
            <summary>
            Gets or sets the contact's city.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactIsAnonymous">
            <summary>
            Gets or sets whether the contact is anonymous.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactOwnerUserID">
            <summary>
            Gets or sets the ID of the user that owns this contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactCreated">
            <summary>
            Gets or sets the the date and time when the contact was created.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactGUID">
            <summary>
            Gets or sets the contact's unique identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactJobTitle">
            <summary>
            Gets or sets the contact's job title.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactStateID">
            <summary>
            Gets or sets the contact's state ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactAddress1">
            <summary>
            Gets or sets the first line of the contact's address.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactNotes">
            <summary>
            Gets or sets the notes for this contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactZIP">
            <summary>
            Gets or sets the contact's postal code.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactMiddleName">
            <summary>
            Gets or sets the contact's middle name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactBusinessPhone">
            <summary>
            Gets or sets the contact's business phone number.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactStatusID">
            <summary>
            Gets or sets the contact's status ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactCampaign">
            <summary>
            Gets or sets the contact's campaign
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactCompanyName">
            <summary>
            Gets or sets the contact's e-company name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactPersonaID">
            <summary>
            Gets or sets persona ID the contact belongs to or null, if no such persona exists.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactAge">
            <summary>
            Gets the contact's age (returns 0 if contact's birthday is not set).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactDescriptiveName">
            <summary>
            Gets the contact full name with 'merged'/'global' flags.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.Accounts">
            <summary>
            Collection of the accounts belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.Orders">
            <summary>
            Collection of all contact orders.
            Contact does not have any orders even thou its merged contact have them.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.PurchasedProducts">
            <summary>
            Collection of all contacts purchased products from all sites.
            Global contact does not have any products even thou its merged site contact have them.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.Wishlist">
            <summary>
            Collection of all contacts wishlist items from all sites.
            Global contact does not have any wishlist items even thou its merged site contact have them.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.Users">
            <summary>
            Collection of all contacts users. Global contact does not have any users even thou its merged site contact have them.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.Roles">
            <summary>
            Collection of all contacts roles.
            Global contact does not have any roles even thou its merged site contact have them.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactGroups">
            <summary>
            Collection of all contacts groups. Value is cached for 1 minute.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.LastActivity">
            <summary>
            Last activity of the contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.CurrentIPStored">
            <summary>
            Indicates if contact already visited site and is IP and User-Agent information are stored in session.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfo.ContactCreatedInAdministration">
            <summary>
            Determines whether the contact was created manually from the administration or automatically during the request.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.RegisterProperties">
            <summary>
            Register the custom properties
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.GetGlobalPermissionName(System.String)">
            <summary>
            Returns name of the permission used for checking global permissions.
            </summary>
            <param name="permissionName">Name of the original permission</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.MarkAsMerged">
            <summary>
            Marks the contact as merged. Affects how changed columns are propagated to the log changes queue.
            </summary>
            <seealso cref="M:CMS.ContactManagement.ContactInfoProvider.Set(CMS.ContactManagement.ContactInfo)"/>
            <seealso cref="M:CMS.ContactManagement.ContactInfoProvider.SetContactInfo(CMS.ContactManagement.ContactInfo,System.Boolean)"/>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfo.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged according to the asUnchanged parameter.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfoProvider">
            <summary>
            Class providing ContactInfo management.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactInfoProvider.deleteLock">
            <summary>
            Delete lock
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.#ctor">
            <summary>
            Constructor which enables weak reference caching by ID and GUID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContacts">
            <summary>
            Returns a query for all the ContactInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactInfo(System.Int32)">
            <summary>
            Returns contact with specified ID.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactInfo(System.Guid)">
            <summary>
            Returns contact with specified GUID.
            </summary>
            <param name="contactGuid">Contact GUID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactInfo(System.String)">
            <summary>
            Returns contact with specified email.
            </summary>
            <param name="email">Email to be searched for.</param>          
            <returns><see cref="T:CMS.ContactManagement.ContactInfo"/> with provided email or <c>null</c> if no contact with given email found.
            If more contacts with such email exists most recent one is returned.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.Set(CMS.ContactManagement.ContactInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
            <seealso cref="M:CMS.ContactManagement.ContactInfo.MarkAsMerged"/>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.SetContactInfo(CMS.ContactManagement.ContactInfo,System.Boolean)">
            <summary>
            Sets (updates or inserts) specified contact.
            </summary>
            <param name="contactObj">Contact to be set</param>
            <param name="wasMerged">Determines whether the given contact was merged and therefore the process should propagate the value to the log changes queue</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfo(CMS.ContactManagement.ContactInfo)">
            <summary>
            Deletes specified contact.
            </summary>
            <param name="contactObj">Contact to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfo(System.Int32)">
            <summary>
            Deletes contact with specified ID.
            </summary>
            <param name="contactId">Contact ID of the contact to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfos(System.String,System.Int32)">
            <summary>
            Deletes all infos by stored procedure.
            </summary>
            <param name="whereCondition">Where condition</param>
            <param name="batchLimit">Batch limit.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateLeadReplicationStatus(CMS.ContactManagement.ContactInfo,System.DateTime)">
            <summary>
            Updates the specified contact in database with information related to Salesforce lead replication.
            </summary>
            <param name="contact">The contact to update.</param>
            <param name="lastLeadReplicationDateTime">The date and time of contact's last successful replication.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.RequireLeadReplication(CMS.ContactManagement.ContactInfo)">
            <summary>
            Marks the specified contact as required for lead replication despite its score.
            </summary>
            <param name="contact">The contact to mark for lead replication.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactIDByEmail(System.String)">
            <summary>
            Finds contact for given email address.
            </summary>
            <returns>Returns contact id for given email address, returns 0 if contact is not found.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactFullName(System.Int32)">
            <summary>
            Returns full contact name consisting of first, middle and last name.
            </summary>
            <param name="id">Contact info ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactFullName(CMS.ContactManagement.ContactInfo)">
            <summary>
            Returns full contact name consisting of first, middle and last name.
            </summary>
            <param name="ci">Contact info object</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateContactStatus(System.Int32,System.String)">
            <summary>
            Updates contact status ID of specified contacts.
            </summary>
            <param name="statusId">Contact status ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.AddContactBounce(System.Int32)">
            <summary>
            Increments number of bounces by one for specified contact.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.AddContactBounceByEmail(System.String)">
            <summary>
            Increments number of bounces by one for all contacts specified by e-mail address across all sites.
            </summary>
            <param name="email">E-mail address</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.RemovePersonaFromContacts(System.Int32)">
            <summary>
            Removes given persona from contacts. Sets column ContactPersonaID to NULL on contacts where this column equals to given persona ID.
            </summary>
            <param name="personaID">This persona will be removed from contacts</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactInfoInternal(System.Int32)">
            <summary>
            Returns contact with specified ID.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactInfoInternal(System.Guid)">
            <summary>
            Returns contact with specified GUID.
            </summary>
            <param name="contactGuid">Contact GUID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContactInfoInternal(System.String)">
            <summary>
            Returns contact with specified email.
            </summary>
            <param name="email">Contact email or <c>null</c> if no contact with given email found.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.SetContactInfoInternal(CMS.ContactManagement.ContactInfo,System.Boolean)">
            <summary>
            Sets (updates or inserts) specified contact.
            </summary>
            <param name="contactObj">Contact to be set</param>
            <param name="wasMerged">Determines whether the given contact was merged and therefore the process should propagate the value to the log changes queue</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfosInternal(System.String,System.Int32)">
            <summary>
            Deletes all contacts by specified ID. 
            </summary>
            <param name="where">Where condition</param>
            <param name="batchLimit">Batch limit</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateLeadReplicationStatusInternal(CMS.ContactManagement.ContactInfo,System.DateTime)">
            <summary>
            Updates the specified contact in database with information related to Salesforce lead replication.
            </summary>
            <param name="contact">The contact to update.</param>
            <param name="lastLeadReplicationDateTime">The date and time of contact's last successful replication.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.RequireLeadReplicationInternal(CMS.ContactManagement.ContactInfo)">
            <summary>
            Marks the specified contact as required for lead replication despite its score.
            </summary>
            <param name="contact">The contact to mark for lead replication.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateContactStatusInternal(System.Int32,System.String)">
            <summary>
            Updates contact status ID of specified contacts.
            </summary>
            <param name="statusId">Contact status ID</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateContactFromExternalData(CMS.DataEngine.BaseInfo,System.Boolean,System.Int32)">
            <summary>
            Updates contact information from record submitted through BizForm module - this requires form fields to be mapped to contact.
            </summary>
            <param name="source">Data class object with source data and mapping definition</param>
            <param name="allowOverwrite">If TRUE existing contact data can be overwritten otherwise only empty properties can be filled</param>
            <param name="contactID">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateContactFromExternalData(CMS.DataEngine.BaseInfo,System.Boolean,CMS.ContactManagement.ContactInfo)">
            <summary>
            Updates contact information from record submitted through BizForm module - this requires form fields to be mapped to contact.
            </summary>
            <param name="source">Data class object with source data and mapping definition</param>
            <param name="allowOverwrite">If TRUE existing contact data can be overwritten otherwise only empty properties can be filled</param>
            <param name="contact">Optional. If null then current contact will be updated.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateContactFromExternalSource(System.Collections.Generic.Dictionary{System.String,System.Object},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Updates contact information from set of data.
            </summary>
            <param name="contactData">Set of data</param>
            <param name="allowOverwrite">Allows overwrite existing contact information</param>
            <param name="contactId">Updated contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.UpdateContact(CMS.ContactManagement.ContactInfo,System.String,System.Object,System.Nullable{System.Boolean})">
            <summary>
            Updates single contact information.
            </summary>
            <param name="updatedContact">Contact being updated</param>
            <param name="key">Property of contact being updated</param>
            <param name="value">New value of the contact</param>
            <param name="allowOverwrite">Indicates if existing value can be overwritten</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetCountryID(System.Object)">
            <summary>
            Helper method that returns country ID based on input value.
            </summary>
            <param name="value">Contains either int or string value (country ID or name)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetStateID(System.Object)">
            <summary>
            Helper method that returns state ID based on input value.
            </summary>
            <param name="value">Contains either int or string value (state ID or name)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.AddContactBounceInternal(System.Int32)">
            <summary>
            Incerements number of bounces by one for specified contact.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.AddContactBounceByEmailInternal(System.String)">
            <summary>
            Increments number of bounces by one for all contacts specified by e-mail address.
            </summary>
            <param name="email">E-mail address</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.RemovePersonaFromContactsInternal(System.Int32)">
            <summary>
            Removes given persona from contacts. Sets column ContactPersonaID to NULL on contacts where this column equals to given persona ID.
            </summary>
            <param name="personaID">This persona will be removed from contacts</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetContact(System.Int32)">
            <summary>
            Gets contact from context or by ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.LogContactChange(System.Int32,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            Log contact to ContactChangeQueue.
            </summary>
            <param name="contactID">ID of the contact</param>
            <param name="changedProperties">Changes to mark</param>
            <param name="wasMerged">Is it merged or spitted contact</param>
            <param name="newContact">Is it new contact</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.InitNewContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Sets campaign, geolocation and creation time to a new contact
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.GetTruncatedName(System.String)">
            <summary>
            Returns name trimmed to 100 chars. If the string is shorter, returns the same string.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoProvider.ContactFieldCanBeModified(System.Boolean,CMS.ContactManagement.ContactInfo,CMS.FormEngine.FormFieldInfo)">
            <summary>
            Returns true if contact's field can be modified.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactListInfo">
            <summary>
            "Virtual" object for loading data from contact view.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactUsageDataSource">
            <summary>
            Provides statistical information about contacts.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactUsageDataSource.GetData">
            <summary>
            Add contacts statistics to the usage data collection.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactDataSetExtensions">
            <summary>
            <see cref="T:CMS.ContactManagement.ContactInfo"/> <see cref="T:System.Data.DataSet"/> extension methods.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataSetExtensions.ToContactList(System.Data.DataSet)">
            <summary>
            Converts <see cref="T:CMS.ContactManagement.ContactInfo"/> <see cref="T:System.Data.DataSet"/> into list.
            </summary>
            <param name="contactDataSet">Data set</param>
            <returns>ContactInfo list.</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfoExtensions">
            <summary>
            Provides extension methods for <see cref="T:CMS.ContactManagement.ContactInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoExtensions.IsInContactGroup(CMS.ContactManagement.ContactInfo,System.String)">
            <summary>
            Indicates whether contact is present in contact group on contact's site.
            </summary>
            <param name="contact">Contact whose presence in contact group is checked.</param>
            <param name="contactGroupName">Name of contact group.</param>
            <returns>True if contact is present in the specified group. Otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contact"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="contactGroupName"/> is null or empty string.</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoExtensions.IsInAnyContactGroup(CMS.ContactManagement.ContactInfo,System.String[])">
            <summary>
            Indicates whether contact is present in any of the specified contact groups on contact's site.
            </summary>
            <param name="contact">Contact whose presence in contact groups is checked.</param>
            <param name="contactGroupNames">Names of contact groups.</param>
            <returns>True if contact is present in any of the specified groups. Otherwise returns false.</returns>
            <remarks>
            The method returns false when no contact group name is provided.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contact"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoExtensions.IsInAllContactGroups(CMS.ContactManagement.ContactInfo,System.String[])">
            <summary>
            Indicates whether contact is present in all of the specified contact groups on contact's site. 
            </summary>
            <param name="contact">Contact whose presence in contact groups is checked.</param>
            <param name="contactGroupNames">Names of contact groups.</param>
            <returns>True if contact is present in all of the specified groups. Otherwise returns false.</returns>
            <remarks>
            The method returns false when no contact group name is provided.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contact"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoExtensions.IsInContactGroupsInternal(CMS.ContactManagement.ContactInfo,System.Boolean,System.String[])">
            <summary>
            Indicates whether contact is present in any of the specified contact groups on contact's site. When <paramref name="allGroups"/> is set to true,
            contact must be present in all of the specified contact groups on contact's site.
            </summary>
            <param name="contact">Contact whose presence in contact groups is checked.</param>
            <param name="allGroups">Flag indicating whether contact's presence is to be checked for any or all of the specified contact groups.</param>
            <param name="contactGroupNames">Names of contact groups.</param>
            <returns>
            True if contact is present in any of the specified groups while <paramref name="allGroups"/> is false or contact is present in all of the specified groups while <paramref name="allGroups"/> is true.
            Otherwise returns false.
            </returns>
            <remarks>
            The method returns false when no contact group name is provided.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contact"/> is null.</exception>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfoObjectQueryExtensions">
            <summary>
            Extensions of <see cref="T:CMS.DataEngine.ObjectQuery`1"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.WithAge(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that are exactly age of <paramref name="yearsOld"/> years old.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.NotWithAge(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that are not exactly <paramref name="yearsOld"/> years old.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.OlderThan(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that are older than <paramref name="yearsOld"/> (contacts with age <paramref name="yearsOld"/> are not included).
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.OlderThanOrWithAge(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that are older than <paramref name="yearsOld"/> (contacts with age <paramref name="yearsOld"/> are included).
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.YoungerThan(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that are younger than <paramref name="yearsOld"/> (contacts with age <paramref name="yearsOld"/> are not included).
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.YoungerThanOrWithAge(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that are younger than <paramref name="yearsOld"/> (contacts with age <paramref name="yearsOld"/> are included).
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.WithBirthdayAfter(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.DateTime)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that have date of birth later than <paramref name="fromExclusive"/>. The method takes only Date part.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.WithBirthdayBefore(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.DateTime)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that have date of birth sooner than <paramref name="toExclusive"/>. The method takes only Date part.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.CreatedAfter(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.DateTime)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that have been created later than <paramref name="from"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.CreatedBefore(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.DateTime)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> with contacts that have been created before <paramref name="to"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.NotBounced(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Boolean,System.Int32)">
            <summary>
            Filters out contacts whose email address is unreachable (it has bounced more than <paramref name="bouncedEmailsLimit"/> times).
            Contacts blocked manually by administrator are filtered out as well.
            </summary>
            <param name="contactsQuery">Query which will be changed to include where clause filtering out bounced contacts</param>
            <param name="monitorBouncedEmails">If true, bounces will be checked against the <paramref name="bouncedEmailsLimit"/> parameter. Otherwise, only contacts blocked in the UI will be filtered out.</param>
            <param name="bouncedEmailsLimit">Number of bounces which are allowed</param>
            <returns>Modified query</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.WithEmail(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.String)">
            <summary>
            Filters out contacts whose email address does not match given <paramref name="email"/>. 
            </summary>
            <remarks>
            Since email address is not unique per contact on single site, query can contain multiple contacts.
            </remarks>
            <param name="contactsQuery">Query which will be changed to omit contacts not satisfying the condition</param>
            <param name="email">Email address the contacts will be filtered for. Can be null, in such case filters contacts with email address set to null</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
            <returns>Modified query</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.SearchedForAll(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Filters out contacts who have searched for all of the specified keywords in last x days.
            </summary>
            <param name="contactsQuery">Object query for contact info</param>
            <param name="keywords">Array of keywords</param>
            <param name="lastXDays">In last x days</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.SearchedForAny(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Filters out contacts who have searched for any of the specified keywords in last x days.
            </summary>
            <param name="contactsQuery">Object query for contact info</param>
            <param name="keywords">Array of keywords</param>
            <param name="lastXDays">In last x days</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactsQuery"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.NotBounced``1(``0,System.String,System.Boolean,System.Int32)">
            <summary>
            Filters out contacts whose email address is unreachable (it has bounced more than <paramref name="bouncedEmailsLimit"/> times).
            Subscribers blocked manually by administrator are filtered out as well. The column which stores number of bounces has to be 
            specified in <paramref name="columnName"/> parameter, because each object which stores bounces count has differently named column.
            </summary>
            <param name="whereCondition">Condition which will be changed to include where clause filtering out bounced subscribers</param>
            <param name="columnName">Name of the column which stores number of times the email of the subscriber bounced (e.g. SubscriberBounces, ContactBounces)</param>
            <param name="monitorBouncedEmails">If true, bounces will be checked against the <paramref name="bouncedEmailsLimit"/> parameter. Otherwise, only subscribers blocked via UI will be filtered out (as if <paramref name="bouncedEmailsLimit"/> was 0).</param>
            <param name="bouncedEmailsLimit">Limit of bounces which are allowed. If 0, only subscribers blocked via UI will be filtered out.</param>
            <typeparam name="TQuery">Type of the query</typeparam>
            <returns>IWhereCondition with additional filter</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoObjectQueryExtensions.SearchActivities(System.Int32)">
            <summary>
            Returns activities with only ActivityContactID column from all search activities.
            </summary>
            <param name="lastXDays">In last x days</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IVisitorToContactInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.VisitorToContactInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.VisitorToContactInfo">
            <summary>
            VisitorToContactInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.VisitorToContactInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.VisitorToContactInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.VisitorToContactInfo.VisitorToContactID">
            <summary>
            Visitor to contact ID
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.VisitorToContactInfo.VisitorToContactVisitorGUID">
            <summary>
            Visitor to contact visitor GUID
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.VisitorToContactInfo.VisitorToContactContactID">
            <summary>
            Visitor to contact contact ID
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfo.#ctor">
            <summary>
            Constructor - Creates an empty VisitorToContactInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new VisitorToContactInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ContactManagement.VisitorToContactInfoProvider">
            <summary>
            Class providing VisitorToContactInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.GetVisitorToContacts">
            <summary>
            Returns a query for all the VisitorToContactInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.GetVisitorToContactInfo(System.Int32)">
            <summary>
            Returns VisitorToContactInfo with specified ID.
            </summary>
            <param name="id">VisitorToContactInfo ID</param>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.SetVisitorToContactInfo(CMS.ContactManagement.VisitorToContactInfo)">
            <summary>
            Sets (updates or inserts) specified VisitorToContactInfo.
            </summary>
            <param name="infoObj">VisitorToContactInfo to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.DeleteVisitorToContactInfo(CMS.ContactManagement.VisitorToContactInfo)">
            <summary>
            Deletes specified VisitorToContactInfo.
            </summary>
            <param name="infoObj">VisitorToContactInfo to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.DeleteVisitorToContactInfo(System.Int32)">
            <summary>
            Deletes VisitorToContactInfo with specified ID.
            </summary>
            <param name="id">VisitorToContactInfo ID</param>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.GetContactForVisitor(System.Guid)">
            <summary>
            Returns a <see cref="T:CMS.ContactManagement.ContactInfo"/> for given <param name="visitor"></param> <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.BulkMoveVisitors(System.Int32,System.Int32)">
            <summary>
            Moves all relations between visitor and the contact from the contact identified by given <paramref name="sourceContactID"/> to the contact identified by <paramref name="targetContactID"/>.
            </summary>
            <remarks>
            This method should be used only in the merging process. Note that there is no consistency check on whether the contacts with given IDs exist or not (nor is the 
            foreign key check in DB). Caller of this method should perform all the necessary checks prior to the method invocation.
            </remarks>
            <param name="sourceContactID">Identifier of the contact the activities are moved from</param>
            <param name="targetContactID">Identifier of the contact the activities are moved to</param>
        </member>
        <member name="M:CMS.ContactManagement.VisitorToContactInfoProvider.CreateVisitorToContactInfo(CMS.ContactManagement.ContactInfo)">
            <summary>
            Creates and sets record for given contact.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactDataInjector">
            <summary>
            Injects data from other objects to <see cref="T:CMS.ContactManagement.ContactInfo"/> object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataInjector.#ctor(CMS.ContactManagement.IContactInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.ContactDataInjector"/> class.
            </summary>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataInjector.Inject(CMS.Base.ISimpleDataContainer,System.Int32,CMS.ContactManagement.IContactDataMapper,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Injects provided <paramref name="data"/> to a <see cref="T:CMS.ContactManagement.ContactInfo"/> identified by <paramref name="contactId"/>.
            </summary>
            <param name="data">Data to update contact with.</param>
            <param name="contactId">Contact ID.</param>
            <param name="mapper">Maps values from data to contact.</param>
            <param name="checker">Optionally checks whether the injection is allowed. If not provided, data is updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="mapper"/> is null.</exception>
        </member>
        <member name="T:CMS.ContactManagement.ContactDataMapper">
            <summary>
            Maps data to provided <see cref="T:CMS.ContactManagement.ContactInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataMapper.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:CMS.ContactManagement.ContactDataMapper"/>.
            </summary>
            <param name="dataClassName">Data container class name.</param>
            <param name="allowOverwrite">Indicates if the already filled <see cref="T:CMS.ContactManagement.ContactInfo"/> properties should be overwritten. Otherwise only empty properties are filled.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataMapper.Map(CMS.Base.ISimpleDataContainer,CMS.ContactManagement.ContactInfo)">
            <summary>
            Maps <paramref name="data"/> to provided <paramref name="contact"/>.
            </summary>
            <param name="data">Source data.</param>
            <param name="contact">Contact.</param>
            <returns>Returns <c>true</c> if there were any properties to map.</returns>
            <remarks>The modification is based on mapping defined for external data source.</remarks>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataMapper.GetTruncatedName(System.String)">
            <summary>
            Returns name trimmed to 100 chars. If the string is shorter, returns the same string.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataMapper.ContactFieldCanBeModified(System.Boolean,CMS.ContactManagement.ContactInfo,CMS.FormEngine.FormFieldInfo)">
            <summary>
            Returns true if contact's field can be modified.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataMapper.GetCountryID(System.Object)">
            <summary>
            Helper method that returns country ID based on input value.
            </summary>
            <param name="value">Contains either int or string value (country ID or name)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactDataMapper.GetStateID(System.Object)">
            <summary>
            Helper method that returns state ID based on input value.
            </summary>
            <param name="value">Contains either int or string value (state ID or name)</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactDataInjector">
            <summary>
            Injects data from other objects to <see cref="T:CMS.ContactManagement.ContactInfo"/> object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactDataInjector.Inject(CMS.Base.ISimpleDataContainer,System.Int32,CMS.ContactManagement.IContactDataMapper,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Injects provided <paramref name="data"/> to a <see cref="T:CMS.ContactManagement.ContactInfo"/> identified by <paramref name="contactId"/>.
            </summary>
            <param name="data">Data to update contact with.</param>
            <param name="contactId">Contact ID.</param>
            <param name="mapper">Mapper to map values from data to contact.</param>
            <param name="checker">Optionally checks whether the injection is allowed. If not provided, data is updated.</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactDataMapper">
            <summary>
            Maps data to contact.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactDataMapper.Map(CMS.Base.ISimpleDataContainer,CMS.ContactManagement.ContactInfo)">
            <summary>
            Maps <paramref name="data"/> to provided <paramref name="contact"/>.
            </summary>
            <param name="data">Data to modify contact with.</param>
            <param name="contact">Contact.</param>
            <returns>Returns <c>true</c> if there were any properties to map.</returns>
        </member>
        <member name="T:CMS.ContactManagement.IContactDataPropagationChecker">
            <summary>
            Checks whether the propagation of data to Contact object is allowed.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactDataPropagationChecker.IsAllowed">
            <summary>
            Checks whether the propagation of data to Contact object is allowed.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactLastActivityOlderThanWhereCondition">
            <summary>
            Represents object with additional where condition for <see cref="T:CMS.ContactManagement.ContactInfo"/> query.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactLastActivityOlderThanWhereCondition.#ctor(System.Int32)">
            <summary>
            Selects all contact with last activity older than x <paramref name="days"/> or contact with no activities but older than x <paramref name="days"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactLastActivityOlderThanWhereCondition.GetWhere">
            <summary>
            Selects all contact with last activity older than x days or contact with no activities but older than x days.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactWithoutEmailWhereCondition">
            <summary>
            Represents object with additional where condition for <see cref="T:CMS.ContactManagement.ContactInfo"/> query.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithoutEmailWhereCondition.GetWhere">
            <summary>
            Returns contacts without email.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactsWhereCondition">
            <summary>
            Represents object with additional where condition for <see cref="T:CMS.ContactManagement.ContactInfo"/> query.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactsWhereCondition.GetWhere">
            <summary>
            Where condition for <see cref="T:CMS.ContactManagement.ContactInfo"/> query.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DefaultDeleteContactsService">
            <summary>
            Service responsible for deleting all inactive contacts.
            Method for deleting is determined by settings.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.DefaultDeleteContactsService.LAST_X_DAYS_MIN_VALUE">
            <summary>
            Min value that you can insert in the UI (CMSDeleteInactiveContactsLastXDays setting).
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultDeleteContactsService.Delete(System.Int32)">
            <summary>
            Deletes batch of inactive contacts.
            </summary>
            <param name="batchSize">Number of contacts to delete in one call</param>
            <returns>Returns true when there are more contacts to delete</returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultDeleteContactsService.ExecuteDelete(System.Int32)">
            <summary>
            Deletes inactive contacts.
            </summary>
            <param name="batchSize">Number of contacts to delete. You can then check returned number of contacts left to delete and call this method until it is 0.</param>
            <returns>Number of contacts left to delete</returns>
        </member>
        <member name="T:CMS.ContactManagement.DeleteContactsSettingsContainer">
            <summary>
            Contains <see cref="T:CMS.ContactManagement.IDeleteContacts"/> implementations that can be used to delete inactive contacts. 
            </summary>
            <remarks>
            For registering to this container use <see cref="T:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute"/>.
            </remarks>
            <exclude />
        </member>
        <member name="P:CMS.ContactManagement.DeleteContactsSettingsContainer.SettingsItems">
            <summary>
            Returns all the items that are currently registered as delete contact options.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DeleteContactsSettingsContainer.GetImplementation(System.String)">
            <summary>
            Return implementation given by name. Implementations should be registered via <see cref="T:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute"/>.
            </summary>
            <param name="name">Implementation name</param>
            <returns>If no implementation found null is returned.</returns>
        </member>
        <member name="M:CMS.ContactManagement.DeleteContactsSettingsContainer.RegisterImplementation(CMS.ContactManagement.DeleteContactsSettingsItem)">
            <summary>
            Registers a settings item which will be displayed in settings for contact deletion. 
            All registration should be done through <see cref="T:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute"/>.
            </summary>
            <param name="item">Item that will be shown in the settings.</param>
        </member>
        <member name="T:CMS.ContactManagement.DeleteContactsNotActiveLastXDays">
            <summary>
            Deletes contacts not active last x days.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.DeleteContactsNotActiveLastXDays.NAME">
            <summary>
            Implementation name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DeleteContactsNotActiveLastXDays.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes batch of contacts not active last x days.
            </summary>
            <returns>Number of contacts remaining to delete</returns>
        </member>
        <member name="T:CMS.ContactManagement.DeleteContactsNotActiveLastXDaysAndNoEmail">
            <summary>
            Deletes contacts not active last x days and with no email.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.DeleteContactsNotActiveLastXDaysAndNoEmail.NAME">
            <summary>
            Implementation name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DeleteContactsNotActiveLastXDaysAndNoEmail.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes batch of contacts not active last x days and with no email.
            </summary>
            <returns>Number of contacts remaining to delete</returns>
        </member>
        <member name="T:CMS.ContactManagement.DeleteContactsSettingsItem">
            <summary>
            Representation of one setting in Online Marketing settings for inactive contacts' deletion.
            For registration of new items, a <see cref="T:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute"/> should be used.
            </summary>
            <exclude />
        </member>
        <member name="P:CMS.ContactManagement.DeleteContactsSettingsItem.DisplayNameResourceString">
            <summary>
            The resource string that will be resolved as a display name in the settings.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.DeleteContactsSettingsItem.Name">
            <summary>
            The name that will be used as a value in the radio list in the settings.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.DeleteContactsSettingsItem.Implementation">
            <summary>
            Instance of implementation of contact deletion.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IDeleteContacts">
            <summary>
            Deletes contacts on one site based on settings (days, batch size).
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IDeleteContacts.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes batch of contacts.
            </summary>
            <param name="days">Days that are set in the settings. Is used to delete contacts older than this number of days.</param>
            <param name="batchSize">Size of the batch that should be deleted at most.</param>
            <returns>Number of contacts remaining to delete.</returns>
        </member>
        <member name="T:CMS.ContactManagement.IDeleteContactsService">
            <summary>
            Service responsible for deleting contacts. Is used for deleting inactive contacts.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IDeleteContactsService.Delete(System.Int32)">
            <summary>
            Deletes batch of contacts.
            </summary>
            <param name="batchSize">Number of contacts to delete in one call.</param>
            <returns>Returns true when there are more contacts to delete</returns>
        </member>
        <member name="T:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute">
            <summary>
            Registers implementation for deleting inactive contacts. All registered implementations will be shown in the settings as an option for an administrator.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute.MarkedType">
            <summary>
            <see cref="T:CMS.ContactManagement.IDeleteContacts"/> that will be used when in the settings.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute.#ctor(System.String,System.String,System.Type)">
            <summary>
            Attribute constructor.
            </summary>
            <param name="name">Implementation name. Will be used as a value in the settings.</param>
            <param name="resourceString">Resource string that will be resolved and shown in the UI in the settings.</param>
            <param name="deleteInactiveContactsType"><see cref="T:CMS.ContactManagement.IDeleteContacts"/> that will be used when <paramref name="name"/> is chosen in the settings.</param>
            <exception cref="T:System.ArgumentNullException">If <see paramref="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">If <see paramref="deleteInactiveContactsType"/> is null or if does not implement <see cref="T:CMS.ContactManagement.IDeleteContacts"/>.</exception>
        </member>
        <member name="M:CMS.ContactManagement.RegisterDeleteContactsImplementationAttribute.PreInit">
            <summary>
            Registers the <see cref="T:CMS.ContactManagement.IDeleteContacts"/> factory to the <see cref="T:CMS.ContactManagement.DeleteContactsSettingsContainer"/>.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DocumentationLinks">
            <summary>
            Documentation links for online marketing topics.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DocumentationLinks.ContactGroups">
            <summary>
            Documentation links for contact groups.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.DocumentationLinks.ContactGroups.CUSTOM_MACRO_RECALCULATION_SPEED">
            <summary>
            Improving macro recalculation speed.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DocumentationLinks.Scoring">
            <summary>
            Documentation links for scoring.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.DocumentationLinks.Scoring.CUSTOM_MACRO_RECALCULATION_SPEED">
            <summary>
            Improving macro recalculation speed.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfosDeletedHandler">
            <summary>
            Event fires when <see cref="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfos(System.String,System.Int32)"/> deletes some contacts. Deleted contacts IDs are passed in event arguments.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfosDeletedHandlerEventArgs">
            <summary>
            Event arguments for event that fires when <see cref="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfos(System.String,System.Int32)"/> deletes some contacts.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfosDeletedHandlerEventArgs.DeletedContactsIds">
            <summary>
            IDs of deleted contacts.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactInfosDeletedHandlerEventArgs.DeletedContactsGUIDs">
            <summary>
            GUIDs of deleted contacts.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementEvents">
            <summary>
            Contact management events.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactManagementEvents.DuplicateActivitiesForContact">
            <summary>
            Event fires when we need to duplicate record in Activity table and all related tables if required.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactManagementEvents.ProcessContactActionsBatch">
            <summary>
            Event fires when contact actions batch (activities, contact changes) is being processed from queue to DB.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactManagementEvents.ContactMerge">
            <summary>
            Events fires when two contacts are being merged.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactManagementEvents.ContactInfosDeleted">
            <summary>
            Event fires when <see cref="M:CMS.ContactManagement.ContactInfoProvider.DeleteContactInfos(System.String,System.Int32)"/> deletes some contacts. Deleted contacts IDs are passed as event parameter.
            When single contact is deleted this event is not fired. 
            In this case <see cref="P:CMS.DataEngine.TypeInfoEvents.Delete"/> event on <see cref="F:CMS.ContactManagement.ContactInfo.TYPEINFO"/> could be used.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DuplicateActivitiesForContactEventArgs">
            <summary>
            Event arguments for the event fired when we need to duplicate record in Activity table and all related tables if required.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.DuplicateActivitiesForContactEventArgs.Activities">
            <summary>
            Activities to duplicate. 
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.DuplicateActivitiesForContactEventArgs.Contact">
            <summary>
            Contact to duplicate activities for.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DuplicateActivitiesForContactHandler">
            <summary>
            Event handler for the event fired when we need to duplicate record in Activity table and all related tables if required.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DuplicateActivitiesForContactHandler.StartEvent(System.Collections.Generic.IList{CMS.Activities.ActivityInfo},CMS.ContactManagement.ContactInfo)">
            <summary>
            Initiates event handling.
            </summary>
            <param name="activities">Activities to duplicate</param>
            <param name="contact">Contact to duplicate activities for</param>
        </member>
        <member name="T:CMS.ContactManagement.ProcessContactActionsBatchEventArgs">
            <summary>
            Arguments for the ProcessActivitiesHandler event handler.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ProcessContactActionsBatchEventArgs.LoggedActivities">
            <summary>
            Activities which were inserted to the DB. 
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ProcessContactActionsBatchEventArgs.LoggedContactChanges">
            <summary>
            Contact changes which took place in the last interval. Those changes are already written in the database even on the Before event. 
            This list serves as an information for online marketing calculators (contact groups, scoring, etc.), so they know which groups or scoring rules should be recalculated.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ProcessContactActionsBatchHandler">
            <summary>
            Handler for processing contact actions in a batch.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.AccountHelper">
            <summary>
            Helper class for merging, splitting and deleting accounts.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountHelper.CreateAccountContactRelation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new Account - Contact relation.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AccountHelper.Delete(CMS.ContactManagement.AccountInfo,System.Boolean)">
            <summary>
            Deletes account.
            </summary>
            <param name="account">Account to be deleted</param>
            <param name="deleteSubsidiaries">Indicates if subsidiary accounts should be deleted as well.</param>
        </member>
        <member name="M:CMS.ContactManagement.AccountHelper.GetNewAccount(System.String)">
            <summary>
            Creates and returns new  account.
            </summary>
            <returns>Returns new AccountInfo</returns>
        </member>
        <member name="M:CMS.ContactManagement.AccountHelper.GetName(System.String)">
            <summary>
            Returns name for newly created account
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactHelper">
            <summary>
            Class used for merging, splitting and deleting contacts.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactHelper.ANONYMOUS">
            <summary>
            Prefix for anonymous contacts.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactHelper.ANONYMOUS_CONTACT_LASTNAME_DATE_PATTERN">
            <summary>
            Anonymous contact last name date format.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactHelper.REPLACED_BRACKET_LEFT">
            <summary>
            Replaced left bracket.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactHelper.REPLACED_BRACKET_RIGHT">
            <summary>
            Replaced right bracket.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactHelper.GetContactListInfos(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns ContactListInfos for specified parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">SQL WHERE condition</param>
            <param name="orderBy">SQL ORDER BY parameters</param>
            <param name="topN">SQL TOP N parameters</param>
            <param name="columns">Selected columns</param>
            <returns>Returns DataSet</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactHelper.GetEmailDomain(System.String)">
            <summary>
            Returns email domain name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactHelper.RemoveCustomer(System.Int32)">
            <summary>
            Removes customer dependencies in all contact management objects.
            </summary>
            <param name="customerID">Customer being deleted</param>
        </member>
        <member name="T:CMS.ContactManagement.GeoLocationContactHelper">
            <summary>
            Class for setting location of contact according to the given IP address.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.#ctor">
            <summary>
            Constructor initializing objects with current context data.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.#ctor(CMS.ContactManagement.ContactInfo,System.String)">
            <summary>
            Constructor initializing objects with parameters.
            </summary>
            <param name="contact">Contact to be updated</param>
            <param name="siteName">Site name used for settings check</param>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.UpdateContactLocation(System.Boolean)">
            <summary>
            Update contact profile based on geolocation data from the IP address.
            </summary>
            <param name="saveContact">If true, the contact is saved after its location is updated</param>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.UpdateLocation">
            <summary>
            Update contact's columns where location should be stored.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.UpdateOrganization">
            <summary>
            Update contact's column where organization should be stored.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.UpdateContactColumn(System.String,System.Object)">
            <summary>
            Update value in contact's column only if empty.
            </summary>
            <param name="geoIPsetting">GEO setting name</param>
            <param name="value">GEO value</param>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.InsertCountryValue(System.String,System.Object)">
            <summary>
            Update country display name or ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.InsertStateValue(System.String,System.Object)">
            <summary>
            Update state display name or ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.InsertValue(System.String,System.Object)">
            <summary>
            Insert value.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.GeoLocationContactHelper.AppendSuffix(System.String,System.Object)">
            <summary>
            Append suffix into string column.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.Internal.MacroValidationHelper">
            <summary>
            Provides helper methods for contact management macros.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.MacroValidationHelper.LogInvalidGuidParameter(System.String,System.String)">
            <summary>
            Logs warning into event log with macro method's name in which input was invalid string representation of <see cref="T:System.Guid"/>(s).
            </summary>
            <remarks>
            Should be used, when macro method's input was string representation of a <see cref="T:System.Guid"/> which can not be parsed by <see cref="M:System.Guid.TryParse(System.String,System.Guid@)"/>.
            </remarks>
            <param name="macroMethodName">Name of the macro method with invalid input.</param>
            <param name="invalidGuidParameter">Invalid input from user.</param>
        </member>
        <member name="M:CMS.ContactManagement.Internal.MacroValidationHelper.TryParseGuids(System.String,System.Collections.Generic.ICollection{System.Guid}@)">
            <summary>
            Returns collection of <see cref="T:System.Guid"/>s from input string, where every string representation of a <see cref="T:System.Guid"/> is separated with semicolon.
            If any of the string representations of a <see cref="T:System.Guid"/> can not be parsed to <see cref="T:System.Guid"/>, then false is returned and <paramref name="guids"/> is null.
            </summary>
            <param name="stringGuids"><see cref="T:System.Guid"/>s separated with semicolon.</param>
            <param name="guids"><see cref="T:System.Guid"/>s parsed from <paramref name="stringGuids"/>.</param>
        </member>
        <member name="M:CMS.ContactManagement.Internal.MacroValidationHelper.LogInvalidGuidParameterInternal(System.String,System.String)">
            <summary>
            Logs warning into event log with macro method's name in which input was invalid string representation of <see cref="T:System.Guid"/>(s).
            </summary>
            <remarks>
            Should be used, when macro method's input was string representation of a <see cref="T:System.Guid"/> which can not be parsed by <see cref="M:System.Guid.TryParse(System.String,System.Guid@)"/>.
            </remarks>
            <param name="macroMethodName">Name of the macro method with invalid input.</param>
            <param name="invalidGuidParameter">Invalid input from user.</param>
        </member>
        <member name="M:CMS.ContactManagement.Internal.MacroValidationHelper.TryParseGuidsInternal(System.String,System.Collections.Generic.ICollection{System.Guid}@)">
            <summary>
            Returns collection of <see cref="T:System.Guid"/>s from input string, where every string representation of a <see cref="T:System.Guid"/> is separated with semicolon.
            If any of the string representations of a <see cref="T:System.Guid"/> can not be parsed to <see cref="T:System.Guid"/>, then false is returned and <paramref name="guids"/> is null.
            </summary>
            <param name="stringGuids"><see cref="T:System.Guid"/>s separated with semicolon.</param>
            <param name="guids"><see cref="T:System.Guid"/>s parsed from <paramref name="stringGuids"/>.</param>
        </member>
        <member name="T:CMS.ContactManagement.Internal.ActivityRecalculationQueueDto">
            <summary>
            Represents lightweight version of <see cref="T:CMS.ContactManagement.ActivityRecalculationQueueInfo"/>. This class should be used instead of <see cref="T:CMS.ContactManagement.ActivityRecalculationQueueInfo"/> in places
            when dealing with the regular info object has to big performance impact and features provided by <see cref="T:CMS.DataEngine.BaseInfo"/> are not required.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.Internal.ActivityRecalculationQueueDto.ActivityRecalculationQueueID">
            <summary>
            Activity recalculation queue ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.Internal.ActivityRecalculationQueueDto.ActivityRecalculationQueueActivityID">
            <summary>
            Activity recalculation queue activity ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.ActivityRecalculationQueueDto.FillDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Fills given <paramref name="dataContainer"/> with values from current <see cref="T:CMS.ContactManagement.Internal.ActivityRecalculationQueueDto"/>.
            </summary>
            <param name="dataContainer">Data container to be filled</param>
        </member>
        <member name="T:CMS.ContactManagement.Internal.IActivityQueueRecalculationProvider">
            <summary>
            Provides methods for storing activity to queue.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.IActivityQueueRecalculationProvider.Store(CMS.Activities.IActivityInfo)">
            <summary>
            Stores activity for further processing.
            </summary>
            <param name="activity"><see cref="T:CMS.Activities.IActivityInfo"/> of stored activity in database</param>
            <remarks>
            In default implementation, SQL database will be used for storing.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.Internal.IActivityQueueRecalculationProvider.StoreRange(System.Collections.Generic.IEnumerable{CMS.Activities.IActivityInfo})">
            <summary>
            Stores all the activities from given <paramref name="activities"/> for further processing.
            </summary>
            <param name="activities">Collection of <see cref="T:CMS.Activities.IActivityInfo"/> representing stored activity in database</param>
            <remarks>
            In default implementation, SQL database will be used for storing.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.Internal.IActivityQueueRecalculationProvider.Dequeue">
            <summary>
            Returns top 10000 items from the queue and at the same time it removes them from the queue.
            </summary> 
        </member>
        <member name="T:CMS.ContactManagement.Internal.SingleMacroRuleInstanceTranslatorBase">
            <summary>
            Defines methods needed to translate macro rule instance of one particular macro rule type to data query.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.SingleMacroRuleInstanceTranslatorBase.Translate(CMS.ContactManagement.MacroRuleInstance)">
            <summary>
            Translates one rule to object query returning contacts. Is used to speed up the process of recalculating contact groups.
            </summary>
            <param name="macroRuleInstance">Instance of the macro rule representing one line in the condition builder.</param>
            <returns>Object query for contacts that fit in this rule.</returns>
        </member>
        <member name="M:CMS.ContactManagement.Internal.SingleMacroRuleInstanceTranslatorBase.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates one rule to object query returning contacts. Is used to speed up the process of recalculating contact groups. 
            </summary>
            <param name="ruleParameters">Macro rule parameters representing one line in the condition builder.</param>
            <returns>Object query for contacts that fit in this rule.</returns>
        </member>
        <member name="T:CMS.ContactManagement.Internal.ContactMergeHandler">
            <summary>
            Event handler for the event fired once merging of <see cref="T:CMS.ContactManagement.ContactInfo"/> is in the progress.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.ContactMergeHandler.StartEvent(CMS.ContactManagement.ContactInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Initiates the event.
            </summary>
            <param name="source">Contact that is being merged to <paramref name="target"/></param>
            <param name="target">Contact the <paramref name="source"/> is being merged to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> -or- <paramref name="target"/> is <c>null</c></exception>
        </member>
        <member name="T:CMS.ContactManagement.Internal.PersonaRuleUpgrade">
            <summary>
            Class to handle upgrade of persona rules.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.PersonaRuleUpgrade.Upgrade">
            <summary>
            Upgrade persona rules.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.Internal.ScoreContactRuleInfoObjectQueryExtensions">
            <summary>
            Extensions of <see cref="T:CMS.DataEngine.WhereConditionBase`1"/> for usage mainly with <see cref="T:CMS.DataEngine.ObjectQuery`1"/> or as a chained condition with
            another <see cref="T:CMS.DataEngine.WhereConditionBase`1"/> considering instances of <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.ScoreContactRuleInfoObjectQueryExtensions.WhereNotExpired``1(CMS.DataEngine.WhereConditionBase{``0},System.DateTime)">
            <summary>
            Filters out objects which have their 'Expiration' column's day (e.g. <see cref="P:CMS.ContactManagement.ScoreContactRuleInfo.Expiration"/>) before 
            <paramref name="currentDateTime" />.
            </summary>
            <typeparam name="TQuery">Type of the query</typeparam>
            <param name="whereCondition">A query which has the expiration filter applied.</param>
            <param name="currentDateTime">A date which the 'Expiration' column has to exceed for the object to be considered expired and filtered out.</param>
            <returns>Query with the applied expiration filter.</returns>
        </member>
        <member name="T:CMS.ContactManagement.Internal.IContactProcessingChecker">
            <summary>
            Provides method for checking whether the contact processing can continue.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.Internal.IContactProcessingChecker.CanProcessContactInCurrentContext">
            <summary>
            Checks whether the contact processing can continue in the context of current HTTP request.
            </summary>
            <returns><c>True</c> if the contact processing can continue; otherwise, <c>false</c></returns>
        </member>
        <member name="T:CMS.ContactManagement.ActivityRecalculationQueueInfo">
            <summary>
            ActivityRecalculationQueueInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ActivityRecalculationQueueInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ActivityRecalculationQueueInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ActivityRecalculationQueueInfo.ActivityRecalculationQueueID">
            <summary>
            Activity recalculation queue ID
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ActivityRecalculationQueueInfo.ActivityRecalculationQueueActivityID">
            <summary>
            Activity recalculation queue activity ID
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfo.#ctor">
            <summary>
            Constructor - Creates an empty ActivityRecalculationQueueInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ActivityRecalculationQueueInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ContactManagement.ActivityRecalculationQueueInfoProvider">
            <summary>
            Class providing ActivityRecalculationQueueInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRecalculationQueueInfoProvider.BulkInsert(System.Collections.Generic.IEnumerable{CMS.DataEngine.Internal.IDataTransferObject})">
            <summary>
            Bulk inserts the given <paramref name="activityRecalculationQueueInfos"/>.
            </summary>
            <param name="activityRecalculationQueueInfos">Data table containing values to be inserted</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactActionsLogWorker">
            <summary>
            Contact actions log worker. Takes information from Contact management queues (activities and contact changes) and processes them. 
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactActionsLogWorker.DefaultInterval">
            <summary>
            Gets the interval in milliseconds for the worker.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsLogWorker.Finish">
            <summary>
            Finishes the worker process. Implement this method to specify what the worker must do in order to not lose its internal data when being finished. Leave empty if no extra action is required.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsLogWorker.Process">
            <summary>
            Method that is being run every <see cref="P:CMS.ContactManagement.ContactActionsLogWorker.DefaultInterval"/> millisecond.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsLogWorker.ProcessActions">
            <summary>
            Processes items from queue.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsLogWorker.CheckElapsedTime(System.Action)">
            <summary>
            Logs an event into event log when given actions take too long to complete.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsLogWorker.LogIntervalTooLowWarning(System.Double)">
            <summary>
            Logs information about long activity processing into event log.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsLogWorker.ElapsedTimeExceedsLimit(System.Double)">
            <summary>
            Checks whether given time exceeds task interval hardcoded limit.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactActionsQueueProcessor">
            <summary>
            Provides method for processing all the contact changes and logged activities. Triggers recalculations of dynamic 
            segments and marketing automation processes related to the contact actions.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsQueueProcessor.#ctor">
            <summary>
            Instantiates the class.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsQueueProcessor.#ctor(CMS.ContactManagement.IContactChangeQueueRecalculationProvider,CMS.ContactManagement.Internal.IActivityQueueRecalculationProvider)">
            <summary>
            Instantiates the class with all dependencies.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactActionsQueueProcessor.ProcessAllContactActions">
            <summary>
            Processes items from queue. It processes logged activities and contact changes. 
            </summary>
            <remarks>At the end the event <see cref="F:CMS.ContactManagement.ContactManagementEvents.ProcessContactActionsBatch"/> with filtered activities and obtained contact changes is raised</remarks>
        </member>
        <member name="T:CMS.ContactManagement.IActivityRecalculationQueueInfo">
            <summary>
            Specifies contract for <see cref="T:CMS.ContactManagement.ActivityRecalculationQueueInfo"/>. 
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.IActivityRecalculationQueueInfo.ActivityRecalculationQueueID">
            <summary>
            Activity recalculation queue ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.IActivityRecalculationQueueInfo.ActivityRecalculationQueueActivityID">
            <summary>
            Activity recalculation queue activity ID.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IActivityRecalculationQueueInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ActivityRecalculationQueueInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.SqlActivityQueueRecalculationProvider">
            <summary>
            Provides methods for storing activity to SQL database.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.SqlActivityQueueRecalculationProvider.Store(CMS.Activities.IActivityInfo)">
            <summary>
            Stores flag (in SQL db) that activity should be further processed.
            </summary>
            <param name="activity"><see cref="T:CMS.Activities.IActivityInfo"/> of stored activity in database</param>
        </member>
        <member name="M:CMS.ContactManagement.SqlActivityQueueRecalculationProvider.StoreRange(System.Collections.Generic.IEnumerable{CMS.Activities.IActivityInfo})">
            <summary>
            Stores flag (in SQL db) that all the activities given in <paramref name="activities"/> should be further processed.
            </summary>
            <param name="activities">Collection of <see cref="T:CMS.Activities.IActivityInfo"/> representing stored activity in database</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="activities"/> is <c>null</c></exception>
        </member>
        <member name="M:CMS.ContactManagement.SqlActivityQueueRecalculationProvider.Dequeue">
            <summary>
            Returns top 10000 items from the queue and at the same time it removes them from the queue.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactInfoMethods">
            <summary>
            Online marketing methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsInRoles(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact is in any/all of the specified roles (i.e. if any of the user assigned to the contact is in any/all specified roles).
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.LastActivityOfType(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns contact's last activity of specified activity type.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.FirstActivityOfType(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns contact's first activity of specified activity type.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsInContactGroup(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns TRUE if the contact is in specified contact group on current site.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.GetScore(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns contact's points in specified score on current site.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.BelongsToAccount(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if contact belongs to specified account.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.DidActivities(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact did any/all of the specified activities.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.DidActivity(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if contact belongs to specified account.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.CameToLandingPage(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if contact came to specified landing page.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.CameToLandingUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact came to the specified landing page with the specified URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsInactive(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact was created at least X days ago and that the contact has not performed any activities during the last X days.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsFromCountry(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact's country matches one of the specified countries.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsFromState(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact's state matches one of the specified countries.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.SearchedForKeywords(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact did search for specified keywords in last X days.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.SpentMoney(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact spent specified amount of money (counted by order total price in main currency) in last X days.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.PurchasedNumberOfProducts(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact purchased specified number of products in last X days.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.VisitedPage(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact visited specified page.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.VisitedSite(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact visited specified site.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.VisitedURL(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact visited page containing specified URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.OpenedNewsletter(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact opened specified newsletter.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.LoggedIn(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact logged in.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.PurchasedProduct(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact purchased specified product.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsInContactGroup(System.Object,System.Object,System.Boolean)">
            <summary>
            Returns TRUE if the contact is in any/all specified contact group(s) on current site.
            </summary>
            <param name="contact">Contact info object</param>
            <param name="contactGroupName">Contact group name(s) separated by semicolon</param>
            <param name="allGroups">If true contact has to be in all specified groups, if false, it is sufficient if the contact is in any of the specified groups.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.DidActivities(System.Object,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns true if the contact did any/all of the specified activities.
            </summary>
            <param name="contact">Contact the activities of which should be checked</param>
            <param name="activityTypes">Name of the activity(ies) to check separated with semicolon</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
            <param name="allActivities">If true, all specified types has to be found for the method to return true. If false, at least one of any specified types is sufficient to return true for the method.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.LastActivityOfType(System.Object,System.Object)">
            <summary>
            Returns contact's last activity of specified activity type.
            </summary>
            <param name="contact">Contact info object</param>
            <param name="activityType">Activity type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.FirstActivityOfType(System.Object,System.Object)">
            <summary>
            Returns contact's first activity of specified activity type.
            </summary>
            <param name="contact">Contact info object</param>
            <param name="activityType">Activity type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsInactive(System.Object,System.Int32)">
            <summary>
            Returns true if the contact was created at least X days ago and that the contact has not performed any activities during the last X days.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.GetScore(System.Object,System.Object)">
            <summary>
            Returns contact's points in specified score on current site.
            </summary>
            <param name="contact">Contact info object</param>
            <param name="scoreName">Score name</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.BelongsToAccount(System.Object,System.Object)">
            <summary>
            Returns true if contact belongs to specified account.
            </summary>
            <param name="contact">Contact info object</param>
            <param name="accountID">Account ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsFromCountry(System.Object,System.String)">
            <summary>
            Returns true if the contact's country matches one of the specified countries.
            </summary>
            <param name="contact">Contact the activities of which should be checked</param>
            <param name="countryList">Countries list (separated with semicolon)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsFromState(System.Object,System.String)">
            <summary>
            Returns true if the contact's country matches one of the specified countries.
            </summary>
            <param name="contact">Contact the activities of which should be checked</param>
            <param name="stateList">State list (separated with semicolon)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.SearchedForKeywords(System.Object,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns true if the contact did search (internal or external) for specified keywords in last X days.
            </summary>
            <param name="contact">Contact the activities of which should be checked</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
            <param name="keywords">Keywords separated with comma or semicolon (if null or empty, than method returns true if contact did any search in last X days)</param>
            <param name="allKeywords">If true all keywords has to be matched, if false at least one match has to be found</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.SpentMoney(System.Object,System.Decimal,System.Decimal,System.Int32)">
            <summary>
            Returns true if the contact spent specified amount of money (counted by order total price in main currency) in last X days.
            </summary>
            <param name="contact">Contact the activities of which should be checked</param>
            <param name="lowerBound">Inclusive lower bound of the amount of money (in main currency) spent by contact</param>
            <param name="upperBound">Inclusive upper bound of the amount of money (in main currency) spent by contact</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.PurchasedNumberOfProducts(System.Object,System.Int32,System.Int32)">
            <summary>
            Returns true if the contact purchased specified number of products in last X days.
            </summary>
            <param name="contact">Contact the activities of which should be checked</param>
            <param name="lowerBound">Inclusive lower bound of the number of products bought</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsInRoles(System.Object,System.Collections.Generic.ICollection{System.Guid},System.Boolean)">
            <summary>
            Returns true if the contact is in any/all of the specified roles (i.e. if any of the user assigned to the contact is in any/all specified roles).
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="roleGuids">Role guids</param>
            <param name="allRoles">If true, contact has to in all specified roles. If false, it is sufficient if the contact is at least in one of the roles.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsContactInAnyRole(CMS.ContactManagement.ContactInfo,System.Collections.Generic.IEnumerable{CMS.Membership.RoleInfo})">
            <summary>
            Return true, if contact is at least in one role.
            </summary>
            <param name="contact">Contact to check.</param>
            <param name="roles">Collection of roles in which at least one role is assigned to any of the <paramref name="contact"/>'s users.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.IsContactInAllRoles(CMS.ContactManagement.ContactInfo,System.Collections.Generic.IEnumerable{CMS.Membership.RoleInfo})">
            <summary>
            Returns true, if at least one user of the contact's <see cref="P:CMS.ContactManagement.ContactInfo.Users"/> is in all roles.
            </summary>
            <param name="contact">Contact to check.</param>
            <param name="roles">Collection of all roles in which at least one of the <paramref name="contact"/>'s user should be in.</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.OpenedNewsletter(System.Object,System.Guid,System.Int32)">
            <summary>
            Returns true if the contact opened specified newsletter.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="newsletterGuid">Newsletter guid</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.LoggedIn(System.Object,System.Int32)">
            <summary>
            Returns true if the contact logged in.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.PurchasedProduct(System.Object,System.Guid,System.Int32)">
            <summary>
            Returns true if the contact purchased specified product or its variant.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="skuGuid">GUID of the SKU</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.VisitedPage(System.Object,System.Guid,System.String,System.Int32)">
            <summary>
            Returns true if the contact visited specified page.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="nodeGuid">Page node GUID</param>
            <param name="culture">Culture of the document</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.VisitedSite(System.Object,System.String,System.Int32)">
            <summary>
            Returns true if the contact visited specified site.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="siteName">Name of the site which should be checked</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactInfoMethods.VisitedURL(System.Object,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns true if the contact visited page containing specified URL.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="url">Page URL to be checked</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
            <param name="landingPage">Indicates whether contact visited landing page or normal page</param>
        </member>
        <member name="T:CMS.ContactManagement.CachedMacroRuleTrees">
            <summary>
            Cache for parsed macro conditions.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CachedMacroRuleTrees.GetParsedTree(System.String)">
            <summary>
            Parses serialized macro (for example in a contact group) to a <see cref="T:CMS.MacroEngine.MacroRuleTree"/> and saves it to cache for subsequent calls.
            If macro rule tree was already parsed, returns it from cache.
            </summary>
            <param name="macroCondition">Macro condition</param>
            <returns>MacroRuleTree that is parsed from <paramref name="macroCondition"/> or taken from cache or null if it cannot be parsed</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="macroCondition"/> cannot be null</exception>
        </member>
        <member name="T:CMS.ContactManagement.IMacroRuleInstanceToDataQueryTranslator">
            <summary>
            Defines methods needed to translate one instance of macro rule to the data query which when executed
            will return objects fulfilling macro rule condition.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IMacroRuleInstanceToDataQueryTranslator.Translate(CMS.ContactManagement.MacroRuleInstance)">
            <summary>
            Translates macro rule with its parameters to data query. Created data query returns Contacts fulfilling 
            macro rule. Exception is thrown if rule cannot be translated into data query.
            </summary>
            <param name="macroRuleInstance">Macro rule instance to be translated</param>
            <returns>DataQuery representing macro rule</returns>
        </member>
        <member name="M:CMS.ContactManagement.IMacroRuleInstanceToDataQueryTranslator.CanBeTranslated(System.String)">
            <summary>
            Checks whether macro rule with the passed code name can be translated to data query. If this method returns false, 
            calling <see cref="M:CMS.ContactManagement.IMacroRuleInstanceToDataQueryTranslator.Translate(CMS.ContactManagement.MacroRuleInstance)"/> method with the same rule name will result into an exception being thrown.
            </summary>
            <param name="ruleName">Code name of the rule to be translated</param>
            <returns>True if it is possible to translate rule with the passed code name to data query; false otherwise</returns>
        </member>
        <member name="T:CMS.ContactManagement.IMacroRuleTreeToDataQueryTranslator">
            <summary>
            Defines methods for translating whole tree of macro rule instances into data query. Produced data query will return
            objects which will pass the macro.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IMacroRuleTreeToDataQueryTranslator.TranslateWithTransformation(CMS.MacroEngine.MacroRuleTree,System.Func{CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo}})">
            <summary>
            Translates macro rule tree into a data query. Macro rule instances are translated into individual data queries
            and combined together using UNION and INTERSECT statements into single data query. A transformation function 
            specified in <paramref name="transformation"/> is applied to every individual data query converted from a macro 
            rule instance.  Produced data queries will return objects matching the condition of the macro rule tree. 
            Throws exception if any of the macro rules cannot be translated.
            </summary>
            <param name="macroRuleTreeRoot">Root element of the macro rule tree</param>
            <param name="transformation">
            Transformation function which will be applied to every data query part. Use this function to further
            restrict results by applying Where, to specify column which should be returned, etc.
            </param>
            <returns>DataQuery representing macro rule tree</returns>
        </member>
        <member name="M:CMS.ContactManagement.IMacroRuleTreeToDataQueryTranslator.CanBeTranslated(CMS.MacroEngine.MacroRuleTree)">
            <summary>
            Checks if macro rule tree can be translated into data query. Tree can be translated if all of its rules can be translated.
            </summary>
            <param name="macroRuleTreeRoot">Macro rule tree</param>
            <returns>True if tree can be translated into data query; false otherwise</returns>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleInstance">
            <summary>
            Represents one line from the macro rule condition builder.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.MacroRuleInstance.MacroRuleName">
            <summary>
            Codename of the rule.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.MacroRuleInstance.Parameters">
            <summary>
            Parameters that a user filled in an instance of a macro rule.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleInstanceToDataQueryTranslator">
            <summary>
            Translates macro rule instance to data query. Translation methods are hardcoded in implementations of <see cref="T:CMS.ContactManagement.IMacroRuleInstanceTranslator"/> interface. 
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleMetadata">
            <summary>
            Metadata for a MacroRule in Online Marketing context. See <see cref="T:CMS.ContactManagement.MacroRuleMetadataContainer"/> for information on how to use it to 
            speed up recalculation of contact groups.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.ALL_ACTIVITIES">
            <summary>
            A constant representing all activities. Is used in <see cref="F:CMS.ContactManagement.MacroRuleMetadata.AffectingActivities"/> to mark that all activities affect this macro rule.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.ALL_ATTRIBUTES">
            <summary>
            A constant representing all attributes. Is used in <see cref="F:CMS.ContactManagement.MacroRuleMetadata.AffectingAttributes"/> to mark that all attributes affect this macro rule.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.MacroRuleName">
            <summary>
            Codename of the <see cref="T:CMS.MacroEngine.MacroRuleInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.Translator">
            <summary>
            A translator to use for <see cref="T:CMS.MacroEngine.MacroRuleInfo"/> with <see cref="F:CMS.ContactManagement.MacroRuleMetadata.MacroRuleName"/>.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.AffectingAttributes">
            <summary>
            Determines whether the macro rule is affected by change of contact's attribute.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.mAllActivitiesList">
            <summary>
            List with <see cref="F:CMS.ContactManagement.MacroRuleMetadata.ALL_ACTIVITIES"/> to mark that the rule should be recalculated on every activity.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleMetadata.AffectingActivities">
            <summary>
            Activities that affect given macro rule (that means if any of these activities performs, the rule should be recalculated).
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadata.#ctor(System.String,CMS.ContactManagement.IMacroRuleInstanceTranslator,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Constructor.
            </summary>
            <param name="macroRuleName">Rule of the macro (see <see cref="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleName"/>)</param>
            <param name="translator">A translator to use for macro with name <paramref name="macroRuleName"/></param>
            <param name="affectingActivities">
            List of activities that affect this macro rule. The rule gets recalculated only if one of these activity types performs.
            Leave null to not recalculate the rule on any activity.
            </param>
            <param name="affectingAttributes">
            List of attributes that affect this macro rule. The rule gets recalculated only if one of these attributes changes.
            Leave null to not recalculate the rule on any attribute change.
            </param>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleMetadataContainer">
             <summary>
             Class for registering <see cref="T:CMS.ContactManagement.MacroRuleMetadata"/> to the system. Use <see cref="M:CMS.ContactManagement.MacroRuleMetadataContainer.RegisterMetadata(CMS.ContactManagement.MacroRuleMetadata)"/> or <see cref="M:CMS.ContactManagement.MacroRuleMetadataContainer.RegisterMetadata(System.Collections.Generic.Dictionary{System.String,CMS.ContactManagement.MacroRuleMetadata},CMS.ContactManagement.MacroRuleMetadata)"/> to speed up recalculation of contact groups
             when registered macro rule is used in group condition.
             </summary>
             <remarks>
             Registering <see cref="T:CMS.ContactManagement.MacroRuleMetadata"/> can have two profound effects on speed of recalculation.
            
             First is recalculating contacts in the database - normally, when a contact group is being rebuilt, system takes all contacts from database and runs the macro
             condition on each of those. By registering a translator to a rule, the computation can be inverted, that means at first, a database query will be constructed
             to select only those contacts that fit given macro condition.
            
             All of the macro rules must be able to translate themselves to database query to use this functionality.
            
            
             Second is recalculating the rule only when specified type of activity performs, for example when a <see cref="F:CMS.Activities.PredefinedActivityType.PAGE_VISIT"/> performs,
             there is no need to recalculate <see cref="F:CMS.Activities.PredefinedActivityType.NEWSLETTER_OPEN"/> macro rules. This can significantly reduce the count of contact groups
             that need rebuild on each request.
             </remarks>
        </member>
        <member name="P:CMS.ContactManagement.MacroRuleMetadataContainer.Metadata">
            <summary>
            Translators container.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadataContainer.GetMetadata(System.String)">
            <summary>
            Gets a translator for given macro rule codename.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadataContainer.IsMetadataAvailable(System.String)">
            <summary>
            Checks whether <see cref="T:CMS.ContactManagement.MacroRuleMetadata"/> is registered for given macro rule codename.
            </summary>
            <returns>True if <see cref="T:CMS.ContactManagement.MacroRuleMetadata"/> is registered</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadataContainer.IsTranslatorAvailable(System.String)">
            <summary>
            Checks whether a translator is registered for given macro rule codename.
            </summary>
            <returns>True if translator is registered</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadataContainer.RegisterMetadata(System.Collections.Generic.Dictionary{System.String,CMS.ContactManagement.MacroRuleMetadata},CMS.ContactManagement.MacroRuleMetadata)">
            <summary>
            Registers metadata for a macro rule. Overrides already registered translators if the <see cref="F:CMS.ContactManagement.MacroRuleMetadata.MacroRuleName"/> collides.
            </summary>
            <param name="dict">Metadata dictionary</param>
            <param name="metadata">Metadata to register</param>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadataContainer.RegisterMetadata(CMS.ContactManagement.MacroRuleMetadata)">
            <summary>
            Registers metadata for a macro rule. Overrides already registered translators if the <see cref="F:CMS.ContactManagement.MacroRuleMetadata.MacroRuleName"/> collides.
            </summary>
            <param name="metadata">Metadata to register</param>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleMetadataContainer.GetDefaultMetadata">
            <summary>
            Registers default metadata for existing macro rules.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleTreeAnalyzer">
            <summary>
            Provides methods to analyze a MacroRuleTree.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeAnalyzer.CanTreeBeTranslated(CMS.MacroEngine.MacroRuleTree)">
            <summary>
            Checks whether a macro tree can be translated to a <see cref="T:CMS.DataEngine.DataQuery" />.
            </summary>
            <param name="macroRuleTree">Macro rule tree</param>
            <returns>True when the macro rule tree can be translated to DataQuery</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeAnalyzer.GetAffectingAttributeNames(CMS.MacroEngine.MacroRuleTree)">
            <summary>
            Gets all attributes that can affect given <see cref="T:CMS.MacroEngine.MacroRuleTree"/>. Uses <see cref="F:CMS.ContactManagement.MacroRuleMetadata.ALL_ATTRIBUTES"/> to mark that it
            should be recalculated no matter what attribute changed.
            </summary>
            <param name="tree">Macro rule tree</param>
            <returns>Set of attributes that affect given Macro rule tree</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeAnalyzer.GetAffectingActivityCodeNames(CMS.MacroEngine.MacroRuleTree)">
            <summary>
            Gets all activities that can affect given <see cref="T:CMS.MacroEngine.MacroRuleTree"/>. Uses <see cref="F:CMS.ContactManagement.MacroRuleMetadata.ALL_ACTIVITIES"/> to mark that it
            should be recalculated no matter what activity performed.
            </summary>
            <param name="tree">Macro rule tree</param>
            <returns>Set of activities that affect given Macro rule tree</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeAnalyzer.GetAffectingItems(CMS.MacroEngine.MacroRuleTree,System.Func{CMS.ContactManagement.MacroRuleMetadata,System.Collections.Generic.IList{System.String}})">
            <summary>
            Gets all items that can affect given <see cref="T:CMS.MacroEngine.MacroRuleTree"/>. 
            </summary>
            <param name="tree">Macro rule tree</param>
            <param name="type">Provide attribute which should be selected</param>
            <returns>Set of items that affect given Macro rule tree</returns>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleTreeEvaluator">
            <summary>
            Evaluates <see cref="T:CMS.MacroEngine.MacroRuleTree" /> and returns IDs of contacts that match it.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeEvaluator.#ctor(CMS.ContactManagement.IMacroRuleTreeToDataQueryTranslator)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeEvaluator.CanBeEvaluated">
            <summary>
            Checks whether the condition that has been set in the <see cref="M:CMS.ContactManagement.MacroRuleTreeEvaluator.SetMacroRuleTree(CMS.MacroEngine.MacroRuleTree)"/> property can be rebuilt using this rebuilder.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeEvaluator.EvaluateAllContactIDs">
            <summary>
            Evaluates the condition set by the <see cref="M:CMS.ContactManagement.MacroRuleTreeEvaluator.SetMacroRuleTree(CMS.MacroEngine.MacroRuleTree)"/> method. At first, macro rule tree is converted to data query. This data query is then executed on the database
            and a list of ContactIDs is retrieved. Exception is thrown if macro rule tree cannot be converted to data query (can be checked with the <see cref="M:CMS.ContactManagement.MacroRuleTreeEvaluator.CanBeEvaluated"/> method.
            </summary>
            <returns>IDs of contacts satisfying the condition</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeEvaluator.EvaluateContacts(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Evaluates the condition set by the <see cref="M:CMS.ContactManagement.MacroRuleTreeEvaluator.SetMacroRuleTree(CMS.MacroEngine.MacroRuleTree)"/> method. At first, macro rule tree is converted to data query. This data query is then executed on the database
            and a list of ContactIDs is retrieved. Exception is thrown if macro rule tree cannot be converted to data query (can be checked with the <see cref="M:CMS.ContactManagement.MacroRuleTreeEvaluator.CanBeEvaluated"/> method.
            </summary>
            <param name="contactIDsToEvaluate">Only those contacts will be checked for compliance with condition</param>
            <returns>IDs of contacts satisfying the condition</returns>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeEvaluator.SetMacroRuleTree(CMS.MacroEngine.MacroRuleTree)">
            <summary>
            Sets macro rule tree that can be evaluated.
            </summary>
            <param name="macroRuleTree">Macro rule tree</param>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleTreeParser">
            <summary>
            Class that parses a macro condition <see cref="T:CMS.MacroEngine.MacroRuleTree"/> from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTreeParser.TryParse(System.String)">
            <summary>
            Parses macro condition (for example in a contact group) to a <see cref="T:CMS.MacroEngine.MacroRuleTree"/>.
            </summary>
            <param name="macroCondition">Macro condition as a string</param>
            <returns>MacroRuleTree that is parsed from <paramref name="macroCondition"/> or null if it cannot be parsed</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="macroCondition"/> cannot be null</exception>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactAgeIsBetweenInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactAgeIsBetween
            Contact age {_is} between {age1} and {age2}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactAgeIsGreaterThanInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactAgeIsGreaterThan macro rule.
            Contact age {op} {age}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasBirthdayTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasBirthday macro rule.
            Contact {_has} birthday {days}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasComeToLandingPageWithSpecifiedURLTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasComeToLandingPageWithSpecifiedURL Macro rule.
            Contact {_perfectum} come to landing page with  URL containing {url}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasComeToSpecifiedLandingPageInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasComeToSpecifiedLandingPage Macro rule.
            Contact {_perfectum} come to landing page {page}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasDoneAnyActivityInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasDoneAnyActivityInTheLastXDays
            Contact {_perfectum} done any activity in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasDoneFollowingActivitiesInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasDoneFollowingActivitiesInTheLastXDays
            Contact {_perfectum} done {_any} of the following activities in the last {days} day(s): {activities}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasLoggedInInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasLoggedInInTheLastXDays
            Contact {_perfectum} logged in in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasMadeAtLeastXOrdersInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasMadeAtLeastXOrders
            Contact {_perfectum} made at least {num} order(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasPurchasedNumberOfProductsInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasPurchasedNumberOfProductsInTheLastXDays Macro rule.
            Contact {_perfectum} purchased at least {num} product(s) in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasPurchasedSpecifiedProductInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasPurchasedSpecifiedProduct Macro rule.
            Contact {_perfectum} purchased product {product}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasSearchedForSpecifiedKeywordsInLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasSearchedForSpecifiedKeywordsInLastXDays
            Contact {_perfectum} searched for {_any} of the following keywords in last {days} day(s): {keywords}
            {_perfectum}Contact.SearchedForKeywords("{keywords}", ToInt({days}), {_any})
            keywords: Enter keywords separated with semicolon.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasSpentMoneyInTheStoreInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasSpentMoneyInTheStoreInTheLastXDays Macro rule.
            Contact {_perfectum} spent between {money1} and {money2} in the store in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasSubmittedSpecifiedFormInLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasSubmittedSpecifiedFormInLastXDays
            Contact {_perfectum} submitted form {item} in last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasVisitedSpecifiedPageInLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasVisitedSpecifiedPageInLastXDays
            Contact {_perfectum} visited page {item} in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactHasVisitedSpecifiedSiteInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasVisitedSpecifiedSiteInTheLastXDays
            Contact {_perfectum} visited site {siteName} in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactInactiveInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactInactiveInTheLastXDays
            Contact has been inactive in the last {days} days
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactIsInContactGroupInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactIsInContactGroup Macro rule.
            Contact {_is} in {_any} of the contact groups: {groups}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactIsInRoleInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactIsInRole Macro rule.
            Contact {_is} in {_any} of the roles: {roles}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactIsRegisteredAsAUserInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactIsRegisteredAsAUser Macro rule.
            Contact {_is} registered as a user
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSContactStatusIsInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactStatusIs Macro rule.
            Contact status {_is} {status}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSCurrentDatetimeIsInRangeInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSCurrentDatetimeIsInRange Macro rule.
            Current date/time {_is} between {date1} and {date2}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSCurrentDayOfTheWeekIsOneOfSpecifiedDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSCurrentDayOfTheWeekIsOneOfSpecifiedDays Macro rule.
            Current day of the week {_is} one of following: {days}
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CMSCurrentDayTimeIsInRangeInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSCurrentDayTimeIsInRange Macro rule.
            Current day time {_is} between {time1} and {time2}
            </summary>
            <returns>Returns <c>true</c> when current is between time1 and time2 range.</returns>>
        </member>
        <member name="M:CMS.ContactManagement.CMSCurrentMonthIsInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSCurrentMonthIs Macro rule.
            Current month {_is} one of the following: {months}
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IMacroRuleInstanceTranslator">
            <summary>
            Defines methods needed to translate macro rule instance of one particular macro rule type to data query.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IMacroRuleInstanceTranslator.Translate(CMS.ContactManagement.MacroRuleInstance)">
            <summary>
            Translates one rule to object query returning contacts. Is used to speed up the process of recalculating contact groups.
            </summary>
            <param name="macroRuleInstance">Instance of the macro rule representing one line in the condition builder.</param>
            <returns>Object query for contacts that fit in this rule.</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactMergeModel">
            <summary>
            Represents pair of contacts that are being merged.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMergeModel.SourceContact">
            <summary>
            Gets or sets the <see cref="T:CMS.ContactManagement.ContactInfo"/> that is being merged to <see cref="P:CMS.ContactManagement.ContactMergeModel.TargetContact"/>.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMergeModel.TargetContact">
            <summary>
            Gets or sets the <see cref="T:CMS.ContactManagement.ContactInfo"/> the <see cref="P:CMS.ContactManagement.ContactMergeModel.SourceContact"/> is being merged to.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactMergeService">
            <summary>
            Provides method for merging of a <see cref="T:CMS.ContactManagement.ContactInfo"/> into another one.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMergeService.MergeContacts(CMS.ContactManagement.ContactInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Merges given <paramref name="source"/> contact to the <paramref name="target"/>. Moves subscriptions and copies contact's data. 
            In the case the EMS license is available, moves activities, memberships and relations.
            </summary>
            <remarks>
            Does not set the result of merge to the current context or store the GUID in response cookie. If the result should be somehow
            persistent during requests, caller of the method has to call <see cref="M:CMS.ContactManagement.ICurrentContactProvider.SetCurrentContact(CMS.ContactManagement.ContactInfo)"/> with the merged contact.
            </remarks>
            <param name="source">Source contact to be merged to the <paramref name="target"/></param>
            <param name="target">Target contact the <paramref name="source"/> is to be merged to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <c>null</c> -or <paramref name="target"/> is <c>null</c></exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactMergeService.MergeContactByEmail(CMS.ContactManagement.ContactInfo)">
            <summary>
            Tries to merge given <paramref name="contact"/> by <see cref="P:CMS.ContactManagement.ContactInfo.ContactEmail"/>. Moves subscriptions and copies contact's data. 
            In the case the EMS license is available, moves activities, memberships, relations and copies contact's data. 
            Given <paramref name="contact"/> will be used as merge target, i.e. this particular <see cref="T:CMS.ContactManagement.ContactInfo"/> will remain, while others with the same <see cref="P:CMS.ContactManagement.ContactInfo.ContactEmail"/>
            will be merged to the <paramref name="contact"/>.
            </summary>
            <remarks>
            Does not set the result of merge to the current context or store the GUID in response cookie. If the result should be somehow
            persistent during requests, caller of the method has to call <see cref="M:CMS.ContactManagement.ICurrentContactProvider.SetCurrentContact(CMS.ContactManagement.ContactInfo)"/> with the merged contact.
            </remarks>
            <param name="contact">Contact to be merged with existing one by their emails</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contact"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">Contact's email cannot be empty</exception>
        </member>
        <member name="T:CMS.ContactManagement.CurrentContactMergeService">
            <summary>
            Provides method for merging of a current <see cref="T:CMS.ContactManagement.ContactInfo"/> into another one.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CurrentContactMergeService.MergeCurrentContactWithContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Merges current contact with the given <paramref name="targetContact"/> in case the current contact is anonymous (does not have any email). Moves activities, 
            memberships, relations and copies contact's data.
            </summary>
            <remarks>
            Sets the result of merge to the response cookie, so the result will be persistent within the next requests.
            </remarks>
            <param name="targetContact">Contact the current contact should be merged with</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetContact"/> is <c>null</c></exception>
        </member>
        <member name="M:CMS.ContactManagement.CurrentContactMergeService.UpdateCurrentContactEmail(System.String,CMS.Base.IUserInfo)">
            <summary>
            Updates email of current contact.
            </summary>
            <param name="email">Contacts new email</param>
            <param name="currentUser">Current user</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactMergeService">
            <summary>
            Provides method for merging of a <see cref="T:CMS.ContactManagement.ContactInfo"/> into another one.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactMergeService.MergeContactByEmail(CMS.ContactManagement.ContactInfo)">
            <summary>
            Tries to merge given <paramref name="contact"/> by <see cref="P:CMS.ContactManagement.ContactInfo.ContactEmail"/>. Moves subscriptions and copies contact's data. 
            In the case the EMS license is available, moves activities, memberships, relations and copies contact's data. 
            Given <paramref name="contact"/> will be used as merge target, i.e. this particular <see cref="T:CMS.ContactManagement.ContactInfo"/> will remain, while others with the same <see cref="P:CMS.ContactManagement.ContactInfo.ContactEmail"/>
            will be merged to the <paramref name="contact"/>.
            </summary>
            <remarks>
            Does not set the result of merge to the current context or store the GUID in response cookie. If the result should be somehow
            persistent during requests, caller of the method has to call <see cref="M:CMS.ContactManagement.ICurrentContactProvider.SetCurrentContact(CMS.ContactManagement.ContactInfo)"/> with the merged contact.
            </remarks>
            <param name="contact">Contact to be merged with existing one by their emails</param>
        </member>
        <member name="M:CMS.ContactManagement.IContactMergeService.MergeContacts(CMS.ContactManagement.ContactInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Merges given <paramref name="source"/> contact to the <paramref name="target"/>. Moves subscriptions and copies contact's data. 
            In the case the EMS license is available, moves activities, memberships and relations.
            </summary>
            <remarks>
            Does not set the result of merge to the current context or store the GUID in response cookie. If the result should be somehow
            persistent during requests, caller of the method has to call <see cref="M:CMS.ContactManagement.ICurrentContactProvider.SetCurrentContact(CMS.ContactManagement.ContactInfo)"/> with the merged contact.
            </remarks>
            <param name="source">Source contact to be merged to the <paramref name="target"/></param>
            <param name="target">Target contact the <paramref name="source"/> is to be merged to</param>
        </member>
        <member name="T:CMS.ContactManagement.ICurrentContactMergeService">
            <summary>
            Provides method for merging of a current <see cref="T:CMS.ContactManagement.ContactInfo"/> into another one.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentContactMergeService.MergeCurrentContactWithContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Merges current contact with the given <paramref name="targetContact"/> in case the current contact is anonymous (does not have any email). Moves activities, 
            memberships, relations and copies contact's data.
            </summary>
            <remarks>
            Sets the result of merge to the response cookie, so the result will be persistent within the next requests.
            </remarks>
            <param name="targetContact">Contact the current contact should be merged with</param>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentContactMergeService.UpdateCurrentContactEmail(System.String,CMS.Base.IUserInfo)">
            <summary>
            Updates email of current contact.
            </summary>
            <param name="email">Contacts new email</param>
            <param name="currentUser">Current user</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementHandlers">
            <summary>
            Contact management events handlers.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.Init">
            <summary>
            Initializes the events handlers.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.MergeCurrentAnonymousContactWithGivenContact(System.Object,CMS.Base.CMSEventArgs{CMS.Activities.IActivityInfo})">
            <summary>
            Merges current contact with contact given in <paramref name="e"/> when current contact does not have email address filled.
            Contact should not be impersonated in case the email was forwarded to known contact.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.AfterActivityBulkInserted(System.Object,CMS.Base.CMSEventArgs{System.Collections.Generic.IList{CMS.Activities.IActivityInfo}})">
            <summary>
            Calls methods to perform after activities are processed with bulk insert.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.UpdateContactFromUser(System.Object,CMS.Base.CMSEventArgs{CMS.Activities.IActivityInfo})">
            <summary>
            Updates data in contact object when user is created on Live site.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.StoresActivityForFurtherProcessingAfterBulkInsert(System.Collections.Generic.IList{CMS.Activities.IActivityInfo})">
            <summary>
            Stores all the activities from performed bulk insert to the queue for further processing.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.TouchActivityDependencyCacheKeys(System.Collections.Generic.IList{CMS.Activities.IActivityInfo})">
            <summary>
            Touches the cache related to the <see cref="T:CMS.Activities.ActivityInfo"/> that were inserted in bulk to the database.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.StoresActivityForFurtherProcessing(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Executes when individual activity is inserted.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementHandlers.RunTriggers(System.Object,CMS.ContactManagement.ProcessContactActionsBatchEventArgs)">
            <summary>
            Runs marketing automation triggers connected to activities.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementModule">
            <summary>
            Represents the Contact Management module.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementModule.OnInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementModule.CheckMacroPermissions(System.Object,CMS.DataEngine.ObjectSecurityEventArgs)">
            <summary>
            Checks permissions for on-line marketing macro rules.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementModule.RegisterActivityValidator">
            <summary>
            Registers all <see cref="T:CMS.Activities.IActivityLogValidator"/> available in the current assembly to the <see cref="T:CMS.Activities.IActivityLogService"/>.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementModuleMetadata">
            <summary>
            Represents the Contact Management module metadata.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementResolvers">
            <summary>
            Resolvers used in e-mail templates and other macro visual components.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.AutomationSimpleResolver">
            <summary>
            Returns simple automation macro resolver with Contact field.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.AutomationResolver">
            <summary>
            Returns automation e-mail macro resolver with On-line marketing fields.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.ScoringResolver">
            <summary>
            Returns scoring e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.ContactResolver">
            <summary>
            Returns contact resolver.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.ContactActivityResolver">
            <summary>
            Returns contact activity resolver (for trigger macro).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.ContactScoreResolver">
            <summary>
            Returns contact score resolver (for trigger macro).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactManagementResolvers.VariantResolver">
            <summary>
            Returns variant resolver.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactManagementImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactManagementImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactMembershipCustomerListInfo">
            <summary>
            "Virtual" object for loading contact-customer relation data.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipCustomerListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipCustomerListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipCustomerListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactMembershipCustomerListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipCustomerListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactMembershipCustomerListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipCustomerListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipCustomerListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactMembershipInfo">
            <summary>
            ContactMembershipInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipInfo.OBJECT_TYPE_USER">
            <summary>
            Object type for user
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipInfo.OBJECT_TYPE_CUSTOMER">
            <summary>
            Object type for customer
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipInfo.TYPEINFOUSER">
            <summary>
            Type information for user membership relations.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipInfo.TYPEINFOCUSTOMER">
            <summary>
            Type information for ecommerce customer membership relations.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.MembershipID">
            <summary>
            Gets or sets the ID of relationship.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.ContactID">
            <summary>
            Gets or sets the ID of the contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.MemberType">
            <summary>
            Gets or sets the type of object this contact is related to.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.RelatedID">
            <summary>
            Gets or sets the ID of the related object.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.MembershipGUID">
            <summary>
            Gets or sets the membership's unique identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.MembershipCreated">
            <summary>
            Gets or sets the date and time the membership object was created.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactMembershipInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
            <returns>ContactMembershipInfo object</returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactMembershipInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactMembershipInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactMembershipInfoProvider">
            <summary>
            Class providing ContactMembershipInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:CMS.ContactManagement.ContactMembershipInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.GetRelationships">
            <summary>
            Returns a query for all the ContactMembershipInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.GetRelationships(System.Int32,CMS.ContactManagement.MemberTypeEnum)">
            <summary>
            Returns list of IDs of all related objects for specified contact and membership type.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="membershipType">Membership type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.HasRelationship(System.Int32)">
            <summary>
            Check whether given contact has relationship.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.GetMembershipInfo(System.Int32)">
            <summary>
            Returns relationship among specified contact, related object and object type.
            </summary>
            <param name="membershipID">ID of membership record</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.GetMembershipInfo(System.Int32,System.Int32,CMS.ContactManagement.MemberTypeEnum)">
            <summary>
            Returns relationship among specified contact, related object and object type.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Member type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.SetMembershipInfo(CMS.ContactManagement.ContactMembershipInfo)">
            <summary>
            Sets relationship among specified contact, related object and object type.
            </summary>
            <param name="infoObj">Contact-related object-object type relationship to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.DeleteMembershipInfo(CMS.ContactManagement.ContactMembershipInfo)">
            <summary>
            Deletes relationship among specified contact, related object and object type.
            </summary>
            <param name="infoObj">Contact-related object-object type relationship to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.DeleteMembershipInfo(System.Int32)">
            <summary>
            Deletes relationship among specified contact, related object and object type.
            </summary>
            <param name="membershipID">ID of record</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.DeleteMembershipInfo(System.Int32,System.Int32,CMS.ContactManagement.MemberTypeEnum)">
            <summary>
            Deletes relationship among specified contact, related object and object type.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Member type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.GetContactIDByMembership(System.Int32,CMS.ContactManagement.MemberTypeEnum)">
            <summary>
            Gets contact ID from membership relations.
            </summary>
            <param name="relatedObjectId">Related ID </param>
            <param name="memberType">Member type (user, subscriber, customer)</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.GetMembershipInfoInternal(System.Int32,System.Int32,CMS.ContactManagement.MemberTypeEnum)">
            <summary>
            Returns relationship among specified contact, related object and object type.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="relatedObjectId">Related object ID</param>
            <param name="memberType">Member type</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipInfoProvider.SetInfo(CMS.ContactManagement.ContactMembershipInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="T:CMS.ContactManagement.ContactMembershipUserListInfo">
            <summary>
            "Virtual" object for loading contact-user relation data.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipUserListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactMembershipUserListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipUserListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ContactMembershipUserListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipUserListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ContactMembershipUserListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipUserListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactMembershipUserListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IContactMembershipInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ContactMembershipInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.MemberTypeEnum">
            <summary>
            Type of membership relation.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MemberTypeEnum.CmsUser">
            <summary>
            User
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.MemberTypeEnum.EcommerceCustomer">
            <summary>
            Customer
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactsAffectedByActivityRulesMatcher">
            <summary>
            Checks which contacts were affected by activity rule. In other words, provides information which contacts should be recalculated for a certain rule.
            </summary>
            <remarks>
            Contact is affected by activity rule if one of this conditions is met:
            - contact performed activity which matches rule in its type and other properties (NodeID, ItemID, Value, etc.)
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.ContactsAffectedByActivityRulesMatcher.GetAffectedContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Checks which contacts were affected by activity rule. Matching algorithm is described in class's comments.
            </summary>
            <param name="rule">Rule which is matched with contact actions</param>
            <returns>IDs of contacts whose points for <paramref name="rule"/> should be recalculated</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactsAffectedByAttributeRulesMatcher">
            <summary>
            Checks which contacts were affected by attribute rule. In other words, provides information which contacts should be recalculated for a certain rule.
            </summary>
            <remarks>
            Contact is affected by attribute rule if one of this conditions is met:
            - contact was just created (see <see cref="P:CMS.ContactManagement.ContactChangeData.ContactIsNew"/> is true)
            - rule is based on contact's property which was changed (<see cref="P:CMS.ContactManagement.RuleInfo.RuleParameter"/> is present in <see cref="P:CMS.ContactManagement.ContactChangeData.ChangedColumns"/>)
            
            Performing activities don't affect attribute rules.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.ContactsAffectedByAttributeRulesMatcher.GetAffectedContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Checks which contacts were affected by attribute rule. Matching algorithm is described in class's comments.
            </summary>
            <param name="rule">Rule which is matched with contact actions</param>
            <returns>IDs of contacts whose points for <paramref name="rule"/> should be recalculated</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactsAffectedByMacroRulesMatcher">
            <summary>
            Checks which contacts were affected by macro rule. In other words, provides information which contacts should be recalculated for a certain rule.
            </summary>
            <remarks>
            Contact is affected by macro rule if one of this conditions is met:
            - contact's property has changed (contact is present in the list of contact changes represented by <see cref="T:CMS.ContactManagement.ContactChangeData"/>).
            - contact has performed activity which is affected by the rule's macro. Activities affected by various macro rules are defined in <see cref="T:CMS.ContactManagement.MacroRuleMetadataContainer"/>.
            </remarks>
        </member>
        <member name="T:CMS.ContactManagement.ContactsAffectingRulesFilter">
            <summary>
            Filter used for removing contacts for which should the rule not be recalculated after queuing period.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactsAffectingRulesFilter.FilterContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.IList{CMS.Activities.ActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Gets set of contacts affecting the given rule.
            </summary>
            <param name="rule">Rule to be checked against</param>
            <param name="activities">List of logged activities</param>
            <param name="contactChanges">List of logged contact changes</param>
            <returns>Set of filtered contact IDs</returns>
        </member>
        <member name="T:CMS.ContactManagement.IContactsAffectedByRuleMatcher">
            <summary>
            Computes contacts which could be affected by a rule. In other words, provides information which contacts should be recalculated for a certain rule.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactsAffectedByRuleMatcher.GetAffectedContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Checks which contacts were affected by a rule.
            </summary>
            <param name="rule">Rule which is matched with contact actions</param>
            <returns>IDs of contacts whose points for <paramref name="rule"/> should be recalculated</returns>
        </member>
        <member name="T:CMS.ContactManagement.IRuleWithContactActionsMatchersFactory">
            <summary>
            Provides implementations of <see cref="T:CMS.ContactManagement.IContactsAffectedByRuleMatcher"/> for each type of scoring rule. Created implementations
            will have a filled state (performed activities or contact changes) and produced contact IDs will be taken from this state.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IRuleWithContactActionsMatchersFactory.CreateRulesMatchers(System.Collections.Generic.IList{CMS.Activities.ActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Creates rules matchers that selects contacts which can be affected by the scoring rule. Contacts are selected from the list of contact actions represented
            by performed activities (<paramref name="activities"/>) and changes made to contact properties (<paramref name="contactChanges"/>).
            </summary>
            <param name="activities">Activities performed by contacts</param>
            <param name="contactChanges">Changes made to contact properties</param>
            <returns>Matchers index by rule type that are able to match scoring rules against contact actions</returns>
        </member>
        <member name="T:CMS.ContactManagement.RuleWithContactActionsMatchersFactory">
            <summary>
            Provides implementations of <see cref="T:CMS.ContactManagement.IContactsAffectedByRuleMatcher"/> for each type of scoring rule. Created implementations
            will have a filled state (performed activities or contact changes) and produced contact IDs will be taken from this state.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleWithContactActionsMatchersFactory.CreateRulesMatchers(System.Collections.Generic.IList{CMS.Activities.ActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Creates rules matchers that selects contacts which can be affected by the scoring rule. Contacts are selected from the list of contact actions represented
            by performed activities (<paramref name="activities"/>) and changes made to contact properties (<paramref name="contactChanges"/>).
            </summary>
            <param name="activities">Activities performed by contacts</param>
            <param name="contactChanges">Changes made to contact properties</param>
            <returns>Matchers index by rule type that are able to match scoring rules against contact actions</returns>
        </member>
        <member name="T:CMS.ContactManagement.IRuleRecalculator">
            <summary>
            Recalculates score points for one or more contacts for one scoring rule. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IRuleRecalculator.RecalculateRuleForAllContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Recalculates score points for all contacts and one specified rule.
            </summary>
            <param name="rule">Score points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.IRuleRecalculator.RecalculateRuleForContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Recalculates score points for a set of contacts and one specified rule.
            </summary>
            <param name="rule">Score points for this rule will be recalculated</param>
            <param name="contactIDs">ContactIDs whose points will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactIDs"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.IRuleRecalculator.RecalculateRuleForContact(CMS.ContactManagement.RuleInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Recalculates score points for one specified rule and one contact.
            </summary>
            <param name="rule">Score points for this rule will be recalculated</param>
            <param name="contact">Score points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> or <paramref name="contact"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.IScoreRecalculator">
            <summary>
            This class performs tasks which are required to be done when recalculating score points for whole ScoreInfos. This includes marking
            score as being recalculated, deleting old points, sending notification emails, etc. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IScoreRecalculator.RecalculateScoreRulesForAllContacts(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Recalculates score points for all rules in one score for all contact.
            </summary>
            <param name="score">Points for this score will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.IScoreRecalculator.RecalculateScoreRulesAfterContactActionsBatch(System.Collections.Generic.IList{CMS.Activities.ActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Recalculates scoring rules for contacts who performed some action. Recalculates only scoring rules which could have been affected by performed activities.
            Recalculation is made in batches, so only one operation is made for one scoring rule.
            </summary>
            <param name="processedActivities">Activities performed by contacts</param>
            <param name="contactChanges">Changes of contacts properties</param>
        </member>
        <member name="T:CMS.ContactManagement.RuleRecalculator">
            <summary>
            This class performs tasks which are required to be done when recalculating score points for single rules. Those tasks include
            clearing cache after recalculation or calling right calculator (based on rule type). Calculation itself is handled by classes implementing
            <see cref="T:CMS.ContactManagement.IRuleTypeCalculator"/> interface.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleRecalculator.#ctor(CMS.ContactManagement.IRuleTypeCalculatorFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="ruleTypeCalculatorFactory">Factory constructing calculators for needed rule types</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ruleTypeCalculatorFactory"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.RuleRecalculator.RecalculateRuleForAllContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Recalculates score points for all contacts and one specified rule.
            </summary>
            <param name="rule">Score points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.RuleRecalculator.RecalculateRuleForContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Recalculates score points for a set of contacts and one specified rule.
            </summary>
            <param name="rule">Score points for this rule will be recalculated</param>
            <param name="contactIDs">ContactIDs whose points will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactIDs"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.RuleRecalculator.RecalculateRuleForContact(CMS.ContactManagement.RuleInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Recalculates score points for one specified rule and one contact.
            </summary>
            <param name="rule">Score points for this rule will be recalculated</param>
            <param name="contact">Score points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> or <paramref name="contact"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.ActivityRuleTypeCalculator">
            <summary>
            Defines methods, which are able to recalculate score points for a score rules based on activities.
            </summary>
            <remarks>
            Before calling any of the methods in this interface, ensure that previously saved score points which can be overwritten are cleared via
            <see cref="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRule(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})"/> method.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRuleTypeCalculator.CalculateContact(CMS.ContactManagement.RuleInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Recalculates points for one contact for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contact must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contact">Points for this contact will be recalculated</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> is of type not supported by this instance</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> or <paramref name="contact"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRuleTypeCalculator.CalculateContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Recalculates points for a set of contacts for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contacts must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contactIDs">Points for contacts identified by those IDs will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRuleTypeCalculator.CalculateAllContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Recalculates points for all contacts for one specified rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> is of type not supported by this instance</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ActivityRuleTypeCalculator.CheckRuleValidity(CMS.ContactManagement.RuleInfo)">
            <summary>
            Checks if validity in time for this rule is valid. I.e. if rule should be even recalculated.
            </summary>
            <param name="rule">Rule to check</param>
            <returns>True if rule is ok and score should be recalculated, false otherwise</returns>
        </member>
        <member name="T:CMS.ContactManagement.AttributeRuleTypeCalculator">
            <summary>
            Defines methods, which are able to recalculate score points for a score rules based on attributes.
            </summary>
            <remarks>
            Before calling any of the methods in this interface, ensure that previously saved score points which can be overwritten are cleared via
            <see cref="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRule(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})"/> method.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.AttributeRuleTypeCalculator.CalculateContact(CMS.ContactManagement.RuleInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Recalculates points for one contact for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contact must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contact">Points for this contact will be recalculated</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> is of type not supported by this instance</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> or <paramref name="contact"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.AttributeRuleTypeCalculator.CalculateContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Recalculates points for a set of contacts for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contacts must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contactIDs">Points for contacts identified by those IDs will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.AttributeRuleTypeCalculator.CalculateAllContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Recalculates points for all contacts for one specified rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> is of type not supported by this instance</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.IRuleTypeCalculator">
            <summary>
            Defines methods, which are able to recalculate score points for a certain rule type.
            </summary>
            <remarks>
            Before calling any of the methods in this interface, ensure that previously saved score points which can be overwritten are cleared 
            via <see cref="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRule(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})"/>. Please use <see cref="T:CMS.ContactManagement.RuleTypeCalculatorFactory"/> class to obtain instances implementing this interface.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.IRuleTypeCalculator.CalculateContact(CMS.ContactManagement.RuleInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Recalculates points for one contact for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contact must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contact">Points for this contact will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.IRuleTypeCalculator.CalculateContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Recalculates points for a set of contacts for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contacts must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contactIDs">Points for contacts identified by those IDs will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.IRuleTypeCalculator.CalculateAllContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Recalculates points for all contacts for one specified rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.IRuleTypeCalculatorFactory.GetRuleCalculator(CMS.ContactManagement.RuleTypeEnum)">
            <summary>
            Creates rule calculator which is able to recalculate rules of the given type.
            </summary>
            <param name="ruleType">Created calculator will be able to recalculate points of rules of this types</param>
            <returns>Created rule calculator</returns>
        </member>
        <member name="T:CMS.ContactManagement.MacroRuleTypeCalculator">
            <summary>
            Defines methods, which are able to recalculate score points for a score rules based on macros.
            </summary>
            <remarks>
            Before calling any of the methods in this interface, ensure that previously saved score points which can be overwritten are cleared via
            <see cref="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRule(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})"/> method.
            </remarks>
        </member>
        <member name="F:CMS.ContactManagement.MacroRuleTypeCalculator.PAGE_SIZE">
            <summary>
            Size of page used when recalculating multiple contacts.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTypeCalculator.CalculateContact(CMS.ContactManagement.RuleInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Recalculates points for one contact for one rule based on macro.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contact must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contact">Points for this contact will be recalculated</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> is of type not supported by this instance</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> or <paramref name="contact"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTypeCalculator.CalculateContacts(CMS.ContactManagement.RuleInfo,System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Recalculates points for a set of contacts for one specific rule.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule and contacts must be cleared.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <param name="contactIDs">Points for contacts identified by those IDs will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTypeCalculator.CalculateAllContacts(CMS.ContactManagement.RuleInfo)">
            <summary>
            Recalculates points for all contacts for one specified rule based on macro.
            </summary>
            <remarks>
            Before calling this method, previously saved score points for this rule must be cleared.
            
            Paginates contacts by <see cref="F:CMS.ContactManagement.MacroRuleTypeCalculator.PAGE_SIZE"/> and executes recalculation routine for every page.
            </remarks>
            <param name="rule">Points for this rule will be recalculated</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> is of type not supported by this instance</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rule"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTypeCalculator.Recalculate(CMS.ContactManagement.RuleInfo,System.Collections.Generic.IEnumerable{CMS.ContactManagement.ContactInfo})">
            <summary>
            Recalculates macro rule for specified contacts.
            </summary>
            <param name="rule">Rule to be recalculated</param>
            <param name="contacts">Those contact's score points will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.MacroRuleTypeCalculator.IsSqlConstraintException(System.Exception)">
            <summary>
            Returns true if exception is sql constraint exception.
            SqlException number for this type of error is 547, for more details go to <a href="http://msdn.microsoft.com/en-us/library/cc645603.aspx">http://msdn.microsoft.com/en-us/library/cc645603.aspx</a>.
            </summary>
            <param name="exception">Exception to check for constraint error</param>
        </member>
        <member name="T:CMS.ContactManagement.RuleTypeCalculatorFactory">
            <summary>
            Factory class for IRuleTypeCalculator.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleTypeCalculatorFactory.GetRuleCalculator(CMS.ContactManagement.RuleTypeEnum)">
            <summary>
            Creates rule calculator which is able to recalculate rules of the given type.
            </summary>
            <param name="ruleType">Created calculator will be able to recalculate points of rules of this types</param>
            <returns>Created rule calculator</returns>
        </member>
        <member name="T:CMS.ContactManagement.ScoreMacroRuleSqlRecalculator">
            <summary>
            Recalculates macro scoring rules. Recalculation is done by converting dynamic macro condition to SQL query and thus leaving most of 
            the work on the SQL Server.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreMacroRuleSqlRecalculator.#ctor(CMS.ContactManagement.RuleInfo)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreMacroRuleSqlRecalculator.CanBeRecalculated">
            <summary>
            Checks whether the scoring rule can be recalculated with this class.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreMacroRuleSqlRecalculator.RecalculateRule">
            <summary>
            Recalculates the given rule.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreMacroRuleSqlRecalculator.RecalculateRuleForContacts(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Recalculates the given rule for contacts.
            </summary>
            <param name="contactsToRebuild">Contacts whose rule points will be recalculated</param>
        </member>
        <member name="T:CMS.ContactManagement.ScoreAsyncRecalculator">
            <summary>
            Recalculates score for ID given in constructor. Recalculation is performed in another thread.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreAsyncRecalculator.#ctor(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.ScoreAsyncRecalculator"/> class.
            </summary>
            <param name="score">Score to be evaluated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ScoreAsyncRecalculator.RunAsync">
            <summary>
            Executes asynchronous recalculation of score.
            </summary>
            <returns>Recalculation task.</returns>
            <remarks>Note that the method does not check if the score is already being recalculated. That is, multiple recalculations for the same score may be running at one time. 
            However, once all the recalculations are finished, all the contacts will have valid score values. The downside is that multiple notification emails may have been sent.</remarks>
        </member>
        <member name="M:CMS.ContactManagement.ScoreAsyncRecalculator.Run">
            <summary>
            Recalculates score for scoreID passed within closure.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreRecalculator">
            <summary>
            Recalculates more than one scoring rule (for example all rules for one contact or all rules after contact performed activity). If you want to recalculate one rule only, use <see cref="T:CMS.ContactManagement.RuleRecalculator"/>. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreRecalculator.#ctor(CMS.ContactManagement.IRuleRecalculator,CMS.ContactManagement.ICachedRulesManager,CMS.ContactManagement.IRuleWithContactActionsMatchersFactory,CMS.ContactManagement.IRuleInfoProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="ruleRecalculator">Class handling recalculation of individual rules</param>
            <param name="cachedRulesManager">Cached macro rules</param>
            <param name="ruleMatchersFactory">Factory for producing rule matchers</param>
            <param name="ruleInfoProvider">Provider for <see cref="T:CMS.ContactManagement.RuleInfo"/> management.</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreRecalculator.RecalculateScoreRulesForAllContacts(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Recalculates score points for all rules in one score for all contact.
            </summary>
            <param name="score">Points for this score will be recalculated</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ScoreRecalculator.RecalculateScoreRulesAfterContactActionsBatch(System.Collections.Generic.IList{CMS.Activities.ActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Recalculates scoring rules for contacts who performed some action. Recalculates only scoring rules which could have been affected by performed activities.
            Recalculation is made in batches, so only one operation is made for one scoring rule.
            </summary>
            <param name="processedActivities">Activities performed by contacts</param>
            <param name="contactChanges">Changes of contacts properties</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreRecalculator.GetRulesWithAffectedContacts(System.Collections.Generic.IList{CMS.Activities.ActivityInfo},System.Collections.Generic.IList{CMS.ContactManagement.ContactChangeData})">
            <summary>
            Calculates the pair of scoring rule and contacts whose score points in the rule could have been affected by performed actions.
            </summary>
            <param name="processedActivities">Activities performed by contacts</param>
            <param name="contactChanges">Changes applied to contacts</param>
            <returns>Scoring rules and contacts who could be affected by them</returns>
        </member>
        <member name="T:CMS.ContactManagement.TextComparer">
            <summary>
            Compares two strings based on <see cref="T:CMS.Helpers.TextCompareOperatorEnum"/> condition.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.TextComparer.Compare(System.String,CMS.Helpers.TextCompareOperatorEnum,System.String)">
            <summary>
            Checks whether given text in <paramref name="value"/> matches given condition. 
            Comparison is case-insensitive and <code>null</code> is considered as empty string.
            For example "test text" <see cref="F:CMS.Helpers.TextCompareOperatorEnum.Like"/> "Test" is true.
            </summary>
            <returns>True if <paramref name="value"/> matches given <paramref name="compareOperator"/> and <paramref name="value2"/>.</returns>
            <exception cref="T:System.NotImplementedException"><paramref name="compareOperator"/> is not supported</exception>
        </member>
        <member name="T:CMS.ContactManagement.RecalculateAfterContactActionEventArgs">
            <summary>
            Arguments for event fired when score is recalculated for one contact after contact's action (activity, property change, merge or split).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RecalculateAfterContactActionEventArgs.Contact">
            <summary>
            Gets or sets contact whose score is being recalculated.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RecalculateAfterContactActionEventArgs.CustomArguments">
            <summary>
            Container for custom arguments which can be used by event subscribers.
            </summary>
            <remarks>Is never null</remarks>
        </member>
        <member name="M:CMS.ContactManagement.RecalculateAfterContactActionEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs">
            <summary>
            Arguments for event fired when score is recalculated for contacts batch after their actions (activity, property change, merge or split).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs.ContactIDs">
            <summary>
            Gets or sets contacts whose score is being recalculated.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs.CustomArguments">
            <summary>
            Container for custom arguments which can be used by event subscribers.
            </summary>
            <remarks>Is never null</remarks>
        </member>
        <member name="M:CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RecalculateAfterContactActionsBatchHandler">
            <summary>
            Handler for event fired when score is recalculated for contacts batch after their actions (activity, property change, merge or split).
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RecalculateAfterContactActionsBatchHandler.StartEvent(System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Initiates event handling.
            </summary>
            <param name="contactIDs">Contacts whose score is being recalculated</param>
            <returns>Handler</returns>
        </member>
        <member name="T:CMS.ContactManagement.RecalculateScoreForAllContactsHandler">
            <summary>
            Handler for the event fired when points for all contacts for given score are being recalculated.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RecalculateScoreForAllContactsHandler.StartEvent(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Initiates event handling.
            </summary>
            <param name="recalcuatedScore">Score which is being recalculated</param>
            <returns>Event handler</returns>
        </member>
        <member name="T:CMS.ContactManagement.ScoreEventArgs">
            <summary>
            Event arguments for events where only information about score is needed.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreEventArgs.Score">
            <summary>
            Score (its meaning depends on which Handler fired the event with this event argument).
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoringEvents">
            <summary>
            Scoring related events.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoringEvents.RecalculateScoreForAllContacts">
            <summary>
            Fired when recalculation of points for all contacts for one score is performed (e.g. when manually performing recalculation of rules by hitting the "Recalculate" button).
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoringEvents.RecalculateAfterContactActionsBatch">
            <summary>
            Fired when score is recalculated for contacts batch after their actions (activity, property change, merge or split).
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleInfoExtensions">
            <summary>
            Extensions of <see cref="T:CMS.ContactManagement.RuleInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoExtensions.IsAffectedByActivity(CMS.ContactManagement.RuleInfo,CMS.Activities.ActivityInfo)">
            <summary>
            Indicates whether given activity or macro rule should be recalculated for given performed activity.
            </summary>
            <returns>True when the rule should be recalculated, false otherwise</returns>
            <param name="rule">Rule to check the activity type for</param>
            <param name="activity">Activity to check affection for</param>
            <exception cref="T:System.ArgumentException"><paramref name="rule"/> type has to be macro rule</exception>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoExtensions.IsAffectedByAttributeChange(CMS.ContactManagement.RuleInfo,System.String)">
            <summary>
            Checks whether given contact rule is affected by contact attribute change, that means if it needs to be recalculated when attribute has changed.
            </summary>
            <remarks>
            If given rule is not macro type, it cannot be determined whether the rule is affected or not. Therefore true is returned in this case.
            </remarks>
            <param name="rule">Rule to check the attribute affection</param>
            <param name="columnChanged">Name of the changed column</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="columnChanged"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoExtensions.IsMacroRuleAffectedByAttributeChange(CMS.ContactManagement.RuleInfo,System.String)">
            <summary>
            Checks whether given contact rule is affected by contact attribute change, that means if it needs to be recalculated when attribute has changed.
            </summary>
            <param name="rule">Rule to check the attribute affection</param>
            <param name="columnChanged">Name of the changed column</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoExtensions.IsMacroRuleAffectedByActivity(CMS.ContactManagement.RuleInfo,CMS.Activities.ActivityInfo)">
            <summary>
            Checks whether given rule is affected by given activity, that means if it needs to be recalculated when it performs.
            </summary>
            <param name="rule">Rule to check the activity type for</param>
            <param name="activity">Activity to check affection for</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoExtensions.GetActivityFieldType(System.String)">
            <summary>
            Gets data type of activity fields.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.AllContactsScoreNotificationsChecker">
            <summary>
            This class handles sending notification emails for contacts who exceeded score limit after recalculating score points for the whole ScoreInfo.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.AllContactsScoreNotificationsChecker.SendAllNotifications(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Sends notification emails to address specified in the ScoreInfo for contacts who exceeded score limit.
            </summary>
            <param name="score">Score info object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.BatchContactScoreNotificationsChecker">
            <summary>
            Watches for score points changes after score is recalculated and sends notification email if score points for the contact exceeds limit specified in <see cref="P:CMS.ContactManagement.ScoreInfo.ScoreEmailAtScore"/>.
            </summary>
            <remarks>
            In order to work correctly, method <see cref="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.SaveScoresSnapshot"/> has to be called before recalculation and method <see cref="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.SendNotifications"/> has to be called after recalculation.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.#ctor(System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Constructor.
            </summary>
            <param name="contactIds">Collection of Contact IDs to be checked</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactIds"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.SaveScoresSnapshot">
            <summary>
            This method has to be called before recalculation. 
            It saves current score points so notification emails will be send only for contact and scores which will exceed limit after recalculation.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.SendNotifications">
            <summary>
            Compares current score points with score points saved before recalculation (by method <see cref="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.SaveScoresSnapshot"/>) and sends notification emails for those scores whose
            points now exceeds limit, but didn't before recalculation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Method <see cref="M:CMS.ContactManagement.BatchContactScoreNotificationsChecker.SaveScoresSnapshot"/> wasn't called before recalculation</exception>
        </member>
        <member name="T:CMS.ContactManagement.ScoreNotificationsSender">
            <summary>
            This class sends notifications about contact exceeding score limit.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreNotificationsSender.ScoreNotificationEmailTemplate">
            <summary>
            Template for scoring email notifications.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreNotificationsSender.SendNotification(CMS.ContactManagement.ContactInfo,CMS.ContactManagement.ScoreInfo,System.Int32)">
            <summary>
            Sends notification about <paramref name="contact"/> reaching score limit in <paramref name="score"/>. Email template with code name "scoring.notification" is used.
            </summary>
            <remarks>
            Notification isn't send if email template with code name "scoring.notification" does not exist or <paramref name="score"/> does not have notification email set.
            </remarks>
            <param name="contact">Contact who reached score limit</param>
            <param name="score">ScoreInfo notification is about</param>
            <param name="scoreValue">Number of points <paramref name="contact"/> reached in <paramref name="score"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contact"/> or <paramref name="score"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.CachedRulesManager">
            <summary>
            Loads rules that are eligible for recalculation from cache. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CachedRulesManager.#ctor(CMS.ContactManagement.IRuleInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.CachedRulesManager"/> class.
            </summary>
            <param name="ruleInfoProvider">Provider for <see cref="T:CMS.ContactManagement.RuleInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="ruleInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.CachedRulesManager.GetAttributeRulesCached(System.String)">
            <summary>
            Returns cached attribute RuleInfo objects based on attribute name.
            </summary>
            <param name="attributeName">Name of the attribute which rules correspond to</param>
        </member>
        <member name="M:CMS.ContactManagement.CachedRulesManager.GetActivityRulesCached(System.String)">
            <summary>
            Returns cached activity RuleInfo objects based on activity type name.
            </summary>
            <param name="activityTypeName">Name of the activity type name which rules correspond to</param>
        </member>
        <member name="M:CMS.ContactManagement.CachedRulesManager.GetMacroRulesCached">
            <summary>
            Returns cached macro RuleInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CachedRulesManager.GetEnabledRules">
            <summary>
            Returns cached RuleInfos types belonging to enabled Scores on all sites.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CachedRulesManager.GetCacheDependency">
            <summary>
            Gets <see cref="T:CMS.Helpers.CMSCacheDependency"/> for score/persona rules, so that any change to score or rule will drop the cache.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ICachedRulesManager">
            <summary>
            Loads rules that are eligible for recalculation from cache. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ICachedRulesManager.GetAttributeRulesCached(System.String)">
            <summary>
            Returns cached attribute RuleInfo objects based on attribute name.
            </summary>
            <param name="attributeName">Name of the attribute which rules correspond to</param>
        </member>
        <member name="M:CMS.ContactManagement.ICachedRulesManager.GetActivityRulesCached(System.String)">
            <summary>
            Returns cached activity RuleInfo objects based on activity type name.
            </summary>
            <param name="activityTypeName">Name of the activity type name which rules correspond to</param>
        </member>
        <member name="M:CMS.ContactManagement.ICachedRulesManager.GetMacroRulesCached">
            <summary>
            Returns cached macro RuleInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ICachedRulesManager.GetEnabledRules">
            <summary>
            Returns cached RuleInfos types belonging to enabled Scores on all sites.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.IRuleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.RuleInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleCondition">
            <summary>
            Ensures management of XML file that represents the rule condition.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleCondition.mItemsList">
            <summary>
            Items array list.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleCondition.ItemsList">
            <summary>
            Returns the list of all RuleAttributeInfos or RuleActivityInfos.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleCondition.WhereCondition">
            <summary>
            Gets or sets where condition of the rule.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleCondition.#ctor(System.String)">
            <summary>
            Constructor, creates the rule condition structure and loads specified rule definition.
            </summary>
            <param name="ruleCondition">XML definition of the rule condition</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleCondition.GetXmlDefinition">
            <summary>
            Returns rule condition definition in xml.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleCondition.Clone">
            <summary>
            Clones the object.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleHelper">
            <summary>
            Class providing rule helper methods.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.GetAttributeCondition(CMS.Base.IDataContainer,System.String)">
            <summary>
            Returns attribute condition in XML format based on specific data.
            </summary>
            <param name="row">Data row container with rule information</param>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.GetActivityCondition(CMS.Base.IDataContainer,System.String,System.String)">
            <summary>
            Returns activity condition in XML format based on specific data.
            </summary>
            <param name="row">Data row container with rule information</param>
            <param name="whereCondition">Where condition</param>
            <param name="activityType">Activity type name in case the rule type is activity</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.GetMacroCondition(System.String)">
            <summary>
            Returns macro rule condition in XML format based on specific data.
            </summary>
            <param name="macroValue">Macro rule value</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.GetDataFromCondition(CMS.ContactManagement.RuleInfo,System.Data.DataTable,System.String@)">
            <summary>
            Returns data row container initialized with data from rule condition if the table definition contains column named as rule item name.
            If there is no column named as rule item name then empty data row container is returned.
            </summary>
            <param name="rule">RuleInfo object</param>
            <param name="table">Table definition</param>
            <param name="activityTypeName">Activity type name is returned via this parameter if it is activity rule</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.GetMacroConditionFromRule(CMS.ContactManagement.RuleInfo)">
            <summary>
            Returns macro condition saved within the given Rule. If there is no corresponding condition in the rule, returns empty string.
            </summary>
            <param name="rule">Rule containing the macro</param>
            <returns>Macro condition of given rule, if available; empty string otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Argument <paramref name="rule"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.GetValue(CMS.Base.IDataContainer,System.String)">
            <summary>
            Returns value in DB culture (en-us).
            </summary>
            <param name="row">Data source</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleHelper.SetValue(CMS.Base.DataRowContainer,System.String,System.Object)">
            <summary>
            Sets value (in en-us format) into data container in current culture format.
            </summary>
            <param name="row">Data container</param>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="T:CMS.ContactManagement.RuleInfo">
            <summary>
            RuleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleInfo.OBJECT_TYPE_PERSONA">
            <summary>
            Object type for persona rule
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleInfo.PERSONARULETYPEINFO">
            <summary>
            Persona rule type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleValue">
            <summary>
            Rule value.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleGUID">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleDisplayName">
            <summary>
            Rule display name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleValidity">
            <summary>
            Specifies time periods - minute, hour, day, week, month, year. In database, this value is saved as underlying int value of the ValidityEnum.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleLastModified">
            <summary>
            Last modification time.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleValidFor">
            <summary>
            Number of time periods the rule is valid for.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleName">
            <summary>
            Rule code name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleScoreID">
            <summary>
            FK to Score (OM_Score table).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleID">
            <summary>
            RuleID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleType">
            <summary>
            Indicates rule type - activity type or attribute.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleCondition">
            <summary>
            Rule condition in XML format.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleActivityItemObjectType">
            <summary>
            Rule activity object type.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleActivityItemID">
            <summary>
            Rule activity item id.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleActivityItemDetailObjectType">
            <summary>
            Rule activity object type.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleActivityItemDetailID">
            <summary>
            Rule activity item id.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleIsRecurring">
            <summary>
            Indicates if the rule is recurring.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleMaxPoints">
            <summary>
            Limits number of recurrences of the rule.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleParameter">
            <summary>
            Name of the rule type - activity type name or attribute name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleValidUntil">
            <summary>
            Specific day until the rule is valid.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleWhereCondition">
            <summary>
            Gets string representation of the where condition.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.RuleBelongsToPersona">
            <summary>
            Gets or sets the RuleIsPersona flag.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfo.ClearWhereCondition">
            <summary>
            Clears RuleWhereCondition property - it is used in SetRuleInfo method reset the property.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfo.#ctor">
            <summary>
            Constructor - Creates an empty RuleInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new RuleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ContactManagement.RuleInfoProvider">
            <summary>
            Class providing RuleInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.GetRules">
            <summary>
            Returns a query for all the RuleInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.GetRuleInfo(System.Int32)">
            <summary>
            Returns rule with specified ID.
            </summary>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.GetRuleInfo(System.Guid)">
            <summary>
            Returns rule with specified GUID.
            </summary>
            <param name="ruleGuid">Rule GUID</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.SetRuleInfo(CMS.ContactManagement.RuleInfo)">
            <summary>
            Sets (updates or inserts) specified rule.
            </summary>
            <param name="ruleObj">Rule to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.DeleteRuleInfo(CMS.ContactManagement.RuleInfo)">
            <summary>
            Deletes specified rule.
            </summary>
            <param name="ruleObj">Rule to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.DeleteRuleInfo(System.Int32)">
            <summary>
            Deletes rule with specified ID.
            </summary>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.LoadRulesByRuleParameter(System.String,CMS.ContactManagement.RuleTypeEnum)">
            <summary>
            Returns RuleInfo objects based on item name (attribute or activity name).
            </summary>
            <param name="ruleParameter">Item name</param>
            <param name="ruleType">Item type - attribute or activity</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.LoadMacroRules">
            <summary>
            Returns RuleInfo objects based on macros.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.SetInfo(CMS.ContactManagement.RuleInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleInfoProvider.LoadRulesByRuleParameterInternal(System.String,CMS.ContactManagement.RuleTypeEnum)">
            <summary>
            Returns RuleInfo objects based on item name (attribute or activity name).
            </summary>
            <param name="ruleParameter">Item name</param>
            <param name="ruleType">Item type - attribute or activity</param>
        </member>
        <member name="T:CMS.ContactManagement.RuleActivityItem">
            <summary>
            Represents activity rule definition.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleActivityItem.RuleActivityField">
            <summary>
            Represents field definition of an activity rule.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleActivityItem.RuleActivityField.Name">
            <summary>
            Activity field name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleActivityItem.RuleActivityField.Value">
            <summary>
            Activity field value.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleActivityItem.RuleActivityField.Parameters">
            <summary>
            Parameters pairs (hash table).
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.RuleActivityField.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.RuleActivityField.#ctor(System.String,System.String)">
            <summary>
            Constructor, initializes the activity field info instance from given properties.
            </summary>
            <param name="name">Field name</param>
            <param name="value">Field value</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.RuleActivityField.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor, initializes the activity field info instance from the given XML node.
            </summary>
            <param name="fieldNode">XML node with the field data</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.RuleActivityField.ToString">
            <summary>
            Returns activity field name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.RuleActivityField.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>Returns RuleActivityField</returns>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.RuleActivityField.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns the XML node representing the RuleActivityField object.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleActivityItem.ActivityName">
            <summary>
            Activity type name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleActivityItem.Fields">
            <summary>
            Returns the list of activity fields' definitions.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.ToString">
            <summary>
            Returns activity type name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor, initializes the activity rule info instance from the given XML node.
            </summary>
            <param name="ruleNode">XML node with the rule data</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>Returns RuleAttributeInfo</returns>
        </member>
        <member name="M:CMS.ContactManagement.RuleActivityItem.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns the XML node representing the RuleActivityInfo object.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleAttributeItem">
            <summary>
            Represents attribute rule definition.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleAttributeItem.Name">
            <summary>
            Attribute name.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleAttributeItem.Value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleAttributeItem.Parameters">
            <summary>
            Parameters pairs (hash table).
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleAttributeItem.ToString">
            <summary>
            Returns attribute name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleAttributeItem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleAttributeItem.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor, initializes the attribute rule info instance from the given XML node.
            </summary>
            <param name="ruleNode">XML node with the rule data</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleAttributeItem.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>Returns RuleAttributeInfo</returns>
        </member>
        <member name="M:CMS.ContactManagement.RuleAttributeItem.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns the XML node representing the RuleAttributeInfo object.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleItem">
            <summary>
            RuleItem class.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleItem.Clone">
            <summary>
            Clones current object and returns copy of it.
            </summary>
            <returns>Returns clone of either RuleAttributeInfo or RuleActivityInfo depending on current object</returns>
        </member>
        <member name="M:CMS.ContactManagement.RuleItem.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns XML representation of current object.
            </summary>
            <param name="doc">XML document with other items</param>
            <returns>Returns XmlNode</returns>
        </member>
        <member name="T:CMS.ContactManagement.RuleMacroItem">
            <summary>
            Represents macro rule definition.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.RuleMacroItem.MacroValue">
            <summary>
            Value of macro condition.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.RuleMacroItem.#ctor(System.String)">
            <summary>
            Constructor, initializes the macro field to given string value.
            </summary>
            <param name="macroValue">Value of macro rule</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleMacroItem.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor, initializes the macro field info instance from the given XML node.
            </summary>
            <param name="fieldNode">XML node with the field data</param>
        </member>
        <member name="M:CMS.ContactManagement.RuleMacroItem.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>Cloned RuleMacroInfo</returns>
        </member>
        <member name="M:CMS.ContactManagement.RuleMacroItem.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns the XML node representing the macro condition.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.RuleTypeEnum">
            <summary>
            Rule type.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleTypeEnum.Activity">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleTypeEnum.Attribute">
            <summary>
            Attribute type.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.RuleTypeEnum.Macro">
            <summary>
            Macro type.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactWithScoreValue">
            <summary>
            Represents number of points contact has in certain score.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:CMS.ContactManagement.ContactWithScoreValue.ScoreID">
            <summary>
            ID of the score the points belong to.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactWithScoreValue.ScoreValue">
            <summary>
            Number of points contact reached.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactWithScoreValue.ContactID">
            <summary>
            ID of the contact.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactWithScoreValue.SiteID">
            <summary>
            ID of the site.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="T:CMS.ContactManagement.ContactWithScoreValueCollection">
            <summary>
            Container for scores together with amount of points certain contact reached.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValueCollection.#ctor(System.Collections.Generic.IEnumerable{CMS.ContactManagement.ContactWithScoreValue})">
            <summary>
            Constructor.
            </summary>
            <param name="scoreIDsWithPoints">Initial data</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scoreIDsWithPoints"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValueCollection.RemoveItemsWithScoreId(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes items from the collection based on the given list of score IDs.
            </summary>
            <param name="scoreIDs">ScoreIDs used to remove items from the collection</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scoreIDs"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValueCollection.RelativeComplement(CMS.ContactManagement.ContactWithScoreValueCollection)">
            <summary>
            Subtracts subtrahend from the collection.
            </summary>
            <param name="subtrahend">Collection to be subtracted from the current collection</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subtrahend"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator of KeyValuePair of int and int where key is ScoreID and value is number of points.
            </returns>
        </member>
        <member name="M:CMS.ContactManagement.ContactWithScoreValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An enumerator of KeyValuePair of int and int where key is ScoreID and value is number of points.
            </returns>
        </member>
        <member name="T:CMS.ContactManagement.IScoreContactRuleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IScoreContactRuleInfoProvider.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding structure.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IScoreContactRuleInfoProvider.GetAsync(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding structure.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IScoreContactRuleInfoProvider.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
        </member>
        <member name="M:CMS.ContactManagement.IScoreContactRuleInfoProvider.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
        </member>
        <member name="T:CMS.ContactManagement.IScoreInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContactManagement.ScoreInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreContactListInfo">
            <summary>
            Support class for view of contacts in scoring
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreContactListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreContactListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ScoreContactListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ScoreContactListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreContactRuleInfo">
            <summary>
            Info object for binding score - contact - rule.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreContactRuleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreContactRuleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreContactRuleInfo.ScoreID">
            <summary>
            ScoreInfo ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreContactRuleInfo.ContactID">
            <summary>
            ContactInfo ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreContactRuleInfo.RuleID">
            <summary>
            RuleInfo ID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreContactRuleInfo.Value">
            <summary>
            Total value of score gained (value of a rule can be recurring and can be limited).
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreContactRuleInfo.Expiration">
            <summary>
            Expiration gets refreshed each time that value is increased.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreContactRuleInfo.ScoreContactRuleID">
            <summary>
            ScoreContactRule ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfo.#ctor">
            <summary>
            Constructor - Creates an empty ScoreContactRuleInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ScoreContactRuleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreContactRuleInfoProvider">
            <summary>
            Class providing ScoreContactRuleInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetScoreContactRules">
            <summary>
            Returns a query for all the ScoreContactRuleInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding structure.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetAsync(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding structure.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetScoreContactRuleInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns ScoreContactRuleInfo with specified IDs.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.SetScoreContactRuleInfo(CMS.ContactManagement.ScoreContactRuleInfo)">
            <summary>
            Sets (updates or inserts) specified ScoreContactRuleInfo.
            </summary>
            <param name="infoObj">ScoreContactRuleInfo to be set.</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRuleInfo(CMS.ContactManagement.ScoreContactRuleInfo)">
            <summary>
            Deletes specified ScoreContactRuleInfo.
            </summary>
            <param name="infoObj">ScoreContactRuleInfo to be deleted.</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRuleInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes ScoreContactRuleInfo with specified IDs.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.ContactManagement.ScoreContactRuleInfo"/> binding.
            </summary>
            <param name="scoreId">Score ID.</param>
            <param name="contactId">Contact ID.</param>
            <param name="ruleId">Rule ID.</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRule(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes score-contact-rule relation.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRules(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deletes points for the given contacts and rule.
            </summary>
            <param name="ruleID">Id of the scoring rule. Points for this rule will be cleared</param>
            <param name="contactIds">Points of this contacts for rule <paramref name="ruleID"/> will be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetContactsWithScore(System.Int32)">
            <summary>
            Returns IDs of contacts with score values who gained more than minimum score value.
            </summary>
            <param name="minScoreValue">Minimum score value</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetContactsWithScore">
            <summary>
            Returns IDs of contacts with score values.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetContactScore(System.Int32,System.Int32)">
            <summary>
            Returns score value of specified contact.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <returns>Score value of contact</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.RecalculateRuleWithWhereCondition(CMS.ContactManagement.RuleInfo,System.Int32)">
            <summary>
            Recalculates rules that are internally specified by where condition (attribute and activity rule types). Contact's points affected by recalculated rule has to be cleared before calling this method.
            </summary>
            <param name="ri">RuleInfo with specified rule</param>
            <param name="contactId">Contacts which will be recalculated. If null, all contacts will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.RecalculateRuleWithWhereCondition(CMS.ContactManagement.RuleInfo,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Recalculates rules that are internally specified by where condition (attribute and activity rule types). Contact's points affected by recalculated rule has to be cleared before calling this method.
            </summary>
            <param name="ri">RuleInfo with specified rule</param>
            <param name="contactIDs">Contacts which will be recalculated. If null, all contacts will be recalculated</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.AddScoreContactRules(CMS.ContactManagement.RuleInfo,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Adds score contact rules to the database. All bindings must be cleared before calling this procedure.
            </summary>
            <param name="rule">Rule for which the contacts will get <paramref name="value"/> points.</param>
            <param name="contactIDs">Contacts to whom <paramref name="value"/> points will be added for <paramref name="rule"/> score rule</param>
            <param name="value">Score value that will be set to the contacts</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetScoreContactRuleInfoInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns ScoreContactRuleInfo with specified IDs.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.DeleteScoreContactRuleInternal(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Deletes score-contact-rule relation.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <param name="ruleId">Rule ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetContactsWithScoreInternal">
            <summary>
            Returns contact IDs, score IDs with their score values.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleInfoProvider.GetContactScoreInternal(System.Int32,System.Int32)">
            <summary>
            Returns score value of specified contact.
            </summary>
            <param name="scoreId">Score ID</param>
            <param name="contactId">Contact ID</param>
            <returns>Score value of contact</returns>
        </member>
        <member name="T:CMS.ContactManagement.ScoreContactRuleListInfo">
            <summary>
            Support class for view of contact's score detail in scoring
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreContactRuleListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreContactRuleListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ScoreContactRuleListInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ScoreContactRuleListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreContactRuleListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreInfo">
            <summary>
            ScoreInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreInfo.OBJECT_TYPE_PERSONA">
            <summary>
            Object type for the score that is used by persona
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreInfo.PERSONASCORETYPEINFO">
            <summary>
            Type information for persona objects that use scoring module.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreDisplayName">
            <summary>
            Gets or sets the display name of the score.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreDescription">
            <summary>
            Gets or sets the description of the score.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreID">
            <summary>
            Gets or sets the ID of the score.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreName">
            <summary>
            Gets or sets the name of the score.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreEnabled">
            <summary>
            Gets or sets if the score is enabled.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreEmailAtScore">
            <summary>
            Gets or sets score value at which notification e-mail should be sent.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreNotificationEmail">
            <summary>
            Gets or sets notification e-mail.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreLastModified">
            <summary>
            Gets or sets the date and time when the score was last modified.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreGUID">
            <summary>
            Gets or sets the score's unique identifier.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreScheduledTaskID">
            <summary>
            Gets or sets the ID of scheduled task for recalculation.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScorePersonaID">
            <summary>
            Gets or sets the ScorePersonaID.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.ScoreStatus">
            <summary>
            Gets or sets status of the score.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.Contacts">
            <summary>
            Collection of all contacts within the scoring group.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfo.#ctor">
            <summary>
            Constructor - Creates an empty ScoreInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ScoreInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="T:CMS.ContactManagement.ScoreInfoProvider">
            <summary>
            Class providing ScoreInfo management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.#ctor">
            <summary>
            Constructor using ID hashtable.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScores">
            <summary>
            Returns a query for all the ScoreInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScoreInfo(System.Int32)">
            <summary>
            Returns score with specified ID.
            </summary>
            <param name="scoreId">Score ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.SetScoreInfo(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Sets (updates or inserts) specified score.
            </summary>
            <param name="scoreObj">Score to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.DeleteScoreInfo(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Deletes specified score.
            </summary>
            <param name="scoreObj">Score to be deleted</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.DeleteScoreInfo(System.Int32)">
            <summary>
            Deletes score with specified ID.
            </summary>
            <param name="scoreId">Score ID</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.DeleteAllScores(System.String)">
            <summary>
            Deletes scores specified by where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScoresWhereContactExceededLimit(System.Int32)">
            <summary>
            Returns IDs and values of scores where specified contact exceeded score limit. Used to send notification emails.
            </summary>
            <param name="contactId">Contact ID</param>
            <returns>Collection containing score, contact and values where the limit was exceeded.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScoresWhereContactsExceededLimit(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns IDs and values of scores where specified contacts exceeded score limit. Used to send notification emails.
            </summary>
            <param name="contactIds">Contact IDs</param>
            <returns>Collection containing score, contact and values where the limit was exceeded.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.EnsureScheduledTask(CMS.ContactManagement.ScoreInfo,System.String,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns existing scheduled task for recalculation or creates new one based on the score info and other settings.
            </summary>
            <param name="score">Score info</param>
            <param name="scheduledInterval">Scheduled interval string for new task</param>
            <param name="nextRunTime">Next run time for new task</param>
            <param name="taskEnabled">Indicates if new task should be enabled</param>
            <param name="saveNewTask">Indicates if new task should be saved (inserted into DB)</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScheduledTask(CMS.ContactManagement.ScoreInfo,System.String,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            If appropriate scheduled task for Score exists then it is returned. Instead new 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.DeleteScoreScheduledTask(System.Int32)">
            <summary>
            Deletes scheduled task of score with given ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetNewScheduledTask(CMS.ContactManagement.ScoreInfo,System.String,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Creates new scheduled task with basic properties set.
            </summary>
            <param name="score">Score info</param>
            <param name="scheduledInterval">Scheduled interval string</param>
            <param name="nextRunTime">Next run time</param>
            <param name="taskEnabled">Indicates if task should be enabled</param>
            <param name="saveNewTask">Indicates if new task should be saved (inserted into DB)</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.ProcessTriggers(CMS.ContactManagement.ScoreInfo,System.Nullable{System.Int32},System.Data.DataSet)">
            <summary>
            Processes workflow triggers based on given score and contact ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.MarkScoreAsReady(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Marks score object as ready. This method does not log changes to the event log, staging log and export log.
            </summary>
            <param name="score">Score info object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.MarkScoreAsFailed(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Marks score object as failed. This method does not log changes to the event log, staging log and export log.
            </summary>
            <param name="score">Score info object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.MarkScoreAsRecalculating(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Marks score object as being recalculated. This method does not log changes to the event log, staging log and export log.
            </summary>
            <param name="score">Score info object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.MarkScoreAsRecalculationRequired(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Marks score object as recalculation required. This method does not log changes to the event log, staging log and export log.
            </summary>
            <param name="score">Score info object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="score"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.SetInfo(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.DeleteAllScoresInternal(System.String)">
            <summary>
            Deletes scores specified by where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScoresWhereContactExceededLimitInternal(System.Int32)">
            <summary>
            Returns IDs and values of scores where specified contact exceeded score limit. Used to send notification emails.
            </summary>
            <param name="contactId">Contact ID</param>
            <returns>Collection containing score, contact and values where the limit was exceeded.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.GetScoresWhereContactsExceededLimitInternal(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns IDs and values of scores where specified contacts exceeded score limit. Used to send notification emails.
            </summary>
            <param name="contactIds">Contact IDs</param>
            <returns>Collection containing score, contact and values where the limit was exceeded.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.ProcessTriggersInternal(CMS.ContactManagement.ScoreInfo,System.Nullable{System.Int32},System.Data.DataSet)">
            <summary>
            Processes triggers based on given score and contact ID.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.CreateTriggerOptions(CMS.ContactManagement.ScoreInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates trigger options based on given parameters
            </summary>
            <param name="score">Score</param>
            <param name="contactId">Contact ID</param>
            <param name="newScore">New score value</param>
            <param name="oldScore">Old score value</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.CreateHashtableFromScoreValues(System.Data.DataSet)">
            <summary>
            Creates hash table from dataset of contact ID - score ID - score value.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreInfoProvider.SetScoreStatusInternal(CMS.ContactManagement.ScoreInfo,CMS.ContactManagement.ScoreStatusEnum)">
            <summary>
            Changes status of the Score and sets it immediately to the database. This method does not log changes to the event log, staging log and export log.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreQueueWorker">
            <summary>
            Queue worker for processing scoring actions
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreStatusEnum">
            <summary>
            Types of score status used by ScoreInfo object.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreStatusEnum.Unspecified">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreStatusEnum.Ready">
            <summary>
            Score is up to date.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreStatusEnum.Recalculating">
            <summary>
            Recalculating.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreStatusEnum.RecalculationRequired">
            <summary>
            New, recalculation required.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ScoreStatusEnum.RecalculationFailed">
            <summary>
            Recalculation failed.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoreStatusFormatter">
            <summary>
            Returns formatted text for score status.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreStatusFormatter.RecalculationURL">
            <summary>
            Optional. URL of the dialog for recalculation details.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoreStatusFormatter.DisplayTooltips">
            <summary>
            Indicates if tooltips should be displayed.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreStatusFormatter.#ctor(CMS.ContactManagement.ScoreInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="scoreInfo">Score info object.</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoreStatusFormatter.GetFormattedStatus">
            <summary>
            Gets formatted score status. Score can be disabled, it can be scheduled to rebuild in the future or its status is one of <see cref="T:CMS.ContactManagement.ScoreStatusEnum"/>.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ScoringHandlers">
            <summary>
            Event handlers of the Scoring module.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoringHandlers.Init">
            <summary>
            Subscribes to events.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoringHandlers.RecalculateScoresBatch(System.Object,CMS.ContactManagement.ProcessContactActionsBatchEventArgs)">
            <summary>
            Recalculates scores after batch of contact activities was processed.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoringHandlers.SaveScoresSnapshotBeforeBatchRecalculation(System.Object,CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs)">
            <summary>
            Saves current score values before score is recalculated, so email notifications can be send later and corresponding marketing automation triggers can be fired.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments containing collection of affected contacts</param>
        </member>
        <member name="M:CMS.ContactManagement.ScoringHandlers.PerformActionsAfterRecalculationToBatchGroup(System.Object,CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs)">
            <summary>
            Performs actions after score calculation.
            Sends notification emails when contact exceeded points limit (saved by <see cref="M:CMS.ContactManagement.ScoringHandlers.SaveScoresSnapshotBeforeBatchRecalculation(System.Object,CMS.ContactManagement.RecalculateAfterContactActionsBatchEventArgs)"/> method)
            and processes marketing automation score triggers.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments containing collection of affected contacts</param>
        </member>
        <member name="T:CMS.ContactManagement.ScoringUsageDataSource">
            <summary>
            Provides statistical information about module.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ScoringUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoringUsageDataSource.GetData">
            <summary>
            Get all module statistical data.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoringUsageDataSource.GetTotalEnabledScoringCount(System.Collections.Generic.IEnumerable{CMS.ContactManagement.ScoreInfo})">
            <summary>
            Gets total count of enabled scoring within the page.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoringUsageDataSource.GetNumberOfRulesInScoresGroupedByType">
            <summary>
            Returns number of rule types per each score.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoringUsageDataSource.GetNumberOfContactsInEachScore">
            <summary>
            Returns number of contacts in each score.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.BatchScoreTriggersRunner.#ctor(System.Collections.Generic.ISet{System.Int32})">
            <summary>
            Constructor.
            </summary>
            <param name="contactIds">Collection of Contact IDs to be processed</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contactIds"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.BatchScoreTriggersRunner.SaveScoresSnapshot">
            <summary>
            This method has to be called before recalculation. 
            It saves current score points so triggers will fire only when they exceed limit after recalculation.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.BatchScoreTriggersRunner.ProcessTriggers">
            <summary>
            Compares current score points with score points saved before recalculation (by method <see cref="M:CMS.ContactManagement.BatchScoreTriggersRunner.SaveScoresSnapshot"/>) 
            and prepares worker queue for triggers that could be affected by points change.
            </summary>
            <exception cref="T:System.InvalidOperationException">Method <see cref="M:CMS.ContactManagement.BatchScoreTriggersRunner.SaveScoresSnapshot"/> wasn't called before recalculation</exception>
        </member>
        <member name="M:CMS.ContactManagement.BatchScoreTriggersRunner.GetContactScoreValues">
            <summary>
            Gets contact with all his score values
            </summary>
            <returns>Contact and score values of all scores contact got points in</returns>
        </member>
        <member name="T:CMS.ContactManagement.DefaultContactCreator">
            <summary>
            Provides method for creating new contacts.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactCreator.#ctor(CMS.ContactManagement.IContactInfoProvider,CMS.Core.Internal.IDateTimeNowService)">
            <summary>
            Instantiates new instance of <see cref="T:CMS.ContactManagement.DefaultContactCreator"/>.
            </summary>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <param name="dateTimeNowService">Service for obtaining current date time</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactInfoProvider" /> or <paramref name="dateTimeNowService"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactCreator.CreateAnonymousContact">
            <summary>
            Creates new anonymous contact. Created instance of <see cref="T:CMS.ContactManagement.ContactInfo"/> is saved to the database.
            </summary>
            <returns>Created anonymous contact.</returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactCreator.CreateContact(System.String)">
            <summary>
            Creates new instance of <see cref="T:CMS.ContactManagement.ContactInfo"/> with given <paramref name="namePrefix"/> in <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/>.
            Created instance of <see cref="T:CMS.ContactManagement.ContactInfo"/> is saved to the database.
            </summary>
            <remarks>
            Current date time will be used as default value of <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/>.
            </remarks>
            <param name="namePrefix">Prefix that will be prepended to the created <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/>. If null is passed, no prefix will be used</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactCreator">
            <summary>
            Provides method for creating new contacts.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactCreator.CreateAnonymousContact">
            <summary>
            Creates new anonymous contact. Created instance of <see cref="T:CMS.ContactManagement.ContactInfo"/> is saved to the database.
            <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/> starts with prefix <see cref="F:CMS.ContactManagement.ContactHelper.ANONYMOUS"/>.
            </summary>
            <example>
            <para>Following example shows how to use the method <see cref="M:CMS.ContactManagement.IContactCreator.CreateAnonymousContact"/></para>
            <code>
            ...
            IContactCreator contactCreator = someImplementation;
            
            // Assume it is now midnight on 2016/01/01
            
            // Will create new contact with ContactLastName 'Anonymous - 2016-01-01 00:00:00.000'
            var contactWithoutPrefix = contactCreator.CreateAnonymousContact();
            ...
            </code>
            </example>
            <returns>Created contact</returns>
        </member>
        <member name="M:CMS.ContactManagement.IContactCreator.CreateContact(System.String)">
            <summary>
            Creates and returns new contact with given <paramref name="namePrefix"/> in <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/>.
            Created instance of <see cref="T:CMS.ContactManagement.ContactInfo"/> is saved to the database.
            </summary>
            <remarks>
            Current date time will be used as default value of <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/>.
            </remarks>
            <param name="namePrefix">Prefix that will be prepend to the created <see cref="P:CMS.ContactManagement.ContactInfo.ContactLastName"/>. If null is passed, no prefix will be used</param>
            <example>
            <para>Following example shows how to use the method <see cref="M:CMS.ContactManagement.IContactCreator.CreateContact(System.String)"/></para>
            <code>
            ...
            IContactCreator contactCreator = someImplementation;
            
            // Assume it is now midnight on 2016/01/01
            
            // Will create new contact with ContactLastName '2016-01-01 00:00:00.000'
            var contactWithoutPrefix = contactCreator.CreateContact();
            
            // Will create new contact with ContactLastName 'prefix_2016-01-01 00:00:00.000'
            var contactWithoutPrefix = contactCreator.CreateContact("prefix");
            ...
            </code>
            </example>
            <returns>Created contact</returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupMembersCount">
            <summary>
            Class to link contact group with its count of members
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMembersCount.ContactGroupID">
            <summary>
            Contact group ID
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupMembersCount.MembersCount">
            <summary>
            Count of members
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupMemberService">
            <summary>
            Class for members in contact groups. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberService.#ctor(CMS.ContactManagement.IContactGroupMemberInfoProvider,CMS.ContactManagement.IContactInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.ContactGroupMemberService"/> class.
            </summary>
            <param name="contactGroupMemberInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactGroupMemberInfo"/> management.</param>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactGroupMemberInfoProvider"/> or <paramref name="contactInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupMemberService.GetCountOfContactsInContactGroup(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets count of contacts in contact groups.
            </summary>
            <param name="contactGroupsId">Contact groups to get count of contacts for</param>
            <returns>Count of contacts matched with contact groups.</returns>
            <exception cref="T:System.ArgumentNullException">Is thrown if <paramref name="contactGroupsId"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.IContactGroupMemberService">
            <summary>
            Class for members in contact groups. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactGroupMemberService.GetCountOfContactsInContactGroup(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets count of contacts in contact groups.
            </summary>
            <param name="contactGroupsId">Contact groups to get count of contacts for</param>
            <returns>Count of contacts matched with contact groups.</returns>
        </member>
        <member name="T:CMS.ContactManagement.DefaultContactPersistentStorage">
            <summary>
            Provides methods for get and set contact from/to the cookie.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactPersistentStorage.#ctor(CMS.ContactManagement.ICookieService,CMS.ContactManagement.Internal.IContactProcessingChecker,CMS.ContactManagement.IContactInfoProvider)">
            <summary>
            Instantiates new instance of <see cref="T:CMS.ContactManagement.DefaultContactPersistentStorage"/>.
            </summary>
            <param name="cookieService">Provides method for getting or setting the cookie from/to the request/response</param>
            <param name="contactProcessingChecker">Provides method for checking whether the contact processing can continue.</param>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cookieService"/>, <paramref name="contactProcessingChecker"/> or <paramref name="contactInfoProvider"/> is <c>null</c></exception>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactPersistentStorage.GetPersistentContact">
            <summary>
            Gets contact from the cookie.
            </summary>
            <returns>Contact retrieved from the persistent storage</returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactPersistentStorage.SetPersistentContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Sets given contact to the cookie.
            </summary>
            <param name="contact">Contact to be set</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactPersistentStorage">
            <summary>
            Provides methods for storing and retrieving contact from/to persistent storage.
            Persistent storage is a place where contact can be stored and after the same contact
            makes another request, it will be returned.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactPersistentStorage.GetPersistentContact">
            <summary>
            Gets contact from the persistent storage.
            </summary>
            <example>
            <para>Following example shows how to use GetPersistentContact method</para>
            <code>
            ...
            IContactPersistentStorage contactPersistentStorage = someImplementation;
            // Returns contact from the persistent storage
            contactPersistentStorage.GetPersistentContact();
            ...
            </code>
            </example>
            <remarks>
            In default implementation, cookie will be used as persistent storage for the contacts.
            </remarks>
            <returns>Contact retrieved from the persistent storage</returns>
        </member>
        <member name="M:CMS.ContactManagement.IContactPersistentStorage.SetPersistentContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Sets given <paramref name="contact"/> to the persistent storage.
            </summary>
            <example>
            <para>Following example shows how to use SetPersistentContact method</para>
            <code>
            ...
            IContactPersistentStorage contactPersistentStorage = someImplementation;
            // Stores given 'contact'  to the persistent storage
            contactPersistentStorage.SetPersistentContact(contact);
            ...
            
            ...
            // In another request
            
            // Returns the same contact that was set earlier with SetPersistentContact method
            contactPersistentStorage.GetPersistentContact();
            </code>
            </example>
            <remarks>
            In default implementation, cookie will be used as persistent storage for the contacts.
            </remarks>
            <param name="contact">Contact to be set</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactProcessingChecker.CanProcessContactInCurrentContext">
            <summary>
            Checks whether the contact processing can continue in the context of current HTTP request.
            </summary>
            <returns><c>True</c> if the contact processing can continue; otherwise, <c>false</c></returns>
        </member>
        <member name="T:CMS.ContactManagement.DefaultContactRelationAssigner">
            <summary>
            Provides methods for creating relationship between contact and user.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactRelationAssigner.#ctor(CMS.ContactManagement.Internal.IContactProcessingChecker,CMS.ContactManagement.IContactMembershipInfoProvider)">
            <summary>
            Creates an instance of the <see cref="T:CMS.ContactManagement.DefaultContactRelationAssigner"/> class.
            </summary>
            <param name="contactProcessingChecker">Checker to verify that contact processing is allowed.</param>
            <param name="contactMembershipInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactMembershipInfo"/> management.</param>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactRelationAssigner.Assign(CMS.Base.IUserInfo,CMS.ContactManagement.ContactInfo,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Creates relationship between given <paramref name="user"/> and <paramref name="contact"/>.
            </summary>
            <param name="user">Current user to be assigned to the <paramref name="contact"/></param>
            <param name="contact">Contact the <paramref name="user"/> should be assigned to</param>
            <param name="checker">Checks whether the object should be assigned.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="user"/> or <paramref name="contact"/> is null</exception>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactRelationAssigner.Assign(CMS.ContactManagement.MemberTypeEnum,CMS.DataEngine.BaseInfo,CMS.ContactManagement.ContactInfo,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Creates relationship between given <paramref name="contact"/> and given <paramref name="relatedObject"/> of type specified in <paramref name="memberType"/>.
            </summary>
            <param name="memberType">Type of <paramref name="relatedObject"/></param>
            <param name="relatedObject">Related object to be assigned to the given <paramref name="contact"/></param>
            <param name="contact">Contact the <paramref name="relatedObject"/> should be assigned to</param>
            <param name="checker">Checks whether the object should be assigned.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="relatedObject"/> is <c>null</c> -or- <paramref name="contact"/> is <c>null</c></exception>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactRelationAssigner.Assign(System.Int32,CMS.ContactManagement.MemberTypeEnum,System.Int32,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Creates relationship between for given <paramref name="contactId"/> and related object with given <paramref name="relatedId"/> of type specified in <paramref name="memberType"/>.
            </summary>
            <param name="relatedId">ID of related object</param>
            <param name="memberType">Type of object</param>
            <param name="contactId">Contact ID</param>
            <param name="checker">Checks whether the object should be assigned.</param>
        </member>
        <member name="T:CMS.ContactManagement.IContactRelationAssigner">
            <summary>
            Provides method for creating relationship between <see cref="T:CMS.ContactManagement.ContactInfo"/> and other objects.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactRelationAssigner.Assign(CMS.Base.IUserInfo,CMS.ContactManagement.ContactInfo,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Creates relationship between given <paramref name="user"/> and <paramref name="contact"/>.
            </summary>
            <remarks>
            Creates new <see cref="T:CMS.ContactManagement.ContactMembershipInfo"/> record with given <paramref name="user"/> and <paramref name="contact"/>.
            </remarks>
            <param name="user">User to be assigned to the <paramref name="contact"/></param>
            <param name="contact">Contact the <paramref name="user"/> should be assigned to</param>
            <param name="checker">Checks whether the object should be assigned.</param>
            <example>
            Following example shows how to use method <see cref="M:CMS.ContactManagement.IContactRelationAssigner.Assign(CMS.Base.IUserInfo,CMS.ContactManagement.ContactInfo,CMS.ContactManagement.IContactDataPropagationChecker)"/>.
            <code>
            ...
            IContactRelationAssigner contactRelationAssigner = someImplementation;
            var user = someUser;
            var contact = someContact;
            
            // Will create new ContactMembershipInfo record of type User linking to the given contact and user
            contactRelationAssigner.Assign(user, contact);
            ...
            </code>
            </example>
        </member>
        <member name="M:CMS.ContactManagement.IContactRelationAssigner.Assign(CMS.ContactManagement.MemberTypeEnum,CMS.DataEngine.BaseInfo,CMS.ContactManagement.ContactInfo,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Adds specified relationship among specified contact, related object and object type.
            </summary>
            <param name="memberType">Type of object</param>
            <param name="info">Base info of related object</param>
            <param name="contact">Contact info</param>
            <param name="checker">Checks whether the object should be assigned.</param>
            <example>
            Following example shows how to use method <see cref="M:CMS.ContactManagement.IContactRelationAssigner.Assign(CMS.ContactManagement.MemberTypeEnum,CMS.DataEngine.BaseInfo,CMS.ContactManagement.ContactInfo,CMS.ContactManagement.IContactDataPropagationChecker)"/>.
            <code>
            ...
            IContactRelationAssigner contactRelationAssigner = someImplementation;
            var subscriber = subscriber;
            var contact = someContact;
            
            // Will create new ContactMembershipInfo record of type Subscriber linking to the given contact and subscriber
            contactRelationAssigner.Assign(MemberTypeEnum.NewsletterSubscriber, subscriber, contact);
            ...
            </code>
            </example>
        </member>
        <member name="M:CMS.ContactManagement.IContactRelationAssigner.Assign(System.Int32,CMS.ContactManagement.MemberTypeEnum,System.Int32,CMS.ContactManagement.IContactDataPropagationChecker)">
            <summary>
            Creates relationship between for given <paramref name="contactId"/> and related object with given <paramref name="relatedId"/> of type specified in <paramref name="memberType"/>.
            </summary>
            <param name="relatedId">ID of related object</param>
            <param name="memberType">Type of object</param>
            <param name="contactId">Contact ID</param>
            <param name="checker">Checks whether the object should be assigned.</param>
            <example>
            Following example shows how to use method <see cref="M:CMS.ContactManagement.IContactRelationAssigner.Assign(System.Int32,CMS.ContactManagement.MemberTypeEnum,System.Int32,CMS.ContactManagement.IContactDataPropagationChecker)"/>.
            <code>
            ...
            IContactRelationAssigner contactRelationAssigner = someImplementation;
            var subscriber = subscriber;
            var contactI = someContactId;
            
            // Will create new ContactMembershipInfo record of type Subscriber linking to the given contact and subscriber
            contactRelationAssigner.Assign(subscriber.SubscriberID, MemberTypeEnum.NewsletterSubscriber, someContactId);
            ...
            </code>
            </example>
        </member>
        <member name="T:CMS.ContactManagement.ContactTypeEnum">
            <summary>
            Specifies possible types of contacts. This value determines which component will be used for displaying contact detail.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactTypeEnum.Simple">
            <summary>
            Determines the contact is available in basic license versions.
            </summary>
        </member>
        <member name="F:CMS.ContactManagement.ContactTypeEnum.Full">
            <summary>
            Determines the contact is available in all license versions.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DefaultContactValidator">
            <summary>
            Provides method for validating contact against the database.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactValidator.#ctor(CMS.ContactManagement.IContactInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.DefaultContactValidator"/> class.
            </summary>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.DefaultContactValidator.ValidateContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Checks whether contact passed in <paramref name="contact"/> is valid and can be used as a current contact.
            Updates contact from hashtables/DB. If contact is merged, returns parent contact if available.
            </summary>
            <param name="contact">Contact to be validated</param>
            <returns>Returns updated and parent contact or null if passed contact is not valid</returns>
        </member>
        <member name="T:CMS.ContactManagement.IContactValidator">
            <summary>
            Provides method for validating contact against the database.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IContactValidator.ValidateContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Checks whether contact passed in <paramref name="contact"/> is valid and can be used as a current contact.
            Updates contact from hashtables/DB. If contact is merged, returns parent contact if available.
            </summary>
            <param name="contact">Contact to be validated</param>
            <returns>Returns updated and parent contact or null if passed contact is not valid</returns>
        </member>
        <member name="T:CMS.ContactManagement.DefaultCookieService">
            <summary>
            Provides methods for getting and setting the cookie from/to the request/response.
            </summary>
            <remarks>
            Only wraps <see cref="T:CMS.Helpers.CookieHelper"/> for providing the ability to mock the service.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCookieService.#ctor(CMS.Core.Internal.IDateTimeNowService)">
            <summary>
            Instantiates new instance of <see cref="T:CMS.ContactManagement.DefaultCookieService"/>
            </summary>
            <param name="dateTimeNowService">Service for obtaining current date time</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="dateTimeNowService"/> is <c>null</c></exception>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCookieService.GetValue(System.String)">
            <summary>
            Returns cookie value for given <paramref name="cookieName"/> from the request/response.
            </summary>
            <remarks>
            Cookie can be loaded from the response if it was set earlier during the request handling.
            </remarks>
            <param name="cookieName">Name of the cookie to be obtained</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cookieName"/> is <c>null</c></exception>
            <returns>Value of the cookie. If no cookie with <paramref name="cookieName"/> exists, returns <c>null</c></returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCookieService.SetValue(System.String,System.String,System.TimeSpan)">
            <summary>
            Sets given <paramref name="value"/> to the cookie named <paramref name="cookieName"/> to the response.
            </summary>
            <remarks>
            If cookie with <paramref name="cookieName"/> already exists in the response, it is overwritten with new value.
            </remarks>
            <param name="cookieName">Name of the cookie to be set</param>
            <param name="value">Value of the cookie to be set</param>
            <param name="duration">Duration specifying how long will be the cookie valid till it expires</param>
        </member>
        <member name="T:CMS.ContactManagement.ICookieService">
            <summary>
            Provides methods for getting or setting the cookie from/to the request/response.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ICookieService.GetValue(System.String)">
            <summary>
            Returns cookie value for given <paramref name="cookieName"/> from the request/response.
            </summary>
            <remarks>
            Cookie can be loaded from the response if it was set earlier during the request handling.
            </remarks>
            <param name="cookieName">Name of the cookie to be obtained</param>
            <example>
            <para>Following example shows how to use GetValue method</para>
            <code>
            ...
            ICookieService cookieService = someImplementation;
            // Returns value of the cookie with name 'cookie'
            cookieService.GetValue("cookie");
            
            // Returns null
            cookieServive.GetValue("nonExistingCookie");
            ...
            </code>
            </example>
            <returns>Value of the cookie. If no cookie with <paramref name="cookieName"/> exists, returns <c>null</c></returns>
        </member>
        <member name="M:CMS.ContactManagement.ICookieService.SetValue(System.String,System.String,System.TimeSpan)">
            <summary>
            Sets given <paramref name="value"/> to the cookie named <paramref name="cookieName"/> to the response.
            </summary>
            <param name="cookieName">Name of the cookie to be set</param>
            <param name="value">Value of the cookie to be set</param>
            <param name="duration">Duration specifying how long will be the cookie valid till it expires</param>
            <remarks>
            <para>If cookie with <paramref name="cookieName"/> already exists in the response, it is overwritten with new value.</para>
            <para>
            As a base date for the cookie expiration is used current date time, therefore when <c>TimeSpan.FromDays(20)</c> is used for <paramref name="duration"/> 
            at midnight on 2016/01/01, the cookie will expire at midnight on 2016/01/21.
            </para>
            </remarks>
            <example>
            <para>Following example shows how to use SetValue method</para>
            <code>
            ...
            ICookieService cookieService = someImplementation;
            // Sets cookie with name 'cookieName' with value 'cookieValue' and sets its duration for 20 days
            cookieService.SetValue("cookieName", "cookieValue", TimeSpan.FromDays(20));
            ...
            </code>
            </example>
        </member>
        <member name="T:CMS.ContactManagement.CurrentContactProviderContextDecorator">
            <summary>
            Decorates the implementation of <see cref="T:CMS.ContactManagement.ICurrentContactProvider"/> given in constructor to perform <see cref="M:CMS.ContactManagement.Internal.IContactProcessingChecker.CanProcessContactInCurrentContext"/> check before invoking every method.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.CurrentContactProviderContextDecorator.#ctor(CMS.ContactManagement.ICurrentContactProvider,CMS.ContactManagement.Internal.IContactProcessingChecker)">
            <summary>
            Instantiates new instance of <see cref="T:CMS.ContactManagement.CurrentContactProviderContextDecorator"/>.
            </summary>
            <param name="defaultCurrentContactProvider">Implementation of <see cref="T:CMS.ContactManagement.ICurrentContactProvider"/> to be decorated</param>
            <param name="contactProcessingChecker">Provides method for checking whether the contact processing can continue</param>
        </member>
        <member name="M:CMS.ContactManagement.CurrentContactProviderContextDecorator.GetCurrentContact(CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether processing of contact can continue. If so, recognizes a contact currently browsing the live site. If the contact cannot be recognized a new one is created. A returned contact is always 
            valid (exists in database, is not merged, etc.) and is automatically assigned to <paramref name="currentUser"/> User (if it's not a public
            user). 
            </summary>
            <param name="currentUser">Currently signed in user or public user</param>
            <param name="forceUserMatching">If true, the current contact is tried to be determined by the user even if it can be found by other ways</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="currentUser"/> is <c>null</c> </exception>
            <exception cref="T:System.InvalidOperationException">Processing of contacts cannot continue. This can be due to the insufficient license, disabled online marketing or incorrect request state.</exception>
            <returns>The recognized contact or a new contact, if it was not possible to recognize the contact.</returns>
        </member>
        <member name="M:CMS.ContactManagement.CurrentContactProviderContextDecorator.GetExistingContact(CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether processing of contact can continue. If so, gets a contact assigned to the visitor currently browsing the live site (contact can only be recognized during web request).
            A returned contact is always valid (exists in database, is not merged, etc.) and is automatically assigned to <paramref name="currentUser"/> (if it's not a public user).
            If no contact is currently assigned to the visitor <c>null</c> is returned.
            </summary>
            <param name="currentUser">Currently signed in user or public user</param>
            <param name="forceUserMatching">If true, the current contact is tried to be determined by the user even if it can be found by other ways</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="currentUser"/> is <c>null</c> </exception>
            <exception cref="T:System.InvalidOperationException">Processing of contacts cannot continue. This can be due to the insufficient license, disabled online marketing or incorrect request state.</exception>
            <returns>The recognized contact or <c>null</c> when there is no contact assigned to current live site visitor</returns>
        </member>
        <member name="M:CMS.ContactManagement.CurrentContactProviderContextDecorator.SetCurrentContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Checks whether processing of contact can continue. If so, stores information about the current contact into the persistent storage (<see cref="T:CMS.ContactManagement.IContactPersistentStorage"/>), so that the next time 
            (possibly in another request in the same session) <see cref="M:CMS.ContactManagement.CurrentContactProviderContextDecorator.GetCurrentContact(CMS.Base.IUserInfo,System.Boolean)"/> is called, the stored contact is returned.
            </summary>
            <param name="contact">The contact who performed the request</param>
            <exception cref="T:System.InvalidOperationException">Processing of contacts cannot continue. This can be due to the insufficient license, disabled online marketing or incorrect request state.</exception>
        </member>
        <member name="T:CMS.ContactManagement.DefaultCurrentContactProvider">
            <summary>
            Service for recognizing and storing information about a contact currently browsing the live site. 
            This implementation uses all known methods to recognize the contact.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentContactProvider.#ctor(CMS.ContactManagement.IContactValidator,CMS.ContactManagement.IContactPersistentStorage,CMS.ContactManagement.ICurrentUserContactProvider,CMS.ContactManagement.IContactCreator,CMS.ContactManagement.IContactRelationAssigner,CMS.ContactManagement.Internal.IContactProcessingChecker)">
            <summary>
            Creates an instance of the <see cref="T:CMS.ContactManagement.DefaultCurrentContactProvider"/> class.
            </summary>
            <param name="contactValidator">Contact validator.</param>
            <param name="contactPersistentStorage">Storage for current contact.</param>
            <param name="currentUserContactProvider">Provider of a <see cref="T:CMS.ContactManagement.ContactInfo"/> for particular <see cref="T:CMS.Membership.UserInfo"/>.</param>
            <param name="contactCreator">Contact creator.</param>
            <param name="contactRelationAssigner">Creator of relationship between <see cref="T:CMS.ContactManagement.ContactInfo"/> and related object (in this case <see cref="T:CMS.Membership.UserInfo"/>).</param>
            <param name="contactProcessingChecker">Checker to verify that contact processing is allowed.</param>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentContactProvider.GetExistingContact(CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Recognizes a contact currently browsing the live site. A returned contact is always 
            valid (exists in database, is not merged, etc.) and is automatically assigned to <paramref name="currentUser"/> User (if it isn't a public user).
            </summary>
            <param name="currentUser">Currently signed in user or public user.</param>
            <param name="forceUserMatching">If true, current contact is tried to be determined by the user even if it can be found by other ways.</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="currentUser"/> is <c>null</c>.</exception>
            <returns>Recognized contact or <c>null</c> in case of missing EMS license, disabled online marketing or insufficient cookie level.</returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentContactProvider.GetCurrentContact(CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Recognizes a contact currently browsing the live site. If the contact cannot be recognized a new one is created. A returned contact is always 
            valid (exists in database, is not merged, etc.) and is automatically assigned to <paramref name="currentUser"/> User (if it isn't a public
            user).
            </summary>
            <param name="currentUser">Currently signed in user or public user.</param>
            <param name="forceUserMatching">If true, current contact is tried to be determined by the user even if it can be found by other ways.</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="currentUser"/> is <c>null</c>.</exception>
            <returns>Recognized contact or new contact, if it was not possible to recognize contact. 
            <c>Null</c> in case of missing EMS license, disabled online marketing or insufficient cookie level.</returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentContactProvider.SetCurrentContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Stores information about the current contact into the persistent storage (<see cref="T:CMS.ContactManagement.IContactPersistentStorage"/>), so that the next time 
            (possibly in another request in the same session) <see cref="M:CMS.ContactManagement.ICurrentContactProvider.GetCurrentContact(CMS.Base.IUserInfo,System.Boolean)"/> is called, the stored 
            contact is returned.
            </summary>
            <param name="contact">The contact who performed the request</param>
        </member>
        <member name="T:CMS.ContactManagement.ICurrentContactProvider">
            <summary>
            Service for recognizing and storing information about a contact currently browsing the live site. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentContactProvider.GetCurrentContact(CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Recognizes a contact currently browsing the live site. If the contact cannot be recognized a new one is created. A returned contact is always 
            valid (exists in database, is not merged, etc.) and is automatically assigned to <paramref name="currentUser"/> User (if it's not a public
            user).
            </summary>
            <param name="currentUser">Currently signed in user or public user</param>
            <param name="forceUserMatching">If true, the current contact is tried to be determined by the user even if it can be found by other ways</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="currentUser"/> is <c>null</c> </exception>
            <exception cref="T:System.InvalidOperationException">Processing of contacts cannot continue. This can be due to the insufficient license, disabled online marketing or incorrect request state.</exception>
            <returns>The recognized contact or a new contact, if it was not possible to recognize the contact.</returns>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentContactProvider.GetExistingContact(CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Gets a contact assigned to the visitor currently browsing the live site (contact can only be recognized during web request).
            A returned contact is always valid (exists in database, is not merged, etc.) and is automatically assigned to <paramref name="currentUser"/> (if it's not a public user).
            If no contact is currently assigned to the visitor <c>null</c> is returned.
            </summary>
            <param name="currentUser">Currently signed in user or public user</param>
            <param name="forceUserMatching">If true, the current contact is tried to be determined by the user even if it can be found by other ways</param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="currentUser"/> is <c>null</c> </exception>
            <exception cref="T:System.InvalidOperationException">Processing of contacts cannot continue. This can be due to the insufficient license, disabled online marketing or incorrect request state.</exception>
            <returns>The recognized contact or <c>null</c> when there is no contact assigned to current live site visitor</returns>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentContactProvider.SetCurrentContact(CMS.ContactManagement.ContactInfo)">
            <summary>
            Stores information about the current contact into the persistent storage (<see cref="T:CMS.ContactManagement.IContactPersistentStorage"/>), so that the next time 
            (possibly in another request in the same session) <see cref="M:CMS.ContactManagement.ICurrentContactProvider.GetCurrentContact(CMS.Base.IUserInfo,System.Boolean)"/> is called, the stored contact is returned.
            </summary>
            <param name="contact">The contact who performed the request</param>
            <exception cref="T:System.InvalidOperationException">Processing of contacts cannot continue. This can be due to the insufficient license, disabled online marketing or incorrect request state.</exception>
        </member>
        <member name="T:CMS.ContactManagement.DefaultCurrentUserContactProvider">
            <summary>
            Provides methods for getting <see cref="T:CMS.ContactManagement.ContactInfo"/> for <see cref="T:CMS.Base.IUserInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentUserContactProvider.GetContactForCurrentUser(CMS.Base.IUserInfo)">
            <summary>
            Gets a <see cref="T:CMS.ContactManagement.ContactInfo"/> for the given <paramref name="currentUser"/> when no information about the possible current contact is available.
            </summary>
            <param name="currentUser">The user the contacts will be obtained for</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentUser"/>Thrown when <paramref name="currentUser"/> is <c>null</c>.</exception>
            <returns>
            Contact selected as the current one for the <paramref name="currentUser"/>. If the user is public, returns null.
            </returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentUserContactProvider.GetContactForCurrentUserAndContact(CMS.Base.IUserInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Gets a <see cref="T:CMS.ContactManagement.ContactInfo"/> for the given <paramref name="currentUser"/> when there is a priori information about the possible current contact available.
            </summary>
            <param name="currentUser">The user the contact will be obtained for</param>
            <param name="currentContact">A possible candidate to be selected as the current contact</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="currentUser"/> or <paramref name="currentContact"/></exception>
            <returns>
            The contact selected as the current one for the <paramref name="currentUser"/>. Note that all other contacts related to the <paramref name="currentUser"/> are merged into this one.
            If the user is public, returns null.
            </returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentUserContactProvider.GetRelatedContact(CMS.Base.IUserInfo)">
            <summary>
            Gets related contact to the given <paramref name="user"/>.
            </summary>
            <param name="user">The user the related contacts are searched for</param>
        </member>
        <member name="M:CMS.ContactManagement.DefaultCurrentUserContactProvider.ContactHasUserAssigned(CMS.ContactManagement.ContactInfo)">
            <summary>
            Determines whether the given <paramref name="contact"/> has at least one user assigned.
            </summary>
            <param name="contact">The contact the user assignment will be searched for</param>
            <returns>True, if the contact has at least one user assigned; otherwise, false.</returns>
        </member>
        <member name="T:CMS.ContactManagement.ICurrentUserContactProvider">
            <summary>
            Provides methods for getting <see cref="T:CMS.ContactManagement.ContactInfo"/> for <see cref="T:CMS.Membership.UserInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentUserContactProvider.GetContactForCurrentUser(CMS.Base.IUserInfo)">
            <summary>
            Gets a <see cref="T:CMS.ContactManagement.ContactInfo"/> for the given <paramref name="currentUser"/> when no information about the possible current contact is available.
            </summary>
            <param name="currentUser">The user the contacts will be obtained for</param>
            <returns>
            Contact selected as the current one for the <paramref name="currentUser"/>. 
            </returns>
        </member>
        <member name="M:CMS.ContactManagement.ICurrentUserContactProvider.GetContactForCurrentUserAndContact(CMS.Base.IUserInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Gets a <see cref="T:CMS.ContactManagement.ContactInfo"/> for the given <paramref name="currentUser"/> when there is a priori information about the possible current contact available.
            </summary>
            <param name="currentUser">The user the contact will be obtained for</param>
            <param name="currentContact">A possible candidate to be selected as the current contact</param>
            <returns>
            The contact selected as the current one for the <paramref name="currentUser"/>. 
            </returns>
        </member>
        <member name="T:CMS.ContactManagement.ContactGroupEvaluator">
            <summary>
            Task for evaluation of dynamic contact group.
            Contacts' (site or all for global contact group) membership to a contact group depends on meeting the dynamic condition.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupEvaluator.ContactGroup">
            <summary>
            Contact group. Optional, should be set if this class is used outside the scheduler.
            </summary>
        </member>
        <member name="P:CMS.ContactManagement.ContactGroupEvaluator.ContactGroupInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.ContactManagement.ContactGroupInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupEvaluator.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Evaluates the membership of contacts to given contact group.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.ContactManagement.ContactGroupEvaluator.Run">
            <summary>
            Starts contact groups members evaluation.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.DefaultOffPeakService">
            <summary>
            Interface for deciding when in the day is off peak time, meaning when is the best to run tasks with bigger load.
            Counts with off peak between 2am and 6am.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DefaultOffPeakService.GetNextOffPeakPeriodStart(System.DateTime)">
            <summary>
            Returns the exact <see cref="T:System.DateTime"/> of next off-peak period.
            Counts with off-peak between 2am and 6am.
            </summary>
            <param name="dateTime">Timestamp of from when to look for next off-peak period.</param>
            <returns><see cref="T:System.DateTime"/> of next off-peak period.</returns>
        </member>
        <member name="M:CMS.ContactManagement.DefaultOffPeakService.IsOffPeak(System.DateTime)">
            <summary>
            Checks whether given <see cref="T:System.DateTime"/> is in off-peak period.
            Counts with off-peak between 2am and 6am.
            </summary>
            <param name="dateTime">The date to check off-peak period for</param>
            <returns>True if <paramref name="dateTime"/> is in off-peak, false otherwise.</returns>
        </member>
        <member name="T:CMS.ContactManagement.DeleteInactiveContacts">
            <summary>
            Deletes inactive contacts. Takes a batch of 1000 which is deleted and replans itself if there are more to delete. 
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DeleteInactiveContacts.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.DeleteInactiveContacts.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Deletes inactive contacts.
            Takes a batch of 1000 which is deleted and reschedules itself if there are more to delete. 
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="T:CMS.ContactManagement.IOffPeakService">
            <summary>
            Interface for deciding when in the day is off peak time, meaning when is the best to run tasks with bigger load.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.IOffPeakService.GetNextOffPeakPeriodStart(System.DateTime)">
            <summary>
            Returns the exact <see cref="T:System.DateTime"/> of next off-peak period.
            </summary>
            <param name="dateTime">Timestamp of from when to look for next off-peak period.</param>
            <returns><see cref="T:System.DateTime"/> of next off-peak period.</returns>
        </member>
        <member name="M:CMS.ContactManagement.IOffPeakService.IsOffPeak(System.DateTime)">
            <summary>
            Checks whether given <see cref="T:System.DateTime"/> is in off-peak period.
            </summary>
            <param name="dateTime">The date to check off-peak period for</param>
            <returns>True if <paramref name="dateTime"/> is in off-peak, false otherwise.</returns>
        </member>
        <member name="T:CMS.ContactManagement.ScoreEvaluator">
            <summary>
            Task for score recalculation. For internal purposes only, for manual run please use ScoreAsyncRecalculator instead.
            Internally calls ScoreAsyncRecalculator thus recalculation runs in another thread.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.ScoreEvaluator.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Evaluates the membership of contacts to given contact group or persona.
            </summary>
            <param name="task">Task to process</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null</exception>
        </member>
        <member name="T:CMS.ContactManagement.TimeTriggerTask">
            <summary>
            Runs time based triggers in the Marketing automation process.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.TimeTriggerTask.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the time based automation trigger.
            </summary>
        </member>
        <member name="T:CMS.ContactManagement.TriggerScheduledTaskManager">
            <summary>
            Scheduled task manager for time based <see cref="T:CMS.Automation.ObjectWorkflowTriggerInfo"/> objects.
            </summary>
            <remarks>
            None of the methods performs check for time based trigger type.
            </remarks>
        </member>
        <member name="M:CMS.ContactManagement.TriggerScheduledTaskManager.#ctor(CMS.Scheduler.ITaskInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContactManagement.TriggerScheduledTaskManager"/> class.
            </summary>
            <param name="taskInfoProvider">Provider for <see cref="T:CMS.Scheduler.TaskInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="taskInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.ContactManagement.TriggerScheduledTaskManager.EnsureScheduledTask(CMS.Automation.ObjectWorkflowTriggerInfo)">
            <summary>
            Ensures existing <see cref="T:CMS.Scheduler.TaskInfo"/> for given <paramref name="trigger"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.TriggerScheduledTaskManager.UpdateScheduledTask(CMS.Automation.ObjectWorkflowTriggerInfo)">
            <summary>
            Updates existing <see cref="T:CMS.Scheduler.TaskInfo"/> based on given <paramref name="trigger"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.TriggerScheduledTaskManager.RemoveScheduledTask(CMS.Automation.ObjectWorkflowTriggerInfo)">
            <summary>
            Removes existing <see cref="T:CMS.Scheduler.TaskInfo"/> for given <paramref name="trigger"/>.
            </summary>
        </member>
        <member name="M:CMS.ContactManagement.TriggerScheduledTaskManager.GetTaskDisplayName(CMS.Automation.ObjectWorkflowTriggerInfo)">
            <summary>
            Creates a <see cref="T:CMS.Scheduler.TaskInfo"/> display name for given <paramref name="trigger"/>.
            </summary>
            <returns>Display name of the scheduled task.</returns>
        </member>
    </members>
</doc>
