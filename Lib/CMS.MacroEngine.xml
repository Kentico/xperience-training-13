<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.MacroEngine</name>
    </assembly>
    <members>
        <member name="T:CMS.MacroEngine.CustomMacroContainer">
            <summary>
            Object encapsulating custom macro resolving as ISimpleDataContainer.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.CustomMacroContainer.Resolver">
            <summary>
            Gets or sets resolver used to resolve Custom macros.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.CustomMacroContainer.#ctor(CMS.MacroEngine.MacroResolver)">
            <summary>
            Creates new instance of CustomMacroObject.
            </summary>
            <param name="resolver">ContextResolver object to use to resolve macros</param>
        </member>
        <member name="P:CMS.MacroEngine.CustomMacroContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.CustomMacroContainer.GetValue(System.String)">
            <summary>
            Resolves the custom macro.
            </summary>
            <param name="customMacro">Custom macro to resolve</param>
        </member>
        <member name="M:CMS.MacroEngine.CustomMacroContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="customMacro">Custom macro</param>
            <param name="value">New value</param>
        </member>
        <member name="T:CMS.MacroEngine.DataContainerCollection">
            <summary>
            Collection of the IDataContainers behaving like IDataContainer.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.DataContainerCollection.mColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.DataContainerCollection.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.MacroEngine.DataContainerCollection.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DataContainerCollection.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.DataContainerCollection.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.MacroEngine.DataContainerCollection.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.MacroEngine.DataContainerCollection.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.MacroEngine.DateTimeContainer">
            <summary>
            Object encapsulating DateTime objects to be accessible via macro engine.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.DateTimeContainer.DateTime">
            <summary>
            Gets the encapsulated DateTime.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.DateTimeContainer.Culture">
            <summary>
            Gets or sets the culture of the date time (for ToString formatting purposes).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.#ctor(System.DateTime)">
            <summary>
            Creates new instance of DateTimeContainer.
            </summary>
            <param name="dt">DateTime object to be encapsulated</param>
        </member>
        <member name="P:CMS.MacroEngine.DateTimeContainer.Item(System.String)">
            <summary>
            Gets the value of the column, setter is not implemented.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.MacroEngine.DateTimeContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToString">
            <summary>
            Returns string representation of datetime.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>
            The value of the current instance in the specified format.
            </returns>
            <param name="format">The format to use or a null reference to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param>
            <param name="formatProvider">The provider to use to format the value or a null reference to obtain the numeric format information from the current locale setting of the operating system. </param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.Equals(System.Object)">
            <summary>
            Returns true if date times are same.
            </summary>
            <param name="obj">Object to compare with</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.GetHashCode">
            <summary>
            Returns hash code.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.GetTypeCode">
            <summary>
            Returns the TypeCode for this instance.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Decimal number using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent DateTime using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent String using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeContainer.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an Object of the specified Type that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DictionaryContainer">
            <summary>
            Container to wrap the IDictionary[string, object] structure
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.DictionaryContainer.mInnerDictionary">
            <summary>
            Wrapped dictionary
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DictionaryContainer.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="dict">Wrapped dictionary</param>
        </member>
        <member name="P:CMS.MacroEngine.DictionaryContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.DictionaryContainer.GetValue(System.String)">
            <summary>
            Gets the value from QueryString.
            </summary>
            <param name="key">QueryString key</param>
        </member>
        <member name="M:CMS.MacroEngine.DictionaryContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="key">QueryString key</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.MacroEngine.DictionaryContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DictionaryContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.MacroEngine.DictionaryContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.MacroEngine.FlattenEnumerable">
            <summary>
            Container 
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.FlattenEnumerable.#ctor(System.Collections.IEnumerable)">
            <summary>
            Constructor
            </summary>
            <param name="items">Items to flatten</param>
        </member>
        <member name="M:CMS.MacroEngine.FlattenEnumerable.GetEnumerator">
            <summary>
            Gets the enumerator of the items
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.FlattenEnumerable.GetItems(System.Object)">
            <summary>
            Gets the items for the given item
            </summary>
            <param name="item">Item to process</param>
        </member>
        <member name="T:CMS.MacroEngine.NamedDataContainer">
            <summary>
            Named data container (Data container with prefix).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.NamedDataContainer.mInnerContainer">
            <summary>
            Inner data container.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.NamedDataContainer.mPrefix">
            <summary>
            Column prefix.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.NamedDataContainer.InnerContainer">
            <summary>
            Inner data container.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.NamedDataContainer.Prefix">
            <summary>
            Column prefix.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.NamedDataContainer.#ctor(CMS.Base.IDataContainer,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceData">Source data</param>
            <param name="prefix">Column prefix</param>
        </member>
        <member name="M:CMS.MacroEngine.NamedDataContainer.GetOriginalColumnName(System.String)">
            <summary>
            Gets the original column name without the prefix.
            </summary>
            <param name="columnName">Column name with prefix</param>
        </member>
        <member name="P:CMS.MacroEngine.NamedDataContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.MacroEngine.NamedDataContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.NamedDataContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.MacroEngine.NamedDataContainer.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.NamedDataContainer.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.MacroEngine.NamedDataContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.MacroEngine.PathMacroContainer">
            <summary>
            Object encapsulating path macro resolving as ISimpleDataContainer.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.PathMacroContainer.mLevelRegExp">
            <summary>
            Regular expression to capture the path level macro.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.PathMacroContainer.mPathSegments">
            <summary>
            Path segments array.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.PathMacroContainer.mCurrentPath">
            <summary>
            Current path.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.PathMacroContainer.mResolver">
            <summary>
            Resolver used to resolve the paths.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.PathMacroContainer.CurrentPath">
            <summary>
            Current path.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.PathMacroContainer.LevelRegExp">
            <summary>
            Regular expression to capture the path level macro.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.PathMacroContainer.PathSegments">
            <summary>
            Path segments array.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.PathMacroContainer.#ctor(CMS.MacroEngine.MacroResolver)">
            <summary>
            Creates new instance of PathMacroContainer.
            </summary>
            <param name="resolver">Resolver to resolve path macros</param>
        </member>
        <member name="M:CMS.MacroEngine.PathMacroContainer.ResolvePath(System.String,System.Boolean)">
            <summary>
            Resolves the given alias path, applies the path segment to the given format string {0} for level 0.
            </summary>
            <param name="format">Path pattern</param>
            <param name="escapeSpecChars">Indicates whether special characters in the automatically added part of path should be escaped for valid SQL LIKE query </param>
        </member>
        <member name="M:CMS.MacroEngine.PathMacroContainer.LevelMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Match evaluator for the path level macro evaluation.
            </summary>
            <param name="m">Regular expression match</param>
        </member>
        <member name="P:CMS.MacroEngine.PathMacroContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.PathMacroContainer.GetValue(System.String)">
            <summary>
            Resolves the path macro.
            </summary>
            <param name="pathMacro">Path macro to resolve</param>
        </member>
        <member name="M:CMS.MacroEngine.PathMacroContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="pathMacro">Path macro</param>
            <param name="value">New value</param>
        </member>
        <member name="T:CMS.MacroEngine.TimeSpanContainer">
            <summary>
            Object encapsulating TimeSpan objects to be accessible via macro engine.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.TimeSpanContainer.TimeSpan">
            <summary>
            Gets the encapsulated TimeSpan.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.#ctor(System.TimeSpan)">
            <summary>
            Creates new instance of TimeSpanContainer.
            </summary>
            <param name="ts">TimeSpan object to be encapsulated</param>
        </member>
        <member name="P:CMS.MacroEngine.TimeSpanContainer.Item(System.String)">
            <summary>
            Gets the value of the column, setter is not implemented.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.MacroEngine.TimeSpanContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.ToString">
            <summary>
            Returns string representation of datetime.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>
            The value of the current instance in the specified format.
            </returns>
            <param name="format">The format to use or a null reference to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param>
            <param name="formatProvider">The provider to use to format the value or a null reference to obtain the numeric format information from the current locale setting of the operating system. </param>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.Equals(System.Object)">
            <summary>
            Returns true if time spans are same.
            </summary>
            <param name="obj">Object to compare with</param>
        </member>
        <member name="M:CMS.MacroEngine.TimeSpanContainer.GetHashCode">
            <summary>
            Returns hash code.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DebugContainer">
            <summary>
            Container for debugging object within macro engine. Reports all variables and properties
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.DebugContainer.Object">
            <summary>
            Debugged object
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.DebugContainer.OnlyPublicMembers">
            <summary>
            If true, only public members are exposed
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Object to debug</param>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.RegisterColumns">
            <summary>
            Register the object columns
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.GetBindingFlags">
            <summary>
            Gets the binding flags for getting the members
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.RegisterProperties">
            <summary>
            Register the object columns
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.ToString">
            <summary>
            Returns the string representation of the given object
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.GetEnumerator">
            <summary>
            Gets the object enumerator
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.Wrap(System.Object,System.Boolean)">
            <summary>
            Wraps the object with debug container. Returns null if the object is null
            </summary>
            <param name="value">Value to wrap</param>
            <param name="onlyPublic">If true, only public members are exposed</param>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.ToMacroString">
            <summary>
            Returns the default text representation in the macros (this is called when the expression is resolved to its final value and should be converted to string).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugContainer.MacroRepresentation">
            <summary>
            Returns the object which represents current object in the macro engine. 
            Whenever the object implementing IMacroObject interface is used within macro engine this method is called its result is used instead.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DebugMethods">
            <summary>
            Wrapper class to provide debug methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugMethods.RegisterMethods">
            <summary>
            Registers the methods
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugMethods.DebugContext(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Wraps the macro context to the debug container to examine its internal values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DebugMethods.DebugExpression(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Wraps the given expression to the debug container to examine its internal values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DebugMethods.Debug(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Wraps the given object to the debug container to examine its internal values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DebugMethods.CacheItem(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Wraps the given object to the debug container to examine its internal values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.EvaluationContext">
            <summary>
            Context for macro expression evaluation. Reflects resolver settings and inline macro parameters.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.TimeoutOverTime">
            <summary>
            TimeSpan defined when the evaluation timeout is checked and defined timeout is exceeded. Not set if <see cref="P:CMS.MacroEngine.EvaluationContext.ExternalTimeoutChecker"/> exceeds.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.ParentContext">
            <summary>
            Gets or sets the parent context (null if the context was created by constructor).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.RelatedObject">
            <summary>
            Related object allows set object used for resolving in macro method. Used in web part properties.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.EncapsulateMacroObjects">
            <summary>
            If true, the object will be encapsulated to its macro representations
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.Resolver">
            <summary>
            Resolver which is used for the expression evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.OriginalExpression">
            <summary>
            Gets or sets the expression which is being evaluated.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.OriginalExpressionType">
            <summary>
            Gets or sets the type of the expression which is being evaluated (% or $ or ?).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.DefaultValue">
            <summary>
            Default value of the evaluation. Used when result of the whole macro is empty string.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.ResolverName">
            <summary>
            Gets or sets the name of the resolver which can resolve this macro (reflects inline |(resolver) parameter).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.ConsoleOutput">
            <summary>
            Console output - place where the results can be written during macro evaluation using a "print" method.
            All child contexts share the output with the parent context (= there is only one console output).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.Debug">
            <summary>
            Determines if the evaluation debugs details
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.DetailedDebug">
            <summary>
            Determines if the evaluation debugs details
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.Encode">
            <summary>
            Determines whether the result of the expression should be encoded or not.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.Recursive">
            <summary>
            Determines whether the macros in the result should be resolved as well.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.HandleSQLInjection">
            <summary>
            Determines whether the apostrophes in the result will be doubled to handle SQL injection.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.CaseSensitive">
            <summary>
            Determines whether string comparison and other operations are case sensitive. False by default.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.Culture">
            <summary>
            Culture under which the expression is evaluated. Important for parsing double / datetime from string constants, etc. EN-US by default.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.CultureInfo">
            <summary>
            CultureInfo reflecting Culture property.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.EvaluationTimeout">
            <summary>
            Expression evaluation timeout in milliseconds (1000 ms by default). If the evaluation time of the expression exceeds this time, evaluation will be aborted and the result will be null.
            The evaluation abortion is then logged into event log.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.EvaluationStarted">
            <summary>
            Time when the evaluation started (needed for timeout evaluation).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.ExternalTimeoutChecker">
            <summary>
            Gets or sets the function used as timeout watchdog besides EvaluationTimeout setting. Returns true if timeout has occurred.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.CheckSecurity">
            <summary>
            Main setting determining whether the macro security (signatures) is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.IntegrityPassed">
            <summary>
            Determines whether the security parameters are consistent with the evaluated macro.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.User">
            <summary>
            Gets the user associated with this context (based on the <see cref="P:CMS.MacroEngine.EvaluationContext.IdentityName"/> and <see cref="P:CMS.MacroEngine.EvaluationContext.UserName"/>)
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.IdentityName">
            <summary>
            Gets or sets the macro identity name against which the security is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.UserName">
            <summary>
            Gets or sets the username against which the security is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.Hash">
            <summary>
            Gets or sets the hash against which the security is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationContext.AllowOnlySimpleMacros">
            <summary>
            Determines whether only simple macros (macros which do not require security check) are allowed.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.#ctor">
            <summary>
            Creates new empty instance of the context.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.#ctor(CMS.MacroEngine.MacroResolver,System.String,System.String)">
            <summary>
            Creates new EvaluationContext which takes the default values from resolver. Note that these can be modified during evaluation process via macro parameters.
            </summary>
            <param name="resolver">Resolver which is used for the evaluation</param>
            <param name="originalExpression">Original expression which is being evaluated</param>
            <param name="expressionType">Type of the expression being evaluated (% or $ or ?)</param>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.#ctor(CMS.MacroEngine.MacroResolver,CMS.MacroEngine.EvaluationParameters,System.String,System.String)">
            <summary>
            Creates new EvaluationContext which takes the values from resolver and parameters. Note that these can be modified during evaluation process via macro parameters.
            </summary>
            <param name="resolver">Resolver which is used for the evaluation</param>
            <param name="evaluationParameters">Inherited macro parameters from another macro evaluation. Can be null.</param>
            <param name="originalExpression">Original expression which is being evaluated</param>
            <param name="expressionType">Type of the expression being evaluated (% or $ or ?)</param>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.CreateChildContext">
            <summary>
            Creates child context (clones the parent settings and creates child of the resolver).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.CreateChildContext(System.Boolean)">
            <summary>
            Creates child context (clones the parent settings and creates child of the resolver).
            </summary>
            <param name="createChildResolver">If true, the resolver of the child context will be a child resolver of current resolver. If false, the same instance of the resolver will be used.</param>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.ClearInnerSources">
            <summary>
            Clears all inner sources (does not clear parent inner sources).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.AddInnerSource(System.Object[])">
            <summary>
            Adds inner source(s) to this instance of the context.
            </summary>
            <param name="sources">Source(s) to add</param>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.GetInnerSources">
            <summary>
            Returns list of all aggregated inner sources (from the whole context hierarchy).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.ClearPrioritizedInnerSources">
            <summary>
            Clears all prioritized inner sources (does not clear parent inner sources).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.AddPrioritizedInnerSource(System.Object[])">
            <summary>
            Adds prioritized inner source(s) to this instance of the context.
            </summary>
            <param name="sources">Source(s) to add</param>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.GetPrioritizedInnerSources">
            <summary>
            Returns list of all aggregated prioritized inner sources (from the whole context hierarchy).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.LoadParameters(CMS.MacroEngine.EvaluationParameters)">
            <summary>
            Loads values of evaluation parameters.
            </summary>
            <param name="evaluationParameters"></param>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationContext.CheckForTimeout">
            <summary>
            Verifies whether evaluation is timeouting. Returns true if timeout has occurred. False if everything is alright.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.EvaluationParameters">
            <summary>
            Contains values of macro parameters
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.Hash">
            <summary>
            Gets or sets the hash against which the security is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.IdentityName">
            <summary>
            Gets or sets the identity name against which the security is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.UserName">
            <summary>
            Gets or sets the username against which the security is checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.Culture">
            <summary>
            Culture under which the expression is evaluated. Important for parsing double / datetime from string constants, etc. EN-US by default.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.DetailedDebug">
            <summary>
            Determines if the evaluation debugs details
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.CaseSensitive">
            <summary>
            Determines whether string comparison and other operations are case sensitive. False by default.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.EvaluationTimeout">
            <summary>
            Expression evaluation timeout in milliseconds (1000 ms by default). If the evaluation time of the expression exceeds this time, evaluation will be aborted and the result will be null.
            The evaluation abortion is then logged into event log.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.ResolverName">
            <summary>
            Gets or sets the name of the resolver which can resolve this macro (reflects inline |(resolver) parameter).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.Encode">
            <summary>
            Determines whether the result of the expression should be encoded or not.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.HandleSQLInjection">
            <summary>
            Determines whether the apostrophes in the result will be doubled to handle SQL injection.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.Recursive">
            <summary>
            Determines whether the macros in the result should be resolved as well.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationParameters.DefaultValue">
            <summary>
            Default value of the evaluation. Used when result of the whole macro is empty string.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationParameters.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationParameters.#ctor(CMS.MacroEngine.EvaluationContext)">
            <summary>
            Initializes parameters from <see cref="T:CMS.MacroEngine.EvaluationContext"/>. Copies inheritable macro parameters from another macro evaluation.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationParameters.#ctor(System.Collections.Generic.IEnumerable{CMS.MacroEngine.MacroExpression})">
            <summary>
            Initializes parameters from <see cref="P:CMS.MacroEngine.MacroExpression.Parameters"/>. Parses the parameters in expression.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationParameters.SetParameter(System.String,System.Object)">
            <summary>
            Parse given macro parameter and it's value and stores it inside this data container.
            </summary>
            <param name="name">Macro parameter name</param>
            <param name="value">Macro parameter value</param>
            <returns>True when parameter was recognized and it's value was stored.</returns>
        </member>
        <member name="T:CMS.MacroEngine.EvaluationResult">
            <summary>
            Context for macro expression evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationResult.Match">
            <summary>
            Gets or sets the parent context (null if the context was created by constructor).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationResult.Skipped">
            <summary>
            This will be true if the evaluation process was skiped because the resolver used had different name than required resolver.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationResult.SecurityPassed">
            <summary>
            Determines whether the security check passed (if the user and hash parameters correspond to the given expression and if the user has sufficient permission).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationResult.Result">
            <summary>
            Result of the expression evaluation
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationResult.ContextUsed">
            <summary>
            Evaluation context used to get this result.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationResult.ToString">
            <summary>
            Returns result to string (returns "null" if result is null).
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.ExpressionEvaluator">
            <summary>
            Class used for MacroExpression evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Expression">
            <summary>
            Expression to evaluate.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Context">
            <summary>
            Evaluation context.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Type">
            <summary>
            Returns the expression type.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Name">
            <summary>
            Name of the data member or method call.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Value">
            <summary>
            Value of the value expression (is null for expression types like method, property, etc.).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Parent">
            <summary>
            Parent expression of the expression.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ExpressionEvaluator.Children">
            <summary>
            Child expressions of the expression.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.#ctor(CMS.MacroEngine.MacroExpression,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Constructor.
            </summary>
            <param name="expr">Expression to evaluate</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.Evaluate">
            <summary>
            Evaluates the expression and returns the result. Sets the result of security check into MacroEvalParameters object.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.CheckForTimeout">
            <summary>
            Checks whether the evaluation time did not exceed the specified limit.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.UpdateEvaluationContextFromParameters">
            <summary>
            Reads all the in-line macro parameters and modifies the default evaluation context accordingly.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateChild(CMS.MacroEngine.MacroExpression,System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates the child expression (uses the same context, does not create a child context).
            </summary>
            <param name="childExpr">Child expression to evaluate</param>
            <param name="match">Returns true if all data members used were known (could have been null, but must have been registered)</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateInternal(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates the expression and returns the result.
            </summary>
            <param name="match">Returns true if all data members used were known (could have been null, but must have been registered)</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateMethodCall(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates general method call.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateMethodCall(System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
            Evaluates general method call.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
            <param name="executeMethod">Indicates whether method should be executed. Used for validation.</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.FirstParameterLazy(CMS.Core.IMacroMethod)">
            <summary>
            Returns true if the given method has a first parameter that is lazy (AsExpression)
            </summary>
            <param name="method">Method to check</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.PrepareParameters(CMS.Core.IMacroMethod,System.Object,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
            Prepares parameters for the given method
            </summary>
            <param name="method">Method to execute</param>
            <param name="firstChild">First method child</param>
            <param name="match">Returns true if all data members used were known (could have been null, but must have been registered)</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
            <param name="evaluateChildren">Indicates whether child expression should be evaluated. Used for validation purposes.</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsNamespace(CMS.MacroEngine.MacroExpression)">
            <summary>
            Returns true if the given expression is a name space
            </summary>
            <param name="expr">Expression to check</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.ThrowMethodNotFound(System.Object)">
            <summary>
            Throws an exception that the method was not found
            </summary>
            <param name="callingObject">Object calling the method</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.ExecuteMethod(CMS.Core.IMacroMethod,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Executes the given macro method
            </summary>
            <param name="method">Method to execute</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateLambdaMethod(System.Boolean@,System.Boolean@,CMS.MacroEngine.MacroLambdaExpression)">
            <summary>
            Evaluates call of given lambda expression.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
            <param name="lambdaExp">Lambda expression to evaluate</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateEquality(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates equality operators.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateCompoundExpression(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates compound expressions (separated with semicolon).
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateForEachLoop(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates for each loop.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateForLoop(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates for loop.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateIsNullOperator(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates ?? operator.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateTernaryOperator(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates ternary operator.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateIndexer(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates indexer operator [].
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateAssignment(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates assignment operators (+=, =, -=, etc.).
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateWhileLoop(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates the while loop.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateCondition(System.Boolean@,System.Boolean@,System.Data.DataRow,System.DateTime)">
            <summary>
            Evaluates the if condition.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
            <param name="drLogItem">Data row with debug log data</param>
            <param name="evaluationStarted">DateTime when the evaluation was started (Eval method was called)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.PrintToConsole(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates the print and println commands.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateLambdaExpr">
            <summary>
            Evaluates the expression as a lambda expression ('=>' operator).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateCommand(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates the expression as a command.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateDataMember(System.Boolean@)">
            <summary>
            Evaluates the expression as a data member.
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateProperty(System.Boolean@,System.Boolean@)">
            <summary>
            Evaluates the expression as a property
            </summary>
            <param name="match">Determines whether all the necessary objects for evaluation were present</param>
            <param name="securityPassed">Returns true if the security of the evaluated macro was OK (both integrity and permissions)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.GetBoolConditionResult(System.Object)">
            <summary>
            Returns boolean result from object (used for if statements to handle even non boolean inputs similarly as JavaScript does).
            </summary>
            <param name="ifConditionResult">Result of if condition expression (not strongly typed)</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.ProcessAssignment(System.String,System.String,System.Object)">
            <summary>
            Processes the assignment operators. Uses dynamic parameters for storing those values.
            </summary>
            <param name="op">Assignment operator (=, +=, *=, etc.)</param>
            <param name="variableName">Name of the variable (will be used as key of dynamic parameter)</param>
            <param name="rightSideValue">Value to be assigned</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsEqual(System.Object,System.Object,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Returns true if first parameter is equal to the second. Handles several specialties: 
            1) GUID is equal also to string representation of GUID (case insensitive regardless the context setting). 
            2) Simple data types are equal to their ToString representation. 
            3) InfoObject is equal also to string constant if it's either its display name or code name. 
            4) Two info objects are equal when they have same object type and same ID. 
            5) Empty string is equal to null. 
            </summary>
            <param name="param1">First parameter to compare</param>
            <param name="param2">Second parameter to compare</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsInfoInfoEqual(CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if two Info objects are equal (have same object type and ID).
            </summary>
            <param name="info1">First info to compare</param>
            <param name="info2">Second info to compare</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsObjectStringEqual(CMS.DataEngine.BaseInfo,System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Returns true if given object has code name or display name equal to specified name.
            </summary>
            <param name="info">BaseInfo object</param>
            <param name="name">Name to compare with</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsEnumObjectEqual(System.Enum,System.Object,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Compares the given enumeration object with any object. If the object is not enumeration of the same type, then compares it according its values (integer enumeration with integer, otherwise as text constants).
            </summary>
            <param name="enumObj">enumeration obj to compare</param>
            <param name="obj2">Object to compare with</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsStringStringEqual(System.String,System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Returns true if the two strings are equal. Empty string is equal to null.
            </summary>
            <param name="text1">First text to compare</param>
            <param name="text2">Second text to compare</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.GetDebugIndent">
            <summary>
            Returns the indentation of the debug item (counts deepness withing blocks {...})
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.IsMethodWithName(System.String)">
            <summary>
            Returns true if the type of current expression is MethodCall with specified name.
            </summary>
            <param name="name">Name of the method</param>
        </member>
        <member name="M:CMS.MacroEngine.ExpressionEvaluator.HasNumberOfChildren(System.Int32)">
            <summary>
            Returns true if the current expression node has exactly specified number of children.
            </summary>
            <param name="number">Number of children</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroCommand">
            <summary>
            Represents return value of special commands in macro engine (break, continue, etc.).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroCommand.mName">
            <summary>
            Name of the command.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroCommand.mValue">
            <summary>
            Value of the command (needed for return statement)
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroCommand.Name">
            <summary>
            Name of the command.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroCommand.Value">
            <summary>
            Value of the command (needed for return statement)
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroCommand.#ctor(System.String,System.Object)">
            <summary>
            Constructor - creates a macro command.
            </summary>
            <param name="name">Name of the command</param>
            <param name="value">Value of the command</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroCommand.ToString">
            <summary>
            If value is not null, returns value.ToString(), otherwise returns name of the command.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroLambdaExpression">
            <summary>
            Represents lambda expression in macro engine
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroLambdaExpression.Expression">
            <summary>
            Expression (right side of "=>" operator).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroLambdaExpression.Variables">
            <summary>
            List of parameters (left side of "=>" operator).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroLambdaExpression.#ctor(System.Collections.Generic.List{System.String},CMS.MacroEngine.MacroExpression)">
            <summary>
            Constructor - creates a macro lambda expression.
            </summary>
            <param name="variables">List of parameters (left side of "=>" operator)</param>
            <param name="expression">Expression (right side of "=>" operator)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroLambdaExpression.ToString">
            <summary>
            String representation of the lambda expression is empty string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CMS.MacroEngine.MacroParameterNameAttribute">
            <summary>
            Assigns macro parameter name to property representing that macro parameter. 
            Parameter name is string representation of macro parameter used in macro expressions.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroParameterNameAttribute.ParameterName">
            <summary>
            Name of macro parameter
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroParameterNameAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of macro paramater</param>
        </member>
        <member name="T:CMS.MacroEngine.EvaluationException">
            <summary>
            Exception used when evaluation could not proceed (wrong types, etc.).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationException.ExactMessage">
            <summary>
            Gets or sets the message describing where the evaluation threw the exception.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationException.Message">
            <summary>
            Returns evaluation error message.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being processed when this error occurred.</param>
            <param name="exactMessage">Message describing where the evaluation threw the exception</param>
            <param name="innerException">Reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="T:CMS.MacroEngine.EvaluationTimeoutException">
            <summary>
            Exception used when evaluation of the expression took to long (longer than the specified timeout threshold).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.EvaluationTimeoutException.Message">
            <summary>
            Returns evaluation timeout error message.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EvaluationTimeoutException.#ctor(System.String,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being processed when this error occurred.</param>
            <param name="overTimeSpan">Indicates how much timeout exceeds</param>
        </member>
        <member name="T:CMS.MacroEngine.LexicalAnalysisException">
            <summary>
            Class for the exception during the lexical analysis of a K# macro expression.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.LexicalAnalysisException.AnalysisType">
            <summary>
            Gets or sets the prefix of the analysis type to generate correct message.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.LexicalAnalysisException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being parsed when this error occurred.</param>
            <param name="errorIndex">Index within OriginalExpression where the parsing error occurred</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroException">
            <summary>
            Base for the exceptions thrown during the macro resolving process.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroException.OriginalExpression">
            <summary>
            Gets or sets the whole expression which was being processed when this error occurred.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being processed when this error occurred.</param>
            <param name="innerException">Reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroException.GetString(System.String)">
            <summary>
            Gets the string by the specified resource key
            </summary>
            <param name="resourceKey">Resource key</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroException.GetAPIString(System.String,System.String)">
            <summary>
            Gets the string by the specified resource key
            </summary>
            <param name="resourceKey">Resource key</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:CMS.MacroEngine.MethodNotFoundException">
            <summary>
            Base for the exceptions thrown when method which does not exist was tried to be executed.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MethodNotFoundException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being parsed when this error occured.</param>
        </member>
        <member name="T:CMS.MacroEngine.ParsingException">
            <summary>
            Base for the exceptions thrown during the macro resolving process.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ParsingException.AnalysisType">
            <summary>
            Gets or sets the prefix of the analysis type to generate correct message.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ParsingException.ErrorIndex">
            <summary>
            Gets or sets the index within OriginalExpression where the parsing error occurred.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ParsingException.Message">
            <summary>
            Returns the formatted message of the parsing error.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ParsingException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being parsed when this error occurred.</param>
            <param name="errorIndex">Index within OriginalExpression where the parsing error occurred</param>
        </member>
        <member name="T:CMS.MacroEngine.SyntacticAnalysisException">
            <summary>
            Class for the exception during the syntactic analysis of a K# macro expression.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.SyntacticAnalysisException.ExactMessage">
            <summary>
            Gets or sets the message describing where the evaluation threw the exception.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.SyntacticAnalysisException.AnalysisType">
            <summary>
            Gets or sets the prefix of the analysis type to generate correct message.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.SyntacticAnalysisException.Message">
            <summary>
            Returns evaluation error message.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.SyntacticAnalysisException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being parsed when this error occurred.</param>
            <param name="errorIndex">Index within OriginalExpression where the parsing error occurred</param>
        </member>
        <member name="M:CMS.MacroEngine.SyntacticAnalysisException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="originalExpression">The whole expression which was being parsed when this error occurred.</param>
            <param name="exactMessage">Message describing where the evaluation threw the exception</param>
        </member>
        <member name="T:CMS.MacroEngine.ElementType">
            <summary>
            Element type.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Identifier">
            <summary>
            Identifier, e.g. Something.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Integer">
            <summary>
            Integer, e.g. 4.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Double">
            <summary>
            Double, e.g. 4.0.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.String">
            <summary>
            String, e.g. "something".
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Boolean">
            <summary>
            Boolean, e.g. true.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.LeftBracket">
            <summary>
            Left bracket.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.RightBracket">
            <summary>
            Right bracket.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Operator">
            <summary>
            Operator.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Dot">
            <summary>
            Dot.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Comma">
            <summary>
            Comma.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.LeftIndexer">
            <summary>
            Left indexer.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.RightIndexer">
            <summary>
            Right indexer.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Parameter">
            <summary>
            Parameter.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.ParameterValue">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.BlockStart">
            <summary>
            Start of the block.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.BlockEnd">
            <summary>
            End of the block.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ElementType.Semicolon">
            <summary>
            Semicolon for compound expressions.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.ExpressionType">
            <summary>
            Expression type.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.Unparsed">
            <summary>
            Unparsed.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.MethodCall">
            <summary>
            Standalone method call, typically in format Something(...).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.DataMember">
            <summary>
            Data member (simple identifier), typically in format ABC.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.Value">
            <summary>
            Specific value (any type), typically in format 0.5 or "something".
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.Empty">
            <summary>
            Empty command.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.Property">
            <summary>
            Property of result, typically in format ABC.Something.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.SubExpression">
            <summary>
            Subexpression defined by parenthesis, typically in format (Something + SomethingElse) > XXX
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.ParameterValue">
            <summary>
            Parameter value (backward compatibility).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.Block">
            <summary>
            Block of expressions
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.ExpressionType.Command">
            <summary>
            Special command (break, continue, ...)
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroElement">
            <summary>
            Macro expression element. Lexical analysis of the K# expression.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.BACKSLASH_REPLACEMENT">
            <summary>
            Replacement character for the backslash character
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.mSpecialChars">
            <summary>
            Replacements for special characters escapes [escaped -> unescaped]
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.mOperators">
            <summary>
            Set of all operators
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.mOperatorChars">
            <summary>
            Set of all operator characters
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.mWordOperators">
            <summary>
            Set of all word operators
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroElement.Type">
            <summary>
            Element type.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroElement.Expression">
            <summary>
            Element expression (as was parsed).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroElement.Value">
            <summary>
            Element value (of the element type).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroElement.StartIndex">
            <summary>
            Index of the expression start in the source expression.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroElement.Status">
            <summary>
            Status of the parser.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Start">
            <summary>
            Start (begining of parsing).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Identifier">
            <summary>
            Identifier.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Dot">
            <summary>
            Dot.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Comma">
            <summary>
            Comma.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.ErrorNumber">
            <summary>
            Error number.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.StringRead">
            <summary>
            String read (quotes - beginning of the string).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.StringReadMultiline">
            <summary>
            Multiline string read (@ followed by quotes - beginning of the string).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.StringSlash">
            <summary>
            String slash (for escaping character purposes).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Operator">
            <summary>
            Operator.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Parameter">
            <summary>
            Parameter.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.ErrorUnknown">
            <summary>
            Unknown error.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.ErrorIdentifier">
            <summary>
            Identifier error.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.ErrorInternal">
            <summary>
            Internal error.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.ErrorOperator">
            <summary>
            Operator error.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.ErrorParameter">
            <summary>
            Parameter error.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroElement.Status.CommentMultiline">
            <summary>
            Multiline comment
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.#ctor(CMS.MacroEngine.ElementType,System.String,System.Object,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Element type</param>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
            <param name="startIndex">Start index in the source string</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.GetSpecialChars">
            <summary>
            Gets the replacements for special characters escapes [escaped -> unescaped]
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.GetWordOperators">
            <summary>
            Gets the set of all word operators
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.GetOperatorChars">
            <summary>
            Gets the set of all operator characters
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.GetOperators">
            <summary>
            Gets the set of all operators
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.ParseExpression(System.String)">
            <summary>
            Parses the expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.ParseExpression(System.String,System.Boolean)">
            <summary>
            Parses the expression.
            </summary>
            <param name="expression">Expression to parse</param>
            <param name="supressError">If true no exceptions are thrown</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.ParseNext(System.String,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Parses the next element in the given macro expression, starting at the given index. Adjusts the index to the beginning of the next element.
            </summary>
            <param name="expression">Macro expression</param>
            <param name="index">Start index of where to find nex lexem</param>
            <param name="supressError">If true no exceptions are thrown</param>
            <param name="isParamValue">If true, the expression is only read until next parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.CreateElement(CMS.MacroEngine.ElementType,System.Text.StringBuilder,System.Int32)">
            <summary>
            Creates a macro element
            </summary>
            <param name="type">Element type</param>
            <param name="lex">Source lexem</param>
            <param name="startindex">Start index</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.UnescapeSpecialChars(System.String)">
            <summary>
            Unescapes special characters in the string constant.
            </summary>
            <param name="text">Text of the string constant</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.EscapeSpecialChars(System.String)">
            <summary>
            Escapes special characters in the string to create a string literal.
            </summary>
            <param name="text">String to create literal from</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.IsOperatorChar(System.Char)">
            <summary>
            Returns true if the character is operator character.
            </summary>
            <param name="ch">Character to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.IsWordOperator(System.String)">
            <summary>
            Returns true if the given string is a word operator.
            </summary>
            <param name="op">Operator to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.IsValidOperator(System.String)">
            <summary>
            Returns true if the operator is valid.
            </summary>
            <param name="op">Operator to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.IsBoolConst(System.String)">
            <summary>
            Returns true if the given string is a boolean constant "true" or "false".
            </summary>
            <param name="op">Operator to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroElement.ToString">
            <summary>
            Returns the expression of the element.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroExpression">
            <summary>
            Macro expression - represents a syntactic tree of the macro expression.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExpression.mPriority">
            <summary>
            Priority of the method.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExpression.mChildren">
            <summary>
            Children expressions (parameters of method or subexpression).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExpression.mParameters">
            <summary>
            Parameters for the given expression (backward compatibility).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExpression.mSyntacticTreeTable">
            <summary>
            Hash table with cached parsed expressions to speedup the macro evaluation.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExpression.mOperatorPriorities">
            <summary>
            Dictionary of operator priorities [operator] => [priority]
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExpression.mLeftFoldedOperators">
            <summary>
            Set of left folding operators (e.g. arithmetic or bitwise operators)
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.SyntaxErrorDetected">
            <summary>
            Gets or sets the value that indicates whether syntax error was detected during a parsing
            </summary>
            <remarks>This property is used for checking within the parsing with suppressed errors</remarks>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Type">
            <summary>
            Returns the expression type.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Name">
            <summary>
            Name of the data member or method call.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Value">
            <summary>
            Value of the value expression (is null for expression types like method, property, etc.).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Parameters">
            <summary>
            Parameters for the given expression; i.e. |(paramname)value expressions.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Parent">
            <summary>
            Parent expression.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Children">
            <summary>
            Child expressions of the expression.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.SyntacticTreeTable">
            <summary>
            Hashtable with cached parsed expressions to speedup the macro evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Next">
            <summary>
            Next expression to evaluate.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Previous">
            <summary>
            Previous expression (the expression from which this expression is the next).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.SourceElements">
            <summary>
            Elements from the source expression.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.StartIndex">
            <summary>
            Starting index of the expression in the source.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.EndIndex">
            <summary>
            Ending index of the expression in the source.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExpression.Priority">
            <summary>
            Gets the element priority.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.#ctor(System.Collections.Generic.List{CMS.MacroEngine.MacroElement})">
            <summary>
            Constructor.
            </summary>
            <param name="elements">Elements of the source expression</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.#ctor(System.Collections.Generic.List{CMS.MacroEngine.MacroElement},System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="elements">Elements of the source expression</param>
            <param name="startIndex">Index of the first item of this expression</param>
            <param name="endIndex">Index of the last item of this expression</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetOperatorPriorities">
            <summary>
            Gets the dictionary of operator priorities [operator] => [priority]
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetLeftFoldedOperators">
            <summary>
            Gets set of left folding operators (e.g. arithmetic or bitwise operators)
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetElement(System.Int32)">
            <summary>
            Gets the element on specific index of this expression.
            </summary>
            <param name="index">Index to get, starting with 0</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.Parse(System.Int32)">
            <summary>
            Parses the expression.
            </summary>
            <param name="startIndex">Starting index for the parsing (within the expression, starts with 0)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.Parse(System.Int32,System.Boolean)">
            <summary>
            Parses the expression.
            </summary>
            <param name="startIndex">Starting index for the parsing (within the expression, starts with 0)</param>
            <param name="supressError">If true no exceptions are thrown</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.MakeChildOfPrevious">
            <summary>
            Makes current element child of the previous element if exists.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.IsWronglyFolded(System.Int32,System.Int32,System.String)">
            <summary>
            Determines whether the operators/methods priority requires different folding (left-hand rather than right-hand)
            </summary>
            <param name="childPriority">Priority of child (current) operator/method</param>
            <param name="parentPriority">Priority of parent operator/method</param>
            <param name="parentName">Name of parent operator/method</param>
            <returns>True if opposite folding is required</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.FlipFolding(CMS.MacroEngine.MacroExpression)">
            <summary>
            Flips given expression so it folded left-hand rather than right-hand
            </summary>
            <remarks>
            A→B←(CDE) becomes (A→B←C)→D←E instead of A→B←(C→D←E)
            </remarks>
            <param name="expression">Macro expression that is wrongly folded</param>
            <returns>Flipped macro expression</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.InitMethodOnResult(System.Boolean)">
            <summary>
            Transfers the current result to a first child (for the parameter of method).
            </summary>
            <param name="isCalledOnResult">If true, method is called on data member (i.e. x.method() or postfix operator such as ++), otherwise the call is infix (i.e. method(x) or infix operator such as +)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.InitPropertyOnDataMember">
            <summary>
            Transfers the current result to a first child.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ReplaceChild(CMS.MacroEngine.MacroExpression,CMS.MacroEngine.MacroExpression)">
            <summary>
            Replaces the given child expression with the given one.
            </summary>
            <param name="oldExp">Old child expression</param>
            <param name="newExp">New child expression</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ParseParameters(System.Int32@,CMS.MacroEngine.ElementType,CMS.MacroEngine.ElementType)">
            <summary>
            Parses the method or indexer parameters.
            </summary>
            <param name="index">Index in the expression, adjusted to after the end element</param>
            <param name="openParenthesis">Opening parenthesis for these parameters</param>
            <param name="closeParenthesis">Closing parenthesis for these parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.CheckSyntax(System.String)">
            <summary>
            Checks the syntactic tree of parsed expression if everything is OK and ready for correct evaluation.
            </summary>
            <param name="originalExpression">Expression which was parsed</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ParseExpression(System.String,System.Boolean)">
            <summary>
            Returns the root of parsed expression. Uses cache of the parsed expressions to speedup the process.
            </summary>
            <param name="expression">Expression string to parse</param>
            <param name="supressError">If true no exceptions are thrown</param>
            <exception cref="T:CMS.MacroEngine.SyntacticAnalysisException">Syntax error if <paramref name="supressError"/> is false</exception>
            <exception cref="T:CMS.MacroEngine.LexicalAnalysisException">Lexical analysis error if <paramref name="supressError"/> is false</exception>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ParseAll(System.Boolean)">
            <summary>
            Parses the whole expression tree.
            </summary>
            <param name="supressError">If true no exceptions are thrown</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetRoot">
            <summary>
            Gets the root of the expression.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetPriority(System.String)">
            <summary>
            Gets the priority of the evaluation for the given method.
            </summary>
            <param name="methodName">Method name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.IsSpecialCommand(System.String)">
            <summary>
            Returns true for special commands such as break or continue, otherwise false.
            </summary>
            <param name="name">Name of the command</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.SyntaxError(System.Int32,System.Boolean)">
            <summary>
            Aborts the parsing of the expression due to a syntactic error
            </summary>
            <param name="lexemIndex">Position within the lexeme list</param>
            <param name="supressError">If true no exceptions are thrown</param>
            <exception cref="T:CMS.MacroEngine.SyntacticAnalysisException">Syntax error if <paramref name="supressError" /> is false</exception>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToString">
            <summary>
            Returns string representation of this MacroExpression.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToString(System.Boolean)">
            <summary>
            Returns string representation of this MacroExpression.
            </summary>
            <param name="debugMode">If true, debug mode is on</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringIndexer(System.Boolean)">
            <summary>
            Handles indexer expressions.
            </summary>
            <param name="debugMode">Determines whether the string representation is made for debug purposes</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringConstant">
            <summary>
            Handles constants (string literal, numbers, booleans, etc.).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringProperty(System.Boolean)">
            <summary>
            Handles properties.
            </summary>
            <param name="debugMode">Determines whether the string representation is made for debug purposes</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringCommand(System.Boolean)">
            <summary>
            Handles special commands like return, break, etc.
            </summary>
            <param name="debugMode">Determines whether the string representation is made for debug purposes</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringBlock(System.Boolean)">
            <summary>
            Handles block of code: { [some code] }
            </summary>
            <param name="debugMode">Determines whether the string representation is made for debug purposes</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringControlFlowStatements(System.Boolean)">
            <summary>
            Handles structures like [commandname] { [some code] }
            </summary>
            <param name="debugMode">Determines whether the string representation is made for debug purposes</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ToStringMethod(System.Boolean)">
            <summary>
            Handles classic method calls.
            </summary>
            <param name="debugMode">Determines whether the string representation is made for debug purposes</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetInfixMethodCall(System.Boolean)">
            <summary>
            Returns string representation of the method in format MyMethod(First, Second, Third).
            </summary>
            <param name="debugMode">Debug mode</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.GetPrefixMethodCall(System.Boolean)">
            <summary>
            Returns string representation of the method in format First.MyMethod(Second, Third).
            </summary>
            <param name="debugMode">Debug mode</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.ExtractParameter(System.String,System.String,System.Int32)">
            <summary>
            Extracts specified parameter of Rule expression.
            </summary>
            <param name="expression">Expression with rule method</param>
            <param name="methodName">Name of the method to extract parameter of</param>
            <param name="parameter">Index of the parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.MakeFlatter">
            <summary>
            Modifies the syntactic tree of the expression to the flat structure. Changes expressions like "(a || b) || c" to "a || b || c", etc.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.IsFlatOperator(System.String)">
            <summary>
            Returns true for operators which can be made flat - without subexpressions (||, &amp;&amp;, +, etc.)
            </summary>
            <param name="op">Operator to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.IsMethodWithName(System.String)">
            <summary>
            Returns true if the type of current expression is MethodCall with specified name.
            </summary>
            <param name="name">Name of the method</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExpression.HasNumberOfChildren(System.Int32)">
            <summary>
            Returns true if the current expression node has exactly specified number of children.
            </summary>
            <param name="number">Number of children</param>
        </member>
        <member name="T:CMS.MacroEngine.IMacroIdentityInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.MacroEngine.MacroIdentityInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.IUserMacroIdentityInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.MacroEngine.UserMacroIdentityInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroIdentityInfo">
            <summary>
            MacroIdentityInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroIdentityInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroIdentityInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityInfo.MacroIdentityID">
            <summary>
            Macro identity ID
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityInfo.MacroIdentityName">
            <summary>
            Macro identity name
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityInfo.MacroIdentityGuid">
            <summary>
            Macro identity guid
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityInfo.MacroIdentityEffectiveUserID">
            <summary>
            Macro identity effective user ID
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityInfo.MacroIdentityLastModified">
            <summary>
            Macro identity last modified
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfo.#ctor">
            <summary>
            Constructor - Creates an empty MacroIdentityInfo object.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MacroIdentityInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroIdentityInfoProvider">
            <summary>
            Class providing MacroIdentityInfo management.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroIdentityInfoProvider.DEFAULT_GLOBAL_ADMINISTRATOR_IDENTITY_NAME">
            <summary>
            <para>
            Name of macro identity which has global administrator effective user and is present by default.
            </para>
            <para>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </para>
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.GetMacroIdentities">
            <summary>
            Returns a query for all the MacroIdentityInfo objects.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.GetMacroIdentityInfo(System.Int32)">
            <summary>
            Returns MacroIdentityInfo with specified ID.
            </summary>
            <param name="id">MacroIdentityInfo ID</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.GetMacroIdentityInfo(System.String)">
            <summary>
            Returns MacroIdentityInfo with specified name.
            </summary>
            <param name="name">MacroIdentityInfo name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.SetMacroIdentityInfo(CMS.MacroEngine.MacroIdentityInfo)">
            <summary>
            Sets (updates or inserts) specified MacroIdentityInfo.
            </summary>
            <param name="infoObj">MacroIdentityInfo to be set</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.DeleteMacroIdentityInfo(CMS.MacroEngine.MacroIdentityInfo)">
            <summary>
            Deletes specified MacroIdentityInfo.
            </summary>
            <param name="infoObj">MacroIdentityInfo to be deleted</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityInfoProvider.DeleteMacroIdentityInfo(System.Int32)">
            <summary>
            Deletes MacroIdentityInfo with specified ID.
            </summary>
            <param name="id">MacroIdentityInfo ID</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroIdentityOption">
            <summary>
            Encapsulates identity option for macros.
            </summary>
            <remarks>
            When both <see cref="P:CMS.MacroEngine.MacroIdentityOption.IdentityName"/> and <see cref="P:CMS.MacroEngine.MacroIdentityOption.UserName"/> are specified, the identity name has precedence.
            </remarks>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityOption.IdentityName">
            <summary>
            Name of macro identity to be used when signing by macro identity is desired.
            </summary>
            <seealso cref="T:CMS.MacroEngine.MacroIdentityInfo"/>
        </member>
        <member name="P:CMS.MacroEngine.MacroIdentityOption.UserName">
            <summary>
            Name of user to be used when signing by user is desired.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityOption.IsNullOrEmpty(CMS.MacroEngine.MacroIdentityOption)">
            <summary>
            Indicates whether <paramref name="identityOption"/> is null or both its <see cref="P:CMS.MacroEngine.MacroIdentityOption.IdentityName"/> and <see cref="P:CMS.MacroEngine.MacroIdentityOption.UserName"/> properties are null or empty.
            </summary>
            <param name="identityOption">Identity option to be checked for null or emptiness.</param>
            <returns>Returns true when <paramref name="identityOption"/> is null or when both its identity name and user name are null or empty strings.</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityOption.GetEffectiveUser">
            <summary>
            Gets effective user of macro identity identified by <see cref="P:CMS.MacroEngine.MacroIdentityOption.IdentityName"/> when its value is provided.
            Otherwise gets user identified by <see cref="P:CMS.MacroEngine.MacroIdentityOption.UserName"/>.
            </summary>
            <returns>Returns user to be used when evaluating a macro, or null.</returns>
            <remarks>
            This method returns null when <see cref="P:CMS.MacroEngine.MacroIdentityOption.IdentityName"/> is provided, but the corresponding signature either does not exists or its <see cref="P:CMS.MacroEngine.MacroIdentityInfo.MacroIdentityEffectiveUserID"/>
            is not set.
            </remarks>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityOption.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroIdentityOption.FromUserInfo(CMS.Base.IUserInfo)">
            <summary>
            Creates a new identity option from user info.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.UserMacroIdentityHelper">
            <summary>
            Provides utility methods for <see cref="T:CMS.MacroEngine.UserMacroIdentityInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityHelper.SetMacroIdentity(CMS.Base.IUserInfo,System.Int32)">
            <summary>
            Assigns <see cref="T:CMS.MacroEngine.MacroIdentityInfo"/> identified by <paramref name="macroIdentityId"/> to <paramref name="userInfo"/>.
            Clears user's identity when <paramref name="macroIdentityId"/> is 0.
            </summary>
            <param name="userInfo">User whom to assign the macro identity.</param>
            <param name="macroIdentityId">Macro identity identifier.</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityHelper.SetMacroIdentityInternal(CMS.Base.IUserInfo,System.Int32)">
            <summary>
            Assigns <see cref="T:CMS.MacroEngine.MacroIdentityInfo"/> identified by <paramref name="macroIdentityId"/> to <paramref name="userInfo"/>.
            Clears user's identity when <paramref name="macroIdentityId"/> is 0.
            </summary>
            <param name="userInfo">User whom to assign the macro identity.</param>
            <param name="macroIdentityId">Macro identity identifier.</param>
        </member>
        <member name="T:CMS.MacroEngine.UserMacroIdentityInfo">
            <summary>
            UserMacroIdentityInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.UserMacroIdentityInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.UserMacroIdentityInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.UserMacroIdentityInfo.UserMacroIdentityID">
            <summary>
            User macro identity ID
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.UserMacroIdentityInfo.UserMacroIdentityUserID">
            <summary>
            User macro identity user ID
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.UserMacroIdentityInfo.UserMacroIdentityMacroIdentityID">
            <summary>
            User macro identity macro identity ID
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.UserMacroIdentityInfo.UserMacroIdentityUserGuid">
            <summary>
            User macro identity user guid
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.UserMacroIdentityInfo.UserMacroIdentityLastModified">
            <summary>
            User macro identity last modified
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserMacroIdentityInfo object.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserMacroIdentityInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.MacroEngine.UserMacroIdentityInfoProvider">
            <summary>
            Class providing UserMacroIdentityInfo management.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.GetUserMacroIdentities">
            <summary>
            Returns a query for all the UserMacroIdentityInfo objects.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.GetUserMacroIdentityInfo(System.Int32)">
            <summary>
            Returns UserMacroIdentityInfo with specified ID.
            </summary>
            <param name="id">UserMacroIdentityInfo ID</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.GetUserMacroIdentityInfo(CMS.Base.IUserInfo)">
            <summary>
            Returns UserMacroIdentityInfo for specified user.
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.SetUserMacroIdentityInfo(CMS.MacroEngine.UserMacroIdentityInfo)">
            <summary>
            Sets (updates or inserts) specified UserMacroIdentityInfo.
            </summary>
            <param name="infoObj">UserMacroIdentityInfo to be set</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.DeleteUserMacroIdentityInfo(CMS.MacroEngine.UserMacroIdentityInfo)">
            <summary>
            Deletes specified UserMacroIdentityInfo.
            </summary>
            <param name="infoObj">UserMacroIdentityInfo to be deleted</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.DeleteUserMacroIdentityInfo(System.Int32)">
            <summary>
            Deletes UserMacroIdentityInfo with specified ID.
            </summary>
            <param name="id">UserMacroIdentityInfo ID</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.GetUserMacroIdentityInfoInternal(CMS.Base.IUserInfo)">
            <summary>
            Returns UserMacroIdentityInfo for specified user.
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.MacroEngine.UserMacroIdentityInfoProvider.SetInfo(CMS.MacroEngine.UserMacroIdentityInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroSecurityInstallationHelper">
            <summary>
            Determines how the system processes macros in the object's fields.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityInstallationHelper.UpdateAllMacroSignatures(System.Action{System.String})">
            <summary>
            Loops through all objects and signs all macros via GlobalAdministrator identity. 
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
            <param name="logErrorAction">Action to be executed to log the error message.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityInstallationHelper.UpdateMacroSignaturesInObjectTypes(System.Collections.Generic.IEnumerable{System.String},System.Action{System.String})">
            <summary>
            Loops through all objects of <paramref name="objectTypesToProcess"/> and signs all macros via GlobalAdministrator identity. 
            </summary>
            <param name="objectTypesToProcess">Object types where macros should be signed.</param>
            <param name="logErrorAction">Action to be executed to log the error message.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityInstallationHelper.ObjectTypeCausesDuplicities(System.String)">
            <summary>
            Checks if object type is derived from general data class object type and may cause duplicities upon processing.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.IMacroInvisible">
            <summary>
            Interface for marking the objects which should not be visible in the macro IntelliSense, but should be evaluated.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.IMacroNamespace">
            <summary>
            Interface for marking the namespace objects.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.IMacroResolver">
            <summary>
            Interface for resolver objects.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.IMacroResolver.ResolveMacros(System.String,CMS.MacroEngine.MacroSettings)">
            <summary>
            Resolves all supported macro types in the given text within specified resolving context.
            </summary>
            <param name="text">Input text with macros to be resolved</param>
            <param name="settings">Macro context to be used for resolving (if null, context of the resolver is used)</param>
        </member>
        <member name="M:CMS.MacroEngine.IMacroResolver.ResolveMacroExpression(CMS.MacroEngine.ResolveExpressionSettings)">
            <summary>
            Resolves the data macro expression (expects expression without {% %} brackets).
            </summary>
            <param name="settings">Settings of the resolving process</param>
        </member>
        <member name="M:CMS.MacroEngine.IMacroResolver.CheckDataSources(System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Checks all the data sources for the value. Returns true if given data member was found within supported data sources.
            </summary>
            <param name="expression">Data member to look for</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.IMacroResolver.GetObjectValue(System.Object,System.Int32,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Gets the object value at given index (this is called when indexer [(int)] is used in the expression).
            </summary>
            <param name="obj">Source object to get the index-th value from</param>
            <param name="index">Index of the item to get</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.IMacroResolver.GetObjectValue(System.Object,System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Gets the object value of specified name.
            </summary>
            <param name="obj">Source object to get the index-th value from</param>
            <param name="columnName">Name of the value to get</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroResolverStorage">
            <summary>
            Global storage of static resolvers for all modules.
            Extend this to store your module's resolver to be globally available (in e-mail templates, macro components, etc.)
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroResolverStorage.GetResolverHandler">
            <summary>
            Handler for receiving static resolver via its name.
            </summary>
            <param name="name">Name of the resolver</param>
        </member>
        <member name="F:CMS.MacroEngine.MacroResolverStorage.mOnGetResolver">
            <summary>
            Handler called when resolver is being retrieved and was not found in the main storage.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolverStorage.RegisterResolver(System.String,System.Func{CMS.MacroEngine.MacroResolver})">
            <summary>
            Registers the macro resolver
            </summary>
            <param name="name">Resolver name</param>
            <param name="lambda">Lambda expression to initialize the resolver</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolverStorage.RegisterGetResolverHandler(CMS.MacroEngine.MacroResolverStorage.GetResolverHandler[])">
            <summary>
            Registers handler(s) called when resolver is being retrieved and was not found in the main storage.
            </summary>
            <param name="handlers">Handler(s) to be registered</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolverStorage.GetRegisteredResolvers">
            <summary>
            Returns names of all registered resolvers.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolverStorage.GetRegisteredResolver(System.String)">
            <summary>
            Returns resolver of given name. Returns default resolver if the name was not found.
            </summary>
            <param name="name">Name of the resolver</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroExtension">
            <summary>
            Base class for MacroField and MacroMethod.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtension.Name">
            <summary>
            Returns name of the field.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroExtensionContainer`2">
            <summary>
            Wrapper class to provide extensions to an arbitrary object. 
            It is a base class for ExtensionTypeContainer and MacroFieldContainer classes.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExtensionContainer`2.mExtensions">
            <summary>
            Collection of the Extensions registered.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExtensionContainer`2.mExtensionsInitialized">
            <summary>
            Indicates if extensions have been loaded / initialized
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExtensionContainer`2.mExtensionsByType">
            <summary>
            Extensions by the given type [Type => Extensions]
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExtensionContainer`2.mExtensionsByTypeAndName">
            <summary>
            Extensions by the given type and name [Type => Name => Extensions]
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExtensionContainer`2.NO_EXTENSION">
            <summary>
            Defines no extension in the dictionary of cached extensions
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroExtensionContainer`2.mLockObject">
            <summary>
            Object for locking the context
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtensionContainer`2.Instance">
            <summary>
            Container instance
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtensionContainer`2.Extensions">
            <summary>
            Extensions dictionary
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtensionContainer`2.RegisteredExtensions">
            <summary>
            Returns enumerable of all Extensions.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtensionContainer`2.RegisteredExtensionNames">
            <summary>
            Returns enumerable of all registered Extension names.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtensionContainer`2.ExtensionsByType">
            <summary>
            Extensions by the given type [Type => Extensions]
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroExtensionContainer`2.ExtensionsByTypeAndName">
            <summary>
            Extensions by the given type and name [Type => Name => Extensions]
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.GetExtensionsForObject(System.Object)">
            <summary>
            Returns list of macro extension registered for specified object. Caches the result in the internal cache.
            Returns null if there is no such extension for given object.
            </summary>
            <param name="obj">Object to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.GetExtensions(System.Type)">
            <summary>
            Gets the extensions for the given type. Does not cache the result.
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.GetExtensionForObject(System.Object,System.String)">
            <summary>
            Returns macro extension object of given name if registered for specified object. Caches the result in the internal cache.
            It loops through all extensions of given object type.
            Returns null if there is no such extension for given object.
            </summary>
            <param name="obj">Object to check</param>
            <param name="name">Name of the method</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.GetExtension(System.Type,System.String)">
            <summary>
            Returns the extension by type and name. Does not cache the result. Does not cache the result.
            </summary>
            <param name="type">Type</param>
            <param name="name">Member name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.RegisterExtension(`1)">
            <summary>
            Registers a Extension to the container.
            </summary>
            <param name="Extension">Extension to be registered</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.GetExtension(System.String)">
            <summary>
            Returns a Extension of given name (return null if specified Extension does not exist).
            </summary>
            <param name="name">Extension name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.EnsureExtensions">
            <summary>
            Ensures that the extensions for this type are loaded
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.RegisterExtensions">
            <summary>
            Registers extensions to the container. Override this to call RegisterExtension from within.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroExtensionContainer`2.CheckGlobalAdmin(CMS.MacroEngine.EvaluationContext)">
            <summary>
            Checks if the current context user is global admin, returns true if so, otherwise returns false
            </summary>
            <param name="context">Evaluation context</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroField">
            <summary>
            Wrapper for any macro data field (source).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroField.ContextValueEvaluator">
            <summary>
            Value evaluation function which needs context.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroField.SimpleValueEvaluator">
            <summary>
            Value evaluation function which does not need evaluation context.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroField.AvailabilityCondition">
            <summary>
            Availability condition.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroField.#ctor(System.String,System.Func{CMS.MacroEngine.EvaluationContext,System.Object},System.Func{CMS.MacroEngine.EvaluationContext,System.Boolean})">
            <summary>
            Creates new instance with value evaluator which needs a context.
            </summary>
            <param name="name">Name of the field</param>
            <param name="valueEvaluator">Value evaluation function which needs context</param>
            <param name="availabilityCondition">Availability condition</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroField.#ctor(System.String,System.Func{System.Object},System.Func{CMS.MacroEngine.EvaluationContext,System.Boolean})">
            <summary>
            Creates new instance with value evaluator which does not need a context.
            </summary>
            <param name="name">Name of the field</param>
            <param name="valueEvaluator">Value evaluation function which does not need evaluation context</param>
            <param name="availabilityCondition">Availability condition</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroField.IsFieldAvailable(CMS.MacroEngine.EvaluationContext)">
            <summary>
            Returns true if the field is available in the given context.
            </summary>
            <param name="context">Evaluation context in which the field is being requested</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroField.GetValue(CMS.MacroEngine.EvaluationContext)">
            <summary>
            Returns the value of the field in the given evaluation context.
            </summary>
            <param name="context">Evaluation context under which to evaluate the field value</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroFieldContainer">
            <summary>
            Container for field extensions of an arbitrary object used by MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroFieldContainer.GetFieldsForObject(System.Object)">
            <summary>
            Returns list of macro field extension registered for specified object.
            Returns null if there is no such extension for given object.
            </summary>
            <param name="obj">Object to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroFieldContainer.GetFieldForObject(System.Object,System.String)">
            <summary>
            Returns macro field object of given name if registered for specified object.
            It loops through all MacroFieldContainer extensions of given object type.
            Returns null if there is no such Extension for given object.
            </summary>
            <param name="obj">Object to check</param>
            <param name="name">Name of the field</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroFieldContainer.GetField(System.String)">
            <summary>
            Returns a field of given name (return null if specified field does not exist).
            </summary>
            <param name="name">Field name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroFieldContainer.RegisterField(CMS.MacroEngine.MacroField)">
            <summary>
            Registers the given field.
            </summary>
            <param name="field">Field to register</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroFieldContainer.RegisterFields">
            <summary>
            Registers all the fields.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroFieldContainer.RegisterExtensions">
            <summary>
            Registers all the fields.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethod">
            <summary>
            Macro method object.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.MovedFromNamespace">
            <summary>
            Original namespace the method was moved from. The method usage with the specified namespace is considered as obsolete.
            </summary>
            <seealso cref="P:CMS.MacroEngine.MacroMethod.ObsoleteMessage"/>
            <seealso cref="P:CMS.MacroEngine.MacroMethod.IsObsolete"/>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.IsObsolete">
            <summary>
            Indicates whether method is obsolete.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.ObsoleteMessage">
            <summary>
            The message that describes alternative workarounds.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.Method">
            <summary>
            Gets or sets reference to a method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.MethodResolver">
            <summary>
            Gets or sets reference to a method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.MethodContext">
            <summary>
            Gets or sets reference to a method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.Type">
            <summary>
            Gets or sets a return type of the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.AllowedTypes">
            <summary>
            Gets or sets a list of types for which the method is applicable (set to null for all types to be allowed).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.Comment">
            <summary>
            Gets or sets a comment for the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.Snippet">
            <summary>
            Gets or sets a code snippet which is used in AutoCompletion when TAB is pressed (for determining the cursor position use pipe).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.SpecialParameters">
            <summary>
            Gets or sets the list of special parameters needed to be supplied by resolver.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.Parameters">
            <summary>
            Gets or sets the parameters for the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.MinimumParameters">
            <summary>
            Gets or sets the minimal number of parameters needed by the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethod.IsHidden">
            <summary>
            If true, the method won't be visible in IntelliSense (but will be normally executed when called).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.#ctor">
            <summary>
            Creates new MacroMethod object.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.#ctor(System.String,System.Func{System.Object[],System.Object})">
            <summary>
            Creates new instance of MacroMethod object.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.#ctor(System.String,System.Func{CMS.MacroEngine.MacroResolver,System.Object[],System.Object})">
            <summary>
            Creates new instance of MacroMethod object.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.#ctor(System.String,System.Func{CMS.MacroEngine.EvaluationContext,System.Object[],System.Object})">
            <summary>
            Creates new instance of MacroMethod object.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.AddParameter(CMS.Core.IMacroMethodParam)">
            <summary>
            Adds parameter to the method definition.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.AddParameter(System.String,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds parameter to the method definition.
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="type">Type of the parameter</param>
            <param name="comment">Comment of the parameter</param>
            <param name="isParams">If true, parameter is declared with params keyword</param>
            <param name="asExpression">If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.GetParameterName(System.Int32)">
            <summary>
            Returns a name of the index-th parameter.
            </summary>
            <param name="index">Index of the parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.GetParameterType(System.Int32)">
            <summary>
            Returns a type of the index-th parameter.
            </summary>
            <param name="index">Index of the parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.GetParameterComment(System.Int32)">
            <summary>
            Returns a comment of the index-th parameter.
            </summary>
            <param name="index">Index of the parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.ExecuteMethod(System.Object[])">
            <summary>
            Executes given method with parameters.
            </summary>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethod.ExecuteMethod(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Executes given method with parameters.
            </summary>
            <param name="context">Resolver object</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethodContainer">
            <summary>
            Container for method extensions of an arbitrary object used by MacroEngine.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodContainer.RegisteredMethods">
            <summary>
            Returns enumerable of all methods.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetMethodsForObject(System.Object)">
            <summary>
            Returns list of macro method extension registered for specified object.
            Returns null if there is no such extension for given object.
            </summary>
            <param name="obj">Object to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetMethodForObject(System.Object,System.String)">
            <summary>
            Returns macro method object of given name if registered for specified object.
            It loops through all MacroMethodContainer extensions of given object type.
            Returns null if there is no such Extension for given object.
            </summary>
            <param name="obj">Object to check</param>
            <param name="name">Name of the method</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetMethod(System.String)">
            <summary>
            Returns a method of given name (return null if specified method does not exist).
            </summary>
            <param name="name">Method name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.RegisterMethod(CMS.MacroEngine.MacroMethod)">
            <summary>
            Registers the given method.
            </summary>
            <param name="method">Method to register</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.RegisterMethods(CMS.MacroEngine.MacroMethod[])">
            <summary>
            Registers the given methods.
            </summary>
            <param name="methods">Methods to register</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.RegisterMethods">
            <summary>
            Registers all the methods.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.RegisterExtensions">
            <summary>
            Registers all the methods.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetMacroMethods(System.Reflection.MethodInfo)">
            <summary>
            Creates a macro method from the given method info. Returns null if the given method does not represent a macro method
            </summary>
            <param name="m">Method info</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetOptionalParam``1(System.Object[],System.Int32,``0)">
            <summary>
            Gets the optional param of the given type
            </summary>
            <param name="parameters">List of method parameters</param>
            <param name="index">Parameter index</param>
            <param name="defaultValue">Default value in case conversion fails or parameter is not available</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetParamValue``1(System.Object[],System.Int32,``0)">
            <summary>
            Returns the index-th parameter evaluated using given resolver.
            </summary>
            <param name="parameters">Method parameters</param>
            <param name="index">Index of the parameter within the array</param>
            <param name="defaultValue">Default value which will be used if the parameter is not present</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetLazyParamValue(System.Object,CMS.MacroEngine.EvaluationContext,System.Boolean@)">
            <summary>
            Gets the lazy parameter value by evaluating it
            </summary>
            <param name="parameter">Parameter to evaluate</param>
            <param name="evalContext">Evaluation context</param>
            <param name="securityPassed">Indicates whether the security check passed</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetBoolParam(System.Object)">
            <summary>
            Returns the parameter converted to boolean or false if parameter is not boolean.
            </summary>
            <param name="parameter">Parameter to convert</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetDoubleParam(System.Object,System.String)">
            <summary>
            Returns the parameter converted to double or zero if parameter is not double.
            </summary>
            <param name="parameter">Parameter to convert</param>
            <param name="culture">Culture to use to convert object to double</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetDecimalParam(System.Object,System.String)">
            <summary>
            Returns the parameter converted to decimal or zero if parameter is not decimal.
            </summary>
            <param name="parameter">Parameter to convert</param>
            <param name="culture">Culture to use to convert object to double</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetIntParam(System.Object)">
            <summary>
            Returns the parameter converted to integer or zero if parameter is not integer.
            </summary>
            <param name="parameter">Parameter to convert</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetStringParam(System.Object,System.String)">
            <summary>
            Returns the parameter converted to string or empty string.
            </summary>
            <param name="parameter">Parameter to convert</param>
            <param name="culture">Culture to use to convert object to string</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.GetGuidParam(System.Object)">
            <summary>
            Converts the parameter to GUID. Returns Guid.Empty if parameter is not GUID.
            </summary>
            <param name="parameter">Parameter to convert</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.RegisterMethodInternal(System.String,System.Func{CMS.MacroEngine.EvaluationContext,System.Object[],System.Object},System.Type,System.String,System.Int32,System.Object[0:,0:],System.String[])">
            <summary>
            Registers the given method within the method table.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
            <param name="type">Return type of the method</param>
            <param name="comment">Comment for the method</param>
            <param name="minimumParameters">Minimal number of parameters needed to call the method</param>
            <param name="parameterDefinition">Parameter definition in format {{name, type, comment}, {name, type, comment}}</param>
            <param name="specialParameters">A list of special parameters needed to be supplied by resolver</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.AddParametersAndRegister(System.Object[0:,0:],CMS.MacroEngine.MacroMethod)">
            <summary>
            Adds the parameters from definition and registres the method to the system.
            </summary>
            <param name="parameterDefinition">Parameter definition</param>
            <param name="methodToReg">Method to register</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.RegisterMethodInternal(System.String[],System.Func{CMS.MacroEngine.EvaluationContext,System.Object[],System.Object},System.Type,System.String,System.Int32,System.Object[0:,0:],System.String[])">
            <summary>
            Registers the given method within the method table.
            </summary>
            <param name="names">Method names to register</param>
            <param name="method">Method delegate</param>
            <param name="type">Return type of the method</param>
            <param name="comment">Comment for the method</param>
            <param name="minimumParameters">Minimal number of parameters needed to call the method</param>
            <param name="parameterDefinition">Parameter definition in format {{name, type, comment}, {name, type, comment}}</param>
            <param name="specialParameters">A list of special parameters needed to be supplied by resolver</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.CompareValues(CMS.MacroEngine.EvaluationContext,System.String,System.Object[])">
            <summary>
            Returns true if first parameter is lower than or equal to second.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parametersToCompare">First two parameters are numbers to compare</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.UnwrapContainer(System.Object[])">
            <summary>
            Unwraps all DateTime and TimeSpan containers to their original system value.
            </summary>
            <param name="parameters">Parameters to process</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.CompareString(System.String,System.String,System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Compares strings (lexicographically).
            </summary>
            <param name="str1">String to compare</param>
            <param name="str2">String to compare</param>
            <param name="op">Comparison operator</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.CompareDouble(System.Double,System.Double,System.String)">
            <summary>
            Compares double numbers.
            </summary>
            <param name="number1">Number to compare</param>
            <param name="number2">Number to compare</param>
            <param name="op">Comparison operator</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.CompareDateTime(System.DateTime,System.DateTime,System.String)">
            <summary>
            Compares DateTime values.
            </summary>
            <param name="date1">DateTime to compare</param>
            <param name="date2">DateTime to compare</param>
            <param name="op">Comparison operator</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodContainer.CompareTimeSpan(System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Compares TimeSpan values.
            </summary>
            <param name="span1">TimeSpan to compare</param>
            <param name="span2">TimeSpan to compare</param>
            <param name="op">Comparison operator</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethodParam">
            <summary>
            Macro method parameter object.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParam.Type">
            <summary>
            Gets or sets a return type of the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParam.Comment">
            <summary>
            Gets or sets a comment for the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParam.Name">
            <summary>
            Gets or sets the name of the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParam.IsParams">
            <summary>
            If true, the parameter is declared with params keyword.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParam.AsExpression">
            <summary>
            If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodParam.#ctor(System.String,System.Type,System.String)">
            <summary>
            Creates new instance of MacroMethodParam object.
            </summary>
            <param name="name">Parameter name</param>
            <param name="type">Parameter type</param>
            <param name="comment">Parameter comment</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodParam.#ctor(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            Creates new instance of MacroMethodParam object.
            </summary>
            <param name="name">Parameter name</param>
            <param name="type">Parameter type</param>
            <param name="comment">Parameter comment</param>
            <param name="asExpression">If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated</param>
        </member>
        <member name="T:CMS.MacroEngine.CacheMethods">
            <summary>
            Wrapper class to provide basic caching methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.CacheMethods.GetCacheDependency(System.Object[])">
            <summary>
            Returns CMSCacheDependency object created from given string.
            </summary>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.CacheMethods.Cache(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Caches the result of the given expression. The expression is evaluated only when not found in cache.
            </summary>
            <param name="evalContext">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.ConvertMethods">
            <summary>
            Wrapper class to provide conversion methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToInt(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to int, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToBool(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to bool, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToBaseInfo(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to BaseInfo, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToDouble(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to double, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToDecimal(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to decimal, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToString(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to string, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToGuid(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to Guid, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToDateTime(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to DateTime, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToSystemDateTime(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to DateTime string representation in EN culture.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.ToTimeSpan(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts value to TimeSpan, if it is not possible, returns default value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.ConvertMethods.FromOADate(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts double representation of DateTime (OLE Automation Date) to DateTime.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.DateTimeMethods">
            <summary>
            Wrapper class to provide DateTime methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.ToShortDateString(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts the value of the DateTime to its equivalent short date string representation.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.ToShortTimeString(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts the value of the DateTime to its equivalent short date time representation.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddMilliseconds(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of milliseconds
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddSeconds(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of seconds
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddMinutes(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of minutes
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddHours(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of hours
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddDays(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of days
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddWeeks(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of weeks
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddMonths(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of months
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.AddYears(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Adds specified number of years
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.FormatDateTime(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Format date time.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeMethods.FormatDate(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Format date without time part.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.DateTimeStaticFields">
            <summary>
            Wrapper class to provide fields from DateTime class in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeStaticFields.RegisterFields">
            <summary>
            Registers the math fields.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DateTimeStaticMethods">
            <summary>
            Wrapper class to provide static DateTime methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeStaticMethods.IsLeapYear(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.DateTimeStaticMethods.DaysInMonth(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.DebugSettingsFields">
            <summary>
            Wrapper class to provide fields from DenugHelper in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DebugSettingsMethods">
            <summary>
            Wrapper class to provide methods from DebugHelper namespace in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.DebugSettingsMethods.IsDebugEnabled(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Checks if the specified debug is enabled.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.EnumerableMethods">
            <summary>
            Wrapper class to provide methods working with IEnumerable in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.Flatten(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts the given list of enumerable collections to a flat list of their items.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.GetItem(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the specified item from the collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.RandomSelection(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns specified number of random objects from within the given collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.SelectInterval(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns specified interval of items from the collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.InList(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if specified object is within the given collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.Exists(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if there is at least one object in the collection which matches given condition. If condition is not defined, returns true if collection is not empty.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.Filter(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns collection filtered with given dynamic condition.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.Any(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if there is at least one object in the collection satisfying specified condition. If condition is not defined, returns true if collection is not empty.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.All(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if all the objects in the collection satisfy specified condition (returns true for empty collection).
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.EnumerableMethods.GetExpressionParam(System.Object)">
            <summary>
            Processes a MacroExpression parameter (filtering condition).
            </summary>
            <param name="parameter">Parameter to process</param>
        </member>
        <member name="T:CMS.MacroEngine.EnumMethods">
            <summary>
            Wrapper class to provide methods from System.Enums namespace in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.EnumMethods.ToStringRepresentation(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the string representation of the enum value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.HierarchicalObjectMethods">
            <summary>
            Wrapper class to provide methods working with IHierarchicalObjectContainer in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.HierarchicalObjectMethods.GetProperty(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the specified property from the object.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.InfoObjectCollectionMethods">
            <summary>
            Wrapper class to provide methods working with InfoObjectCollection in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.Sum(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a sum of all collection items over specified column.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.Average(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns an average of all collection items over specified column.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.Minimum(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a minimum value of all collection items over specified column.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.Maximum(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a maximum value of all collection items over specified column.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.OrderBy(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Order by on collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.Where(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Where on collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.TopN(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            TopN on collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.InfoObjectCollectionMethods.Columns(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Columns on collection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.MathFields">
            <summary>
            Wrapper class to provide fields from System.Math namespace in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MathFields.RegisterFields">
            <summary>
            Registers the math fields.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MathMethods">
            <summary>
            Wrapper class to provide methods from System.Math namespace in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Between(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if specified value (numerical/timespan/datetime) is in the given range.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Modulo(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns modulo of two values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Max(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns maximum from given numbers.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Min(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns minimum from given numbers.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Abs(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the absolute value of a specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Acos(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Asin(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Atan(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Ceiling(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the smallest whole number greater than or equal to the specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Cos(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Cosh(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Exp(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Floor(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the largest whole number less than or equal to the specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Log(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the logarithm of a specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Log10(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Pow(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Round(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the number nearest the specified value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Sign(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a value indicating the sign of a number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Sin(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Sinh(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Sqrt(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Tan(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.Tanh(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.IsOdd(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if given number(s) is(are) odd.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.IsEven(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if given number(s) is(are) even.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.GetRandomInt(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns positive random integer within a specified range.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MathMethods.GetRandomDouble(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns positive random double within a specified range.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.ObjectAttachmentCategoriesFields">
            <summary>
            Extends "ObjectAttachment" macro namespace, so object attachment (metafiles) category names are accessible in macros.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ObjectAttachmentCategoriesFields.RegisterFields">
            <summary>
            Registers fields.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.ObjectMethods">
            <summary>
            Wrapper class to provide methods working with any object in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ObjectMethods.EqualsAny(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if at least one object of the enumerable is equal to specified object.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">
            Obejct to compare each item of the collection to;
            Enumerable collection;
            </param>
        </member>
        <member name="T:CMS.MacroEngine.SimpleDataContainerMethods">
            <summary>
            Wrapper class to provide methods working with ISimpleDataContainer in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.SimpleDataContainerMethods.GetValue(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the specified value from the object.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.StringMethods">
            <summary>
            Wrapper class to provide string methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.ToLower(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts the string to lower.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.ToUpper(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Converts the string to upper.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Substring(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Retrieves a substring from this instance.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Split(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Identifies the substrings in this instance that are delimited by one or more characters specified in an array, then places the substrings into a String array.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Trim(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Removes all occurrences of white space characters from the beginning and end of this instance.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.TrimEnd(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Removes all occurrences of a set of characters specified in an array from the end of this instance.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.TrimStart(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Removes all occurrences of a set of characters specified in an array from the beginning of this instance.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Replace(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Replaces all occurrences of a specified Unicode character or String in this instance, with another specified Unicode character or String.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Remove(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Deletes a specified number of characters from this instance beginning at a specified position.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.PadLeft(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Left-aligns the characters in this string, padding on the right with a specified Unicode character, for a specified total length.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.PadRight(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Right-aligns the characters in this string, padding on the left with a specified Unicode character, for a specified total length.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.EndsWith(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Determines whether the end of this instance matches at least one of the specified string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.StartsWith(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Determines whether the beginning of this instance matches at least one of the specified string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.NotContains(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a value indicating whether the specified string object(s) do(es) not occur within this string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Contains(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a value indicating whether the specified string object(s) occur(s) within this string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.ContainsInternal(CMS.MacroEngine.EvaluationContext,System.Object[],System.Boolean)">
            <summary>
            Returns a value indicating whether the specified string object(s) do(es) not occur within this string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
            <param name="notContains">Depends whether notcontains or contains is resolved</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.IndexOf(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Reports the index of the first occurrence of a String, or one or more characters, within this instance.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.LastIndexOf(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Reports the index position of the last occurrence of a specified Unicode character or String within this instance.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.RegexReplace(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Replaces the string using regular expressions.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.GetMatch(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Matches the value to the regular expression and returns the match.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Matches(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Matches the value to the regular expression.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.Format(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Replaces each format item in a specified string with the text equivalent of a corresponding object's value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringMethods.FormatNotEmpty(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Formats the given value using the given string in case the value is not empty.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.StringStaticFields">
            <summary>
            Wrapper class to provide string static fields.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.StringStaticFields.RegisterFields">
            <summary>
            Registers the string static fields.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.StringStaticMethods">
            <summary>
            Wrapper class to provide basic string static methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.StringStaticMethods.IsNullOrWhiteSpace(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Indicates whether the specified string is null, Empty or consists only of whitespace characters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringStaticMethods.IsNullOrEmpty(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Indicates whether the specified string is null or Empty string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringStaticMethods.Join(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Concatenates a specified separator String between each element of a specified String array, yielding a single concatenated string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringStaticMethods.FormatString(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Formats given string using C# string.Format method.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.StringStaticMethods.LoremIpsum(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Generates Lorem Ipsum text of given length.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.SystemFields">
            <summary>
            Wrapper class to provide system fields in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.SystemFields.RegisterFields">
            <summary>
            Registers the system fields.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.SystemMethods">
            <summary>
            Wrapper class to provide basic system methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GetObjectID(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns object ID from code name (GUID respectively) and site name.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">
            Object type of the object;
            Code name or GUID of the object;
            Site name, if null or empty, global objects are retrieved (optional if the object is not site object);
            Allow global objects (if site object is not found, global object with given name is retrieved);
            </param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Add(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            If arguments are numbers than it returns sum of them. Otherwise returns concatenation of string representations.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Subtract(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Subtracts two number values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Multiply(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns product of the parameters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Divide(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Divides two number values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GreaterThan(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if first parameter is greater than second.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LowerThan(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if first parameter is lower than second.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GreaterThanOrEqual(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if first parameter is greater than or equal to second.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LowerThanOrEqual(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if first parameter is lower than or equal to second.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Percent(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns 0.01 multiple of first argument.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Modulo(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns modulo of two values.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.BitwiseComplement(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns a bitwise complement.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.And(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns logical product of given parameters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Or(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns logical addition of given parameters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Not(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns logical negation of the provided value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LogicalAnd(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns logical AND of given parameters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LogicalOr(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns logical OR of given parameters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LogicalXor(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns logical XOR of given parameters.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LeftShift(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Shifts its first operand left by the number of bits specified by its second operand.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.RightShift(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Shifts its first operand right by the number of bits specified by its second operand.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Format(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Formats given object to requested format.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.LogToDebug(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Logs given items to MacroDebug.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.ProcessCustomMacro(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Processes the custom macro.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.Rule(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Method used in macro rule editor. Contains information to reconstruct the design of the expression. When evaluated, the first parameter evaluation is returned.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.IsModuleLoaded(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Checks if module is loaded.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GetObject(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets object of specified type with specified ID.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GetObjectTypeName(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the nice objext type name for specified type.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GetRegisteredObjectTypes(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Retrieves all object types registered in static type info objects in the system
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.FormatId(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Formats string based on value parameter. If it is greater then zero 
            </summary>
            <param name="context">Evaluation context with child resolver</param>        
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GetFieldTypes(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns list of all field types for the given object type
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.SystemMethods.GetFieldGroups(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the field groups available in the system
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.UtilMethods">
            <summary>
            Wrapper class to provide util methods from GlobalHelper in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.EnsureMaximumLineLength(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Limits line length of the given plain text.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.JSEncode(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Evaluates the item data and returns it.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.BaseImagePath(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns base path for images.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.ResolveBBCode(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Resolves BB code.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.SQLEscape(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Escapes the string for usage in SQL string to avoid SQL injection.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.StripTags(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Strips the HTML tags.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.ResolveUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Resolves the URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.UnresolveUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Unresolves the URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.LimitLength(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Limits the length to specified number of chars.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.GetAmountText(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            If amount is equal to 1, expression using singular formatting string is returned, otherwise expression using plural formatting string is returned.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">
            Amount - Amount to be used; 
            Singular - Singular formatting string. If formatting item {0} is not included, it is formatted as '[amount] [singular]', e.g.: 1 unit; 
            Plural - Plural formatting string. If formatting item {0} is not included, it is formatted as '[amount] [plural]', e.g.: 3 units
            </param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.GetResourceString(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Translates given resource string
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.GetNiceObjectTypeName(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the localized object type.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.GetFullObjectName(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets the full object name
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.Localize(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Localizes given text (resolves localization macros).
            </summary>
            <param name="context">Child resolver object which fired the method evaluation</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.ResolveMacroExpression(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Resolves the data macro expression (expects expression without {% %} brackets).
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.ResolveMacros(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Resolves macros in given text.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.MapPath(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Maps the virtual path to the disk.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.List(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Creates an ArrayList from given list of items.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.UrlEncode(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Encodes the URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.UrlDecode(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Decodes the URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.CreateHTMLMacroExample(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Decodes the URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.GetClassFields(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns list of fields of given class.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.IsEmail(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if given value is valid e-mail.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.IsUsPhoneNumber(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns if given value is valid U.S. Phone number.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.JSEscape(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Escapes the given string to be used in the JavaScript string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.GetEmailDomain(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns e-mail domain name.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.HTMLEncode(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns encoded text.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.UtilMethods.HTMLAttributeEncode(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Encodes only quotation marks ("), ampersands (&amp;), and left angle brackets (&lt;) to equivalent character entities.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethodAttribute">
            <summary>
            Adds action to the page.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.Type">
            <summary>
            Gets or sets a return type of the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.Name">
            <summary>
            Name of the macro method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.Comment">
            <summary>
            Comment of the macro method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.Snippet">
            <summary>
            Gets or sets a code snippet which is used in AutoCompletion when TAB is pressed (for determining the cursor position use pipe).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.MinimumParameters">
            <summary>
            Gets or sets the minimal number of parameters needed by the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.IsHidden">
            <summary>
            If true, the method won't be visible in IntelliSense (but will be normally executed when called).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodAttribute.SpecialParameters">
            <summary>
            Gets or sets the list of special parameters needed to be supplied by resolver.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodAttribute.#ctor(System.Type,System.String,System.Int32)">
            <summary>
            Creates new MacroMethodAttribute.
            </summary>
            <param name="type">Method return type</param>
            <param name="comment">Comment of the method</param>
            <param name="minimumParameters">minimal number of parameters needed by the method</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethodsMovedFromNamespaceAttribute">
            <summary>
            Marks the macro methods old namespace and sets the obsolete message for usages with old namespace.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodsMovedFromNamespaceAttribute.ObsoleteMessage">
            <summary>
            The workaround message.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodsMovedFromNamespaceAttribute.OldNamespace">
            <summary>
            Old namespace where the macro method was defined.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodsMovedFromNamespaceAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of <see cref="T:CMS.MacroEngine.MacroMethodsMovedFromNamespaceAttribute"/>.
            </summary>
            <param name="obsoleteMessage">The text that describes alternative workarounds.</param>
            <param name="oldNamespace">Old namespace where the macro method was defined.</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethodObsoleteAttribute">
            <summary>
            Marks the macro methods that are no longer in use.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodObsoleteAttribute.Message">
            <summary>
            The workaround message.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodObsoleteAttribute.#ctor(System.String)">
            <summary>
            Creates new instance of <see cref="T:CMS.MacroEngine.MacroMethodObsoleteAttribute"/>.
            </summary>
            <param name="message">The text that describes alternative workarounds.</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethodParamAttribute">
            <summary>
            Adds action to the page.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParamAttribute.Index">
            <summary>
            Index of the breadcrumb.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParamAttribute.Type">
            <summary>
            Gets or sets a return type of the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParamAttribute.Comment">
            <summary>
            Gets or sets a comment for the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParamAttribute.Name">
            <summary>
            Gets or sets the name of the method.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParamAttribute.IsParams">
            <summary>
            If true, the parameter is declared with params keyword.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethodParamAttribute.AsExpression">
            <summary>
            If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodParamAttribute.#ctor(System.Int32,System.String,System.Type,System.String)">
            <summary>
            Creates new instance of MacroMethodParam object.
            </summary>
            <param name="index">Index of the parameter</param>
            <param name="name">Parameter name</param>
            <param name="type">Parameter type</param>
            <param name="comment">Parameter comment</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodParamAttribute.#ctor(System.Int32,System.String,System.Type,System.String,System.Boolean)">
            <summary>
            Creates new instance of MacroMethodParam object.
            </summary>
            <param name="index">Index of the parameter</param>
            <param name="name">Parameter name</param>
            <param name="type">Parameter type</param>
            <param name="comment">Parameter comment</param>
            <param name="asExpression">If true, the parameter is passed to the method as expression (MacroExpression object), not evaluated</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethodParamAttribute.GetMacroParam">
            <summary>
            Creates new MacroMethodParam object from data of this attribute.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroMethods">
            <summary>
            Macro methods.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroMethods.mMethods">
            <summary>
            Table of available methods.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroMethods.mAnyTypeMethods">
            <summary>
            List of methods which are available for any type
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroMethods.mMethodsByType">
            <summary>
            Index of methods available for specified type.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroMethods.Methods">
            <summary>
            Gets the hashtable with all methods.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.GetMethod(System.String)">
            <summary>
            Gets the specific method delegate.
            </summary>
            <param name="name">Method name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.ExecuteMethod(System.String,CMS.MacroEngine.MacroResolver,System.Object[])">
            <summary>
            Executes the given method with parameters.
            </summary>
            <param name="name">Method name</param>
            <param name="resolver">Resolver object</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.ExecuteMethod(System.String,System.Object[])">
            <summary>
            Executes the given method with parameters.
            </summary>
            <param name="name">Method name</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.AreMethodsRegistered">
            <summary>
            Returns true if methods are registered in the hashtable of all methods.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.GetMethodsForObject(System.Object)">
            <summary>
            Returns the list of macro methods suitable for specified object.
            </summary>
            <param name="obj">Object for which the list should be returned</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.GetMethodsForObject(System.Object,System.Boolean)">
            <summary>
            Returns the list of macro methods suitable for specified object.
            </summary>
            <param name="obj">Object for which the list should be returned</param>
            <param name="includeAnyTypeMethods">If true, methods for any type are included as well</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.GetMethodsForObject(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Returns the list of macro methods suitable for specified object.
            </summary>
            <param name="obj">Object for which the list should be returned</param>
            <param name="includeAnyTypeMethods">If true, methods for any type are included as well</param>
            <param name="exactType">If true only methods with exactly the same type are returned (= no inherited members)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.RegisterMethod(CMS.MacroEngine.MacroMethod)">
            <summary>
            Registers the given method within the method table.
            </summary>
            <param name="method">Macro method to register</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.RegisterMethodInternal(System.String,System.Func{CMS.MacroEngine.EvaluationContext,System.Object[],System.Object},System.Type,System.String,System.Int32,System.Object[0:,0:],System.String[],System.Collections.Generic.List{System.Type})">
            <summary>
            Registers the given method within the method table.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
            <param name="type">Return type of the method</param>
            <param name="comment">Comment for the method</param>
            <param name="minimumParameters">Minimal number of parameters needed to call the method</param>
            <param name="parameterDefinition">Parameter definition in format {{name, type, comment}, {name, type, comment}}</param>
            <param name="specialParameters">A list of special parameters needed to be supplied by resolver</param>
            <param name="allowedTypes">List of types for which the method is applicable (set to null for all types to be allowed)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.RegisterMethodInternal(System.String,System.Func{CMS.MacroEngine.MacroResolver,System.Object[],System.Object},System.Type,System.String,System.Int32,System.Object[0:,0:],System.String[],System.Collections.Generic.List{System.Type})">
            <summary>
            Registers the given method within the method table.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
            <param name="type">Return type of the method</param>
            <param name="comment">Comment for the method</param>
            <param name="minimumParameters">Minimal number of parameters needed to call the method</param>
            <param name="parameterDefinition">Parameter definition in format {{name, type, comment}, {name, type, comment}}</param>
            <param name="specialParameters">A list of special parameters needed to be supplied by resolver</param>
            <param name="allowedTypes">List of types for which the method is applicable (set to null for all types to be allowed)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.RegisterMethodInternal(System.String,System.Func{System.Object[],System.Object},System.Type,System.String,System.Int32,System.Object[0:,0:],System.String[],System.Collections.Generic.List{System.Type})">
            <summary>
            Registers the given method within the method table.
            </summary>
            <param name="name">Method name</param>
            <param name="method">Method delegate</param>
            <param name="type">Return type of the method</param>
            <param name="comment">Comment for the method</param>
            <param name="minimumParameters">Minimal number of parameters needed to call the method</param>
            <param name="parameterDefinition">Parameter definition in format {{name, type, comment}, {name, type, comment}}</param>
            <param name="specialParameters">A list of special parameters needed to be supplied by resolver</param>
            <param name="allowedTypes">List of types for which the method is applicable (set to null for all types to be allowed)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroMethods.AddParametersAndRegister(System.Object[0:,0:],CMS.MacroEngine.MacroMethod)">
            <summary>
            Adds the parameters from definition and registers the method to the system.
            </summary>
            <param name="parameterDefinition">Parameter definition</param>
            <param name="methodToReg">Method to register</param>
        </member>
        <member name="T:CMS.MacroEngine.Internal.MacroMethodValidator">
            <summary>
            Provides method for macro method validation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.Internal.MacroMethodValidator.UnlistedSystemMethods">
            <summary>
            Set of methods defined by system but not handled by operator methods.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.Internal.MacroMethodValidator.ProcessResult(CMS.Core.IMacroMethod,System.String,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Process result of <see cref="M:CMS.MacroEngine.ExpressionEvaluator.EvaluateMethodCall(System.Boolean@,System.Boolean@,System.Boolean)"/> method.
            </summary>
            <param name="method">Macro method</param>
            <param name="name">Method name</param>
            <param name="usedFromObsoleteNamespace">Indicates whether method was used from obsolete namespace.</param>
            <param name="getParameters">Function used for retrieving of actual method parameters.</param>
            <returns>Returns instance of <see cref="T:CMS.MacroEngine.Internal.MethodNotFoundResult"/> if method was not found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:CMS.MacroEngine.Internal.MacroMethodValidator.Validate(CMS.MacroEngine.MacroExpression)">
            <summary>
            Validates existence of macro methods in macro expression.
            </summary>
            <param name="expression">Input macro expression.</param>
            <returns>Collection of unknown macro methods.</returns>
        </member>
        <member name="T:CMS.MacroEngine.Internal.MethodNotFoundResult">
            <summary>
            Result class for <see cref="T:CMS.MacroEngine.Internal.MacroMethodValidator"/>.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.Internal.MethodNotFoundResult.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates new instance of <see cref="T:CMS.MacroEngine.Internal.MethodNotFoundResult"/>
            </summary>
            <param name="methodName">Method name</param>
            <param name="parametersNotMatch">Indicates whether method not found is caused by missing parameters.</param>
            <param name="obsoleteMessage">The message that indicates that method is obsolete with possible workaround.</param>
        </member>
        <member name="P:CMS.MacroEngine.Internal.MethodNotFoundResult.MethodName">
            <summary>
            Method name
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.Internal.MethodNotFoundResult.ParametersNotMatch">
            <summary>
            Indicates whether method not found is caused by missing parameters.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.Internal.MethodNotFoundResult.ObsoleteMessage">
            <summary>
            The message that describes alternative workarounds.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.Internal.MethodNotFoundResult.IsObsolete">
            <summary>
            Indicates whether method is obsolete.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroContext">
            <summary>
            Macro resolving context
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroContext.mCurrentResolver">
            <summary>
            Current macro resolver
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroContext.lockObject">
            <summary>
            Locker object
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroContext.CurrentResolver">
            <summary>
            Current macro resolver
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroContext.GlobalResolver">
            <summary>
            Global static resolver - contains all the global objects. Context resolvers are children of this resolver.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroContext.CreateGlobalResolver">
            <summary>
            Creates an instance of the global macro resolver
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroHandlers.PreInit">
            <summary>
            Pre-initialization of the module.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroHandlers.EnsureValidMacrosWithinInstallation(System.Object,CMS.Base.QueryEventArgs)">
            <summary>
            Runs before query execution within installation.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroModule">
            <summary>
            Represents the Macro module.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroModule.OnPreInit">
            <summary>
            Pre-initialization of the module.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroModuleMetadata">
            <summary>
            Represents the Macro module metadata.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.ConvertNamespace">
            <summary>
            Wrapper class to provide basic conversion namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DateTimeNamespace">
            <summary>
            Wrapper class to provide basic DateTime namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.DebugNamespace">
            <summary>
            Class to provide debug namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.EnumsNamespace">
            <summary>
            Wrapper class to provide enumerations namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroNamespace`1">
            <summary>
            Base class for macro namespaces.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroNamespace`1.Instance">
            <summary>
            Returns singleton instance of the namespace
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MathNamespace">
            <summary>
            Wrapper class to provide System.Math namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.ObjectAttachmentsNamespace">
            <summary>
            Wrapper class to provide names of the object attachment categories to the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.RegisterMacroNamespaceAttribute">
            <summary>
            Registers a macro namespace within the macro engine
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.RegisterMacroNamespaceAttribute.MarkedType">
            <summary>
            Namespace type
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.RegisterMacroNamespaceAttribute.AllowAnonymous">
            <summary>
            If true, namespace members are allowed to be used also as anonymous
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.RegisterMacroNamespaceAttribute.Name">
            <summary>
            Namespace name
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.RegisterMacroNamespaceAttribute.Hidden">
            <summary>
            If true, the namespace is hidden and doesn't show up in the Intellisense
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.RegisterMacroNamespaceAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Namespace class type</param>
        </member>
        <member name="M:CMS.MacroEngine.RegisterMacroNamespaceAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.StringNamespace">
            <summary>
            Wrapper class to provide static string namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.SystemNamespace">
            <summary>
            Wrapper class to provide basic system namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.UrlNamespace">
            <summary>
            Namespace for url returning macro methods.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.UtilNamespace">
            <summary>
            Wrapper class to provide util namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.IMacroProcessingParameters">
            <summary>
            Represents all possible macro resolving parameters aggregated to one object
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.IMacroProcessingParameters.Signatures">
            <summary>
            Gets dictionary containing identity options for macros
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.IMacroProcessingParameters.MacroProcessingColumnAdapter">
            <summary>
            Column adapter for preprocessing and postprocessing.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.IMacroProcessingParameters.OldSalt">
            <summary>
            Gets old salt value
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.IMacroProcessingParameters.NewSalt">
            <summary>
            Gets new salt value
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.IMacroProcessingParameters.Builder">
            <summary>
            Gets builder appending all resolved macros
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.IMacroProcessingParameters.IdentityOption">
            <summary>
            Gets identity option to be signed with
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroProcessingContext">
            <summary>
            Context for macro processing (context for parsing the text for macro expressions).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.Parameters">
            <summary>
            Custom object parameter passed to the processing handler.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.Replacement">
            <summary>
            Replacement string passed to the macro handler.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.Expression">
            <summary>
            Identified macro expression including all the parameters.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.IsOpenExpression">
            <summary>
            Indicates whether the expression is transformed open expression (condition, loop).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.SourceText">
            <summary>
            Text in which the macro was found.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.MacroStart">
            <summary>
            Start position of the macro (position of starting bracket).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.MacroEnd">
            <summary>
            End of the macro (position after end bracket).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.MacroType">
            <summary>
            Type of the macro ($, %, #, etc.).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingContext.BracketType">
            <summary>
            Type of the bracket - used for backward compatibility when macros could be nested '{(0)% %(0)}'
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessingContext.#ctor">
            <summary>
            Creates a new MacroProcessingContext instance
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessingContext.GetWholeMacroExpression">
            <summary>
            Returns the whole version of the expression created by concatenation of the parameters. The result is for example this: {(0)%test%(0)}.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessingContext.GetOriginalExpression">
            <summary>
            Returns macro expression demarcated by macro start and macro end in entire source text
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessingContext.GetMacroProcessingColumnAdapter">
            <summary>
            Returns the column adapter that is used during processing.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroProcessingParameters">
            <summary>
            Default IMacroProcessingParameters implementation
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingParameters.Signatures">
            <summary>
            Gets hash table containing user signatures
            Can be null
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingParameters.MacroProcessingColumnAdapter">
            <summary>
            Column adapter for preprocessing and postprocessing.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingParameters.OldSalt">
            <summary>
            Gets old salt value
            Can be null
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingParameters.NewSalt">
            <summary>
            Gets new salt value
            Can be null
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingParameters.Builder">
            <summary>
            Gets builder appending all resolved macros
            Can be null
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroProcessingParameters.IdentityOption">
            <summary>
            Gets userName to be signed with
            Can be null
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroProcessor">
            <summary>
            Class providing general macro processing methods.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroProcessor.NOT_RESOLVE">
            <summary>
            Defines a replacement constant for macro processing to not resolve the macro at all
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroProcessor.OnProcessMacro">
            <summary>
            Callback for data macro match.
            </summary>
            <param name="context">Macro processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.ProcessDataMacros(System.String,System.String,CMS.MacroEngine.MacroProcessor.OnProcessMacro)">
            <summary>
            Replaces data macros with given replacement or resolves them if replacement is null.
            </summary>
            <param name="text">Text where the macros will be replaced/resolved</param>
            <param name="replacement">Replacement string</param>
            <param name="processMacro">Callback to handle the macro resolving</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.ProcessDataMacros(System.String,System.String,CMS.MacroEngine.IMacroProcessingParameters,CMS.MacroEngine.MacroProcessor.OnProcessMacro)">
            <summary>
            Replaces data macros with given replacement or resolves them if replacement is null.
            </summary>
            <param name="text">Text where the macros will be replaced/resolved</param>
            <param name="replacement">Replacement string</param>
            <param name="parameters">Custom parameter passed to the callback function</param>
            <param name="processMacro">Callback to handle the macro resolving</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.ProcessMacros(CMS.Base.IDataContainer,CMS.DataEngine.ObjectTypeInfo,System.Func{CMS.MacroEngine.MacroProcessingContext,System.String,System.String},System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Replaces macros with given replacement or resolves them if replacement is null.
            </summary>
            <param name="data">Object to process</param>
            <param name="typeInfo">Object type info of processed object.</param>
            <param name="lambda">Lambda expression called on each macro</param>
            <param name="type">Type of the macro to resolve (if null, all types are resolved).</param>
            <param name="processOpenExpressions">If true, open expressions such as {% if (true) { %} any HTML code {%}%} are processed</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.ProcessMacros(System.String,System.String,CMS.MacroEngine.IMacroProcessingParameters,CMS.MacroEngine.MacroProcessor.OnProcessMacro,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Replaces macros with given replacement or resolves them if replacement is null.
            </summary>
            <param name="text">Text where the macros will be replaced/resolved</param>
            <param name="replacement">Replacement string</param>
            <param name="parameters">Custom parameter passed to the callback function</param>
            <param name="processMacro">Callback to handle the macro resolving</param>
            <param name="type">Type of the macro to resolve (if null, all types are resolved).</param>
            <param name="processOpenExpressions">If true, open expressions such as {% if (true) { %} any HTML code {%}%} are processed</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.IsSupportedType(System.Char)">
            <summary>
            Returns true if the macro type is supported by MacroResolver.
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.DecodeMacros(System.String)">
            <summary>
            HTML decodes macro definitions for given text.
            </summary>
            <param name="inputText">Input text</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.DecodeMacrosEvaluator(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            HTML decode regex evaluator.
            </summary>
            <param name="context">Macro processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveMacros(System.String,System.String)">
            <summary>
            Removes macros from input text. Macros are replaced by specified replacement.
            </summary>
            <param name="inputText">Input text</param>
            <param name="replacement">Replacement string</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.GetMacros(System.String,System.Boolean)">
            <summary>
            Gets the list of macros in the given text.
            </summary>
            <param name="originalText">Text to analyze for macros</param>
            <param name="onlySimpleMacros">If true, only simple macros are returned</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.GetSimpleMacrosHandler(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Handler for GetMacro method (appends macro to the StringBuilder passed in parameters). Appends only simple macros.
            </summary>
            <param name="context">Processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.GetMacrosHandler(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Handler for GetMacro method (appends macro to the StringBuilder passed in parameters).
            </summary>
            <param name="context">Processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.UnescapeParameterValue(System.String)">
            <summary>
            Un escapes the parameter value.
            </summary>
            <param name="value">Value to unescape</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.EscapeParameterValue(System.String)">
            <summary>
            Escapes the parameter value (ensures nested macros within the parameter values are escaped).
            </summary>
            <param name="value">Value to escape</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.BuildMacroParameter(System.String,System.String)">
            <summary>
            Builds the macro parameter.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.BuildMacroParameter(CMS.MacroEngine.MacroIdentityOption)">
            <summary>
            Builds macro parameter from identity option.
            </summary>
            <param name="identityOption">Identity option for which to build the parameter.</param>
            <returns>Macro parameter string.</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveParameter(System.String,System.String)">
            <summary>
            Removes parameter with given name from macro expression (expression should be without brackets {%%}).
            </summary>
            <param name="expression">Macro expression without the type brackets</param>
            <param name="name">Name of the parameter to remove</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveParameter(System.String,System.String,System.String@)">
            <summary>
            Removes parameter with given name from macro expression (expression should be without brackets {%%}).
            </summary>
            <param name="expression">Macro expression without the type brackets</param>
            <param name="name">Name of the parameter to remove</param>
            <param name="value">Value of the removed parameter will be passed here</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveDataMacroBrackets(System.String)">
            <summary>
            Removes data macro brackets {% %} from given text.
            </summary>
            <param name="value">Value to modify</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveLocalizationMacroBrackets(System.String)">
            <summary>
            Removes localization macro brackets {$ $} from given text.
            </summary>
            <param name="value">Value to modify</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveQueryMacroBrackets(System.String)">
            <summary>
            Removes query macro brackets {? ?} from given text.
            </summary>
            <param name="value">Value to modify</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveMacroBrackets(System.String,System.String@)">
            <summary>
            Removes all types macro brackets from given text.
            </summary>
            <param name="value">Value to modify</param>
            <param name="type">Type of macro which was removed</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.RemoveMacroBrackets(System.String,System.String)">
            <summary>
            Removes macro brackets from given text. Macro type is specified in macroChar parameter, e.g. '%' for data macros, '$' for localization macros...
            </summary>
            <param name="value">Value to modify</param>
            <param name="macroChar">Character that specifies macro type</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.EncodeMacro(System.String)">
            <summary>
            Encodes macro to prevent its resolving.
            </summary>
            <param name="macro">Macro definition</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.ContainsMacro(System.String)">
            <summary>
            Returns true if the specified text contains macro.
            </summary>
            <param name="inputText">Text to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.ContainsMacroType(System.String,System.Char)">
            <summary>
            Checks whether given text contains specified macro type
            </summary>
            <param name="inputText">Text to check</param>
            <param name="type">Type of the macro (%, $, ?)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroProcessor.IsLocalizationMacro(System.String)">
            <summary>
            Returns true if given text is in {$xxx$} format.
            Note that this method returns true only if the whole text is localization macro, it is NOT a contains method.
            </summary>
            <param name="text">Text to check</param>
        </member>
        <member name="T:CMS.MacroEngine.ObjectTypeInfoExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ObjectTypeInfoExtensions.GetColumnAdapter(CMS.DataEngine.ObjectTypeInfo,System.String)">
            <summary>
            Returns the column adapter registered for <paramref name="typeInfo"/> column <paramref name="columnName"/>.
            </summary>
            <param name="typeInfo">Object type info.</param>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="T:CMS.MacroEngine.ResolverDefinition">
            <summary>
            Base class for module resolver definitions.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ResolverDefinition.RegisterStringValues(CMS.MacroEngine.MacroResolver,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers string values in the resolver (adds them to values which are already registered).
            Use this only for resolvers for visual components (the values of the properties will be empty strings).
            </summary>
            <param name="resolver">Resolver object</param>
            <param name="names">Names of the macros - values will be accessible by this names in the resolver</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroDebug">
            <summary>
            Class providing debug capabilities of macro engine.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroDebug.mDetailed">
            <summary>
            If true macros are debugged in the detailed mode.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroDebug.Settings">
            <summary>
            Debug settings
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroDebug.Detailed">
            <summary>
            Determines whether the debug provides detailed output.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroDebug.CurrentRequestLog">
            <summary>
            Current request log.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroDebug.DebugCurrentRequest">
            <summary>
            Debug current request Macros operations.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroDebug.CurrentLogIndent">
            <summary>
            Current indentation of the Macros log.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.Init">
            <summary>
            Initializes the MacroDebug
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.GetDebugSettings">
            <summary>
            Gets the debug settings
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.NewLogTable">
            <summary>
            Creates a new table for the security log.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.ReserveMacroLogItem">
            <summary>
            Reserves new item for the macro operation.
            </summary>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.SetLogItemData(System.Data.DataRow,System.String,System.Object,System.Int32,System.Double)">
            <summary>
            Sets the log item result.
            </summary>
            <param name="dr">Macro log item</param>
            <param name="expression">Expression</param>
            <param name="result">Result</param>
            <param name="indent">Indent</param>
             <param name="duration">Duration of the operation</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.LogMacroOperation(System.String,System.Object,System.Int32,System.Double)">
            <summary>
            Logs the macro operation. Logs the security operation to the file and to current request log for debugging.
            </summary>
            <param name="expression">Expression</param>
            <param name="result">Result</param>
            <param name="indent">Indent</param>
             <param name="duration">Duration of the operation</param>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.LogToFile(System.String,System.Object,System.Int32)">
            <summary>
            Logs the macro resolve operation to the log file.
            </summary>
            <param name="expression">Expression</param>
            <param name="result">Result of the macro</param>
            <param name="indent">Indentation</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.LogSecurityCheckFailure(System.String,System.String,System.String,System.String)">
            <summary>
            Logs information that <paramref name="expression"/> failed to evaluate for security reasons.
            </summary>
            <param name="expression">Expression the evaluation of which failed</param>
            <param name="userName">User name, or null.</param>
            <param name="identityName">Macro identity name, or null.</param>
            <param name="effectiveUserName">Effective user name when expression was evaluated under macro identity, or null.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.LogMacroFailure(System.String,System.String,System.String)">
            <summary>
            Logs the failure information.
            </summary>
            <param name="expression">Expression the evaluation of which failed</param>
            <param name="errMessage">Error message to log</param>
            <param name="eventLogCode">Event log code</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroDebug.SettingsReset_Execute(System.Object,CMS.Base.DebugEventArgs)">
            <summary>
            Handles reset of debug settings.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroEventArgs">
            <summary>
            Macro event arguments
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroEventArgs.Resolver">
            <summary>
            Sender (active macro resolver)
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroEventArgs.Expression">
            <summary>
            Expression to resolve
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroEventArgs.FullExpression">
            <summary>
            Full expression including parameters
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroEventArgs.Match">
            <summary>
            Returns true if the macro matches (was resolved)
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroEventArgs.Result">
            <summary>
            Result of the macro
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroResolver">
            <summary>
            Class to resolve the macros, provides data to the resolving process.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="E:CMS.MacroEngine.MacroResolver.OnResolveCustomMacro">
            <summary>
            Custom macro event.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroResolver.GetObjectValueByNameHandler">
            <summary>
            Handler to get the specific column value from specified object.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroResolver.GetObjectValueByIndexHandler">
            <summary>
            Handler to get the value from the index-th property of specified object.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroResolver.OnGetValueEventHandler">
            <summary>
            Handler to get the object value.
            </summary>
        </member>
        <member name="E:CMS.MacroEngine.MacroResolver.OnGetValue">
            <summary>
            Gets value event.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroResolver.UNRESOLVED_RETURN_VALUE">
            <summary>
            Represents unresolved keyword.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroResolver.mDynamicParameters">
            Dynamic parameters used to simulate variables during macro evaluation
        </member>
        <member name="F:CMS.MacroEngine.MacroResolver.mSourceObject">
            Object with source data it's properties are searched for data when CheckDataSource is called
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.#ctor(CMS.MacroEngine.MacroResolver)">
            <summary>
            Creates new instance of <see cref="T:CMS.MacroEngine.MacroResolver"/>
            </summary>
            <param name="parentResolver">Optional parent resolver instance.</param>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.Settings">
            <summary>
            Macro resolver settings.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.ResolverName">
            <summary>
            Resolver name used for context specific resolving.
            </summary>
            <example>
            The macro with resolver parameter e.g. {% CurrentUser.UserName|(resolver)CustomResolverName %} will be resolved only with the same resolver name specified in this property.
            <code>
            var resolver = MacroResolver.CreateChild();
            resolver.ResolverName = "CustomResolverName";
            var result = resolver.ResolveMacros("{% CurrentUser.UserName|(resolver)CustomResolverName %}");
            </code>
            </example>
            <seealso cref="P:CMS.MacroEngine.EvaluationContext.ResolverName"/>.
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.Culture">
            <summary>
            Culture for the resolving
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.SourceObject">
            <summary>
            Object with source data - To pass parameters to Custom macro function.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.ShowOnlyPrioritized">
            <summary>
            If true, only prioritized properties are shown in Macro components (IntelliSense, MacroSelector, ...).
            Influences only visual part of the components, resolver will still be able to resolve all the others as well.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.ActiveMacros">
            <summary>
            Current stack of active macros (macros that are just being resolved)
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.NamedSourceDataPriority">
            <summary>
            Named source data priority. Determines whether the registered item is prioritized within the AutoCompletion and Object tree.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.NamedSourceDataKeys">
            <summary>
            Named source data key collection.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.DynamicParameters">
            <summary>
            Dynamic parameters [Name.ToLowerCSafe()] -> [Value], new for each resolver instance. The data is available with macro {%Name%}
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.Parameters">
            <summary>
            Macro parameters inherited from previous evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroResolver.LastError">
            <summary>
            Last error produced while evaluating macros
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.CheckObjectPermissions(CMS.DataEngine.BaseInfo,CMS.MacroEngine.MacroIdentityOption)">
            <summary>
            Checks whether given identity option has Read permissions for given object type.
            </summary>
            <param name="obj">Object to check</param>
            <param name="identityOption">Identity option against which to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveCurrentPath(System.String,System.Boolean)">
            <summary>
            Resolves the given alias path, applies the path segment to the given format string {0} for level 0.
            </summary>
            <param name="format">Alias path pattern</param>
            <param name="escapeSpecChars">Indicates whether special characters in the automatically added part of path should be escaped for valid SQL LIKE query </param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.Resolve(System.String,CMS.MacroEngine.MacroSettings)">
            <summary>
            Resolves the context macros.
            </summary>
            <param name="inputText">Text to resolve</param>
            <param name="settings">Macro context and settings</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveMacros(System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Resolves the macros.
            </summary>
            <param name="text">Input text with the macros</param>
            <param name="evaluationContext">Evaluation context of previous (parent) macro evaluation</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveMacros(System.String,CMS.MacroEngine.MacroSettings)">
            <summary>
            Resolves all supported macro types in the given text within specified resolving context.
            </summary>
            <param name="text">Input text with macros to be resolved</param>
            <param name="settings">Macro context to be used for resolving (if null, context of the resolver is used)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveMacrosInternal(System.String,System.Int32)">
            <summary>
            Resolves the macros within given text.
            </summary>
            <param name="inputText">Input text</param>
            <param name="recursionLevel">Recursion level</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.AllowResolve(System.String,System.Collections.Generic.ISet{System.String})">
            <summary>
            Returns true if resolving of the macro is allowed. Marks the macro within active macros if the resolving is allowed. Reports a recursion error if not.
            </summary>
            <param name="macro">Macro to check</param>
            <param name="activeMacros">Active macros</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveMacroHandler(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Callback for data macro match. Resolves the macro.
            </summary>
            <param name="context">Macro processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolvePath(System.String,System.Boolean)">
            <summary>
            Resolves the path macro.
            </summary>
            <param name="format">Path format</param>
            <param name="escapeSpecChars">Indicates whether special characters in the automatically added part of path should be escaped for valid SQL LIKE query </param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveCustomMacro(System.String,System.String)">
            <summary>
            Resolves the custom macro.
            </summary>
            <param name="baseExpression">Base expression (without the parameters)</param>
            <param name="fullExpression">Full expression (with the parameters)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveMacroExpression(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Resolves the data macro expression (expects expression without {% %} brackets).
            Use <see cref="M:CMS.MacroEngine.MacroProcessor.RemoveDataMacroBrackets(System.String)"/> method to remove brackets if needed.
            </summary>
            <param name="expression">Macro expression without {% %} brackets</param>
            <param name="keepObjectsAsResult">If true, when the result is InfoObject it is the result, if false, object is resolved as its displayname (for backward compatibility)</param>
            <param name="skipSecurityCheck">If true, security check is not performed</param>
            <param name="type">Type of the expression (? or $ or %)</param>
            <remarks>
            Returns null when macro evaluation throws exception
            </remarks>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.ResolveMacroExpression(CMS.MacroEngine.ResolveExpressionSettings)">
            <summary>
            Resolves the data macro expression (expects expression without {% %} brackets).
            </summary>
            <param name="settings">Settings of the resolving process</param>
            <remarks>
            Returns null when macro evaluation throws exception
            </remarks>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SkippedResolver(System.String)">
            <summary>
            Returns true if the macro processing skipped particular resolver name
            </summary>
            <param name="resolverName">Resolver name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.IsDataItemAvailable(System.String)">
            <summary>
            Checks all the data sources for the value and returns true if the data item is registered.
            </summary>
            <param name="itemName">Name of the data item</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.CheckDataSources(System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Checks all the data sources for the value. Returns true if given data member was found within supported data sources.
            </summary>
            <param name="expression">Data member to look for</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.CheckDataSourcesInternal(System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Checks all the data sources for the value (at first, it checks if it's not special value).
            </summary>
            <param name="expression">Expression</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetObjectValue(System.Object,System.Int32,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Gets the object value at given index (this is called when indexer [(int)] is used in the expression).
            </summary>
            <param name="objectToCheck">Source object to get the index-th value from</param>
            <param name="index">Index of the item to get</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetObjectValue(System.Object,System.String,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Gets the object value of specified name.
            </summary>
            <param name="objectToCheck">Source object to get the index-th value from</param>
            <param name="columnName">Name of the value to get</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.IsSensitiveColumn(System.Object,System.String)">
            <summary>
            Verifies whether columnName is a sensitive column in parentObject.
            </summary>
            <param name="parentObject">Parent object</param>
            <param name="columnName">Name of the column to verify</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.EnsureVirtualResult(CMS.MacroEngine.EvaluationResult,System.Object)">
            <summary>
            Ensures the virtual result in case regular result is not available
            </summary>
            <param name="result">Current result</param>
            <param name="obj">Source object</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.TryGetObjectProperty(CMS.Base.IHierarchicalObject,System.String,System.Object@)">
            <summary>
            Gets the property of particular hierarchical object
            </summary>
            <param name="obj">Object to get the value from</param>
            <param name="columnName">Name of the column</param>
            <param name="result">Returning property value</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.PostProcessResult(System.Object,System.Boolean)">
            <summary>
            If the object is InfoObject, returns its DisplayName column (if exists).
            </summary>
            <param name="result">Result to process</param>
            <param name="allowEnumeration">If true, the process allows enumeration of the result</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.TrackDependencies(System.Object)">
            <summary>
            Tracks the dependencies for the given object
            </summary>
            <param name="obj">Object to track</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.FinalizeObjectValue(System.Object,CMS.MacroEngine.EvaluationResult)">
            <summary>
            Finalizes the object value after get
            </summary>
            <param name="obj">Object</param>
            <param name="result">Current result</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.FinalizeResult(System.Object,System.Boolean,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Finalizes the result (makes the result string).
            </summary>
            <param name="result">Result object</param>
            <param name="processChilden">If true, the children get finalized as well</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.RegisterNamespace(CMS.MacroEngine.IMacroNamespace,System.String,System.Boolean,System.Boolean)">
            <summary>
            Registers a namespace within this macro resolver
            </summary>
            <param name="ns">Namespace object</param>
            <param name="name">Namespace name. If not set, the name is automatically taken from the type name of the namespace object with removed Namespace suffix.</param>
            <param name="allowAnonymous">If true, the namespace members are registered also as anonymous</param>
            <param name="hidden">If true, the namespace is hidden and doesn't show up in the Intellisense</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetDefaultNamespaceName(CMS.MacroEngine.IMacroNamespace)">
            <summary>
            Gets the default namespace name
            </summary>
            <param name="ns">Namespace object</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetHiddenRegisteredDataNames">
            <summary>
            Returns set of registered hidden named data sources (including all hidden named data sources registered in the parent(s) of the resolver, it's an union of keys through the whole hierarchy).
            Includes only hidden sources (which are tracked only in DevelopmentMode)
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetRegisteredDataNames">
            <summary>
            Returns set of registered named data sources (including all named data sources registered in the parent(s) of the resolver, it's an union of keys through the whole hierarchy).
            DOES NOT include prioritized keys (call GetPrioritizedDataNames to get those).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetPrioritizedDataNames">
            <summary>
            Returns set of prioritized named data sources (including all prioritized named data sources registered in the parent(s) of the resolver, it's an union of keys through the whole hierarchy).
            DOES NOT include non-prioritized keys (call GetRegisteredDataNames to get those).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetNamedSourceData(System.String)">
            <summary>
            Gets the named source data by the given selector.
            </summary>
            <param name="selector">Selector</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.NamedSourceDataExists(System.String)">
            <summary>
            Returns true if given source data is known (can be null, but the property has to be registered).
            </summary>
            <param name="selector">Selector</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetNamedSourceData(CMS.MacroEngine.MacroField,System.Boolean)">
            <summary>
            Registers given field as the named source data.
            </summary>
            <param name="field">Field to register</param>
            <param name="isPrioritized">If true, this item will appear at the top of AutoCompletion and ObjectTree</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetNamedSourceData(System.String,System.Object,System.Boolean)">
            <summary>
            Registers the named source data. The data can be accessed with macro {%Selector.ColumnName%}. Selector has to be in identifier format.
            </summary>
            <param name="selector">Data selector</param>
            <param name="data">Data</param>
            <param name="isPrioritized">If true, this item will appear at the top of AutoCompletion and ObjectTree</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetNamedSourceDataCallback(System.String,System.Func{CMS.MacroEngine.EvaluationContext,System.Object},System.Boolean)">
            <summary>
            Registers the named source data with late binding. Callback is called whenever the value is needed by MacroResolver.
            </summary>
            <param name="selector">Data selector</param>
            <param name="callback">Callback function which is called to get the data</param>
            <param name="isPrioritized">If true, this item will appear at the top of AutoCompletion and ObjectTree</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetHiddenNamedSourceData(System.String,System.Object)">
            <summary>
            Registers the named source data with late binding. Callback is called whenever the value is needed by MacroResolver.
            </summary>
            <param name="selector">Data selector</param>
            <param name="data">Data</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetHiddenNamedSourceData(System.String,System.Func{CMS.MacroEngine.EvaluationContext,System.Object})">
            <summary>
            Registers the named source data with late binding. Callback is called whenever the value is needed by MacroResolver.
            </summary>
            <param name="selector">Data selector</param>
            <param name="callback">Callback function which is called to get the data</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetNamedSourceDataInternal(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Registers the named source data. The data can be accessed with macro {%Selector.ColumnName%}. Selector has to be in identifier format.
            </summary>
            <param name="selector">Data selector</param>
            <param name="data">Data</param>
            <param name="isPrioritized">If true, this item will appear at the top of AutoCompletion and ObjectTree</param>
            <param name="hidden">If true, the source will be hidden (will be resolved in the resolving process, but won't be available in IntelliSense or any other macro component)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.PrioritizeProperty(System.String)">
            <summary>
            Prioritizes a property (equivalent to using SetNamedSourceData with last parameter true).
            </summary>
            <param name="propertyName">Name of the property to prioritize</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetNamedSourceData(System.Collections.Hashtable[])">
            <summary>
            Sets hashtable data source to the resolver. Keys of the table are considered names of the data.
            </summary>
            <param name="data">Data to register to the resolver</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetNamedSourceData(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Sets given name-value pairs to the resolver.
            </summary>
            <param name="data">Data to register to the resolver</param>
            <param name="isPrioritized">If true, this item will appear at the top of AutoCompletion and ObjectTree</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.RemoveDynamicParameter(System.String)">
            <summary>
            Removes specified dynamic parameter from the resolver.
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetDynamicParameter(System.String,System.Object)">
            <summary>
            Adds (sets) the new dynamic parameter to the resolver. The data can be accessed with macro {%name%}.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetDynamicParameter(System.String)">
            <summary>
            Returns the dynamic parameter of specified name.
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.AddAnonymousSourceData(System.Object[])">
            <summary>
            Adds new anonymous data source of general type to the resolver.
            </summary>
            <param name="data">Data to register to the resolver</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.SetAnonymousSourceData(System.Object[])">
            <summary>
            Sets (replaces all existing anonymous sources) specified data source (without name) of general type to the resolver.
            </summary>
            <param name="data">Data to register to the resolver</param>
            <remarks>This method must not be used for <see cref="P:CMS.MacroEngine.MacroContext.GlobalResolver"/> instance. Use <see cref="M:CMS.MacroEngine.MacroResolver.AddAnonymousSourceData(System.Object[])"/> instead.</remarks>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetAnonymousSources">
            <summary>
            Returns list of all aggregated anonymous sources (from the whole resolver hierarchy).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.AddSourceAlias(System.String,System.String)">
            <summary>
            Adds alternative source expression.
            </summary>
            <param name="source">Source for which the alternative expression should be created</param>
            <param name="expression">Expression which will be evaluated if the source is not found in base data sources</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetSourceAlias(System.String)">
            <summary>
            Gets the named source data by the given selector.
            </summary>
            <param name="selector">Selector</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.RegisterObjectValueByNameHandler(CMS.MacroEngine.MacroResolver.GetObjectValueByNameHandler[])">
            <summary>
            Registers GetObjectValueByName handler(s) to extend possibilities of MacroEngine to dig values from particular object types.
            These handlers are internally used when a property is requested out of a given object. First the default object types are checked, then all the handlers (the order of the handler evaluation is not guaranteed).
            </summary>
            <param name="handlers">Handler(s) to attach</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.RegisterObjectValueByIndexHandler(CMS.MacroEngine.MacroResolver.GetObjectValueByIndexHandler[])">
            <summary>
            Registers GetObjectValueByName handler(s) to extend possibilities of MacroEngine to dig values from particular object types.
            These handlers are internally used when a property is requested out of a given object. First the default object types are checked, then all the handlers (the order of the handler evaluation is not guaranteed).
            </summary>
            <param name="handlers">Handler(s) to attach</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetInstance(System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:CMS.MacroEngine.MacroResolver"/>.
            </summary>
            <param name="inheritFromGlobalResolver">If true, the resolver will be a child of the GlobalResolver (recommended if you need full feature resolver).</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.CreateChild">
            <summary>
            Creates new instance of <see cref="T:CMS.MacroEngine.MacroResolver"/> as a child resolver that loads the data from the parent resolver by default.
            </summary>
            <remarks><see cref="P:CMS.MacroEngine.MacroResolver.Settings"/> are cloned from parent resolver.</remarks>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.GetDefaultSettingsInstance">
            <summary>
            Creates default settings object
            </summary>
            <returns>New empty settings object with default values</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroResolver.EncapsulateObject(System.Object,CMS.MacroEngine.EvaluationContext)">
            <summary>
            Encapsulates object if needed (DataSet, DataRow, DataTable to their Container equivalent).
            </summary>
            <param name="obj">Object to be encapsulated</param>
            <param name="context">Evaluation context</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroSettings">
            <summary>
            <see cref="T:CMS.MacroEngine.MacroSettings"/> class specifies basic features of a <see cref="T:CMS.MacroEngine.MacroResolver"/>.
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.RelatedObject">
            <summary>
            Related object allows set object used for resolving in macro method. Used in web part properties.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.AllowContextMacros">
            <summary>
            If true, the properties from contexts are not resolved unless explicitly registered.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.EncapsulateMacroObjects">
            <summary>
            If true, the object will be encapsulated to its macro representations.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.KeepUnresolvedMacros">
            <summary>
            If true, unresolved macros are kept in their original form.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.CheckSecurity">
            <summary>
            If true, the security is checked within macro evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.CheckIntegrity">
            <summary>
            If true, the integrity of security parameters is checked within macro evaluation.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.IdentityOption">
            <summary>
            Gets or sets the identity option to be used to verify security when CheckIntegrity is false.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.EvaluationTimeout">
            <summary>
            Expression evaluation timeout in milliseconds. If the evaluation time exceeds this time, evaluation will be aborted and the result will be null.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.DisableContextMacros">
            <summary>
            If true, all the context macros are disabled (only base MacroResolver sources are checked).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.DisablePageContextMacros">
            <summary>
            If true, page context macros are not available (CurrentDocument, CurrentPageInfo).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.DisableContextObjectMacros">
            <summary>
            If true, context objects (such as CMSContext, ...) will not be resolved.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.VirtualMode">
            <summary>
            If true, the virtual mode is enabled for the macro resolver, meaning that the resolver always tries to return non-null values. Instead, empty objects are provided.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.Culture">
            <summary>
            Culture used for the resolving.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.AvoidInjection">
            <summary>
            If true, the resolving of the macros should avoid SQL injection (escapes the apostrophes in output). Default value is false
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.EncodeResolvedValues">
            <summary>
            If true, the resolved macro values are encoded to avoid XSS. Default value is false
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.AllowRecursion">
            <summary>
            If true, the recursion is allowed within the macro resolving. Default value is false.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.MaxRecursionlevel">
            <summary>
            Gets or sets the maximal recursion level.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.TrackCacheDependencies">
            <summary>
            If true, the resolving tracks cache dependencies. Default value is false.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.CacheDependencies">
            <summary>
            Outputs the cache dependencies collected during the processing.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.FileCacheDependencies">
            <summary>
            Outputs the file cache dependencies collected during the processing.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSettings.ExternalTimeoutChecker">
            <summary>
            Gets or sets the function used as timeout watchdog besides EvaluationTimeout setting. Returns true if timeout has occurred.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroSettings.#ctor">
            <summary>
            Initializes a new, empty instance of <see cref="T:CMS.MacroEngine.MacroSettings"/> class.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroSettings.AddFileCacheDependencies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the cache dependencies to the macro context.
            </summary>
            <param name="files">Files to add</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSettings.AddCacheDependencies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the cache dependencies to the macro context.
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSettings.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:CMS.MacroEngine.MacroSettings"/>.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroStaticSettings">
            <summary>
            Class providing static settings of MacroEngine.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroStaticSettings.DEFAULT_EVALUATION_TIMEOUT">
            <summary>
            Default expression evaluation timeout in milliseconds.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroStaticSettings.DEFAULT_MAX_RECURSION_LEVEL">
            <summary>
            Default value for maximal recursion level in expression evaluation.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroStaticSettings.DEFAULT_CULTURE">
            <summary>
            Default culture under which the expression is evaluated.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.EvaluationTimeout">
            <summary>
            Gets or sets default macro evaluation timeout
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.MaxMacroNodes">
            <summary>
            Determines how many properties can be displayed in AutoCompletion and MacroTree controls. Reflects global setting CMSMaxMacroNodes from web.config.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.CaseSensitiveComparison">
            <summary>
            Determines whether the string comparison in macros is case sensitive (unless the |(casesensitive) parameter is used.). Reflects global setting CMSMacrosCaseSensitiveComparison from web.config.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.DisableParameters">
            <summary>
            If true, macro parameters are ignored and not processed (CMSDisableMacroParameters web.config key is reflected), false by default.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowOnlySimpleMacros">
            <summary>
            If true, only simple macros (those which don't need security check) are allowed, all others won't be resolved. If true, CMSTextBox does not add security parameters to macros.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowMacros">
            <summary>
            Allow macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowQueryMacros">
            <summary>
            Allow query macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowContextMacros">
            <summary>
            Allow context macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowCookieMacros">
            <summary>
            Allow cookie macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowDataMacros">
            <summary>
            Allow data macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowLocalizationMacros">
            <summary>
            Allow localization macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowCustomMacros">
            <summary>
            Allow custom macro resolving?
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroStaticSettings.AllowSpecialMacros">
            <summary>
            Allow special macro resolving?
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.ResolveExpressionSettings">
            <summary>
            Class containing settings for macro expression resolving process.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ResolveExpressionSettings.Expression">
            <summary>
            Macro expression without {% %} brackets.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ResolveExpressionSettings.KeepObjectsAsResult">
            <summary>
            If true, when the result is InfoObject it is the result, if false, object is resolved as its displayname (for backward compatibility).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ResolveExpressionSettings.SkipSecurityCheck">
            <summary>
            If true, security check is not performed
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ResolveExpressionSettings.SupressParsingError">
            <summary>
            If true no exceptions during parsing are thrown.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.ResolveExpressionSettings.Type">
            <summary>
            Type of the expression (? or $ or %).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ResolveExpressionSettings.#ctor(System.String)">
            <summary>
            Creates new instance of resolve process settings for given expression.
            </summary>
            <param name="expression">Expression to be resolved</param>
        </member>
        <member name="T:CMS.MacroEngine.IMacroRuleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.MacroEngine.MacroRuleInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroRuleAvailabilityEnum">
            <summary>
            Indicates in which application can the <see cref="T:CMS.MacroEngine.MacroRuleInfo"/> be evaluated.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroRuleAvailabilityEnum.MainApplication">
            <summary>
            Macro rule can be evaluated in the main application (i.e. the implementation of underlying macros is available).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroRuleAvailabilityEnum.MvcLiveSite">
            <summary>
            Macro rule can be evaluated in the MVC live-site (i.e. the implementation of underlying macros is available).
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroRuleAvailabilityEnum.Both">
            <summary>
            Macro rule can be evaluated in both applications (i.e. the implementation of underlying macros is available).
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroRuleInfo">
            <summary>
            MacroRuleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroRuleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroRuleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleID">
            <summary>
            ID of the Macro rule.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleEnabled">
            <summary>
            Indicates whether the Macro rule is enabled or not (determines visibility in macro rule designer).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleIsCustom">
            <summary>
            Indicates whether the Macro rule is custom or defined by CMS (for upgrade purposes).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleName">
            <summary>
            Code name of the Macro rule.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleText">
            <summary>
            Human readable text of the Macro rule (including special macros for parameters).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleDisplayName">
            <summary>
            Human readable text of the Macro rule (without parameters) - displayed in the list of available rules.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleResourceName">
            <summary>
            Name of the resource the rule belongs to.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleRequiredData">
            <summary>
            List of data items (separated with semicolon) required for the rule to be displayed.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleCondition">
            <summary>
            Condition of the rule in K# language (with macros for parameters).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleDescription">
            <summary>
            Description of the macro rule.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleParameters">
            <summary>
            XML defining parameters of the Macro rule.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleLastModified">
            <summary>
            Macor rule last modified.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleGUID">
            <summary>
            Macor rule GUID.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleInfo.MacroRuleAvailability">
            <summary>
            Indicates in which application can the macro rule be evaluated (i.e. the implementation of underlying macros is available).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfo.#ctor">
            <summary>
            Constructor - Creates an empty MacroRuleInfo object.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MacroRuleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroRuleInfoProvider">
            <summary>
            Class providing MacroRuleInfo management.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.#ctor">
            <summary>
            Constructor which enables caching by code name and ID.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRules">
            <summary>
            Returns all macro rules.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRuleInfo(System.Int32)">
            <summary>
            Returns macro rule with specified ID.
            </summary>
            <param name="ruleId">Macro rule ID.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRuleInfo(System.String)">
            <summary>
            Returns macro rule with specified name.
            </summary>
            <param name="ruleName">Macro rule name.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.Set(CMS.MacroEngine.MacroRuleInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.SetMacroRuleInfo(CMS.MacroEngine.MacroRuleInfo)">
            <summary>
            Sets (updates or inserts) specified macro rule.
            </summary>
            <param name="ruleObj">Macro rule to be set.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.Delete(CMS.MacroEngine.MacroRuleInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.DeleteMacroRuleInfo(CMS.MacroEngine.MacroRuleInfo)">
            <summary>
            Deletes specified macro rule.
            </summary>
            <param name="ruleObj">Macro rule to be deleted.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.DeleteMacroRuleInfo(System.Int32)">
            <summary>
            Deletes macro rule with specified ID.
            </summary>
            <param name="ruleId">Macro rule ID.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRulesCondition(CMS.MacroEngine.MacroRuleInfo,System.Collections.Hashtable)">
            <summary>
            Returns condition in K# language from given rule info and parameters.
            </summary>
            <param name="rule">Rule to get the condition from</param>
            <param name="parameters">Parameter values to complete the condition</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRulesInternal">
            <summary>
            Returns all macro rules.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRuleInfoInternal(System.Int32)">
            <summary>
            Returns macro rule with specified ID.
            </summary>
            <param name="ruleId">Macro rule ID.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRuleInfoInternal(System.String)">
            <summary>
            Returns macro rule with specified name.
            </summary>
            <param name="ruleName">Macro rule name.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.SetMacroRuleInfoInternal(CMS.MacroEngine.MacroRuleInfo)">
            <summary>
            Sets (updates or inserts) specified macro rule.
            </summary>
            <param name="ruleObj">Macro rule to be set.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.DeleteMacroRuleInfoInternal(CMS.MacroEngine.MacroRuleInfo)">
            <summary>
            Deletes specified macro rule.
            </summary>
            <param name="ruleObj">Macro rule to be deleted.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleInfoProvider.GetMacroRulesConditionInternal(CMS.MacroEngine.MacroRuleInfo,System.Collections.Hashtable)">
            <summary>
            Returns condition in K# language from given rule info and parameters.
            </summary>
            <param name="rule">Rule to get the condition from</param>
            <param name="parameters">Parameter values to complete the condition</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroRuleParameter">
            <summary>
            Represents a parameter in macro rule.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleParameter.Value">
            <summary>
            Gets or sets the rule parameter value (value inserted to the K# condition instead of the macro).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleParameter.Text">
            <summary>
            Gets or sets the rule parameter text (text displayed in the sentence).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleParameter.DefaultText">
            <summary>
            Gets or sets the default text displayed when the value is empty.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleParameter.Required">
            <summary>
            Indicates if the value of the parameter is required (does not allow empty).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleParameter.ApplyValueTypeConversion">
            <summary>
            Indicates if the text of the parameter was taken from the value.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleParameter.ValueType">
            <summary>
            Type of the value.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroRuleTree">
            <summary>
            Represents a structure of of boolean expressions.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroRuleTree.mParamRegex">
            <summary>
            Regular expression to match the parameters to be resolved
            </summary>
            Groups:                                                  (1:")(2:nam)(3:par )  (4:")
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.Children">
            <summary>
            Gets or sets the child rules.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.Accept(System.Action{CMS.MacroEngine.MacroRuleTree})">
            <summary>
            Accepts an action that gets executed on the whole tree structure.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.Position">
            <summary>
            Gets or sets the relative position of the rule within the parent group.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.Operator">
            <summary>
            Gets or sets operator of the rule.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.RuleText">
            <summary>
            Gets or sets the associated rule text.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.RuleParameters">
            <summary>
            Gets or sets the associated rule parameters xml definition.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.RuleName">
            <summary>
            Gets or sets the associated rule name.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.RuleCondition">
            <summary>
            Gets or sets the associated rule K# condition.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.Parameters">
            <summary>
            Gets or sets the parameters of the rule (null for internal nodes).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.IDPath">
            <summary>
            Returns IDPath of the group.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.Level">
            <summary>
            Returns level of the group.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.IsLeaf">
            <summary>
            Returns true if group is a leaf (expression).
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroRuleTree.HasPreviousSibling">
            <summary>
            Returns true if group has a previous sibling node.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetCondition">
            <summary>
            Returns the condition in K# representing this rule.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.AppendCondition(System.Text.StringBuilder)">
            <summary>
            Appends the whole subtree conditions to given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">String builder to fill with conditions.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.ReplaceParameter(System.Text.RegularExpressions.Match)">
            <summary>
            Replaces the given parameter with its value.
            </summary>
            <param name="m">Regex match</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetXML">
            <summary>
            Returns xml of the rule designer (to store the layout and parameters).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetXMLInternal">
            <summary>
            Returns xml of the rule designer (to store the layout and parameters).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.ValidateParameters">
            <summary>
            Returns list of rules which contain required parameters with empty value.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.LoadFromXml(System.String)">
            <summary>
            Loads MacroRuleTree from xml definition.
            </summary>
            <param name="xml">XML to build the designer from</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetRuleCondition(System.String,System.Boolean)">
            <summary>
            Returns rule as a human readable sentence. If the expression is Rule(...) method than it uses XML for the rule, otherwise returns expression as it is.
            </summary>
            <param name="ruleExpression">Rule expression to render.</param>
            <param name="throwOnError">If true, the process throws an exception in case of parsing error.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetRuleText(System.String,System.Boolean,System.Boolean,System.Func{System.Object,System.Object})">
            <summary>
            Returns rule as a human readable sentence. If the expression is Rule(...) method than it uses XML for the rule, otherwise returns expression as it is.
            </summary>
            <param name="ruleExpression">Rule expression to render.</param>
            <param name="includingMarkup">If true, rule is formatted using HTML markup</param>
            <param name="throwOnError">If true, the exception is thrown in case of error in parsing the expression</param>
            <param name="valueTransformation">Transformation function which is used to further modify the displayed parameter value (used for example to add TimeZones support for date time parameter values)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetRuleText(CMS.MacroEngine.MacroRuleTree,System.Boolean,System.Func{System.Object,System.Object})">
            <summary>
            Returns rule as a human readable sentence.
            </summary>
            <param name="rule">Rule to render</param>
            <param name="includingMarkup">If true, rule is formatted using HTML markup</param>
            <param name="valueTransformation">Transformation function which is used to further modify the displayed parameter value (used for example to add TimeZones support for date time parameter values)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetParameterText(System.String,System.Boolean,System.String,System.String,System.Func{System.Object,System.Object})">
            <summary>
            Processes the text of parameter (handles multivalue parameters separated with new line).
            </summary>
            <param name="paramText">Parameter text</param>
            <param name="includingMarkup">If true, rule is formatted using HTML markup</param>
            <param name="cssClass">Class which will be used (used only when includingMarkup is true), can be null</param>
            <param name="valueType">Type of the parameter text value</param>
            <param name="valueTransformation">Transformation function which is used to further modify the displayed parameter value (used for example to add TimeZones support for date time parameter values)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetSpaces(System.Int32)">
            <summary>
            Returns string of n spaces.
            </summary>
            <param name="n">Number of spaces</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetRoot">
            <summary>
            Returns the root of the rule tree.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.SetParameterValue(System.String,CMS.MacroEngine.MacroRuleParameter)">
            <summary>
            Sets the parameter value.
            </summary>
            <param name="paramName">Name of the parameter</param>
            <param name="parameter">Parameter value</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.AddRule(CMS.MacroEngine.MacroRuleInfo,System.Int32)">
            <summary>
            Adds a new rule as a child of current node. Inserts the rule to the specified position.
            </summary>
            <param name="ruleInfo">Rule to add</param>
            <param name="position">Position of the rule within the group</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.AddRule(CMS.MacroEngine.MacroRuleTree,System.Int32,System.Boolean)">
            <summary>
            Adds a new rule as a child of current node. Inserts the rule to the specified position.
            </summary>
            <param name="rule">Rule subtree to add</param>
            <param name="position">Position of the rule within the group</param>
            <param name="setOperator">If true, operator is set according to previous rule</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.RemoveNode(System.Int32)">
            <summary>
            Adds given group as a new child.
            </summary>
            <param name="position">Relative position within the children collection</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.RemoveNode(System.Int32,System.Boolean)">
            <summary>
            Adds given group as a new child.
            </summary>
            <param name="position">Relative position within the children collection</param>
            <param name="removeParent">If true, parent group will be removed if we removed last item within the group</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.AutoIndent">
            <summary>
            Performs the autoindentation of the expression (according to priority of 'or' and 'and' operators).
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.RemoveBrackets(CMS.MacroEngine.MacroRuleTree)">
            <summary>
            Removes brackets which are not needed.
            </summary>
            <param name="node">Node to process</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.Indent">
            <summary>
            Indents the node with one level.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.Unindent">
            <summary>
            Unindents the node with one level.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.MoveNode(System.String,System.String,System.Int32)">
            <summary>
            Moves the group to given location.
            </summary>
            <param name="sourcePath">Position path of the source</param>
            <param name="targetPath">Position path of the target</param>
            <param name="targetPos">Position within the target</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.GetNodeFromPath(System.String)">
            <summary>
            Returns node from it's ID path.
            </summary>
            <param name="idPath">ID path</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.MoveNode(CMS.MacroEngine.MacroRuleTree,CMS.MacroEngine.MacroRuleTree,System.Int32,System.Boolean)">
            <summary>
            Moves the node within the tree.
            </summary>
            <param name="srcGroup">Source node</param>
            <param name="targetGroup">Target node</param>
            <param name="targetPos">Target position within target group</param>
            <param name="setOperator">If true, operator is set according to previous rule</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroRuleTree.ResetPositions">
            <summary>
            Sets correct positions according to current state.
            </summary>
        </member>
        <member name="T:CMS.MacroEngine.MacroSecurityEventArgs">
            <summary>
            OnCheckObjectPermissions event arguments.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSecurityEventArgs.Result">
            <summary>
            Result of the security check. If true, the security check is allowed.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSecurityEventArgs.Context">
            <summary>
            Evaluation context under which the macro is being resolved.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSecurityEventArgs.ObjectToCheck">
            <summary>
            Object which should be checked.
            </summary>
        </member>
        <member name="P:CMS.MacroEngine.MacroSecurityEventArgs.OnlyCollections">
            <summary>
            If true, only collections should be checked within this permission check request.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityEventArgs.#ctor(CMS.MacroEngine.EvaluationContext,System.Boolean)">
            <summary>
            Creates new instance of event args with given context and default result.
            </summary>
            <param name="context">Evaluation context under which the macro is being resolved</param>
            <param name="defaultResult">Result of the security check. If true, the security check is allowed</param>
        </member>
        <member name="T:CMS.MacroEngine.MacroSecurityProcessor">
            <summary>
            Class providing general macro security parameters processing.
            </summary>
        </member>
        <member name="E:CMS.MacroEngine.MacroSecurityProcessor.OnCheckObjectPermissions">
            <summary>
            Event which is called whenever the security check on object is requested. It's called after the standard check is processed and the result can be overriden with this handler.
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroSecurityProcessor.CheckIntegrity">
            <summary>
            If true, the macro integrity is checked when evaluating macro
            </summary>
        </member>
        <member name="F:CMS.MacroEngine.MacroSecurityProcessor.RegExpComplexMacro">
            <summary>
            Defines a regular expression that detects a complex macro (in case it is matched)
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.AddSecurityParameters(System.String,CMS.MacroEngine.MacroIdentityOption,System.Collections.Generic.IDictionary{System.String,CMS.MacroEngine.MacroIdentityOption},System.String,CMS.DataEngine.IMacroProcessingColumnAdapter)">
            <summary>
            Adds security parameters to every macro.
            </summary>
            <param name="text">Text with macros</param>
            <param name="identityOption">Identity option to sign with</param>
            <param name="signatures">Dictionary with old identity options indexed by expression</param>
            <param name="saltToUse">Salt to use for hash function</param>
            <param name="columnAdapter">Column adapter to use.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.AddSecurityParameter(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Callback for removing parameters from macros.
            </summary>
            <param name="context">Macro processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.AddMacroSecurityParams(System.String,CMS.MacroEngine.MacroIdentityOption,System.String,CMS.DataEngine.IMacroProcessingColumnAdapter)">
            <summary>
            Adds |(hash) and |(user) security parameters to given expression.
            </summary>
            <param name="expression">Macro expression to add the parameters to</param>
            <param name="identityOption">Identity option to sign with</param>
            <param name="saltToUse">Salt to use for hash function</param>
            <param name="columnAdapter">Column adapter to use.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveSecurityParameters(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,CMS.MacroEngine.MacroIdentityOption})">
            <summary>
            Removes security parameters from all macros.
            </summary>
            <param name="text">Text with macros</param>
            <param name="replaceWithHash">If true, macros which contained security information will be returned with hash at the end</param>
            <param name="signatures">Dictionary of identity options indexed by expression to be built while removing security parameters</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveSecurityParameters(System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,CMS.MacroEngine.MacroIdentityOption},System.Boolean)">
            <summary>
            Removes security parameters from all macros.
            </summary>
            <param name="text">Text with macros</param>
            <param name="replaceWithHash">If true, macros which contained security information will be returned with hash at the end</param>
            <param name="signatures">Dictionary of identity options indexed by expression to be built while removing security parameters</param>
            <param name="clearSignatures">If true, <paramref name="signatures"/> dictionary is cleared before text processing</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveSecurityParametersAndAnonymize(System.String,System.Collections.Generic.IDictionary{System.String,CMS.MacroEngine.MacroIdentityOption})">
            <summary>
            Marks all macros int the <paramref name="text"/> as anonymous.
            </summary>
            <param name="text">Text with macros.</param>
            <param name="signatures">Dictionary of identity options indexed by expression to be built while removing security parameters</param>
            <returns>Text with macros without signatures and marked as anonymous.</returns>
            <remarks>This is for internal use only. Do not use it.</remarks>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveSecurityParametersAndAddReplacement(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Callback for marking macros for replacement.
            </summary>
            <param name="context">Macro processing context.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveSecurityParameter(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Callback for removing parameters from macros.
            </summary>
            <param name="context">Macro processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveMacroSecurityParams(System.String,CMS.MacroEngine.MacroIdentityOption@)">
            <summary>
            Removes |(hash) and |(user) or |(identity) security parameters from given expression.
            </summary>
            <param name="expression">Macro expression to remove the parameters from</param>
            <param name="identityOption">Value of the removed identity option parameter (either macro identity name or user name)</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RemoveMacroSecurityParams(System.String,CMS.MacroEngine.MacroIdentityOption@,System.String@)">
            <summary>
            Removes |(hash) and |(user) or |(identity) security parameters from given expression.
            </summary>
            <param name="expression">Macro expression to remove the parameters from</param>
            <param name="identityOption">Value of the removed identity option parameter (either macro identity name or user name)</param>
            <param name="hash">Value of the removed hash parameter</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RefreshSecurityParameters(System.String,System.String,System.String,CMS.DataEngine.IMacroProcessingColumnAdapter)">
            <summary>
            Recreates all the macros signatures according to new specified salt.
            Keeps the owners of the macros untouched (verifies the integrity against old salt).
            </summary>
            <param name="text">Text containing macros</param>
            <param name="oldSalt">Old salt used to generate old signatures (to verify integrity of old macros); if null, the integrity is not checked</param>
            <param name="newSalt">New salt which should be used to generate new signatures</param>
            <param name="columnAdapter">Column adapter to use.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RefreshSecurityParameters(CMS.DataEngine.BaseInfo,CMS.MacroEngine.MacroIdentityOption,System.Boolean,System.String)">
            <summary>
            Loops through all text columns of given info and signs ALL macros (even already signed) with specified identity option.
            </summary>
            <param name="info">Info object to process</param>
            <param name="identityOption">Identity option to sign with</param>
            <param name="saveObject">If set to true, than saves the object to DB if any macro signature has been changed.</param>
            <param name="saltToUse">Salt to use for hash function</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RefreshSecurityParameters(CMS.DataEngine.BaseInfo,System.String,System.String,System.Boolean)">
            <summary>
            Loops through all text columns of given info and recreates all the macros signatures according to new specified salt.
            Keeps the owners of the macros untouched (verifies the integrity against old salt).
            </summary>
            <param name="info">Info object to process</param>
            <param name="oldSalt">Old salt used to generate old signatures (to verify integrity of old macros); if null, the integrity is not checked</param>
            <param name="newSalt">New salt which should be used to generate new signatures</param>
            <param name="saveObject">If set to true, than saves the object to DB if any macro signature has been changed.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.RefreshSecurityParameters(CMS.MacroEngine.MacroProcessingContext)">
            <summary>
            Callback for recreating all the macros signatures according to new specified salt.
            </summary>
            <param name="context">Macro processing context</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.CheckMacroIntegrity(System.String,CMS.MacroEngine.MacroIdentityOption)">
            <summary>
            Checks the integrity against given user.
            </summary>
            <param name="originalExpression">Expression to check</param>
            <param name="expectedIdentityOption">Identity option to check</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.CheckSecurity(CMS.MacroEngine.EvaluationContext,System.Object,System.Boolean)">
            <summary>
            Checks the security of the accessed object.
            </summary>
            <param name="context">Evaluation context</param>
            <param name="obj">Object to check</param>
            <param name="onlyCollection">If true, only collections are checked</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.IsSimpleMacro(System.String)">
            <summary>
            Returns true if the macro is simple and does not need signing.
            </summary>
            <param name="expression">Expression to check</param>
            <returns>Returns true if expression does not contain none of those characters: .[}</returns>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.VerifyMacroExpression(System.String,CMS.MacroEngine.MacroIdentityOption,System.String,System.String)">
            <summary>
            Check macro expression integrity by comparing with <paramref name="hash"/>.
            </summary>
            <param name="macro">Macro expression.</param>
            <param name="identityOption">Identity option by which is the macro expression signed.</param>
            <param name="hash">The macro expression is valid only if the computed hash equals to this hash.</param>
            <param name="salt">Specify to use custom salt when computing hash of given macro expression.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.GetMacroHash(System.String,CMS.MacroEngine.MacroIdentityOption,System.String)">
            <summary>
            Compute hash to ensure macro integrity.
            </summary>
            <param name="macro">Macro expression.</param>
            <param name="identityOption">Identity option by which is the macro expression signed.</param>
            <param name="salt">Specify to use custom salt when computing hash.</param>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.GetHashPhrase(System.String,CMS.MacroEngine.MacroIdentityOption)">
            <summary>
            Gets string containing <paramref name="macro"/> and <paramref name="identityOption"/> for hash computation.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.MacroSecurityProcessor.FormatProcessedMacro(CMS.MacroEngine.MacroProcessingContext,System.String)">
            <summary>
            Returns formatted macro expression
            </summary>
            <param name="context">context having all required values</param>
            <param name="macroExpression">macro expression</param>
        </member>
        <member name="T:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1">
            <summary>
            Wrapper for read-only version of the hierarchical object.
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="objectInstance">Object instance</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterProperty(System.String,System.Object,System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given parameterized property to the object.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="parameter">Parameter for the lambda expression</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterProperty(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterProperty``1(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterColumn(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lambda expression for the getter of the property (object, parameter) => return value</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterColumn``1(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lambda expression for the getter of the property (object, parameter) => return value</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterColumn(System.String,System.Func{`0,System.Object},System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lambda expression for the getter of the property (object, parameter) => return value</param>
            <param name="setLambdaExpr">Lambda expression for the setter of the property (object, parameter, value) => set</param>
        </member>
        <member name="M:CMS.MacroEngine.ReadOnlyMacroObjectWrapper`1.RegisterColumn``1(System.String,System.Func{`0,System.Object},System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lambda expression for the getter of the property (object, parameter) => return value</param>
            <param name="setLambdaExpr">Lambda expression for the setter of the property (object, parameter, value) => set</param>
        </member>
    </members>
</doc>
