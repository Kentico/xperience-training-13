<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.DataEngine</name>
    </assembly>
    <members>
        <member name="T:CMS.DataEngine.AbstractInfoProvider`2">
            <summary>
            Abstract info class provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="initialize">Indicates if provider together with hash tables should be initialized</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.HashtableSettings)">
            <summary>
            Default constructor.
            </summary>
            <param name="settings">Hashtable settings</param>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Get">
            <summary>
            Gets the object query for <typeparamref name="TInfo"/> retrieval.
            </summary>
            <returns>Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> for <typeparamref name="TInfo"/> retrieval.</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Get(System.Int32)">
            <summary>
            Gets an instance of info object based on its ID.
            </summary>
            <param name="id">ID of the info object to look for.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="id"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the ID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetAsync(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its ID.
            </summary>
            <param name="id">ID of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="id"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the ID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Get(System.String)">
            <summary>
            Gets an instance of info object based on its code name.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Get(System.Guid)">
            <summary>
            Gets an instance of info object based on its GUID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetAsync(System.Guid,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its GUID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Get(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on its GUID and site ID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetAsync(System.Guid,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its GUID and site ID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Set(`0)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.Delete(`0)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`2.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfoProvider`3">
            <summary>
            Abstract info class provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoProvider`3.infos">
            <summary>
            Info tables.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.TypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.ProviderObject">
            <summary>
            <para>
            Gets or sets the provider instance.
            </para>
            <para>
            Since the providers are managed by IoC container, setting the provider instance must be performed before the IoC container
            initialization finishes (i.e. during application pre-initialization).
            </para>
            </summary>
            <remarks>
            In unit testing scenarios where IoC container is not available the <c>Fake&lt;TInfo, TProvider&gt;(new TestingProvider());</c>
            method must be used to set the provider instance.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.HashtableSettings">
            <summary>
            Gets hashtable settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.IsValid">
            <summary>
            Indicates if the provider instance is up-to-date and can be used to manage object instances.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.DataSource">
            <summary>
            Data source for the provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.InfoObject">
            <summary>
            Info object instance the provider is working with.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoProvider`3.StoreEmptyValuesInHashtables">
            <summary>
            If true, provider hashtables store empty values for not found objects to reduce database calls
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.#ctor(System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="initialize">Indicates if provider together with hash tables should be initialized</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.HashtableSettings)">
            <summary>
            Default constructor.
            </summary>
            <param name="settings">Hashtable settings</param>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.Init(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.HashtableSettings)">
            <summary>
            Initializes the provider with the given type info and hashtable settings
            </summary>
            <param name="typeInfo">Type info of the objects which the provider manages</param>
            <param name="settings">Hashtable settings for internal provider cache</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.InitTypeInfoAndRegister(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes the provider variables.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CreateInfo(System.Data.DataRow,System.Boolean)">
            <summary>
            Creates a new info object.
            </summary>
            <param name="dr">Data to use to create new object</param>
            <param name="useGenerator">If true, the process allows using the generator to differentiate between particular info types based on data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoById(System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on ID.
            </summary>
            <param name="id">Value of the record ID to look for</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByIdAsync(System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on ID.
            </summary>
            <param name="id">Value of the record ID to look for</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CacheById(System.Int32,`0)">
            <summary>
            Caches info object in the cache or adds a missing object placeholder into the <see cref="P:CMS.DataEngine.ProviderDictionaryCollection.ById"/> cache.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfosByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the list of info objects by their IDs.
            </summary>
            <param name="ids">List of IDs to get</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeName(System.String,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeName(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeNameAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeName(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Group ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeName(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">Indicates if value should be returned from hashtable if hashtables are used</param>
            <param name="searchGlobal">If true, global objects are also searched when site object is not found</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByCodeNameQuery(System.String,System.Int32,System.Int32)">
            <summary>
            Gets an instance of info object based on the given code name from database.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="groupId">Community group ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CacheByCodeName(System.String,`0)">
            <summary>
            Caches info object in the cache or adds a missing object placeholder into the <see cref="P:CMS.DataEngine.ProviderDictionaryCollection.ByCodeName"/> cache.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByFullName(System.String,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given full name.
            </summary>
            <param name="fullName">Full name</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByFullNameInternal(System.String)">
            <summary>
            Gets the info by its full name from the database.
            </summary>
            <param name="fullName">Full name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByGuid(System.Guid,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given GUID.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByGuidAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the given GUID.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CacheByGuid(System.Guid,`0)">
            <summary>
            Caches info object in the cache or adds a missing object placeholder into the <see cref="P:CMS.DataEngine.ProviderDictionaryCollection.ByGuid"/> cache.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByGuid(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByGuidAsync(System.Guid,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByGuidQuery(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on the given GUID from database.
            </summary>
            <param name="guid">GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CacheByGuidAndSite(System.String,`0)">
            <summary>
            Caches info object in the cache or adds a missing object placeholder into the <see cref="P:CMS.DataEngine.ProviderDictionaryCollection.ByGuidAndSite"/> cache.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByColumn``1(System.String,``0)">
            <summary>
            Gets an instance of info object based on the column value.
            </summary>
            <remarks>
            Supposed to be overriden just in <see cref="T:CMS.DataEngine.DataClassInfoProvider"/>
            </remarks>
            <param name="columnName">Column name</param>
            <param name="value">Value to look for</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetInfoByColumnAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the column value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.BulkDelete(CMS.DataEngine.IWhereCondition,CMS.DataEngine.BulkDeleteSettings)">
            <summary>
            Bulk deletes info objects based on the given condition.
            </summary>
            <param name="where">Where condition for the objects which should be deleted.</param>
            <param name="settings">Configuration settings</param>
            <remarks>
            <para>
            Note that the delete process of individual object types within dependencies does not run within transaction. If it fails, some data may be cleared and not rolled back.
            If you require transaction, wrap the call of this method to <see cref="T:CMS.DataEngine.CMSTransactionScope" />.
            </para>
            <para>
            Method is not executing any customizations for remove dependencies routine (custom code in <see cref="M:CMS.DataEngine.BaseInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)"/> or 'removedependencies' query). All customizations must be called prior this method or handled within <see cref="F:CMS.DataEngine.ObjectEvents.BulkDelete"/> event.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:CMS.DataEngine.BulkDeleteSettings.ObjectType"/> cannot be deleted by current provider.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.BulkInsertInfos(System.Collections.Generic.IEnumerable{`0},CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Bulk inserts the given list of info objects.
            </summary>
            <remarks>
            Info object ID is not set during the bulk insert operation.
            </remarks>
            <param name="objects">List of objects</param>
            <param name="settings">Configuration for the bulk insert, e.g. timeout. If null, default configuration is used.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CreateDefaultBulkInsertSettings">
            <summary>
            Creates bulk insert settings. By default <see cref="F:System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints"/>
            and <see cref="F:System.Data.SqlClient.SqlBulkCopyOptions.TableLock"/> flags are set.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.BulkInsertInfos(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Bulk inserts the given list of info objects
            </summary>
            <remarks>
            Info object ID is not set during the bulk insert operation
            </remarks>
            <param name="objects">List of objects</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.SetInfo(`0)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CheckObject(`0)">
            <summary>
            Checks if the given info object is not null. Throws an exception if it is.
            </summary>
            <param name="info">Info object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.ValidateCodeName(`0)">
            <summary>
            Validates the object code name. Returns true if the code name is valid.
            </summary>
            <param name="info">Object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CheckUniqueCodeName(`0)">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
            <param name="infoObj">Info object to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CheckUniqueValues(`0,System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="infoObj">Info object to check</param>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.DeleteInfo(`0)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.BeginTransaction">
            <summary>
            Creates a new transaction over this provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.DeleteDataInternal(CMS.DataEngine.IWhereCondition)">
            <summary>
            Deletes the data in the database based on the given where condition.
            </summary>
            <param name="where">Where condition to filter data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.UpdateData(CMS.DataEngine.IWhereCondition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)">
            <summary>
            Updates the data in the database based on the given where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="values">New values for the data. Dictionary of [columnName] => [value]</param>
            <param name="useAPI">If true, data is updated using the API. If false, with bulk update query</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.BulkUpdateWithQuery(CMS.DataEngine.IWhereCondition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Updates the data based on the given where condition using a database query
            </summary>
            <param name="where">Where condition</param>
            <param name="values">New values for the data. Dictionary of [columnName] => [value]</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.BulkUpdateWithAPI(CMS.DataEngine.IWhereCondition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Updates the data in based on the given where condition using the API
            </summary>
            <param name="where">Where condition</param>
            <param name="values">New values for the data. Dictionary of [columnName] => [value]</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.UpdateData(System.String,CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Updates the data in the database based on the given where condition.
            </summary>
            <param name="updateExpression">Update expression, e.g. "Value = Value * 2"</param>
            <param name="parameters">Parameters</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.UpdateData(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.IWhereCondition)">
            <summary>
            Updates the data in the database based on the given where condition.
            </summary>
            <param name="updateExpression">Update expression, e.g. "Value = Value * 2"</param>
            <param name="parameters">Parameters</param>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CMS#DataEngine#IInternalProvider#GetGeneralObjectQuery(System.Boolean)">
            <summary>
            Gets an object query from the provider
            </summary>
            <param name="checkLicense">If true, the call checks the license</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetObjectQuery(System.Boolean)">
            <summary>
            Gets the object query for the provider
            </summary>
            <param name="checkLicense">If true, the call checks the license</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.ApplySource(`2)">
            <summary>
            If the provider has a data source specified, applies this source to the given query. Returns the modified query.
            </summary>
            <param name="query">Query object to be given the source.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetDeleteQuery">
            <summary>
            Gets the object query that deletes all items matching the query parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.InitHashtableSettings(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.HashtableSettings)">
            <summary>
            Initializes the <see cref="P:CMS.DataEngine.AbstractInfoProvider`3.HashtableSettings"/> based on <paramref name="typeInfo"/> and using <paramref name="settings"/> as default values.
            </summary>
            <param name="typeInfo">Object type information</param>
            <param name="settings">Hashtable settings; if not specified the settings are initialized with <see cref="P:CMS.DataEngine.HashtableSettings.UseWeakReferences"/> set to <c>true</c></param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CMS#DataEngine#IInfoCacheProvider{TInfo}#UpdateObjectInHashtables(`0)">
            <summary>
            Updates the object instance in the hashtables. Updates is different than register, because it logs task about changing object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CMS#DataEngine#IInfoCacheProvider{TInfo}#DeleteObjectFromHashtables(`0)">
            <summary>
            Deletes the object instance from the hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.LoadData(CMS.DataEngine.ProviderDictionaryCollection,System.Object)">
            <summary>
            Loads  the objects.
            </summary>
            <returns>Returns true if the data was not empty</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.LoadObjectsToHashtables(`2,CMS.Base.SafeDictionary{System.Int32,CMS.DataEngine.BaseInfo})">
            <summary>
            Loads the objects from a DataSet to the hashtables
            </summary>
            <param name="query">Source query</param>
            <param name="objectsById">Table where the created objects will be placed [ObjectID -> object]</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.RegisterObjectInHashtables(`0)">
            <summary>
            Registers the object instance within the hashtables.
            </summary>
            <param name="info">Object to register</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.RemoveOriginalCodeNameFromHashtable(`0)">
            <summary>
            Removes the original object code name from the hashtable
            </summary>
            <param name="info">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.UpdateObjectInHashtables(`0)">
            <summary>
            Updates the object instance in the hashtables. Update is different than <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.RegisterObjectInHashtables(`0)"/>, because it logs task about changing object.
            </summary>
            <param name="info">Object to update</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.DeleteObjectFromHashtables(`0)">
            <summary>
            Deletes the object instance from the hashtables.
            </summary>
            <param name="info">Object to delete</param>
            <exception cref="T:System.ArgumentNullException">When info is null</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.LoadInfos">
            <summary>
            Loads all objects from the database to memory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CreateHashtables">
            <summary>
            Creates the provider hashtables
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.LoadAllInfos">
            <summary>
            Loads all infos to the hashtable
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CMS#DataEngine#IInfoCacheProvider#ClearHashtables(System.Boolean)">
            <summary>
            Clears the object's hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.ClearHashtables(System.Boolean)">
            <summary>
            Clears the object's hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.AssertCodeNameColumnExists">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> if the object does not have a code name property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.AssertGuidColumnExists">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> if the object type does not have a GUID property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.SetAsDefaultProvider">
            <summary>
            <para>
            Sets this provider instance as the default provider.
            </para>
            <para>
            Since the providers are managed by IoC container, setting the provider instance must be performed before the IoC container
            initialization finishes (i.e. during application pre-initialization).
            </para>
            </summary>
            <remarks>
            In unit testing scenarios where IoC container is not available the <c>Fake&lt;TInfo, TProvider&gt;(new TestingProvider());</c>
            method must be used to set the provider instance.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CMS#DataEngine#ITestableProvider#GetCurrentProvider">
            <summary>
            Gets the current provider instance
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.SetProviderTo(`1)">
            <summary>
            Sets the provider to the given provider object
            </summary>
            <param name="newProvider">New provider object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CMS#DataEngine#ITestableProvider#ResetToDefault">
            <summary>
            Resets the provider to default implementation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.Invalidate">
            <summary>
            Sets this provider as invalid
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CreateWebFarmTask(System.String,System.String)">
            <summary>
            Creates web farm task specific for current object and action name
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.CreateWebFarmTask(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Creates web farm task specific for current object and action name
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary value</param>
            <param name="filePath">File path</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoProvider`3.ProcessWebFarmTaskInternal(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractProviderDictionary">
            <summary>
            Holds the collection of available provider dictionaries and provides basic set of actions.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:CMS.DataEngine.AbstractProviderDictionary.Dictionaries">
            <summary>
            Collection of all provider dictionaries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractProviderDictionary.EnableHashTables">
            <summary>
            Enable hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.CreateDictionary">
            <summary>
            Creates new instance of dictionary collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.Add(System.String,CMS.DataEngine.IProviderDictionary)">
            <summary>
            Adds dictionary to the collection of all dictionaries.
            </summary>
            <param name="key">Dictionary name.</param>
            <param name="value">Dictionary instance.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.TryGetValue(System.String,CMS.DataEngine.IProviderDictionary@)">
            <summary>
            Gets the dictionary associated with the specified key.
            </summary>
            <param name="key">Dictionary name.</param>
            <param name="value">Dictionary instance.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.GetDictionaryDisplayName(CMS.DataEngine.IProviderDictionary)">
            <summary>
            Gets the dictionary display name
            </summary>
            <param name="dict">Dictionary</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.GetDisplayNameResourceKey(System.String)">
            <summary>
            Gets the display name resource key for the dictionary
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.ReloadDictionaries(System.String,System.Boolean)">
            <summary>
            Reloads the dictionaries of specified object type.
            </summary>
            <param name="objectType">Object type</param>
            <param name="logTasks">If true, the web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.GetDictionaries(System.String)">
            <summary>
            Returns enumerable of provider dictionaries which name starts with defined object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.GetDictionaryName(System.String[])">
            <summary>
            Gets the dictionary name from provided keys.
            </summary>
            <param name="keys">Collection of keys used for name.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractProviderDictionary.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Processes the given web farm task.
            </summary>
            <param name="taskTarget">Task target</param>
            <param name="taskTextData">Task text data</param>
            <param name="taskBinaryData">Task binary data</param>
        </member>
        <member name="T:CMS.DataEngine.ConcurrentDictionaryCacheStorage`2">
            <summary>
            Cache storage based on <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> collection.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ICacheStorage`2">
            <summary>
            Represents required cache storage members.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ICacheStorage`2.Count">
            <summary>
            Gets the number of items in cache.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ICacheStorage`2.Add(`0,`1)">
            <summary>
            Add or update value in cache under specified key.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ICacheStorage`2.Remove(`0)">
            <summary>
            Removes cache item for specified key.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ICacheStorage`2.TryGet(`0,`1@)">
            <summary>
            Gets the cache item associated with specified <paramref name="key"/>.
            </summary>
            <returns><c>true</c> if item was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:CMS.DataEngine.ICacheStorage`2.Clear">
            <summary>
            Clears all items in cache storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ICacheStorage`2.ContainsKey(`0)">
            <summary>
            Indicates whether key is available in cache storage.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MemoryCacheItemPolicy">
            <summary>
            Helper methods and properties related to <see cref="T:System.Runtime.Caching.CacheItemPolicy"/> used for <see cref="T:CMS.DataEngine.MemoryCacheStorage`2"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MemoryCacheItemPolicy.Instance">
            <summary>
            Gets the <see cref="T:CMS.DataEngine.MemoryCacheItemPolicy"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryCacheItemPolicy.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:CMS.DataEngine.MemoryCacheItemPolicy"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryCacheItemPolicy.GetDefaultPolicyWithClearCacheMonitor(System.Runtime.Caching.MemoryCache)">
            <summary>
            Returns <see cref="T:System.Runtime.Caching.CacheItemPolicy"/> with <see cref="F:System.Runtime.Caching.CacheItemPriority.Default"/> priority and cache entry cache monitor attached to <see cref="F:CMS.DataEngine.MemoryCacheItemPolicy.CLEAR_CACHE_ITEM"/> name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MemoryCacheStorageConstants">
            <summary>
            Class containing constants used by <see cref="T:CMS.DataEngine.MemoryCacheStorage`2"/>.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MemoryCacheStorage`2">
            <summary>
            Cache storage based on <see cref="T:System.Runtime.Caching.MemoryCache"/>. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryCacheStorage`2.NormalizeCacheKey(`0)">
            <summary>
            Returns key value as string. Key is lowercased for string key type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryCacheStorage`2.ResetCacheEntryMonitorCacheItem">
            <summary>
            Initialize or Re-initialize cache entry cache monitor.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderDictionary`2">
            <summary>
            Provider dictionary.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Item(`0)">
            <summary>
            Dictionary indexer.
            </summary>
            <param name="key">Object key</param>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Count">
            <summary>
            Items count (all keys).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.IsEmpty">
            <summary>
            Returns true if the Dictionary is empty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.DataIsValid">
            <summary>
            Returns true if the dictionary content is valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Name">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.ColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.LogWebFarmTasks">
            <summary>
            Gets / sets if the dictionary should log web farm tasks
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionary`2.Enabled">
            <summary>
            If true, the dictionary is enabled.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.#ctor(System.String,System.String,System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.ProviderDictionary`2"/>.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="comparer">Equality comparer for the items</param>
            <param name="allowNulls">Indicates whether null value will be considered as valid and will be cached.</param>
            <param name="useWeakReferences">Indicates whether cache item can be removed from cache in case of insufficient memory.</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.#ctor(System.String,System.String,System.Collections.Generic.IEqualityComparer{`0},System.String,System.Boolean,System.Boolean,CMS.Core.IWebFarmService)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.ProviderDictionary`2"/>.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="comparer">Equality comparer for the items</param>
            <param name="customNameSuffix">Suffix used for name identifier. Suffix is required in cases where <paramref name="objectType"/> and <paramref name="columnNames"/> are used for more instances of <see cref="T:CMS.DataEngine.ProviderDictionary`2"/>.</param>
            <param name="allowNulls">Indicates whether null value will be considered as valid and will be cached.</param>
            <param name="webFarmService">Web farm service used for web farm tasks.</param>
            <param name="useWeakReferences">Indicates whether cache item can be removed from cache in case of insufficient memory.</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ConvertKey(System.Object)">
            <summary>
            Converts the key to a specific type
            </summary>
            <param name="key">Key to convert</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Remove(`0)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Delete(`0)">
            <summary>
            Removes the specified object and logs the web farm task.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Remove(`0,System.Boolean)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.CMS#DataEngine#IProviderDictionary#Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Update(`0,`1)">
            <summary>
            Updates the specified object and logs the web farm task.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Add(`0,`1,System.Boolean)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Invalidate(System.Boolean)">
            <summary>
            Invalidates the dictionary content.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.LogWebFarmTask(`0,System.String)">
            <summary>
            Logs the web farm task for specified object key.
            </summary>
            <param name="key">Object key</param>
            <param name="taskOperation">Operation to realize with object</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.LogWebFarmTask(System.String,System.String)">
            <summary>
            Logs the web farm task with specified task data.
            </summary>
            <param name="taskTextData">Task text data</param>
            <param name="taskOperation">Operation to realize with object</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.RemoveInternal(`0)">
            <summary>
            Removes the key from the internal dictionary
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionary`2.TryGetInternal(`0,`1@)">
            <summary>
            Returns true if the internal dictionary contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="T:CMS.DataEngine.ProviderDictionaryCollection">
            <summary>
            Collection of the provider dictionaries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.LoadingType">
            <summary>
            Default loading type of the items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.Name">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ById">
            <summary>
            ID dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByCodeName">
            <summary>
            CodeName dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByFullName">
            <summary>
            FullName dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByGuid">
            <summary>
            Guid dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.ByGuidAndSite">
            <summary>
            Guid and site dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderDictionaryCollection.StringValues">
            <summary>
            String values dictionary.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.#ctor(System.String,CMS.DataEngine.LoadHashtableEnum,System.Action{CMS.DataEngine.ProviderDictionaryCollection,System.Object},System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="loadingType">Loading type</param>
            <param name="loadCallback">Callback function with parameter to load the objects</param>
            <param name="parameter">Additional parameter passed to the <paramref name="loadCallback"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectType"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="loadCallback"/></exception>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.LoadDefaultItems">
            <summary>
            Loads the default items of the dictionaries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderDictionaryCollection.LoadAll">
            <summary>
            Ensures loading of all the items. Keeps the original loading type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProviderInfoDictionary`1">
            <summary>
            <see cref="T:CMS.DataEngine.BaseInfo"/> dictionary.
            </summary>
            <remarks>Uses <see cref="P:System.StringComparer.InvariantCultureIgnoreCase"/> as default comparer for <c>string</c> types.</remarks>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.Add(`0,CMS.DataEngine.BaseInfo,System.Boolean)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.TryGetInternal(`0,CMS.DataEngine.BaseInfo@)">
            <summary>
            Returns true if the internal dictionary contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.ConvertKey(System.Object)">
            <summary>
            Converts the key to a specific type
            </summary>
            <param name="key">Key to convert</param>
            <exception cref="T:System.InvalidOperationException">Thrown when unsupported type is used.</exception>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.TryGetDefaultStringComparer">
            <summary>
            Returns <see cref="P:System.StringComparer.InvariantCultureIgnoreCase"/> if comparer is not defined explicitly and type is string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.#ctor(System.String,System.String,System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnNames">Column names included in the object key (list of columns separated by semicolon)</param>
            <param name="comparer">Equality comparer for the items</param>
            <param name="allowNulls">Indicates whether null value will be considered as valid and will be cached.</param>
            <param name="useWeakReferences">Indicates whether cache item can be removed from cache in case of insufficient memory.</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderInfoDictionary`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IProviderDictionary">
            <summary>
            Exposes required members for access to non-generic implementation of provider dictionary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.Count">
            <summary>
            Items count.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.Name">
            <summary>
            Dictionary name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.ColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IProviderDictionary.DataIsValid">
            <summary>
            Returns true if the dictionary content is valid.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
            <param name="logTasks">If true, logs the web farm tasks</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary.Clear(System.Boolean)">
            <summary>
            Clears all the items.
            </summary>
            <param name="logTasks">If true, logs the web farm tasks</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary.Invalidate(System.Boolean)">
            <summary>
            Invalidates the dictionary content.
            </summary>
            <param name="logTasks">If true, logs the web farm tasks</param>
        </member>
        <member name="T:CMS.DataEngine.IProviderDictionary`2">
            <summary>
            Represents a generic implementation of provider dictionary.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
            <param name="value">Returns the object value if the object is present</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary`2.ContainsKey(`0)">
            <summary>
            Returns true if the table contains specified record.
            </summary>
            <param name="key">Key to check</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary`2.Remove(`0)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="key">Key to remove</param>
        </member>
        <member name="M:CMS.DataEngine.IProviderDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified object.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="T:CMS.DataEngine.LoadHashtableEnum">
            <summary>
            Enumeration of the hashtable loading options.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LoadHashtableEnum.None">
            <summary>
            Do not load any objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LoadHashtableEnum.All">
            <summary>
            Load all objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.HashtableSettings">
            <summary>
            Settings for provider hashtables
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.UseHashtables">
            <summary>
            General flag if hashtables are enabled or not
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.ID">
            <summary>
            If true, ID hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.Name">
            <summary>
            If true, name hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.FullName">
            <summary>
            If true, full name hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.GUID">
            <summary>
            If true, GUID hashtable is used for caching
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.UseWeakReferences">
            <summary>
            If true, weak references are used within hashtables. Use in case the provider handles a lot of objects to allow releasing memory
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HashtableSettings.Load">
            <summary>
            Specifies the way how the hashtable values are initialized
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoProviderCache">
            <summary>
            Holds registered instances of <see cref="T:CMS.DataEngine.IInfoProvider"/> by object type. 
            </summary>
            <seealso cref="T:CMS.DataEngine.InfoProviderLoader"/>
        </member>
        <member name="P:CMS.DataEngine.InfoProviderCache.RegisteredProviders">
            <summary>
            Gets collection of registered providers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderCache.GetInfoProvider(System.String)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.IInfoProvider"/> retrieved from provider cache by given object type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderCache.GetInfoProvider``1(System.String)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.IInfoProvider"/> retrieved from provider cache by given object type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderCache.Register(System.String,CMS.DataEngine.IInfoProvider)">
            <summary>
            Registers specified provider in providers cache
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoProviderLoader">
            <summary>
            Provides functionality for info object provider loading.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoProviderLoader.OnLoadProvider">
            <summary>
            Load provider delegate.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.InfoProviderLoader.LoadProvider">
            <summary>
            Event to load provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderLoader.GetInfoProvider``1(System.String,System.Boolean)">
            <summary>
            Returns provider by its object type.
            </summary>
            <typeparam name="TProvider">Info object provider type</typeparam>
            <param name="objectType">Provider object type</param>
            <param name="exceptionIfNotFound">
            If true, an exception is thrown if the provider is not found.
            If false, the null is returned if provider is not found.
            </param>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderLoader.GetInfoProvider(System.String,System.Boolean)">
            <summary>
            Gets the loaded provider by its object type.
            </summary>
            <param name="objectType">Provider object type</param>
            <param name="exceptionIfNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderLoader.FindInfoProviderType(System.String,CMS.DataEngine.IInfoProvider@,System.Boolean)">
            <summary>
            Finds type of info provider to be registered for <paramref name="objectType"/>. Invokes the <see cref="E:CMS.DataEngine.InfoProviderLoader.LoadProvider"/> event.
            Unlike the <see cref="M:CMS.DataEngine.InfoProviderLoader.GetInfoProvider(System.String,System.Boolean)"/> method this method does not access the <see cref="P:CMS.DataEngine.AbstractInfoProvider`3.ProviderObject"/> property
            and can be used during pre-initialization of the application.
            </summary>
            <param name="objectType">Object type to find provider type for.</param>
            <param name="infoProvider">Instance of info provider for <paramref name="objectType"/> if the provider is supplied via the <see cref="E:CMS.DataEngine.InfoProviderLoader.LoadProvider"/> event. In such a case, return value is null.</param>
            <param name="exceptionIfNotFound">A value indicating whether to throw an exception if no provider type is found (and the <see cref="E:CMS.DataEngine.InfoProviderLoader.LoadProvider"/> event does not load any provider instance). Otherwise, null is returned.</param>
            <returns>Returns provider type to be registered for <paramref name="objectType"/>, or null. In the latter case, the <paramref name="infoProvider"/> might contain a provider instance, if the <see cref="E:CMS.DataEngine.InfoProviderLoader.LoadProvider"/> event loaded any.</returns>
        </member>
        <member name="M:CMS.DataEngine.InfoProviderLoader.CheckResultValidity(System.String,System.Boolean,CMS.DataEngine.IInfoProvider)">
            <summary>
            Checks if result is not empty and valid, otherwise throws an exception or null (based <paramref name="exceptionIfNotFound"/>).
            </summary>
            <param name="objectType">Object type</param>
            <param name="exceptionIfNotFound">Indicates if exception should be thrown</param>
            <param name="provider">Info provider instance</param>
        </member>
        <member name="T:CMS.DataEngine.IBulkOperationProvider">
            <summary>
            Adds bulk operation support to info object provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IBulkOperationProvider.BulkInsertInfos(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Bulk inserts the given list of info objects
            </summary>
            <remarks>
            Info object ID is not set during the bulk insert operation
            </remarks>
            <param name="objects">List of objects</param>
        </member>
        <member name="T:CMS.DataEngine.IFullNameInfoProvider">
            <summary>
            Interface for InfoProvider class which uses full name as info identifier. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IFullNameInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new caching collection for objects addressed by full name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IFullNameInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name.
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoByGuidProvider`1">
            <summary>
            <para>
            Declares a member for retrieval of info objects by their GUID.
            </para>
            <para>
            Use this interface when composing a custom provider interface. A custom provider interface can be associated with the provider using the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/>.
            </para>
            <para>
            The system registers corresponding <typeparamref name="TInfo"/> provider implementation
            under the custom interface into the IoC container as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Unlike with <see cref="T:CMS.DataEngine.IInfoProvider`1"/> the system does not register the provider implementation under this interface (i.e. this interface is designed to be a part of other interfaces).
            </para>
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
            <seealso cref="T:CMS.DataEngine.IInfoByIdProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByNameProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1"/>
        </member>
        <member name="M:CMS.DataEngine.IInfoByGuidProvider`1.Get(System.Guid)">
            <summary>
            Gets an instance of info object based on its GUID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.IInfoByGuidProvider`1.GetAsync(System.Guid,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its GUID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="T:CMS.DataEngine.IInfoByIdProvider`1">
            <summary>
            <para>
            Declares a member for retrieval of info objects by their ID.
            </para>
            <para>
            Use this interface when composing a custom provider interface. A custom provider interface can be associated with the provider using the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/>.
            </para>
            <para>
            The system registers corresponding <typeparamref name="TInfo"/> provider implementation
            under the custom interface into the IoC container as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Unlike with <see cref="T:CMS.DataEngine.IInfoProvider`1"/> the system does not register the provider implementation under this interface (i.e. this interface is designed to be a part of other interfaces).
            </para>
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
            <seealso cref="T:CMS.DataEngine.IInfoByGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByNameProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1"/>
        </member>
        <member name="M:CMS.DataEngine.IInfoByIdProvider`1.Get(System.Int32)">
            <summary>
            Gets an instance of info object based on its ID.
            </summary>
            <param name="id">ID of the info object to look for.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="id"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the ID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.IInfoByIdProvider`1.GetAsync(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its ID.
            </summary>
            <param name="id">ID of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="id"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the ID column.</exception>
        </member>
        <member name="T:CMS.DataEngine.IInfoByNameProvider`1">
            <summary>
            <para>
            Declares a member for retrieval of info objects by their code name.
            </para>
            <para>
            Use this interface when composing a custom provider interface. A custom provider interface can be associated with the provider using the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/>.
            </para>
            <para>
            The system registers corresponding <typeparamref name="TInfo"/> provider implementation
            under the custom interface into the IoC container as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Unlike with <see cref="T:CMS.DataEngine.IInfoProvider`1"/> the system does not register the provider implementation under this interface (i.e. this interface is designed to be a part of other interfaces).
            </para>
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
            <seealso cref="T:CMS.DataEngine.IInfoByIdProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1"/>
        </member>
        <member name="M:CMS.DataEngine.IInfoByNameProvider`1.Get(System.String)">
            <summary>
            Gets an instance of info object based on its code name.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="M:CMS.DataEngine.IInfoByNameProvider`1.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1">
            <summary>
            <para>
            Declares a member for retrieval of info objects by their GUID and site.
            </para>
            <para>
            Use this interface when composing a custom provider interface. A custom provider interface can be associated with the provider using the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/>.
            </para>
            <para>
            The system registers corresponding <typeparamref name="TInfo"/> provider implementation
            under the custom interface into the IoC container as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Unlike with <see cref="T:CMS.DataEngine.IInfoProvider`1"/> the system does not register the provider implementation under this interface (i.e. this interface is designed to be a part of other interfaces).
            </para>
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
            <seealso cref="T:CMS.DataEngine.IInfoByIdProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByNameProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1"/>
        </member>
        <member name="M:CMS.DataEngine.IInfoBySiteAndGuidProvider`1.Get(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on its GUID and site ID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="M:CMS.DataEngine.IInfoBySiteAndGuidProvider`1.GetAsync(System.Guid,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its GUID and site ID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="guid"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the GUID column.</exception>
        </member>
        <member name="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1">
            <summary>
            <para>
            Declares a member for retrieval of info objects by their code name and site.
            </para>
            <para>
            Use this interface when composing a custom provider interface. A custom provider interface can be associated with the provider using the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/>.
            </para>
            <para>
            The system registers corresponding <typeparamref name="TInfo"/> provider implementation
            under the custom interface into the IoC container as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Unlike with <see cref="T:CMS.DataEngine.IInfoProvider`1"/> the system does not register the provider implementation under this interface (i.e. this interface is designed to be a part of other interfaces).
            </para>
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
            <seealso cref="T:CMS.DataEngine.IInfoByIdProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1"/>
            <seealso cref="T:CMS.DataEngine.IInfoByNameProvider`1"/>
        </member>
        <member name="M:CMS.DataEngine.IInfoBySiteAndNameProvider`1.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="M:CMS.DataEngine.IInfoBySiteAndNameProvider`1.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <typeparamref name="TInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when <typeparamref name="TInfo"/> does not have the code name column.</exception>
        </member>
        <member name="T:CMS.DataEngine.IInfoCacheProvider`1">
            <summary>
            Defines methods for type specific info cache operations.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoCacheProvider`1.UpdateObjectInHashtables(`0)">
            <summary>
            Updates the object instance in the hashtables. Updates is different than register, because it logs task about changing object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoCacheProvider`1.DeleteObjectFromHashtables(`0)">
            <summary>
            Deletes the object instance from the hashtables.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IInfoCacheProvider">
            <summary>
            Defines methods for general info cache operations.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoCacheProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clears the object's hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoProvider">
            <summary>
            Interface describing common info object provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfoById(System.Int32)">
            <summary>
            Gets the info by given id.
            </summary>
            <param name="id">ID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfoByGuid(System.Guid)">
            <summary>
            Gets the info by given GUID.
            </summary>
            <param name="guid">GUID of the object</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfoByGuid(System.Guid,System.Int32)">
            <summary>
            Gets the info by given combination of GUID and site id.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfoByName(System.String)">
            <summary>
            Gets the info by given code name.
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfoByName(System.String,System.Int32)">
            <summary>
            Gets the info by given combination of code name and site id.
            </summary>
            <param name="name">Name of the object</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfoByFullName(System.String)">
            <summary>
            Gets the info by given full name.
            </summary>
            <param name="fullName">Full name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider.GetInfosByIds(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the infos by ids collection.
            </summary>
            <param name="ids">IDs of the objects</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoProvider`1">
            <summary>
            <para>
            Declares members for retrieval and manipulation of info objects. The system registers corresponding <typeparamref name="TInfo"/> provider implementation
            under this interface into the IoC container as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Provider types declaring their own interface using the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/> class are registered under that interface as well.
            </para>
            <para>
            To retrieve an instance of the provider use <see cref="M:CMS.Core.Service.Resolve``1"/> or constructor dependency on the interface.
            </para>
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
            <remarks>
            When declaring a custom provider interface, this interface and <see cref="T:CMS.DataEngine.IInfoByIdProvider`1"/>,
            <see cref="T:CMS.DataEngine.IInfoByGuidProvider`1"/>, <see cref="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1"/>, <see cref="T:CMS.DataEngine.IInfoByNameProvider`1"/> or <see cref="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1"/>
            can be used along with other custom members.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider`1.Get">
            <summary>
            Gets the object query for <typeparamref name="TInfo"/> retrieval.
            </summary>
            <returns>Returns <see cref="T:CMS.DataEngine.ObjectQuery`1"/> for <typeparamref name="TInfo"/> retrieval.</returns>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider`1.Set(`0)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.IInfoProvider`1.Delete(`0)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.IInternalProvider">
            <summary>
            Gathers all provider properties and methods which needs to be accessed internally.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInternalProvider.IsValid">
            <summary>
            Indicates if the provider instance is up-to-date and can be used to manage object instances.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInternalProvider.Invalidate">
            <summary>
            Sets this provider as invalid.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInternalProvider.GetGeneralObjectQuery(System.Boolean)">
            <summary>
            Gets an object query from the provider.
            </summary>
            <param name="checkLicense">If true, the call checks the license</param>
        </member>
        <member name="T:CMS.DataEngine.Internal.INotManagedByContainer">
            <summary>
            Marking interface denoting an <see cref="T:CMS.DataEngine.AbstractInfoProvider`2"/> implementation not managed by the IoC container.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Internal.ExtendedDbDataReader">
            <summary>
            <para>
            Marking wrapper for <see cref="T:System.Data.Common.DbDataReader"/>. Replaces the function of the <see cref="M:CMS.DataEngine.DataExtensions.IsFromCMSDatabase(System.Data.DataTable,System.Boolean)"/> method
            and <see cref="F:CMS.DataEngine.SqlHelper.TABLE_IS_FROM_CMS_DB"/> in <see cref="T:System.Data.DataTable"/>'s extended properties.
            </para>
            <para>
            The <see cref="M:CMS.DataEngine.DataExtensions.TrackExternalData(System.Data.DataTable)"/> and <see cref="F:CMS.DataEngine.SqlHelper.TABLE_CONTAINS_EXTERNAL_DATA"/> members do not need a replacement as data reader
            does not allow for modification of its values (unlike <see cref="T:System.Data.DataTable"/>).
            </para>
            </summary>
            <seealso cref="M:CMS.DataEngine.DataExtensions.ContainsExternalData(System.Data.DataTable)"/>
            <seealso cref="P:CMS.Base.DataRecordContainer.IsFromCmsDatabase"/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.Depth">
            <inheritdoc/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.FieldCount">
            <inheritdoc/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.HasRows">
            <inheritdoc/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.IsClosed">
            <inheritdoc/>
        </member>
        <member name="P:CMS.DataEngine.Internal.ExtendedDbDataReader.RecordsAffected">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.#ctor(System.Data.Common.DbDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Internal.ExtendedDbDataReader"/> class.
            </summary>
            <param name="dbDataReader">DB data reader to initialize the extended DB data reader with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dbDataReader"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetBoolean(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetByte(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetDataTypeName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetDateTime(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetDecimal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetFieldType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetFloat(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetGuid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetOrdinal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.GetValues(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.IsDBNull(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.NextResult">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:CMS.DataEngine.Internal.ExtendedDbDataReader.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CMS.DataEngine.Internal.DataTableProvider">
            <summary>
            Provides method for creating <see cref="T:System.Data.DataTable"/> from given collection of <see cref="T:CMS.DataEngine.Internal.IDataTransferObject"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.DataTableProvider.ConvertToDataTable(System.Collections.Generic.IEnumerable{CMS.DataEngine.Internal.IDataTransferObject},System.String)">
            <summary>
            Converts given <paramref name="objects"/> to <see cref="T:CMS.Base.DataTableContainer"/>.
            </summary>
            <param name="objects">Collection of objects to be converted</param>
            <param name="className">Class name specifying schema of the returned <see cref="T:CMS.Base.DataTableContainer"/></param>
            <returns><see cref="T:CMS.Base.DataTableContainer"/> containing values from <paramref name="objects"/></returns>
        </member>
        <member name="T:CMS.DataEngine.Internal.IDataTableProvider">
            <summary>
            Provides method for creating <see cref="T:System.Data.DataTable"/> from given collection of <see cref="T:CMS.DataEngine.Internal.IDataTransferObject"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.IDataTableProvider.ConvertToDataTable(System.Collections.Generic.IEnumerable{CMS.DataEngine.Internal.IDataTransferObject},System.String)">
            <summary>
            Converts given <paramref name="objects"/> to <see cref="T:CMS.Base.DataTableContainer"/>.
            </summary>
            <param name="objects">Collection of objects to be converted</param>
            <param name="className">Class name specifying schema of the returned <see cref="T:CMS.Base.DataTableContainer"/></param>
            <returns><see cref="T:CMS.Base.DataTableContainer"/> containing values from <paramref name="objects"/></returns>
        </member>
        <member name="T:CMS.DataEngine.Internal.IDataTransferObject">
            <summary>
            Specifies data object that can be serialized to <see cref="T:CMS.Base.IDataContainer"/> and used e.g. in bulk insert.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.IDataTransferObject.FillDataContainer(CMS.Base.IDataContainer)">
            <summary>
            Fills given <paramref name="dataContainer"/> with values from current object.
            </summary>
            <param name="dataContainer">Datarow to be filled</param>
        </member>
        <member name="T:CMS.DataEngine.Internal.AbstractCompositeInfo`1">
            <summary>
            Base class for info object which represents a composite info object made of multiple internal info components.
            </summary>
            <remarks>
            <para>
            This class is intended for internal usage only.
            </para>
            <para>
            <see cref="T:CMS.DataEngine.Internal.AbstractCompositeInfo`1"/> does not have its own internal data class for storing data. Data management is ensured by each internal component.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractCompositeInfo`1.DataClass">
            <summary>
            Data class is not used within composite instance. 
            Data is managed by the partial classes of each data part.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when property is used. The <see cref="P:CMS.DataEngine.Internal.AbstractCompositeInfo`1.DataClass"/> property is not internally used within composite instance.</exception>
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractCompositeInfo`1.HasChanged">
            <summary>
            Indicates whether the object changed.
            </summary>   
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractCompositeInfo`1.IsComplete">
            <summary>
            Indicates whether the object has loaded values in all columns.
            </summary>       
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.Internal.AbstractCompositeInfo`1"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.Internal.AbstractCompositeInfo`1"/> with type dependent values initialization.
            </summary>
            <param name="typeInfo">Type information.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor is used to deserialize values.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <exception cref = "T:System.NotSupportedException" >Thrown when constructor is used. Serialization is not support within the scope of abstract class.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Special constructor is used to deserialize values.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.DeserializeComponents(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Deserializes the internal components.
            </summary>
            <param name="info">Serialization info</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">  The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.LoadComponentsData(CMS.Base.IDataContainer)">
            <summary>
            Loads internal components data from the given data source.
            </summary>
            <param name="data">Source data to load.</param>
            <remarks>Method is used when <see cref="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.LoadData(CMS.DataEngine.LoadDataSettings)"/> is called.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.GetComponents">
            <summary>
            Returns collection of internal components.
            </summary>
            <remarks>The order of components must be the same as in <see cref="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.SetComponents(System.Collections.Generic.IEnumerable{CMS.DataEngine.IInfo})"/>.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.SetComponents(System.Collections.Generic.IEnumerable{CMS.DataEngine.IInfo})">
            <summary>
            Sets the collection of internal components from external source.
            </summary>
            <param name="components">Components collection.</param>
            <remarks>
            <para>
            The order of components must be the same as in <see cref="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.GetComponents"/>.
            </para>
            <para>
            Method is used in cases where already existing internal components should be used for new instance of <see cref="T:CMS.DataEngine.Internal.AbstractCompositeInfo`1"/> (cloning, deserialization etc.)
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.CloneComponentsFrom(`0,System.Boolean)">
            <summary>
            Clones the internal components from the given <paramref name="source"/>.
            </summary>
            <param name="source">Source of data</param>
            <param name="clear">If true, the object is cleared to be able to create new object.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ForEachComponent(System.Action{CMS.DataEngine.IInfo})">
            <summary>
            Runs the given action for each internal component.
            </summary>
            <param name="action">Action to make</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object.
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.UpdateDataInternal">
            <summary>
            Updates the object data to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.DeleteDataInternal">
            <summary>
            Deletes the object data from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.InsertDataInternal">
            <summary>
            Inserts the object data to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.UpsertData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
            <exception cref="T:System.NotSupportedException">Upsert is not allowed on a composite object.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.UpsertDataInternal(CMS.DataEngine.WhereCondition)">
            <summary>
            Upserts the data to the database.
            </summary>
            <param name="existingWhere">Existing data where condition</param>
            <exception cref="T:System.NotSupportedException">Upsert is not allowed on a composite object.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Obtains value of given column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Result value</param>
            <returns>Returns <c>true</c> if the operation was successful (the value was present).</returns>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.SetValue(System.String,System.Object)">
            <summary>
            Sets value of the specified column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
            <returns>Returns <c>true</c> if the operation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specific column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.RevertChanges">
            <summary>
            Reverts the object changes and keeps the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.DataChanged(System.String)">
            <summary>
            Indicates whether object was changed.
            </summary>
            <param name="excludedColumns">Collection of columns excluded from change (separated by ';').</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ExecuteWithOriginalData(System.Action)">
            <summary>
            Executes the given action using original data of the object.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ExecuteWithOriginalDataRecursive(System.Collections.Generic.IEnumerator{CMS.DataEngine.IInfo},System.Action)">
            <summary>
            Executes the given action using original data of the object. Recursively wraps all objects from the given enumerator and calls their <see cref="M:CMS.DataEngine.IInfo.ExecuteWithOriginalData(System.Action)"/>.
            </summary>
            <param name="enumerator">Components enumerator.</param>
            <param name="action">Action to execute.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="enumerator"/> is not set.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.GetPropertyType(System.String)">
            <summary>
            Returns the type of given property.
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.ChangedColumns">
            <summary>
            Returns collection of column names which values were changed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object data from given data container defined in <see cref="P:CMS.DataEngine.LoadDataSettings.Data"/>.
            </summary>
            <param name="settings">Data settings</param>
            <remarks><see cref="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.LoadComponentsData(CMS.Base.IDataContainer)"/> is used for data load into the internal components.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractCompositeInfo`1.LoadDefaultData">
            <summary>
            Sets the object default values.
            </summary>
            <remarks>
            This method is not called for objects inherited from <see cref="T:CMS.DataEngine.Internal.AbstractCompositeInfo`1"/>.
            </remarks>
        </member>
        <member name="T:CMS.DataEngine.Internal.AbstractWrapperInfo`1">
            <summary>
            Base class for info object which wraps other info object and is able to add additional capabilities to its members.
            </summary>
            <remarks>
            <para>
            This class is intended for internal usage only.
            </para>
            <para>
            <see cref="T:CMS.DataEngine.Internal.AbstractWrapperInfo`1"/> does not have its own internal data class for storing data. Data management is ensured by each internal info.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.DataClass">
            <summary>
            Data class is not used within wrapper instance. 
            Data is managed by the internal instance.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when property is used. The <see cref="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.DataClass"/> property is not internally used within wrapper instance.</exception>
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.HasChanged">
            <summary>
            Indicates whether the object changed.
            </summary>   
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.IsComplete">
            <summary>
            Indicates whether the object has loaded values in all columns.
            </summary>       
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.TypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Internal.AbstractWrapperInfo`1.WrappedInfo">
            <summary>
            Returns the wrapped info object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.Internal.AbstractWrapperInfo`1"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.Internal.AbstractWrapperInfo`1"/> with type dependent values initialization.
            </summary>
            <param name="typeInfo">Type information.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special constructor is used to deserialize values.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <exception cref = "T:System.NotSupportedException" >Thrown when constructor is used. Serialization is not support within the scope of abstract class.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Special constructor is used to deserialize values.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.DeserializeComponents(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Deserializes the internal components.
            </summary>
            <param name="info">Serialization info</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">  The destination <see cref="T:System.Runtime.Serialization.StreamingContext"/> for this serialization.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object.
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.UpdateDataInternal">
            <summary>
            Updates the object data to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.DeleteDataInternal">
            <summary>
            Deletes the object data from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.InsertDataInternal">
            <summary>
            Inserts the object data to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.UpsertData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
            <exception cref="T:System.NotSupportedException">Upsert is not allowed on a wrapped object.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.UpsertDataInternal(CMS.DataEngine.WhereCondition)">
            <summary>
            Upserts the data to the database.
            </summary>
            <param name="existingWhere">Existing data where condition</param>
            <exception cref="T:System.NotSupportedException">Upsert is not allowed on a composite object.</exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Obtains value of given column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Result value</param>
            <returns>Returns <c>true</c> if the operation was successful (the value was present).</returns>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.SetValue(System.String,System.Object)">
            <summary>
            Sets value of the specified column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
            <returns>Returns <c>true</c> if the operation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specific column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.RevertChanges">
            <summary>
            Reverts the object changes and keeps the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.DataChanged(System.String)">
            <summary>
            Indicates whether object was changed.
            </summary>
            <param name="excludedColumns">Collection of columns excluded from change (separated by ';').</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.ExecuteWithOriginalData(System.Action)">
            <summary>
            Executes the given action using original data of the object.
            </summary>
            <param name="action">Action to execute.</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.EnsureBinaryData">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object when StoreToFileSystem is true.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.GetPropertyType(System.String)">
            <summary>
            Returns the type of given property.
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.ChangedColumns">
            <summary>
            Returns collection of column names which values were changed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.LoadWrappedData(CMS.Base.IDataContainer)">
            <summary>
            Loads wrapped info data from the given data source.
            </summary>
            <param name="data">Source data to load.</param>
            <remarks>Method is used when <see cref="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.LoadData(CMS.DataEngine.LoadDataSettings)"/> is called.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object data from given data container defined in <see cref="P:CMS.DataEngine.LoadDataSettings.Data"/>.
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.LoadDefaultData">
            <summary>
            Sets the object default values.
            </summary>
            <remarks>
            This method is not called for objects inherited from <see cref="T:CMS.DataEngine.Internal.AbstractWrapperInfo`1"/>.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.CheckPermissionsWithHandler(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. Outcome of this method is determined by combining results of CheckPermissions event and CheckPermissionsInternal method.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="currentSiteName">Name of the current context site. Permissions are checked on this site only when the site name cannot be obtained directly from the info object (from SiteIDColumn or site binding).</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.AbstractWrapperInfo`1.InsertAsClone(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="T:CMS.DataEngine.Internal.DefaultDataChildDependency">
            <summary>
            Specifies dependency of an object type on a child object type
            to allow child count re-computation when selecting the default data.
            </summary>
            <remarks>
            This class is for internal use only and should not be used in custom code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.Internal.DefaultDataChildDependency.IdColumn">
            <summary>
            Name of the column which serves as an identifier of master object (parent).
            Usually the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Internal.DefaultDataChildDependency.ChildCountColumn">
            <summary>
            Name of the column within master object (parent) containing count of child objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Internal.DefaultDataChildDependency.ChildObjectType">
            <summary>
            Object type of the child objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Internal.DefaultDataChildDependency.ParentIdColumn">
            <summary>
            Name of the column which identifies referenced parent object within child objects
            (the name of the foreign key column).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.DefaultDataChildDependency.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates new default data child dependency specification.
            </summary>
            <param name="idColumn">Name of the column which serves as an identifier of master object (parent).</param>
            <param name="childCountColumn">Name of the column within master object (parent) containing count of child objects.</param>
            <param name="childObjectType">Object type of the child objects.</param>
            <param name="parentIdColumn">Name of the column which identifies referenced parent object within child objects (the name of the foreign key column).</param>
        </member>
        <member name="T:CMS.DataEngine.Internal.TypeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Type"/> class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.TypeExtensions.FindTypeByGenericDefinition(System.Type,System.Type)">
            <summary>
            Walks type hierarchy of a type towards base classes and looks for <paramref name="genericTypeDefinition"/>.
            Returns the type from <paramref name="type"/>'s class hierarchy whose generic type definition matches <paramref name="genericTypeDefinition"/>.
            </summary>
            <param name="type">Type whose class hierarchy to examine.</param>
            <param name="genericTypeDefinition">Generic type definition to look for.</param>
            <returns>Returns type whose generic type definition matches <paramref name="genericTypeDefinition"/> by examining inheritance hierarchy of <paramref name="type"/>. Returns null if no match is found.</returns>
            <seealso cref="M:System.Type.GetGenericTypeDefinition"/>
            <seealso cref="P:System.Type.IsGenericTypeDefinition"/>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type"/> or <paramref name="genericTypeDefinition"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when type represented by <paramref name="genericTypeDefinition"/> is not a generic type definition.</exception>
        </member>
        <member name="T:CMS.DataEngine.Internal.SettingsMacroContainer">
            <summary>
            Macro container for all settings.
            </summary>
            <remarks>This API supports the framework infrastructure and is not intended to be used directly from your code.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Internal.SettingsMacroContainer.#ctor(System.Int32)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.Internal.SettingsMacroContainer"/>.
            </summary>
            <param name="siteId">Current site id</param>
        </member>
        <member name="P:CMS.DataEngine.Internal.SettingsMacroContainer.Item(System.String)">
            <summary>
            Gets the setting key value based on settings key name.
            </summary>
            <param name="columnName">Setting key name.</param>
            <exception cref="T:System.NotImplementedException">Thrown when setter is used.</exception>
        </member>
        <member name="P:CMS.DataEngine.Internal.SettingsMacroContainer.ColumnNames">
            <summary>
            Gets collection of all available setting keys.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Internal.SettingsMacroContainer.ContainsColumn(System.String)">
            <summary>
            Returns true when setting key is available by specified name.
            </summary>
            <param name="columnName">Setting key name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.SettingsMacroContainer.GetValue(System.String)">
            <summary>
            Gets the setting key value.
            </summary>
            <param name="columnName">Setting key name</param>
        </member>
        <member name="M:CMS.DataEngine.Internal.SettingsMacroContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented method. Throws exception in all cases.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CMS.DataEngine.Internal.SettingsMacroContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets setting key value for specified setting key name.
            </summary>
            <param name="columnName">Setting key name</param>
            <param name="value">Setting key value</param>
            <returns><c>true</c>when setting key was found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:CMS.DataEngine.Internal.SettingsMacroContainer.GetObjectToCheck">
            <summary>
            Gets an object for which to perform the permissions check.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Internal.ProtectedSettings">
            <summary>
            Encapsulates settings that are protected from being configurable or read by users with insufficient privileges.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.Internal.ProtectedSettings.KeyNames">
            <summary>
            Names of the setting that can be configurable or read by users with sufficient privileges.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IRelatedObjectCountProvider">
            <summary>
            Defines info provider which holds count of related object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IRelatedObjectCountProvider.RefreshObjectsCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ITestableProvider">
            <summary>
            Adds testing support to info provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITestableProvider.DataSource">
            <summary>
            Data source for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITestableProvider.GetCurrentProvider">
            <summary>
            Gets the current provider instance
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITestableProvider.ResetToDefault">
            <summary>
            Resets the provider to default implementation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITestableProvider.SetAsTestProvider">
            <summary>
            Sets the provider object as the provider for test.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IWebFarmProvider">
            <summary>
            Adds web farm task processing support to info provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWebFarmProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.DataEngine.IWebFarmProvider.CreateWebFarmTask(System.String,System.String)">
            <summary>
            Creates web farm task specific for current object and action name
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
        </member>
        <member name="M:CMS.DataEngine.IWebFarmProvider.CreateWebFarmTask(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Creates web farm task specific for current object and action name
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary value</param>
            <param name="filePath">File path</param>
        </member>
        <member name="T:CMS.DataEngine.LoadProviderEventArgs">
            <summary>
            Load provider event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadProviderEventArgs.ObjectType">
            <summary>
            Object type for which the provider should be loaded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadProviderEventArgs.Provider">
            <summary>
            Loaded provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadProviderEventArgs.ProviderLoaded">
            <summary>
            Indicates if the provider was loaded by the handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LoadProviderEventArgs.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="objectType">Object type for which the provider should be loaded</param>
        </member>
        <member name="T:CMS.DataEngine.ProviderHelper">
            <summary>
            Helper methods for info providers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderHelper.ALL_SITES">
            <summary>
            All sites constant for the data retrieval.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderHelper.INVALIDATE_COLUMN_NAMES">
            <summary>
            Codename for column names invalidation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProviderHelper.LoadHashTablesSettings">
            <summary>
            Load hashtables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.LoadTables(CMS.DataEngine.ProviderDictionaryCollection)">
            <summary>
            Returns true if the given dictionary collection should be loaded.
            </summary>
            <param name="collection">Collection to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.LoadTables(CMS.DataEngine.IProviderDictionary[])">
            <summary>
            Returns true if the given dictionaries should be loaded.
            </summary>
            <param name="dictionaries">Dictionaries to check</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.LoadHashTables(System.String,CMS.DataEngine.LoadHashtableEnum)">
            <summary>
            Returns true if the hashtables for specified object type should be loaded with the data.
            Reflects the AppSettings key "CMSLoadHashtables" + objectType.Replace(".", ""), e.g. CMSLoadHashtablesCMSUser.
            </summary>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value in case the key is not present in the web.config file</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.UseHashtableWeakReferences(System.String,System.Boolean)">
            <summary>
            Returns true if the hashtable for the specified object type should use weak references.
            </summary>
            <remarks>
            Reflects the AppSettings configuration.
            At first AppSettings key "CMSUseHashtableWeakReferencesAll" + tableName is searched.
            At second AppSettings key "CMSUseHashtableWeakReferences" + objectType.Replace(".", "") + tableName is searched.
            </remarks>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.UseHashtableWeakReferencesInternal(System.String,System.Boolean)">
            <summary>
            Returns true if the hashtable for the specified object type should use weak references.
            Reflects the AppSettings key "CMSUseHashtableWeakReferences" + objectType.Replace(".", ""), e.g. CMSUseHashtableWeakReferencesCMSUser.
            </summary>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.UseHashtable(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the hashtable for the specified object type should be used.
            </summary>
            <remarks>
            Reflects the AppSettings configuration.
            At first AppSettings key "CMSUseHashtableAll" + tableName is searched.
            At second AppSettings key "CMSUseHashtable" + objectType.Replace(".", "") + tableName is searched.
            </remarks>
            <param name="objectType">Object type</param>
            <param name="tableName">Table name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.UseHashtableInternal(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the hashtable for the specified object type should be used. 
            Reflects the AppSettings key "CMSUseHashtable" + objectType.Replace(".", "") + tableName, e.g. CMSUseHashtableCMSUserID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="tableName">Table name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfoById(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the info by its type and ID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">ID of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the object type is not found. If false, the null is returned if the object type is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfosByIds(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the info by its type and ID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="ids">IDs of the objects</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfoByName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the info by its type and code name from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="name">Name of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfoByName(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the info by its type and code name from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="name">Name of the object</param>
            <param name="siteId">Site ID</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfoByFullName(System.String,System.String,System.Boolean)">
            <summary>
            Gets the info by its type and full name from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="fullName">Full name of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfoByGuid(System.String,System.Guid,System.Boolean)">
            <summary>
            Gets the info by its type and GUID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="guid">GUID of the object</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetInfoByGuid(System.String,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Gets the info by its type and GUID from the appropriate provider.
            </summary>
            <param name="objectType">Object type</param>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="exceptionIfObjTypeNotFound">If true, an exception is thrown if the provider is not found. If false, the null is returned if provider is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetCodeName(System.String,System.Int32)">
            <summary>
            Gets the code name by the given ID
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.GetId(System.String,System.String)">
            <summary>
            Gets the ID by the given code name
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Object code name</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.ClearHashtables(System.String,System.Boolean)">
            <summary>
            Clears hashtables for given object type.
            </summary>
            <param name="objectType">Type of the object</param>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.ClearAllHashtables(System.Boolean)">
            <summary>
            Clears up hashtables of every single provider object present in the list.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ProviderHelper.InvalidateProvider(System.String)">
            <summary>
            Invalidates specific provider.
            </summary>
            <param name="objectType">Type of the object</param>
        </member>
        <member name="T:CMS.DataEngine.ProviderInterfaceAttribute">
            <summary>
            <para>
            Attribute specifying a custom provider interface to be associated with an implementation of <see cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>.
            </para>
            <para>
            The system registers the info provider implementation under the <see cref="T:CMS.DataEngine.IInfoProvider`1"/> interface into the IoC container
            as part of the <see cref="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)"/> method.
            </para>
            <para>
            Declare a custom provider interface whenever the default <see cref="T:CMS.DataEngine.IInfoProvider`1"/> interface does not suit the provider needs. The system
            registers the info provider under the custom interface as well.
            </para>
            </summary>
            <remarks>
            When declaring a custom provider interface, <see cref="T:CMS.DataEngine.IInfoProvider`1"/>, <see cref="T:CMS.DataEngine.IInfoByIdProvider`1"/>,
            <see cref="T:CMS.DataEngine.IInfoByGuidProvider`1"/>, <see cref="T:CMS.DataEngine.IInfoBySiteAndGuidProvider`1"/>, <see cref="T:CMS.DataEngine.IInfoByNameProvider`1"/> or <see cref="T:CMS.DataEngine.IInfoBySiteAndNameProvider`1"/>
            can be used along with other custom members.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ProviderInterfaceAttribute.ProviderInterface">
            <summary>
            Gets the provider interface to be associated with provider implementation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProviderInterfaceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/> class using the <paramref name="providerInterface"/> given.
            </summary>
            <param name="providerInterface">Provider interface to be associated with provider implementation.</param>
        </member>
        <member name="T:CMS.DataEngine.Providers`1">
            <summary>
            Provides access to info provider instance via a static property (<see cref="P:CMS.DataEngine.Providers`1.InternalProvider"/>).
            Encapsulates unit testing abstraction for provider faking.
            </summary>
            <typeparam name="TInfo">Type of info object managed by the provider.</typeparam>
        </member>
        <member name="P:CMS.DataEngine.Providers`1.TestingProvider">
            <summary>
            Gets or sets the provider used in unit testing.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Providers`1.InternalProvider">
            <summary>
            Gets the provider for <typeparamref name="TInfo"/> management. Returns the <see cref="P:CMS.DataEngine.Providers`1.TestingProvider"/> when set.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LastErrorLogger">
            <summary>
            Logs last application error.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LastErrorLogger.LogLastApplicationError">
            <summary>
            Logs the last application error.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ApplicationInitException">
            <summary>
            Thrown when application initialization failed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ApplicationInitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.ApplicationInitException"/> class with default values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ApplicationInitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.ApplicationInitException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:CMS.DataEngine.ApplicationInitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.ApplicationInitException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CMS.DataEngine.CMSApplication">
            <summary>
            Base class for CMS Application
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.WaitForDatabaseAvailable">
            <summary>
            If true, the process without the database available waits for the database instead of attempting to redirect to DB installation wizard. Use this for background applications such as services, that start automatically prior to the installation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSApplication.EnsureDefaultDBSchema">
            <summary>
            If true, the application ensures the default schema for the user upon its initialization. Use this setting for Windows authentication on DB server with automatic default schema.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationStart">
            <summary>
            Date and time of the application start.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationStartFinished">
            <summary>
            Date and time when the application start (initialization) finished its execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationInitialized">
            <summary>
            Defines the state whether the application is initialized. If true, the application was initialized correctly. If false, the application was initialized with an error. If null, the initialization is to be done.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.ApplicationErrorMessage">
            <summary>
            Connection error message.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.RecoveryTime">
            <summary>
            The time when the application should try to recover itself from initialization failure.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSApplication.RetryInitTime">
            <summary>
            The time when the application attempts to retry the initialization to recover itself from initialization failure in early stages.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.#cctor">
            <summary>
            Static constructor - Initialization code
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.CurrentDomain_ProcessExit(System.Object,System.EventArgs)">
            <summary>
            Runs the actions when the application exits
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.PreInit">
            <summary>
            Performs the application pre-initialization thus collects services for the IoC container and builts the service provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.PreInit(System.Boolean)">
            <summary>
            Performs the application pre-initialization, collects services to IoC container but does not built the container.
            </summary>
            <param name="initializeContainer">Decides whether IoC container will be initialized.</param>
            <returns>Returns true, if the application was pre-initialized during this call.</returns>
            <seealso cref="M:CMS.Core.Service.InitializeContainer"/>
            <seealso cref="M:CMS.Core.IoCContainer.SetServiceProvider(System.IServiceProvider)"/>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.Init">
            <summary>
            Performs the application initialization on the first request.
            </summary>
            <returns>Returns true, if the application was initialized during this call.</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ReInitAppState">
            <summary>
            Reinitializes the application state
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.PostStart(System.Object,System.EventArgs)">
            <summary>
            Runs the application post start event in case it wasn't run already
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.PostStart">
            <summary>
            Runs the application post start event in case it wasn't run already
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.RaisePostStart">
            <summary>
            Raises the application post start event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ApplicationError">
            <summary>
            Raises the application error event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ApplicationEnd">
            <summary>
            Raises the application end event to properly end the application
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.GetVaryByCustomString(CMS.Base.GetVaryByCustomStringEventArgs)">
            <summary>
            Calls registered event <see cref="F:CMS.Base.ApplicationEvents.GetVaryByCustomString"/>
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.ReportApplicationInitError(System.String)">
            <summary>
            Reports the application error
            </summary>
            <param name="message">Error message to report</param>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.AllowRecovery">
            <summary>
            When called, the application is allowed to recover by application restart
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.AllowRetryInit">
            <summary>
            When called, the application is allowed to retry the initialization
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.RecoverFromFailedInitialization">
            <summary>
            Attempts to perform the application recovery from a failed initialization
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.InstallRedirect(System.Boolean)">
            <summary>
            Redirects user to the installation page if connectionString not set.
            </summary>
            <param name="forceRedirect">If true, the redirect is forced</param>
        </member>
        <member name="M:CMS.DataEngine.CMSApplication.IsInstallerExcluded(System.String)">
            <summary>
            Returns true if the path is excluded for the installer process.
            </summary>
            <param name="path">Path to check</param>
        </member>
        <member name="T:CMS.DataEngine.CMSHttpApplication">
            <summary>
            Envelope class with request mappings for HttpApplication class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Application_Error(System.Object,System.EventArgs)">
            <summary>
            Application error event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Application_End(System.Object,System.EventArgs)">
            <summary>
            Application end event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Session_Start(System.Object,System.EventArgs)">
            <summary>
            Session start event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.Session_End(System.Object,System.EventArgs)">
            <summary>
            Session end event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)">
            <summary>
            Custom cache parameters processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.InitApplication(System.Reflection.Assembly)">
            <summary>
            Initialize CMS application from a web-based environment.
            </summary>
            <remarks>
            <para>
            This method is not intended to be used in custom code.
            </para>
            <para>
            Application start ensures that the <see cref="M:CMS.DataEngine.CMSApplication.PreInit"/> and <see cref="M:CMS.DataEngine.CMSApplication.Init"/> methods are called.
            </para>
            </remarks>
            <param name="webProjectAssembly">Web project assembly.</param>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.SessionStart">
            <summary>
            Fires the session start event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.SessionEnd">
            <summary>
            Fires the session end event
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSHttpApplication.HandleExceptionRedirect(System.Exception)">
            <summary>
            Redirects to a page by exception type thrown during Init in <see cref="T:CMS.DataEngine.CMSApplication"/>
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AsyncProcessData">
            <summary>
            Control messages
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.mData">
            <summary>
            Table of the worker messages.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.ProcessGUID">
            <summary>
            Process GUID
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.Information">
            <summary>
            Information message
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.Warning">
            <summary>
            Warning message
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.CancelledInfo">
            <summary>
            Canceled information message
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.Data">
            <summary>
            General process data
            </summary>
            <remarks>
            Use serializable objects marked with <see cref="T:System.SerializableAttribute" /> or implementing <see cref="T:System.Runtime.Serialization.ISerializable" /> interface
            Otherwise set <para>AllowUpdateThroughPersistentMedium</para> to false
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.Parameter">
            <summary>
            Async process parameter
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.AllowUpdateThroughPersistentMedium">
            <summary>
            If true, data can be serialized to persistent medium (e.g. shared storage on Azure).
            If false, data will be not shared across non-sticky instances.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.Status">
            <summary>
            Worker status
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncProcessData.mStatusFile">
            <summary>
            Worker status file, not serialized, keeps the reference to the database storage
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.LoadPropertiesFrom(CMS.DataEngine.AsyncProcessData)">
            <summary>
            Loads the properties from another data object
            </summary>
            <param name="data">Data to load</param>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data for serialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.GetDataForProcess(System.Guid)">
            <summary>
            Gets the data for process with the given process GUID
            </summary>
            <param name="processGuid">Process GUID</param>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.SaveToPersistentMedium">
            <summary>
            Saves the process data to a persistent storage if the application runs on web farm
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.IsSharedStorageEnabled">
            <summary>
            Returns true when shared storage is enabled
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.UpdateStatusFromPersistentMedium">
            <summary>
            Updates the process status from a persistent storage if the application runs on web farm
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.UpdateFromPersistentMedium">
            <summary>
            Updates the process data from a persistent storage if the application runs on web farm
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncProcessData.Serialize">
            <summary>
            Serializes the object
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AsyncAction">
            <summary>
            Action event delegate.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AsyncWorker">
            <summary>
            Worker class for asynchronous operations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mAction">
            <summary>
            Action to run.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mThread">
            <summary>
            Async thread.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mLastException">
            <summary>
            Last exception.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mProcessGUID">
            <summary>
            Process GUID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mWindowsIdentity">
            <summary>
            Windows identity.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mWaitForFinish">
            <summary>
            If true, the process waits for finishing.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorker.mProcessData">
            <summary>
            Async process data
            </summary>
        </member>
        <member name="E:CMS.DataEngine.AsyncWorker.OnError">
            <summary>
            On error event handler.
            </summary>
        </member>
        <member name="E:CMS.DataEngine.AsyncWorker.OnFinished">
            <summary>
            On finished event handler.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AsyncWorker.ProcessData">
            <summary>
            Process messages
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AsyncWorker.Thread">
            <summary>
            Running thread of the worker
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AsyncWorker.Status">
            <summary>
            Worker status.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AsyncWorker.LastException">
            <summary>
            Last exception.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AsyncWorker.ProcessGUID">
            <summary>
            Process GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AsyncWorker.Parameter">
            <summary>
            Parameter.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.Reset">
            <summary>
            Resets the worker.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.Stop">
            <summary>
            Stops the process.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.WaitForFinish">
            <summary>
            Sets the process to wait until the process finishes (sets the waiting flag). Call from the OnFinished event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.HasFinished">
            <summary>
            Resets the waiting flag for the operation finish.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.RunAsync(CMS.DataEngine.AsyncAction,System.Security.Principal.WindowsIdentity)">
            <summary>
            Runs the action in an asynchronous thread.
            </summary>
            <param name="action">Action callback to run</param>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.AttachToThread(CMS.Base.CMSThread)">
            <summary>
            Attaches to existing thread
            </summary>
            <param name="thread">Thread</param>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AsyncWorker.SetException(System.Exception)">
            <summary>
            Performs actions necessary to handle exception.
            </summary>
            <param name="ex">Exception to handle</param>
            <returns>Error status</returns>
        </member>
        <member name="T:CMS.DataEngine.AsyncWorkerStatusEnum">
            <summary>
            Async worker status enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorkerStatusEnum.Stopped">
            <summary>
            Process stopped.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorkerStatusEnum.Running">
            <summary>
            Process running.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorkerStatusEnum.Finished">
            <summary>
            Process finished.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorkerStatusEnum.Error">
            <summary>
            Error occurred.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorkerStatusEnum.WaitForFinish">
            <summary>
            Process waits for being finished.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AsyncWorkerStatusEnum.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfoBase`1">
            <summary>
            ClassInfo data container class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassID">
            <summary>
            Class ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassDisplayName">
            <summary>
            Class display name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassUsesVersioning">
            <summary>
            Class uses versioning
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsDocumentType">
            <summary>
            Class is document type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsCoupledClass">
            <summary>
            Class is coupled class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassXmlSchema">
            <summary>
            Class xml schema
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassFormDefinition">
            <summary>
            Class form definition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassNodeNameSource">
            <summary>
            Class node name source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassTableName">
            <summary>
            Class table name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassFormLayout">
            <summary>
            Class form layout
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassShowAsSystemTable">
            <summary>
            Class show as system table
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassUsePublishFromTo">
            <summary>
            Class use publish from to
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassShowTemplateSelection">
            <summary>
            Class show template selection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsMenuItemType">
            <summary>
            Class is menu item type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassNodeAliasSource">
            <summary>
            Class node alias source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassLastModified">
            <summary>
            Class last modified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassGUID">
            <summary>
            Class GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsProduct">
            <summary>
            Class is product
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUDefaultDepartmentName">
            <summary>
            Class SKU default department name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUDefaultDepartmentID">
            <summary>
            Class SKU default department ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSKUDefaultProductType">
            <summary>
            Class SKU default product type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsCustomTable">
            <summary>
            Class is custom table
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassShowColumns">
            <summary>
            Class show columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchTitleColumn">
            <summary>
            Class search title column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchContentColumn">
            <summary>
            Class search content column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchImageColumn">
            <summary>
            Class search image column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchCreationDateColumn">
            <summary>
            Class search creation date column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchSettings">
            <summary>
            Class search settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchIndexDataSource">
            <summary>
            Class search index data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassInheritsFromClassID">
            <summary>
            Class inherits from class ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassConnectionString">
            <summary>
            Class connection string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassSearchEnabled">
            <summary>
            Class search enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassContactMapping">
            <summary>
            Class contact mapping
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassContactOverwriteEnabled">
            <summary>
            Class contact overwrite enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsProductSection">
            <summary>
            Class is product section
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassFormLayoutType">
            <summary>
            Class form layout type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassVersionGUID">
            <summary>
            Class version GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassDefaultObjectType">
            <summary>
            Class default object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsForm">
            <summary>
            Class is form
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassResourceID">
            <summary>
            Class resource ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassCustomizedColumns">
            <summary>
            Class customized columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassCodeGenerationSettings">
            <summary>
            Class code generation settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassURLPattern">
            <summary>
            URL pattern used for page types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassUsesPageBuilder">
            <summary>
            Class uses page builder feature. Used for page types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassIsNavigationItem">
            <summary>
            Class is navigation item. Used for page types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassHasURL">
            <summary>
            Class uses URL feature. Used for page types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoBase`1.ClassHasMetadata">
            <summary>
            Class has metadata feature. Used for page types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Creates an empty ClassInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClassInfo object from the given DataRow.
            </summary>
            <param name="typeInfo">Type info</param>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfo">
            <summary>
            Describes Data Class configuration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE">
            <summary>
            Main object type to cover all class types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE_SYSTEMTABLE">
            <summary>
            Object type for system table (customizable module class)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.ExcludedStagingColumns">
            <summary>
            Columns excluded from staging
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFO">
            <summary>
            Type information for class covering all classes
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.TYPEINFOSYSTEMTABLE">
            <summary>
            Type information for system table (customizable module class)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.mSchemaDataSet">
            <summary>
            Source schema dataset.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfo.EXTERNAL_COLUMN_CODE">
            <summary>
             External column name for Form Layout
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.SearchColumnsTypes">
            <summary>
            Dictionary containing <see cref="T:System.Type"/>s of search columns that belongs to class represented by this <see cref="T:CMS.DataEngine.DataClassInfo"/>.
            </summary>
            <seealso cref="M:CMS.DataEngine.DataClassInfo.GetSearchColumnType(System.String)"/>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassXmlSchema">
            <summary>
            Class xml schema
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassSearchSettings">
            <summary>
            Class search settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassCodeGenerationSettings">
            <summary>
            Class code generation settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassFormLayoutType">
            <summary>
            Class form layout type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.SchemaDataSet">
            <summary>
            Schema dataset.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassSearchSettingsInfos">
            <summary>
            Gets the SearchSettings infos object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.ClassCodeGenerationSettingsInfo">
            <summary>
            Gets or sets the code generation settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor">
            <summary>
            Constructor - Creates an empty ClassInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor(System.Boolean)">
            <summary>
            Constructor, creates an empty DataClassInfo structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClassInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetChildWhereCondition(CMS.DataEngine.WhereCondition,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetSearchIndexColumns">
            <summary>
            Returns all columns along with their types that should be included in the search index for current <see cref="T:CMS.DataEngine.DataClassInfo"/>.
            </summary>
            <seealso cref="M:CMS.DataEngine.DataClassInfo.GetSearchColumnType(System.String)"/>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetSynchronizedColumns(System.Boolean)">
            <summary>
            Gets the list of synchronized columns for this object.
            </summary>
            <param name="excludeColumns">When true values is passed, columns from <see cref="P:CMS.DataEngine.SynchronizationSettings.ExcludedStagingColumns"/> are removed</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.IsFullySynchronized">
            <summary>
            Returns true if the class is fully synchronized with all its data and fields including the system fields
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.CanSynchronizeClass(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the given class object can be synchronized
            </summary>
            <param name="classObj">Class object</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetClonedColumns(System.String)">
            <summary>
            Returns list of columns used during object cloning.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetDataSet">
            <summary>
            Returns an empty DataSet created by the class schema.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetClassXmlSchema">
            <summary>
            Returns class xml schema based on the class connection string and class table name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetVirtualFileRelativePath(System.String,System.String)">
            <summary>
            Returns virtual relative path for specific column
            </summary>
            <param name="externalColumnName">External column name</param>
            <param name="versionGuid">Version GUID. If not defined physical path is generated</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.CreateSchemaDataSet">
            <summary>
            Creates the class data set based on the class schema
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.RegisterExternalColumns">
            <summary>
            Returns path to externally stored layout codes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetDefaultData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the default object installation data
            </summary>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.RemoveObsoleteSearchSettings">
            <summary>
            Removes search settings from the class which does not correspond to any fields in the class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.GetSearchColumnType(System.String)">
            <summary>
            Returns <see cref="T:System.Type"/> for the given <paramref name="columnName"/> that is included in search index for current <see cref="T:CMS.DataEngine.DataClassInfo"/>.
            </summary>
            <param name="columnName">Name of the column for which <see cref="T:System.Type"/> is returned.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="columnName"/> is null or white-space.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no type defined for given <paramref name="columnName"/> or <paramref name="columnName"/> does not exists in current <see cref="T:CMS.DataEngine.DataClassInfo"/>.</exception>
            <seealso cref="M:CMS.DataEngine.DataClassInfo.RemoveObsoleteSearchSettings"/>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.RefreshStructure">
            <summary>
            Refreshes property <see cref="P:CMS.DataEngine.AbstractInfoBase`1.DataClass"/> accordingly to <see cref="P:CMS.DataEngine.DataClassInfo.ClassXmlSchema"/> in case that any field was removed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.PreselectColumns">
            <summary>
            Preselects the special columns according to the suffixes of the column name.
            (i.e. GUIDColumn will be the first column with GUID suffix, etc.)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies. First tries to execute removedependencies query, if not found, automatic process is executed.
            </summary>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearHashtables">If true, hashtables of all objecttypes which were potentially modified are cleared</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfo.DeleteClassTable">
            <summary>
            Deletes the database table
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfoProviderBase`1">
            <summary>
            Class providing DataClassInfo management.
            </summary>
            <remarks>
            This provider is not managed by the IoC container.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetClasses">
            <summary>
            Returns a query for all the DataClassInfo objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfo(System.Int32)">
            <summary>
            Returns DataClassInfo with specified ID.
            </summary>
            <param name="id">DataClassInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfo(System.String)">
            <summary>
            Returns DataClassInfo with specified name.
            </summary>
            <param name="name">DataClassInfo name</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.GetDataClassInfo(System.Guid)">
            <summary>
            Returns DataClassInfo with specified GUID.
            </summary>
            <param name="guid">DataClassInfo GUID</param>                
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.SetDataClassInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Sets (updates or inserts) specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be set</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.DeleteDataClassInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes specified DataClassInfo.
            </summary>
            <param name="infoObj">DataClassInfo to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.DeleteDataClassInfo(System.Int32)">
            <summary>
            Deletes DataClassInfo with specified ID.
            </summary>
            <param name="id">DataClassInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.SetInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.UpdateObjectInHashtables(CMS.DataEngine.DataClassInfo)">
            <summary>
            Updates the object instance in the hashtables. Updates is different than <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.RegisterObjectInHashtables(`0)"/>, because it logs task about changing object.
            </summary>
            <param name="info">Object to update</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.DeleteObjectFromHashtables(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes the object instance from the hashtables.
            </summary>
            <param name="info">Object to delete</param>
            <exception cref="T:System.ArgumentNullException">When info is null</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProviderBase`1.RemoveObjectFromCustomHashtables(CMS.DataEngine.DataClassInfo)">
            <summary>
            Removes the object instance from custom cache storages.
            </summary>
            <param name="info">Object to remove</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassInfoProvider">
            <summary>
            Provides access to data class information.
            </summary>    
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.ALL_CLASSNAMES">
            <summary>
            Supplementary constant to specify all class names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.ZERO_TIME">
            <summary>
            Zero time constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.mFormLayoutsDirectory">
            <summary>
            Virtual directory where the FormLayouts are located.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoProvider.StoreFormLayoutsInExternalStorage">
            <summary>
            Gets or sets the value that indicates whether class layouts should be stored externally
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassInfoProvider.FormLayoutsDirectory">
            <summary>
            Form layouts directory - Read only
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataClassInfoProvider.UseDataQueryForSchema">
            <summary>
            If true, the data query is used for getting the class schema from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.EnsureDatabaseStructure(CMS.DataEngine.DataClassInfo,System.Boolean)">
            <summary>
            Ensures the database structure based on the given class form definition. 
            If the database table doesn't exist, it is created together with required columns.
            If the database already exists, columns are updated based on the definition.
            </summary>
            <param name="classInfo">Data class info</param>
            <param name="updateSystemFields">If true, the system fields are updated as well</param>
            <exception cref="T:CMS.DataEngine.DataClassTableUpdateException">
            Thrown when class table is not associated with the provided <paramref name="classInfo"/>.
            </exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetOriginalDefinition(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets original definition for the class
            </summary>
            <param name="classInfo">Data class info</param>
            <exception cref="T:CMS.DataEngine.DataClassTableUpdateException">
            Thrown when class table is not associated with the provided <paramref name="classInfo"/>.
            </exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetVirtualObject(System.String)">
            <summary>
            Returns DataClassInfo object for specified path.
            </summary>
            <param name="path">Path</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.CheckDatabaseDependencies(System.Int32)">
            <summary>
            Checks if some database objects are dependent on database representation of this class. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetClassName(System.Int32)">
            <summary>
            Gets the specified DataClassName.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.LoadAllClasses">
            <summary>
            Loads all the classes into the hashtable.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetDataSet(System.String)">
            <summary>
            Gets an empty DataSet created by class XML schema.
            </summary>
            <param name="className">Class name</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class with the given class name is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetUniqueClassName(System.String)">
            <summary>
            Returns unique class name created from the given class name.
            </summary>
            <param name="className">Base class name</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetClassStructureInfoFromDB(System.String)">
            <summary>
            Gets the XML schema for the given class
            </summary>
            <param name="className">Class name</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class with the given class name is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetDataClassInfo(System.String,System.Boolean)">
            <summary>
            Returns DataClassInfo with specified name.
            </summary>
            <param name="name">DataClassInfo name</param>
            <param name="throwIfNotFound">If true, the call throws an exception in case the data class was not found</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class with the given class name is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.SetInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassInfoProvider.DeleteInfo(CMS.DataEngine.DataClassInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="T:CMS.DataEngine.ClassSiteInfo">
            <summary>
            ClassSiteInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassSiteInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ClassSiteInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassSiteInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassSiteInfo.ClassID">
            <summary>
            Class ID.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.#ctor">
            <summary>
            Constructor - Creates an empty ClassSiteInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClassSiteInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassSiteInfoProvider">
            <summary>
            Class providing ClassSiteInfo management.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSites">
            <summary>
            Returns all bindings between classes and sites.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding structure.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.DataEngine.ClassSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding structure.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.DataEngine.ClassSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSiteInfo(System.Int32,System.Int32)">
            <summary>
            Returns the ClassSiteInfo structure for the specified classSite.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.SetClassSiteInfo(CMS.DataEngine.ClassSiteInfo)">
            <summary>
            Sets (updates or inserts) specified classSite.
            </summary>
            <param name="classSite">ClassSite to set</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.DeleteClassSiteInfo(CMS.DataEngine.ClassSiteInfo)">
            <summary>
            Deletes specified classSite.
            </summary>
            <param name="infoObj">ClassSite object</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.DeleteClassSiteInfos(System.Int32)">
            <summary>
            Deletes site bindings of the specified class.
            </summary>
            <param name="classId">ID of the class.</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.RemoveClassFromSite(System.Int32,System.Int32)">
            <summary>
            Deletes specified classSite.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.AddClassToSite(System.Int32,System.Int32)">
            <summary>
            Adds the class to the specified site.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.GetClassSiteInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the ClassSiteInfo structure for the specified classSite.
            </summary>
            <param name="classId">ClassID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.DataEngine.ClassSiteInfoProvider.DeleteClassSiteInfosInternal(System.Int32)">
            <summary>
            Deletes site bindings of the specified class.
            </summary>
            <param name="classId">ID of the class.</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassFormVirtualObject">
            <summary>
            Data class form virtual file object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.Content">
            <summary>
            Gets virtual file content for current object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.IsStoredExternally">
            <summary>
            Indicates whether file content is stored externally (e.g. file system)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.ObjectHash">
            <summary>
            Gets object hash string used for identification of compiled version in .NET cache
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.PhysicalFilePath">
            <summary>
            Gets the physical file path if exists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassFormVirtualObject.CurrentObject">
            <summary>
            Current object instance
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFormVirtualObject.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Constructor
            </summary>
            <param name="currentObject">Object instance</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFormVirtualObject.GetVirtualFileObject(System.String)">
            <summary>
            Creates IVirtualFileObject for specified virtual path (GetVirtualFileObjectHandler callback method) 
            </summary>
            <param name="virtualPath">Virtual path</param>
        </member>
        <member name="T:CMS.DataEngine.DefaultClassThumbnail">
            <summary>
            Is able to select default metafile of the class. Default metafile is the one with name starting with "default.".
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DefaultClassThumbnail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.DefaultClassThumbnail"/> class.
            </summary>
            <param name="objectType">Code name of the class whose Avatar meta files will be managed</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectType"/> is null</exception>
        </member>
        <member name="M:CMS.DataEngine.DefaultClassThumbnail.GetDefaultClassThumbnailGuid">
            <summary>
            Gets GUID of default avatar located in MetaFile table for processed object info.
            </summary>
            <returns>GUID of default image, if exists; null otherwise</returns>
        </member>
        <member name="M:CMS.DataEngine.DefaultClassThumbnail.GetClassId">
            <summary>
            Gets class ID of processed object type.
            </summary>
            <returns>Class ID of processed object type</returns>
        </member>
        <member name="T:CMS.DataEngine.IClassSiteInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.DataEngine.ClassSiteInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IClassSiteInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding structure.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.DataEngine.ClassSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.IClassSiteInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding structure.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.DataEngine.ClassSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.IClassSiteInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.DataEngine.IClassSiteInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.DataEngine.ClassSiteInfo"/> binding.
            </summary>
            <param name="classId">Class ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="T:CMS.DataEngine.LayoutHelper">
            <summary>
            Helper for layout objects
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LayoutHelper.mDefaultNamespaces">
            <summary>
            List of default form layout namespaces
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LayoutHelper.DefaultNamespaces">
            <summary>
            List of default form layout namespaces
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LayoutHelper.DefaultDirectives">
            <summary>
            Returns list of default form layout directives (ToLower).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.GetLayoutTypeEnum(System.String,CMS.DataEngine.LayoutTypeEnum)">
            <summary>
            Gets the layout type enumeration for the given string value.
            </summary>
            <param name="type">String type</param>
            <param name="defaultValue">Default value - optional; HTML is default value by default</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.GetLayoutTypeCode(CMS.DataEngine.LayoutTypeEnum)">
            <summary>
            Gets the layout type code for the given enum value.
            </summary>
            <param name="type">String type</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.AddLayoutDirectives(System.String,CMS.DataEngine.LayoutTypeEnum)">
            <summary>
            Adds the layout directives to the transformation.
            </summary>
            <param name="code">Code of the layout</param>
            <param name="type">Type of the layout</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.AddLayoutDirectives(System.String)">
            <summary>
            Adds the layout directives to the transformation.
            </summary>
            <param name="code">Code of the layout</param>
        </member>
        <member name="M:CMS.DataEngine.LayoutHelper.GetLayoutDirectives">
            <summary>
            Layout directives are set before layout code.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.DataEngine.QueryInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryInfo">
            <summary>
            Represents a query and its parameters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryID">
            <summary>
            Query ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryName">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryTypeID">
            <summary>
            Query type ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryRequiresTransaction">
            <summary>
            Query requires transaction
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.ClassID">
            <summary>
            Class ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryIsLocked">
            <summary>
            Query is locked
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryLastModified">
            <summary>
            Query last modified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryGUID">
            <summary>
            Query GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryIsCustom">
            <summary>
            Query is custom
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryConnectionString">
            <summary>
            Query connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryFullName">
            <summary>
            Query full name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.ObjectFullName">
            <summary>
            Object full name if defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryClassName">
            <summary>
            Query class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.QueryType">
            <summary>
            Query type (SQL command or stored procedure).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.ObjectDisplayName">
            <summary>
            Object name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfo.IsVirtual">
            <summary>
            If true, the query is a virtually built query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Creates a new QueryInfo object from the given DataRow.
            </summary>
            <param name="typeInfo">Type info</param>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor, creates an empty Query structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor">
            <summary>
            Constructor, creates an empty Query structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates the Query object from the given DataRow data.
            </summary>
            <param name="dr">Data row with the Query info data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.LoadClassName(CMS.Base.IDataContainer)">
            <summary>
            Loads the class name from the source data
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryInfoProvider">
            <summary>
            Enables access to queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryInfoProvider.UseAutomaticQueriesAsPrimary">
            <summary>
            If true, the automatic queries are used as the primary source of the queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueries">
            <summary>
            Returns a query for all the QueryInfo objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfo(System.Int32)">
            <summary>
            Returns QueryInfo with specified ID.
            </summary>
            <param name="id">QueryInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfoFromDB(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfo(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.SetQueryInfo(CMS.DataEngine.QueryInfo)">
            <summary>
            Sets (updates or inserts) specified QueryInfo.
            </summary>
            <param name="infoObj">QueryInfo to be set</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.DeleteQueryInfo(CMS.DataEngine.QueryInfo)">
            <summary>
            Deletes specified QueryInfo.
            </summary>
            <param name="infoObj">QueryInfo to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.DeleteQueryInfo(System.Int32)">
            <summary>
            Deletes QueryInfo with specified ID.
            </summary>
            <param name="id">QueryInfo ID</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfoInternal(System.String)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="queryName">QueryInfo name</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.SetInfo(CMS.DataEngine.QueryInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.DeleteInfo(CMS.DataEngine.QueryInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.QueryIsExplicitlyDefined(System.String,System.String)">
            <summary>
            Returns true if the given query is explicitly defined
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.ClearDefaultQueries(CMS.DataEngine.DataClassInfo,System.Boolean)">
            <summary>
            Clears the default queries for the given class name from hashtable
            </summary>
            <param name="dci">Data class object</param>
            <param name="dataClass">If true, removes DataClass queries</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetClassName(System.String)">
            <summary>
            Gets the class name from the query name.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryCacheDependencies(System.String)">
            <summary>
            Gets the cache dependencies for the query.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryType(System.Int32)">
            <summary>
            Gets the query type based on the given type ID
            </summary>
            <param name="queryTypeId">Query type ID</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryTypeID(CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Gets the query type ID based on the given type
            </summary>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetQueryInfo(System.String,System.Boolean)">
            <summary>
            Returns QueryInfo with specified name.
            </summary>
            <param name="name">QueryInfo name</param>
            <param name="throwException">If true, exception is thrown if query does not exist</param>
            <returns>Query object. Null if the query doesn't exist.</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryInfoProvider.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryListInfo">
            <summary>
            Info class providing the list of queries for the query selector
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryListInfo.OBJECT_TYPE_LIST">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryListInfo.#ctor">
            <summary>
            Constructor - Creates an empty QueryListInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryName">
            <summary>
            System query names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALUPSERT">
            <summary>
            Name of the 'generalupsert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALUPDATE">
            <summary>
            Name of the 'generalupdate' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALINSERT">
            <summary>
            Name of the 'generalinsert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALDELETE">
            <summary>
            Name of the 'generaldelete' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.GENERALSELECT">
            <summary>
            Name of the 'generalselect' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SELECT">
            <summary>
            Name of the 'select' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.INSERT">
            <summary>
            Name of the 'insert' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.INSERTIDENTITY">
            <summary>
            Name of the 'insertidentity' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.UPDATE">
            <summary>
            Name of the 'update' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.DELETE">
            <summary>
            Name of the 'delete' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.DELETEALL">
            <summary>
            Name of the 'deleteall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.UPDATEALL">
            <summary>
            Name of the 'updateall' default query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryName.SELECTALL">
            <summary>
            Name of the 'selectall' default query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CollectionExtensions.CollectionExtensions">
            <summary>
            Collection extension methods
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
            <exclude />
        </member>
        <member name="M:CMS.DataEngine.CollectionExtensions.CollectionExtensions.ToHashSetCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Converts the list of objects to a hash set of distinct values
            </summary>
            <param name="objects">List of objects to convert</param>
            <param name="comparer">Comparer</param>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.CollectionExtensions.CollectionExtensions.AddRangeToSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds range of items to hashset.
            </summary>
            <param name="instance">Hashset to add to.</param>
            <param name="range">List of items to add.</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractDataConnection">
            <summary>
            Represents SQL Server data connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mUseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mCommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedConnectionsList">
            <summary>
            List of nested connections
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedOpenConnections">
            <summary>
            List of nested connections that were automatically opened
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedOpenTransactions">
            <summary>
            List of nested connections that were automatically opened with transaction
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mNestedConnections">
            <summary>
            Nested connections indexed by the connection string [connectionString ->  IDbConnection]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractDataConnection.mLastError">
            <summary>
            Last connection error
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.UseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.NativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.NativeDBConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.Transaction">
            <summary>
            Transaction object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalTransaction">
            <summary>
            Transaction object of local instance.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.CommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.LocalKeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataConnection.DisableQueryDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQueryAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/> which executes the query asynchronously and returns the number of rows affected.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the number of rows affected.
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteReaderAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)"/> which executes the query asynchronously and returns result as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="commandBehavior">Command behavior.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            The method executes the query with command behavior <see cref="F:System.Data.CommandBehavior.CloseConnection"/> if passed <paramref name="commandBehavior"/> is set to <see cref="F:System.Data.CommandBehavior.Default"/> and connection is not opened.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns result of the query as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="commandBehavior">Command behavior.</param>
            <remarks>
            The method executes the query with command behavior <see cref="F:System.Data.CommandBehavior.CloseConnection"/> if passed <paramref name="commandBehavior"/> is set to <see cref="F:System.Data.CommandBehavior.Default"/> and connection is not opened.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalarAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>, which executes the query asynchronously
            and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CheckThreadSafety">
            <summary>
            Checks the thread safety of current operation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.NativeDBConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.NativeConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.IsOpen">
            <summary>
            Returns true if connection to the database is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Open">
            <summary>
            Opens connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Close">
            <summary>
            Closes connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CommitTransaction">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.RollbackTransaction">
            <summary>
            Rollbacks current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.IsTransaction">
            <summary>
            Indicates if transaction is running.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.Dispose">
            <summary>
            Disposes the connection object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.LoadDefaultConnectionString">
            <summary>
            Loads the default connection string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.HandleError(System.String,System.Exception)">
            <summary>
            Handles the error. Returns false, if the error was not handled
            </summary>
            <param name="queryText">Query text</param>
            <param name="ex">Exception to handle</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.HandleDbError(System.String,System.Data.Common.DbException)">
            <summary>
            Handles the database error. Returns false, if the error was not handled
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Database exception</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ValidateTransaction(System.Data.IDbTransaction)">
            <summary>
            Validates the transaction
            </summary>
            <param name="tr">Transaction to validate</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.PrepareCommand(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Prepares the SQL command for the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="allowTransaction">Allow transaction for the command</param>
            <param name="closeConnection">Close connection</param>
            <param name="commitTransaction">Commit transaction</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.AddParameters(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{CMS.DataEngine.DataParameter})">
            <summary>
            Adds the given parameters to the SQL command
            </summary>
            <param name="cmd">SQL command</param>
            <param name="queryParams">Parameters to add</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateParameter(CMS.DataEngine.DataParameter)">
            <summary>
            Creates a SQL parameter from the given data parameter
            </summary>
            <param name="param">Source parameter</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.SetParameterType(System.Data.Common.DbParameter,System.Type)">
            <summary>
            Sets the parameter type to a destination type
            </summary>
            <param name="param">Parameter to set</param>
            <param name="type">Desired parameter type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateNativeConnection">
            <summary>
            Creates a new native connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateCommand(System.String)">
            <summary>
            Creates a new SQL command
            </summary>
            <param name="cmdText">Command text</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new command parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.CreateDataAdapter">
            <summary>
            Creates a data adapter
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.ProcessOutParameters(System.Data.Common.DbParameterCollection,System.Collections.Generic.IEnumerable{CMS.DataEngine.DataParameter})">
            <summary>
            Ensures propagation of output (or inputoutput) parameters after the SQL command execution to the query parameters collection.
            </summary>
            <remarks>Processing of output parameters is ensured for the following methods (and their async variants if exist):
            <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>, <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>, <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>.</remarks>
            <param name="commandParams">SQL command parameters</param>
            <param name="queryParams">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetNestedConnection(System.String,System.Boolean)">
            <summary>
            Gets the nested connection with the given connection string
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="newConnection">If true, a new connection is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.GetExecutingConnection(System.String,System.Boolean)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataConnection.LogConnectionOperation(System.String,System.Boolean,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs the connection operation to the query log.
            </summary>
            <param name="operation">Connection operation</param>
            <param name="allowBeforeQuery">If true, the operation is allowed before the query when the query is open</param>
            <param name="conn">Connection around the operation</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractDataProvider">
            <summary>
            Data provider class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.ConnectionString">
            <summary>
            Connection string to use for the connections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractDataProvider.CurrentScopeConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractDataProvider.GetNewConnection(System.String)">
            <summary>
            Returns new data connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractSqlGenerator">
            <summary>
            SQL generator base
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractSqlGenerator.mExcludeColumns">
            <summary>
            Excluded columns of the document which are not included into the queries.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractSqlGenerator.mGenerateWithExpand">
            <summary>
            Gets or sets whether With (EXPAND) should be generated in views.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSqlGenerator.ExcludeColumns">
            <summary>
            Gets or sets the excluded columns of the document which are not included into the queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSqlGenerator.GenerateWithExpand">
            <summary>
            Gets or sets whether With (EXPAND) should be generated in views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetTreeJoinedView(System.String@)">
            <summary>
            Generates the Tree_Joined indexed view query
            </summary>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetUserView">
            <summary>
            Generates the code for the User view
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSystemViewSqlQuery(System.String,System.String@)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetSqlQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetGeneralQuery(CMS.DataEngine.SqlOperationTypeEnum)">
            <summary>
            Gets a general query of the given type
            </summary>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GenerateQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetPKWhereCondition(System.String)">
            <summary>
            Returns the where condition for given primary key (single or list separated by semicolon).
            </summary>
            <param name="pkName">Primary key name (list)</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.IsColumnExcluded(System.String,System.String)">
            <summary>
            Returns true if the column is excluded.
            </summary>
            <param name="excludedColumns">List of excluded columns (starting and ending with semicolon ";")</param>
            <param name="column">Column to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractSqlGenerator.GetColumnList(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Generates the column list for the SQL query.
            </summary>
            <param name="className">Class name</param>
            <param name="excludedColumns">List of the excluded columns</param>
            <param name="fullName">Generate full name, including the table name?</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractTableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseName">
            <summary>
            Database name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseServerName">
            <summary>
            Database server name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractTableManager.mDatabaseServerVersion">
            <summary>
            Database server version
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.NotAvailableMessage">
            <summary>
            Gets the text for N/A message
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseName">
            <summary>
            Database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseServerName">
            <summary>
            Name of database server.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseServerVersion">
            <summary>
            Version of database server.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseSize">
            <summary>
            Database size(including log size) in MB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DatabaseVersion">
            <summary>
            Database version
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.ConnectionString">
            <summary>
            Connection string to use for table management
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractTableManager.DisableDebug">
            <summary>
            If true, the debug is disabled in this table manager
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetConnection">
            <summary>
            Gets the connection for the table management
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Alters specified view in database
            </summary>
            <param name="viewName">View name to alter</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropView(System.String)">
            <summary>
            Drop specified view from database. Returns the schema of the dropped view
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ViewExists(System.String,System.String@)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
            <param name="schema">Returns the view schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetTables(System.String)">
            <summary>
            Gets the tables in the current database
            </summary>
            <param name="where">Tables where condition</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetTableDependencies(System.String)">
            <summary>
            Gets list of object names which have foreign key constraint dependency.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetTablePKName(System.String)">
            <summary>
            Returns name of the primary key. If more columns in PK, names are separated by semicolon ";".
            </summary>
            <param name="tableName">Name of the table to get PK column(s) from.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetIndexes(System.String)">
            <summary>
            Returns DataSet with indexes of the given object. Returns columns IndexName, DropScript, CreateScript
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CMS#DataEngine#ITableIndexInformationProvider#GetTableIndexes(System.String)">
            <summary>
            Gets indexes of table identified by given <paramref name="tableName"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="tableName"/> is null or empty string.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetIndexesCore(System.String)">
            <summary>
            Gets dictionary of all enabled indexes of given table. Item key is index ID which is relative within table.
            See https://msdn.microsoft.com/en-us/library/ms173760.aspx for details on index ID.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetIndexesDataSet(System.String)">
            <summary>
            Gets information about all enabled indexes for given table. The result is ordered by index ID and index column ID.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specified table column information retrieved from database information schema. Returns columns ColumnName, DataType, DataSize, DataPrecision, Nullable, DefaultValue.
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
            <remarks>If <paramref name="columnName"/> is not specified data for all table columns are returned.</remarks>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column in system (en) culture. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="columnName"/> or <paramref name="columnType"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetColumnIndexes(System.String,System.String)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropColumnIndexes(System.String,System.String)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DropDefaultConstraint(System.String,System.String)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Alter table column with default value.
            </summary>        
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="newColumnName">New column name, null if no new column is created</param>
            <param name="newColumnType">New column type, null if no new column is created</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
            <param name="newColumnDefaultValue">Column default value in system (en) culture</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tableName"/>, <paramref name="columnName"/> or <paramref name="newColumnType"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RenameColumn(System.String,System.String,System.String)">
            <summary>
            Changes name of the column.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="columnName">Current name of the column</param>
            <param name="newColumnName">New name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetConstraintName(System.String,System.String)">
            <summary>
            Returns constraint's name truncated to 128 chars (128 chars is limit of database column name).
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetPKConstraintName(System.String)">
            <summary>
            Returns the name of the primary key constraint.
            </summary>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.RecreatePKConstraint(System.String,System.String[])">
            <summary>
            Drops the current primary key constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseInfo">
            <summary>
            Gets size related information about the database.
            </summary>
            <returns>DataSet with 2 tables containing related data</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseSize(System.String)">
            <summary>
            Gets database size (including log size) or N/A string if the size cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseVersion">
            <summary>
            Gets the database version
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseName">
            <summary>
            Gets database name or N/A string if the name cannot be retrieved
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseServerName">
            <summary>
            Gets database server name or N/A string if the name cannot be retrieved.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetDatabaseServerVersion">
            <summary>
            Gets database server version info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetValueString(System.Object)">
            <summary>
            Returns the value string using the database culture. Does not include apostrophes for types that need them
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.EnsureDefaultValue(System.Boolean,System.String,System.String)">
            <summary>
            Add apostrophes around the column default value string according to column type.
            </summary>
            <param name="allowNull">Indicates whether NULL values are allowed</param>
            <param name="sqlType">SQL type of the table column</param>
            <param name="defValue">Default to add apostrophes to</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateTransactionScope">
            <summary>
            Returns a transaction scope that can be used to maintain database consistency.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetCode(System.String)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.CreateProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Creates specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractTableManager.AlterProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Alters specified procedure in database
            </summary>
            <param name="procName">Procedure name to alter</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="T:CMS.DataEngine.BulkDeleteSettings">
            <summary>
            Configuration class for <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.BulkDelete(CMS.DataEngine.IWhereCondition,CMS.DataEngine.BulkDeleteSettings)"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkDeleteSettings.RemoveDependencies">
            <summary>
            Indicates whether dependencies of deleted objects are also removed, as it was deleted via API.
            </summary>
            <remarks>Default <c>false</c>.</remarks>
        </member>
        <member name="P:CMS.DataEngine.BulkDeleteSettings.ObjectType">
            <summary>
            Object type to delete. The object type determines the set of deleted dependencies, and may restrict the set of deleted data. If not provided, default provider object type is used.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BulkInsertSettings">
            <summary>
            Configuration class for <see cref="M:CMS.DataEngine.AbstractDataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.Mappings">
            <summary>
            Gets or sets a collection of column mappings.
            Column mappings define the relationships between columns in the data source and columns in the destination.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.Options">
            <summary>
            Gets or sets a bitwise flag that specifies one or more options to use with an instance of System.Data.SqlClient.SqlBulkCopy.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.BulkCopyTimeout">
            <summary>
            Number of seconds for the operation to complete before it times out. The default is 30 seconds. A value of 0 indicates no limit; the bulk copy will wait indefinitely.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.BatchSize">
            <summary>
            Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server. A value of 0 indicates that batches won't be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertSettings.KeepIdentity">
            <summary>
            Gets or sets whether to keep identity of inserted data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISqlServerCapabilities">
            <summary>
            Sql server capabilities contract.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsDatabaseCreation">
            <summary>
            Indicate if server supports database creation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsDatabaseDeletion">
            <summary>
            Indicate if server supports database deletion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsOpenQueryCommand">
            <summary>
            Indicate if server supports OPENQUERY commands.
            
            OPENQUERY is used to do commands across two or more databases.
            http://msdn.microsoft.com/en-us/library/ms188427.aspx
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.SupportsLinkedServer">
            <summary>
            Indicate if server supports linked server which is used with in OPENQUERY to do commands across two or more databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISqlServerCapabilities.ControlServerPermissionAvailable">
            <summary>
            Indicate if server supports 'CONTROL SERVER' permission for user.
            http://msdn.microsoft.com/en-us/library/ms191291.aspx
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlServerCapabilities">
            <summary>
            Class that holds information about SQL server capabilities.
            
            These are features of the SQL server itself.
            It doesn't depend on the user and his permissions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilities.SupportsDatabaseCreation">
            <summary>
            Indicate if server supports database creation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilities.SupportsDatabaseDeletion">
            <summary>
            Indicate if server supports database deletion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilities.SupportsOpenQueryCommand">
            <summary>
            Indicate if server supports OPENQUERY commands.
            
            OPENQUERY is used to do command across two or more databases.
            http://msdn.microsoft.com/en-us/library/ms188427.aspx
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilities.SupportsLinkedServer">
            <summary>
            Indicate if server supports linked server which is used with in OPENQUERY to do commands across two or more databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlServerCapabilities.ControlServerPermissionAvailable">
            <summary>
            Indicate if server supports 'CONTROL SERVER' permission for user.
            http://msdn.microsoft.com/en-us/library/ms191291.aspx
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlServerCapabilitiesFactory">
            <summary>
            Class that returns SQL server capabilities based on the connection string and server edition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlServerCapabilitiesFactory.GetSqlServerCapabilities(System.String)">
            <summary>
            Returns SQL server capabilities based on the connection string.
            </summary>
            <param name="connectionString">Connection string to SQL server</param>
            <returns>Instance of SQLServerCapabilities class with data</returns>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.IndexName">
            <summary>
            Index name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.IsUnique">
            <summary>
            Indicates if index is unique
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.IsClustered">
            <summary>
            Indicates if index is clustered
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.Columns">
            <summary>
            Collection of indexed columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.IncludedColumns">
            <summary>
            Collection of included indexed columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.Condition">
            <summary>
            Filter condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnIndexDefinition.TableName">
            <summary>
            Table name where index belongs to
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ColumnIndexDefinition.AddColumn(System.String,System.Boolean)">
            <summary>
            Adds new column into correct collection based on <paramref name="columnIsIncluded"/> parameter
            </summary>
            <param name="columnName">Name of the new column</param>
            <param name="columnIsIncluded">Flag indicates if column is normal indexed or included</param>
        </member>
        <member name="M:CMS.DataEngine.ColumnIndexDefinition.GetQuery">
            <summary>
            Gets query to create column index based on its settings
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ConnectionHelper">
            <summary>
            Connection helper class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.DEFAULT_CONNECTIONSTRING_NAME">
            <summary>
            Default connection string name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.DisposeConnectionAfterClose">
            <summary>
            If true, disposes connection after the connection is closed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.TransactionIsolationLevel">
            <summary>
            Isolation level for SQL operations with transactions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.DefaultCommandTimeout">
            <summary>
            Command timeout for the SQL commands.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.LongRunningCommandTimeout">
            <summary>
            Command timeout in seconds for the SQL queries which are known to possibly take more time than standard command timeout.
            Long running queries have to be explicitly wrapped with CMSConnectionScope with its CommandTimeout property set to this value.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.CheckThreadSafety">
            <summary>
            If true, the thread safety of the connection access is checked (the connection must be used only in thread where it was originally created).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.UseContextConnection">
            <summary>
            If true, single connection is used for the entire request.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ConnectionHelper.KeepContextConnectionOpen">
            <summary>
            If true, the connection is opened only once for the entire request and kept open until the end of the request.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionStringName">
            <summary>
            Global connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionStringPrefix">
            <summary>
            Global connection string prefix
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionString">
            <summary>
            Global connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.IsConnectionStringInitialized">
            <summary>
            Indicates whether connection string is initialized or not.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionHelper.ConnectionAvailable">
            <summary>
            Returns true if the connection is available.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.Init">
            <summary>
            Initializes the connection helper
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.Clear">
            <summary>
            Clears the connection helper cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionStringPrefix(System.String)">
            <summary>
            Gets the connection string name for the given domain
            </summary>
            <param name="domain">Domain name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionStringNameWithPrefix(System.String)">
            <summary>
            Returns the connection string name with prefix set in <see cref="P:CMS.DataEngine.ConnectionHelper.ConnectionStringPrefix" /> from the given <paramref name="connectionStringName"/>.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnection(System.String)">
            <summary>
            Returns the connection.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionByName(System.String,System.Boolean)">
            <summary>
            Returns the connection.
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="defaultIfNotFound">If true, the default connection string is returned if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(System.String)">
            <summary>
            Gets the connection string of provided <paramref name="connectionStringName"/>.
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <exception cref="T:System.ArgumentException">Thrown when there is no connection string with provided <paramref name="connectionStringName"/>.</exception>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionString(System.String,System.Boolean)">
            <summary>
            Gets the connection string of provided <paramref name="connectionStringName"/>.
            </summary>
            <param name="connectionStringName">Connection string name.</param>
            <param name="nullIfNotFound">If <c>true</c>, the <c>null</c> is returned if the given connection string is not found.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="nullIfNotFound"/> is <c>false</c> and there is no connection string with provided <paramref name="connectionStringName"/>.</exception>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ConnectionStringExists(System.String)">
            <summary>
            Returns <c>true</c> if provided <paramref name="connectionStringName"/> belongs to an existing connection string.
            </summary>
            <param name="connectionStringName">Name of connection string that might or might not exist.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.EnsureExistingConnectionStringName(System.String,System.String)">
            <summary>
            Returns <paramref name="connectionStringName"/> if it is valid name of a connection string that exists
            returns <paramref name="defaultConnectionStringName"/> otherwise;
            </summary>
            <param name="connectionStringName">Name of connection string that might or might not exist.</param>
            <param name="defaultConnectionStringName">Name of default connection to return when <paramref name="connectionStringName"/> connection string does not exist (<see cref="F:CMS.DataEngine.ConnectionHelper.DEFAULT_CONNECTIONSTRING_NAME"/> by default).</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetFirstFoundConnectionString(System.String,System.String[])">
            <summary>
            Gets the first found connection string by the prefix, if none found, returns null
            </summary>
            <param name="baseConnectionString">Base connection string</param>
            <param name="prefixes">Connection string prefixes to try</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteScalarAsync(System.String,System.Threading.CancellationToken,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            <para>
            Executes the query asynchronously and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <param name="parameters">Query parameters.</param>
            <param name="macros">Query expressions.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters.</param>
            <param name="macros">Query expressions.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteScalarAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            <para>
            Executes the query asynchronously and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query text.</param>
            <param name="parameters">Query parameters.</param>
            <param name="queryType">Query type.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <param name="transaction">If true, connection uses transaction for the query.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <param name="queryText">Query text.</param>
            <param name="parameters">Query parameters.</param>
            <param name="queryType">Query type.</param>
            <param name="transaction">If true, connection uses transaction for the query.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            <para>
            Executes the query asynchronously and returns the number of rows affected.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <param name="parameters">Query parameters.</param>
            <param name="macros">Query expressions.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Executes the query and returns the number of rows affected.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters.</param>
            <param name="macros">Query expressions.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteNonQueryAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            <para>
            Executes the query asynchronously and returns the number of rows affected.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query text.</param>       
            <param name="parameters">Query parameters.</param>
            <param name="queryType">Query type.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <param name="transaction">If true, connection uses transaction for the query.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the number of rows affected.
            </summary>
            <param name="queryText">Query text.</param>
            <param name="parameters">Query parameters.</param>
            <param name="queryType">Query type.</param>
            <param name="transaction">If true, connection uses transaction for the query.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="queryName">Name of the query in format application.class.queryname</param>
            <param name="parameters">Query parameters</param>
            <param name="where">WHERE expression</param>
            <param name="orderBy">Sort expression</param>
            <param name="topN">Top N expression</param>
            <param name="columns">Columns expression</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteReaderAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            <para>
            Executes the query asynchronously and returns result as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query text.</param>
            <param name="parameters">Query parameters.</param>
            <param name="queryType">Query type.</param>
            <param name="commandBehavior">Command behavior.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns result of the query as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="queryText">Query text.</param>
            <param name="parameters">Query parameters.</param>
            <param name="queryType">Query type.</param>
            <param name="commandBehavior">Command behavior.</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Runs the query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">If true, connection uses transaction for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.ExecuteQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Executes query and returns result as a dataset.
            </summary>
            <param name="query">Query to execute</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.BuildConnectionString(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Builds a connection string based on specified parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">The name or network address of the instance of SQL Server to which to connect.</param>
            <param name="databaseName">The name of the database. Can be <c>null</c> or <c>String.Empty</c>.</param>
            <param name="userName">User name (used only with <see cref="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.SQLServerAuthentication"/>)</param>
            <param name="password">User password (used only with <see cref="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.SQLServerAuthentication"/>)</param>
            <param name="timeout">The length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.</param>
            <param name="language">Connection language. If not provided, "English" is used.</param>
            <param name="isForAzure">If <c>true</c>, connection string is meant to be used with Microsoft Azure.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="serverName"/> is <c>null</c> or <c>String.Empty</c>.</exception>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetConnectionServerName(System.String,System.Boolean)">
            <summary>
            If <paramref name="isForAzure"/> set to <c>false</c>, returns unchanged <paramref name="serverName"/>.
            If <paramref name="isForAzure"/> set to <c>true</c>, returns <paramref name="serverName"/> prefixed with "tcp:".
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.TestConnection(System.String)">
            <summary>
            Tests the given connection parameters.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.TestConnection(CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String,System.String)">
            <summary>
            Tests the given connection parameters.
            </summary>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="databaseName">Database name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetSqlConnectionString">
            <summary>
            Returns the connection string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.LoadConnectionString(System.String)">
            <summary>
            Returns the connection string.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetSqlConnectionString(System.String)">
            <summary>
            Returns the connection string.
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.GetIsolationLevel(System.Object,System.Data.IsolationLevel)">
            <summary>
            Returns the isolation level evaluated from the string representation.
            </summary>
            <param name="value">String value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.InitRequestContext">
            <summary>
            Initializes the request context to use proper database based on current domain name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.SetConnectionContext(System.String)">
            <summary>
            Sets current context to the given connection string prefix, e.g. for prefix "External" the connection string "ExternalCMSConnectionString" will be used
            instead of the default "CMSConnectionString". To revert to default DB, use prefix null or empty string.
            </summary>
            <param name="connStringPrefix">Connection string prefix</param>
        </member>
        <member name="M:CMS.DataEngine.ConnectionHelper.IsLocalCMSDatabase(System.String)">
            <summary>
            Returns true, if the given connection string represents a connection to the local CMS database.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="T:CMS.DataEngine.DatabaseHelper">
            <summary>
            Provides database operations
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseHelper.DEFAULT_DB_COLLATION">
            <summary>
            Default database collation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseHelper.SUPPORTED_DB_COLLATIONS">
            <summary>
            All supported database collations (separated by semicolon)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseHelper.mDatabaseVersion">
            <summary>
            Defines the version of the current database
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseHelper.lockObject">
            <summary>
            Object for locking the thread context
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.DatabaseCollation">
            <summary>
            Database collation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.IsDatabaseAvailable">
            <summary>
            Indicates whether connection string is set and objects exist in database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.DatabaseVersion">
            <summary>
            Returns the version of the database that the application uses. Returns null if connection string is not initialized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseHelper.IsCorrectDatabaseVersion">
            <summary>
            Returns whether database version is correct and matches the application version.   
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.DatabaseExists(System.String)">
            <summary>
            Checks if the specified database exists, returns true if database exists.
            </summary>
            <param name="connectionString">Connection string to the database</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.GetDatabaseCollation(System.String)">
            <summary>
            Returns database collation.
            </summary>
            <param name="connectionString">Connection string to the database</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.CheckDBPermission(System.String,CMS.DataEngine.SQLServerAuthenticationModeEnum,System.String,System.String,System.String)">
            <summary>
            Checks if SQL account is granted with specific permission.
            </summary>
            <param name="permission">SQL permission to check</param>
            <param name="authenticationMode">Authentication type</param>
            <param name="serverName">Server name</param>
            <param name="userName">User name</param>
            <param name="password">User password</param>
            <returns>Returns <c>true</c> if SQL account is granted permission.</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.IsSupportedDatabaseCollation(System.String)">
            <summary>
            Checks if the specified collation is supported.
            </summary>
            <param name="collation">Collation to check.</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.GetDatabaseName(System.String)">
            <summary>
            Returns the database name.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.ChangeDatabaseCollation(System.String,System.String,System.String)">
            <summary>
            Change the collation of specified database.
            </summary>
            <param name="connectionString">Connection string to the database</param>
            <param name="databaseName">Database name (if NULL current database is used)</param>
            <param name="collation">Collation</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="collation"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="collation"/> is empty string</exception>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.CheckDatabaseVersion">
            <summary>
            Checks the database version, returns true if the version is correct, reports error in case the version is wrong
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseHelper.Clear">
            <summary>
            Clears the internal cached values
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabasePermission">
            <summary>
            Database permissions
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabasePermission.ModifyDatabase">
            <summary>
            Modify database - create tables, functions etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabasePermission.CreateDatabase">
            <summary>
            Create new database.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralConnection">
            <summary>
            Represents a general database connection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DataConnection">
            <summary>
            Data connection for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.DisableQueryDebug">
            <summary>
            If true, the debug of the executed queries is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.UseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralConnection.CommandTimeout">
            <summary>
            Command timeout.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.CreateInstance(System.String)">
            <summary>
            Creates new instance of the connection object.
            </summary>
            <param name="connectionString">Connection string. If no connection string is provided, CMSConnectionString configuration value is used instead</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Dispose">
            <summary>
            Disposes the connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.IsOpen">
            <summary>
            Returns true if the connection is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetExecutingConnection(CMS.DataEngine.QueryParameters)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.GetExecutingConnection(System.String,System.Boolean)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Executes query and returns result as a <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="query">Query parameters</param>
            <remarks>
            The method performs a retry of the query execution if an SQL deadlock occurs and the query is not part of a transaction. The retry is performed at most <c>3</c> times.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteQuery(CMS.DataEngine.QueryParameters,System.Int32@)">
            <summary>
            Executes query and returns result as a DataSet. Returns the total number of result items.
            </summary>
            <param name="query">Query parameters</param>
            <param name="totalRecords">Returns total records</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.RunQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Runs the query against SQL DB.
            </summary>
            <param name="query">Query to run</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQueryAsync(CMS.DataEngine.QueryParameters,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(CMS.DataEngine.QueryParameters)"/> which executes the query asynchronously and returns the number of rows affected.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="query">Query parameters.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteNonQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Executes the query and returns the number of rows affected.
            </summary>
            <param name="query">Query parameters.</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReaderAsync(CMS.DataEngine.QueryParameters,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.GeneralConnection.ExecuteReader(CMS.DataEngine.QueryParameters,System.Data.CommandBehavior)"/> which executes the query asynchronously and returns result as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="query">Query parameters.</param>
            <param name="commandBehavior">Command behavior.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReader(CMS.DataEngine.QueryParameters,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns result of the query as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="query">Query parameters.</param>
            <param name="commandBehavior">Command behavior.</param>
            <remarks>
            The method performs a retry of the query execution if an SQL deadlock occurs and the query is not part of a transaction. The retry is performed at most <c>3</c> times.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteReaderCore(CMS.DataEngine.QueryParameters,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns result of the query as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="query">Query parameters.</param>
            <param name="commandBehavior">Command behavior.</param>
            <remarks>
            The method is called by <see cref="M:CMS.DataEngine.GeneralConnection.ExecuteReader(CMS.DataEngine.QueryParameters,System.Data.CommandBehavior)"/> as part of each try, if the query execution is being retried.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalarAsync(CMS.DataEngine.QueryParameters,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(CMS.DataEngine.QueryParameters)"/>, which executes the query asynchronously
            and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryParameters">Query parameters.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.ExecuteScalar(CMS.DataEngine.QueryParameters)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <param name="query">Query parameters.</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insertion settings</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.LogQueryStart(CMS.DataEngine.QueryParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs query start. Logs the query to the file and to current request log for debugging.
            </summary>
            <param name="query">Query</param>
            <param name="conn">Connection for the query execution</param>
            <returns>Returns the new log item</returns>
        </member>
        <member name="M:CMS.DataEngine.GeneralConnection.LogQueryEnd(System.Object)">
            <summary>
            Logs the end of the query processing.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="T:CMS.DataEngine.SQLServerAuthenticationModeEnum">
            <summary>
            Enumeration of the SQL authentication mode.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.SQLServerAuthentication">
            <summary>
            SQL Server authentication.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLServerAuthenticationModeEnum.WindowsAuthentication">
            <summary>
            Windows authentication.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataConnectionFactory">
            <summary>
            Provides DataConnection object for specified data provider according to configuration settings.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataConnectionFactory.GetConnectionEventHandler">
            <summary>
            Gets connection method delegate.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="E:CMS.DataEngine.DataConnectionFactory.OnGetConnection">
            <summary>
            Event raised when the connection is required. Returns the connection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.ProviderAssemblyName">
            <summary>
            Custom Provider library assembly.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.ProviderObject">
            <summary>
            Returns the provider object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.GeneratorObject">
            <summary>
            Returns the SQL generator object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.TableManagerObject">
            <summary>
            Returns the Table manager object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.ConnectionString">
            <summary>
            Returns the connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataConnectionFactory.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.NewTableManagerObject(System.String)">
            <summary>
            Creates a new table manager object with the given connection string
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.GetConnection">
            <summary>
            Returns a new database connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.GetConnection(System.String)">
            <summary>
            Returns a new database connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.DataConnectionFactory.GetNativeConnection(System.String,System.Boolean)">
            <summary>
            Returns a new database connection.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="T:CMS.DataEngine.DataType`1">
            <summary>
            Data type definition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.DefaultValue">
            <summary>
            Default value for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.ObjectDefaultValue">
            <summary>
            Default value for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.ConversionFunc">
            <summary>
            Conversion function for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.DbConversionFunc">
            <summary>
            Conversion function which converts value to its database representation.
            If not defined, value is used without any conversions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataType`1.IsOfTypeFunction">
            <summary>
            Function used to determine whether a given value is of this data type.
            If left null, all objects are considered to be of this type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.ConversionMethod">
            <summary>
            Returns the conversion method
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType`1.DefaultValueCode">
            <summary>
            Code of the default value for this type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.#ctor(System.String,System.String,System.String,System.Func{System.Object,`0,System.Globalization.CultureInfo,`0})">
            <summary>
            Constructor
            </summary>
            <param name="sqlType">SQL type</param>
            <param name="fieldType">Field type</param>
            <param name="schemaType">Schema type</param>
            <param name="conversionFunc">Conversion function</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.#ctor(System.String,System.String,System.String,System.Func{System.Object,`0,System.Globalization.CultureInfo,`0},System.Func{System.Object,System.Globalization.CultureInfo,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="sqlType">SQL type</param>
            <param name="fieldType">Field type</param>
            <param name="schemaType">Schema type</param>
            <param name="conversionFunc">Conversion function</param>
            <param name="validationFunction">Determines whether passed object value is of this data type.</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.#ctor(System.String,System.String,System.String,System.Func{System.Object,`0,System.Globalization.CultureInfo,`0},System.Func{`0,System.Object,System.Globalization.CultureInfo,System.Object},CMS.DataEngine.IDataTypeTextSerializer)">
            <summary>
            Constructor
            </summary>
            <param name="sqlType">SQL type</param>
            <param name="fieldType">Field type</param>
            <param name="schemaType">Schema type</param>
            <param name="conversionFunc">Conversion function</param>
            <param name="dbConversionFunc">Function which converts value to its database representation.</param>
            <param name="textSerializer">Text serializer used for this type.</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.#ctor(System.String,System.String,System.String,System.Func{System.Object,`0,System.Globalization.CultureInfo,`0},System.Func{`0,System.Object,System.Globalization.CultureInfo,System.Object},CMS.DataEngine.IDataTypeTextSerializer,System.Func{System.Object,System.Globalization.CultureInfo,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="sqlType">SQL type</param>
            <param name="fieldType">Field type</param>
            <param name="schemaType">Schema type</param>
            <param name="conversionFunc">Conversion function</param>
            <param name="dbConversionFunc">Function which converts value to its database representation.</param>
            <param name="textSerializer">Text serializer used for this type.</param>
            <param name="validationFunction">Determines whether passed object value is of this data type.</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.Convert(System.Object,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion of the type</param>
            <param name="defaultValue">Default value to return in case the conversion fails</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.ConvertToDbType(System.Object,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the value to its database representation.
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion of the type</param>
            <param name="defaultValue">Default value to return in case the conversion fails</param>
        </member>
        <member name="M:CMS.DataEngine.DataType`1.IsValueOfType(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Uses <see cref="F:CMS.DataEngine.DataType`1.IsOfTypeFunction"/> to determine whether given <paramref name="value"/>
            is of this data type.
            </summary>
            <param name="value">Object to be tested.</param>
            <param name="culture">Culture to tests object for.</param>
            <returns>True if object is of this data type or if <see cref="F:CMS.DataEngine.DataType`1.IsOfTypeFunction"/> is null.
            Otherwise returns false.
            </returns>
        </member>
        <member name="T:CMS.DataEngine.DataType">
            <summary>
            Data type definition
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataType.mTextSerializer">
            <summary>
            Serializer used to serialize and deserialize values of this data type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.TypeGroup">
            <summary>
            Name of the group that groups together types with similar behavior, such as integer, decimal, string etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.TypeAlias">
            <summary>
            System type alias (e.g. bool for Boolean, etc.)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.Type">
            <summary>
            System type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.FieldType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SqlType">
            <summary>
            SQL data type representation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SchemaType">
            <summary>
            Type representation in the XML schema of the data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SqlValueFormat">
            <summary>
            SQL value format. Default format is '{0}' to prevent SQL injection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SupportsTranslation">
            <summary>
            If true, the data type supports translation of the content
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.IsDefaultType">
            <summary>
            If true, the data type is considered default. Types marked as default are replaced only by default types in the type mapping tables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DbType">
            <summary>
            Database type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.TypeName">
            <summary>
            Represents database type name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.Hidden">
            <summary>
            If true, the data type is hidden
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.ConversionMethod">
            <summary>
            Returns the conversion method
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DefaultValueCode">
            <summary>
            Code of the default value for this type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.ObjectDefaultValue">
            <summary>
            Default value for this data type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.CodeValueFormat">
            <summary>
            Formatting code of the value for this type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.SpecialDefaultValues">
            <summary>
            List of special default values recognized by this type and treated as default value by the code
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.AllowEmpty">
            <summary>
            If true, the data type allows for nulls in the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.StringFormat">
            <summary>
            If defined, the given format is used to convert the value of this type to a string value. {0} represents the value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.GetFormatProvider">
            <summary>
            Function which gets a format provider for the given culture
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.HasConfigurableDefaultValue">
            <summary>
            Returns true if the type has a default value
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.AllowAsAliasSource">
            <summary>
            Returns true if the field can be used as an alias source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.AllowedObjectTypes">
            <summary>
            When configured, only allows data type for the given object types.
            Use case insensitive HashSet for the list of items
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.TextSerializer">
            <summary>
            Gets the <see cref="T:CMS.DataEngine.IDataTypeTextSerializer"/> instance for this data type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.UsableByType">
            <summary>
            Indicates whether the data type can be found by <see cref="M:CMS.DataEngine.DataTypeManager.GetDataType(System.Type)"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.UsableByFieldType">
            <summary>
            Indicates whether this data type can be used as <see cref="F:CMS.DataEngine.TypeEnum.Field"/> type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.UsableBySqlType">
            <summary>
            Indicates whether this data type can be used as <see cref="F:CMS.DataEngine.TypeEnum.SQL"/> type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.UsableBySchemaType">
            <summary>
            Indicates whether this data type can be used as <see cref="F:CMS.DataEngine.TypeEnum.Schema"/> type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.VariableSize">
            <summary>
            If true, the data type has variable size
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DefaultSize">
            <summary>
            Default size of the type, if the size is variable
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.MaxSize">
            <summary>
            Maximum size of the type, if the size is variable
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.MaxValueLength">
            <summary>
            Maximum value length
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.VariablePrecision">
            <summary>
            If true, the data type has variable precision
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.DefaultPrecision">
            <summary>
            Default precision of the type, if the precision is variable
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataType.MaxPrecision">
            <summary>
            Maximum precision of the type, if the precision is variable
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetSqlType(System.Int32,System.Int32)">
            <summary>
            Gets the SQL data type representation
            </summary>
            <param name="size">Data size</param>
            <param name="precision">Data precision</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetSqlValue(System.Object)">
            <summary>
            Gets the SQL value representation for this type
            </summary>
            <param name="value">Value to convert to SQL value</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetSqlValueString(System.Object)">
            <summary>
            Gets a string representation of the given value on SQL server
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.Convert(System.Object,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion of the type</param>
            <param name="defaultValue">Default value to return in case the conversion fails</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.ConvertToDbType(System.Object,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the value to its database representation.
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion of the type</param>
            <param name="defaultValue">Default value to return in case the conversion fails</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.IsValueOfType(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines whether given <paramref name="value"/> is of this data type.
            </summary>
            <param name="value">Object to be tested.</param>
            <param name="culture">Culture to tests object for.</param>
            <returns>True if object is of this data type, otherwise returns false.
            </returns>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetDefaultValueCode(System.String,System.Boolean)">
            <summary>
            Gets the code for the default value of this type in C# code
            </summary>
            <param name="explicitDefaultValue">Explicit default value to use</param>
            <param name="returnEmpty">If true, the method returns code even if default value representation is empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.GetString(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the string representation of the given value
            </summary>
            <param name="value">Value to convert</param>
            <param name="culture">Culture used for conversion to string</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.FormatValue(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Formats the given value
            </summary>
            <param name="value">Value to format</param>
            <param name="culture">Culture used for format</param>
        </member>
        <member name="M:CMS.DataEngine.DataType.IsAvailableForObjectType(System.String)">
            <summary>
            Returns true if the given data type is available for the given object type
            </summary>
            <param name="objectType">Object type to check</param>
        </member>
        <member name="T:CMS.DataEngine.DataTypeManager">
            <summary>
            Provides management of SQL data types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.MIN_DATETIME">
            <summary>
            Minimum DateTime value for date time data type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.MAX_DATETIME">
            <summary>
            Minimum DateTime value for date time data type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesByFieldType">
            <summary>
            Data types by field type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesBySqlType">
            <summary>
            Data types by SQL type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesByType">
            <summary>
            Data types by system type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.mDataTypesBySchemaType">
            <summary>
            Data types by schema type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.PLAIN">
            <summary>
            Represents the format string for a plain SQL value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.UNICODE">
            <summary>
            Represents the format string for a unicode text on SQL server
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.CODE_VALUE_FORMAT_STRING">
            <summary>
            Represents the format string for a string value in C# code
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.NULL">
            <summary>
            Represents null value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.numericTypes">
            <summary>
            Collection of recognized numeric types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataTypeManager.integerTypes">
            <summary>
            Collection of recognized numeric types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.FieldTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.VisibleFieldTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypes">
            <summary>
            Registered data types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesByFieldType">
            <summary>
            Registered data types by field type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesByType">
            <summary>
            Registered data types by system type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesBySqlType">
            <summary>
            Registered data types by field type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTypeManager.DataTypesBySchemaType">
            <summary>
            Registered data types by schema type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.EnsureFieldTypes(System.Collections.Generic.IEnumerable{System.String}@,System.Func{CMS.DataEngine.DataType,System.Boolean})">
            <summary>
            Ensures the list of field types
            </summary>
            <param name="fieldTypes">Resulting field types</param>
            <param name="condition">Condition for the data type to be included</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDataTypes(System.Func{CMS.DataEngine.DataType,System.Boolean})">
            <summary>
            Gets the data types matching the given condition
            </summary>
            <param name="condition">Data type condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterDataTypes(CMS.DataEngine.DataType[])">
            <summary>
            Registers the given data type to the system
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterDataTypesInternal(System.Boolean,CMS.DataEngine.DataType[])">
            <summary>
            Registers the given data type to the system
            </summary>
            <param name="defaultTypes">If true, the registered types are default types</param>
            <param name="types">Types to register</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterDataTypeInternal(CMS.DataEngine.DataType)">
            <summary>
            Registers the given data type
            </summary>
            <param name="type">Data type to register</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterType``1(CMS.Base.IGeneralIndexable{``0,CMS.DataEngine.DataType},``0,CMS.DataEngine.DataType)">
            <summary>
            Registers the given type within the given dictionary
            </summary>
            <param name="dictionary">Type dictionary</param>
            <param name="key">Type key</param>
            <param name="type">Type to register</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.EnsureSystemTypes">
            <summary>
            Registers the default supported data types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.RegisterSystemTypes">
            <summary>
            Registers the default data types to the system
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.ClearRegisteredTypes">
            <summary>
            Clears the registered field types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlType(System.String,System.Int32,System.Int32)">
            <summary>
            Gets column type for defined data type and size.
            </summary>
            <param name="dataType">Data type</param>
            <param name="size">Size of the type</param>
            <param name="precision">Precision of the type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetFieldType(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns form field data type from database column data type.
            Some sql types map to multiple field types that differ by size, e.g. nvarchar has more field data types that differ by size.
            Specify size to get more accurate result. By default max size for given sql type is used.
            </summary>
            <param name="sqlType">Database column data type</param>
            <param name="size">Specify the size of sql type to get accurate result</param>
            <param name="throwException">Indicates if exception should be thrown for unsupported SQL data type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlValue(System.Object)">
            <summary>
            Gets the value representation for a SQL query text.
            </summary>
            <param name="value">Value to be converted.</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlValue(CMS.DataEngine.TypeEnum,System.String,System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Sql type</param>
            <param name="value">Value to be converted.</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.ConvertToSystemType(CMS.DataEngine.TypeEnum,System.String,System.Object,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Converts the value to a proper data type
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Data type</param>
            <param name="value">Value to convert</param>
            <param name="culture">Culture to use for conversion</param>
            <param name="nullIfDefault">If true, and the resulting value is the default value, returns null</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetStringValue(CMS.DataEngine.TypeEnum,System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to a string value
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Data type</param>
            <param name="value">Value to convert</param>
            <param name="culture">Culture to use for conversion</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSqlValue(CMS.DataEngine.DataType,System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="type">Data type</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDataType(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Gets the data type settings by its SQL type
            </summary>
            <param name="typeEnum"></param>
            <param name="typeValue">SQL type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDataType(System.Type)">
            <summary>
            Gets the data type by the system type
            </summary>
            <param name="type">System type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetSystemType(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Gets the system type by the field type
            </summary>
            <param name="typeEnum">Type to search</param>
            <param name="typeValue">Field type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDefaultType(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Gets the default type for the given type by its system type
            </summary>
            <param name="typeEnum">Type to use</param>
            <param name="typeValue">Data type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsVariableLengthType(System.String)">
            <summary>
            Returns TRUE, if the given type corresponds to variable-length column. A variable-length column can be one
            of the following data types: varchar, nvarchar, varchar(max), nvarchar(max), varbinary, varbinary(max),
            text, ntext, image, sql_variant, and xml.
            </summary>
            <param name="dataType">Data type</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetDefaultStringValue(System.String,System.Object)">
            <summary>
            Returns given default value represented as string for further usage
            </summary>
            <param name="dataType">SQL data type</param>
            <param name="defaultValue">default value representation in obtained directly from SQL database</param>
            <returns>default value as string</returns>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsKnownType(System.Type)">
            <summary>
            Returns true, if the given type is a registered known type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.SupportsTranslation(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true if the given field type supports translation
            </summary>
            <param name="typeEnum">Type to search</param>
            <param name="typeValue">DataType of the field</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsValidDate(System.DateTime)">
            <summary>
            Returns if start date of the scheduled interval is valid.
            </summary>
            <param name="date">Start date of the scheduled interval</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsString(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is a string type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsNumber(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is a number type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsInteger(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is an integer type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.IsType``1(CMS.DataEngine.TypeEnum,System.String)">
            <summary>
            Returns true, if the given type is a GUID type
            </summary>
            <param name="typeEnum">Type enum</param>
            <param name="typeValue">Type value</param>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetFieldGroups">
            <summary>
            Gets the registered field groups
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTypeManager.GetFieldTypes(System.String,System.Boolean)">
            <summary>
            Returns list of all field types for the given object type
            </summary>
            <param name="objectType">Object type, if not specified or null, all field types are returned</param>
            <param name="onlyVisible">If true, only visible field types are provided</param>
        </member>
        <member name="T:CMS.DataEngine.DefaultDataTypeTextSerializer">
            <summary>
            Class responsible for serialization and deserialization of <see cref="T:CMS.DataEngine.DataType"/> values to text.
            Serializer is used as a fallback when no serializer is set for given data type.
            </summary>
            <seealso cref="M:CMS.DataEngine.DataTypeManager.ConvertToSystemType(CMS.DataEngine.TypeEnum,System.String,System.Object,System.Globalization.CultureInfo,System.Boolean)"/>
        </member>
        <member name="M:CMS.DataEngine.DefaultDataTypeTextSerializer.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.DataEngine.DefaultDataTypeTextSerializer"/>.
            </summary>
            <param name="fieldType">Data type of the values the serializer will be used for.</param>
            <seealso cref="P:CMS.DataEngine.DataType.FieldType"/>
        </member>
        <member name="M:CMS.DataEngine.DefaultDataTypeTextSerializer.Deserialize(System.String)">
            <summary>
            Deserialize <paramref name="text"/> into desired object.
            </summary>
            <param name="text">Text to be deserialized.</param>
        </member>
        <member name="M:CMS.DataEngine.DefaultDataTypeTextSerializer.Serialize(System.Object)">
            <summary>
            Serializes <paramref name="value"/> into text.
            </summary>
            <param name="value">Value to be serialized.</param>
        </member>
        <member name="T:CMS.DataEngine.IDataTypeTextSerializer">
            <summary>
            Defines contract for serialization and deserialization of <see cref="T:CMS.DataEngine.DataType"/> values to text.
            </summary>
            <remarks>Used for saving values in BizForm definitions.</remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataTypeTextSerializer.Serialize(System.Object)">
            <summary>
            Serializes <paramref name="value"/> into text.
            </summary>
            <param name="value">Value to be serialized.</param>
            <exception cref="T:System.ArgumentException">Thrown when value is not of expected type.</exception>
        </member>
        <member name="M:CMS.DataEngine.IDataTypeTextSerializer.Deserialize(System.String)">
            <summary>
            Deserialize <paramref name="text"/> into desired object.
            </summary>
            <param name="text">Text to be deserialized.</param>
        </member>
        <member name="T:CMS.DataEngine.TypeEnum">
            <summary>
            Enumeration of the types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeEnum.SQL">
            <summary>
            SQL server type, e.g. "nvarchar(max)"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeEnum.Field">
            <summary>
            Field type, e.g. "longtext"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TypeEnum.Schema">
            <summary>
            Schema type, e.g. "xs:string"
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ITSqlParserFactory">
            <summary>
            Describes factory capable of providing T-SQL parser.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITSqlParserFactory.GetSqlParser">
            <summary>
            Returns instance of T-SQL parser.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryMacros">
            <summary>
            Query expressions
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.VALUES">
            <summary>
            Values query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.OUTPUT">
            <summary>
            Output from non query statement. Allows to return data from inserted and deleted rows.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.COLUMNS">
            <summary>
            Columns query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.DISTINCT">
            <summary>
            Distinct query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.TOPN">
            <summary>
            Top N query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.ORDERBY">
            <summary>
            Order by query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.SOURCE">
            <summary>
            Source query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.WHERE">
            <summary>
            Where query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.HAVING">
            <summary>
            Having query macro
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryMacros.GROUPBY">
            <summary>
            Group by query macro
            </summary>   
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Where">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.OrderBy">
            <summary>
            Order by
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.TopN">
            <summary>
            Top N records
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Columns">
            <summary>
            List of columns to select
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Source">
            <summary>
            Query source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.DefaultSource">
            <summary>
            Default query source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Distinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.GroupBy">
            <summary>
            List of columns to group by
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Having">
            <summary>
            Where condition for the GroupBy clause
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Values">
            <summary>
            List of values for the update / insert query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Output">
            <summary>
            Output from non query statement. Allows to return data from inserted and deleted rows.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryMacros.Total">
            <summary>
            Total items expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryMacros.ResolveMacros(System.String)">
            <summary>
            Resolves the given macros within a query
            </summary>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.QueryMacros.ToString">
            <summary>
            Gets the string representation of the where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryMacros.GetPart(System.String,System.Object)">
            <summary>
            Gets the part of the string representation
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="T:CMS.DataEngine.QueryScopeEnum">
            <summary>
            Defines scope where part of a query is used.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryScopeEnum.None">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryScopeEnum.Columns">
            <summary>
            Part of a query is used to select columns.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryScopeEnum.Where">
            <summary>
            Part of a query is used as WHERE clause.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryScopeEnum.OrderBy">
            <summary>
            Part of a query is used as ORDER BY clause.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryScopeEnum.Query">
            <summary>
            Query is regular query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlDebug">
            <summary>
            SQL debug methods
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlDebug.DebugConnections">
            <summary>
            Debug SQL connections?
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlDebug.Settings">
            <summary>
            Debug settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlDebug.DebugCurrentRequest">
            <summary>
            Debug current request queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlDebug.CurrentRequestLog">
            <summary>
            Current request log.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.Init">
            <summary>
            Initializes the SqlDebug
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.GetDebugSettings">
            <summary>
            Gets the debug settings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.FinalizeData(System.Data.DataTable)">
            <summary>
            Finalizes the debug data
            </summary>
            <param name="dt">Data</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.NewLogTable">
            <summary>
            Creates a new SQL log table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogInformation(System.String,System.String)">
            <summary>
            Logs Sql debug information
            </summary>
            <param name="title">Information title</param>
            <param name="text">Information text</param>
            <returns>Returns the new log item</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryStart(System.String,System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs query start. Logs the query to the file and to current request log for debugging.
            </summary>
            <param name="queryName">Query name</param>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="conn">Connection for the query execution</param>
            <returns>Returns the new log item</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryEnd(System.Object)">
            <summary>
            Logs the end of the query processing.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryToFile(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs the query.
            </summary>
            <param name="queryText">Query text to log</param>
            <param name="parameters">Query parameters</param>
            <param name="conn">Connection used for this query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogQueryEndToFile(System.Object,System.String@,System.Int32@)">
            <summary>
            Logs the end of the query processing.
            </summary>
            <param name="result">Result object</param>
            <param name="resultsString">Returning the results string</param>
            <param name="totalSize">Returning the total size of results</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.LogConnectionOperation(System.String,System.Boolean,CMS.DataEngine.IDataConnection)">
            <summary>
            Logs the connection operation to the query log.
            </summary>
            <param name="operation">Connection operation</param>
            <param name="allowBeforeQuery">If true, the operation is allowed before the query when the query is open</param>
            <param name="conn">Connection around the operation</param>
        </member>
        <member name="M:CMS.DataEngine.SqlDebug.SettingsReset_Execute(System.Object,CMS.Base.DebugEventArgs)">
            <summary>
            Handles reset of debug settings.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Data.SqlClient.SqlException"/> class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlExceptionExtensions.SQL_EXCEPTION_DEADLOCK_ERROR_CODE">
            <summary>
            Error code of exception which indicates a database deadlock
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlExceptionExtensions.HasDeadlockOccured(System.Data.SqlClient.SqlException)">
            <summary>
            Returns true when given <see cref="T:System.Data.SqlClient.SqlException"/> is caused by deadlock.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlExecutionHelper">
            <summary>
            Contains utility methods for SQL execution retries.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlExecutionHelper.ExecuteWithDeadlockRetry``1(System.Func{``0},System.Int32)">
            <summary>
            <para>
            Executes the given <paramref name="executionFunc"/> while catching exception resulting from the execution.
            If the exception thrown contains <see cref="T:System.Data.SqlClient.SqlException"/> as its inner exception and the <see cref="P:System.Data.SqlClient.SqlException.Number"/>
            equals to <c>1205</c> (deadlock), the execution is retried.
            </para>
            <para>
            The execution is never retried if <see cref="P:CMS.DataEngine.CMSTransactionScope.IsInTransaction"/> indicates the execution is part of a transaction.
            </para>
            <para>
            If the retry limit is reached, the exception resulting from the last execution is re-thrown.
            </para>
            </summary>
            <typeparam name="TResult">Return type of the <paramref name="executionFunc"/>.</typeparam>
            <param name="executionFunc">Function to be executed.</param>
            <param name="retryCount">Limit of retry executions. If the limit is reached, the exception resulting from the last execution is re-thrown.</param>
            <returns>Return the result of <paramref name="executionFunc"/> if its execution succeeds before <paramref name="retryCount"/> limit is reached.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="executionFunc"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.SqlExecutionHelper.ExecuteWithDeadlockRetryInternal``1(System.Func{``0},System.Int32)">
            <summary>
            <para>
            Executes the given <paramref name="executionFunc"/> while catching exception resulting from the execution.
            If the exception thrown contains <see cref="T:System.Data.SqlClient.SqlException"/> as its inner exception and the <see cref="P:System.Data.SqlClient.SqlException.Number"/>
            equals to <c>1205</c> (deadlock), the execution is retried.
            </para>
            <para>
            The execution is never retried if <see cref="P:CMS.DataEngine.CMSTransactionScope.IsInTransaction"/> indicates the execution is part of a transaction.
            </para>
            <para>
            If the retry limit is reached, the exception resulting from the last execution is re-thrown.
            </para>
            </summary>
            <typeparam name="TResult">Return type of the <paramref name="executionFunc"/>.</typeparam>
            <param name="executionFunc">Function to be executed.</param>
            <param name="retryCount">Limit of retry executions. If the limit is reached, the exception resulting from the last execution is re-thrown.</param>
            <returns>Return the result of <paramref name="executionFunc"/> if its execution succeeds before <paramref name="retryCount"/> limit is reached.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="executionFunc"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.SqlHelper">
            <summary>
            Class to provide common SQL methods.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.NO_COLUMNS">
            <summary>
            Constant for no columns.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.NO_TOTALRECORDS">
            <summary>
            Value for total records input to not get the total amount of data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.NO_DATA_WHERE">
            <summary>
            Where condition representing no data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ALL_DATA_WHERE">
            <summary>
            Where condition representing all data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.MAX_PARAM_LENGTH">
            <summary>
            Maximum parameter length to log.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.MISSING_VALUE">
            <summary>
            Unknown value.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.DEFAULT_DB_SCHEMA">
            <summary>
            Default db schema.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ORDERBY_DESC">
            <summary>
            Suffix for the descending order
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ORDERBY_ASC">
            <summary>
            Suffix for the ascending order
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.COLUMNS_ALL">
            <summary>
            Represents all columns within given query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.DefaultSQLInlineLimit">
            <summary>
            Default inline limit for SQL lists. When the number of values is below this number, the lists on SQL, e.g. IN (x, y, z), are evaluated as inline lists.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.UPDATE_FORMAT">
            <summary>
            Format string for the update value expression
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.INSERT_FORMAT">
            <summary>
            Format string for the insert value expression
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SQL_OBJECT_NAME_DELIMITER">
            <summary>
            Represents delimiter between object names in SQL syntax
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SQL_VALUES">
            <summary>
            Values in SQL syntax
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_SELECT">
            <summary>
            General select SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_INSERT">
            <summary>
            General insert SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_UPDATE">
            <summary>
            General update SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_UPSERT">
            <summary>
            General upsert (update/insert) SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.GENERAL_DELETE">
            <summary>
            General delete SQL statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.SELECT_NULL">
            <summary>
            Empty select statement
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.CommentsRegEx">
            <summary>
            Regex matching comments within a SQL query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.COLUMNS_ALIAS_PATTERN">
            <summary>
            Regex pattern for the column alias
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.ColumnAliasRegEx">
            <summary>
            Regex matching column alias within a column expression
            </summary>
            Groups:                                                            (1: alias first               )                                   (2: alias last                   )
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.TABLE_IS_FROM_CMS_DB">
            <summary>
            Name of the property to flag a table to be originated from database
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.TABLE_CONTAINS_EXTERNAL_DATA">
            <summary>
            Name of the property to flag a table which contains external data
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHelper.AllowPartialUpdates">
            <summary>
            Returns true if the data engine allows partial updates to database (updates only fields which values have changed)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.RunningQueries">
            <summary>
            Counter of running queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.IntegerTableType">
            <summary>
            Returns type for User-defined integer SQL type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.OrderedIntegerTableType">
            <summary>
            Returns type for User-defined integer SQL type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlHelper.SchemaNameRegEx">
            <summary>
            Regular expression for removing schema from DB object name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetParamCacheString(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Gets the parameters string.
            </summary>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetParamString(CMS.DataEngine.QueryDataParameters,System.String,System.Int32@)">
            <summary>
            Gets the parameters string.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="separator">Separator</param>
            <param name="size">Size of all objects</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetResultsString(System.Object,System.Int32@)">
            <summary>
            Gets the results as a string for log.
            </summary>
            <param name="result">Result object</param>
            <param name="totalSize">Total size of the result</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetRowNumber(System.String,System.String)">
            <summary>
            Gets the row number expression
            </summary>
            <param name="orderBy">Order by expression</param>
            <param name="partitionBy">Partition by expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetRound(System.String,System.Int32)">
            <summary>
            Gets the round expression
            </summary>
            <param name="value">Value expression</param>
            <param name="places">Places to round to</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCast(System.String,System.String)">
            <summary>
            Get the CAST expression.
            </summary>
            <param name="value">Value to be casted</param>
            <param name="type">Type the value should be casted to</param>
            <example>
                <code>
                GetCast("ActivityValue", "FLOAT")
                </code>
            returns "CAST(ActivityValue AS INT)"
            </example>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ApplyOver(System.String,System.String)">
            <summary>
            Applies the over clause to the given expression
            </summary>
            <param name="expression">Expression</param>
            <param name="over">Over clause. When null, over clause is not generated at all, otherwise it is generated even when value is an empty string, in such case " OVER ()" is generated</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetAggregation(System.String,CMS.DataEngine.AggregationType)">
            <summary>
            Gets the aggregation expression from the given expression
            </summary>
            <param name="expression">Expression</param>
            <param name="type">Aggregation type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetValueExpression(System.String)">
            <summary>
            Gets the value expression from the given expression
            </summary>
            <param name="expression">Expression to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetParameterName(System.String)">
            <summary>
            Gets the parameter name
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CheckQueryTypeForTextGeneration(CMS.DataEngine.QueryTypeEnum,System.String)">
            <summary>
            Checks if the given query type supports generating of the query text. If not, throws an exception
            </summary>
            <param name="type">Query type</param>
            <param name="queryName">Query name</param>
            <exception cref="T:System.NotSupportedException">When query type does not support generating of the query text</exception>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetJoinType(CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Gets the join expression
            </summary>
            <param name="joinType">Join type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetJoin(System.String,System.String,System.String,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Gets the join expression
            </summary>
            <param name="left">Left side source</param>
            <param name="right">Right side source</param>
            <param name="condition">Condition</param>
            <param name="joinType">Join type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureFullName(System.String,System.String)">
            <summary>
            Ensures full name of the given column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetComment(System.String,System.Boolean)">
            <summary>
            Gets a multiline SQL comment for simple input text (must not contain any open comment sequence)
            </summary>
            <remarks>
            Input text with comment sequence could cause an invalid SQL syntax.
            </remarks>
            <param name="text">Comment text</param>
            <param name="newLine">If true, new line is added before the comment</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveComments(System.String)">
            <summary>
            Removes single line and simple multiline comments from a SQL query
            </summary>
            <remarks>
            Multiline comments with nested comments won't be removed correctly and could cause an invalid SQL syntax
            </remarks>
            <param name="query">SQL query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.QueriesEqual(System.String@,System.String@,System.Boolean)">
            <summary>
            Returns true if two queries equal by their content. Ignores extra whitespaces and comments within the comparison
            </summary>
            <param name="query1">First query</param>
            <param name="query2">Second query</param>
            <param name="returnDifference">If true, the difference (remainders that don't match) are returned through original values</param>
            <exception cref="T:System.ArgumentNullException">When query parameter is null</exception>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.StandardizeQuery(System.String)">
            <summary>
            Standardizes a query so the spaces are standardized and comments are removed
            </summary>
            <param name="query">Query to standardize</param>
            <exception cref="T:System.ArgumentNullException">When query is null</exception>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.UnionQueries(System.String[])">
            <summary>
            Returns the query created as an UNION ALL of given queries.
            </summary>
            <param name="queries">Queries to union</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.UnionQueries(System.String[],System.Boolean)">
            <summary>
            Returns the query created as an UNION of the given queries.
            </summary>
            <param name="queries">Queries to union</param>
            <param name="unionAll">Union all records (no distinct)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IntersectQueries(System.String[])">
            <summary>
            Returns the query created as an INTERSECT of the given queries.
            </summary>
            <param name="queries">Queries to intersect</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ExceptQueries(System.String[])">
            <summary>
            Returns the query created as an EXCEPT of the given queries.
            </summary>
            <param name="queries">Queries to except</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CombineQueries(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Combines the given queries with the operators
            </summary>
            <param name="queries">Queries to merge</param>
            <param name="operators">Operators between queries, for lower number of operators than necessary uses the last operator for the remaining queries. Use one operator in case you want all operators to be the same.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AppendQuery(System.String,System.String,System.String)">
            <summary>
            Combines the given queries with the operator
            </summary>
            <param name="op">Operator between queries</param>
            <param name="query">Original query</param>
            <param name="append">Query to append</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PreprocessQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Preprocesses the give query.
            </summary>
            <param name="query">Query to preprocess</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PreparePagedQuery(System.String,CMS.DataEngine.QueryMacros,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Prepares the query for paging, adds additional system columns and updates the columns list.
            </summary>
            <param name="queryText">Query text</param>
            <param name="macros">Query expressions</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get</param>
            <param name="getTotal">If true, the query should get the total number of records</param>
            <param name="subQuery">If true, the query is used as a sub-query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetTotalColumn(System.String,System.Boolean)">
            <summary>
            Gets the total column expression
            </summary>
            <param name="totalExpression">Total expression</param>
            <param name="subQuery">If true, the query is a sub-query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.HandleEmptyColumns(System.String@)">
            <summary>
            Handles the empty columns constant by replacing it with empty string
            </summary>
            <param name="columns">Columns to process</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsNoColumns(System.String)">
            <summary>
            Returns true if the given columns variable represents no columns
            </summary>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PrepareWithQuery(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Prepares a nested query using WITH for further evaluation
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Top N</param>
            <param name="extraColumns">Columns to get</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWithQuery(System.String)">
            <summary>
            Gets a nested query using WITH for further evaluation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.PrepareNestedQuery(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Prepares a nested query using WITH for further evaluation
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Top N</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetNestedQuery(System.String,System.String)">
            <summary>
            Gets a nested query using nested SELECT for further evaluation
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSelectQuery(System.String,System.String)">
            <summary>
            Gets the general select query
            </summary>
            <param name="source">Query source</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ProcessPagedResults(System.Data.DataSet,System.Int32@)">
            <summary>
            Processes the page results - Removes the system columns and gets the total records number.
            </summary>
            <param name="ds">DataSet with the results</param>
            <param name="totalRecords">Returns the total records number</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCase(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Boolean)">
            <summary>
            Returns statement for the CASE expressions. 
            </summary>
            <param name="cases">IEnumerable with KeyValuePair where key is a boolean expression (where condition) and value is result expression</param>
            <param name="elseCase">Expression for the else case</param>
            <param name="escapeString">Determines whether escape cases' values or not</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetConvert(System.String,System.String)">
            <summary>
            Gets the convert expression.
            </summary>
            <param name="value">Value to be converted</param>
            <param name="type">Type the value should be converted to</param>
            <example>
                <code>
                    GetConvert("ActivityValue", "INT")
                </code>
            returns CONVERT(INT, ActivityValue)
            </example>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetIsNumeric(System.String)">
            <summary>
            Gets the ISNUMERIC expression.
            </summary>
            <example>
                <code>
                GetIsNumeric("ActivityValue")
                </code>
            returns ISNUMERIC(ActivityValue)
            </example>
            <param name="value">Value to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CheckPagedQuery(CMS.DataEngine.QueryParameters)">
            <summary>
            Checks if the given query is valid to be used as paged query
            </summary>
            <param name="query">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCaseOrderBy(System.String[])">
            <summary>
            Returns order by statement based on case boolean expressions. First case has highest priority.
            </summary>
            <param name="cases">IEnumerable with boolean expressions (where conditions)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCaseOrderBy(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns order by statement based on case boolean expressions. First case has highest priority.
            </summary>
            <param name="cases">IEnumerable with boolean expressions (where conditions)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildIntTable(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a table-valued parameter for database calls. Is intended for usage with [Type_CMS_IntegerTable] database type.
            </summary>
            <remarks>
            Returns empty enumeration if there are no values provided. The database doesn't ever expect to get empty table, 
            it needs not to add the parameter at all. So when calling this method to add an parameter to a query, 
            check this for an empty enumeration at first and do not add the parameter at all in that case.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildOrderedIntTable(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a table-valued parameter for database calls. Is intended for usage with [Type_CMS_OrderedIntegerTable] database type.
            </summary>
            <remarks>
            Returns empty enumeration if there are no values provided. The database doesn't ever expect to get empty table, 
            it needs not to add the parameter at all. So when calling this method to add an parameter to a query, 
            check this for an empty enumeration at first and do not add the parameter at all in that case.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildBigIntTable(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets a table-valued parameter for database calls. Is intended for usage with [Type_CMS_BigIntTable] database type.
            </summary>
            <remarks>
            Returns empty enumeration if there are no values provided. The database doesn't ever expect to get empty table, 
            it needs not to add the parameter at all. So when calling this method to add an parameter to a query, 
            check this for an empty enumeration at first and do not add the parameter at all in that case.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildGuidTable(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a table-valued parameter for database calls. Is intended for usage with [Type_CMS_GuidTable] database type.
            </summary>
            <remarks>
            Returns empty enumeration if there are no values provided. The database doesn't ever expect to get empty table, 
            it needs not to add the parameter at all. So when calling this method to add an parameter to a query, 
            check this for an empty enumeration at first and do not add the parameter at all in that case.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.BuildStringTable(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a table-valued parameter for database calls. Is intended for usage with [Type_CMS_StringTable] database type.
            </summary>
            <remarks>
            Returns empty enumeration if there are no values provided. The database doesn't ever expect to get empty table, 
            it needs not to add the parameter at all. So when calling this method to add an parameter to a query, 
            check this for an empty enumeration at first and do not add the parameter at all in that case.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the condition matching values of the column between from and to
            </summary>
            <param name="column">Column name</param>
            <param name="from">From value</param>
            <param name="to">To value</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddWhereCondition(System.String,System.String,System.String)">
            <summary>
            Adds where condition to the expression.
            </summary>
            <param name="where">Where condition</param>
            <param name="condition">Condition to add</param>
            <param name="op">Operator, no spaces required. e.g. "OR"</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddWhereCondition(System.String,System.String)">
            <summary>
            Adds where condition to the expression using AND operator.
            </summary>
            <param name="where">Where condition</param>
            <param name="condition">Condition to add</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereInCondition``1(System.String,System.Collections.Generic.ICollection{``0},System.Boolean,System.Boolean)">
            <summary>
            Returns where condition in SQL syntax for collection of items.
            </summary>
            <remarks>The following rules are applied:
            <list type="bullet">
            <item><description>Duplicate values in collection are ignored</description></item>
            <item><description>Duplicate values are compared with case sensitivity</description></item>
            <item><description>Null or empty collection generates simplified where condition with dependence on negation parameter ("0 = 1"/"1 = 1")</description></item>
            <item><description>Collection with single item results in condition with equality comparer (depend on negation parameter e.g.: "="/"&lt;&gt;" instead of "IN"/"NOT IN")</description></item>
            <item><description>Single null value (depends on allowNullValue parameter) results in NULL equality comparer ("IS" or "IS NOT")</description></item>
            <item><description>Unicode prefix is automatically added for string values (N'Text')</description></item>
            <item><description>This method cannot be used for <see cref="T:System.Data.DataTable"/> select condition.</description></item>
            </list>
            </remarks>
            <example>
            <code>
            string whereCondition = GetWhereInCondition("ColumName", new List&lt;int&gt;() { 1, 10 , 50}, true);
            </code>
            Output:
            "ColumnName NOT IN (1, 10, 50)"
            </example>
            <typeparam name="T">Define value type. Only <see cref="T:System.Int32"/>, <see cref="T:System.String"/> or <see cref="T:System.Guid"/> are supported. Other types are considered as strings and could cause an invalid SQL syntax</typeparam>
            <param name="columnName">Column name. The column name is not encapsulated or escaped. Proper format must be ensured outside of this method.</param>
            <param name="values">Collection of values. Null or empty values generates simple where condition with dependence on negation parameter (0 = 1 or  1 = 1) </param>
            <param name="negation">Indicates whether "NOT IN"/"&lt;&gt;" should be used</param>
            <param name="allowNullValue">Indicates whether null values should be considered as database NULL value type</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereCondition``1(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="useUnicode">Indicates if the preposition 'N' should be used for string values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereConditionInternal``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Creates the where condition for the array of values.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="columnName">Column name</param>
            <param name="values">Values</param>
            <param name="useUnicode">Indicates if the preposition 'N' should be used for string values</param>
            <param name="negation">Indicates if NOT IN should be used</param>
            <param name="memoryDataSet">Indicates whether where condition format is for filter or SQL syntax</param>
            <param name="allowNullValue">Indicates whether null values should be considered as database NULL value type</param>
            <param name="specificType">Allows set other type than defined by generic value (backward compatibility)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetWhereConditionStringValue``1(System.Object,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Gets where condition value.
            </summary>
            <param name="value">Where condition value</param>
            <param name="useUnicode">Indicates if the preposition 'N' should be used</param>
            <param name="memoryDataSet">Indicates whether where condition format is for filter or SQL syntax</param>
            <param name="specificType">Allows set other type than defined by generic value (Backward compatibility)</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EscapeLikeQueryPatterns(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Escapes characters for query which use LIKE pattern.
            </summary>
            <param name="input">Input text</param>
            <param name="escapeUnderScore">Indicates whether underscore character should be escaped</param>
            <param name="escapePercentage">Indicates whether percentage character should be escaped</param>
            <param name="escapeSquareBrackets">Indicates whether square brackets characters should be escaped</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSafeQueryString(System.String)">
            <summary>
            Returns safe sql query string - escapes apostrophes and escapes wildcard characters _, %, [].
            </summary>
            <param name="input">String to escape</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSafeQueryString(System.String,System.Boolean)">
            <summary>
            Returns safe sql query string - escapes apostrophes and optionally escapes wildcard characters _, %, [].
            </summary>
            <param name="input">String to escape</param>
            <param name="escapeWildcards">Determines whether the wildcards characters should be escaped</param>        
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSqlValue(System.Object)">
            <summary>
            Gets the value representation for a SQL query text
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetDataRecordSqlValue(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord})">
            <summary>
            Gets the value representation for a SQL query text retrieved from collection of <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EscapeLikeText(System.String)">
            <summary>
            Escapes characters for query which use LIKE pattern (%, _, [, ] and ^).
            </summary>
            <param name="text">Original input</param>
            <returns>The escaped string that can be used as pattern in a LIKE expression</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EscapeQuotes(System.String)">
            <summary>
            Escapes single quotes in string value used for SQL query (value's => value''s).
            </summary>
            <param name="text">Original input text</param>
            <returns>The escaped string that can be used as safe string in SQL query</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddColumnAlias(System.String,System.String,System.Boolean)">
            <summary>
            Adds the column alias to the given expression
            </summary>
            <param name="expression">Expression</param>
            <param name="alias">Alias</param>
            <param name="ensureBrackets">If true, the expression is encapsulated in brackets in case it is a complex expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetCaseColumn(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Returns statement for column with case expressions. 
            This statement is used for evaluating a set of boolean expressions to determine the result. First case has highest priority.
            </summary>
            <param name="cases">IEnumerable with KeyValuePair where key is a boolean expression (where condition) and value is result expression</param>
            <param name="asColumnName">Specifies column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddColumns(System.String,System.String,System.Boolean)">
            <summary>
            Adds the columns.
            </summary>
            <param name="columns">Original columns</param>
            <param name="addColumns">Columns to add</param>
            <param name="treatEmptyAsAll">If true, empty source columns are treated as all columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.MergeColumns(System.String,System.String,System.Func{System.String,System.String},System.Boolean,System.Func{System.String,System.String})">
            <summary>
            Merges the sets of columns and makes sure that each column in the result is present only once.
            </summary>
            <param name="columns">Original column list</param>
            <param name="addColumns">List of columns to add</param>
            <param name="uniqueKey">Function which provides unique key for the merging process (if two column keys match, the merging process allows only first column)</param>
            <param name="extraColumns">Indicates if columns which are not part of '*' expression are merged to the existing list of columns</param>
            <param name="transformation">Column transformation</param>
            <returns>Returns the list separated by dashes for use in SQL query</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.MergeColumns(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.Boolean,System.Func{System.String,System.String})">
            <summary>
            Merges the sets of columns and makes sure that each column in the result is present only once.
            </summary>
            <param name="columns">Original column list</param>
            <param name="addColumns">List of columns to add</param>
            <param name="uniqueKey">Function which provides unique key for the merging process (if two column keys match, the merging process allows only first column)</param>
            <param name="extraColumns">Indicates if columns which are not part of '*' expression are merged to the existing list of columns</param>
            <param name="transformation">Column transformation</param>
            <returns>Returns the list separated by dashes for use in SQL query</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddColumnList(System.Collections.Generic.List{System.String},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.IEnumerable{System.String},System.Boolean@,System.Func{System.String,System.String})">
            <summary>
            Adds the given list of columns to the existing list
            </summary>
            <param name="columns">List of columns</param>
            <param name="added">Added columns</param>
            <param name="addCols">Columns to add</param>
            <param name="noColumns">Returns the flag whether some columns were added</param>
            <param name="uniqueKey">Unique column key function to identify duplicate columns. If not specified, matches the whole column expression.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetColumnName(System.String)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumn(System.String,System.String@,System.String@)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
            <param name="expression">Column expression</param>
            <param name="alias">Returns column alias or null in case column does not have any alias</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.JoinColumnList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins the given column list. Columns are separated by comma.
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumnList(System.String)">
            <summary>
            Parses the given list of columns to a list (can handle also advanced columns containing functions like ISNULL(A, B) etc.).
            If <paramref name="columns"/> contains <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/>, then <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/> won't be present in result list.
            </summary>
            <param name="columns">List of columns separated with commas</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumnListEvenNoColumnMacro(System.String)">
            <summary>
            Parses the given list of columns to a list (can handle also advanced columns containing functions like ISNULL(A, B) etc.).
            If <paramref name="columns"/> contains <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/>, then <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/> will be present in result list.        
            </summary>
            <param name="columns">List of columns separated with commas</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ParseColumnList(System.String,System.Boolean,System.Boolean)">
            <summary>
            Parses the given list of columns to a list (can handle also advanced columns containing functions like ISNULL(A, B) etc.).
            </summary>
            <param name="columns">List of columns separated with commas</param>
            <param name="removeSquareBrackets">Indicates whether square brackets should be removed</param>
            <param name="returnNoColumnsMacro">Indicates if the <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/> in <paramref name="columns"/> will be present in result list, by default no</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsEncapsulatedBySquareBrackets(System.String)">
            <summary>
            Returns true if column is encapsulated by square brackets, otherwise return false
            </summary>
            <param name="column">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveSquareBrackets(System.String)">
            <summary>
            Removes square brackets from column name
            </summary>
            <param name="column">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddSquareBrackets(System.String)">
            <summary>
            Adds square brackets to column name. Checks whether bracket are not already added
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveMultipleSquareBrackets(System.String)">
            <summary>
            Removes square brackets in combination of table name and column name.
            For example: [DatabaseName].[SchemaName].[TableName].[ColumnName]
            </summary>
            <returns>
            Expression where each part has stripped brackets
            For example: DatabaseName.SchemaName.TableName.ColumnName
            </returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddMultipleSquareBrackets(System.String)">
            <summary>
            Adds square brackets to combination of table name and column name.
            For example: DatabaseName.SchemaName.TableName.ColumnName
            </summary>
            <returns>
            Expression where each part is inside the brackets
            For example: [DatabaseName].[SchemaName].[TableName].[ColumnName]
            </returns>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetColumnListItem(System.String,System.Boolean)">
            <summary>
            Transforms the item of the column list
            </summary>
            <param name="item">Item to translate</param>
            <param name="returnNoColumns">Indicates if the <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/> as <paramref name="item"/> will be returned as column, by default no</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureMissingColumns(System.Collections.Generic.ICollection{CMS.DataEngine.QueryColumnList})">
            <summary>
            Ensures the missing columns in the given collection of <see cref="T:CMS.DataEngine.QueryColumnList"/> instances
            and removes all occurrences of all columns selector in them
            </summary>
            <remarks>
            This method is useful when doing e.g. UNION on two queries and the same columns are needed
            in both queries.
            </remarks>
            <example>
            <para>
            Collection A has { A, B as C, D } and collection B has { X, D, C } after calling this method result is
            A has { A, B as C, D, NULL AS X } and B has { X, D, C, NULL AS A }.
            </para>
            <para>
            Another example, collection A has { *, A } and B has { X }
            result is A has { A , NULL as X } and B has { X, NULL as A }.
            </para>
            </example>
            <param name="columnLists">Input lists of columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsSingleColumn(System.String)">
            <summary>
            Returns true, if the query output is a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.AddOrderBy(System.String,System.String,CMS.DataEngine.OrderDirection)">
            <summary>
            Adds the order by to an existing one.
            </summary>
            <param name="orderBy">Original order by</param>
            <param name="add">Order by to add</param>
            <param name="dir">Order direction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureDescendingOrderByDirection(System.String)">
            <summary>
            Ensures descending order by direction
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureAscendingOrderByDirection(System.String)">
            <summary>
            Ensures ascending order by direction
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.EnsureOrderByDirection(System.String,CMS.DataEngine.OrderDirection)">
            <summary>
            Ensures the given order by direction
            </summary>
            <param name="columnName">Column name</param>
            <param name="dir">Order direction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetOrderByColumnName(System.String)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetOrderByColumnName(System.String,System.String@)">
            <summary>
            Gets the column name from the given SQL column expression
            </summary>
            <param name="column">Column to parse</param>
            <param name="suffix">Outputs the order by suffix for the column</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.OrderByContains(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the order by expression contains column sorted the specified way.
            </summary>
            <param name="orderBy">Order by expression to check</param>
            <param name="column">Column to check</param>
            <param name="ascending">Direction</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ReverseOrderBy(System.String)">
            <summary>
            Reverses the order by string by toggling between ASC and DESC.
            </summary>
            <param name="orderBy">Original ORDER by</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.RemoveOwner(System.String)">
            <summary>
            Removes the owner from the given object name.
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetSafeOwner(System.String)">
            <summary>
            Returns safe string representing DB owner.
            </summary>
            <param name="owner">DB Owner</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.GetDBSchemaOrDefault">
            <summary>
            Returns DB object scheme from settings or default value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsMissing(System.Object)">
            <summary>
            Returns true if the given value is missing or null.
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.IsMissingOrNull(System.Object)">
            <summary>
            Returns true if the given value is missing or null.
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.ObjectsEqual(System.Object,System.Object)">
            <summary>
            Returns true if two objects are equal.
            </summary>
            <param name="obj1">Object 1</param>
            <param name="obj2">Object 2</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.MatchLikePattern(System.String,System.String)">
            <summary>
            Indicates whether string matches given SQL 'like' pattern. 
            </summary>
            <param name="value">Input string value</param>
            <param name="pattern">Like search patter</param>
        </member>
        <member name="M:CMS.DataEngine.SqlHelper.CreateScalarTable``1(``0)">
            <summary>
            Creates a scalar table (with one row and one column) from the given value.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="T:CMS.DataEngine.SqlHints">
            <summary>
            Provides SQL hints
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHints.NOEXPAND">
            <summary>
            Specifies that any indexed views are not expanded to access underlying tables when the query optimizer processes the query. The query optimizer treats the view like a table with clustered index. NOEXPAND applies only to indexed views.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlHints.NOLOCK">
            <summary>
            Specifies that the query can read the uncommitted data and ignores the locks.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlHints.GetTableHints(System.String[])">
            <summary>
            Gets the table hints for the query 
            </summary>
            <param name="hints">List of hints to include</param>
        </member>
        <member name="T:CMS.DataEngine.SqlMacroHelper">
            <summary>
            Helper methods for SQL query macros
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.SHARP_REPLACEMENT">
            <summary>
            Replacement for ## in Encode/Decode methods.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoWhereRegExp">
            <summary>
            Regular expression to match not needed WHERE condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoOrderByRegExp">
            <summary>
            Regular expression to match not needed ORDER BY expression.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoGroupByRegExp">
            <summary>
            Regular expression to match not needed GROUP BY expression.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoHavingRegExp">
            <summary>
            Regular expression to match not needed HAVING condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlMacroHelper.NoOutputRegExp">
            <summary>
            Regular expression to match not needed OUTPUT clause.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.GetEmptyWhereRegEx(System.String)">
            <summary>
            Gets a regular expression to match an empty where condition (tautology)
            </summary>
            <param name="keyWord">Where condition key word</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.GetMacroRegEx(System.String)">
            <summary>
            Gets the regular expression for a given macro name
            </summary>
            <param name="name">Macro name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ResolveQueryMacros(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Resolves the query macros using the given parameters.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Parameters array</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ResolveQueryMacros(CMS.DataEngine.QueryMacros,System.String)">
            <summary>
            Resolves the query macros.
            </summary>
            <param name="queryMacros">Query macros</param>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ResolveMacrosInQueryText(CMS.DataEngine.QueryMacros,System.String)">
            <summary>
            Resolves the query macros in the given query text using regular expressions for the query macros and replacements.
            </summary>
            <param name="queryMacros">Query macros</param>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceMacro(System.String@,System.String,System.String,System.String)">
            <summary>
            Replaces the macro within the given text. Returns true, if the replacement was made. Returns false if the the macro wasn't found.
            </summary>
            <param name="text">Text to replace</param>
            <param name="macro">Macro to replace</param>
            <param name="replacement">Replacement string</param>
            <param name="defaultReplacement">Default replacement in case the replacement is empty</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.BuildSelectQuery(CMS.DataEngine.QueryMacros)">
            <summary>
            Builds the select query using the given macros
            </summary>
            <param name="queryMacros">Query macros</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceGroupBy(System.String,System.String)">
            <summary>
            Replaces the where macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="groupBy">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceHaving(System.String,System.String)">
            <summary>
            Replaces the where macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="having">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceWhere(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the where macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="where">Where condition</param>
            <param name="keepMacro">If true, the where macro is kept in the query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceSource(System.String,System.String,System.String)">
            <summary>
            Replaces the source macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="source">Query source</param>
            <param name="defaultSource">Default source</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceOrderBy(System.String,System.String)">
            <summary>
            Replace order by macro in query.
            </summary>
            <param name="queryText">Query text</param>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.RemoveOrderBy(System.String)">
            <summary>
            Removes order by expression from query string.
            </summary>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceTopN(System.String,System.Int32)">
            <summary>
            Replaces the TOPN macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="topN">Top N</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceDistinct(System.String,System.Boolean)">
            <summary>
            Replaces the DISTINCT macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="distinct">Distinct</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.GetColumnsString(System.String)">
            <summary>
            Gets the columns string
            </summary>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceColumns(System.String,System.String)">
            <summary>
            Replaces columns macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceValues(System.String,System.String)">
            <summary>
            Replaces columns macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="values">Columns</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.ReplaceOutput(System.String,System.String)">
            <summary>
            Replaces output macro in the query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="output">Output clause</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.EncodeMacroInText(System.String)">
            <summary>
            Encode macros like ##WHERE## in text to {{#}}WHERE{{#}}.
            </summary>
            <param name="text">Text to encode.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlMacroHelper.DecodeMacroInText(System.String)">
            <summary>
            Decode macros like ##WHERE## in text to {{#}}WHERE{{#}}
            </summary>
            <param name="text">Text to decode.</param>
        </member>
        <member name="T:CMS.DataEngine.SqlOperator">
            <summary>
            Defines SQL operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.UNION">
            <summary>
            Union operator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.INTERSECT">
            <summary>
            Intersect operator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.EXCEPT">
            <summary>
            Except operator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperator.UNION_ALL">
            <summary>
            Union all operator
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlSecurityHelper">
            <summary>
            Security methods for SQL queries
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlSecurityHelper.WhereRegex">
            <summary>
            Regular expression to check security of WHERE clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlSecurityHelper.OrderByRegex">
            <summary>
            Regular expression to check security of ORDER BY clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlSecurityHelper.ColumnsRegex">
            <summary>
            Regular expression to check security of COLUMNS clause.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.GetWhereRegEx">
            <summary>
            Gets the regular expression for the safe value of WHERE condition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.GetOrderByRegEx">
            <summary>
            Gets the regular expression for the safe value of ORDER BY clause.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.GetColumnsRegEx">
            <summary>
            Gets the regular expression for the safe value of COLUMNS clause.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlSecurityHelper.CheckQuery(System.String,CMS.DataEngine.QueryScopeEnum)">
            <summary>
            Checks part of a query (or whole query) for malicious code. Returns TRUE if query contains just a SELECT statement.
            </summary>
            <param name="query">Part of a query or query.</param>
            <param name="scope">Defines scope where the specified part of a query is used.</param>
        </member>
        <member name="T:CMS.DataEngine.SystemColumns">
            <summary>
            System column names
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.COLUMN_PREFIX">
            <summary>
            Prefix for all system columns.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.ORDER_ROW_NUMBER">
            <summary>
            Order row number
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.ORDER">
            <summary>
            Order column
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SOURCE_ROW_NUMBER">
            <summary>
            Source row number column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SOURCE_NUMBER">
            <summary>
            Source number column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SOURCE_TYPE">
            <summary>
            Source type column name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.ROW_NUMBER">
            <summary>
            Row number
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.TOTAL_RECORDS">
            <summary>
            Total number of found records
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.SUB_TOTAL_RECORDS">
            <summary>
            Total number of found records for a sub-query in multi-query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.AGGREGATED_TOTAL">
            <summary>
            Aggregated total for multi-query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemColumns.DUPLICATE_PRIORITY">
            <summary>
            Column name with priorities of duplicates
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SystemColumns.IsSystemColumn(System.String)">
            <summary>
            Checks if column is one of the system columns.
            </summary>
            <param name="columnName">Name of column</param>
        </member>
        <member name="T:CMS.DataEngine.SystemViews">
            <summary>
            Holds system view names and underlying tables.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViews.tableViews">
            <summary>
            Key: table name
            Value: list of views, where the table is used
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SystemViews.Instance">
            <summary>
            Instance of <see cref="T:CMS.DataEngine.SystemViews"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SystemViews.GetViewsForTable(System.String)">
            <summary>
            Gets enumeration of system views, where given table is used.
            </summary>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:CMS.DataEngine.SystemViews.GetAllViews">
            <summary>
            Gets enumeration of all system views.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TSqlParserFactory">
            <summary>
            Factory providing T-SQL parser based on database compatibility level.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TSqlParserFactory.GetSqlParser">
            <summary>
            Returns T-SQL parser based on database compatibility level.
            </summary>
            <remarks>
            Returns parser for compatibility level 110 by default, e.g. if there is no connection to the database.
            Returns parser for compatibility level 150 if compatibility level of current database if any higher.
            </remarks>
        </member>
        <member name="T:CMS.DataEngine.Index">
            <summary>
            Class representing database index.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Index.Name">
            <summary>
            Index name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Index.Type">
            <summary>
            Index type as defined in https://msdn.microsoft.com/en-us/library/ms173760.aspx
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Index.IsUnique">
            <summary>
            Indicates whether index is unique.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Index.IsPrimaryKey">
            <summary>
            Indicates whether index is part of a primary key constraint.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Index.Columns">
            <summary>
            Read-only list of columns which are part of this index. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Index.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlyList{CMS.DataEngine.IndexColumn})">
            <summary>
            Initializes a new index.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IndexColumn">
            <summary>
            Class representing database index column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IndexColumn.Name">
            <summary>
            Index column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IndexColumn.IsDescendingKey">
            <summary>
            Indicates whether index key column has a descending sort direction.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IndexColumn.IsIncluded">
            <summary>
            Indicates whether column is a nonkey column of the index.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IndexColumn.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new index column.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IndexExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.DataEngine.Index"/> class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IndexExtensions.GetOrderBy(CMS.DataEngine.Index)">
            <summary>
            Gets columns as a comma separated list where column names are properly enclosed in square brackets and each column name is appended its ordering (ASC or DESC).
            Included columns are omitted.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ITableIndexes">
            <summary>
            Encloses information about table indexes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITableIndexes.GetClusteredIndex">
            <summary>
            Gets clustered index, or null when no such exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITableIndexes.GetPrimaryKeyIndex">
            <summary>
            Gets index which is part of a primary key constraint, or null when no such exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITableIndexes.GetNonclusteredIndexes">
            <summary>
            Gets enumeration of nonclustered indexes.
            </summary>
            <returns>Enumeration of nonclustered indexes, or empty enumeration when no such exists.</returns>
        </member>
        <member name="M:CMS.DataEngine.ITableIndexes.GetIndexes">
            <summary>
            Gets enumeration of indexes.
            </summary>
            <returns>Enumeration of indexes, or empty enumeration when none exists.</returns>
        </member>
        <member name="T:CMS.DataEngine.ITableIndexInformationProvider">
            <summary>
            Denotes classes that can provide information regarding table indexes.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITableIndexInformationProvider.GetTableIndexes(System.String)">
            <summary>
            Gets indexes of table identified by given <paramref name="tableName"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="tableName"/> is null or empty string.</exception>
        </member>
        <member name="T:CMS.DataEngine.TableIndexes">
            <summary>
            Encloses information about MSSQL database table indexes.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableIndexes.MSSQL_CLUSTERED_INDEX_ID">
            <summary>
            Index ID of a clustered table index in MSSQL. See https://msdn.microsoft.com/en-us/library/ms173760.aspx for details.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableIndexes.MSSQL_NONCLUSTERED_INDEX_TYPE">
            <summary>
            Index type of a nonclustered index in MSSQL. See https://msdn.microsoft.com/en-us/library/ms173760.aspx for details.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableIndexes.GetClusteredIndex">
            <summary>
            Gets clustered index, or null when no such exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableIndexes.GetPrimaryKeyIndex">
            <summary>
            Gets index which is part of a primary key constraint, or null when no such exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableIndexes.GetNonclusteredIndexes">
            <summary>
            Gets enumeration of nonclustered indexes.
            </summary>
            <returns>Enumeration of nonclustered indexes, or empty enumeration when no such exists.</returns>
        </member>
        <member name="M:CMS.DataEngine.TableIndexes.GetIndexes">
            <summary>
            Gets enumeration of indexes.
            </summary>
            <returns>Enumeration of indexes, or empty enumeration when none exists.</returns>
        </member>
        <member name="M:CMS.DataEngine.TableIndexes.#ctor(System.Collections.Generic.Dictionary{System.Int32,CMS.DataEngine.Index})">
            <summary>
            Initializes table indexes from a dictionary of indexes. The dictionary keys represent index ID (as defined in https://msdn.microsoft.com/en-us/library/ms173760.aspx ).
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="indexes"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.DatabaseInstallationSettings">
            <summary>
            Container for configuration data required for database installation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseInstallationSettings.ConnectionString">
            <summary>
            Gets or sets the connection string to the database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseInstallationSettings.ScriptsFolder">
            <summary>
            Gets or sets the folder with the database scripts.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseInstallationSettings.DatabaseObjectInstallationErrorMessage">
            <summary>
            Gets or sets the error message used when creation of DB objects fails.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseInstallationSettings.DataInstallationErrorMessage">
            <summary>
            Gets or sets the error message used when data creation fails.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseInstallationSettings.Logger">
            <summary>
            Gets or sets the logger used during database installation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseInstallationSettings.ApplyHotfix">
            <summary>
            Gets or sets the information determining hotfix application during database installation.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DeletedFKs">
            <summary>
            Class to define FKs which were removed during DB separation. Is used in DB join.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.ReferencingTable">
            <summary>
            Table with foreign key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.FKName">
            <summary>
            Name of the foreign key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.ReferencingColumn">
            <summary>
            Foreign key column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.PKTable">
            <summary>
            Table with primary key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeletedFKs.PKColumn">
            <summary>
            Primary key column.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProcsFuncViewsTypes">
            <summary>
            Separation class for manipulation with procedures, types, functions and views.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.ScriptsFolder">
            <summary>
            Folder where SQL separation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.InstallScriptsFolder">
            <summary>
            Folder where SQL installation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.IsSeparation">
            <summary>
            Indicates if current process is separation of databases. If FALSE then current process is joining of databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcsFuncViewsTypes.LogMessage">
            <summary>
            Method for logging.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.CreateProceduresViews">
            <summary>
            Creates all required procedures functions and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.CheckIfItemExistsInDB(System.String)">
            <summary>
            Checks existence of specified View, Procedure, Function or Type in DB.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.DropProceduresFunctionsViews">
            <summary>
            Drops functions, procedures and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcsFuncViewsTypes.DropItem(System.String)">
            <summary>
            Deletes one procedure or function or view on old DB.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SeparatedTables">
            <summary>
            Class providing list of separated tables including SQL and XML definitions
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="separationScriptsFolder">SQL scripts folder for separation</param>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTablesAndSchemas">
            <summary>
            Get tables and schemas.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTableNames(System.Boolean)">
            <summary>
            Gets list of table names.
            </summary>
            <param name="inverted">Indicates if list should be inverted</param>
            <returns>Returns list of table names </returns>
        </member>
        <member name="M:CMS.DataEngine.SeparatedTables.GetTableNames(System.String)">
            <summary>
            Returns string with table names.
            </summary>
            <param name="separator">Separator between table names</param>
            <returns>Returns string with separated tables names</returns>
        </member>
        <member name="T:CMS.DataEngine.TableAndClass">
            <summary>
            Defines table with appropriate data class info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableAndClass.TableName">
            <summary>
            Gets database table name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableAndClass.ClassInfo">
            <summary>
            Gets corresponding <see cref="T:CMS.DataEngine.DataClassInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableAndClass.#ctor(System.String,CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of <see cref="T:CMS.DataEngine.TableAndClass"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TemporaryTables.DELETED_FKS">
            <summary>
            Key for persistent storage helper containing FK's deleted during DB separation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.CreateTemporaryTables(System.String)">
            <summary>
            Creates all required temporary tables for DB separation.
            </summary>
            <param name="scriptsFolder">Scripts folder</param>
            <returns>Returns list of temporary table names.</returns>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.RemoveTemporaryTables(System.Collections.Generic.List{System.String})">
            <summary>
            Removes temporary tables.
            </summary>
            <param name="temporaryTables">List of temporary tables</param>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.CreateAdditionalConstraints">
            <summary>
            Recreates additional FK constraints which were stored during DB separation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.CreateTemporaryTable(System.String)">
            <summary>
            Creates temporary table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.RemoveFKs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove FKs referencing temporary tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.DeleteFKs(System.Data.DataSet)">
            <summary>
            Deletes FKs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.InitializeFK(System.Collections.Generic.List{CMS.DataEngine.DeletedFKs},System.Data.DataRow)">
            <summary>
            Adds new FK reference to list.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.StoreRemovedFKs(System.Collections.Generic.List{CMS.DataEngine.DeletedFKs})">
            <summary>
            Stores deleted FKs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.DeleteTemporaryTables(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes temporary tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TemporaryTables.GetConstraints">
            <summary>
            Gets constraints from persistent storage helper.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabaseSeparationHelper">
            <summary>
            Sets of methods used for database separation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DatabaseSeparationHelper.OM_CONNECTION_STRING">
            <summary>
            On-line marketing connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.SeparationInProgress">
            <summary>
            Indicates if DB separation is in progress.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.SeparationStartedByServer">
            <summary>
            Indicates what web farm server started DB separation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.ScriptsFolder">
            <summary>
            Folder where SQL separation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.InstallScriptsFolder">
            <summary>
            Folder where SQL installation scripts are placed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.InstallationConnStringSeparate">
            <summary>
            Installation connection string for separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.ConnStringSeparate">
            <summary>
            Connection string for separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.ConnStringSeparateName">
            <summary>
            Connection string name for separated DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.LogMessage">
            <summary>
            Method for logging.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.SqlServerCapabilities">
            <summary>
            Returns SQL server capabilities.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseSeparationHelper.AllowCopyDataThroughApplication">
            <summary>
            If true, the helper is allowed to copy the database data through the application instance during separation if linked server feature is not available.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CheckDBSeparation">
            <summary>
            Check that DB separation is successfully finished. Returns false, and sets up connection error message in case it isn't
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.SeparateDatabase">
            <summary>
            Separates Database.
            </summary>
            <returns>Returns TRUE if all scripts proceeded without error</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.JoinDatabase">
            <summary>
            Joins databases.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CheckCMDatabase(System.String)">
            <summary>
            Checks if database is installed with contact management tables.
            </summary>
            <param name="connectionString">Connection string to database</param>
            <returns>Returns true if database contains contact management tables</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteSourceTables(System.Boolean,System.Boolean)">
            <summary>
            Modifies old database.
            </summary>
            <param name="deleteDB">Indicates if complete database should be deleted.</param>
            <param name="separation">Indicates if current process is separation</param>
            <returns>Returns error if any occurred.</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.PrepareConnectionStrings">
            <summary>
            Sets connection strings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.MoveDB(System.String)">
            <summary>
            Runs  DB separation process.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.Initialize">
            <summary>
            Initializes classes used in separation or join.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.TargetDBModification">
            <summary>
            Creates data on new database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.ModifyContent(System.Collections.Generic.List{CMS.DataEngine.TableAndClass})">
            <summary>
            Modify content.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CreateProceduresViews">
            <summary>
            Create procedures functions and views
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CreateSeparatedTables(System.Collections.Generic.IEnumerable{CMS.DataEngine.TableAndClass})">
            <summary>
            Creates all required tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.CopyData(System.Collections.Generic.IEnumerable{CMS.DataEngine.TableAndClass})">
            <summary>
            Copies content of all tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.LinkedServer">
            <summary>
            Prepares and test linked server connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.PrepareLinkedServer">
            <summary>
            Get linked server SQL script.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.TestLinkedServer">
            <summary>
            Test linked servers.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.BulkCopyTableData(System.String)">
            <summary>
            Copy content of single table to different DB via bulk insert.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.LinkedCopyTableData(System.String)">
            <summary>
            Copy content of single table to different DB.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.HasIdentityColumn(System.String)">
            <summary>
            Indicates if table has identity column defined
            </summary>
            <param name="tableName">Table name</param>
            <returns>Returns TRUE if table has identity column</returns>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.GetTableColumns(System.String)">
            <summary>
            Get table columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteDB">
            <summary>
            Delete complete database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteTables">
            <summary>
            Delete tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DeleteOldTables">
            <summary>
            Drops all old tables.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DropProceduresFunctionsViews">
            <summary>
            Drops old procedures functions and views.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseSeparationHelper.DropDB(System.String)">
            <summary>
            Drops separated DB.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataSetPostProcessingEventArgs">
            <summary>
            Custom event arguments used for default data post processing.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataSetPostProcessingEventArgs.Data">
            <summary>
            Gets or sets dataset being imported.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataSetPostProcessingEventArgs.TableName">
            <summary>
            Gets or sets table name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataSetPostProcessingEventArgs.#ctor(System.Data.DataSet,System.String)">
            <summary>
            Default constructor for event arguments used in dataset processing.
            </summary>
            <param name="data">Dataset being imported</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.FileReader.ReadAndSplit(System.String,System.String)">
            <summary>
            Reads file and separates it into list.
            </summary>        
            <param name="scriptsFolder">Scripts folder</param>
            <param name="file">Name of the file with the script</param>
            <returns>Returns list of strings representing lines of the scripts file</returns>
        </member>
        <member name="T:CMS.DataEngine.SQLEngineEditionEnum">
            <summary>
            Enumeration for database engine edition of the instance of SQL Server installed on the server.
            http://msdn.microsoft.com/en-us/library/ms174396.aspx, EngineEdition property.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Unknown">
            <summary>
            Unknown engine edition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.PersonalOrDesktop">
            <summary>
            Not available in SQL Server 2005 and later versions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Standard">
            <summary>
            This is returned for Standard, Web, and Business Intelligence.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Enterprise">
            <summary>
            This is returned for Evaluation, Developer, and both Enterprise editions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.Express">
            <summary>
            This is returned for Express, Express with Tools and Express with Advanced Services
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SQLEngineEditionEnum.SQLAzure">
            <summary>
            This is returned for SQL Azure server or sometimes for any other SQL Database.
            It is not safe to use this property to decide whether is SQL server running on Azure or not.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlInstallationHelper">
            <summary>
            Sets of methods for creating database during installation process.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.SETTINGS_KEY_TABLE_NAME">
            <summary>
            Settings keys table name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.DB_CONNECTION_TIMEOUT">
            <summary>
            Default SQL connection timeout.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.DBO_SCHEMA">
            <summary>
            DB Owner schema
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlInstallationHelper.RunQuery">
            <summary>
            Executes when SQL script is run by the installer
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlInstallationHelper.DBORegEx">
            <summary>
            Regular expression for removing dbo. and [dbo]. from install queries.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SqlInstallationHelper.LogProgress">
            <summary>
            Delegate of event fired when message logging is required.
            </summary>
            <param name="message">Text of the message</param>
            <param name="type">Type of the message</param>
            <param name="logToEventLog">Log to event log</param>
        </member>
        <member name="E:CMS.DataEngine.SqlInstallationHelper.AfterDataGet">
            <summary>
            Fired after data getting is finished.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.TestConnection(System.String)">
            <summary>
            Test connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetConnectionString(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Returns connection string for the given parameters.
            </summary>
            <param name="winAuth">Whether to use windows authentication</param>
            <param name="serverName">Server</param>
            <param name="database">Name of the database</param>
            <param name="userName">SQL user name</param>
            <param name="pass">SQL password</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CheckIfSchemaExist(System.String,System.String)">
            <summary>
            Check if DB schema exists.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="dbSchema">Schema</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetCurrentDefaultSchema(System.String)">
            <summary>
            Returns current default schema
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetCurrentDefaultSchema(CMS.DataEngine.IDataConnection)">
            <summary>
            Returns current default schema
            </summary>
            <param name="conn">Connection</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CreateDatabase(System.String,System.String,System.String)">
            <summary>
            Creates database.
            </summary>
            <param name="databaseName">Name of the database</param>
            <param name="connectionString">Connection string</param>
            <param name="databaseCollation">Collation of database</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetSQLInstallPath">
            <summary>
            Gets the folder in which the SQL install scripts are located.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetSQLInstallPathToObjects">
            <summary>
            Gets the folder in which the SQL install scripts for DB objects are located.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetDatabaseVersion(System.String)">
            <summary>
            Returns database version from settings key.
            </summary>
            <param name="connString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.DatabaseExists(System.String,System.String)">
            <summary>
            Returns true if database exists.
            </summary>
            <param name="databaseName">Database name</param>
            <param name="connectionString">Connection string to DB server</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetEngineEdition(System.String)">
            <summary>
            Returns database engine edition of the instance of SQL Server installed on the server.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ChangeDefaultSchema(CMS.DataEngine.IDataConnection,System.String,System.Action{System.String,CMS.DataEngine.MessageTypeEnum})">
            <summary>
            Changes the database schema to the given schema
            </summary>
            <param name="conn">Connection</param>
            <param name="newSchema">New schema</param>
            <param name="log">Log</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CopyDatabase(System.String,System.String,System.String)">
            <summary>
            Create a copy of database. This feature is available only in SQL Azure databases.
            </summary>
            <param name="connectionString">Connection string to master database.</param>
            <param name="databaseName">Name of database to copy.</param>
            <param name="copyName">Name of new database.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CopyingCompleted(System.String,System.String)">
            <summary>
            Checks if given database is being copied.
            </summary>
            <param name="connectionString">Connection to master database.</param>
            <param name="databaseName">Name of database to check.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetDefaultBackupPath(System.String)">
            <summary>
            Retrieves SQL server default backup directory from it's registry.
            </summary>
            <param name="connectionString">Database connection string</param>
            <returns>Database default backup directory</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.BackupDatabase(System.String,System.String)">
            <summary>
            Backup given database to filesystem.
            </summary>
            <param name="connectionString">Connection string of database to backup</param>
            <param name="backupPath">Path to filesystem, where the database will be backuped on the database server.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.DeleteDatabase(System.String,System.String)">
            <summary>
            Deletes database.
            </summary>
            <param name="databaseName">Database name</param>
            <param name="connectionString">Connection string to DB server</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetUniqueDatabaseName(System.String,System.String)">
            <summary>
            Returns unique database name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.InstallDatabase(CMS.DataEngine.DatabaseInstallationSettings)">
            <summary>
            Performs the database installation.
            </summary>
            <param name="installationSettings">Settings for installation</param>
            <returns>True when installation was successful, false otherwise.</returns>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.EnsureDefaultSchema(CMS.DataEngine.IDataConnection)">
            <summary>
            Ensures the default schema for current user
            </summary>
            <param name="conn">Connection</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.CheckAllConstraints(CMS.DataEngine.IDataConnection,System.String)">
            <summary>
            Performs (re)check operation of all constraints for specified table.
            If operation finish successfully untrusted constraints will be trusted.
            </summary>
            <param name="connection">Connection to database</param>
            <param name="tableName">Name of the table to check</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.EnsureDefaultSchema(System.Action{System.String,CMS.DataEngine.MessageTypeEnum},CMS.DataEngine.IDataConnection,System.Boolean@)">
            <summary>
            Ensures the database schema for the current user. If the user does not have the schema set, sets the schema to dbo.
            </summary>
            <param name="log">Log message</param>
            <param name="conn">Data connection</param>
            <param name="success">Returns true, if changing the schema was successful</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.DatabaseIsSeparated">
            <summary>
            Checks if database is separated or not.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetSQLInstallPath(System.String)">
            <summary>
            Gets the folder in which the SQL install scripts are located.
            </summary>
            <param name="relativePath">Additional path to folder or file</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.RunSQLQuery(System.String,CMS.DataEngine.IDataConnection,System.String)">
            <summary>
            Executes SQL query.
            </summary>
            <param name="query">Query</param>
            <param name="conn">Connection</param>
            <param name="dbSchema">Schema</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.RunSQLScript(System.String,CMS.DataEngine.IDataConnection,System.String)">
            <summary>
            Executes SQL script. Method internally handles 'GO' commands.
            </summary>
            <param name="fileName">SQL script</param>
            <param name="conn">Connection</param>
            <param name="dbSchema">DB schema</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ProceedSQLScripts(System.String,CMS.DataEngine.IDataConnection,System.String,CMS.DataEngine.DatabaseInstallationSettings,System.String)">
            <summary>
            Runs the SQL scripts listed in the given file.
            </summary>
            <param name="fileName">FileName with the scripts to run</param>
            <param name="conn">SQL connection</param>
            <param name="dbSchema">Name of the schema (all "dbo." and "[dbo]." occurrences are replaced by this schema)</param>
            <param name="installationSettings">Settings for installation</param>
            <param name="defaultErrorMessage">Default error message</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.IncrementCounter(System.String)">
            <summary>
            Increments number (separated by "_") at the end of string.
            </summary>
            <param name="str">String</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.LoadScriptsFromFile(System.String)">
            <summary>
            Returns script names (files) from text file.
            </summary>
            <param name="path">Path to file</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.GetOrderedTables(CMS.DataEngine.IDataConnection)">
            <summary>
            Get list of tables ordered by dependency from least dependent to most dependent.
            </summary>
            <param name="connection">Connection to database.</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ImportDefaultData(CMS.DataEngine.IDataConnection,CMS.DataEngine.DatabaseInstallationSettings)">
            <summary>
            Import default data to database.
            </summary>
            <param name="connection">Connection to database.</param>
            <param name="installationSettings">Settings for installation</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.InitSettingsKeyTimestamp(System.Data.DataSet,System.String)">
            <summary>
            Initialize settings key timestamp.
            </summary>
            <param name="data">Data</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.ApplyHotfix(CMS.DataEngine.IDataConnection,System.String,CMS.DataEngine.DatabaseInstallationSettings)">
            <summary>
            Import default data to database.
            </summary>
            <param name="connection">Connection to database.</param>
            <param name="dbSchema">Name of the schema (all "dbo." and "[dbo]." occurrences are replaced by this schema)</param>
            <param name="installationSettings">Settings for installation</param>
        </member>
        <member name="M:CMS.DataEngine.SqlInstallationHelper.SetJWTEncryptionKey(CMS.DataEngine.IDataConnection)">
            <summary>
            Generates a new JWT encryption key and stores it in <see cref="F:CMS.Helpers.ValidationHelper.CMS_SETTINGS_JWT_TOKEN_ENCRYPTION_KEY"/> settings key.
            </summary>
            <param name="connection">Database connection instance.</param>
        </member>
        <member name="T:CMS.DataEngine.SQLScript">
            <summary>
            SQL script to be applied during upgrade or hotfix.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.SQLFileName">
            <summary>
            File name of the SQL script.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.SQLFilePath">
            <summary>
            Full path of SQL script.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.ConnectionStringName">
            <summary>
            Name of connection string needed for script execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.ConnectionString">
            <summary>
            Connection string needed for script execution.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLScript.SQLLaunchOrder">
            <summary>
            Order in which the script should be launched.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SQLSettings">
            <summary>
            Provides SQL settings for hotfixing databases.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SQLSettings.Scripts">
            <summary>
            Collection of SQL scripts.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataConnection">
            <summary>
            Data connection interface that must be implemented by data providers.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.CommandTimeout">
            <summary>
            Command timeout which will be set on this connection.
            </summary>
            <remarks>
            If a new <see cref="T:CMS.DataEngine.CMSConnectionScope"/> is created within this connection and a different <see cref="P:CMS.DataEngine.CMSConnectionScope.CommandTimeout"/> is set,
            the current connection timeout is not changed outside of the scope.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.UseScopeConnection">
            <summary>
            If true, the connection uses the scope connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.KeepOpen">
            <summary>
            If true, the connection stays open even if close is requested.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.NativeConnection">
            <summary>
            Native connection object. It depends on provider type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.Transaction">
            <summary>
            Transaction object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.ConnectionString">
            <summary>
            Connection string for specific provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataConnection.DisableQueryDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.GetExecutingConnection(System.String,System.Boolean)">
            <summary>
            Gets the connection that executes the given query
            </summary>
            <param name="connectionStringName">Connection string name</param>
            <param name="newConnection">If true, a new connection instance is created</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Returns result of the query.
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Array of query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteNonQueryAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.IDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/> which executes the query asynchronously and returns the number of rows affected.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the number of rows affected.
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteReaderAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.IDataConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)"/> which executes the query asynchronously and returns result as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query or stored procedure to be run</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Indicates it query is a SQL query or stored procedure</param>
            <param name="commandBehavior">Command behavior</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteReader(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Data.CommandBehavior)">
            <summary>
            Executes the query and returns result as a <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure.</param>
            <param name="commandBehavior">Command behavior.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteScalarAsync(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            <para>
            An asynchronous version of <see cref="M:CMS.DataEngine.IDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>, which executes the query asynchronously
            and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </para>
            <para>
            The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.
            Exceptions will be reported via the returned Task object.
            </para>
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or stored procedure</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Executes the query and returns the first column of the first row in the result set returned by the query.
            Additional columns or rows are ignored.
            </summary>
            <param name="queryText">Query or stored procedure to be run.</param>
            <param name="queryParams">Query parameters.</param>
            <param name="queryType">Indicates if query is a SQL query or a stored procedure.</param>
            <param name="requiresTransaction">If true, the query should run within transaction.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.NativeDBConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.NativeConnectionExists">
            <summary>
            Returns true if the native connection exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.IsOpen">
            <summary>
            Returns true if connection to the database is open.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.Open">
            <summary>
            Opens connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.Close">
            <summary>
            Closes connection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.BeginTransaction">
            <summary>
            Begins a new transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a new transaction with specified isolation level.
            </summary>
            <param name="isolationLevel">Isolation level to use</param>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.CommitTransaction">
            <summary>
            Commits current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.RollbackTransaction">
            <summary>
            Rollbacks current transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataConnection.IsTransaction">
            <summary>
            Indicates if transaction is running.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataProvider">
            <summary>
            Data provider interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataProvider.GetNewConnection(System.String)">
            <summary>
            Returns new data connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="P:CMS.DataEngine.IDataProvider.ConnectionString">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataProvider.CurrentConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISqlGenerator">
            <summary>
            Sql generator interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISqlGenerator.GetSystemViewSqlQuery(System.String,System.String@)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.ISqlGenerator.GetSqlQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">CodeName of the site</param>
        </member>
        <member name="T:CMS.DataEngine.ITableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.ConnectionString">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseSize">
            <summary>
            Gets database size(including log size).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseVersion">
            <summary>
            Gets database version
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseServerName">
            <summary>
            Gets database server name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DatabaseServerVersion">
            <summary>
            Gets database server version.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ITableManager.DisableDebug">
            <summary>
            If true, the debug is disabled in this table manager
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database for given data class.
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database for given data class.
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropView(System.String)">
            <summary>
            Drop specified view from database.
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetIndexes(System.String)">
            <summary>
            Returns DataSet with indexes of the given object. Returns columns IndexName, DropScript, CreateScript
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetTables(System.String)">
            <summary>
            Gets the tables in the database matching the condition
            </summary>
            <param name="where">Tables where condition</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetTableDependencies(System.String)">
            <summary>
            Gets list of object names which have foreign key constraint dependency.
            </summary>
            <param name="tableName">Table name</param>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateTable(System.String,System.String)">
            <summary>
            Creates specified table in database.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database with specified primary key column with or without identity.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specfied table column information retrieved from database information schema. Returns columns ColumnName, DataType, DataSize, DataPrecision, Nullable, DefaultValue
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column in system (en) culture. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column in system (en) culture</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetColumnIndexes(System.String,System.String)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropColumnIndexes(System.String,System.String)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DropDefaultConstraint(System.String,System.String)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetPKConstraintName(System.String)">
            <summary>
            Returns the name of the PK constraint.
            </summary>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.RecreatePKConstraint(System.String,System.String[])">
            <summary>
            Drops the current PK constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetTablePKName(System.String)">
            <summary>
            Returns name of the primary key. If more columns in PK, names are separated by semicolon ";".
            </summary>
            <param name="tableName">Name of the table to get PK column(s) from.</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetValueString(System.Object)">
            <summary>
            Returns the value string using the database culture. 
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetCode(System.String)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.CreateProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Creates specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.ITableManager.AlterProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Alters specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="T:CMS.DataEngine.ITransactionScope">
            <summary>
            Transaction scope interface
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ITransactionScope.Commit">
            <summary>
            Commits the transaction (does the same as Complete).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MissingSQLTypeException">
            <summary>
            Exception raised when unsupported SQL type is encountered.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MissingSQLTypeException.ColumnName">
            <summary>
            Gets or sets table column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MissingSQLTypeException.UnsupportedType">
            <summary>
            Gets or sets unsupported SQL type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MissingSQLTypeException.RecommendedType">
            <summary>
            Gets or sets supported SQL type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MissingSQLTypeException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message text</param>
            <param name="columnName">Column name</param>
            <param name="currentSqlType">Unsupported type</param>
            <param name="recommendedSqlType">Supported type</param>
        </member>
        <member name="T:CMS.DataEngine.SqlGenerator">
            <summary>
            Generates SQL queries for given table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.mQueryTypes">
            <summary>
            Mapping of query names to query types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlGenerator.mSystemQueries">
            <summary>
            Mapping of query names to query types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSystemViewSqlQuery(System.String,System.String@)">
            <summary>
            View name.
            </summary>
            <param name="viewName">View name</param>
            <param name="indexes">Returns extra code for the initialization of the view</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetSqlQuery(System.String,CMS.DataEngine.SqlOperationTypeEnum,System.String)">
            <summary>
            Generates the given type of query for table specified by its className.
            </summary>
            <param name="className">Class name of the document data</param>
            <param name="queryType">Query type</param>
            <param name="siteName">Codename of the site</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetAutomaticQuery(System.String)">
            <summary>
            Gets an automatically generated query
            </summary>
            <param name="queryFullName">Query full name</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.CreateVirtualQuery(System.String,System.String,CMS.DataEngine.DataClassInfo,System.String)">
            <summary>
            Creates a virtual query object
            </summary>
            <param name="queryFullName">Query full name</param>
            <param name="queryName">Query name</param>
            <param name="dci">Class info</param>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.GetQueryType(System.String)">
            <summary>
            Gets query type due to specified query name.
            </summary>
            <param name="queryName">Name of the query</param>
        </member>
        <member name="M:CMS.DataEngine.SqlGenerator.IsSystemQuery(System.String)">
            <summary>
            Check if the specified query is system query.
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="T:CMS.DataEngine.SqlOperationTypeEnum">
            <summary>
            Enumeration of the SQL operations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.UnknownQuery">
            <summary>
            Uknown query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectQuery">
            <summary>
            Selection query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.InsertQuery">
            <summary>
            Insertion query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.UpdateQuery">
            <summary>
            Update query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.DeleteQuery">
            <summary>
            Delete query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectAll">
            <summary>
            Selection all query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.DeleteAll">
            <summary>
            Deletion all query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.SelectModifiedFrom">
            <summary>
            Selection query from specified date of modification.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.InsertWithIdentity">
            <summary>
            Insert record with the identity column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.UpdateAll">
            <summary>
            Updates multiple items based on the columns and where condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralSelect">
            <summary>
            General select query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralInsert">
            <summary>
            General insert query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralUpdate">
            <summary>
            General update query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralDelete">
            <summary>
            General delete query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlOperationTypeEnum.GeneralUpsert">
            <summary>
            General upsert (insert/update) query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SystemViewNames">
            <summary>
            System view name constants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_Tree_Joined">
            <summary>
            View_CMS_Tree_Joined.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SystemViewNames.View_CMS_User">
            <summary>
            View_CMS_User.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.USE_INDEXED_VIEWS">
            <summary>
            If true, the indexed views are used and generated within the system
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.mDefaultTableManager">
            <summary>
            Default table manager
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.mDefaultSystemTableManager">
            <summary>
            Default system table manager (debug disabled)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TableManager.mTableManagers">
            <summary>
            Table managers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.ConnectionString">
            <summary>
            Current connection string for the table management
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DefaultSystemTableManagerObject">
            <summary>
            Default Table manager object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DefaultTableManagerObject">
            <summary>
            Default Table manager object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.TableManagerObject">
            <summary>
            Table manager object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseCulture">
            <summary>
            Database culture setting from the web.config.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseCultureInfo">
            <summary>
            Database culture info obtained from DatabaseCulture property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseSize">
            <summary>
            Gets database size(including log size) in MB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseName">
            <summary>
            Gets database name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseServerName">
            <summary>
            Gets database server name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DatabaseServerVersion">
            <summary>
            Gets database server version.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.DisableDebug">
            <summary>
            If true, the table manager disables debug for its queries
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TableManager.UpdateSystemFields">
            <summary>
            Determines whether system fields should be updated when updating table by schema. By default updates only non-system fields.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableManager.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Schema of the indexed view</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Alters specified view in database
            </summary>
            <param name="viewName">View name to create</param>
            <param name="selectExpression">Select expression for the view</param>
            <param name="indexed">If true, the view is indexed (schema bound)</param>
            <param name="schema">Schema of the indexed view</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum)">
            <summary>
            Executes query and returns the results in a DataSet.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropView(System.String)">
            <summary>
            Drop specified view from database.
            </summary>
            <param name="viewName">View name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshView(System.String)">
            <summary>
            Refreshes specified view in database.
            </summary>
            <param name="viewName">View name to refresh</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ViewExists(System.String)">
            <summary>
            Determines whether specified DB view exists or not.
            </summary>
            <param name="viewName">View name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshSystemViews(System.String)">
            <summary>
            Refreshes all database views which should contain all columns of the specified system table (e.g. cms_user).
            Call this method after the column of that system table is added or removed.
            </summary>
            <param name="tableName">System table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshAllSystemViews">
            <summary>
            Refreshes all system views.
            </summary>
            <remarks>For upgrade procedure purposes.</remarks>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshViews(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes specified views in database.
            </summary>
            <param name="viewNames">Enumeration of views.</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RefreshDocumentViews">
            <summary>
            Regenerates view for documents.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TableManager.IsGeneratedSystemView(System.String)">
            <summary>
            Returns true if the given view is generated view with dynamic code.
            </summary>
            <param name="viewName">View name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetIndexes(System.String)">
            <summary>
            Returns DataSet with indexes of the given object. Returns columns IndexName, DropScript, CreateScript
            </summary>
            <param name="objectName">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTableIndexes(System.String)">
            <summary>
            Gets indexes of table identified by given <paramref name="tableName"/>.
            Returns null when information regarding indexes is not available.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="tableName"/> is null or empty string.</exception>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTables(System.String)">
            <summary>
            Gets the tables in the current database
            </summary>
            <param name="where">Tables where condition</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTableDependencies(System.String)">
            <summary>
            Gets list of object names which have foreign key constraint dependency.
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTable(System.String,System.String,System.Boolean)">
            <summary>
            Creates specified table in database. Allows specify if identity will be set on primary key column.
            </summary>
            <param name="tableName">Table name to create</param>
            <param name="primaryKeyName">Primary key of table to create</param>
            <param name="setIdentity">If true, sets identity on primary key column</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RenameTable(System.String,System.String)">
            <summary>
            Changes name of the table with original name according to the new name.
            </summary>
            <param name="oldTableName">Name of the table to rename</param>
            <param name="newTableName">New name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTable(System.String)">
            <summary>
            Drop specified table from database.
            </summary>
            <param name="tableName">Table name to drop</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetXmlSchema(System.String)">
            <summary>
            Returns XML schema for specified table.
            </summary>
            <param name="tableName">Name of a table to get xml schema for</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateTableByDefinition(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates new database table and structure based on the provided data class info.
            </summary>
            <param name="classInfo">Data class info</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.UpdateTableByDefinition(CMS.DataEngine.UpdateTableParameters)">
            <summary>
            Updates the structure of database table based on given parameters.
            </summary>
            <param name="parameters">Update table parameters</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetFieldDefaultValue(CMS.DataEngine.IField,CMS.DataEngine.DataType)">
            <summary>
            Gets data type default value in case that field doesn't allow null and original default value is not set. 
            If field allows null value returns original default value.
            </summary>
            <param name="field">Form definition field</param>
            <param name="dataType">Data type of the field</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ContainsMacro(System.String)">
            <summary>
            Returns true if the specified text contains macro.
            </summary>
            <param name="inputText">Text to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ContainsMacroType(System.String,System.Char)">
            <summary>
            Checks whether given text contains specified macro type
            </summary>
            <param name="inputText">Text to check</param>
            <param name="type">Type of the macro (%, $, ?)</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetOldFields(System.String,System.String,System.Boolean)">
            <summary>
            Gets old fields for class info
            </summary>
            <param name="tableName">Class table name</param>
            <param name="definition">Form definition</param>
            <param name="loadOldDefinition">Indicates if old form definition should be loaded</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetDatabaseFields(System.String)">
            <summary>
            Gets fields based on database structure
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetDataDefinition(System.String)">
            <summary>
            Gets data definition from XML definition
            </summary>
            <param name="definition">XML definition</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DeleteDataFromTable(System.String,System.String)">
            <summary>
            Deletes data from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="where">Where condition, null if no condition is needed</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.TableExists(System.String)">
            <summary>
            Determines whether specified DB table exists or not.
            </summary>
            <param name="tableName">Table name to check</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetUniqueTableName(System.String)">
            <summary>
            Returns unique table name (automatically generated table name that not yet exist in the database).
            </summary>
            <param name="originalTableName">Original table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CleanTable(System.String)">
            <summary>
            Reclaims space from dropped variable-length columns in tables or indexed views.
            </summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ChangeDBObjectOwner(System.String,System.String)">
            <summary>
            Changes database object owner.
            </summary>
            <param name="dbObject">Database object name</param>
            <param name="newOwner">New owner name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetPrimaryKeyColumns(System.String)">
            <summary>
            Returns list of column names which represent primary keys of the specified database table.
            Returns empty list if primary keys are not found.
            </summary>
            <param name="tableName">Database table name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnInformation(System.String,System.String)">
            <summary>
            Returns DataSet with specified table column information retrieved from database information schema. Returns columns ColumnName, DataType, DataSize, DataPrecision, Nullable, DefaultValue.
            </summary>
            <param name="tableName">Database table name</param>
            <param name="columnName">Database table column name</param>
            <remarks>If <paramref name="columnName"/> is not specified data for all table columns are returned.</remarks>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AddTableColumn(System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Add column to specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of a new column</param>
            <param name="columnType">Type of a new column</param>
            <param name="allowNull">Allow NULL values in new column or not</param>
            <param name="defaultValue">Default value of the column in system (en) culture. Null if no default value is set</param>
            <param name="forceDefaultValue">Indicates if column default value should be set if column doesn't allow NULL values</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropTableColumn(System.String,System.String)">
            <summary>
            Remove column from specified table.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterTableColumn(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Rename, retype or allow/not allow NULL values in column
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Name of an old column</param>
            <param name="newColumnName">Name of a new column</param>
            <param name="newColumnType">Type of a new column</param>
            <param name="newColumnDefaultValue">Default value of a new column in system (en) culture</param>
            <param name="newColumnAllowNull">Allow NULL values in new column or not</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetColumnIndexes(System.String,System.String)">
            <summary>
            Returns the DataSet of column indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropColumnIndexes(System.String,System.String)">
            <summary>
            Drops the column indexes, returns the DataSet of indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateColumnIndexes(System.String,System.String,System.Data.DataSet)">
            <summary>
            Creates the table indexes.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
            <param name="ds">DataSet with the indexes information</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DropDefaultConstraint(System.String,System.String)">
            <summary>
            Drops the default constraint.
            </summary>
            <param name="tableName">Table name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetPKConstraintName(System.String)">
            <summary>
            Returns the name of the PK constraint.
            </summary>
            <param name="tableName">Name of the table</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.RecreatePKConstraint(System.String,System.String[])">
            <summary>
            Drops the current PK constraint and creates new from given columns.
            </summary>
            <param name="tableName">Name of the table</param>
            <param name="primaryKeyColumns">List of columns which should be part of primary key</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.ColumnExistsInView(System.String,System.String)">
            <summary>
            Checks if column name is unique in given view.
            </summary>
            <param name="viewName">Name of the view</param>
            <param name="columnName">Name of the column to be checked</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetTablePKName(System.String)">
            <summary>
            Returns name of the primary key. If more columns in PK, names are separated by semicolon ";".
            </summary>
            <param name="tableName">Name of the table to get PK column(s) from.</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetValueString(System.Object)">
            <summary>
            Returns the float string using the database culture.
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.SelectFieldNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Selects single field node with the specified attribute value.
            </summary>
            <param name="formNode">Xml node with field nodes representing table columns</param>
            <param name="attributeName">Attribute name of the field node to be selected</param>
            <param name="attributeValue">Attribute value of the field node to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetCode(System.String)">
            <summary>
            Returns SQL code of specified view or stored procedure.
            </summary>
            <param name="name">Name of the view or stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.StoredProcedureExists(System.String)">
            <summary>
            Determines whether specified stored procedure exists or not.
            </summary>
            <param name="procName">Name of the stored procedure</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.GetList(System.String,System.String,System.Boolean)">
            <summary>
            Returns list of views or stored procedures.
            </summary>
            <param name="where">WHERE condition</param>
            <param name="columns">Columns</param>
            <param name="getViews">If true list of views is retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.DeleteObject(System.String,System.Boolean)">
            <summary>
            Removes view or stored procedure from database.
            </summary>
            <param name="name">Name of the object</param>
            <param name="isView">Indicates if view is deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.CreateProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Creates specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="M:CMS.DataEngine.TableManager.AlterProcedure(System.String,System.String,System.String,System.String)">
            <summary>
            Alters specified procedure in database
            </summary>
            <param name="procName">Procedure name to create</param>
            <param name="param">Parameters</param>
            <param name="body">Procedure body</param>
            <param name="schema">Database schema</param>
        </member>
        <member name="T:CMS.DataEngine.UpdateTableParameters">
            <summary>
            Parameters for method to update database table by definition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateTableParameters.ClassInfo">
            <summary>
            Data class info
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateTableParameters.OriginalDefinition">
            <summary>
            Original form definition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateTableParameters.UseOriginalDefinition">
            <summary>
            Indicates if original definition should be used to detect changes. If false, current database table structure is compared to the new definition to detect changes.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSConnectionContext">
            <summary>
            Ensures that the wrapped API calls are executed against specific database(s).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionContext.OriginalPrefix">
            <summary>
            Connection string prefix from the original context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionContext.#ctor(System.String)">
            <summary>
            Constructor, sets up the connection string name prefix for the life time of this object. E.g. for prefix "External" the connection string "ExternalCMSConnectionString"
            will be used instead of the default "CMSConnectionString". To revert to default DB, use prefix null or empty string.
            </summary>
            <param name="connectionStringPrefix">Connection string prefix</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionContext.Dispose">
            <summary>
            Disposes the object and resets the context to the previous one.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSConnectionScope">
            <summary>
            Allows changing command timeout for a code block.
            Also allows specifying a connection that is used for executing all <see cref="T:CMS.DataEngine.ConnectionHelper"/> calls
            that are passed the query text directly within a code block.
            </summary>
            <remarks>
            To set the connection scope for the whole API (e.g. <see cref="T:CMS.DataEngine.DataQuery" />), use the <see cref="T:CMS.DataEngine.CMSConnectionContext"/> class.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.ConnectionString">
            <summary>
            Connection string name that the thread should use to access the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.Connection">
            <summary>
            Connection of the current scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.CommandTimeout">
            <summary>
            Command timeout which will be set on the connection within the current connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.DisableConnectionDebug">
            <summary>
            If true, the debug is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.DisableQueryDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSConnectionScope.DisableDebug">
            <summary>
            If true, the debug of queries is disabled on this connection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(System.Boolean)">
            <summary>
            Empty constructor. Creates a new connection and ensures that all database connections during the live of this object will use that connection.
            </summary>
            <param name="newConnection">If true, creates a new connection</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. Ensures that all database connections during the live of this object will use the given connection.
            </summary>
            <param name="connectionString">Connection string to use within all underlying database operations. If null new connection is created</param>
            <param name="defaultIfNotFound">If true, the default connection string is used if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.#ctor(CMS.DataEngine.IDataConnection)">
            <summary>
            Constructor. Ensures that all database connections during the live of this object will use the given connection.
            </summary>
            <param name="conn">Connection to use within all database operations. If null new connection is created</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Init(System.String,CMS.DataEngine.IDataConnection,System.Boolean)">
            <summary>
            Initializes the context
            </summary>
            <param name="connectionStringName">Connection string or connection string name to use within all underlying database operations. If null, default connection is used.</param>
            <param name="conn">Connection to use</param>
            <param name="defaultIfNotFound">If true, the default connection string is used if the given connection string is not found</param>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.ResetConnection">
            <summary>
            Resets the connection to recover from error.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSConnectionScope.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSLateBoundTransaction">
            <summary>
            Class that manages the transaction scope, but doesn't start it until BeginTransaction is called.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSLateBoundTransaction.mTransactionScope">
            <summary>
            Inner transaction scope
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.CMSLateBoundTransaction"/>, optionally in a context of given provider type.
            </summary>
            <param name="providerType">Type of the provider within whose context should the transaction start.</param>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.BeginTransaction">
            <summary>
            Begins the transaction
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.Commit">
            <summary>
            Commits the transaction if it was activated
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSLateBoundTransaction.Dispose">
            <summary>
            Disposes the transaction
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CMSTransactionScope">
            <summary>
            Transaction scope. Ensures that all queries run within single transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mUseTransactionScope">
            <summary>
            If true, .NET transaction scope is used instead of standard transactions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mTransactionScope">
            <summary>
            Transaction scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mConnectionScope">
            <summary>
            Inner connection scope.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mCloseConnection">
            <summary>
            This scope closes the connection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mCommitTransaction">
            <summary>
            This scope commits the transaction.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CMSTransactionScope.mRollbackTransaction">
            <summary>
            This scope should rollback the transaction in case of errors.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.Connection">
            <summary>
            Connection of the current scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.UseTransactionScope">
            <summary>
            If true, .NET transaction scope is used instead of standard transactions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSTransactionScope.IsInTransaction">
            <summary>
            Returns true if the current code executes in a scope of open transaction
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.#ctor(CMS.DataEngine.IDataConnection)">
            <summary>
            Constructor. Opens the connection and begins the transaction.
            </summary>
            <param name="conn">Connection to use within all database operations</param>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.Commit">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSTransactionScope.CommitAndBeginNew">
            <summary>
            Commits current transaction and begins new transaction.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TransactionScopeFactory">
            <summary>
            Factory for <see cref="T:CMS.DataEngine.ITransactionScope"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TransactionScopeFactory.GetTransactionScope(System.Type)">
            <summary>
            Returns a new transaction scope. 
            </summary>
            <param name="providerType">Type of a provider in whose the transaction should occur.</param>
        </member>
        <member name="M:CMS.DataEngine.TransactionScopeFactory.RegisterTransaction(System.Type,System.Func{CMS.DataEngine.ITransactionScope})">
            <summary>
            Registers transaction scope implementation specific for given <paramref name="providerType"/>.
            </summary>
            <param name="providerType">Type of a provider for whom the implementation should be used.</param>
            <param name="factoryMethod">Method for transaction scope implementation creation.</param>
        </member>
        <member name="T:CMS.DataEngine.DataExtensions">
            <summary>
            Extensions for the SettingsProvider classes
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CheckRequiredColumns(CMS.Base.ISimpleDataContainer,System.String[])">
            <summary>
            Returns true if given list of columns do not have null values in the object
            </summary>
            <param name="obj">Object</param>
            <param name="columns">List of columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetNamedEnumerator``1(CMS.Base.INamedEnumerable)">
            <summary>
            Name enumerator over a collection
            </summary>
            <param name="collection">Collection</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.As``1(System.Data.DataSet)">
            <summary>
            Converts the DataSet to a strongly typed one
            </summary>
            <param name="ds">Source data set</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.As``1(System.Collections.Generic.IEnumerable{System.Data.IDataRecord},System.Func{CMS.Base.DataRecordContainer,``0})">
            <summary>
            Converts an enumeration of data records to strongly typed <see cref="T:CMS.DataEngine.BaseInfo"/>s.
            </summary>
            <typeparam name="InfoType">Info object type to convert each data record to.</typeparam>
            <param name="dataRecords">Enumeration of data records to be converted.</param>
            <param name="createObjectFunc">Function converting a data record container to the resulting <typeparamref name="InfoType"/> instance.</param>
            <returns>Returns an enumeration of strongly typed <see cref="T:CMS.DataEngine.BaseInfo"/> objects.</returns>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.AsModifyable(System.Data.DataSet)">
            <summary>
            Ensures that the given DataSet is not cached, copies the data if it is
            </summary>
            <param name="ds">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToDictionaryById(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Converts the list of objects to a dictionary indexed by object ID
            </summary>
            <param name="objects">List of objects to convert</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToDictionaryById(System.Data.DataSet,System.String)">
            <summary>
            Converts the DataSet to a dictionary indexed by object ID
            </summary>
            <param name="ds">DataSet with the data</param>
            <param name="idColumn">ID column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.AsIndexable``2(CMS.Base.IGeneralIndexable)">
            <summary>
            Implicit conversion to indexable type with a specific values
            </summary>
            <param name="obj">Object to convert</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ContainsExternalData(System.Data.DataTable)">
            <summary>
            Returns true if the given table contains some external data (data not from CMS database)
            </summary>
            <param name="dt">Data table</param>
            <seealso cref="T:CMS.DataEngine.Internal.ExtendedDbDataReader"/>
            <seealso cref="P:CMS.Base.DataRecordContainer.IsFromCmsDatabase"/>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.TrackExternalData(System.Data.DataTable)">
            <summary>
            Marks the given table as originated from the CMS database
            </summary>
            <param name="dt">Data table</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.IsFromCMSDatabase(System.Data.DataTable,System.Boolean)">
            <summary>
            Marks the given table as originated from the CMS database
            </summary>
            <param name="dt">Data table</param>
            <param name="isFromCmsDatabase">Sets the flag</param>
            <seealso cref="T:CMS.DataEngine.Internal.ExtendedDbDataReader"/>
            <seealso cref="P:CMS.Base.DataRecordContainer.IsFromCmsDatabase"/>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToXML(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Returns XML representation of current instance of IEnumerable.
            </summary>
            <param name="collection">Collection to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToXML(CMS.Base.IDataContainer,System.Xml.XmlWriter,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Writes XML representation of selected columns of current instance of <see cref="T:CMS.Base.IDataContainer"/> to provided <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="data">IDataContainer to serialize</param>
            <param name="xml"><see cref="T:System.Xml.XmlWriter"/> instance for outputting data</param>
            <param name="columns">Columns which should be written</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToXML(CMS.Base.IDataContainer,System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Writes XML representation of current instance of <see cref="T:CMS.Base.IDataContainer"/> to provided <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="data">IDataContainer to serialize</param>
            <param name="xml"><see cref="T:System.Xml.XmlWriter"/> instance for outputting data</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToXML(CMS.Base.IDataContainer,System.String,System.Boolean)">
            <summary>
            Returns XML representation of current instance of IDataContainer.
            </summary>
            <param name="data">IDataContainer to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Returns JSON representation of current instance of IEnumerable.
            </summary>
            <param name="collection">Collection to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(CMS.Base.IDataContainer,System.String,System.Boolean)">
            <summary>
            Returns JSON representation of current instance of IDataContainer.
            </summary>
            <param name="data">IDataContainer to serialize</param>
            <param name="rootName">Name of the root element</param>
            <param name="binary">If true, binary data is exported, if false, binary columns remain empty</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(System.Data.DataTable,System.Boolean)">
            <summary>
            Exports DataSet to JSON string.
            </summary>
            <param name="dt">DataTable to export</param>
            <param name="includeName">If true, name of the table is included in result</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToJSON(System.Data.DataSet,System.Boolean)">
            <summary>
            Exports DataSet to JSON string.
            </summary>
            <param name="ds">DataSet to export</param>
            <param name="includeName">If true, name of the dataset and names of the tables are included in the result</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.WhenColumnValue(CMS.Base.IConditionalObjectFactory,System.String,System.String,System.Func{System.Object,System.Boolean})">
            <summary>
            Adds the condition for the column value to the factory
            </summary>
            <param name="fact">Factory to extend</param>
            <param name="className">Object class name</param>
            <param name="columnName">Column name</param>
            <param name="condition">Condition that must be matched, if null, the value converted to bool must match</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetValueFromArray(System.Object[],System.String,System.String)">
            <summary>
            Gets the column value from the data array
            </summary>
            <param name="data">Data</param>
            <param name="className">Class name</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetTypeConditionValue(System.String,System.String)">
            <summary>
            Gets the column value from the type condition
            </summary>
            <param name="objectType">Object type</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.GetColumnIndex(System.String,System.String)">
            <summary>
            Gets the column index for the given class
            </summary>
            <param name="className">Class name</param>
            <param name="colName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.With``1(``0,System.Action{``0})">
            <summary>
            Sets up the object using the given lambda expression
            </summary>
            <param name="obj">Object to set up</param>
            <param name="setup">Set up action</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CombineWith(CMS.DataEngine.AuthorizationResultEnum,System.Boolean)">
            <summary>
            Combines the authorization result enum with a bool result
            </summary>
            <param name="result">Original result</param>
            <param name="combineWith">Result to combine with</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.CombineWith(CMS.DataEngine.AuthorizationResultEnum,CMS.DataEngine.AuthorizationResultEnum)">
            <summary>
            Combines the authorization result enum with a bool result
            </summary>
            <param name="result">Original result</param>
            <param name="combineWith">Result to combine with</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToBoolean(CMS.DataEngine.AuthorizationResultEnum)">
            <summary>
            Convert the authorization result to a boolean value representing allow / deny. Insignificant means deny.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="M:CMS.DataEngine.DataExtensions.ToAuthorizationResultEnum(System.Boolean)">
            <summary>
            Convert the boolean value to a AuthorizationResultEnum, outputs Allowed or Denied based on the bool value.
            </summary>
            <param name="result">Result</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassDataSqlStore">
            <summary>
            SQL store for data of an <see cref="T:CMS.DataEngine.IDataClass"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.Insert(CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Inserts <paramref name="dataClass"/> into the database.
            </summary>
            <param name="dataClass">Data class to be inserted.</param>
            <param name="initializeId">A value indicating whether to set the <paramref name="dataClass"/>'s ID column value to the value of the inserted record.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.Update(CMS.DataEngine.IDataClass)">
            <summary>
            Updates <paramref name="dataClass"/> in the database.
            </summary>
            <param name="dataClass">Data class to be updated.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.Upsert(CMS.DataEngine.IDataClass,CMS.DataEngine.WhereCondition)">
            <summary>
            Updates or inserts <paramref name="dataClass"/> in the database.
            </summary>
            <param name="dataClass">Data class to be updated or inserted.</param>
            <param name="existingWhere">Where condition to determine whether the <paramref name="dataClass"/> already exists in the database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.Delete(CMS.DataEngine.IDataClass)">
            <summary>
            Deletes <paramref name="dataClass"/> from the database.
            </summary>
            <param name="dataClass">Data class to be deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.GetDataQuery(System.String,System.String)">
            <summary>
            Gets the data query for <paramref name="className"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.IncludeData(CMS.DataEngine.DataQuery,CMS.DataEngine.IDataClass,System.Boolean,System.Func{System.String,System.Boolean},System.String[])">
            <summary>
            Includes the <paramref name="dataClass"/> data to the <paramref name="query"/>. Does not include primary key columns. Returns true if some data was included.
            </summary>
            <param name="query">Data query to include data to.</param>
            <param name="dataClass">Data class whose data to include.</param>
            <param name="includeColumns">If true, the columns are included to the query</param>
            <param name="valueFormats">Formats for the value expression, {0} represents the column name, {1} represents the parameter. If null, only value parameter is included</param>
            <param name="condition">Column condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.AddIDWhere(CMS.DataEngine.DataQuery,CMS.DataEngine.IDataClass)">
            <summary>
            Adds ID where condition to <paramref name="query"/> for <paramref name="dataClass"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.AddIDWhere(CMS.DataEngine.DataQuery,System.String,CMS.DataEngine.IDataClass)">
            <summary>
            Adds ID where condition to <paramref name="query"/> for <paramref name="dataClass"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.UpdateID(CMS.DataEngine.IDataClass,System.Data.DataSet)">
            <summary>
            Updates the ID of the <paramref name="dataClass"/> from the given query <paramref name="result"/>.
            </summary>
            <param name="dataClass">Data class whose ID column value to update.</param>
            <param name="result">Query result containing ID value.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassDataSqlStore.GetDeleteParameters(CMS.DataEngine.IDataClass)">
            <summary>
            Gets the parameters for the delete query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataClassFactory">
            <summary>
            DataClass factory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Creates new DataClass of the given type
            </summary>
            <param name="structureInfo">Class structure info</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String)">
            <summary>
            Creates new DataClass of the given type
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,System.Int32)">
            <summary>
            Constructor. Gets a class name and parameters for selecting the item. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,System.Data.DataRow)">
            <summary>
            Constructor. Gets a class name and data row. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="dataRow">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.NewDataClass(System.String,CMS.Base.IDataContainer)">
            <summary>
            Constructor. Gets a class name and data row. Use it to load an existing item.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="data">Data row representing the current item</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassFactory.ChangeDefaultDataClassTypeTo``1">
            <summary>
            Changes the default data class type to specific class
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataClass">
            <summary>
            DataClass interface.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ClassName">
            <summary> 
            Name of the data class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ID">
            <summary>
            Object ID.
            </summary>
            Property can be used only for objects with single <see cref="P:CMS.DataEngine.IDataClass.IDColumn"/>.
        </member>
        <member name="P:CMS.DataEngine.IDataClass.IDColumn">
            <summary>
            ID column(s).
            </summary>
            <remarks>Primary key can be identified by more than one column. In this case columns are separated by ';' character.</remarks>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.StructureInfo">
            <summary>
            Class structure information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.ColumnsCount">
            <summary>
            Number of the object columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.UseOriginalData">
            <summary>
            If true, original data is used instead of the actual data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataClass.IsReadOnly">
            <summary>
            Indicates whether class is in read-only mode.
            </summary>
            <seealso cref="M:CMS.DataEngine.IDataClass.SetReadOnly"/>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Insert(System.Boolean)">
            <summary> 
            Inserts current record in the database.
            </summary>
            <param name="initId">If true, ID of the new object is initialized.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Upsert(CMS.DataEngine.WhereCondition)">
            <summary>
            Updates or inserts the current record.
            </summary>
            <param name="existingWhere">Where condition for the existing object</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Update">
            <summary>
            Updates current record.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Delete(System.Boolean)">
            <summary>
            Deletes current record.
            </summary>
            <param name="preserveData">If true, object data are preserved (it is possible to manipulate with the object further)</param>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.IsEmpty">
            <summary>
            Returns true if the object is empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.GetDataSet">
            <summary>
            Gets the DataSet from the object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.Init(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Initializes an instance of data class after created by empty constructor
            </summary>
            <param name="structureInfo">Class structure info</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.CopyDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the class data to other data class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.CopyOriginalDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the original class data to other data class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.LoadData(CMS.Base.IDataContainer,System.Boolean)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Source data</param>
            <param name="loadNullValues">If true, null values are loaded to the object</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.LoadData(System.Int32)">
            <summary>
            Loads the object data by the given primary key value
            </summary>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClass.SetReadOnly">
            <summary>
            Locks the data class as a read-only
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataClassDataStore">
            <summary>
            Declares operations for storing data of an <see cref="T:CMS.DataEngine.IDataClass"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataClassDataStore.Insert(CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Inserts <paramref name="dataClass"/> into the store.
            </summary>
            <param name="dataClass">Data class to be inserted.</param>
            <param name="initializeId">A value indicating whether to set the <paramref name="dataClass"/>'s ID column value to the value of the inserted record.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClassDataStore.Update(CMS.DataEngine.IDataClass)">
            <summary>
            Updates <paramref name="dataClass"/> in the store.
            </summary>
            <param name="dataClass">Data class to be updated.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClassDataStore.Upsert(CMS.DataEngine.IDataClass,CMS.DataEngine.WhereCondition)">
            <summary>
            Updates or inserts <paramref name="dataClass"/> in the store.
            </summary>
            <param name="dataClass">Data class to be updated or inserted.</param>
            <param name="existingWhere">Where condition to determine whether the <paramref name="dataClass"/> already exists in the store.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataClassDataStore.Delete(CMS.DataEngine.IDataClass)">
            <summary>
            Deletes <paramref name="dataClass"/> from the store.
            </summary>
            <param name="dataClass">Data class to be deleted.</param>
        </member>
        <member name="T:CMS.DataEngine.MissingValue">
            <summary>
            Missing value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MissingValue.ToString">
            <summary>
            ToString, returns (missing).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SimpleDataClass">
            <summary>
            Simple DataClass object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ClassName">
            <summary>
            Object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Data">
            <summary>
            Object data.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode and value is requested.</exception>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IsReadOnly">
            <summary>
            Indicates whether class is in read-only mode.
            </summary>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ID">
            <summary>
            Object ID.
            </summary>
            <remarks>
            Property can be used only for objects with single <see cref="P:CMS.DataEngine.SimpleDataClass.IDColumn"/>.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IDColumn">
            <summary>
            ID column(s).
            </summary>
            <remarks>Primary key can be identified by more than one column. In this case columns are separated by ';' character.</remarks>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.StructureInfo">
            <summary>
            Class structure info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.ColumnsCount">
            <summary>
            Number of the object columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.Item(System.String)">
            <summary>
            Column indexer, gets or sets the value in specified column name.
            </summary>
            <param name="columnName">Column name</param>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode and value is requested.</exception>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.HasChanged">
            <summary>
            Returns true if the object data changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates. When ID of the object is set, the object does a full update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SimpleDataClass.UseOriginalData">
            <summary>
            If true, original data is used instead of the actual data for read. Write is modifying original and actual data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.Boolean)">
            <summary>
            Internally visible constructor
            </summary>
            <param name="dummy">Dummy parameter</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Init(CMS.DataEngine.ClassStructureInfo)">
            <summary>
            Initializes an instance of data class after created by empty constructor
            </summary>
            <param name="structureInfo">Class structure info</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Object info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Object info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetValue(System.String)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode.</exception>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetValueInternal(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataSet">
            <summary>
            Gets the DataSet from the object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataRow">
            <summary>
            Gets the class Data row.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(CMS.Base.IDataContainer,System.Boolean)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="data">Source data</param>
            <param name="loadNullValues">If true, null values are loaded to the object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ContainsExternalData(CMS.Base.IDataContainer)">
            <summary>
            Returns true if the given data container contains data from external source
            </summary>
            <param name="data">Data container to check</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SelectData(System.String,System.Int32)">
            <summary>
            Loads data row of the current class with specified value of column (typically ID).
            </summary>
            <param name="className">Class name</param>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadData(System.Int32)">
            <summary>
            Loads the object data by the given primary key value
            </summary>
            <param name="primaryKeyValue">Primary key value</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetReadOnly">
            <summary>
            Locks the data class as read-only.
            </summary>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetValue(System.String,System.Object)"/>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.NullMissingData">
            <summary>
            Loads the null values into the missing fields.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.LoadMissingData(System.Data.DataRow)">
            <summary>
            Loads the missing object data from given DataRow.
            </summary>
            <param name="dr">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Delete(System.Boolean)">
            <summary>
            Deletes current record.
            </summary>
            <param name="preserveData">If true, object data are preserved (it os possible to manipulate with the object further)</param>
            <remarks>The method assumes that the primary key is the first column in the DataRow.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDeleteParameters">
            <summary>
            Gets the parameters for the delete query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.AddIDWhere(CMS.DataEngine.DataQuery)">
            <summary>
            Adds ID where condition for this object 
            </summary>
            <param name="q">Data query to manipulate</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Insert(System.Boolean)">
            <summary> 
            Inserts current record in the database.
            </summary>
            <param name="initId">If true, ID of the new object is initialized.</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.UpdateID(System.Data.DataSet)">
            <summary>
            Updates the ID of the record from the given query result
            </summary>
            <param name="result">Query result</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Update">
            <summary>
            Updates current record.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.Upsert(CMS.DataEngine.WhereCondition)">
            <summary>
            Updates or inserts the current record.
            </summary>
            <param name="existingWhere">Where condition for the existing object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.IsEmpty">
            <summary>
            Returns true if the object is empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetDataQuery(System.String)">
            <summary>
            Gets the data query for this class
            </summary>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.IncludeData(CMS.DataEngine.DataQuery,System.Boolean,System.Func{System.String,System.Boolean},System.String[])">
            <summary>
            Includes the object data to the query. Does not include primary key columns. Returns true if some data was included.
            </summary>
            <param name="q">Data query</param>
            <param name="includeColumns">If true, the columns are included to the query</param>
            <param name="valueFormats">Formats for the value expression, {0} represents the column name, {1} represents the parameter. If null, only value parameter is included</param>
            <param name="condition">Column condition</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.AddIDWhere(CMS.DataEngine.DataQuery,System.String)">
            <summary>
            Adds the ID where condition to the query
            </summary>
            <param name="q">Query</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode.</exception>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ResetChanges">
            <summary>
            Resets the object changes (original values) and keeps the new values.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode.</exception>
            <remarks>Reset action can be suppressed by <see cref="P:CMS.Base.CMSActionContext.ResetChanges"/> option.</remarks>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ChangedColumns">
            <summary>
            Returns list of column names whose values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.EnsureOriginalData">
            <summary>
            Ensures the object original data to store the object state.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.SetData(System.Int32,System.Object)">
            <summary>
            Sets the specific data.
            </summary>
            <param name="columnIndex">Column index</param>
            <param name="value">Value to set</param>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode.</exception>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the object data to another object.
            </summary>
            <param name="target">Target for the data.</param>
            <remarks>Copying is allowed only for objects with same class name.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CopyOriginalDataTo(CMS.DataEngine.IDataClass)">
            <summary>
            Copies the original data of the DataClass object to another.
            </summary>
            <param name="target">Destination object.</param>
            <remarks>Copying is allowed only for objects of the same type and class name.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.CheckTargetClass(CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Checks if target data class matches this data class
            </summary>
            <param name="target">Target data class</param>
            <param name="throwException">If true, the exception is thrown if classes don't match</param>
            <exception cref="T:System.Exception">Thrown when <paramref name="throwException"/> is set and class name or type is not equal with current instance.</exception>
        </member>
        <member name="M:CMS.DataEngine.SimpleDataClass.ValidateWriteAction(CMS.DataEngine.IDataClass)">
            <summary>
            Validates write action against read only flag.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when object is in read-only mode.</exception>
            <seealso cref="M:CMS.DataEngine.SimpleDataClass.SetReadOnly"/>
        </member>
        <member name="T:CMS.DataEngine.ClassStructureInfo">
            <summary>
            Class information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ClassInfos">
            <summary>
            Class structure infos [className] -> [ClassInfo]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnsCount">
            <summary>
            Columns count.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnDefinitions">
            <summary>
            Column definitions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnIndexes">
            <summary>
            Column indexes dictionary [columnName] -> [columnIndex]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.BinaryColumns">
            <summary>
            List of binary column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.StringColumns">
            <summary>
            List of string column names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.ClassName">
            <summary>
            Class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.IDColumn">
            <summary>
            ID column name(s).
            </summary>
            <remarks>Primary key can be identified by more than one column. In this case columns are separated by ';' character.</remarks>
        </member>
        <member name="P:CMS.DataEngine.ClassStructureInfo.HasBinaryColumns">
            <summary>
            Returns true if this class has some binary columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="className">Class name</param>
            <param name="xmlSchema">Class XML schema</param>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetTableIndexes">
            <summary>
            Gets underlying database table's indexes. Returns null when information regarding indexes is not available.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetIDColumn">
            <summary>
            Gets the ID column name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnNames">
            <summary>
            Gets the list of column names
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetNewData">
            <summary>
            Gets new data array for object of the given class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.SetAllMissing(System.Object[])">
            <summary>
            Sets all the items in the data to missing values.
            </summary>
            <param name="data">Data to set</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.CheckComplete(System.Object[])">
            <summary>
            Checks whether the given data is complete (has all columns set to some value).
            </summary>
            <param name="data">Data to check</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetNewDataSet">
            <summary>
            Gets new data structure for class data as a DataSet.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnIndex(System.String)">
            <summary>
            Gets the column index.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Returns column index if exists; otherwise -1.</returns>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumnType(System.String)">
            <summary>
            Gets the column type.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the data class has the specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ConvertDataToParams(System.Object[],System.Boolean,System.Boolean)">
            <summary>
            Returns the object data converted to the query parameters.
            </summary>
            <param name="data">Data</param>
            <param name="allowMissing">If true, the process allows missing values</param>
            <param name="nullForMissing">If true, missing values are replaced by NULLs</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.ConvertDataToParams(CMS.DataEngine.IDataClass,System.Boolean,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.DataEngine.QueryDataParameters"/> representing the <paramref name="dataClass"/>.
            </summary>
            <param name="dataClass">Data class for which to create <see cref="T:CMS.DataEngine.QueryDataParameters"/> representation.</param>
            <param name="allowMissing">A value indicating whether missing values within <paramref name="dataClass"/> are allowed (suitable for a partial update query).</param>
            <param name="nullForMissing">A value indicating whether missing values are filled with <c>null</c> value.</param>
            <returns>Returns <see cref="T:CMS.DataEngine.QueryDataParameters"/> representing the <paramref name="dataClass"/>.</returns>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.LoadColumns(System.String)">
            <summary>
            Loads the columns from given XML schema.
            </summary>
            <param name="xmlSchema">XML schema</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.RegisterColumn(System.String,System.Type)">
            <summary>
            Registers the given column within the structure info
            </summary>
            <param name="colName">Column name</param>
            <param name="colType">Column type</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.InitCollections">
            <summary>
            Initializes the inner collections for structure
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumns(System.Type)">
            <summary>
            Gets the list of columns of the given type
            </summary>
            <param name="type">Type to match</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetClassInfo(System.String)">
            <summary>
            Returns the class info for specified class.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Clear(System.Boolean)">
            <summary>
            Clear the class infos and properties lists of all object types.
            </summary>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Remove(System.String,System.Boolean)">
            <summary>
            Removes the specified class structure definition.
            </summary>
            <param name="className">ClassName to remove</param>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetColumns(System.String[])">
            <summary>
            Gets the columns for the listed class names
            </summary>
            <param name="classNames">List of class names to get</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.Combine(System.String,CMS.DataEngine.ClassStructureInfo[])">
            <summary>
            Combines class structure definitions to the one
            </summary>
            <param name="source">Source of the data (database table or view)</param>
            <param name="structures">List of structure definitions to combine</param>
        </member>
        <member name="M:CMS.DataEngine.ClassStructureInfo.GetXmlSchema">
            <summary>
            Gets the XML schema of the DataSet represented by this structure
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnDefinition">
            <summary>
            Data column definition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnDefinition.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnDefinition.ColumnType">
            <summary>
            Column type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ColumnDefinition.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="name">Column name</param>
            <param name="type">Column type</param>
        </member>
        <member name="M:CMS.DataEngine.ColumnDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.DataEngine.ColumnDefinition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="T:CMS.DataEngine.DataDefinition">
            <summary>
            Data definition base class
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataDefinition.xmlDoc">
            <summary>
            XML document representing FormInfo.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataDefinition.ItemsList">
            <summary>
            Returns list of all FormItems.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.#ctor">
            <summary>
            Constructor, creates empty not initialized data definition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.#ctor(System.String)">
            <summary>
            Constructor, creates the form info structure and loads specified form definition.
            </summary>
            <param name="dataDefinition">XML definition of the data</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.GetXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets the XML element for the data
            </summary>
            <param name="doc">Parent XML document</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadFromDefinition(System.String)">
            <summary>
            Loads the data definition from XML file
            </summary>
            <param name="dataDefinition">Data definition</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Loads the data from the given XML element
            </summary>
            <param name="element">XML element</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadItem(System.Xml.XmlNode)">
            <summary>
            Loads the item from the XML node
            </summary>
            <param name="node">XML node</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadFromDataStructure(System.String,CMS.DataEngine.TableManager,System.Boolean)">
            <summary>
            Loads the data definition from structure of a database table
            </summary>
            <param name="tableName">Database table name</param>
            <param name="manager">Table manager instance to use</param>
            <param name="isSystem">If it is true, all field are assigned like system</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.LoadField(System.Xml.XmlNode)">
            <summary>
            Loads the field from the XML node
            </summary>
            <param name="node">XML node</param>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.GetFields``1">
            <summary>
            Gets the field of the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinition.NewFieldDefinition">
            <summary>
            Creates a new field definition object
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataDefinitionItemChangeEventArgs">
            <summary>
            Data definition item change arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataDefinitionItemChangeEventArgs.OriginalItem">
            <summary>
            Original data item
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataDefinitionItemChangeHandler">
            <summary>
            Data definition item change handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinitionItemChangeHandler.StartEvent(CMS.DataEngine.DataClassInfo,CMS.DataEngine.IDataDefinitionItem,CMS.DataEngine.IDataDefinitionItem)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="classInfo">Data class info</param>
            <param name="originalItem">Original data item</param>
            <param name="item">Current data item</param>
        </member>
        <member name="T:CMS.DataEngine.DataDefinitionItemEventArgs">
            <summary>
            Data definition item arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataDefinitionItemEventArgs.Item">
            <summary>
            Data item
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataDefinitionItemEventArgs.ClassInfo">
            <summary>
            Class being edited
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataDefinitionItemEvents">
            <summary>
            Events for data definition item handling
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataDefinitionItemEvents.AddItem">
            <summary>
            Fires after a definition item was added
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataDefinitionItemEvents.RemoveItem">
            <summary>
            Fires before a definition item was removed
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataDefinitionItemEvents.ChangeItem">
            <summary>
            Fires after a definition item was changed
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataDefinitionItemHandler">
            <summary>
            Data definition item handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataDefinitionItemHandler.StartEvent(CMS.DataEngine.DataClassInfo,CMS.DataEngine.IDataDefinitionItem)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="classInfo">Data class info</param>
            <param name="item">Data item</param>
        </member>
        <member name="T:CMS.DataEngine.FieldBase`1">
            <summary>
            Form field base class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Caption">
            <summary>
            Column caption.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.AllowEmpty">
            <summary>
            Indicates whether field allows null values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.PrimaryKey">
            <summary>
            Indicates whether field is a primary key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Size">
            <summary>
            Size of the field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Precision">
            <summary>
            Precision of the field
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.DefaultValue">
            <summary>
            Field default value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Guid">
            <summary>
            Field unique identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.System">
            <summary>
            Indicates if field is a system field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsUnique">
            <summary>
            Indicates whether field is unique.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.External">
            <summary>
            Indicates if field is external, if so it represents column from another table which is included in CMS_Tree_View_Joined (CMS_Document, CMS_Node, ...).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsInherited">
            <summary>
            If true, the field is inherited from parent class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsDummyField">
            <summary>
            Indicates that field has no representation in database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsDummyFieldFromMainForm">
            <summary>
            If true the field was added into the main form else it was added into the alt.form (expects <see cref="P:CMS.DataEngine.FieldBase`1.IsDummyField"/> property to be true).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.IsExtraField">
            <summary>
            Indicates that field is extra field (field is not in original form definition).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.Properties">
            <summary>
            Properties of the field
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.PropertiesMacroTable">
            <summary>
            Macro table for the field properties.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.FieldBase`1.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.LoadFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Loads the field info from XML node
            </summary>
            <param name="fieldNode">Field node</param>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.LoadFromTableData(System.Data.DataRow,System.Boolean,System.Boolean)">
            <summary>
            Loads the field info from plain database structure data.
            </summary>
            <param name="row">Data row with structure information</param>
            <param name="isPrimary">Indicates if field represents primary key</param>
            <param name="isSystem">Indicates if field is system field</param>
            <remarks>Database structure data can be obtained via <see cref="M:CMS.DataEngine.TableManager.GetColumnInformation(System.String,System.String)"/>.</remarks>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.ToString">
            <summary>
            Returns field name value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.RegisterColumns">
            <summary>
            Registers the Columns of this object for resolving data macros.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.Clone">
            <summary>
            Clones the object.
            </summary>
            <returns>Returns clone of FormFiedlInfo</returns>
        </member>
        <member name="M:CMS.DataEngine.FieldBase`1.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns the XML node representing the FormFieldInfo object.
            </summary>
            <param name="doc">XML document</param>
        </member>
        <member name="T:CMS.DataEngine.FieldDataType">
            <summary>
            Field data types - string constants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.ALL">
            <summary>
            All datatypes.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Unknown">
            <summary>
            Unknown data type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.LongText">
            <summary>
            Long text.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.LongInteger">
            <summary>
            Long integer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Double">
            <summary>
            Double.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.DateTime">
            <summary>
            Date and time.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.DocAttachments">
            <summary>
            Document attachments.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Guid">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Binary">
            <summary>
            Binary.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.TimeSpan">
            <summary>
            Time span
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FieldDataType.DocRelationships">
            <summary>
            Document relationships
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FieldInfo">
            <summary>
            Basic field definition
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IDataDefinitionItem">
            <summary>
            Interface for data definition items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataDefinitionItem.Clone">
            <summary>
            Clones current object and returns copy of it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataDefinitionItem.GetXmlNode(System.Xml.XmlDocument)">
            <summary>
            Returns XML representation of current object.
            </summary>
            <param name="doc">XML document with other items</param>
        </member>
        <member name="M:CMS.DataEngine.IDataDefinitionItem.LoadFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Loads the field info from XML node.
            </summary>
            <param name="node">Field node</param>
        </member>
        <member name="M:CMS.DataEngine.IDataDefinitionItem.LoadFromTableData(System.Data.DataRow,System.Boolean,System.Boolean)">
            <summary>
            Loads the field info from plain database structure data.
            </summary>
            <param name="row">Data row with structure information</param>
            <param name="isPrimary">Indicates if field represents primary key</param>
            <param name="isSystem">Indicates if field is system field</param>
            <remarks>Database structure data can be obtained via <see cref="M:CMS.DataEngine.TableManager.GetColumnInformation(System.String,System.String)"/>.</remarks>
        </member>
        <member name="T:CMS.DataEngine.IField">
            <summary>
            Interface for field items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.Caption">
            <summary>
            Column caption.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.AllowEmpty">
            <summary>
            Indicates whether field allow empty values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.PrimaryKey">
            <summary>
            Indicates whether field is a primary key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.Size">
            <summary>
            Size of the field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.Precision">
            <summary>
            Precision of the field
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.DefaultValue">
            <summary>
            Field default value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.Guid">
            <summary>
            Field unique identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.System">
            <summary>
            Indicates if field is a system field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.IsUnique">
            <summary>
            Indicates whether field is unique.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.External">
            <summary>
            Indicates if field is external, if so it represents column from another table which is included in CMS_Tree_View_Joined (CMS_Document, CMS_Node, ...).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.IsInherited">
            <summary>
            If true, the field is inherited from parent class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.IsDummyField">
            <summary>
            Indicates that field has no representation in database.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.IsDummyFieldFromMainForm">
            <summary>
            If true the field was added into the main form else it was added into the alt.form (expects <see cref="P:CMS.DataEngine.IField.IsDummyField"/> property to be true).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.IsExtraField">
            <summary>
            Indicates that field is extra field (field is not in original form definition).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.Properties">
            <summary>
            Properties of the field
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.PropertiesMacroTable">
            <summary>
            Macro table for the field properties.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IField.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SynchronizationObjectSettings">
            <summary>
            Class encapsulating parameters for GeneralizedInfo serialization (export).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.RequestStockKey">
            <summary>
            Returns key for request stock helper caching.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.BindingDuplicities">
            <summary>
            Gets duplicities for object bindings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.TranslationHelper">
            <summary>
            Translation helper to pass to the callback methods.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.Operation">
            <summary>
            Operation type (Export / Synchronization / etc.). According to this parameter export determines which child / binding objects to include in the export.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.CreateHierarchy">
            <summary>
            If true, result will be hierarchical (children, bindings in lower level than parent etc.).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.HandleBoundObjects">
            <summary>
            If false, all bound objects (such as children or all types of bindings) are not being handled.
            If true, handling of these objects is determined by more specific settings (such as IncludeChildren, IncludeBindings, etc.)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeChildren">
            <summary>
            If true, child objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeBindings">
            <summary>
            If true, binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeOtherBindings">
            <summary>
            If true, other binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeSiteBindings">
            <summary>
            If true, site binding objects are included in the result. This setting is applied only when IncludeBindings is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeTranslations">
            <summary>
            If true, translation table is exported within the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.ProcessTranslations">
            <summary>
            If true, translation table is filled within ProcessTranslations method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeCategories">
            <summary>
            If true, parent category hierarchy of the object is included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeMetafiles">
            <summary>
            If true, metafiles of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeRelationships">
            <summary>
            If true, relationships of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeScheduledTasks">
            <summary>
            If true, scheduled tasks of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeProcesses">
            <summary>
            If true, automation processes of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.MaxRelativeLevel">
            <summary>
            Determines maximal level of the relationship (parent-child). -1 means all levels, 0 means no child objects, 1 means first level of children, etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DisableCollectionPaging">
            <summary>
            If true, the traversal process sets AllowPaging to false to all the collections it goes through.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.EnsureBinaryData">
            <summary>
            If true, all the collections are forced to load binary data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocLinkedDocuments">
            <summary>
            If true, linked documents are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocConnectedObjects">
            <summary>
            Gets or sets the list of collections from ConnectedObjects collection which will go into the result.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SynchronizationObjectSettings.OnProcessID">
            <summary>
            Handles FK ID (can be used to fill translation helper for example).
            </summary>
            <param name="settings">Export settings object</param>
            <param name="obj">Object (TreeNode / Info object) to process</param>
            <param name="columnName">Column name of the dependency</param>
            <param name="objectType">Object type of the dependency</param>
            <param name="required">Determines whether the dependency is required (reflects required flag from TypeInfo).</param>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.ProcessIDCallback">
            <summary>
            Method which is called to process any FK ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.RootName">
            <summary>
            Name of the root element of the resulting export (root of xml).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.Binary">
            <summary>
            If true, binary data is exported as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.IncludeObjectData">
            <summary>
            If false, object data are not exported (true by default).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.WhereCondition">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.OrderBy">
            <summary>
            Gets or sets ORDER BY clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.Columns">
            <summary>
            Gets or sets COLUMNS clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.TopN">
            <summary>
            Gets or sets TOP N clause.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.Offset">
            <summary>
            Gets or sets offset of the records.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.MaxRecords">
            <summary>
            Gets or sets maximum number of records.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocSiteName">
            <summary>
            Nodes site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocAliasPath">
            <summary>
            Path. It may contain % and _ as wild card characters for any number of unknown characters or one unknown character respectively (for MS SQL).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocCultureCode">
            <summary>
            Nodes culture code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocClassNames">
            <summary>
            List of classNames to select separated by semicolon (e.g.: "cms.article;cms.product").
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocVersion">
            <summary>
            Version of the document to return.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocCombineWithDefaultCulture">
            <summary>
            Specifies if return the default culture document when specified culture not found.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocSelectOnlyPublished">
            <summary>
            Select only published nodes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocCoupledData">
            <summary>
            If false, coupled data are not included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocSingleDocument">
            <summary>
            If true, only single document is selected
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocDeleteAllCultures">
            <summary>
            If true, all cultures are deleted when document is being deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.DocDestroyHistory">
            <summary>
            If true, the history is deleted when the document is being deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.ExportItemURI">
            <summary>
            Gets or sets URI of the exported item (needed for ODATA export).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationObjectSettings.JSONCallback">
            <summary>
            Gets or sets the callback JS code used a JSONP.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TraverseObjectSettings">
            <summary>
            Class encapsulating parameters for GeneralizedInfo serialization (export).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.RequestStockKey">
            <summary>
            Returns key for request stock helper caching.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.Format">
            <summary>
            Format of the export data (xml/json/etc.).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.Encoding">
            <summary>
            Gets or sets the encoding used for REST responses.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.LocalizeToLanguage">
            <summary>
            Culture code of the language to which the resulting response will be localized (if there are any localization macros - for example as a display name of the object).
            Null or empty string mean no localization is done to the response.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.IncludeMetadata">
            <summary>
            If true, metadata are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.Translate">
            <summary>
            If true, REST request was for translation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TraverseObjectSettings.ExcludedNames">
            <summary>
            Objects with codename or display name starting with these names will be filtered out.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GetObjectsDataSettings">
            <summary>
            Configuration class for <see cref="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.GetObjectsDataSettings)"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.Operation">
            <summary>
            Operation type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.InfoObject">
            <summary>
            Main info object for which the data should be retrieved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.WhereCondition">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.OrderBy">
            <summary>
            Order by.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.IncludeChildData">
            <summary>
            Indicates if child object data should be included into selection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.IncludeBinaryData">
            <summary>
            Indicates if binary data should be included into selection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.TranslationTable">
            <summary>
            Translation table to initialize with data bindings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.ExcludedNames">
            <summary>
            List of names which are used to filter out objects having codename or display name that starts with one of these names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetObjectsDataSettings.SiteId">
            <summary>
            Site ID specifies that only site child objects and bindings are included into selection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GetObjectsDataSettings.#ctor(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.GeneralizedInfo,CMS.DataEngine.WhereCondition,System.String,System.Boolean,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[])">
            <summary>
            Constructor of the configuration class.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Main info object</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns for the main objects</param>
            <param name="childData">If true, child objects data are included</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
        </member>
        <member name="M:CMS.DataEngine.GetObjectsDataSettings.Clone">
            <summary>
            Creates clone of current settings object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.HierarchyHelper">
            <summary>
            Object hierarchy manipulation methods.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HierarchyHelper.Settings">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.HierarchyHelper.ResultBuilder">
            <summary>
            Result builder
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.#ctor(CMS.DataEngine.TraverseObjectSettings)">
            <summary>
            Default constructor for inheritance
            </summary>
            <param name="settings">Settings of the serialization</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.#ctor(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Creates new instance of CMSHierarchyHelper which can be used to serialize given object.
            </summary>
            <param name="settings">Settings of the serialization</param>
            <param name="info">GeneralizedInfo to serialize</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.TraverseObjectStructure(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Goes through the object structure and calls given delegates.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.TraverseObjectStructure(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Goes through the object structure and calls given delegates.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportCategories(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object categories
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportProcesses(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object automation processes
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportScheduledTasks(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object scheduled tasks
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportMetafiles(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object metafiles
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportOtherBindings(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object other bindings
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportBindings(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object bindings
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportChildren(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object children
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportChildDependencies(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object child dependencies
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
            <param name="currentLevel">Current level of the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportParentCategories(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Exports the object categories if the main object is a category
            </summary>
            <param name="settings">Traverse settings</param>
            <param name="info">Info object</param>
            <param name="currentLevel">Current level</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.IsExcluded(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Returns true if the object is excluded
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessTranslations(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Processes (logs) the object translations
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="info">GeneralizedInfo to serialize</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallStartCollection(CMS.DataEngine.TraverseObjectSettings,System.String)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallStartCollection(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Determines whether it's the start of an array</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallEndCollection(CMS.DataEngine.TraverseObjectSettings,System.String)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallEndCollection(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Calls given delegate with required parameters if delegate is not null.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Determines whether it's the start of an array</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallItemCallback(CMS.DataEngine.TraverseObjectSettings,System.Boolean)">
            <summary>
            Calls item callback if exists.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="isEnd">Determines whether is is the end of the item or the beginning</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.CallObjectCallback(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo,System.Int32)">
            <summary>
            Calls object callback if exists.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="infoObj">Info object</param>
            <param name="level">Current level</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportCategoryObjects(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Exports categories data to given StringBuilder object.
            </summary>
            <param name="settings">Traverse object object</param>
            <param name="info">Info object the categories of which should be exported</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.TraverseObjectCollection(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.IInfoObjectCollection,System.Int32,System.Boolean,System.Func{CMS.DataEngine.BaseInfo,System.Boolean})">
            <summary>
            Exports given child collection.
            </summary>
            <param name="settings">Traverse object settings</param>
            <param name="collection">InfoObject collection</param>
            <param name="currentLevel">Current level of the relationship (parent - child)</param>
            <param name="checkInclusion">If true, TypeInfo.IncludeToParentDataSet is called to check whether to include child to result</param>
            <param name="objectFilter">Function representing object filter</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportObject(CMS.DataEngine.TraverseObjectSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns XML representation of given instance of info object.
            </summary>
            <param name="settings">Export settings</param>
            <param name="infoObj">Info object to export</param>
            <returns>XML representation of given instance of info object.</returns>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportObject">
            <summary>
            Returns XML representation of given instance of info object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.DataAvailable">
            <summary>
            Returns true if the data can be exported
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ExportObjectData">
            <summary>
            Exports the object data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetMetadataSource">
            <summary>
            Gets the metadata source object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetSyndicationItem(System.ServiceModel.Syndication.SyndicationContent)">
            <summary>
            Gets the syndication item created from current object
            </summary>
            <param name="content">Content</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessObjectMethod(CMS.DataEngine.TraverseObjectSettings,CMS.Base.ICMSObject,System.Int32)">
            <summary>
            Handles export to required format.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="obj">Object (TreeNode / Info Object) to process</param>
            <param name="currentLevel">Current level within the object tree structure</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessItemMethod(CMS.DataEngine.TraverseObjectSettings,System.Boolean)">
            <summary>
            Handles FK ID (can be used to fill translation helper for example).
            </summary>
            <param name="settings">Export object settings (not needed in this implementation)</param>
            <param name="isEnd">Determines whether its start or end of the item</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessIDMethod(CMS.DataEngine.TraverseObjectSettings,CMS.Base.ICMSObject,System.String,System.String,System.Boolean)">
            <summary>
            Handles FK ID (can be used to fill translation helper for example).
            </summary>
            <param name="settings">Export object settings (not needed in this implementation)</param>
            <param name="obj">Object (TreeNode / InfoObject) to export</param>
            <param name="columnName">Column name of the dependency</param>
            <param name="objectType">Object type of the dependency</param>
            <param name="required">Determines whether the dependency is required (reflects required flag from TypeInfo).</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessStartCollectionMethod(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Handles start of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Indicates whether it's array collection (important for export to JSON)</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessArraySeparatorMethod(CMS.DataEngine.TraverseObjectSettings)">
            <summary>
            Handles array separator of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessEndCollectionMethod(CMS.DataEngine.TraverseObjectSettings,System.String,System.Boolean)">
            <summary>
            Handles end of the collection export.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="name">Name of the collection</param>
            <param name="isArray">Indicates whether it's array collection (important for export to JSON)</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.ProcessTranslations(CMS.DataEngine.TraverseObjectSettings,CMS.Base.SafeDictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Text.StringBuilder)">
            <summary>
            Fills translation helper with data from hashtable and appends translations to the result if needed.
            </summary>
            <param name="settings">Export settings</param>
            <param name="translations">Hashtable with translations</param>
            <param name="sb">StringBuilder to append result to</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.WrapResult(CMS.DataEngine.TraverseObjectSettings,System.String)">
            <summary>
            Wraps final result into root if needed.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="code">Code to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.AppendNode(CMS.DataEngine.TraverseObjectSettings,System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Appends hierarchy node to the result.
            </summary>
            <param name="settings">Export settings object</param>
            <param name="sb">StringBuilder object with the result</param>
            <param name="nodeName">Name of the node</param>
            <param name="endTag">Determines whether to append start or end tag</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.AddTranslation(System.String,System.Int32,CMS.Base.SafeDictionary{System.String,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Adds given ID into the translation table to correct list according to objectType
            </summary>
            <param name="objectType">Object type of the object</param>
            <param name="id">ID of the object</param>
            <param name="translationTable">Translation table</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetMetadata(CMS.DataEngine.TraverseObjectSettings,System.Object)">
            <summary>
            Returns metadata for given object according to export settings.
            </summary>
            <param name="settings">Export settings format</param>
            <param name="obj">Object to get the metadata of</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetListOfColumns(System.Object,System.Boolean@)">
            <summary>
            Returns list of supported columns/properties
            </summary>
            <param name="obj">Object to get the metadata of</param>
            <param name="isProperties">For properties this param will be true, otherwise (columns) false</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromXML(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.BaseInfo,System.String,System.Boolean,System.Boolean,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Loads objects data including collection from a given XML representation (root of the xml has to be ClassTableName of given object).
            </summary>
            <param name="operation">Operation type</param>
            <param name="obj">Object to load</param>
            <param name="xml">XML data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="updateOnlySpecifiedColumns">If true, only column contained in the <paramref name="xml"/> are loaded (columns which are not contained are not set to null)</param>
            <param name="cultureName">Name of the culture to use for parsing double and datetime values</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
            <returns>Translation helper</returns>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromJSON(CMS.DataEngine.BaseInfo,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Loads objects data including collection from a given JSON representation.
            </summary>
            <param name="obj">Object to load</param>
            <param name="json">JSON data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="updateOnlySpecifiedColumns">If true, only column contained in the <paramref name="json"/> are loaded (columns which are not contained are not set to null)</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
            <param name="cultureName">Name of culture used for parsing values from JSON.</param>
            <returns>Translation helper</returns>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadDataSetFromJSON(System.Data.DataSet,System.String,System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject},System.String)">
            <summary>
            Recursively loads dataset from JSON deserialized object. Returns list of fields contained in the JSON data (for update object purposes).
            </summary>
            <param name="ds">DataSet to fill the data in</param>
            <param name="tableName">Name of the table</param>
            <param name="values">Values from deserialization</param>
            <param name="cultureName">Name of culture used for parsing values from JSON.</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromDataSet(CMS.DataEngine.GeneralizedInfo,System.Data.DataSet,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads object data including collection from a given data set.
            </summary>
            <param name="obj">Object to load</param>
            <param name="ds">Dataset with data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="columnsToUpdate">List of columns which will be updated</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromDataSet(CMS.DataEngine.GeneralizedInfo,System.Data.DataSet,System.Boolean,System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads object data including collection from a given data set.
            </summary>
            <param name="obj">Object to load</param>
            <param name="ds">Dataset with data</param>
            <param name="disconnectObject">If true, object collections are disconnected (collections won't load data automatically from the DB, just from dataset)</param>
            <param name="id">ID of the object to identify it within the DataSet</param>
            <param name="columnsToUpdate">List of columns which will be updated</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.GetCompositeID(System.String,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns object ID even if it is composed out of multiple columns.
            </summary>
            <param name="idColumns">ID columns separated with semicolon</param>
            <param name="infoObj">Object to get ID from</param>
        </member>
        <member name="M:CMS.DataEngine.HierarchyHelper.LoadObjectFromDataRow(CMS.Base.IDataContainer,System.Data.DataRow,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Loads an GeneralizedInfo with values from given DataRow.
            </summary>
            <param name="container">Container to load</param>
            <param name="dr">DataRow with data</param>
            <param name="columnsToUpdate">List of columns to update</param>
            <param name="excludedColumns">Columns which will be ignored during the data load even if they are in the provided data</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`1">
            <summary>
            Abstract object info class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Boolean)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="createData">If true, data structure of the object is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="dr">DataRow with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="sourceData">Source data</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.NewObject(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Creates new object of the given class based on the given settings
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(System.String)">
            <summary>
            Creates new object of the given class based on the given object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(System.Action{`0},System.String)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="initializer">Optional initializer to set additional properties to the object</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Creates new object of the given class with the ability to specify more details about how the object should be initialized.
            Use other New methods for default loading of data.
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(System.Data.DataRow,System.String)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="dr">Data row with the data</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`1.New(CMS.Base.IDataContainer,System.String)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="dc">Container with the source data</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfoBase`1">
            <summary>
            Abstract object info class.
            </summary>
            <summary>
            Abstract object info class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoBase`1.mCombinedColumnNames">
            <summary>
            Column names, cached either by call to <seealso cref="M:CMS.DataEngine.AbstractInfoBase`1.CombineColumnNames(System.String[])"/> (or its override) or in the code of inherited class.
            </summary>
            <seealso cref="M:CMS.DataEngine.AbstractInfoBase`1.CombineColumnNames(System.Collections.ICollection[])"/>
            <seealso cref="M:CMS.DataEngine.AbstractInfoBase`1.CombineColumnNames(System.String[])"/>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoBase`1.mGenerator">
            <summary>
            Object generator
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AbstractInfoBase`1.mClearCacheMethods">
            <summary>
            Dictionary with the methods for clearing the internal object cache [columnName] => [clearCacheAction]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.DataClass">
            <summary>
            Data class with the info object data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.DataClassDataStore">
            <summary>
            Gets the <see cref="T:CMS.DataEngine.IDataClassDataStore"/> to be used when storing the data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.UpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.DeleteFiles">
            <summary>
            Indicates if all physical files should be deleted when object will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.CodeNameChanged">
            <summary>
            Returns whether the object code name changed or not
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.ClassName">
            <summary>
            Returns the class name of this object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetGeneralizedInfo">
            <summary>
            Gets the generalized info for this object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.ClearCacheMethods">
            <summary>
            Dictionary with the methods for clearing the internal object cache [columnName] => [clearCacheAction]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.UseOriginalData">
            <summary>
            If true, original data is used instead of the actual data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.Properties">
            <summary>
            Properties of the object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.ColumnNames">
            <summary>
            Column names.
            </summary>
            <remarks>
            Consists of column names for this class and column names for this particular object.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.RegisteredProperties">
            <summary>
            Registered properties
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.ExternalColumnSettings">
            <summary>
            Collection of external column settings (cached settings indexed by column name which are registered in specific InfoObjects).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.HasData">
            <summary>
            Returns true if the object has it's data storage initialized already
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteData">
            <summary>
            Deletes the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteDataInternal">
            <summary>
            Deletes the object data from the database
            </summary>
            <seealso cref="P:CMS.DataEngine.AbstractInfoBase`1.DataClassDataStore"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteRelatedData">
            <summary>
            Deletes the related data of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteMetafiles">
            <summary>
            Deletes the metafiles related to this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SetData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.UpsertData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.UpsertDataInternal(CMS.DataEngine.WhereCondition)">
            <summary>
            Upserts the data to the database
            </summary>
            <param name="existingWhere">Existing data where condition</param>
            <seealso cref="P:CMS.DataEngine.AbstractInfoBase`1.DataClassDataStore"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.InsertDataInternal">
            <summary>
            Inserts the object data to the database
            </summary>
            <seealso cref="P:CMS.DataEngine.AbstractInfoBase`1.DataClassDataStore"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.EnsureSystemFields">
            <summary>
            Ensures the system fields for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.UpdateDataInternal">
            <summary>
            Updates the object data to the database
            </summary>
            <seealso cref="P:CMS.DataEngine.AbstractInfoBase`1.DataClassDataStore"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.FinalizeSaving">
            <summary>
            Finalizes saving of the object by performing extra actions
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.CopyProperties(`0)">
            <summary>
            Copies memory properties
            </summary>
            <param name="infoObj">Target object instance</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.CloneCore">
            <summary>
            Creates a clone of object's data class and properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.Clone">
            <summary>
            Creates a clone of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.NewInternal(System.String)">
            <summary>
            Creates a new object of the given object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Boolean)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="createData">If true, data structure of the object is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="dr">DataRow with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="sourceData">Source data</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ApplyDataClassFlags">
            <summary>
            Applies necessary flags to the internal data container
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.EnsureData(System.Boolean,System.Boolean)">
            <summary>
            Creates a new data class container within the object
            </summary>
            <param name="loadDefault">If true, the process loads the default data</param>
            <param name="applyTypeCondition">If true, type condition is applied to the object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ExecuteWithoutExternalColumnData(System.Action)">
            <summary>
            Executes the given action without using external column data.
            All object values will be used directly from the object and not loaded from external data.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object using the given settings
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.CloneObject(System.Boolean)">
            <summary>
            Creates the clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ReplaceWith``1">
            <summary>
            Initiates the system to replace the info type with a specified type that must inherit from the original info type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetLocalProperties">
            <summary>
            Gets the list of local properties for particular object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetLocalColumnNames">
            <summary>
            Gets the list of local column names for particular object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.CombineColumnNames(System.Collections.ICollection[])">
            <summary>
            Combines column names from supplied collections into a list and caches it in <see cref="F:CMS.DataEngine.AbstractInfoBase`1.mCombinedColumnNames"/>.
            Does nothing when column names are already cached unless <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/> has <see cref="P:CMS.DataEngine.ObjectTypeInfo.ColumnsInvalidated"/> set to true.
            Returns combined column names.
            </summary>
            <param name="names">An array of collections containing column names.</param>
            <returns>Combined column names.</returns>
            <seealso cref="F:CMS.DataEngine.AbstractInfoBase`1.mCombinedColumnNames"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.CombineColumnNames(System.String[])">
            <summary>
            Combines supplied column names into a list and caches it in <see cref="F:CMS.DataEngine.AbstractInfoBase`1.mCombinedColumnNames"/>.
            Does nothing when column names are already cached unless <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/> has <see cref="P:CMS.DataEngine.ObjectTypeInfo.ColumnsInvalidated"/> set to true.
            Returns combined column names.
            </summary>
            <param name="names">A string array containing column names.</param>
            <returns>Combined column names.</returns>
            <seealso cref="F:CMS.DataEngine.AbstractInfoBase`1.mCombinedColumnNames"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SetValue(System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SetReadOnly">
            <summary>
            Locks the object as a read-only
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetValue``1(System.String,``0)">
            <summary>
            Gets the field value converted to a specified type.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value to use if the value is empty or not convertible to a specified type</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetValue(System.String)">
            <summary>
            Gets the field value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.TouchKeys">
            <summary>
            Touches the cache dependency keys of the object to flush the dependent cache items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged according to the asUnchanged parameter.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.AnyItemChanged(System.String[])">
            <summary>
            Returns true if any of specified columns changed.
            </summary>
            <param name="columnNames">Column names</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ChangedColumns">
            <summary>
            Returns list of column names which values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SetObjectOrderPostprocessing">
            <summary>
            Method which is called after the order of the object was changed. Generates staging tasks and webfarm tasks by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RegisterProperty``1(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RegisterProperty(System.String,System.Object,System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given parametrized property to the object.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="parameter">Parameter for the lambda expression</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RegisterProperty(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetRegisteredProperties">
            <summary>
            Gets list of registered properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetAutomaticProperty(System.String)">
            <summary>
            Tries to get the automatic property value for underlying object
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.TryGetAutomaticProperty(System.String,System.Object@)">
            <summary>
            Tries to get the automatic property value for underlying object
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returning value</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetExternalColumnSettings(System.String)">
            <summary>
            Returns settings for external storage of the column. Returns null by default (which causes the default settings to be used in the external column data storage process).
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RegisterExternalColumn(System.String,CMS.DataEngine.ExternalColumnSettings{`0})">
            <summary>
            Registers external column settings to the hash table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.RegisterExternalColumns">
            <summary>
            Registers external column settings to the hash table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetExternalPath(System.String,CMS.DataEngine.ExternalColumnSettings{`0},System.Boolean)">
            <summary>
            Returns path to the external storage with data of the given column. If the column data is not stored in the external storage (not enabled), and the check for enabled is allowed, returns null.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="settings">Settings of the external storage of the column data (if null, default settings are used)</param>
            <param name="checkEnabled">If true, checks if the external column is enabled</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetFileInfo(System.String)">
            <summary>
            Returns FileInfo object from external storage if exists.
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetPhysicalPath(System.String)">
            <summary>
            Returns physical path or null if can't be retrieved.
            </summary>
            <param name="path">Path to process</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetExternalColumnData(System.String,System.Boolean)">
            <summary>
            Returns the column data from external storage if exists.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="applyGetTransformation">If true, GetTransformation is applied before the result is returned</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SetExternalColumnData(System.String,System.Object,System.Boolean)">
            <summary>
            Saves the column data to the external storage if exists.
            Returns true if data was stored in external storage and should not be stored also in DB.
            If data should be stored in DB, returns false.
            </summary>
            <param name="columnName">Name of the column</param>
            <param name="data">Data to save externally</param>
            <param name="deleteUnusedFiles">If true, the old files are deleted when the path of the columnFile has changed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ExecuteWithOriginalData(System.Action)">
            <summary>
            Executes the given <paramref name="action"/> using original data of the object.
            </summary>
            <param name="action">Action to execute</param>
            <remarks>
            This operation temporarily modifies the object's state and is inherently not thread-safe
            even when <paramref name="action"/> is a read-only operation.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ExecuteWithOriginalDataCore(System.Action)">
            <summary>
            Executes the given <paramref name="action"/> using original data of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.LogExecuteWithOriginalDataConcurrency">
            <summary>
            Logs warning to event log regarding multiple threads executing action with original data on one object's instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetExternalColumns">
            <summary>
            Returns the list of columns registered as the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.UpdateExternalColumns">
            <summary>
            Goes through the columns which are stored externally and updates DB versions with the data from external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteExternalColumns(System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and deletes all the files.
            </summary>
            <param name="updateDB">If true, DB is updated with the data from the file before it's deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.DeleteExternalColumn(System.String)">
            <summary>
            Deletes the external column data
            </summary>
            <param name="col">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetExternalFiles">
            <summary>
            Goes through the columns which are stored externally and returns the list of particular files this object uses.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.SaveExternalColumns(System.Boolean,System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and ensures them in the external storage.
            </summary>
            <param name="deleteUnusedFiles">If true, the old files are deleted when the path of the columnFile has changed</param>
            <param name="onlyIfChanged">Tries to modify the external file only if the column is marked as changed</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ColumnsChanged(System.Collections.Generic.List{System.String})">
            <summary>
            Returns true if at least one column of the column list provided as the first argument was changed.
            </summary>
            <param name="columns">Column list</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.IsModifiedExternally">
            <summary>
            Goes through the columns which are stored externally and checks if the data in DB is the same as in external storage. If all the columns are same returns true, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.ExternalColumnDataEquals(System.Object,System.Object)">
            <summary>
            Returns true if both given values are equal.
            </summary>
            <remarks>
            Values are considered equal also if one of them is null.
            </remarks>
            <param name="externalValue">Value to be compared</param>
            <param name="databaseValue">Value to be compared</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.AllowExternalColumn(System.String)">
            <summary>
            Indicates whether a given column is allowed to be saved externally.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.NormalizeLineEndings(System.String)">
            <summary>
            Returns text with normalized line endings (\r\n).
            </summary>
            <param name="text">Text to process</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.SearchType">
            <summary>
            Gets the search type name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetSearchFields(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Returns search fields collection. When existing collection is passed as argument, fields will be added to that collection.
            When collection is not passed, new collection will be created and return.
            Collection will contain field values only when collection with StoreValues property set to true is passed to the method.
            When method creates new collection, it is created with StoreValues property set to false.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetSearchDocument(CMS.DataEngine.ISearchIndexInfo)">
            <summary>
            Returns index document for current object with dependencies on search index info.
            </summary>
            <param name="index">Search index info object</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GetSearchImageUrl(System.String)">
            <summary>
            Returns URL for a search result item image.
            </summary>
            <param name="image">Image</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper">
            <summary>
            Info object wrapper for generalized access
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.MainObject">
            <summary>
            Main object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.UpdateVersionGUID">
            <summary>
            If true, version GUID of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.DeleteFiles">
            <summary>
            Indicates if all physical files should be deleted when object will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.#ctor(CMS.DataEngine.AbstractInfoBase{`0})">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.DeleteData">
            <summary>
            Deletes the object from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfoBase`1.GeneralizedInfoWrapper.SetData">
            <summary>
            Updates or inserts the object to the database.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractInfo`2">
            <summary>
            Abstract object info class.
            </summary>
            <typeparam name="TInfo">Type of info object inheriting this class.</typeparam>
            <typeparam name="TInfoProviderInterface">Provider interface type for info object management.</typeparam>
        </member>
        <member name="P:CMS.DataEngine.AbstractInfo`2.Provider">
            <summary>
            Gets the provider for <typeparamref name="TInfo"/> management.
            </summary>
            <remarks>
            The provider instance can be retrieved by specifying a constructor dependency on <typeparamref name="TInfoProviderInterface"/>. However, in scenarios where dependency injection
            is not possible (such as legacy code), this property can be used to access the provider instance.
            </remarks>
            <seealso cref="M:CMS.Core.Service.Resolve``1"/>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Boolean)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="createData">If true, data structure of the object is created</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Data.DataRow)">
            <summary>
            Constructor - Initializes the type dependent values.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="dr">DataRow with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(CMS.DataEngine.IDataClass)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IDataClass,System.Boolean)">
            <summary>
            Constructor - Initializes the object with source data.
            </summary>
            <param name="typeInfo">Type information</param>
            <param name="sourceData">Source data</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractInfo`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="T:CMS.DataEngine.BaseInfo">
            <summary>
            Base info class (only carrying the type information).
            </summary>
            <summary>
            Base info class (only carrying the type information).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.SITE">
            <summary>
            Site group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.SOCIALANDCOMMUNITY">
            <summary>
            Tools group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.GLOBAL">
            <summary>
            Global group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.CONFIGURATION">
            <summary>
            Administration group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.DEVELOPMENT">
            <summary>
            Development group
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.CONTENTMANAGEMENT">
            <summary>
            Content management group
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BaseInfo.PermissionObjectType">
            <summary>
            Type of the object for permission check.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.PermissionObjectType.OnlyAdmin">
            <summary>
            Only global administrator can access the object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.PermissionObjectType.CurrentSite">
            <summary>
            Permission should be checked against current site.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.PermissionObjectType.SpecifiedSite">
            <summary>
            Permission should be checked against one of the specified sites (at least one has to be allowed for the user to be able to access the object).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.HasData">
            <summary>
            Returns true if the object has it's data storage initialized already
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsGlobal">
            <summary>
            Returns true if the object is global object. False if the object belongs to specific site only.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.op_Implicit(CMS.DataEngine.GeneralizedInfo)~CMS.DataEngine.BaseInfo">
            <summary>
            Implicit operator for conversion from GeneralizedInfo class to BaseInfo
            </summary>
            <param name="info">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.op_Implicit(CMS.DataEngine.BaseInfo)~CMS.DataEngine.GeneralizedInfo">
            <summary>
            Implicit operator for conversion from BaseInfo class to GeneralizedInfo
            </summary>
            <param name="info">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGeneralizedInfo">
            <summary>
            Gets the generalized info for this object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.BaseInfo.mStatus">
            <summary>
            Status of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CodeNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
            <remarks>If the code name column is not known, name of <see cref="P:CMS.DataEngine.ObjectTypeInfo.GUIDColumn"/> is returned.</remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.DisplayNameColumn">
            <summary>
            Display name column name of the info record.
            </summary>
            <remarks>If the display name column is not known, name of <see cref="P:CMS.DataEngine.BaseInfo.CodeNameColumn"/> is returned.</remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ParentObjectType">
            <summary>
            Parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsObjectValid">
            <summary>
            Returns true if the object is considered valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.InstanceGUID">
            <summary>
            Returns the object instance GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsDisconnected">
            <summary>
            Returns true if this collection is disconnected from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IgnoreExternalColumns">
            <summary>
            If true, externally stored columns are ignored and are stored normally in DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectStatus">
            <summary>
            Returns the current status of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CacheParentData">
            <summary>
            If true, the parent object data is cached within object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectLastModified">
            <summary>
            Last modified time.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectGUID">
            <summary>
            Object GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectVersionGUID">
            <summary>
            Object version GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSiteID">
            <summary>
            Object site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectParentID">
            <summary>
            Object parent ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectGroupID">
            <summary>
            Object community group ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectDisplayName">
            <summary>
            Object display name.
            </summary>
            <remarks>
            <para>The returned value is evaluated from first known column in following column sequence:
            <see cref="P:CMS.DataEngine.BaseInfo.DisplayNameColumn" />,
            <see cref="P:CMS.DataEngine.BaseInfo.CodeNameColumn" />,
            <see cref="P:CMS.DataEngine.ObjectTypeInfo.GUIDColumn" />,
            <see cref="P:CMS.DataEngine.ObjectTypeInfo.IDColumn"/>,
            <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectType" />.
            </para>
            <para>
            When evaluating on <see cref="P:CMS.DataEngine.ObjectTypeInfo.IDColumn"/>,
            returned value consists of both <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectType" /> and <see cref="P:CMS.DataEngine.ObjectTypeInfo.IDColumn"/>.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectCodeName">
            <summary>
            Object code name.
            </summary>
            <remarks>
            The returned value is evaluated from either <see cref="P:CMS.DataEngine.BaseInfo.CodeNameColumn"/> or <see cref="P:CMS.DataEngine.ObjectTypeInfo.GUIDColumn"/> column.
            If none of the columns is known, <see cref="F:System.String.Empty"/> is returned.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectFullName">
            <summary>
            Object full name if exists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectThumbnailGUID">
            <summary>
            Object thumbnail GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIconGUID">
            <summary>
            Object icon GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectParent">
            <summary>
            Object parent.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsParentValid">
            <summary>
            Returns true if the currently hosted parent object is valid
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectCategory">
            <summary>
            Object category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSite">
            <summary>
            Returns the object site.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectOrder">
            <summary>
            Returns the order of the object among the other objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CustomizedColumns">
            <summary>
            Gets the list of customized columns in current object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIsCustom">
            <summary>
            Indicates if object is custom.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIsCustomized">
            <summary>
            Indicates if object is customized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSiteName">
            <summary>
            Object site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.UpdateTimeStamp">
            <summary>
            If true, timestamp of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogSynchronization">
            <summary>
            Indicates how should be handled the logging of synchronization tasks on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogExport">
            <summary>
            If true, export tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported. Default false
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.VersioningEnabled">
            <summary>
            Indicates if the object versioning is enabled by the settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogEvents">
            <summary>
            If true, Events tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogIntegration">
            <summary>
            If true, integration tasks are being logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.LogWebFarmTasks">
            <summary>
            If true, web farm tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.TouchCacheDependencies">
            <summary>
            If true, cache dependencies are touched when the object is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsCheckedOut">
            <summary>
            Indicates if the object is checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsCheckedOutByUserID">
            <summary>
            Gets ID of the user who checked the object out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.IsClone">
            <summary>
            Indicates if the object is clone.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ValidateCodeName">
            <summary>
            If true, the code name is validated upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.CheckUnique">
            <summary>
            If true, the code name is checked for uniqueness upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowRestore">
            <summary>
            Indicates if the object supports deleting to recycle bin.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AllowClone">
            <summary>
            Indicates if the object supports cloning.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ClearCacheMethods">
            <summary>
            Dictionary with the methods for clearing the internal object cache [columnName] => [clearCacheAction]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectSettings">
            <summary>
            Object settings
            </summary>
            <exception cref="T:System.Exception">Thrown when <see cref="P:CMS.DataEngine.BaseInfo.ObjectID"/> is not set.</exception>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.TypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Parent">
            <summary>
            Object parent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Site">
            <summary>
            Object site
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Thumbnail">
            <summary>
            Object thumbnail
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Icon">
            <summary>
            Object icon
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.AssignedSites">
            <summary>
            Collection of the sites to which the object is associated via site bindings (M:N relationships).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Bindings">
            <summary>
            Collection of the binding objects for the given object where the current object is a parent of the binding.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.OtherBindings">
            <summary>
            Collection of the binding objects for the given object where the current object is not a parent of the binding (parent object is on the second side).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ReferringObjects">
            <summary>
            Collection of the objects depending on this object (object which have FK to this object).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Children">
            <summary>
            Collection of the child objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ChildDependencies">
            <summary>
            Collection of the child dependencies for the given object. These are objects which should be included into the parent data (for example class data for BizForms), but aren't direct child of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectThumbnail">
            <summary>
            Object thumbnail metafile.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ObjectIcon">
            <summary>
            Object icon metafile.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.MetaFiles">
            <summary>
            Collection of the metafiles belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Processes">
            <summary>
            Collection of the processes belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ScheduledTasks">
            <summary>
            Collection of the scheduled tasks belonging to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.RelatedData">
            <summary>
            Custom data connected to the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.PrioritizedProperties">
            <summary>
            Gets the list of properties which should be prioritized in the macro controls (IntelliSense, MacroTree).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitTypeInfo(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes the object by the given type info
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SerializationNotSupported">
            <summary>
            Throws serialization not supported exception
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,CMS.DataEngine.ObjectTypeInfo[])">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
            <param name="typeInfos">Type infos that the object may need</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object using the given settings
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.NewObject(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Creates new object of the given class based on the given settings
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ExecuteWithOriginalData(System.Action)">
            <summary>
            Executes the given action using original data of the object
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdateExternalColumns">
            <summary>
            Goes through the columns which are stored externally and updates DB versions with the data from external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.DeleteExternalColumns(System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and deletes all the files.
            </summary>
            <param name="updateDB">If true, DB is updated with the data from the file before it's deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SaveExternalColumns(System.Boolean,System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and ensures them in the external storage.
            </summary>
            <param name="deleteUnusedFiles">If true, the old files are deleted when the path of the columnFile has changed</param>
            <param name="onlyIfChanged">Tries to modify the external file only if the column is marked as changed</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExternalFiles">
            <summary>
            Goes through the columns which are stored externally and returns the list of particular files this object uses.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExternalColumns">
            <summary>
            Returns the list of columns registered as the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsModifiedExternally">
            <summary>
            Goes through the columns which are stored externally and checks if the data in DB is the same as in external storage. If all the columns are same returns true, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPhysicalFiles(CMS.DataEngine.OperationTypeEnum,System.Boolean)">
            <summary>
            Gets DataSet with physical files.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="binaryData">If true, gets the binary data to the DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdatePhysicalFiles(System.Data.DataSet)">
            <summary>
            Saves physical files.
            </summary>
            <param name="dsFiles">DataSet with files data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetVirtualFileRelativePath(System.String,System.String)">
            <summary>
            Returns virtual relative path for specific column
            Ensures the GUID of the object
            </summary>
            <param name="externalColumnName">External column name</param>
            <param name="versionGuid">Version GUID. If not defined physical path is generated</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetClearCacheMethods(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets the dictionary of methods for clearing the cache inside the info object [columnName] => [clearCacheAction]
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ClearCachedValues(System.String)">
            <summary>
            Clears the cached values depending on the given column value.
            </summary>
            <param name="columnName">Column name, if not provided, all cached values are cleared.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Clear">
            <summary>
            Clears hashtable with cached properties of all object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ClearData">
            <summary>
            Clears data from the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureGUID">
            <summary>
            Ensures the GUID of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureLastModified">
            <summary>
            Ensures the last modified time stamp of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes in the object to the database.
            </summary>
            <param name="withCollections">If true, also submits the changes in the underlying collections of the object (Children, ChildDependencies, Bindings, OtherBindings)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Update">
            <summary>
            Updates the database entity using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Delete">
            <summary>
            Deletes the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Destroy">
            <summary>
            Destroys the object including its version history using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Insert">
            <summary>
            Inserts the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckUniqueValues(System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependencyObjectType(CMS.DataEngine.ObjectDependency)">
            <summary>
            Gets dependency object type
            </summary>
            <param name="dep">Object dependency settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureCodeName">
            <summary>
            Ensures the code name of the object if not set
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetAutomaticCodeName">
            <summary>
            Gets the automatic code name for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureUniqueCodeName">
            <summary>
            Ensures that the object has a unique code name within it's context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueCodeName(System.String,System.Int32)">
            <summary>
            Returns the unique code name for the specified object, does not check duplicity if duplicity occurs within the currentObjectId.
            </summary>
            <param name="codeName">Original code name</param>
            <param name="currentObjectId">Current object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueDisplayName(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the unique display name for the specified object.
            </summary>
            <param name="displayName">Original display name</param>
            <param name="currentObjectId">Current object ID</param>
            <param name="ensureLength">If true, maximal display name length is ensured</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueName(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the unique code name for the specified object, does not check duplicity if duplicity occurs within the currentObjectId.
            </summary>
            <param name="name">Original code name</param>
            <param name="currentObjectId">Current object ID</param>
            <param name="columnName">Name of the column in which the uniqueness should be preserved (CodeNameColumn/DisplayNameColumn)</param>
            <param name="suffixFormat">Formatting string for the suffix (for example '_{0}' for code name or ' ({0})' for display name</param>
            <param name="suffixFormatRegex">Regex for formatting suffix (needed to remove suffix before finding the possible match in DB)</param>
            <param name="ensureLength">If true, maximal code name length is ensured</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetNameCollisions(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets the list of the name collisions of the given object
            </summary>
            <param name="currentObjectId">Current object ID</param>
            <param name="columnName">Column name</param>
            <param name="searchName">Search name for collision</param>
            <param name="exactMatch">If true, the names must match exactly</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetUniqueNameWhereCondition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructs base where condition for checking column value uniqueness. This method can be overridden in child classes to add more conditions.
            </summary>
            <param name="columnName">Name of the column in which the uniqueness should be preserved (CodeNameColumn/DisplayNameColumn)</param>
            <param name="searchName">Name which should be saved in the column (eventually with suffix)</param>
            <param name="currentObjectId">ID of the current object (this object will be excluded from the search for duplicate names)</param>
            <param name="exactMatch">If true, the names must match exactly</param>
            <returns>Where condition used to check for name uniqueness</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="currentSiteName">Name of the current context site. Permissions are checked on this site only when the site name cannot be obtained directly from the info object (from SiteIDColumn or site binding).</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckPermissionsWithHandler(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. Outcome of this method is determined by combining results of CheckPermissions event and CheckPermissionsInternal method.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="currentSiteName">Name of the current context site. Permissions are checked on this site only when the site name cannot be obtained directly from the info object (from SiteIDColumn or site binding).</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. This method is called automatically after CheckPermissions event was fired.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="siteName">Permissions on this site will be checked</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckDefaultPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo)">
            <summary>
            Check universal permissions for an object
            </summary>
            <param name="permission">Permission to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPermissionObjectType(System.String,System.Collections.Generic.List{CMS.DataEngine.SiteInfoIdentifier}@,System.String@)">
            <summary>
            Returns the permission object type of the object (checks the SiteID column and SiteBinding columns). According to this value, the permission check is performed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGlobalPermissionName(System.String)">
            <summary>
            Returns name of the global permission name corresponding to the given permission name.
            By default, "Global" + permissionName is returned.
            </summary>
            <param name="permissionName">Name of the original permission</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.PermissionCheckException(CMS.DataEngine.PermissionsEnum,System.String,System.Boolean)">
            <summary>
            Fires an exception in case authorization result is false (denied or insignificant)
            </summary>
            <param name="permission">Checked permission</param>
            <param name="siteName">Site name</param>
            <param name="result">Result of the permission check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPermissionToCheck(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Gets permission to check for the object. By default the <see cref="F:CMS.DataEngine.PermissionsEnum.Create"/> and <see cref="F:CMS.DataEngine.PermissionsEnum.Delete"/> permission
            is changed to <see cref="F:CMS.DataEngine.PermissionsEnum.Modify"/>.
            </summary>
            <param name="permission">Permission to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
             <summary>
             Converts PermissionEnum to permission codename which will be checked when CheckPermission() is called.
            
             Derived classes can override this method to change permission which is checked (for example check for global permissions if object is global).
             </summary>
             <param name="permission">Permission to convert to string</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetValueForTranslation(System.String)">
            <summary>
            Returns value for translation services. Returns unmodified field content by default.
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="columnName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDoubleValue(System.String,System.Double)">
            <summary>
            Gets the double value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDecimalValue(System.String,System.Decimal)">
            <summary>
            Gets the decimal value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIntegerValue(System.String,System.Int32)">
            <summary>
            Gets the integer value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDateTimeValue(System.String,System.DateTime)">
            <summary>
            Gets the DateTime value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGuidValue(System.String,System.Guid)">
            <summary>
            Gets the guid value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetBooleanValue(System.String,System.Boolean)">
            <summary>
            Gets the boolean value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetStringValue(System.String,System.String)">
            <summary>
            Gets the string value from the object.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ChangedColumns">
            <summary>
            Returns list of column names which values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureHierarchyColumns">
            <summary>
            Ensures the IDPath and Level columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdatePathColumn(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates given path column.
            </summary>
            <param name="parentCol">Column which stores parent object ID</param>
            <param name="column">Path column</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
            <param name="updateChildren">Determines whether the parent object changed and therefore it is necessary to update all children</param>
            <param name="updateLevel">If true, also the level of the object is update according to the path</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIDPathPartLength">
            <summary>
            Returns the length of a part of IDPath.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetNamePathPartColumn">
            <summary>
            Returns the name of the column which is used to build the NamePath
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCurrentObjectPathPart(System.String)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.BuildObjectPath(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="parentColumName">Column of the parent ID</param>
            <param name="pathColumnName">Column name to build the path from</param>
            <param name="levelColumnName">Column name of the level</param>
            <param name="level">Level of the object within the tree hierarchy</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSynchronizedColumns(System.Boolean)">
            <summary>
            Gets the list of synchronized columns for this object.
            </summary>
            <param name="excludeColumns">When true values is passed, columns from <see cref="P:CMS.DataEngine.SynchronizationSettings.ExcludedStagingColumns"/> are removed</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsChildOf(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the object is child of the given object. If parameter parent is null, returns true only if the object is not a child of any object.
            </summary>
            <param name="parent">Parent to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultObject">
            <summary>
            Returns default object of given object type. Has to be overridden in specific info. Returns null by default. Example is UserInfo which returns user specified in the settings or Global Administrator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ToMacroString">
            <summary>
            Returns the default text representation in the macros.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ToString">
            <summary>
            Returns the text representation of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.MacroRepresentation">
            <summary>
            By default, BaseInfo has no special macro representation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.UpdateFromDB(System.Boolean)">
            <summary>
            Updates the data of the object from DB (updates also ObjectSettings).
            </summary>
            <param name="binaryData">Indicates whether to load also binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Disconnect">
            <summary>
            Disconnects the collection from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Reconnect">
            <summary>
            Reconnects the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectIdentifier">
            <summary>
            Gets the object identifier that uniquely identifies the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectKey">
            <summary>
            Gets the unique string key for the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetLockObject">
            <summary>
            Gets the global lock object for all the instances of the object (locked on "objectType_objectId").
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetParent(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Updates the parent object, enables to update the data that is overridden in the parent object before or after it is saved
            </summary>
            <param name="parent">Parent object that will be saved</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TouchParent">
            <summary>
            Updates the parent object by saving it (to update the timestamp).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetParent">
            <summary>
            Returns the parent object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetThumbnailInfo">
            <summary>
            Initialize the thumbnail info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIconInfo">
            <summary>
            Initialize the icon info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CloneObject(System.Boolean)">
            <summary>
            Creates the clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CopyMemoryProperties(CMS.DataEngine.BaseInfo)">
            <summary>
            Copies memory properties
            </summary>
            <param name="infoObj">Target object instance</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the object in the object table.
            </summary>
            <param name="keepThisInstanceValid">If true, this object is marked as updated to behave as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsObjectInvalid(System.DateTime)">
            <summary>
            Returns true if the object is invalid.
            </summary>
            <param name="lastValid">Time when the object was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCacheDependencies">
            <summary>
            Gets collection of dependency keys to be touched when modifying the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.StoreSettings">
            <summary>
            Stores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RestoreSettings">
            <summary>
            Restores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsCheckedOutByUser(CMS.Base.IUserInfo)">
            <summary>
            Returns true if the object is checked out by the specified user.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
            <remarks>
            When overriding this method you should take into consideration <see cref="P:CMS.Base.CMSActionContext.CurrentCheckLicense"/> flag.
            In case of failing license check you should throw <see cref="T:CMS.DataEngine.LicenseException"/> instead of returning false.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.IsAvailableOnSite(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks whether info object as available on given site. Available means that object is global or assigned to given site.
            </summary>
            <param name="site">Site identifier: site name or ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureBinaryData">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object when StoreToFileSystem is true.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetBinaryData">
            <summary>
            Returns the BinaryData object of the current instance. Has to be overridden by specific classes. Returns null by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureBinaryData(System.Boolean)">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObject(CMS.DataEngine.IWhereCondition,System.Boolean)">
            <summary>
            Gets the object by specified where condition.
            </summary>
            <param name="includeTypeCondition">If true, the type condition is included, otherwise selects all data from the data source</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObject(System.Int32)">
            <summary>
            Gets the object by its ID.
            </summary>
            <param name="objectId">Object ID</param>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:CMS.DataEngine.ObjectTypeInfo.IDColumn"/> is not set.</exception>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCount(System.String,System.Int32)">
            <summary>
            Gets count of the objects filtered by given where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="topN">Top N records</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetModifiedFrom(System.DateTime,System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Gets the DataSet of all the objects modified from specified date.
            </summary>
            <param name="from">From time</param>
            <param name="parameters">Parameters for the data retrieval</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetData(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDataQuery(System.Boolean,System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)">
            <summary>
            Gets the data query for this object type
            </summary>
            <param name="includeTypeCondition">If true, the type condition is included, otherwise selects all data from the data source</param>
            <param name="parameters">Parameters for the data retrieval</param>
            <param name="checkLicense">If true, the license is checked for this query</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSiblingsQueryInternal(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Gets the parameterized query to get siblings of the object (If there is no parent-child hierarchy, query is parameterized for all objects)
            </summary>
            <param name="parameters">Parameters for the data retrieval</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDataQueryForExisting(CMS.DataEngine.IWhereCondition,System.Boolean,System.Boolean)">
            <summary>
            Returns query that selects objects matching with <paramref name="whereCondition"/> based on <paramref name="isGuidColumnKnown"/>..
            </summary>
            <remarks>
            Meant for use in <see cref="M:CMS.DataEngine.BaseInfo.GetExistingBase(CMS.DataEngine.IWhereCondition,System.Boolean)"/> only.
            <para>
            If <paramref name="isGuidColumnKnown"/> is <c>true</c>, all objects selected by the <paramref name="whereCondition"/> will be returned,
            otherwise only the very first object matching the <paramref name="whereCondition"/> will be returned by the resulting <see cref="T:CMS.DataEngine.IDataQuery"/>.
            </para>
            </remarks>
            <seealso cref="M:CMS.DataEngine.BaseInfo.GetDataQuery(System.Boolean,System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)"/>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDataRowWithSameGuidOrFirst(CMS.DataEngine.IDataQuery,System.Boolean,System.String)">
            <summary>
            Returns first data row from the <paramref name="query"/>'s result that has
            same value in column with <paramref name="guidColumnName"/> as this <see cref="T:CMS.DataEngine.BaseInfo"/>
            (provided the <paramref name="isGuidColumnKnown"/> is <c>true</c>).
            Otherwise, first row is return.
            </summary>
            <remarks>
            Meant for use in <see cref="M:CMS.DataEngine.BaseInfo.GetExistingBase(CMS.DataEngine.IWhereCondition,System.Boolean)"/> only.
            <para>
            Provided <paramref name="query"/> is supposed to contain <see cref="T:CMS.DataEngine.BaseInfo"/>s of same <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/>
            representing same object (matched via <see cref="P:CMS.DataEngine.ObjectTypeInfo.GUIDColumn"/> and/or <see cref="P:CMS.DataEngine.ObjectTypeInfo.CodeNameColumn"/>).
            </para>
            <para>If there are no rows in the first table of the <paramref name="query"/>'s result, <c>null</c> is returned.</para>
            </remarks>
            <seealso cref="M:CMS.DataEngine.BaseInfo.GetDataQueryForExisting(CMS.DataEngine.IWhereCondition,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExistingBase(CMS.DataEngine.IWhereCondition,System.Boolean)">
            <summary>
            Returns single info object and ensures correct GUID vs. code name priority is used (if applicable) after resolving provided <paramref name="whereCondition"/>.
            <para>If no object match provided <paramref name="whereCondition"/>, null is returned.</para>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExistingWhereCondition(System.Boolean)">
            <summary>
            Gets a where condition to find an existing object based on current object
            </summary>
            <param name="applyTypeCondition">If true, type condition is applied to the resulting where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetExistingWhereCondition">
            <summary>
            Gets a where condition to find an existing object based on current object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIdentifyingParentWhereCondition">
            <summary>
            Gets the where condition for the parent object when parent object required to distinguish two objects of current type.
            </summary>
            <remarks>
            Returns <see langword="null"/> if the object represents <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsMainObject"/> and therefore can be uniquely identified without parent.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetChildWhereCondition(CMS.DataEngine.WhereCondition,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSiteWhereCondition">
            <summary>
            Gets the site where condition for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetGroupWhereCondition">
            <summary>
            Gets the group where condition for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultDataWhereCondition(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the where condition to filter out the default installation data
            </summary>
            <param name="recursive">Indicates whether where condition should contain further dependency conditions.</param>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddDependencyDefaultDataWhereCondition(System.String,CMS.DataEngine.BaseInfo,System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds default data where condition of given dependency on given <paramref name="dependencyIDColumn"/> to given <paramref name="where" /> condition.
            Returns original <paramref name="where"/> condition if no such dependency exists.
            </summary>
            <param name="where">Original where condition</param>
            <param name="dependencyInfo"><see cref="T:CMS.DataEngine.BaseInfo"/> of dependency object type.</param>
            <param name="dependencyIDColumn">Column with ID to specified dependency object.</param>
            <param name="recursive">Indicates whether added dependency where condition should process its dependencies</param>
            <param name="op">Operator used to connect old where with the new one. By default this is 'AND'.</param>
            <param name="dependencyTargetIDColumn">Name of the column on dependency target object that contains dependency ID. By default ID column of the target object is used.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddColumnPrefixesWhereCondition(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds restriction to given <paramref name="where" /> filtering out all rows where given column starts with one of excluded prefixes found in TypeInfo default data settings.
            </summary>
            <param name="where">Original where condition</param>
            <param name="columnName">Column that must not start with excluded prefixes.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultDataExportColumns">
            <summary>
            Returns names of all columns that should be exported with default data as a comma separated string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ExportDefaultData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports the default object installation data
            </summary>
            <param name="filePath">File path for the export</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDefaultData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the default object installation data
            </summary>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RecomputeChildCountColumns(CMS.DataEngine.DefaultDataSettings,System.Data.DataSet,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Re-computes count of child objects.
            </summary>
            <param name="settings">Default data settings.</param>
            <param name="defaultData">Default data whose child count is recomputed.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out in child objects (if they need to be fetched).</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.WriteDefaultData(System.String,System.Data.DataSet)">
            <summary>
            Writes the default object installation data into xml file
            </summary>
            <param name="filePath">File path for the export</param>
            <param name="data">Default data to write</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the object value to the nullable column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
            <param name="condition">Condition for the valid value, if false, NULL is saved</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetValue(System.String,System.Object,System.Object)">
            <summary>
            Sets the object value to the nullable column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
            <param name="nullValue">Null value, if matched, NULL is saved</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetReadOnly">
            <summary>
            Locks the object as a read-only
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetValue(System.String)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetCustomProperties">
            <summary>
            Gets list of custom properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetRegisteredProperties">
            <summary>
            Gets list of registered properties.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TryGetProperty(System.String,System.Object@,System.Boolean)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <param name="notNull">If true, the property attempts to return non-null values, at least it returns the empty object of the correct type</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectTypeForColumn(System.String)">
            <summary>
            Gets the object type for the given column or null if the object type is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present or at least property exists)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetProperty(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged according to the asUnchanged parameter.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.Name">
            <summary>
            Returns the code name of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.ClearCache">
            <summary>
            Clears the nested cached objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectChildren">
            <summary>
            Gets the object children repository
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetChildDependencies">
            <summary>
            Gets the child dependencies repository
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetReferringObjects">
            <summary>
            Gets the repository of depending objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetBindings">
            <summary>
            Gets the bindings repository for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOtherBindings">
            <summary>
            Gets the repository of other bindings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddCollections(CMS.DataEngine.InfoObjectRepository,System.Collections.Generic.IEnumerable{System.String},System.Func{CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectTypeInfo,System.String},System.Action{CMS.DataEngine.InfoCollectionSettings,CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Adds the list of collections into the given repository
            </summary>
            <param name="repository">Repository</param>
            <param name="objectTypes">Object types to add</param>
            <param name="getParentColumn">Function to get the parent column for a specific collection</param>
            <param name="collectionSetup">Optional extra collection setup</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetThumbnailUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object thumbnail URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetIconUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object icon URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetMetaFileUrl(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object meta file URL
            </summary>
            <param name="columnName">Meta file column name</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsClone(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            This method is called on cloned object prepared in memory by InsertAsClone method.
            Override if you need to do further actions before inserting actual object to DB (insert special objects, modify foreign keys, copy files, etc.).
            Calls Insert() by default.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InsertAsClonePostprocessing(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            This method is called once the object is completely cloned (with all children, bindings, etc.).
            Override if you need to do further actions after the object has been cloned.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitObjectsOrder(System.String,System.String,System.Boolean)">
            <summary>
            Inits the proper order of the sibling objects so the order column is consistent.
            </summary>
            <param name="orderColumn">Name of the column that is used for storing the object's order. If null, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn"/> is taken from <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/>.</param>
            <param name="nameColumn">>Name of the column by which the order is to be set. <see cref="P:CMS.DataEngine.ObjectTypeInfo.DisplayNameColumn"/> is used if not given.</param>
            <param name="ascending">Indicates whether the order is ascending or descending (ascending order is used by default).</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CopyExternalColumns(CMS.DataEngine.BaseInfo)">
            <summary>
            Copy value of external columns directly via set value
            </summary>
            <param name="target">Target info class</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitObjectsOrderPostprocessing">
            <summary>
            Method called after the InitObjectOrder method is called. Override this to do further actions after order initialization.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetLastObjectOrder(System.String)">
            <summary>
            Returns number which will be the last order within all the other items (according to Parent, Group and Site settings).
            I.e. returns largest existing order + 1.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SortAlphabetically(System.Boolean,System.String,System.String)">
            <summary>
            Sort objects alphabetically.
            </summary>
            <param name="ascending">Indicates whether the order will be ascending or descending.</param>
            <param name="orderColumn">Name of the column that is used for storing the object's order. If null, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn"/> is taken from <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/>.</param>
            <param name="nameColumn">>Name of the column by which the alphabetical order will be set.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObjectAlphabeticalOrder(System.String,System.String)">
            <summary>
            Moves the object to the right position according to the custom order.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObjectOrder(System.Int32,System.Boolean,System.String)">
            <summary>
            Moves the object to the specified order. The move is done within the object's siblings.
            </summary>
            <param name="targetOrder">Desired order of the object.</param>
            <param name="relativeOrder">If true, the <paramref name="targetOrder"/> is taken as a relative order from current order position.</param>
            <param name="orderColumn">Name of the order column. If null, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn"/> from <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/> is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectOrderID">
            <summary>
            Returns ID of the item being ordered. By default return ObjectID. This is overridden in TreeNode, where NodeID has to be supplied.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.SetObjectOrderPostprocessing">
            <summary>
            Method which is called after the order of the object was changed. Generates staging tasks and webfarm tasks by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOrderIdentityWhereCondition">
            <summary>
            Gets order identity where condition to identify the object to be ordered
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetOrderQueryParameters(System.String,System.String,System.Boolean)">
            <summary>
            Creates QueryDataParameters with special macros for object order management.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Name of the column by which the order should be initialized (if not set, displayname column is used)</param>
            <param name="asc">If true the order will be ascending (default is true)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.InitObjectsOrderInternal(System.String,System.String,CMS.DataEngine.WhereCondition,System.Boolean,CMS.DataEngine.DataClassInfo)">
            <summary>
            Inits the proper order of the sibling objects so the order column is consistent.
            </summary>
            <param name="orderColumn">Name of the column that is used for storing the object's order. If null, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn"/> is taken from <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/>.</param>
            <param name="nameColumn">>Name of the column by which the order is to be set. <see cref="P:CMS.DataEngine.ObjectTypeInfo.DisplayNameColumn"/> is used if not set.</param>
            <param name="where">Where condition that defines all the objects that can be reordered.</param>
            <param name="ascending">Indicates whether the order is ascending or descending (ascending order is used by default).</param>
            <param name="classInfo">Optional data class configuration.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.CheckDependencies(System.Boolean)">
            <summary>
            Checks object for dependent objects. Returns true if there is at least one dependent object.
            First tries to execute checkdependencies query, if not found, an automatic process is executed.
            </summary>
            <remarks>
            Automated process is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependenciesNames(System.Boolean,System.Int32)">
            <summary>
            Returns a list of object names which depend on this object.
            First tries to execute checkdependencies query, if not found, an automatic process is executed.
            </summary>
            <remarks>
            Automated process is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
            <param name="topN">Number of dependent objects to return, 0 means no limitation.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependenciesNamesAuto(System.Boolean,System.Int32)">
            <summary>
            Returns a list of object names which depend on this object.
            </summary>
            <remarks>
            List of objects is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
            <param name="topN">Number of dependent objects to return, 0 means no limitation.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetDependencies(System.Boolean,System.Int32)">
            <summary>
            Returns list of objects which have (direct) dependency on this object.
            </summary>
            <remarks>
            List of objects is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
            <param name="topN">Number of dependent objects to return, 0 means no limitation.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.AddItemsToDependecyList(System.Data.DataSet,System.String,System.Collections.Generic.List{CMS.DataEngine.DependencyInfo},System.Int32)">
            <summary>
            Adds items to the list, reflects topN setting.
            </summary>
            <param name="ds">DataSet with data to add</param>
            <param name="objType">Object type of the data</param>
            <param name="result">List to add the items to</param>
            <param name="topN">Maximal allowed number of items in the list</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetObjectName">
            <summary>
            Returns object name combining object type name and object display name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetFullObjectName(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the name of the object within its parent hierarchy.
            </summary>
            <param name="includeParent">If true, the parent object name is included to the object name</param>
            <param name="includeSite">If true, the site information is included if available</param>
            <param name="includeGroup">If true, the group information is included if available</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetFullObjectName(System.String,System.Int32,System.String)">
            <summary>
            Returns formatted name of the given object using specified resource string.
            </summary>
            <param name="objectType">Type of the object</param>
            <param name="objectId">ID of the object</param>
            <param name="resString">Formatting resource string</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies. First tries to execute removedependencies query, if not found, automatic process is executed.
            </summary>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearCache">If true, caches of all object types which were potentially modified are cleared (provider hashtables and object type cache dummy keys)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GetSearchID">
            <summary>
            Gets the id column value which is used as search id by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.EnsureObjectSettings">
            <summary>
            Ensures the object settings
            </summary>
            <exception cref="T:System.Exception">Thrown when <see cref="P:CMS.DataEngine.BaseInfo.ObjectID"/> is not set.</exception>
        </member>
        <member name="T:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper">
            <summary>
            Info object wrapper for generalized access
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CacheParentData">
            <summary>
            If true, the parent object data is cached within object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsDisconnected">
            <summary>
            Returns true if the object is disconnected from the data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TypeInfo">
            <summary>
            Type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MainObject">
            <summary>
            Main object for this general access object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IgnoreExternalColumns">
            <summary>
            If true, externally stored columns are ignored and are stored normally in DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CodeNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DisplayNameColumn">
            <summary>
            Code name column name of the info record.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectID">
            <summary>
            Object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectLastModified">
            <summary>
            Object last modified time.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectGUID">
            <summary>
            Object GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectVersionGUID">
            <summary>
            Object version GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectSiteID">
            <summary>
            Object site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectParentID">
            <summary>
            Object parent ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectGroupID">
            <summary>
            Object group ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectCodeName">
            <summary>
            Object code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.OriginalObjectCodeName">
            <summary>
            Returns the original object code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectFullName">
            <summary>
            Object full name if exists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectDisplayName">
            <summary>
            Object name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectSiteName">
            <summary>
            Object site name.
            </summary>
            <remarks>The property returns site name of the current object. If it is not site object, then it returns site name of his parent (or further ancestors)</remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectThumbnailGUID">
            <summary>
            Object thumbnail GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIconGUID">
            <summary>
            Object icon GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectOrder">
            <summary>
            Returns the order of the object among the other objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ParentObjectType">
            <summary>
            Parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Children">
            <summary>
            The collection of the child objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ChildDependencies">
            <summary>
            Collection of the child dependencies for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Bindings">
            <summary>
            The collection of the binding objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.OtherBindings">
            <summary>
            The collection of the other binding objects for the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MetaFiles">
            <summary>
            The collection of the metafiles of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Processes">
            <summary>
            The collection of the processes of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ScheduledTasks">
            <summary>
            The collection of the scheduled tasks of the given object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ReferringObjects">
            <summary>
            Collection of the objects depending on this object (object which have FK to this object).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateTimeStamp">
            <summary>
            If true, time stamp is updated on object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogExport">
            <summary>
            If true, export tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.VersioningEnabled">
            <summary>
            Indicates if the object versioning is enabled by the settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogEvents">
            <summary>
            If true, events are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogIntegration">
            <summary>
            If true, integration tasks are being logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.LogWebFarmTasks">
            <summary>
            If true, web farm tasks are logged on the object update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TouchCacheDependencies">
            <summary>
            If true, cache dependencies are touched when the object is changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCheckedOut">
            <summary>
            Indicates if the object is checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCheckedOutByUserID">
            <summary>
            Gets ID of the user who checked the object out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsClone">
            <summary>
            Indicates if the object is clone.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ValidateCodeName">
            <summary>
            If true, the code name is validated upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckUnique">
            <summary>
            If true, the code name is checked for uniqueness upon saving.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AllowRestore">
            <summary>
            Indicates if the object supports deleting to recycle bin.
            </summary>
            <remarks>
            Use CMS.Synchronization.ObjectVersionManager.AllowObjectRestore(GeneralizedInfo infoObj) in cases where current system configuration needs to be taken into consideration.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AllowClone">
            <summary>
            Indicates if the object supports cloning.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsObjectValid">
            <summary>
            Returns true if the object is considered valid.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectCategory">
            <summary>
            Object category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectParent">
            <summary>
            Object parent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectThumbnail">
            <summary>
            Object thumbnail
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIcon">
            <summary>
            Object icon
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.HasData">
            <summary>
            Returns true if the object has it's data storage initialized already
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.HasChanged">
            <summary>
            Returns true if the object has changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.PrioritizedProperties">
            <summary>
            Gets the list of properties which should be prioritized in the macro controls (IntelliSense, MacroTree).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CustomizedColumns">
            <summary>
            Gets the list of customized columns in current object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIsCustom">
            <summary>
            Indicates if object is custom (created by customer).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ObjectIsCustomized">
            <summary>
            Indicates if object is customized.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object to wrap</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsAvailableOnSite(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks whether info object as available on given site. Available means that object is global or assigned to given site.
            </summary>
            <param name="site">Site identifier: site name or ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetFullObjectName(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the name of the object within its parent hierarchy.
            </summary>
            <param name="includeParent">If true, the parent object name is included to the object name</param>
            <param name="includeSite">If true, the site information is included if available</param>
            <param name="includeGroup">If true, the group information is included if available</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetVirtualFileRelativePath(System.String,System.String)">
            <summary>
            Returns virtual relative path for specific column
            </summary>
            <param name="externalColumnName">External column name</param>
            <param name="versionGuid">Version GUID. If not defined physical path is generated</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObject(CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets the object by specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObject(System.String)">
            <summary>
            Gets the object by specified where condition.
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObject(System.Int32)">
            <summary>
            Gets the object by its ID.
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetChildWhereCondition(CMS.DataEngine.WhereCondition,System.String)">
            <summary>
            Gets the child object where condition.
            </summary>
            <param name="where">Original where condition</param>
            <param name="objectType">Object type of the child object</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDataQuery(System.Boolean,System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)">
            <summary>
            Gets the data query for this object type
            </summary>
            <param name="includeTypeCondition">If true, the type condition is included, otherwise selects all data from the data source</param>
            <param name="parameters">Parameters for the data retrieval</param>
            <param name="checkLicense">If true, the license is checked for this query</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetModifiedFrom(System.DateTime,System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Gets the DataSet of all the objects modified from specified date.
            </summary>
            <param name="from">From time</param>
            <param name="parameters">Parameters for the data retrieval</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetData(CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns the data according to the set of input parameters.
            </summary>
            <param name="parameters">Query parameters</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="columns">Data columns to return</param>
            <param name="binaryData">If true, binary data are returned in the result</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetCount(System.String,System.Int32)">
            <summary>
            Gets count of the objects filtered by given where condition.
            </summary>
            <param name="where">Where condition</param>
            <param name="topN">Top N records</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateFromDB(System.Boolean)">
            <summary>
            Updates the data of the object from DB (updates also ObjectSettings).
            </summary>
            <param name="binaryData">Indicates whether to load also binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes in the object to the database.
            </summary>
            <param name="withCollections">If true, also submits the changes in the underlying collections of the object (Children, ChildDependencies, Bindings, OtherBindings)</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetParent">
            <summary>
            Returns the parent object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TouchParent">
            <summary>
            Updates the parent object by saving it (to update the timestamp).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetCacheDependencies">
            <summary>
            Gets collection of dependency keys to be touched when modifying the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetPhysicalFiles(CMS.DataEngine.OperationTypeEnum,System.Boolean)">
            <summary>
            Gets DataSet with physical files for current object.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="binaryData">Get the binary data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdatePhysicalFiles(System.Data.DataSet)">
            <summary>
            Updates physical files in given DataSet for current object.
            </summary>
            <param name="dsFiles">DataSet with files data</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.StoreSettings">
            <summary>
            Stores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RestoreSettings">
            <summary>
            Restores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetObjectKey">
            <summary>
            Gets the unique string key for the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetLockObject">
            <summary>
            Gets the global lock object for all the instances of the object (locked on "objectType_objectId").
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.AnyItemChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if any of the specified column names has changed.
            </summary>
            <param name="columnNames">Column names</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DataChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Disconnect">
            <summary>
            Disconnects the object from database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Reconnect">
            <summary>
            Reconnects the object to database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureCodeName">
            <summary>
            Ensures the code name of the object if not set
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureGUID">
            <summary>
            Ensures the GUID of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetBinaryData">
            <summary>
            Returns the BinaryData object of the current instance. Has to be overridden by specific classes. Returns null by default.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureBinaryData">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object when StoreToFileSystem is true.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureBinaryData(System.Boolean)">
            <summary>
            Makes sure that the binary data is loaded into binary column of the object.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckUniqueValues(System.String[])">
            <summary>
            Checks if a record with the same column values already exists in the database. Returns true if the set of values is unique.
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="currentSiteName">Name of the current context site. Permissions are checked on this site only when the site name cannot be obtained directly from the info object (from SiteIDColumn or site binding).</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Invalidate(System.Boolean)">
            <summary>
            Invalidates the object in the object table.
            </summary>
            <param name="keepThisInstanceValid">If true, this object is marked as updated to behave as valid</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Clone">
            <summary>
            Returns the clone
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InsertAsClone(CMS.DataEngine.CloneSettings)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InsertAsClone(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MoveObjectUp(System.String)">
            <summary>
            Moves the object up within the object order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.MoveObjectDown(System.String)">
            <summary>
            Moves the object down within the object order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetObjectAlphabeticalOrder(System.String,System.String)">
            <summary>
            Moves the object to the right position according to the custom order.
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetObjectOrder(System.Int32,System.Boolean,System.String)">
            <summary>
            Moves the object to the specified order (if OrderColumn is specified). The move is done within the object's parent and site (if defined).
            </summary>
            <param name="targetOrder">Desired order of the object</param>
            <param name="relativeOrder">If true, the targetOrder parameter is taken as a relative order from current order position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetLastObjectOrder(System.String)">
            <summary>
            Returns number which will be the last order within all the other items (according to Parent, Group and Site settings).
            </summary>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InitObjectsOrder(System.String)">
            <summary>
            Initializes the proper order of the sibling objects so the order column is consistent.
            </summary>
            <param name="orderColumn">Name of the column that is used for storing the object's order. If null, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn"/> is taken from <see cref="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TypeInfo"/>.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SortAlphabetically(System.Boolean,System.String,System.String)">
            <summary>
            Moves the object to the right position according to the custom order.
            </summary>
            <param name="asc">Indicates whether the order is ascending or descending (ascending by default).</param>
            <param name="orderColumn">Name of the column that is used for storing the object's order. If null, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn"/> is taken from <see cref="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TypeInfo"/>.</param>
            <param name="nameColumn">>Name of the column by which the alphabetical order is to be set.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.CheckDependencies(System.Boolean)">
            <summary>
            Checks object for dependent objects. Returns true if there is at least one dependent object.
            First tries to execute checkdependencies query, if not found, an automatic process is executed.
            </summary>
            <remarks>
            Automated process is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependenciesNames(System.Boolean,System.Int32)">
            <summary>
            Returns a list of object names which depend on this object.
            First tries to execute checkdependencies query, if not found, an automatic process is executed.
            </summary>
            <remarks>
            Automated process is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
            <param name="topN">Number of dependent objects to return, 0 means no limitation.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependencies(System.Boolean,System.Int32)">
            <summary>
            Returns list of objects which have (direct) dependency on this object.
            </summary>
            <remarks>
            List of objects is based on <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            Child, site and group objects are not included. Objects whose <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> value contains a prefix matching the current object's path value are also not included.
            </remarks>
            <param name="reportAll">If false, only required dependency constraints (without default value) are returned, otherwise checks all dependency relations.</param>
            <param name="topN">Number of dependent objects to return, 0 means no limitation.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.EnsureUniqueCodeName">
            <summary>
            Ensures that the object has a unique code name within it's context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetUniqueCodeName">
            <summary>
            Returns the unique code name generated from current object code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetUniqueDisplayName(System.Boolean)">
            <summary>
            Returns the unique display name generated from current object display name.
            </summary>
            <param name="ensureLength">If true, maximal display name length is ensured</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetUniqueName(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the unique code name for the specified object, does not check duplicity if duplicity occurs within the currentObjectId.
            </summary>
            <param name="name">Original code name</param>
            <param name="currentObjectId">Current object ID</param>
            <param name="columnName">Name of the column in which the uniqueness should be preserved (CodeNameColumn/DisplayNameColumn)</param>
            <param name="suffixFormat">Formatting string for the suffix (for example '_{0}' for code name or ' ({0})' for display name</param>
            <param name="suffixFormatRegex">Regex for formatting suffix (needed to remove suffix before finding the possible match in DB)</param>
            <param name="ensureLength">If true, maximal code name length is ensured</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetValueForTranslation(System.String)">
            <summary>
            Returns value for translation services. Returns unmodified field content by default.
            </summary>
            <param name="columnName">Name of the column</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetThumbnailUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object thumbnail URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetIconUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the object icon URL
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="maxSideSize">Maximum side size, width or height</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetColumnType(System.String)">
            <summary>
            Gets the column type.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.NotSupported">
            <summary>
            Throws the not supported exception
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDependencyObjectType(CMS.DataEngine.ObjectDependency)">
            <summary>
            Gets dependency object type
            </summary>
            <param name="dep">Object dependency settings</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ExportDefaultData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports the default object installation data
            </summary>
            <param name="filePath">File path for the export</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDefaultDataWhereCondition(System.Boolean)">
            <summary>
            Gets where condition for default data according to TypeInfo configuration.
            </summary>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateExternalColumns">
            <summary>
            Goes through the columns which are stored externally and updates DB versions with the data from external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DeleteExternalColumns(System.Boolean)">
            <summary>
            Goes through the columns which are stored externally and deletes all the files.
            </summary>
            <param name="updateDB">If true, DB is updated with the data from the file before it's deleted.</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SaveExternalColumns">
            <summary>
            Goes through the columns which are stored externally and ensures them in the external storage.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetExternalFiles">
            <summary>
            Goes through the columns which are stored externally and returns the list of particular files this object uses.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetExternalColumns">
            <summary>
            Returns the list of columns registered as the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsModifiedExternally">
            <summary>
            Goes through the columns which are stored externally and checks if the data in DB is the same as in external storage. If all the columns are same returns true, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsCheckedOutByUser(CMS.Base.IUserInfo)">
            <summary>
            Returns true if the object is checked out by the specified user.
            </summary>
            <param name="user">User</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetDefaultObject">
            <summary>
            Returns default object of given object type. Returns null by default. Example is UserInfo which returns user specified in the settings or Global Administrator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.IsChildOf(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true if the object is child of the given object. If parameter parent is null, returns true only if the object is not a child of any object.
            </summary>
            <param name="parent">Parent to check</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdatePathColumn(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates given path column.
            </summary>
            <param name="parentCol">Column which stores parent object ID</param>
            <param name="column">Path column</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
            <param name="updateChildren">Determines whether the parent object changed and therefore it is necessary to update all children</param>
            <param name="updateLevel">If true, also the level of the object is update according to the path</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.UpdateData">
            <summary>
            Updates the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.InsertData">
            <summary>
            Inserts the object to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.DeleteData">
            <summary>
            Deletes the object from the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetSynchronizedColumns">
            <summary>
            Gets the list of synchronized columns for this object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.NewObject(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.GetProperty(System.String)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.TryGetProperty(System.String,System.Object@,System.Boolean)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <param name="notNull">If true, the property attempts to return non-null values, at least it returns the empty object of the correct type</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="P:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.RelatedData">
            <summary>
            Custom data connected to the object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IInfo">
            <summary>
            Interface for the info objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.ObjectSettings">
            <summary>
            Object settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.TypeInfo">
            <summary>
            Object type info
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.Generalized">
            <summary>
            Generalized interface of this object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfo.AllowPartialUpdate">
            <summary>
            If true, the object allows partial updates.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.SubmitChanges(System.Boolean)">
            <summary>
            Submits the changes in the object to the database.
            </summary>
            <param name="withCollections">If true, also submits the changes in the underlying collections of the object (Children, ChildDependencies, Bindings, OtherBindings)</param>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Update">
            <summary>
            Updates the database entity using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Delete">
            <summary>
            Deletes the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Destroy">
            <summary>
            Destroys the object including its version history using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.Insert">
            <summary>
            Inserts the object using appropriate provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfo.ExecuteWithOriginalData(System.Action)">
            <summary>
            Executes the given action using original data of the object
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:CMS.DataEngine.IInfo.CloneObject(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="T:CMS.DataEngine.InfoCloneActionContext">
            <summary>
            Action context used for performance optimization within clone process with enabled synchronization
            </summary>
            <remarks>
            <para>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </para>
            <para>
            LogObjectChange items are not logged directly to the synchronization queue but temporary queue is used instead.
            Temporary queue items are copied to the original queue within dispose.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="M:CMS.DataEngine.InfoCloneActionContext.TryEnqueue(System.String,System.Action,System.Action{System.Action})">
            <summary>
            Tries to enqueue <paramref name="logObjectChange"/> into temporary queue when cloning optimization is used.
            </summary>
            <param name="key">Key that ensures unique <paramref name="logObjectChange"/> actions in queue.</param>
            <param name="logObjectChange">LogObjectChange action</param>
            <param name="originalEnqueAction">Original enqueue action (SynchronizationQueueWorker.Current.Enqueue)</param>
            <returns><c>true</c> when temporary queue is set; otherwise <c>false</c></returns>
        </member>
        <member name="P:CMS.DataEngine.InfoCloneActionContext.CurrentSynchronizationTempQueueAction">
            <summary>
            Action used instead of original enqueue action
            </summary>
            <remarks>
            Action parameters: Key, LogObjectChange action, Original enqueue action (SynchronizationQueueWorker.Current.Enqueue)
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.InfoCloneActionContext.CurrentSynchronizationTempQueue">
            <summary>
            Temporary synchronization queue.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneActionContext.UseSynchronizationTempQueue">
            <summary>
            Ensures <see cref="P:CMS.DataEngine.InfoCloneActionContext.CurrentSynchronizationTempQueueAction"/> value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneActionContext.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoCloneHelper">
            <summary>
            Methods for cloning of info objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.InsertAsClone(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult)">
            <summary>
            Inserts the object as a new object to the DB with inner data and structure (according to given settings) cloned from the original.
            </summary>
            <param name="obj">Object to clone</param>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <returns>Returns the newly created clone</returns>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.TranslateDependencies(CMS.DataEngine.CloneSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Tries to translate dependencies (only those dependencies which has a record in settings.Translations table - those are the objects cloned during the whole cloning process)
            This is needed when some dependency is cloned before this object is cloned
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.SetCloneDisplayName(CMS.DataEngine.CloneSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Generates unique display name for a cloned object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.SetCloneCodeName(CMS.DataEngine.CloneSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Generates unique code name for a cloned object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.LocalizeStringsInClone(CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Localizes resource strings in the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.CloneChildren(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones object children
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.TranslateSiteSpecificDependencies(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Tries to translate site object dependencies (only when cloning to other site)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.ClearCloneFields(CMS.DataEngine.BaseInfo)">
            <summary>
            Clears the fields that should be populated with a new value in the cloned object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.AssignCloneToSite(CMS.DataEngine.CloneSettings,CMS.DataEngine.BaseInfo)">
            <summary>
            Creates site binding for the cloned object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.CloneMetafiles(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones the object metafiles
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.CloneOtherBindings(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones object other bindings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.CloneBindings(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones object bindings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneHelper.AllowCloneToOtherSite(CMS.DataEngine.BaseInfo,CMS.DataEngine.CloneSettings,System.String,System.Boolean)">
            <summary>
            Determines if given collection of binding can be cloned (returns false for bindings of site objects when cloning to other site is requested).
            </summary>
            <param name="obj">Cloned object</param>
            <param name="settings">Clone settings</param>
            <param name="bindingObjectType">Object type of the binding object type</param>
            <param name="isOtherBinding">Determines whether it's other binding or binding</param>
        </member>
        <member name="T:CMS.DataEngine.InfoCloneSynchronizationTempQueue">
            <summary>
            Temporary queue with unique items (defined by key) for optimized synchronization logging within cloning process.
            </summary>
            <seealso cref="T:CMS.DataEngine.InfoCloneActionContext"/>
        </member>
        <member name="P:CMS.DataEngine.InfoCloneSynchronizationTempQueue.OriginalQueueAction">
            <summary>
            Original queue method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCloneSynchronizationTempQueue.Items">
            <summary>
            Collection of items to be queued.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneSynchronizationTempQueue.#ctor(System.Action{System.Action})">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.InfoCloneSynchronizationTempQueue"/>.
            </summary>
            <param name="originalQueueAction">Original queue method.</param>
        </member>
        <member name="M:CMS.DataEngine.InfoCloneSynchronizationTempQueue.TryAdd(System.String,System.Action)">
            <summary>
            Adds item to the collection of items if not present yet.
            </summary>
            <param name="key">Item key</param>
            <param name="action">Item value</param>
        </member>
        <member name="T:CMS.DataEngine.LoadDataSettings">
            <summary>
            Defines the settings for loading data into objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadDataSettings.ObjectType">
            <summary>
            Object type used by the factory to create a specific type of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadDataSettings.Data">
            <summary>
            Object data. When object type is not specified, data may provide necessary information to select correct object type in case there are multiple candidates.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadDataSettings.ThrowIfNotFound">
            <summary>
            If true, the method throws an exception in case the object type was not found. Default false
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LoadDataSettings.DataIsExternal">
            <summary>
            Determines if the provided data is external data which may not be complete.
            If true, the loaded object loads default data before loading this data, and does not overwrite default values with null from external data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LoadDataSettings.#ctor(CMS.Base.IDataContainer,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">Source data</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.LoadDataSettings.#ctor(System.Data.DataRow,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="dr">Source DataRow</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.CloneResult">
            <summary>
            Class encapsulating cloning result messages.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneResult.Warnings">
            <summary>
            Collection of warning messages.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneResult.Errors">
            <summary>
            Collection of error messages.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CloneSettings">
            <summary>
            Class encapsulating parameters for object cloning (used in InsertAsClone settings)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.Translations">
            <summary>
            Gets or sets the translation helper object (always at least empty instance, cannot return null) which provides translation Original object ID -> Cloned object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CustomParameters">
            <summary>
            Hashtable with custom parameters (for special cases such as BizForms, CustomTables, Webparts, etc.) where additional operations have to be done.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.Parameter">
            <summary>
            Custom parameter passed within the settings (for handlers usage, etc.).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CloneBase">
            <summary>
            Gets or sets the root object - the object the cloning procedure was called on (for example when cloning country with states, in the states the root object will be still the country).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ExcludedChildTypes">
            <summary>
            Gets or sets the list of child object types which should not be cloned, if null than all child object types are cloned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ExcludedBindingTypes">
            <summary>
            Gets or sets the list of binding object types which should not be cloned, if null than all child object types are cloned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ExcludedOtherBindingTypes">
            <summary>
            Gets or sets the list of other binding object types which should not be cloned, if null than all child object types are cloned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CodeName">
            <summary>
            New code name. If null, automatically generated unique code name is generated.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.DisplayName">
            <summary>
            New display name. If null, automatically generated unique display name is generated.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.AssignToSiteID">
            <summary>
            If object has SiteBinding than a binding for given site is created after the object is cloned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeChildren">
            <summary>
            If true, child objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeBindings">
            <summary>
            If true, binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeOtherBindings">
            <summary>
            If true, other binding objects are included in the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeSiteBindings">
            <summary>
            If true, site binding objects are included in the result. This setting is applied only when IncludeBindings is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.IncludeMetafiles">
            <summary>
            If true, metafiles of the object are included in the result as well.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.MaxRelativeLevel">
            <summary>
            Determines maximal level of the relationship (parent-child). -1 means all levels, 0 means no child objects, 1 means first level of children, etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.ParentID">
            <summary>
            ID of the parent object to which the cloned object should be assigned.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.CloneToSiteID">
            <summary>
            ID of the site to clone the object to. Only for site objects. If this value is 0, object will be cloned under the site of the original object 
            unless the object type has SupportsGlobalObjects = true. In that case, 0 means that an object is cloned as a global object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.KeepOriginalSiteID">
            <summary>
            If true, CloneToSiteID is ignored and SiteID of the original object is kept.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.KeepFieldsTranslated">
            <summary>
            If true, cloned object will keep all the fields which use localization macros {$res.string$} without change. 
            If false, cloned object will replace the localization with its translation in the default culture.
            This setting does not influence DisplayName - this will be always replaced by its translation.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CloneSettings.OnCloneInsert">
            <summary>
            Handles actions before/after inserting the clone. Use to further modify given object according to settings.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="cloneToBeInserted">BaseInfo object of the clone ready to be inserted</param>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.BeforeCloneInsertCallback">
            <summary>
            Handles actions before inserting the clone. Use to further modify given object according to settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.AfterCloneInsertCallback">
            <summary>
            Handles actions right after inserting the clone object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CloneSettings.AfterCloneStructureInsertCallback">
            <summary>
            Handles actions after processing main object and all the child, binging, site bindings, ... etc. objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DependencyInfo">
            <summary>
            Wrapper class for a depending object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyInfo.ObjectType">
            <summary>
            Object type of the dependency.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyInfo.ObjectID">
            <summary>
            ID of the dependency.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyInfo.#ctor(System.String,System.Int32)">
            <summary>
            Creates new <see cref="T:CMS.DataEngine.DependencyInfo"/>.
            </summary>
            <param name="objectType">Object type of the dependency</param>
            <param name="objectId">ID of the dependency</param>
        </member>
        <member name="T:CMS.DataEngine.DependencyReference">
            <summary>
            Holds information about a reference (foreign key) relationship between two object types. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyReference.DependentObjectType">
            <summary>
            Object type that is dependent on type defined by <see cref="P:CMS.DataEngine.DependencyReference.DependencyObjectType"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyReference.DependencyObjectType">
            <summary>
            Object type that is a dependency of type defined in <see cref="P:CMS.DataEngine.DependencyReference.DependentObjectType"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyReference.DependencyColumnName">
            <summary>
            Name of the column that belongs to dependent type and stores identifier that belongs to instance of the dependency type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyReference.IntegrityType">
            <summary>
            Type of referential integrity between object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DependencyReference.IsDependencyByExtension">
            <summary>
            Returns true when dependency is defined using <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> property.
            Returns false when dependency is defined using <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyReference.#ctor(System.String,System.String,System.String,CMS.DataEngine.ObjectDependencyEnum,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyReference.Equals(CMS.DataEngine.DependencyReference)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyReference.GetHashCode">
            <summary>
            Gets the object hash code
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DynamicDependencyReference">
            <summary>
            Holds information about a reference (foreign key) relationship between two object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DynamicDependencyReference.DependentObjectType">
            <summary>
            Object type that is dependent on type stored in <see cref="P:CMS.DataEngine.DynamicDependencyReference.DependencyObjectTypeColumnName"/> database column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DynamicDependencyReference.DependencyObjectTypeColumnName">
            <summary>
            Name of the column that belongs to dependent type and stores object type that is a dependency of type defined in <see cref="P:CMS.DataEngine.DynamicDependencyReference.DependentObjectType"/>.
            </summary>
            <remarks>This property is used for dynamic dependencies only.</remarks>
        </member>
        <member name="P:CMS.DataEngine.DynamicDependencyReference.DependencyColumnName">
            <summary>
            Name of the column that belongs to dependent type and stores identifier that belongs to instance of the dependency type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DynamicDependencyReference.IntegrityType">
            <summary>
            Type of referential integrity between object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDependencyReference.#ctor(System.String,System.String,System.String,CMS.DataEngine.ObjectDependencyEnum)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDependencyReference.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDependencyReference.Equals(CMS.DataEngine.DynamicDependencyReference)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDependencyReference.GetHashCode">
            <summary>
            Gets the object hash code
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependenciesRemover">
            <summary>
            Provides support for removing dependencies within the hierarchy of <see cref="T:CMS.DataEngine.BaseInfo" /> objects.
            Removes dependencies either through replacing value (for not required dependencies) or by deleting the whole dependent object (for required dependencies)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.RemoveObjectDependencies(System.String,CMS.DataEngine.IWhereCondition,System.Boolean,System.Boolean)">
            <summary>
            Removes dependencies for the objects of the given type matching the given where condition
            </summary>
            <param name="objectType">Base object type</param>
            <param name="where">Where condition for the deleted objects</param>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearCache">If true, caches of all object types which were potentially modified are cleared (provider hashtables and object type cache dummy keys)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.RemoveObjectDependencies(CMS.DataEngine.BaseInfo,System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies for a single object. First tries to execute removedependencies query, if not found, automatic process is executed.
            </summary>
            <param name="infoObj">Info object for which the dependencies should be removed</param>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearCache">If true, caches of all object types which were potentially modified are cleared (provider hashtables and object type cache dummy keys)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.RemoveObjectDependenciesAuto(CMS.DataEngine.BaseInfo,System.Boolean,System.Boolean)">
            <summary>
            Automatic process of remove dependencies procedure.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearCache">If true, caches of all objecttypes which were potentially modified are cleared. This includes provider hashtables and cache entries depending on the given object types data.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.RemoveObjectDependencies(System.String,System.Collections.Generic.ICollection{CMS.DataEngine.RemoveDependencyInfo},System.Boolean)">
            <summary>
            Removes object dependencies for the given object type
            </summary>
            <param name="baseObjectType">Base object type</param>
            <param name="dependencies">List of dependencies to delete</param>
            <param name="clearCache">If true, the related object cache is cleared</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.RemoveDependencyUsingAPI(System.String,System.String,CMS.DataEngine.RemoveDependencyWithApiSettings)">
            <summary>
            Removes given subset of objects by API.
            </summary>
            <param name="baseObjectType">Object type that caused the <paramref name="objectType"/> deletion.</param>
            <param name="objectType">ObjectType to handle</param>
            <param name="removeSettings">Settings describing how the dependent objects should be removed</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.GetRemoveDependenciesList(CMS.DataEngine.BaseInfo,System.Boolean,CMS.DataEngine.IWhereCondition,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Returns list of couples objecttype-querytext-connectionstring-useapiflag in correct order in which it should be processed.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="getAll">If true all dependencies chain is returned, if false, only required dependencies are returned (according to required ObjectDependencies parameter)</param>
            <param name="baseWhere">Base where condition which should be used while generating the remove dependencies procedure</param>
            <param name="processed">List of already processed object types (to avoid infinite loop)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.GetHierarchicalDependency(CMS.DataEngine.BaseInfo,CMS.DataEngine.WhereCondition)">
            <summary>
            Gets hierarchical dependency for processing children for objects with path column
            </summary>
            <param name="infoObj">Info object</param>
            <param name="pathWhere">Where condition which should be used while generating the remove dependencies procedure</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.FilterDependency(CMS.DataEngine.DependencyReference,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Applies condition to dependency reference to check if should be included into remove dependencies. 
            </summary>
            <param name="dependencyReference">Dependency reference</param>
            <param name="processed">Collection of processed types used for loop detection.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.ProcessRemoveDependency(CMS.DataEngine.BaseInfo,System.Boolean,CMS.DataEngine.IWhereCondition,CMS.DataEngine.DependencyReference,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Processes a single dependency
            </summary>
            <param name="infoObj">Info object</param>
            <param name="getAll">If true all dependencies chain is returned, if false, only required dependencies are returned (according to required ObjectDependencies parameter)</param>
            <param name="baseWhere">Base where condition which should be used while generating the remove dependencies procedure</param>
            <param name="dependencyReference">Metadata describing dependency relation.</param>
            <param name="processed">List of already processed object types (to avoid infinite loop)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.AllowDeleteWithApi(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns if a depending objects which are defined by given <paramref name="typeInfo"/> can be deleted with API or with generated query.
            </summary>
            <param name="typeInfo">Type info be checked</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.GetDependentObjectsWhereConditions(CMS.DataEngine.BaseInfo,CMS.DataEngine.IWhereCondition,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.ICollection{CMS.DataEngine.WhereCondition}},System.Collections.Generic.HashSet{System.String})">
            <summary>
             Returns dictionary collection of where conditions selecting dependent objects for each dependent type.
             </summary>
             <remarks>
             Dependent object types consists of types defined in <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property, and child types.
             In case that current object type represents site or group, then also site or group objects are included.
             If current object has <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> defined, then also objects of same type with sub path are included.
             </remarks>
             <param name="infoObj">Info object</param>
             <param name="baseWhere">Where condition selecting dependency objects. If null, current (this) instance of BaseInfo is the only dependency.</param>
             <param name="conditions">Collection containing already processed types.</param>
             <param name="processedObjectTypes">Set of object types which were processed in the call hierarchy of this method.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.AddPathDependentWhereCondition(CMS.DataEngine.BaseInfo,CMS.DataEngine.IWhereCondition,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.ICollection{CMS.DataEngine.WhereCondition}})">
            <summary>
            Adds where condition that selects path dependencies of objects specified by <paramref name="baseWhere"/> to <paramref name="conditions"/> collection.
            Returns the added condition or null if no condition was added.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="baseWhere">Base where condition</param>
            <param name="conditions">Collection containing already inserted conditions</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.AddDynamicDependentWhereConditions(CMS.DataEngine.BaseInfo,CMS.DataEngine.IWhereCondition,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.ICollection{CMS.DataEngine.WhereCondition}},CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds where conditions that select dynamic dependencies of objects specified by <paramref name="baseWhere"/> and <paramref name="pathWhere"/> to <paramref name="conditions"/> collection.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="baseWhere">Base where condition</param>
            <param name="conditions">Collection containing already inserted conditions</param>
            <param name="pathWhere">Where condition for the path for hierarchical objects</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.AddDependentWhereCondition(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.ICollection{CMS.DataEngine.WhereCondition}},System.String,CMS.DataEngine.WhereCondition)">
            <summary>
            Inserts new where condition to collection of where conditions. Returns true if the condition was inserted, false otherwise.
            </summary>
            <param name="conditions">Collection containing already inserted conditions</param>
            <param name="objectType">Type of dependent objects that is selected by <paramref name="where"/></param>
            <param name="where">Where condition that select dependent objects of type <paramref name="objectType"/></param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.GetDependentObjectPathWhereCondition(CMS.DataEngine.BaseInfo,CMS.DataEngine.IWhereCondition)">
            <summary>
            Returns where condition selecting objects that are located on sub path of current object's <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/> 
            or on sub path of dependency objects specified by <paramref name="baseWhere"/> condition.
            </summary>      
            <param name="infoObj">Info object</param>
            <param name="baseWhere">Where condition selecting dependency objects. If null, current (this) instance of base info is the only dependency.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.GetDependentObjectWhereCondition(CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Returns where condition selecting dependent objects.
            </summary>      
            <param name="infoObj">Info object</param>
            <param name="dependentObj">Read only info object that depends on type specified by <paramref name="dependencyObj"/> parameter.</param>
            <param name="dependencyObj">Read only info object that is a dependency of type specified in <paramref name="dependentObj"/> parameter.</param>
            <param name="dependencyColumn">Name of the column containing ID of dependency object.</param>
            <param name="baseWhere">Where condition selecting dependency objects. If null current (this) instance of base info is the only dependency.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemover.GetDependencyInfoObjects(CMS.DataEngine.RemoveDependencyInfo)">
            <summary>
            Returns info objects matching given <see cref="T:CMS.DataEngine.RemoveDependencyInfo"/>
            </summary>
        </member>
        <member name="T:CMS.DataEngine.RemoveDependencyInfo">
            <summary>
            Class containing information how dependent objects should be removed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyInfo.ObjectType">
            <summary>
            Object type of the dependency.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyInfo.UseApi">
            <summary>
            If true, API method will be used for object deletion instead of sql query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyInfo.RemoveWithApiSettings">
            <summary>
            Settings with information about how to remove dependent object with the API.
            Used when <see cref="P:CMS.DataEngine.RemoveDependencyInfo.UseApi"/> is set to true, null otherwise.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyInfo.RemoveQuery">
            <summary>
            Query to remove dependent object with database query.
            Used when <see cref="P:CMS.DataEngine.RemoveDependencyInfo.UseApi"/> is set to false, null otherwise.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RemoveDependencyInfo.#ctor(System.String,CMS.DataEngine.RemoveDependencyWithApiSettings)">
            <summary>
            Creates new RemoveDependencyInfo that removes dependent objects by using the API.
            </summary>
            <param name="objectType">Object type of the dependency.</param>
            <param name="removeWithApiSettings">Settings describing how dependent objects should be removed</param>
        </member>
        <member name="M:CMS.DataEngine.RemoveDependencyInfo.#ctor(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Creates new RemoveDependencyInfo that removes the dependent objects by suing database query.
            </summary>
            <param name="objectType">Object type of the dependency.</param>
            <param name="removeQuery">Remove query for dependent objects</param>
        </member>
        <member name="T:CMS.DataEngine.RemoveDependencyOperationEnum">
            <summary>
            Represents operation that should be performed with dependent object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.RemoveDependencyWithApiSettings">
            <summary>
            Contains information about how to remove dependent object with the API.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyWithApiSettings.DataQuerySettings">
            <summary>
            Settings that should be applied to data query to select dependent objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyWithApiSettings.Operation">
            <summary>
            Identifies operation that should be performed with dependent object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyWithApiSettings.DependencyColumnName">
            <summary>
            Name of the column that contains dependency identifier. Value ot this column should be replaced
            with <see cref="P:CMS.DataEngine.RemoveDependencyWithApiSettings.DefaultValue"/> when <see cref="P:CMS.DataEngine.RemoveDependencyWithApiSettings.Operation"/> is set to update. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RemoveDependencyWithApiSettings.DefaultValue">
            <summary>
            Default value for dependency identifier column. This value should be stored in
            <see cref="P:CMS.DataEngine.RemoveDependencyWithApiSettings.DependencyColumnName"/> when <see cref="P:CMS.DataEngine.RemoveDependencyWithApiSettings.Operation"/> is set to update. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RemoveDependencyWithApiSettings.CreateDeleteSettings(CMS.DataEngine.WhereCondition)">
            <summary>
            Creates settings for deleting dependent objects.
            </summary>
            <param name="whereCondition">Where condition selecting dependent objects</param>
        </member>
        <member name="M:CMS.DataEngine.RemoveDependencyWithApiSettings.CreateUpdateSettings(CMS.DataEngine.WhereCondition,System.String,System.Object)">
            <summary>
            Creates settings for removing the dependent objects by updating their dependency column.
            </summary>
            <param name="whereCondition">Where condition selecting dependent objects</param>
            <param name="dependencyColumnName">Name of the column where dependency identifier is stored</param>
            <param name="defaultValue">Default value that should be placed to dependency column</param>
        </member>
        <member name="M:CMS.DataEngine.RemoveDependencyWithApiSettings.CreateObjectPathDeleteSettings(CMS.DataEngine.WhereCondition,System.String)">
            <summary>
            Creates settings for deleting dependent hierarchical objects.
            </summary>
            <param name="whereCondition">Where condition selecting dependent objects</param>
            <param name="objectPathColumnName">Name of the column where hierarchical path to object is stored</param>
        </member>
        <member name="T:CMS.DataEngine.NotImplementedInfo">
            <summary>
            Info object with no methods implemented. Serves as a base info for partially implemented info objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Type info to use for initialization</param>
        </member>
        <member name="P:CMS.DataEngine.NotImplementedInfo.ClearCacheMethods">
            <summary>
            Dictionary with the methods for clearing the internal object cache [columnName] => [clearCacheAction]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.NotImplementedInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.NotImplementedInfo.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.CloneObject(System.Boolean)">
            <summary>
            Creates the clone of the object.
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.SetReadOnly">
            <summary>
            Locks the object as a read-only
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object from the given data container
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.NewObject(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Creates new object of the given class
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.ExecuteWithOriginalData(System.Action)">
            <summary>
            Executes the given action using original data of the object
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NotImplementedInfo.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CheckDependenciesException">
            <summary>
            Exception to report attempt to delete an object which has required dependencies.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CheckDependenciesException.#ctor(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CheckDependenciesException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.CodeNameNotUniqueException">
            <summary>
            Exception to report not unique code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotUniqueException.#ctor(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotUniqueException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.CodeNameNotValidException">
            <summary>
            Exception to report not valid code name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotValidException.#ctor(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
        </member>
        <member name="M:CMS.DataEngine.CodeNameNotValidException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.IDNotTranslatedException">
            <summary>
            Thrown when identifier was required and was not translated
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.ClassName">
            <summary>
            Class name of not translated object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.CodeName">
            <summary>
            Code name of not translated object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.ColumnName">
            <summary>
            Column name of not translated object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDNotTranslatedException.ID">
            <summary>
            Identifier of not translated object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDNotTranslatedException.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="columnName">Column name of not translated object</param>
            <param name="codeName">Code name of not translated object</param>
            <param name="className">Class name of not translated object</param>
            <param name="id">Identifier of not translated object</param>
        </member>
        <member name="M:CMS.DataEngine.IDNotTranslatedException.GetErrorMessage(System.String,System.String,System.String,System.Int32)">
            <summary>
            Builds exception error message.
            </summary>
            <param name="columnName">Column name of not translated object</param>
            <param name="codeName">Code name of not translated object</param>
            <param name="className">Class name of not translated object</param>
            <param name="id">Identifier of not translated object</param>
            <returns>Error message based on given parameters</returns>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectException">
            <summary>
            Base class for the exceptions on the info objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectException.Object">
            <summary>
            Object to which the exception relates.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectException.#ctor(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">Object to which the exception relates</param>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.DataEngine.PermissionCheckException">
            <summary>
            Base class for the exceptions raised in permissions check.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.PermissionCheckException.ModuleName">
            <summary>
            Name of the module the permission of which failed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.PermissionCheckException.PermissionFailed">
            <summary>
            Name of the permission failed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.PermissionCheckException.SiteName">
            <summary>
            Name of the site where the permission failed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.PermissionCheckException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="moduleName">Name of the module the permission of which failed</param>
            <param name="permissionName">Name of the permission failed</param>
            <param name="siteName">Name of the site where the permission failed</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralInfo">
            <summary>
            General info class to work with any object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.GeneralInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralInfo.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralInfoProvider">
            <summary>
            General info provider
            </summary>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedAbstractInfo">
            <summary>
            Base info object interface for abstract info
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedAbstractInfo`1">
            <summary>
            Info object interface for abstract info
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.#ctor(CMS.DataEngine.AbstractInfoBase{`0},System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
            <param name="dummy">Dummy object to separate the protected constructor</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.#ctor(CMS.DataEngine.AbstractInfoBase{`0})">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="P:CMS.DataEngine.GeneralizedAbstractInfo`1.HasChanged">
            <summary>
            Returns true if the object has changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GeneralizedAbstractInfo`1.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedAbstractInfo`1.GetColumnType(System.String)">
            <summary>
            Gets the column type.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.DataEngine.GeneralizedInfo">
            <summary>
            Info object interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedInfo.#ctor(CMS.DataEngine.BaseInfo,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
            <param name="dummy">Dummy object to separate the protected constructor</param>
        </member>
        <member name="M:CMS.DataEngine.GeneralizedInfo.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="mainObj">Main object</param>
        </member>
        <member name="T:CMS.DataEngine.LoadDataEventHandler">
            <summary>
            Event which should load the data to the object when fired.
            </summary>
            <param name="infoObj">Object to load</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider interface T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.HasAttributes">
            <summary>
            Gets a value indicating whether the binding has any attributes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.InfoProviderInterfaceName">
            <summary>
            Gets the info provider interface name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.LeftVariableName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.RightVariableName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.LeftSideColumnName">
            <summary>
            Gets the binding left side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.RightSideColumnName">
            <summary>
            Gets the binding right side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.LeftObjectName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.RightObjectName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.LeftObjectCodeName">
            <summary>
            Gets the binding left side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.RightObjectCodeName">
            <summary>
            Gets the binding right side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplate"/> class using the specified data class.
            </summary>
            <param name="dataClass">Data class to initialize the template from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataClass"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderInterfaceTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.HasAttributes">
            <summary>
            Gets a value indicating whether the binding has any attributes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoClassNamePluralized">
            <summary>
            Gets the info class name in plural.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.InfoProviderInterfaceName">
            <summary>
            Gets the info provider interface name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftVariableName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightVariableName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftSideColumnName">
            <summary>
            Gets the binding left side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightSideColumnName">
            <summary>
            Gets the binding right side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftObjectName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightObjectName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.LeftObjectCodeName">
            <summary>
            Gets the binding left side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.RightObjectCodeName">
            <summary>
            Gets the binding right side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplate.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Generators.BindingInfoProviderTemplate"/> class using the specified data class.
            </summary>
            <param name="dataClass">Data class to initialize the template from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataClass"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoProviderInterfaceName">
            <summary>
            Gets the info provider interface name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ObjectClassName">
            <summary>
            Gets the object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.Properties">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.References">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.IdColumn">
            <summary>
            Gets the name of the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.SiteIdColumn">
            <summary>
            Gets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ParentColumn">
            <summary>
            Gets the name of the parent column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.ParentObjectType">
            <summary>
            Gets the parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.HasReferences">
            <summary>
            Determines whether there is at least one field which has a reference set to some object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Generators.BindingInfoTemplate"/> class using the specified data class.
            </summary>
            <param name="dataClass">Data class to initialize the template from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataClass"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty">
            <summary>
            A property description for the info T4 runtime template.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.Comment">
            <summary>
            Gets the property comment.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.AllowEmpty">
            <summary>
            Gets a value that indicates if the property is not required to have a value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.DefaultValue">
            <summary>
            Gets a default value of the property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.TypeDefaultValue">
            <summary>
            Gets a default value of the type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.GetMethod">
            <summary>
            Gets the name of the method to be used to obtain the property value in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.UseGetValue">
            <summary>
            Gets a value that indicates if the GetValue method is to be used in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.HasDatabaseRepresentation">
            <summary>
            Indicates if property has database representation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplate.InfoTemplateProperty.#ctor(CMS.DataEngine.FieldInfo)">
            <summary>
            Creates a new instance initialized using the specified field info.
            </summary>
            <param name="field">Field info</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider interface T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.HasCodeNameColumn">
            <summary>
            Indicates whether a codename column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.InfoClassNamePluralized">
            <summary>
            Gets the pluralized info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.InfoProviderInterfaceName">
            <summary>
            Gets the info provider interface name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.IsSiteObject">
            <summary>
            Gets a value that indicates if the info can be a site object (i.e. can have site ID specified).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.GeneratePartialInterface">
            <summary>
            Indicates whether interface should be generated as partial. 
            </summary>
            <remarks>
            Partial interface is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Generators.InfoProviderInterfaceTemplate"/> class using the specified data class.
            </summary>
            <param name="dataClass">Data class to initialize the template from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataClass"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderInterfaceTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.HasCodeNameColumn">
            <summary>
            Indicates whether a codename column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.HasGUIDColumn">
            <summary>
            Indicates whether a GUID column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoClassNamePluralized">
            <summary>
            Gets the pluralized info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.InfoProviderInterfaceName">
            <summary>
            Gets the info provider interface name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseIdHashtable">
            <summary>
            Gets the value that indicates if the ID hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseNameHashtable">
            <summary>
            Gets a value that indicates if the name hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseGuidHashtable">
            <summary>
            Gets a value that indicates if the GUID hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.UseHashtables">
            <summary>
            Gets a value that indicates if any hastable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.IsSiteObject">
            <summary>
            Gets a value that indicates if the info can be a site object (i.e. can have site ID specified).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplate.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Generators.InfoProviderTemplate"/> class using the specified data class.
            </summary>
            <param name="dataClass">Data class to initialize the template from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataClass"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplate">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplate.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoProviderInterfaceName">
            <summary>
            Gets the info provider interface name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.ObjectClassName">
            <summary>
            Gets the object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.Properties">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.IdColumn">
            <summary>
            Gets the name of the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.DisplayNameColumn">
            <summary>
            Gets the name of the display name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.CodeNameColumn">
            <summary>
            Gets the name of the code name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.GuidColumn">
            <summary>
            Gets the name of the GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.LastModifiedColumn">
            <summary>
            Gets the name of the "last modified" column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.BinaryColumn">
            <summary>
            Gets the name of the binary column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.SiteIdColumn">
            <summary>
            Gets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.HasReferences">
            <summary>
            Determines whether there is at least one field which has a reference set to some object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplate.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Generators.InfoTemplate"/> class using the specified data class.
            </summary>
            <param name="dataClass">Data class to initialize the template from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataClass"/> is null.</exception>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty">
            <summary>
            A property description for the info T4 runtime template.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.Comment">
            <summary>
            Gets the property comment.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.AllowEmpty">
            <summary>
            Gets a value that indicates if the property is not required to have a value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.DefaultValue">
            <summary>
            Gets a default value of the property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.TypeDefaultValue">
            <summary>
            Gets a default value of the type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.GetMethod">
            <summary>
            Gets the name of the method to be used to obtain the property value in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.UseGetValue">
            <summary>
            Gets a value that indicates if the GetValue method is to be used in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.HasDatabaseRepresentation">
            <summary>
            Indicates if property has database representation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplate.InfoTemplateProperty.#ctor(CMS.DataEngine.FieldInfo)">
            <summary>
            Creates a new instance initialized using the specified field info.
            </summary>
            <param name="field">Field info</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.InfoClassNamePluralized">
            <summary>
            Gets the info class name in plural.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.LeftVariableName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.RightVariableName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.LeftSideColumnName">
            <summary>
            Gets the binding left side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.RightSideColumnName">
            <summary>
            Gets the binding right side column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.LeftObjectName">
            <summary>
            Gets the binding left side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.RightObjectName">
            <summary>
            Gets the binding right side variable name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.LeftObjectCodeName">
            <summary>
            Gets the binding left side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.RightObjectCodeName">
            <summary>
            Gets the binding right side name without spaces.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info provider template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoProviderTemplateV12Base.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateV12">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.ObjectClassName">
            <summary>
            Gets the object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.Properties">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.References">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.IdColumn">
            <summary>
            Gets the name of the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.SiteIdColumn">
            <summary>
            Gets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.ParentColumn">
            <summary>
            Gets the name of the parent column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.ParentObjectType">
            <summary>
            Gets the parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.HasReferences">
            <summary>
            Determines whether there is at least one field which has a reference set to some object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty">
            <summary>
            A property description for the info T4 runtime template.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.Comment">
            <summary>
            Gets the property comment.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.AllowEmpty">
            <summary>
            Gets a value that indicates if the property is not required to have a value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.DefaultValue">
            <summary>
            Gets a default value of the property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.TypeDefaultValue">
            <summary>
            Gets a default value of the type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.GetMethod">
            <summary>
            Gets the name of the method to be used to obtain the property value in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.UseGetValue">
            <summary>
            Gets a value that indicates if the GetValue method is to be used in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.HasDatabaseRepresentation">
            <summary>
            Indicates if property has database representation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12.InfoTemplateProperty.#ctor(CMS.DataEngine.FieldInfo)">
            <summary>
            Creates a new instance initialized using the specified field info.
            </summary>
            <param name="field">Field info</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateV12Base">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.BindingInfoTemplateV12Base.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateV12">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info provider T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.HasCodeNameColumn">
            <summary>
            Indicates whether a codename column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.HasGUIDColumn">
            <summary>
            Indicates whether a GUID column is defined.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.InfoClassNamePluralized">
            <summary>
            Gets the pluralized info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.UseIdHashtable">
            <summary>
            Gets the value that indicates if the ID hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.UseNameHashtable">
            <summary>
            Gets a value that indicates if the name hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.UseGuidHashtable">
            <summary>
            Gets a value that indicates if the GUID hashtable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.UseHashtables">
            <summary>
            Gets a value that indicates if any hastable is to be used by the provider.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.IsSiteObject">
            <summary>
            Gets a value that indicates if the info can be a site object (i.e. can have site ID specified).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.HasAdvancedMethods">
            <summary>
            Gets a value that indicates if the info provider has any advanced methods.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info provider template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateV12Base">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoProviderTemplateV12Base.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateV12">
            <summary>
            Class to produce the template output
            </summary>
            <summary>
            A partial class which defines the parameters and constructor for the info T4 runtime template.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoClassName">
            <summary>
            Gets the info class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoProviderClassName">
            <summary>
            Gets the info provider class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.ObjectClassName">
            <summary>
            Gets the object class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.Properties">
            <summary>
            Gets the info properties description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.IdColumn">
            <summary>
            Gets the name of the ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.DisplayNameColumn">
            <summary>
            Gets the name of the display name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.CodeNameColumn">
            <summary>
            Gets the name of the code name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.GuidColumn">
            <summary>
            Gets the name of the GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.LastModifiedColumn">
            <summary>
            Gets the name of the "last modified" column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.BinaryColumn">
            <summary>
            Gets the name of the binary column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.SiteIdColumn">
            <summary>
            Gets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.HasReferences">
            <summary>
            Determines whether there is at least one field which has a reference set to some object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.GeneratePartialClass">
            <summary>
            Indicates whether class should be generated as partial. 
            </summary>
            <remarks>
            Partial class is not generated for <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> only.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12.#ctor(CMS.DataEngine.DataClassInfo)">
            <summary>
            Creates the info template and initializes it using the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty">
            <summary>
            A property description for the info T4 runtime template.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.Comment">
            <summary>
            Gets the property comment.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.Type">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.AllowEmpty">
            <summary>
            Gets a value that indicates if the property is not required to have a value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.DefaultValue">
            <summary>
            Gets a default value of the property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.TypeDefaultValue">
            <summary>
            Gets a default value of the type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.GetMethod">
            <summary>
            Gets the name of the method to be used to obtain the property value in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.UseGetValue">
            <summary>
            Gets a value that indicates if the GetValue method is to be used in the property get method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.ReferenceToObjectType">
            <summary>
            ObjectType to which the given field refers (for example as a foreign key).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.ReferenceType">
            <summary>
            Type of the reference (used only when ReferenceToObjectType is set).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.HasDatabaseRepresentation">
            <summary>
            Indicates if property has database representation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12.InfoTemplateProperty.#ctor(CMS.DataEngine.FieldInfo)">
            <summary>
            Creates a new instance initialized using the specified field info.
            </summary>
            <param name="field">Field info</param>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateV12Base">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Generators.InfoTemplateV12Base.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Generators.InfoTemplateV12Base.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Generators.InfoTemplateV12Base.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassCodeGenerationSettings">
            <summary>
            Represents the code generation configuration for the data class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.NameSpace">
            <summary>
            Gets or sets the namespace of generated files.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.ObjectType">
            <summary>
            Gets or sets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.DisplayNameColumn">
            <summary>
            Gets or sets the name of the display name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.CodeNameColumn">
            <summary>
            Gets or sets the name of the code name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.GuidColumn">
            <summary>
            Gets or sets the name of the GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.LastModifiedColumn">
            <summary>
            Gets or sets the name of the "last modified" column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.BinaryColumn">
            <summary>
            Gets or sets the name of the binary column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.SiteIdColumn">
            <summary>
            Gets or sets the name of the site ID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.UseIdHashtable">
            <summary>
            Gets or sets a value that indicates if the code should use the ID hashtable.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.UseNameHashtable">
            <summary>
            Gets or sets a value that indicates if the code should use the name hashtable.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ClassCodeGenerationSettings.UseGuidHashtable">
            <summary>
            Gets or sets a value that indicates if the code should use the GUID hashtable.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.#ctor">
            <summary>
            Creates a settings object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.#ctor(System.String)">
            <summary>
            Creates a settings object and initializes it using the given XML representation.
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.ToString">
            <summary>
            Returns an XML representation of the settings as string.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.LoadFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Loads the data from the given XML element
            </summary>
            <param name="element">XML element</param>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettings.GetXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets the XML element for the data
            </summary>
            <param name="doc">Parent XML document</param>
        </member>
        <member name="M:CMS.DataEngine.ClassCodeGenerationSettingsHelper.PreFillSettings(System.Collections.Generic.IEnumerable{CMS.DataEngine.FieldInfo},CMS.DataEngine.ClassCodeGenerationSettings@)">
            <summary>
            Pre-fills settings from given class fields.
            Settings value is set only when original value is null er empty string.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineCodeTemplateGenerator">
            <summary>
            Data engine code template generator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the info class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoCodeTemplateV12(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the legacy template for the info class code generation for the specified data class.
            The legacy template uses version 12 like code.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default info class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoProviderInterfaceCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the info provider interface code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoProviderCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the info provider class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoProviderCodeTemplateV12(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the legacy template for the info provider class code generation for the specified data class.
            The legacy template uses version 12 like code.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetInfoProviderCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default info provider class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the binding info class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoCodeTemplateV12(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the binding info class code generation for the specified data class.
            The legacy template uses version 12 like code.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default binding info class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoProviderInterfaceCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the binding info provider interface code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoProviderCodeTemplate(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the template for the binding info provider class code generation for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoProviderCodeTemplateV12(CMS.DataEngine.DataClassInfo)">
            <summary>
            Gets the legacy template for the binding info provider class code generation for the specified data class.
            The legacy template uses version 12 like code.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineCodeTemplateGenerator.GetBindingInfoProviderCode(CMS.DataEngine.DataClassInfo)">
            <summary>
            Generates the default binding info provider class code for the specified data class.
            </summary>
            <param name="dataClass">Data class</param>
        </member>
        <member name="T:CMS.DataEngine.InfoIdentifier">
            <summary>
            Represents the general info object identifier that uses object type to translate info object ID to code name and vice versa.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoIdentifier.ObjectType">
            <summary>
            Gets the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoIdentifier.ObjectID">
            <summary>
            Gets the object ID. If this <see cref="T:CMS.DataEngine.InfoIdentifier"/> instance was initialized from <see cref="P:CMS.DataEngine.InfoIdentifier.ObjectCodeName"/> which does not represent an existing object, returns 0.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoIdentifier.ObjectCodeName">
            <summary>
            Gets the object code name. If this <see cref="T:CMS.DataEngine.InfoIdentifier"/> was initialized from <see cref="P:CMS.DataEngine.InfoIdentifier.ObjectID"/> which does not represent an existing object, returns null.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new info object identifier using the object type and ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.#ctor(System.String,System.String)">
            <summary>
            Creates a new info object identifier using the object type and code name.
            </summary>
            <param name="objectType">Object type</param>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Creates a new info object identifier for the specified info object.
            </summary>
            <param name="info">Info</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.op_Implicit(CMS.DataEngine.BaseInfo)~CMS.DataEngine.InfoIdentifier">
            <summary>
            Implicitly converts BaseInfo to InfoIdentifier.
            </summary>
            <param name="info">Info</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.op_Implicit(CMS.DataEngine.InfoIdentifier)~System.Int32">
            <summary>
            Implicitly converts InfoIdentifier to integer.
            </summary>
            <param name="identifier">Info identifier</param>
        </member>
        <member name="M:CMS.DataEngine.InfoIdentifier.op_Implicit(CMS.DataEngine.InfoIdentifier)~System.String">
            <summary>
            Implicitly converts InfoIdentifier to string.
            </summary>
            <param name="identifier">Info identifier</param>
        </member>
        <member name="T:CMS.DataEngine.SiteInfoIdentifier">
            <summary>
            Represents the site info object identifier.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.#ctor(System.Int32)">
            <summary>
            Creates a new site info identifier using the site ID.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.#ctor(System.String)">
            <summary>
            Creates a new site info identifier using the site name.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.op_Implicit(System.Int32)~CMS.DataEngine.SiteInfoIdentifier">
            <summary>
            Implicitly converts integer to SiteInfoIdentifier.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.SiteInfoIdentifier.op_Implicit(System.String)~CMS.DataEngine.SiteInfoIdentifier">
            <summary>
            Implicitly converts string to SiteInfoIdentifier.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="T:CMS.DataEngine.InfoHelper">
            <summary>
            General info methods and properties
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoHelper.mEmptyInfo">
            <summary>
            Empty info object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoHelper.UNKNOWN_TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoHelper.CODENAME_AUTOMATIC">
            <summary>
            Constant for automatic code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoHelper.EmptyInfo">
            <summary>
            Empty info object. Can be used instead of null in BaseInfo variables to mark the loaded value as not found to prevent additional calls.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoHelper.EnsureInfo(CMS.DataEngine.BaseInfo@,System.Func{CMS.DataEngine.BaseInfo})">
            <summary>
            Ensures that the info variable is loaded with the given info. Caches the null value as BaseInfo.Empty info if the value wasn't provided, and returns null in that case.
            </summary>
            <param name="variable">Variable to use for the value</param>
            <param name="getMethod">Method to get the value</param>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectFactory">
            <summary>
            Object factory producing info objects based on the object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectFactory.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectFactory.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectFactory.CreateNewObject">
            <summary>
            Creates new object of the given type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IObjectSettingsInfoProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSettingsInfo">
            <summary>
            ObjectSettingsInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSettingsInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSettingsInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectSettingsObjectID">
            <summary>
            Related object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectCheckedOutWhen">
            <summary>
            Time stamp when the object was checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectCheckedOutVersionHistoryID">
            <summary>
            Version of the object that is checked out.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectSettingsID">
            <summary>
            ID of the settings object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectSettingsObjectType">
            <summary>
            Related object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectCheckedOutByUserID">
            <summary>
            ID of the user who has currently checked out the object for editing.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectWorkflowStepID">
            <summary>
            Current workflow step ID of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectTags">
            <summary>
            Object tags.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectComments">
            <summary>
            Object comments.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectPublishedVersionHistoryID">
            <summary>
            Version of the object that is currently published.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectWorkflowSendEmails">
            <summary>
            Indicates if workflow e-mails should be send from workflow process.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.ObjectFullName">
            <summary>
            Object full name if defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSettingsInfo.IsCheckedOut">
            <summary>
            Returns true if the object is checked out
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.#ctor">
            <summary>
            Constructor - Creates an empty ObjectSettingsInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ObjectSettingsInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSettingsInfoProvider">
            <summary>
            Class providing ObjectSettingsInfo management.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettings">
            <summary>
            Returns all object settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfo(System.String,System.Int32)">
            <summary>
            Gets the object settings for the specified object, ensures the settings if not exists.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfo(System.Int32)">
            <summary>
            Gets the object settings with the specified ID.
            </summary>
            <param name="settingsId">Object settings ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.SetObjectSettingsInfo(CMS.DataEngine.ObjectSettingsInfo)">
            <summary>
            Sets (updates or inserts) the specified object settings.
            </summary>
            <param name="settingsObj">Object settings to be set</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettingsInfo(CMS.DataEngine.ObjectSettingsInfo)">
            <summary>
            Deletes the specified object settings.
            </summary>
            <param name="settingsObj">Object settings to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettings(System.String)">
            <summary>
            Deletes the object settings matching the specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteSettingsForObject(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes settings for the given object
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteSettingsForObjectInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes settings for the given object
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetObjectSettingsInfoInternal(System.String,System.Int32)">
            <summary>
            Gets the object settings for the specified object, ensures the settings if not exists.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.DeleteObjectSettingsInternal(System.String)">
            <summary>
            Deletes the object settings matching the specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSettingsInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="T:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1">
            <summary>
            Class provides parameters that are sufficient for a single field deserialization.
            </summary>
            <remarks>Class is meant for internal use only.</remarks>
            <typeparam name="TDataType">Type of object the field's data are stored in (e.g. <see cref="T:System.Xml.XmlElement"/> or <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>).</typeparam>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName">
            <summary>
            Name of the field the in question.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.DeserializationResult">
            <summary>
            <see cref="T:CMS.DataEngine.BaseInfo"/> object containing the field encapsulated with failed deserialization/mapping collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldData">
            <summary>
            Object that holds data for the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field.
            It might be e.g. <see cref="T:System.Xml.XmlElement"/> or <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> or any other representation of raw data that need to be processed
            before it can be stored in the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field of the <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.#ctor(CMS.DataEngine.Serialization.DeserializationResult)">
            <summary>
            Constructor of the <see cref="T:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1"/>.
            </summary>
            <param name="deserializationResult">Carries both (partially) deserialized info object and results of eventual failures.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldDeserializationFailed(System.String)">
            <summary>
            Stores information about unsuccessful deserialization of <paramref name="rawValue"/> into <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field.
            </summary>
            <param name="rawValue">Value that was impossible to convert. Can be null if no value read.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldMappingFailed(CMS.DataEngine.Serialization.TranslationReference)">
            <summary>
            Stores information about unsuccessful mapping of the <paramref name="reference"/> into <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field.
            </summary>
            <param name="reference">Reference (usually read from the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldData"/>) that the object it references to was not found in the DB.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.SetFieldValue(System.Object)">
            <summary>
            Sets given <paramref name="value"/> to the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field of <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/>.
            </summary>
            <param name="value">Value to be set to the <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/>.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.GetFieldValue">
            <summary>
            Gets value of the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field of <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.GetFieldType">
            <summary>
            Returns object type of the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.GetReferencedObjectTypeName">
            <summary>
            Returns name of the object type that is referenced by the <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/> field.
            If the field does not hold reference to another object, null is returned.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Serialization.DeserializationResult">
            <summary>
            Provides information on deserialization process result and partially or fully deserialized <see cref="T:CMS.DataEngine.BaseInfo"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo">
            <summary>
            Deserialized info object
            </summary>
            <remarks>
            See <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.IsValid"/> to identify whether deserialization was fully or just partially successful.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationResult.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Creates <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/> instance.
            </summary>
            <param name="deserializedInfo">Info object representing deserialized data.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationResult.#ctor(CMS.DataEngine.BaseInfo,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/> instance copying provided
            <paramref name="failedFields"/> into <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/>.
            </summary>
            <param name="deserializedInfo">Info object representing deserialized data.</param>
            <param name="failedFields">Collection of <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/>.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.DeserializationResult.op_Implicit(CMS.DataEngine.Serialization.DeserializationResult)~CMS.DataEngine.BaseInfo">
            <summary>
            Implicit conversion to <see cref="T:CMS.DataEngine.BaseInfo"/> returns value of <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/>.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Serialization.DeserializationResultBase">
            <summary>
            Provides information on deserialization process result.
            </summary>
            <remarks>Class is intended for internal and testing purposes.</remarks>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationResultBase.IsValid">
            <summary>
            Returns true if deserialized info object contains all fields that were present in its source and all references were successfully mapped to existing DB objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings">
            <summary>
            Collection of names of fields and translation references that was impossible to map to existing DB objects.
            </summary>
            <remarks>
            In most cases, there will be at most single failed mapping present for given field.
            Occasionally, however, there might be multiple failed mappings for the field.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields">
            <summary>
            Collection of names of fields and raw values that was impossible to deserialize.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Serialization.FailedMapping">
            <summary>
            Provides information of name of field and translation reference that was impossible to map to existing DB objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.FailedMapping.#ctor(System.String,CMS.DataEngine.Serialization.TranslationReference)">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.Serialization.FailedMapping"/>.
            </summary>
            <param name="fieldName">Name of field the translation to existing DB object failed for.</param>
            <param name="translationReference">Reference that failed to translate to existing DB object.</param>
            <exception cref="T:System.ArgumentException">Thrown when file name is either <see langword="null"/> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when reference was not provided.</exception>
        </member>
        <member name="P:CMS.DataEngine.Serialization.FailedMapping.FieldName">
            <summary>
            Name of field the translation to existing DB object failed for.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.FailedMapping.TranslationReference">
            <summary>
            Reference to object that failed to translate to existing DB object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.FailedMapping.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Serialization.InfoDeserializer">
            <summary>
            De-serialization support for info objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.InfoDeserializer.TranslationHelper">
            <summary>
            Provides object translation. Used during deserialization to optimize database calls.
            </summary>
            <remarks>
            The <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/> property contains data records that correspond with the database.        
            For translation records identified using partially correct parameters (either the code name or GUID is different than the value in the database), 
            the actual values are loaded from the database for all fields.        
            An index key referencing the correct data is then created from the partial parameters. The index key is used to obtain the record in future calls.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.DeserializeObject(System.Xml.XmlElement)">
            <summary>
            Creates info object from given <paramref name="element"/>.
            </summary>
            <param name="element">XML element containing all the object data.</param>
            <remarks>
            <para>
                Deserialized object is then matched with existing object in the database and reference are translated.
                <list type="bullet">
                    <item>
                        <description>
                            If matching object exists in the database, it is returned as <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/> with values and references
                            that are no excluded (see <see cref="P:CMS.DataEngine.SerializationSettings.ExcludedFieldNames"/>) set based on data provided in <paramref name="element"/>.
                        </description>
                    </item>
                    <item>
                        <description>
                            If field serialization failed (see <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/>) or no object was found,
                            <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/>'s ID is set to 0.
                        </description>
                    </item>
                </list>
            </para>
            <para>
                Data that could not be read and references that could not be translated are stored in
                <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/> and <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings"/> respectively.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.MergeDeserializedInfoWithExistingObject(CMS.DataEngine.Serialization.DeserializationResult)">
            <summary>
            If info object does not exist in database, <paramref name="deserializedInfoResult"/> is returned without any change.
            <para>
            Otherwise, existing info object is retrieved from the database and data from <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/> property of <paramref name="deserializedInfoResult"/> are copies into the object.
            Existing object (with changed data and same <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/> and <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings"/>) is returned in this case.
            </para>
            </summary>
            <param name="deserializedInfoResult">DeserializationResult obtained by deserialization of the XML on the file system.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.CopySerializableFieldsFromOneInfoToAnother(CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Copies data except the excluded fields (specified in <see cref="P:CMS.DataEngine.ObjectTypeInfo.SerializationSettings"/>)
            from <paramref name="sourceInfo"/> to <paramref name="destinationInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.RegisterExistingInfo(CMS.DataEngine.BaseInfo)">
            <summary>
            Registers record for given <paramref name="info"/> into <see cref="P:CMS.DataEngine.Serialization.InfoDeserializer.TranslationHelper"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.IsForeignKeyField(CMS.DataEngine.Serialization.DeserializationFieldWrapper{System.Xml.XmlElement},CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the field holds reference to another object.
            </summary>
            <param name="field">Field to check</param>
            <param name="typeInfo">Object type info of the deserialized object</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.IsRequiredDependency(CMS.DataEngine.Serialization.DeserializationFieldWrapper{System.Xml.XmlElement})">
            <summary>
            Returns true if the field holds required reference to another object.
            </summary>
            <param name="field">Field to check</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.ReadValue(CMS.DataEngine.Serialization.DeserializationFieldWrapper{System.Xml.XmlElement})">
            <summary>
            Reads regular or common value (including CDATA)
            </summary>
            <param name="field">Carries all necessary information required for deserialization of the value of <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/>.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.ReadForeignKey(CMS.DataEngine.Serialization.DeserializationFieldWrapper{System.Xml.XmlElement})">
            <summary>
            Reads foreign key that stored as <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>.
            </summary>
            <remarks>In case the reference is stored as plain integer ID, no DB is check performed.</remarks>
            <param name="field">Carries all necessary information required for deserialization of the value of <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/>.</param>
            <returns>ID if the value provided is reference to an object that exists in the DB (reference) or valid integer greater than 0 (plain ID), null otherwise.</returns>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.RemoveCDataWrappers(System.Xml.XmlElement)">
            <summary>
            Ensures format of inner CDATA sections for element values with complex content.
            </summary>
            <param name="element">Root of element sub-tree to process</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.GetCDataContent(System.Collections.Generic.IEnumerable{System.Xml.XmlCDataSection})">
            <summary>
            Returns string with a content of CDATA section(s).
            </summary>
            <param name="cdatas">Collection of CDATA sections</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoDeserializer.ConvertToProperType(System.String,System.Type)">
            <summary>
            Converts given string value into a proper type.
            </summary>
            <param name="value">String value for conversion</param>
            <param name="type">Data type the <paramref name="value"/> is converted to</param>
        </member>
        <member name="T:CMS.DataEngine.Serialization.InfoSerializer">
            <summary>
            Serialization support for info objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.InfoSerializer.TranslationHelper">
            <summary>
            Provides objects translation interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.SerializeObject(CMS.DataEngine.BaseInfo)">
            <summary>
            Serializes the given object to XML element.
            </summary>
            <param name="infoObject">Info object to serialize</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.SerializeObject(CMS.DataEngine.BaseInfo,CMS.DataEngine.SerializationSettings)">
            <summary>
            Serializes the given object to XML element.
            </summary>
            <param name="infoObject">Info object to serialize</param>
            <param name="settings">Specific serialization settings that can override those from type info.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.GetObjectElement(CMS.DataEngine.IInfo,System.Xml.XmlDocument,CMS.DataEngine.SerializationSettings)">
            <summary>
            Gets the object XML element.
            </summary>
            <param name="infoObject">Info object</param>
            <param name="document">XML document for serialization</param>
            <param name="settings">Specific serialization settings that override those from type info.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.GetReferencedObjectType(CMS.DataEngine.IInfo,System.String)">
            <summary>
            Returns object type name if column holds reference to another object.
            </summary>
            <param name="infoObject">Serialized info object</param>
            <param name="columnName">Name of the column to check</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.WriteForeignKey(CMS.DataEngine.ObjectTypeInfo,System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String,System.Object,CMS.DataEngine.SerializationSettings)">
            <summary>
            Writes foreign key translation into the field element.
            </summary>
            <param name="typeInfo">Type info object</param>
            <param name="document">XML document for serialization</param>
            <param name="fieldElement">Parent element the translations will be written into</param>
            <param name="fieldName">Foreign key field name</param>
            <param name="targetObjectType">Target object type name</param>
            <param name="value">Raw target object ID</param>
            <param name="settings">Specific serialization settings that override those from type info.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.ReadRawDateTimeValueToString(System.Object)">
            <summary>
            Reads raw value of DateTime and returns well-formatted invariant string.
            </summary>
            <param name="value">Object of DateType type</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.ReadRawDoubleValueToString(System.Object)">
            <summary>
            Reads raw value of double and returns string that can round-trip to an identical number.
            </summary>
            <param name="value">Object of double type</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.ReadRawDecimalValueToString(System.Object)">
            <summary>
            Reads raw value of decimal and returns string with trailing zeroes trimmed.
            </summary>
            <param name="value">Object of decimal type.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.ReadRawValueToString(System.Object)">
            <summary>
            Reads raw value of any type and returns well-formatted invariant string.
            </summary>
            <param name="value">Object for interpretation as string</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.WriteStructuredField(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,CMS.DataEngine.IStructuredField)">
            <summary>
            Writes structured field into the field element.
            </summary>
            <param name="document">XML document for serialization</param>
            <param name="fieldElement">Parent element the structured field will be written into</param>
            <param name="value">Value to be structured</param>
            <param name="structuredField">Definition of the structured field configuration</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.WriteStringValue(CMS.DataEngine.ObjectTypeInfo,System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Writes string value into the field element, encapsulating it with CDATA
            </summary>
            <param name="typeInfo">Type info object</param>
            <param name="fieldElement">Parent element the structured field will be written into</param>
            <param name="fieldName">Type info field name</param>
            <param name="value">Value to be structured</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.WriteValue(CMS.DataEngine.ObjectTypeInfo,System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.Object,CMS.DataEngine.SerializationSettings)">
            <summary>
            Writes a value into given field element
            </summary>
            <param name="typeInfo">Type info object</param>
            <param name="document">XML document for serialization</param>
            <param name="fieldElement">Parent element the structured field value will be written into</param>
            <param name="fieldName">Type info field name</param>
            <param name="value">Value to be structured</param>
            <param name="settings">Specific serialization settings that override those from type info.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.WriteTranslationNodes(System.String,System.Int32,System.Xml.XmlNode)">
            <summary>
            Adds the translation nodes to the serialization
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
            <param name="fieldElement">Parent element for translation data</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.EnsureCData(System.Xml.XmlElement)">
            <summary>
            Ensures CDATA sections for element values with complex content.
            </summary>
            <param name="element">Root of element sub-tree to process</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.InfoSerializer.NeedsCData(System.String)">
            <summary>
            Returns true if the given string needs to be encapsulated into CDATA section
            </summary>
            <param name="text">Text to check</param>
        </member>
        <member name="T:CMS.DataEngine.Serialization.SerializationExtensions">
            <summary>
            Extension methods for serialization and deserialization of <see cref="T:CMS.DataEngine.BaseInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.Serialize(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns object data serialized into the XML element.
            </summary>
            <param name="infoObject">Info object to serialize</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObject"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.Serialize(CMS.DataEngine.BaseInfo,CMS.DataEngine.TranslationHelper,CMS.DataEngine.SerializationSettings)">
            <summary>
            Returns object data serialized into the XML element.
            </summary>
            <param name="infoObject">Info object to serialize</param>
            <param name="translationHelper">Custom helper <see cref="T:CMS.DataEngine.TranslationHelper"/> providing objects translation interface. Default helper is used if null</param>
            <param name="settings">Specific serialization settings that can override those from type info.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObject"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.Deserialize(System.Xml.XmlElement)">
            <summary>
            Returns the XML element deserialized as a <see cref="T:CMS.DataEngine.BaseInfo"/> object.
            </summary>
            <param name="element">XML element containing all the object data</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.Deserialize(System.Xml.XmlElement,CMS.DataEngine.TranslationHelper)">
            <summary>
            Returns the XML element deserialized as a <see cref="T:CMS.DataEngine.BaseInfo"/> object.
            </summary>
            <param name="element">XML element containing all the object data</param>
            <param name="translationHelper">Custom helper <see cref="T:CMS.DataEngine.TranslationHelper"/> providing objects translation interface. Default helper is used if null</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.Add(System.Collections.Generic.ICollection{CMS.DataEngine.Serialization.FailedMapping},System.String,CMS.DataEngine.Serialization.TranslationReference)">
            <summary>
            Adds new failed mapping into provided collection.
            </summary>
            <param name="failedMappings">Collection of failed mappings (see <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/>).</param>
            <param name="fieldName">Name of field that failed to translate reference.</param>
            <param name="translationReference">Translation reference that failed to translate into and ID.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.SelectField(System.Collections.Generic.ICollection{CMS.DataEngine.Serialization.FailedMapping},System.String)">
            <summary>
            Selects only such <see cref="T:CMS.DataEngine.Serialization.FailedMapping"/>s which <see cref="P:CMS.DataEngine.Serialization.FailedMapping.FieldName"/>
            is same as <paramref name="fieldName"/> from the <paramref name="failedMappings"/> (comparison is case insensitive).
            </summary>
            <param name="failedMappings">Collection of failed mappings (see <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/>).</param>
            <param name="fieldName">Name of field that which failed <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>s should be selected.</param>
            <remarks><paramref name="fieldName"/> comparison is case insensitive.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Serialization.SerializationExtensions.ContainsField(System.Collections.Generic.ICollection{CMS.DataEngine.Serialization.FailedMapping},System.String)">
            <summary>
            Returns <see langword="true"/> if provided <paramref name="fieldName"/> has at least one reference
            in the <paramref name="failedMappings"/> collection.
            </summary>
            <param name="failedMappings">Collection of failed mappings (see <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/>).</param>
            <param name="fieldName">Name of field that might be present in the collection</param>
            <remarks><paramref name="fieldName"/> comparison is case insensitive.</remarks>
        </member>
        <member name="T:CMS.DataEngine.Serialization.StringConverter">
            <summary>
            Provides method for converting character string to requested type.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Serialization.StringConverter.TryParse`1">
            <summary>
            Delegate for generic TryParse method.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.TryParseFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
            <summary>
            Extended version of <see cref="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)"/> method
            that also return false when parsing result evaluates to Infinity or Not A Number.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.TryParseDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
            <summary>
            Extended version of <see cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)"/> method
            that also return false when parsing result evaluates to Infinity or Not A Number.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetNumber``1(System.String,System.Object,System.Globalization.NumberStyles,CMS.DataEngine.Serialization.StringConverter.TryParse{``0})">
            <summary>
            Converts given string representation to a number.
            </summary>
            <param name="value">String representation of a number.</param>
            <param name="defaultValue">Default value to return if the conversion fails.</param>
            <param name="numberStyles">Determines the styles ("characters") permitted in numeric string (i.e. whitespace, sign, decimal point etc.).</param>
            <param name="parseFunc">Function for converting string to number.</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetInteger(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">String representation of an <see cref="T:System.Int32"/>.</param>
            <param name="defaultValue">Default value to return if the conversion fails.</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetLong(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.Int64"/>.</param>
            <param name="defaultValue">Default value to return if the conversion fails.</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetDouble(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.Double"/>.</param>
            <param name="defaultValue">Default value to return if the conversion fails</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetFloat(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.Single"/>.</param>
            <param name="defaultValue">Default value to return if the conversion fails</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetDecimal(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.Decimal"/>.</param>
            <param name="defaultValue">Default value to return if the conversion fails</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetDateTime(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.DateTime"/> value.</param>
            <param name="defaultValue">Default value to return if the conversion fails</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
            <remarks>Conversion takes into account machine's timezone.</remarks>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetBoolean(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.Boolean"/> value.</param>
            <param name="defaultValue">Default value to return if the conversion fails</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetGuid(System.String,System.Object)">
            <summary>
            Converts given string value to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">String representation of a <see cref="T:System.Guid"/> value.</param>
            <param name="defaultValue">Default value to return if the conversion fails</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StringConverter.GetValue(System.String,CMS.DataEngine.DataType)">
            <summary>
            Converts given string value to type specified by <see cref="T:CMS.DataEngine.DataType"/>.
            </summary>
            <param name="value">String representation of a value to conversion.</param>
            <param name="dataType">Describes the type of returned object.</param>
            <exception cref="T:System.InvalidCastException">Thrown when conversion fails.</exception>
        </member>
        <member name="T:CMS.DataEngine.Serialization.StructuredData">
            <summary>
            Basic structured object implementation for valid XMLs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StructuredData.LoadFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Loads the data from the given XML element
            </summary>
            <param name="element">XML element</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.StructuredData.GetXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets the XML element for the data
            </summary>
            <param name="doc">Parent XML document</param>
        </member>
        <member name="T:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions">
            <summary>
            Class provides extensions for <see cref="T:CMS.DataEngine.TranslationHelper"/>, enabling it to work with <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>,
            <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> serialized to XML (through <see cref="T:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1"/>)
            and unsuccessful <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>s stored in <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.TryGetForeignID(CMS.DataEngine.TranslationHelper,CMS.DataEngine.Serialization.TranslationReference,System.Int32@)">
            <summary>
            Returns true when ID was obtained or reference was null.
            When returned value is false, then requested reference object is missing and it's ID can't be obtained.
            </summary>
            <remarks>
            The <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/> property contains data records that correspond with the database.        
            For translation records identified using partially correct parameters (either the code name or GUID is different than the value in the database), 
            the actual values are loaded from the database for all fields.        
            An index key referencing the correct data is then created from the partial parameters. The index key is used to obtain the record in future calls.
            </remarks>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/> to work with.</param>
            <param name="reference">Information necessary to obtain the ID of an object.</param>
            <param name="id">ID of specified object.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.GetForeignID(CMS.DataEngine.TranslationHelper,CMS.DataEngine.Serialization.TranslationReference)">
            <summary>
            Returns the ID of specified object.
            </summary>
            <remarks>
            The <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/> property contains data records that correspond with the database.        
            For translation records identified using partially correct parameters (either the code name or GUID is different than the value in the database), 
            the actual values are loaded from the database for all fields.        
            An index key referencing the correct data is then created from the partial parameters. The index key is used to obtain the record in future calls.
            </remarks>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/> to work with.</param>
            <param name="reference">Information necessary to obtain the ID of an object.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.TranslateReferenceIntoForeignKey(CMS.DataEngine.TranslationHelper,CMS.DataEngine.Serialization.DeserializationFieldWrapper{System.Xml.XmlElement})">
            <summary>
            Translates reference of an object specified in <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldData"/> to ID of the object present in DB,
            provided the element containing serialized <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>.
            </summary>
            <remarks>
            The <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/> property contains data records that correspond with the database.        
            For translation records identified using partially correct parameters (either the code name or GUID is different than the value in the database), 
            the actual values are loaded from the database for all fields.        
            An index key referencing the correct data is then created from the partial parameters. The index key is used to obtain the record in future calls.
            </remarks>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/> to work with.</param>
            <param name="field">All information necessary to interpret an XML element.</param>
            <returns>An integer greater than 0 if referenced object found, null otherwise.</returns>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.TranslateReferenceIntoForeignKey(CMS.DataEngine.TranslationHelper,CMS.DataEngine.Serialization.DeserializationFieldWrapper{CMS.DataEngine.Serialization.TranslationReference})">
            <summary>
            Translates reference of an object specified in <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldData"/> to ID of the object present in DB.
            </summary>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/> to work with.</param>
            <param name="field">All information necessary to interpret a reference.</param>
            <returns>An integer greater than 0 if referenced object found, null otherwise.</returns>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.SetStringId(CMS.DataEngine.Serialization.DeserializationFieldWrapper{CMS.DataEngine.Serialization.TranslationReference},System.Int32,System.String)">
            <summary>
            Appends <paramref name="id"/> to the <paramref name="field"/> that is of <see cref="T:System.String"/> type.
            <para>If there is empty or <see langword="null"/> value present in the field, new <paramref name="id"/> set as single value.</para>
            <para>If there is non-empty value present in the field, <paramref name="separator"/> and new <paramref name="id"/> is appended.</para>
            </summary>
            <param name="field">The field the <paramref name="id"/> was resolved for.</param>
            <param name="id">Resolved ID that should be appended into the <paramref name="field"/>.</param>
            <param name="separator">Separates individual <paramref name="id"/>s in the <paramref name="field"/>.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.GetFieldWrappersForNewResult(CMS.DataEngine.Serialization.DeserializationResult,CMS.DataEngine.Serialization.DeserializationResult)">
            <summary>
            Creates <see cref="T:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1"/> for each <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings"/> present
            in <paramref name="originalResult"/> and returns them as a collection. Created wrappers reference <paramref name="newResult"/>, so
            any operation upon the wrapper will be reflected in the <paramref name="newResult"/> (and not the <paramref name="originalResult"/>).
            </summary>
            <param name="originalResult">Deserialization result provided by deserialization result.</param>
            <param name="newResult">Newly created result where only newly failed fields will be reflected.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.StoreValidId(CMS.DataEngine.Serialization.DeserializationFieldWrapper{CMS.DataEngine.Serialization.TranslationReference},System.Int32)">
            <summary>
            Store provided <paramref name="id"/> in <paramref name="field"/> wrapper (that stores in the deserialized <see cref="T:CMS.DataEngine.BaseInfo"/>).
            </summary>
            <param name="field">Wrapper that provides operation on <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/> in context of <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/>.</param>
            <param name="id">Identifier of object that was carried through serialization process only as a reference and was identified at the destination location.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.TryTranslateField(CMS.DataEngine.TranslationHelper,CMS.DataEngine.Serialization.DeserializationFieldWrapper{CMS.DataEngine.Serialization.TranslationReference})">
            <summary>
            Tries to obtain ID for given <paramref name="field"/>'s reference. If succeeds, stores ID in resulting info object (see <see cref="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.StoreValidId(CMS.DataEngine.Serialization.DeserializationFieldWrapper{CMS.DataEngine.Serialization.TranslationReference},System.Int32)"/>),
            otherwise appends field into <paramref name="field"/>'s <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.DeserializationResult"/>.
            </summary>
            <param name="translationHelper">Instance of translation helper (in ideal case pre-filled with all existing objects of referenced type).</param>
            <param name="field">Wrapper that provides operation on <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/> and carries <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> in context of <see cref="P:CMS.DataEngine.Serialization.DeserializationFieldWrapper`1.FieldName"/>.</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationHelperForeignKeyExtensions.TranslateFailedReferences(CMS.DataEngine.TranslationHelper,CMS.DataEngine.Serialization.DeserializationResult)">
            <summary>
            Returns new <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/> with <see cref="P:CMS.DataEngine.Serialization.DeserializationResult.DeserializedInfo"/> and <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/> 
            from the <paramref name="originalResult"/>, yet brand new collection of <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings"/> where there are only fields which
            translation failed again.
            </summary>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/> to work with.</param>
            <param name="originalResult">Existing <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/>.</param>
        </member>
        <member name="T:CMS.DataEngine.Serialization.TranslationReference">
            <summary>
            Contains all information necessary to identify an object in database except for its ID. Pass it to the <see cref="T:CMS.DataEngine.TranslationHelper"/> to obtain the current ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.TranslationReference.ObjectType">
            <summary>
            Foreign object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.TranslationReference.CodeName">
            <summary>
            Foreign object code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.TranslationReference.GUID">
            <summary>
            Foreign object GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.TranslationReference.Site">
            <summary>
            Foreign object site.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.TranslationReference.Parent">
            <summary>
            Foreign object parent translation reference.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Serialization.TranslationReference.Group">
            <summary>
            Foreign object group translation reference.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.#ctor">
            <summary>
            Constructor for <see cref="T:CMS.DataEngine.TranslationReferenceLoader"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteToXmlElement(System.Xml.XmlNode)">
            <summary>
            Adds the translation nodes to the serialization
            </summary>
            <param name="element">Parent element for translation data</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteTranslationNodeCodeName(System.Xml.XmlNode)">
            <summary>
            Writes code name to the foreign key element
            </summary>
            <param name="element">Parent element for translation data (foreign key element)</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteTranslationNodeGuid(System.Xml.XmlNode)">
            <summary>
            Writes GUID to the foreign key element
            </summary>
            <param name="element">Parent element for translation data (foreign key element)</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteTranslationNodeObjectType(System.Xml.XmlNode)">
            <summary>
            Writes object type to the foreign key element
            </summary>
            <param name="element">Parent element for translation data (foreign key element)</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteTranslationNodeSiteName(System.Xml.XmlNode)">
            <summary>
            Writes site name to the foreign key element
            </summary>
            <param name="element">Parent element for translation data (foreign key element)</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteTranslationNodeParentId(System.Xml.XmlNode)">
            <summary>
            Writes parent identifier to the foreign key element
            </summary>
            <param name="element">Parent element for translation data (foreign key element)</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.WriteTranslationNodeGroupId(System.Xml.XmlNode)">
            <summary>
            Writes group identifier to the foreign key element
            </summary>
            <param name="element">Parent element for translation data (foreign key element)</param>
        </member>
        <member name="M:CMS.DataEngine.Serialization.TranslationReference.AppendSimpleNode(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Appends a simple value node to the given node
            </summary>
            <param name="name">Node name</param>
            <param name="value">Value</param>
            <param name="parent">Parent node</param>
        </member>
        <member name="T:CMS.DataEngine.TaskTypeEnum">
            <summary>
            Synchronization task types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.All">
            <summary>
            All task types (used within integration module)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.Unknown">
            <summary>
            Unkown task type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.UpdateDocument">
            <summary>
            Update document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.PublishDocument">
            <summary>
            Publish document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteDocument">
            <summary>
            Delete document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteAllCultures">
            <summary>
            Delete all culture versions of specified document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.MoveDocument">
            <summary>
            Moves document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.ArchiveDocument">
            <summary>
            Archive document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.UpdateObject">
            <summary>
            Update object task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteObject">
            <summary>
            Delete object task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RejectDocument">
            <summary>
            Archive document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CreateObject">
            <summary>
            Creates object task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CreateDocument">
            <summary>
            Creates document task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CreateMediaFolder">
            <summary>
            Creates media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.CopyMediaFolder">
            <summary>
            Copy media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.MoveMediaFolder">
            <summary>
            Moves media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteMediaFolder">
            <summary>
            Delete media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeleteMediaRootFolder">
            <summary>
            Delete media library root folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RenameMediaFolder">
            <summary>
            Rename media library folder.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.AddToSite">
            <summary>
            Add object to site.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RemoveFromSite">
            <summary>
            Remove object from site.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.BreakACLInheritance">
            <summary>
            Break ACL inheritance.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.RestoreACLInheritance">
            <summary>
            Restore ACL inheritance.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.GeneratePageUrlPaths">
            <summary>
            Generate page URL paths.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.DeletePageUrlPaths">
            <summary>
            Delete page URL paths.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.UpdatePageUrlPaths">
            <summary>
            Update page URL paths.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TaskTypeEnum.ChangePageUrlPathSlug">
            <summary>
            Change page URL path slug.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ILicenseService">
            <summary>
            Interface for check license 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ILicenseService.CheckLicense(CMS.DataEngine.FeatureEnum,System.String,System.Boolean)">
            <summary>
            Checks the license based on feature and perform action based on given arguments
            </summary>
            <param name="feature">Feature to check</param>
            <param name="domain">Domain to check. If null, function tries to get domain from HttpContext</param>
            <param name="throwError">Indicates whether throw error after false check</param>
        </member>
        <member name="M:CMS.DataEngine.ILicenseService.IsFeatureAvailable(CMS.DataEngine.FeatureEnum,System.String)">
            <summary>
            Checks whether the given <paramref name="feature"/> is available on given <paramref name="domain"/>.
            </summary>
            <remarks>
            If the method is called outside the request and <paramref name="domain"/> is <c>null</c>, check is performed against the best license available on the instance.
            </remarks>
            <param name="feature">Feature to be checked</param>
            <param name="domain">Domain the <paramref name="feature"/> is checked against. If <c>null</c>, the domain will be obtained from the context</param>
            <returns><c>true</c> if the <paramref name="feature"/> is available on given <paramref name="domain"/>; otherwise, <c>false</c></returns>
        </member>
        <member name="T:CMS.DataEngine.LicenseException">
            <summary>
            Throws when system requests feature with insufficient license
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LicenseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LicenseException"/> class with default values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LicenseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LicenseException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:CMS.DataEngine.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LicenseException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectHelper">
            <summary>
            Object manipulation methods.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.BINARY_DATA_DEFAULT">
            <summary>
            Default binary data type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.BINARY_DATA_PREVIEW">
            <summary>
            Thumbnail data type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_SITE">
            <summary>
            Site object types - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_DOCUMENTS">
            <summary>
            Document object type - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectHelper.GROUP_OBJECTS">
            <summary>
            All objects object type - Group constant.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetTable(System.Data.DataSet,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Gets the table of specified info object from the given DataSet using the serialization table name.
            </summary>
            <param name="ds">Source data set</param>
            <param name="infoObj">Info object</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class of the given object is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.FindTable(System.Data.DataSet,System.String)">
            <summary>
            Finds the table with the given name in data set. Search is case insensitive, but exact case match has priority.
            </summary>
            <param name="ds">Source data set</param>
            <param name="tableName">Table name to find</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetSerializationTableName(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Gets the table name of specified info object used for serialized data.
            </summary>
            <param name="infoObj">Info object</param>
            <exception cref="T:CMS.DataEngine.DataClassNotFoundException">Thrown when the data class of the given object is not found.</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsDataSet(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.GeneralizedInfo,System.Boolean)">
            <summary>
            Returns empty objects DataSet based on the given object type.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Info object</param>
            <param name="childData">If true, child datasets are included</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetBinaryDataSet(System.Boolean)">
            <summary>
            Gets empty DataSet for binary data.
            </summary>
            <param name="binaryData">If false, binary data column is string column</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetBinaryData(CMS.DataEngine.GeneralizedInfo,System.String[0:,0:],System.Int64,System.Boolean)">
            <summary>
            Gets DataSet with binary data of given files.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="files">Array of files in format { {"fullPhysicalFile1Path", "fileType"} {"fullPhysicalFile2Path", "fileType"}}</param>
            <param name="maxFileSize">Maximal size in bytes of the file which should be included into the DataSet</param>
            <param name="binaryData">If true, gets the binary data to the DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetExcludedNamesWhereCondition(System.String[],System.String)">
            <summary>
            Generate where condition due to excluded names.
            </summary>
            <param name="excludedNames">Excluded names</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetExistingChildren(CMS.DataEngine.GeneralizedInfo,System.Boolean,System.Int32,System.String)">
            <summary>
            Gets the existing children for the given object
            </summary>
            <param name="infoObj">Parent object</param>
            <param name="addSiteCondition">If true, site condition is added for the children</param>
            <param name="siteId">Site ID for the site condition</param>
            <param name="childObjectType">Child object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.BaseInfo,System.String,System.String,System.Boolean,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[])">
            <summary>
            Gets the DataSet of the objects data and their child objects.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Main info object</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns for the main objects</param>
            <param name="childData">If true, child objects data are included</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.GeneralizedInfo,CMS.DataEngine.QueryDataParameters,System.String,System.String,System.Boolean,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[],System.Int32)">
            <summary>
            Gets the DataSet of the objects data and their child objects.
            </summary>
            <param name="operation">Operation type</param>
            <param name="infoObj">Main info object</param>
            <param name="parameters">Parameters for the selection</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by columns for the main objects</param>
            <param name="childData">If true, child objects data are included</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectsData(CMS.DataEngine.GetObjectsDataSettings)">
            <summary>
            Gets the DataSet of the objects data and their child objects.
            </summary>
            <param name="settings">Configuration for objects data selection</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.TransferHierarchicalCategoryDataSet(System.String,System.String,System.String,System.Data.DataTable,System.Boolean,CMS.DataEngine.TranslationHelper,System.String[],CMS.DataEngine.OperationTypeEnum,System.Data.DataSet)">
            <summary>
            Adds table with categories parents to data set.
            </summary>
            <param name="columnName">Column name of table ID</param>
            <param name="parentColumnName">Column name of parent key ID</param>
            <param name="objectType">Object type</param>
            <param name="parentDT">Data table with parent data</param>
            <param name="binaryData">If true, binary data are included</param>
            <param name="th">Translation table to initialize with data bindings</param>
            <param name="excludedNames">Objects with codename or display name starting with these names will be filtered out</param>
            <param name="operation">Operation type</param>
            <param name="ds">Data set to add the data</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.ApplyExcludedNamesWhere(CMS.DataEngine.DataQuerySettings,System.String[],CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Combines given original WHERE condition with the WHERE condition generated for excluding specified objects.
            </summary>
            <param name="settings">Query settings</param>
            <param name="excludedNames">Names which should be excluded</param>
            <param name="objectTypeInfo">ObjectTypeInfo to provide type information of code name and display name columns</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetExportSelectionColumns(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Returns the list of columns needed for export selection.
            </summary>
            <param name="infoObj">Info object for which to get the columns</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetDependencyColumnNames(System.String,System.String)">
            <summary>
            Get dependingObjectType dependencies: 1. parent ID column, 2. site ID column, 3. list of object dependencies where dependency object type is dependsOnObjectType object type. 
            </summary>
            <param name="dependingObjectType">Depending object type</param>
            <param name="dependsOnObjectType">Depends on object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.AddDependingObjectTypes(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds depending object types to the list.
            </summary>
            <param name="list">Object list</param>
            <param name="objectType">Object type</param>
            <param name="dependingType">Depending type</param>
            <param name="child">Process also child types</param>
            <param name="binding">Process also binding types</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetSiteBindingObject(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Gets the site binding object for specified info object.
            </summary>
            <param name="infoObj">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetObjectFriendlyName(System.String)">
            <summary>
            Returns translated name of object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.BuildFullName(System.String,System.String,System.String)">
            <summary>
            Builds the full name from the given names.
            </summary>
            <param name="first">First name</param>
            <param name="second">Second name</param>
            <param name="separator">Separator</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.ParseFullName(System.String,System.String@,System.String@,System.String)">
            <summary>
            Parses the full name in format "something.whatewer.abc" so that "something.whatever" is considered the first part, and "abc" second part.
            </summary>
            <param name="fullName">Given full name</param>
            <param name="firstPart">First part</param>
            <param name="secondPart">Second part</param>
            <param name="delimiter">Fullname delimiter</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetParentIdColumn(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets the parent ID column for the given child type in parent type
            </summary>
            <param name="childTypeInfo">Child type info</param>
            <param name="parentTypeInfo">Parent type info</param>
            <exception cref="T:System.InvalidOperationException">Thrown when parent object is not defined or could not be discovered.</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetOtherBindingParentIdColumn(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets the parent ID column for the given binding type info for the direction of other binding (indirect parent)
            </summary>
            <param name="bindingTypeInfo">Binding type info</param>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHelper.GetSerializedData(System.Runtime.Serialization.SerializationInfo,System.String,System.Type,System.Object)">
            <summary>
            Tries to retrieve a value from SerializationInfo store.
            Returns default value if an item with given name was not found.
            </summary>
            <param name="info">Object info</param>
            <param name="itemName">Name of the deserialized item</param>
            <param name="dataType">Data type</param>
            <param name="defaultValue">Value to return in case item with given name was not found</param>
        </member>
        <member name="T:CMS.DataEngine.BaseCollectionSettings">
            <summary>
            Settings for the base object collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Index">
            <summary>
            Index of the collection in repository
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Name">
            <summary>
            Name of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.ObjectTypeInternal">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.NiceName">
            <summary>
            Nice name of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.WhereCondition">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.DynamicWhere">
            <summary>
            Dynamic where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.OrderBy">
            <summary>
            Order by clause
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.TopN">
            <summary>
            Top N items to get
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.Columns">
            <summary>
            Columns to get from database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.NameColumn">
            <summary>
            Name column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BaseCollectionSettings.SiteID">
            <summary>
            Site ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BaseCollectionSettings.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Collection name</param>
        </member>
        <member name="T:CMS.DataEngine.CombinedInfoObjectCollection">
            <summary>
            Collection that combines several info object collections of specific type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedInfoObjectCollection.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CombinedInfoObjectCollection`2">
            <summary>
            Collection that combines several info object collections of specific type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CombinedInfoObjectCollection`2.mCollections">
            <summary>
            List of inner collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CombinedInfoObjectCollection`2.Collections">
            <summary>
            List of inner collections.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedInfoObjectCollection`2.Add(`0)">
            <summary>
            Adds the collection to the combined collection.
            </summary>
            <param name="collection">Collection to add</param>
        </member>
        <member name="M:CMS.DataEngine.CombinedInfoObjectCollection`2.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedInfoObjectCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator over the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CombinedInfoObjectCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator over the collection.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CollectionPropertyTransformation`1">
            <summary>
            Property transformation for a collection. Enumerates the properties of the collection objects and does transformation according to that property.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CollectionPropertyTransformation`1.mCachedResults">
            <summary>
            Cached results of the transformation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.CacheResults">
            <summary>
            If true, the results of the transformation are cached
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.CaseSensitive">
            <summary>
            If true, the transformation is case sensitive (default is case insensitive)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.ParentCollection">
            <summary>
            Parent collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.Transformation">
            <summary>
            Transformation function
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.PropertiesTransformation">
            <summary>
            Transformation function for list of properties
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyTransformation`1.#ctor(CMS.DataEngine.IInfoObjectCollection,System.Func{CMS.DataEngine.IInfoObjectCollection,System.String,`0},System.Func{CMS.DataEngine.IInfoObjectCollection,System.Collections.Generic.List{System.String}})">
            <summary>
            Constructor
            </summary>
            <param name="collection">Parent collection</param>
            <param name="transformation">Transformation function</param>
            <param name="propertiesTransformation">Transformation to get list of properties</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyTransformation`1.GetProperty(System.String)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyTransformation`1.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Interface to access collections through string indexers by name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyTransformation`1.Item(System.String)">
            <summary>
            Interface to access collections through string indexers by name
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CollectionPropertyWrapper">
            <summary>
            Base class for the collection property wrapper
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CollectionPropertyWrapper`1">
            <summary>
            Wrapper that transforms the collection to values of its object properties
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Collection">
            <summary>
            Collection to wrap
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.PropertyName">
            <summary>
            Property name to extract
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Item(System.String)">
            <summary>
            Returns the property of an object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Item(System.Int32)">
            <summary>
            Gets or sets the object on specific index.
            </summary>
            <param name="index">Object index to get</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.#ctor(CMS.DataEngine.IInfoObjectCollection{`0},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="collection">Collection to wrap</param>
            <param name="propertyName">Property to extract</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.GetProperty(`0)">
            <summary>
            Gets the property value for the given object
            </summary>
            <param name="obj">Obj from which to take the property</param>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the general enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CollectionPropertyWrapper`1.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.CollectionPropertyWrapper`1.CMS#Base#IIndexable#Item(System.Int32)">
            <summary>
            Integer indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectProperty">
            <summary>
            Object property wrapper
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectProperty.mValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectProperty.PropertyName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectProperty.Object">
            <summary>
            Parent object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.#ctor(System.Object)">
            <summary>
            Constructor - Anonymous object property
            </summary>
            <param name="value">Property value</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.#ctor(CMS.Base.IDataContainer,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="infoObj">Info object</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectProperty.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.ToString">
            <summary>
            Converts the object value to string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectProperty.InjectValue(System.Object)">
            <summary>
            Injects the specified value to the property without modifying the object
            </summary>
            <param name="value">Value to inject</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoDataSet">
            <summary>
            InfoDataSet interface
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoDataSet.GetNewObject(System.Data.DataRow)">
            <summary>
            Gets new instance of the object hosted in this DataSet
            </summary>
            <param name="dr">Data row with the source data</param>
        </member>
        <member name="T:CMS.DataEngine.InfoDataSet`1">
            <summary>
            CMS DataSet class. Enhancement to DataSet to provide strongly typed collection side-by-side with the data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoDataSet`1.mObject">
            <summary>ct
            Info object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoDataSet`1.mItems">
            <summary>
            Items in the DataSet
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoDataSet`1.Object">
            <summary>
            Info object instance the provider is working with.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoDataSet`1.Items">
            <summary>
            Items in the DataSet
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoDataSet`1.IsReadOnly">
            <summary>
            If true, the dataset is cached (not allowed to modify, must be cloned)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.#ctor(System.Data.DataSet)">
            <summary>
            Constructor, creates new DataSet using data from the given DataSet.
            Removes data from the original data set.
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.#ctor(`0[])">
            <summary>
            Constructor
            </summary>
            <param name="items">Source items from which the DataSet will be created</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.NewCollection">
            <summary>
            Creates new collection of the objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.Clone">
            <summary>
            Clones the DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.GetNewObject(System.Data.DataRow)">
            <summary>
            Gets new instance of the object hosted in this DataSet
            </summary>
            <param name="dr">Data row with the source data</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.AddItems(`0[])">
            <summary>
            Adds the items to the data set
            </summary>
            <param name="items">Items to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.CreateEmptyDataSet">
            <summary>
            Creates the empty DataSet based on the current type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.GetEnumerator">
            <summary>
            Gets the strongly typed enumerator for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.GetObjectEnumerator">
            <summary>
            Gets the object enumerator for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoDataSet`1.CMS#DataEngine#IInfoDataSet#GetNewObject(System.Data.DataRow)">
            <summary>
            Gets new instance of the object hosted in this DataSet
            </summary>
            <param name="dr">Data row with the source data</param>
        </member>
        <member name="T:CMS.DataEngine.FullNameInfoObjectCollection`1">
            <summary>
            Collection of GeneralizedInfos indexed by full name of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection`1.#ctor(System.String,System.Func{`0,System.String})">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.FullNameInfoObjectCollection`1"/>.
            </summary>
            <param name="objectType">Object type</param>
            <param name="nameTransformation">Transformation function for object to name translation</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nameTransformation"/></exception>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection`1.GetObjectName(`0)">
            <summary>
            Gets the unique object name from the given object.
            </summary>
            <param name="infoObj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection`1.GetNameWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given object name.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.FullNameInfoObjectCollection`1.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BindingCollection">
            <summary>
            Info collection of object bindings
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Add(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Remove(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.GetTargetObjectId(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets the target object ID for this collection
            </summary>
            <param name="infoObj">Object to process</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Add(System.Int32[])">
            <summary>
            Adds given bindings to the collection. Supported only for collections with parent defined. Returns newly created binding objects.
            </summary>
            <param name="bindingIds">Binding IDs to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Remove(System.Int32[])">
            <summary>
            Removes given bindings from the collection. Supported only for collections with parent defined. Returns removed binding objects.
            </summary>
            <param name="bindingIds">Binding IDs to remove</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Add(System.String[])">
            <summary>
            Adds given bindings to the collection. Supported only for collections with parent defined, and target object having code name column. Returns newly created binding objects.
            </summary>
            <param name="bindingCodeNames">Binding code names to add</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.Remove(System.String[])">
            <summary>
            Removes given bindings from the collection. Supported only for collections with parent defined, and target object having code name column. Returns removed binding objects.
            </summary>
            <param name="bindingCodeNames">Binding code names to remove</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.AddBinding(System.String,System.Int32)">
            <summary>
            Adds a new binding
            </summary>
            <param name="bindingColumn">Binding column</param>
            <param name="bindingId">Binding ID</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.RemoveBinding(System.String,System.Int32)">
            <summary>
            Removes the binding
            </summary>
            <param name="bindingColumn">Binding column</param>
            <param name="bindingId">Binding ID</param>
        </member>
        <member name="M:CMS.DataEngine.BindingCollection.GetBindingColumn(System.String@)">
            <summary>
            Gets the binding column and object type
            </summary>
            <param name="targetObjectType">Returns target object type</param>
        </member>
        <member name="T:CMS.DataEngine.BindingRepository">
            <summary>
            Specialized repository for binding object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BindingRepository.Sites">
            <summary>
            Site bindings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BindingRepository.Item(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="M:CMS.DataEngine.BindingRepository.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parentObject">Parent object</param>
        </member>
        <member name="M:CMS.DataEngine.BindingRepository.#ctor(CMS.Base.ICMSStorage)">
            <summary>
            Constructor.
            </summary>
            <param name="parentStorage">Parent storage object</param>
        </member>
        <member name="M:CMS.DataEngine.BindingRepository.NewCollectionInternal(System.String)">
            <summary>
            Creates a new collection
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.OtherBindingCollection">
            <summary>
            Info collection of object other bindings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OtherBindingCollection.BoundObject">
            <summary>
            Bound object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.#ctor(System.String,CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="boundObject">Bound object</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.EnsureObjectValues(CMS.DataEngine.BaseInfo)">
            <summary>
            Ensures the proper values for the given object
            </summary>
            <param name="item">Item in which ensure the values</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingCollection.GetBindingColumn(System.String@)">
            <summary>
            Gets the binding column and object type
            </summary>
            <param name="targetObjectType">Returns target object type</param>
        </member>
        <member name="T:CMS.DataEngine.OtherBindingRepository">
            <summary>
            Specialized repository for binding object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OtherBindingRepository.BoundObject">
            <summary>
            Bound object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OtherBindingRepository.Item(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingRepository.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="boundObject">Parent object</param>
        </member>
        <member name="M:CMS.DataEngine.OtherBindingRepository.NewCollectionInternal(System.String)">
            <summary>
            Creates a new collection
            </summary>
            <param name="type">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.EmptyCollection`1">
            <summary>
            Empty info object collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.EmptyCollection`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IInfoObjectCollection">
            <summary>
            Interface for info object collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.Name">
            <summary>
            Collection name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.LoadBinaryData">
            <summary>
            Gets or sets the value which indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.Where">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.Columns">
            <summary>
            Columns to get.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.OrderByColumns">
            <summary>
            Columns list of SQL order by expression (e.g.: 'UserName, UserID DESC')
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.TopN">
            <summary>
            Select top N objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.EnforceReadOnlyDataAccess">
            <summary>
            If true, the read only access to the data is enforced within the transaction.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.UseDefaultCacheDependencies">
            <summary>
            If true, the collection uses default cache dependencies to flush it's content
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.SiteID">
            <summary>
            Site ID to filter the collection to a particular site
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.IsLastVersion">
            <summary>
            If true, the document is the last version (retrieved using DocumentHelper.GetDocument).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.NameColumn">
            <summary>
            Name column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.SourceData">
            <summary>
            Source data for the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.UseObjectTypeCondition">
            <summary>
            If true, the collection uses the type condition to get the data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.AllowPaging">
            <summary>
            If true, the paging of the data is allowed (data is loaded in batches).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.CheckLicense">
            <summary>
            If true, the collection check license when getting data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.TypeInfo">
            <summary>
            Type info for the collection object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.DynamicWhereCondition">
            <summary>
            Dynamic where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.ParentObject">
            <summary>
            Parent object. Instance of object which contains this collection as it's inner field. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.ItemsAsFields">
            <summary>
            Fields wrappers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.FieldsAsObjects">
            <summary>
            Related objects wrappers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.DisplayNames">
            <summary>
            Collection of the object display names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.CodeNames">
            <summary>
            Collection of the object code names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.GUIDs">
            <summary>
            Collection of the object GUIDs
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection.IDs">
            <summary>
            Collection of the object IDs
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.Disconnect">
            <summary>
            Disconnects the collection from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.ClearCache">
            <summary>
            Clears the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.CloneCollection">
            <summary>
            Creates the clone of this collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.GetFieldsAsObjects(System.String)">
            <summary>
            Gets the collection of objects that are referenced by the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.As``1">
            <summary>
            Makes a wrapper of the collection with specified type of the items.
            </summary>
            <typeparam name="TType">Target type of the items</typeparam>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.GetItemsAsFields(System.String)">
            <summary>
            Returns the updatable collection of fields of collection items
            </summary>
            <param name="propertyName">Name of the properties to extract</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.Load(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Clears the data in the collection and loads objects from the given list.
            </summary>
            <param name="objects">Objects data to load</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.ChangeParent(CMS.DataEngine.BaseInfo,CMS.Base.ICMSStorage)">
            <summary>
            Changes the parent of the collection
            </summary>
            <param name="parentObject">Parent object</param>
            <param name="parentStorage">Parent storage</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.Add(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Object to add</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection.Add(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoObjectCollection`1">
            <summary>
            Interface for generic info object collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection`1.FirstItem">
            <summary>
            Returns the first item of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IInfoObjectCollection`1.LastItem">
            <summary>
            Returns the last item of the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection`1.GetSubsetWhereNotEmpty(System.String)">
            <summary>
            Returns the clone of the collection with specified column not being empty
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectCollection`1.GetSubsetWhere(System.String)">
            <summary>
            Returns the clone of the collection with specified where condition applied
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="T:CMS.DataEngine.IInfoObjectRepository`1">
            <summary>
            Interface for generic info object repository of collections
            </summary>
            <typeparam name="TCollection"></typeparam>
        </member>
        <member name="M:CMS.DataEngine.IInfoObjectRepository`1.NewCollection(System.String)">
            <summary>
            Creates new collection for the data.
            </summary>
            <param name="type">Type of the collection</param>
        </member>
        <member name="T:CMS.DataEngine.InfoCollectionSettings">
            <summary>
            Settings for the info object collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCollectionSettings.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCollectionSettings.ObjectTypeInternal">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoCollectionSettings.CollectionFactory">
            <summary>
            Factory to provide new collection object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoCollectionSettings.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Collection name</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectCollection">
            <summary>
            General info object collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.New(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectCollection`1">
            <summary>
            Generic info object collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mDisconnectedCount">
            <summary>
            Number of disconnected references for this collection 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mIsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mName">
            <summary>
            Collection name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mInstanceGuid">
            <summary>
            Instance GUID
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mObject">
            <summary>
            Object instance of specified type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mParentObject">
            <summary>
            Parent object instance
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mWhere">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mOrderBy">
            <summary>
            Order by expression.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mFieldsAsObjects">
            <summary>
            Related objects wrappers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mItemsAsFields">
            <summary>
            Fields wrappers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mCacheCallbackRegistered">
            <summary>
            Flag indicating if the cache callback is already registered
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mUseDefaultCacheDependencies">
            <summary>
            If true, the collection uses default cache dependencies to flush it's content
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mCount">
            <summary>
            Total number of items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mCustomCacheDependencies">
            <summary>
            List of custom cache dependencies
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mNameColumn">
            <summary>
            Name column
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mLoadBinaryData">
            <summary>
            Indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mAllowPaging">
            <summary>
            If true, the paging of the data is allowed (data is loaded in batches).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mItems">
            <summary>
            Items collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mObjectsByName">
            <summary>
            Objects by name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mCountDifference">
            <summary>
            Difference in count of the items from data source and current number of items
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.lockObject">
            <summary>
            Object for locking this instance context
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mRemovedObject">
            <summary>
            Removed object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mDeletedItems">
            <summary>
            Deleted items removed from the collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mNewItems">
            <summary>
            New items added to the collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mEnumerators">
            <summary>
            Number of enumerators accessing the items collection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mClearAfterEnumeration">
            <summary>
            If true, the collection will be cleared after the last enumeration finishes
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mProvider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.mExpression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectCollection`1.ObjectInitializer">
            <summary>
            Provides a way how to initialize the object instance based on given data 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.EnforceReadOnlyDataAccess">
            <summary>
            If true, the read only access to the data is enforced within the transaction.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.IsLastVersion">
            <summary>
            If true, the document is the last version (retrieved using DocumentHelper.GetDocument).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.TopN">
            <summary>
            Select top N objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Columns">
            <summary>
            Columns to get.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Where">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.DynamicWhereCondition">
            <summary>
            Dynamic where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ItemType">
            <summary>
            Result type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.IsOffline">
            <summary>
            Returns true, if the collection is offline (not backed up by the database but by the source data)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.FirstItem">
            <summary>
            Returns the first item of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.LastItem">
            <summary>
            Returns the last item of the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Expression">
            <summary>
            Query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Provider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.FieldsAsObjects">
            <summary>
            Related objects wrappers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ItemsAsFields">
            <summary>
            Fields wrappers
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.DisplayNames">
            <summary>
            Collection of the object display names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.CodeNames">
            <summary>
            Collection of the object code names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.GUIDs">
            <summary>
            Collection of the object GUIDs
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.IDs">
            <summary>
            Collection of the object IDs
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.IsDisconnected">
            <summary>
            Returns true if the collection is disconnected from the data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ParentObject">
            <summary>
            Parent object. Instance of object which contains this collection as it's inner field. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ParentStorage">
            <summary>
            Parent storage
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Items">
            <summary>
            Returns the items collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.DeletedItems">
            <summary>
            Returns the items collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.NewItems">
            <summary>
            Returns the items collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.RemovedObject">
            <summary>
            Defines the removed object within collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ObjectsByName">
            <summary>
            Objects by name collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.OrderByColumns">
            <summary>
            Order by expression.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.TypeInfo">
            <summary>
            Type info for the collection object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Name">
            <summary>
            Collection name. Returns object type if name is not defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.NameColumn">
            <summary>
            Name column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.AutomaticNameColumn">
            <summary>
            If true, the automatic name column is used within this collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.AllowPaging">
            <summary>
            If true, the paging of the data is allowed (data is loaded in batches).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.PageSize">
            <summary>
            Page size for loading of the items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.SourceData">
            <summary>
            Source data for the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.LoadBinaryData">
            <summary>
            Gets or sets the value which indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.SiteID">
            <summary>
            Site ID to filter the collection to a particular site
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.SortNames">
            <summary>
            If true, the names in enumeration are sorted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.ItemsHaveNames">
            <summary>
            Returns true if the items in the collection have names
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.InternalCount">
            <summary>
            Internal count of the items
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.UseDefaultCacheDependencies">
            <summary>
            If true, the collection uses default cache dependencies to flush it's content
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.CheckLicense">
            <summary>
            If true, the collection check license when getting data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.UseObjectTypeCondition">
            <summary>
            If true, the collection uses the type condition to get the data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CloneCollection">
            <summary>
            Creates the clone of this collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.#ctor(System.Data.DataSet)">
            <summary>
            Constructor. Creates a static collection populated from DataSet
            </summary>
            <param name="sourceData">Source DataSet</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.InitObjectType">
            <summary>
            Inits the correct object type from default object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Init(System.String)">
            <summary>
            Initializes the collection to use specific object type
            </summary>
            <param name="objectType">Object type to use</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Disconnect">
            <summary>
            Disconnects the collection from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Reconnect">
            <summary>
            Reconnects the collection to the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetEmptyObject">
            <summary>
            Gets an empty object for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.MakeEmpty">
            <summary>
            Makes the collection empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CreateQueryProvider">
            <summary>
            Creates a LINQ query provider for this collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RegisterColumns">
            <summary>
            Registers the Columns of this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.ChangeParent(CMS.DataEngine.BaseInfo,CMS.Base.ICMSStorage)">
            <summary>
            Changes the parent of the collection
            </summary>
            <param name="parentObject">Parent object</param>
            <param name="parentStorage">Parent storage</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CreateNewObject(System.Data.DataRow)">
            <summary>
            Creates new instance of the encapsulated object.
            </summary>
            <param name="dr">DataRow with the data</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetObjectName(System.Object)">
            <summary>
            Gets the unique object name from the given object.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetObjectName(`0)">
            <summary>
            Gets the unique object name from the given object.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetCompleteWhereCondition">
            <summary>
            Gets the complete where condition for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetNameWhereCondition(System.String)">
            <summary>
            Gets the where condition for the given object name.
            </summary>
            <param name="name">Object name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetObjectByName(System.String)">
            <summary>
            Gets the object by its name.
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetObjectByNameInternal(System.String)">
            <summary>
            Gets the object by its name, internal representation that gets data from database
            </summary>
            <param name="name">Name of the object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetData(CMS.DataEngine.IWhereCondition,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the data for the collection.
            </summary>
            <param name="where">Where condition</param>
            <param name="offset">Starting offset for the data</param>
            <param name="maxRecords">Maximum number of records to get</param>
            <param name="totalRecords">Returning total number of records</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CopyPropertiesTo(CMS.DataEngine.IInfoObjectCollection)">
            <summary>
            Copies the properties of this collection to the other collection
            </summary>
            <param name="targetCollection">Target collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CopyItemsTo(CMS.DataEngine.IInfoObjectCollection)">
            <summary>
            Copies the items of this collection to the other collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.EnsureObjectValues(CMS.DataEngine.BaseInfo)">
            <summary>
            Ensures the proper values for the given object
            </summary>
            <param name="item">Item in which ensure the values</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Clear">
            <summary>
            Clears the current items in the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.SubmitChanges">
            <summary>
            Submits the changes in the collection to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Add(CMS.DataEngine.BaseInfo[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Add(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Object to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Remove(`0[])">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="objects">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the specified object from the collection.
            </summary>
            <param name="objects">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RemoveItem(System.Collections.Generic.List{`0},`0)">
            <summary>
            Removes the item from the given list of items
            </summary>
            <param name="items">List of items</param>
            <param name="obj">Object to remove</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.ValidateItem(CMS.DataEngine.BaseInfo,System.Boolean)">
            <summary>
            Validates whether the item can be member of the collection (collection can work with it). Returns true if item is valid.
            </summary>
            <param name="item">Item to validate</param>
            <param name="throwException">If true, the method throws exception in case validation fails</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.As``1">
            <summary>
            Makes a wrapper of the collection with specified type of the items.
            </summary>
            <typeparam name="TType">Target type of the items</typeparam>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetItemsAsFields(System.String)">
            <summary>
            Returns the updatable collection of fields of collection items
            </summary>
            <param name="propertyName">Name of the properties to extract</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetFieldsAsObjects(System.String)">
            <summary>
            Gets the collection of objects that are referenced by the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetFieldsAsObjects(System.String,System.String)">
            <summary>
            Gets the collection of objects that are referenced by the given property
            </summary>
            <param name="propertyName">Property name</param>
            <param name="objectType">Object type of the target objects</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.Load(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Clears the data in the collection and loads objects from the given list.
            </summary>
            <param name="objects">Objects data to load</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RegisterProperties(System.Collections.Generic.List{System.String})">
            <summary>
            Registers supported properties
            </summary>
            <param name="properties">List with supported properties</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetSubsetOrderBy(System.String)">
            <summary>
            Returns the clone of the collection with specified order by applied
            </summary>
            <param name="orderBy">Order By expression</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.ToString">
            <summary>
            Provides a string representation of the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetObjectToCheck">
            <summary>
            Gets an object for which to perform the permissions check.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.AddCacheDependencies(System.String[])">
            <summary>
            Adds the given list of cache dependencies to the collection
            </summary>
            <param name="keys">Keys to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CacheDependenciesChanged">
            <summary>
            Ensures the actions when the cache dependencies have changed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RemoveClearCacheCallback">
            <summary>
            Removes the callback to clear the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.RegisterClearCacheCallback">
            <summary>
            Registers the callback to clear the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetCacheCallbackKey">
            <summary>
            Gets the key for the cache callback
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetCacheDependencyKeys">
            <summary>
            Gets the list of cache dependency keys on which this collection depends
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.ClearCache">
            <summary>
            Clears the collection cache
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.ClearCacheCallback(CMS.DataEngine.IInfoObjectCollection,System.Object)">
            <summary>
            Clears the collection cache
            </summary>
            <param name="col">Target collection</param>
            <param name="parameter">Callback parameter</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetItem(System.Int32)">
            <summary>
            Gets the item on the specified index.
            </summary>
            <param name="index">Item index to get</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetItemInternal(System.Int32)">
            <summary>
            Gets the item on the specified index.
            </summary>
            <param name="index">Item index to get</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.EnsureItems(System.Int32)">
            <summary>
            Ensures the specified number of items in the item list.
            </summary>
            <param name="count">Number of items</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.IsRemoved(`0)">
            <summary>
            Returns true if the given value  represents a removed object
            </summary>
            <param name="obj">Object to check</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetSubsetWhereNotEmpty(System.String)">
            <summary>
            Returns the clone of the collection with specified column not being empty
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetSubsetWhere(System.String)">
            <summary>
            Returns the clone of the collection with specified where condition applied
            </summary>
            <param name="whereCondition">Where condition</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the object on specific index.
            </summary>
            <param name="index">Object index to get</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.CMS#Base#IIndexable#Item(System.Int32)">
            <summary>
            Object indexer
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectCollection`1.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Object indexer
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the general enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetEnumerator">
            <summary>
            Gets the  enumerator for the collection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.GetEnumeratorInternal">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectCollection`1.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectRepository">
            <summary>
            Repository for info objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository.ParentObject">
            <summary>
            Parent object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository.IsDisconnected">
            <summary>
            Returns true if the repository is disconnected from the data source
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.#ctor(CMS.Base.ICMSStorage)">
            <summary>
            Constructor.
            </summary>
            <param name="parentStorage">Parent storage object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.#ctor(CMS.DataEngine.BaseInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="parentObject">Parent object</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.LoadCollection(CMS.DataEngine.InfoCollectionSettings)">
            <summary>
            Loads the given collection.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.NewCollection(System.String)">
            <summary>
            Creates new collection for the data.
            </summary>
            <param name="type">Object type of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.NewCollectionInternal(System.String)">
            <summary>
            Creates a new collection
            </summary>
            <param name="type">Collection type</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.NewCombinedCollection">
            <summary>
            Creates new combined collection for the data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.AddCollection``1(CMS.DataEngine.InfoCollectionSettings)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository.AddCollection(System.String)">
            <summary>
            Registers the given collection of objects within the repository. Includes all the objects of given type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectRepository`3">
            <summary>
            Repository for info objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectRepository`3.LoadCollectionHandler">
            <summary>
            Delegate to define the handle to load the collection of this type.
            </summary>
            <param name="repository">Repository into which the collection loads</param>
            <param name="name">Collection name</param>
        </member>
        <member name="E:CMS.DataEngine.InfoObjectRepository`3.OnLoadCollection">
            <summary>
            Fires when the collection with specified name is requested.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mCollections">
            <summary>
            Table of collections [name -> CollectionType]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mNiceNames">
            <summary>
            Translation of collection nice names to a normal names [niceName -> name]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mAll">
            <summary>
            Collection of all underlying objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mCollectionsList">
            <summary>
            List of all collections (sorted by the order in which the collections were added).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mCollectionSettings">
            <summary>
            Table of collection settings [name -> InfoCollectionSettings]
            </summary>
            <seealso cref="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsLock"/>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mCollectionSettingsByIndex">
            <summary>
            Table of collection settings by index [index -> InfoCollectionSettings]
            </summary>
            <seealso cref="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsLock"/>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mProperties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mLoadBinaryData">
            <summary>
            Indicates whether to load binary data into the collections of the repository.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mDisconnectedCount">
            <summary>
            Number of disconnected references for this collection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mIsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="F:CMS.DataEngine.InfoObjectRepository`3.mDynamicNames">
            <summary>
            List of dynamic names of the collections
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsLock">
            <summary>
            Gets lock object for synchronization of modification of <see cref="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettings"/> and <see cref="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsByIndex"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.CollectionsList">
            <summary>
            List of all collections (sorted by the order in which the collections were added).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.Collections">
            <summary>
            Table of collections [name -> CollectionType]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettings">
            <summary>
            Table of collection settings [name -> InfoCollectionSettings]
            </summary>
            <seealso cref="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsLock"/>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsByIndex">
            <summary>
            Table of collection settings by index [index -> InfoCollectionSettings]
            </summary>
            <seealso cref="P:CMS.DataEngine.InfoObjectRepository`3.CollectionSettingsLock"/>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.GetDynamicNames">
            <summary>
            Function that provides the dynamic names of collections to the repository
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.DynamicNames">
            <summary>
            List of the dynamic names of the collections
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.ParentStorage">
            <summary>
            Parent storage
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.AllowNiceNames">
            <summary>
            If true, the repository allows nice names of the collections, e.g. for "CMS.User" uses "Users"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.IsDisconnected">
            <summary>
            Returns true if this collection is disconnected from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.LoadBinaryData">
            <summary>
            Gets or sets the value which indicates whether to load binary data into the collections.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.Count">
            <summary>
            Returns the number of items.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.CollectionNames">
            <summary>
            Returns list of collection names in the repository.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.Item(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.Item(System.Int32)">
            <summary>
            Returns the collection of objects.
            </summary>
            <param name="index">Index of the collection</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.All">
            <summary>
            All items from all underlying collections.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.LoadCollection(`2)">
            <summary>
            Loads the given collection.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.NewCollection(System.String)">
            <summary>
            Creates new collection for the data.
            </summary>
            <param name="type">Type of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.NewCombinedCollection">
            <summary>
            Creates new combined collection for the data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.Disconnect">
            <summary>
            Disconnects the collections from the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.Reconnect">
            <summary>
            Reconnects the collection to the database
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetNicePropertyName(System.String)">
            <summary>
            Gets the property name for the original name of the collection
            </summary>
            <param name="name">Original name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.RegisterNiceName(System.String,System.String)">
            <summary>
            Registers the nice name of the collection
            </summary>
            <param name="name">Name</param>
            <param name="niceName">Nice name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.ReplaceCollection(`2)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.AddCollection(`2)">
            <summary>
            Registers the given collection of objects within the repository.
            </summary>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.SubmitChanges">
            <summary>
            Submits the changes to the database.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.Add(`1[])">
            <summary>
            Adds new object to the collection.
            </summary>
            <param name="objects">Objects to add</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the general enumerator for the collection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetProperty(System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetCollection(System.String)">
            <summary>
            Returns the collection of objects indexed by object type, e.g. "cms.user".
            </summary>
            <param name="name">Name of the inner collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetCollection(System.Int32)">
            <summary>
            Returns the collection of objects.
            </summary>
            <param name="index">Index of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetCollectionResult(System.Int32)">
            <summary>
            Returns the collection of objects from Collection list. Does not load collections
            </summary>
            <param name="index">Index of the collection</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.StoreCollection(`0,CMS.DataEngine.InfoCollectionSettings)">
            <summary>
            Stores the collection into inner lists
            </summary>
            <param name="collection">Collection to store</param>
            <param name="settings">Collection settings</param>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.SetupCollection(`0,`2)">
            <summary>
            Sets up the collection using the given settings
            </summary>
            <param name="collection">Collection to set</param>
            <param name="setttings">Collection settings</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.CMS#Base#INameIndexable#Item(System.String)">
            <summary>
            Returns the object registered by the specific name.
            </summary>
            <param name="name">Object name (indexer)</param>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.SortNames">
            <summary>
            If true, the names in enumeration are sorted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.InfoObjectRepository`3.ItemsHaveNames">
            <summary>
            Returns true if the items in the collection have names
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectRepository`3.GetObjectName(System.Object)">
            <summary>
            Returns the name of the given object
            </summary>
            <param name="obj">Object for which to get the name</param>
        </member>
        <member name="T:CMS.DataEngine.CreateSearchFieldEventArgs">
            <summary>
            Arguments of event represented by <see cref="T:CMS.DataEngine.CreateSearchFieldHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CreateSearchFieldEventArgs.SearchField">
            <summary>
            Search field created by the factory.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CreateSearchFieldEventArgs.CreateOption">
            <summary>
            Creation process option.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CreateSearchFieldFromSettingsEventArgs">
            <summary>
            Arguments of event represented by <see cref="T:CMS.DataEngine.CreateSearchFieldFromSettingsHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CreateSearchFieldFromSettingsEventArgs.SearchField">
            <summary>
            Search field created by the factory.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CreateSearchFieldFromSettingsEventArgs.SearchSettings">
            <summary>
            Search settings for which to create the field.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.CreateSearchFieldFromSettingsHandler">
            <summary>
            Handler for event raised when search field is being created from search settings.
            </summary>
            <seealso cref="M:CMS.DataEngine.SearchFieldFactory.CreateFromSettings(CMS.DataEngine.SearchSettingsInfo,System.Type)"/>
        </member>
        <member name="T:CMS.DataEngine.CreateSearchFieldHandler">
            <summary>
            Handler for event raised when search field is being created.
            </summary>
            <seealso cref="M:CMS.DataEngine.SearchFieldFactory.Create(System.String,System.Type,CMS.DataEngine.CreateSearchFieldOption)"/>
        </member>
        <member name="T:CMS.DataEngine.IsContentFieldEventArgs">
            <summary>
            Argument of event represented by <see cref="T:CMS.DataEngine.IsContentFieldHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsContentFieldEventArgs.Result">
            <summary>
            Indicates whether field is considered a content field. Values of content fields are aggregated into a designated index column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsContentFieldEventArgs.Index">
            <summary>
            Index for which to indicate whether field represented by <see cref="P:CMS.DataEngine.IsContentFieldEventArgs.SearchSettings"/> is considered a content field, or null to perform index agnostic detection (i.e. whether field is considered a content field in any index type).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsContentFieldEventArgs.SearchSettings">
            <summary>
            Search settings representing field for which to detect whether it is considered a content field.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IsContentFieldHandler">
            <summary>
            Handler for event raised when field is being decided whether it is a content field.
            </summary>
            <seealso cref="M:CMS.DataEngine.SearchFieldsHelper.IsContentField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)"/>
        </member>
        <member name="T:CMS.DataEngine.IsIndexFieldEventArgs">
            <summary>
            Argument of event represented by <see cref="T:CMS.DataEngine.IsIndexFieldHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsIndexFieldEventArgs.Result">
            <summary>
            Indicates whether field is to be added to search index.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsIndexFieldEventArgs.Index">
            <summary>
            Index for which to indicate whether field represented by <see cref="P:CMS.DataEngine.IsIndexFieldEventArgs.SearchSettings"/> is an index field, or null to perform index agnostic detection (i.e. whether field is included in any index type).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsIndexFieldEventArgs.SearchSettings">
            <summary>
            Search settings representing field for which to detect whether it is an index field.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IsIndexFieldHandler">
            <summary>
            Handler for event raised when field is being decided whether it is an index field.
            </summary>
            <seealso cref="M:CMS.DataEngine.SearchFieldsHelper.IsIndexField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)"/>
        </member>
        <member name="T:CMS.DataEngine.IsTriggerFieldEventArgs">
            <summary>
            Argument of event represented by <see cref="T:CMS.DataEngine.IsTriggerFieldHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsTriggerFieldEventArgs.Result">
            <summary>
            Indicates whether field is index update trigger.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IsTriggerFieldEventArgs.SearchSettings">
            <summary>
            Search settings representing field for which to detect whether it is an index update trigger.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IsTriggerFieldHandler">
            <summary>
            Handler for event raised when field is being decided whether it is an index update trigger.
            </summary>
            <seealso cref="M:CMS.DataEngine.SearchFieldsHelper.IsTriggerField(CMS.DataEngine.SearchSettingsInfo)"/>
        </member>
        <member name="T:CMS.DataEngine.CreateSearchFieldOption">
            <summary>
            Represents creation option of a system search field.
            </summary>
            <seealso cref="T:CMS.DataEngine.SearchFieldFactory"/>
        </member>
        <member name="F:CMS.DataEngine.CreateSearchFieldOption.SearchableAndRetrievable">
            <summary>
            Denotes a field which must be possible to search for and retrieve from an index.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CreateSearchFieldOption.SearchableWithTokenizer">
            <summary>
            Denotes a field which must be possible to search for in an index. It is not necessary for the value to be retrievable from the index.
            Further processing of the field value, which provides 'smart' search (e.g. tokenization) is desired.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.CreateSearchFieldOption.SearchableAndRetrievableWithTokenizer">
            <summary>
            Denotes a field which must be possible to search for and retrieve from an index. Further processing of the field value, which provides 'smart' search (e.g. tokenization) is desired.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchFieldFactory">
            <summary>
            Factory for <see cref="T:CMS.DataEngine.ISearchField"/> objects allowing search engines to customize the flags of fields being created.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldFactory.Creating">
            <summary>
            An event raised upon <see cref="M:CMS.DataEngine.SearchFieldFactory.Create(System.String,System.Type,CMS.DataEngine.CreateSearchFieldOption)"/> call allowing to set the flags of search field being created.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldFactory.CreatingFromSettings">
            <summary>
            An event raised upon <see cref="F:CMS.DataEngine.SearchFieldFactory.CreatingFromSettings"/> call allowing to map the flags of search field being created.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchFieldFactory.Instance">
            <summary>
            Gets the <see cref="T:CMS.DataEngine.SearchFieldFactory"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldFactory.#ctor">
            <summary>
            Initializes a new factory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldFactory.SetLocalSearchFieldFlags(System.Object,CMS.DataEngine.CreateSearchFieldEventArgs)">
            <summary>
            Sets local search field flags (searchable and tokenized).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldFactory.MapLocalSearchFieldFlags(System.Object,CMS.DataEngine.CreateSearchFieldFromSettingsEventArgs)">
            <summary>
            Maps local search field flags (searchable and tokenized).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldFactory.Create(System.String,System.Type,CMS.DataEngine.CreateSearchFieldOption)">
            <summary>
            Creates a new search field based on <paramref name="createOption"/>.
            </summary>
            <param name="fieldName">Name of field to be created.</param>
            <param name="dataType">Data type of field.</param>
            <param name="createOption">Option indicating which type of field to create.</param>
            <returns>Search field for given option.</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldFactory.CreateFromSettings(CMS.DataEngine.SearchSettingsInfo,System.Type)">
            <summary>
            Creates a new search field from <paramref name="searchSettings"/>.
            </summary>
            <param name="searchSettings">Search settings from which to create the field.</param>
            <param name="dataType">Data type of field.</param>
            <returns>Search field from given search settings.</returns>
        </member>
        <member name="T:CMS.DataEngine.ISearchable">
            <summary>
            Interface for search.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchable.SearchType">
            <summary>
            Gets or sets the search object type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchDocument(CMS.DataEngine.ISearchIndexInfo)">
            <summary>
            Returns search document for index.
            </summary>
            <param name="index">Search index</param>
            <returns>Returns search document</returns>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchFields(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Returns search fields collection. When existing collection is passed as argument, fields will be added to that collection.
            When collection is not passed, new collection will be created and return.
            Collection will contain field values only when collection with StoreValues property set to true is passed to the method.
            When method creates new collection, it is created with StoreValues property set to false.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchImageUrl(System.String)">
            <summary>
            Returns URL for a search result item image.
            </summary>
            <param name="image">Image</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetSearchID">
            <summary>
            Gets the search item unique id.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchable.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param>
        </member>
        <member name="T:CMS.DataEngine.ISearchField">
            <summary>
            Represents search field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.DataType">
            <summary>
            Gets or sets the field type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.Analyzer">
            <summary>
            Explicit analyzer to process search field's value. 
            When null, default analyzer is used based on search index configuration. 
            </summary>
            <remarks>
            The analyzer property is used in Lucene search only. For Azure Search, specify the analyzer programmatically upon
            index definition or querying.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.Value">
            <summary>
            Field value. May be null when field is not initialized with it's value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchField.FlagNames">
            <summary>
            Gets a list of flag names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchField.GetFlag(System.String)">
            <summary>
            Gets value of a flag associated with <paramref name="name"/>.
            </summary>
            <param name="name">Name of the flag.</param>
            <returns>Value of flag <paramref name="name"/>. Returns false if flag does not exist.</returns>
            <seealso cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.TOKENIZED"/>
        </member>
        <member name="M:CMS.DataEngine.ISearchField.SetFlag(System.String,System.Boolean)">
            <summary>
            Sets value of a flag associated with <paramref name="name"/>.
            </summary>
            <param name="name">Name of the flag.</param>
            <param name="value">Value to associate with the flag.</param>
            <seealso cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.TOKENIZED"/>
        </member>
        <member name="T:CMS.DataEngine.ISearchFields">
            <summary>
            Search fields collection and field constants
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchFields.StoreValues">
            <summary>
            Indicates if field values will be retrieved and stored in collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchFields.Items">
            <summary>
            Search fields
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ISearchFields.Add(CMS.DataEngine.ISearchField,System.Func{System.Object})">
            <summary>
            Adds a new field to the collection. If the field already exists, it is updated (merged with existing one).
            When adding a content field and its value multiple times, the value is appended to the existing content field.
            </summary>
            <param name="searchField">Search field to be added to the collection.</param>
            <param name="getValueFunc">Function that returns value of the field.</param>
            <returns>The search field added.</returns>
        </member>
        <member name="M:CMS.DataEngine.ISearchFields.Get(System.String)">
            <summary>
            Returns requested field. Null when field doesn't exist.
            </summary>
            <param name="fieldName">Field name</param>
        </member>
        <member name="M:CMS.DataEngine.ISearchFields.PrepareContentValue(System.Object,System.Boolean)">
            <summary>
            Prepares value to add to content field.
            </summary>
            <param name="value">Value to add</param> 
            <param name="stripTags">Indicates whether tags should be stripped</param>
        </member>
        <member name="T:CMS.DataEngine.ISearchIndexInfo">
            <summary>
            Index info interface.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexSettings">
            <summary>
            Search index settings for current object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexType">
            <summary>
            Gets or sets the index type (documents, etc).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexBatchSize">
            <summary>
            Gets or sets the batch size for data loading.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexCodeName">
            <summary>
            Gets index code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ISearchIndexInfo.IndexProvider">
            <summary>
            Defines a provider which performs actions on search index.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchAnalyzerTypeEnum">
            <summary>
            Search analyzer type enum.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.SimpleAnalyzer">
            <summary>
            SimpleAnalyzer - divides text at non-letters, lowercase.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StopAnalyzer">
            <summary>
            StopAnalyzer - divides text at non-letters, use of stop words.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.WhiteSpaceAnalyzer">
            <summary>
            WhiteSpaceAnalyzer - divides text at whitespace, lowercase.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StandardAnalyzer">
            <summary>
            StandardAnalyzer - grammar based, lowecase, good for most European-language documents.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.KeywordAnalyzer">
            <summary>
            "Tokenizes" the entire stream as a single token. This is useful for data like zip codes, ids, and some product names.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.CustomAnalyzer">
            <summary>
            Custom analyzer.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.SubsetAnalyzer">
            <summary>
            Subset analyzer - whitespace, lowercase, searched text is processed as *word*.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StartsWithanalyzer">
            <summary>
            Starts with analyzer - whitespace, lowercase, searched text is processed as word*.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.SimpleWithStemmingAnalyzer">
            <summary>
            Simple analyzer with stemmer involved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.StopWithStemmingAnalyzer">
            <summary>
            Stop word analyzer with stemmer involved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchAnalyzerTypeEnum.WhitespaceWithStemmingAnalyzer">
            <summary>
            Whitespace analyzer with stemmer involved.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchDocument">
            <summary>
            Represents collection of field values for indexing.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchDocument.DOCUMENT_EXCLUDED_FROM_SEARCH_FIELD">
            <summary>
            Name of the field in the search document whose value defines if the search document should be included in an index.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocument.Names">
            <summary>
            Gets enumeration of field names contained in the search document.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.Add(System.String,System.Object)">
            <summary>
            Adds new field data to the search document.
            </summary>
            <param name="name">Name of field.</param>
            <param name="value">Field data.</param>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.Add(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adds new field data to the search document.
            </summary>
            <param name="name">Name of field.</param>
            <param name="value">Field data.</param>
            <param name="store">Indicates whether value should be stored in a retrievable representation. Considered only if index does not accept this information upon index definition.</param>
            <param name="tokenize">Indicates whether value should be tokenized. Considered only if index does not accept this information upon index definition.</param>
            <exception cref="T:System.ArgumentException">Thrown when filed of given <paramref name="name"/> is already present in the document.</exception>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.Contains(System.String)">
            <summary>
            Returns <c>true</c> if document contains column <paramref name="name"/>. <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.GetValue(System.String)">
            <summary>
            Gets value of a field.
            </summary>
            <param name="name">Name of the field to retrieve value for.</param>
            <returns>Value associated with field.</returns>
            <exception cref="T:System.ArgumentException">Thrown when field of given name does not exist.</exception>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.GetStore(System.String)">
            <summary>
            Gets store flag of a field.
            </summary>
            <param name="name">Name of the field to retrieve flag value for.</param>
            <returns>Store flag associated with field.</returns>
            <exception cref="T:System.ArgumentException">Thrown when field of given name does not exist.</exception>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.GetTokenize(System.String)">
            <summary>
            Gets tokenize flag of a field.
            </summary>
            <param name="name">Name of the field to retrieve flag value for.</param>
            <returns>Tokenize flag associated with field.</returns>
            <exception cref="T:System.ArgumentException">Thrown when field of given name does not exist.</exception>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.Remove(System.String)">
            <summary>
            Removes the field with specified name from the search document.
            </summary>
            <param name="name">Name of the field to remove.</param>
        </member>
        <member name="M:CMS.DataEngine.SearchDocument.GetField(System.String)">
            <summary>
            Gets field by name.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchDocument.SearchDocumentField">
            <summary>
            Class holding search document data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchDocumentExtensions">
            <summary>
            Extension methods for working with <see cref="T:CMS.DataEngine.SearchDocument"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchDocumentExtensions.AddSearchField(CMS.DataEngine.SearchDocument,CMS.DataEngine.ISearchField)">
            <summary>
            Adds given search <paramref name="field"/> to search document.
            </summary>
            <param name="document">Search document to add field to.</param>
            <param name="field">Search field to be added.</param>
        </member>
        <member name="M:CMS.DataEngine.SearchDocumentExtensions.Initialize(CMS.DataEngine.SearchDocument,CMS.DataEngine.ISearchIndexInfo,System.String,System.String,System.DateTime)">
            <summary>
            Initializes search document from given parameters.
            </summary>
            <param name="document">Document to initialize.</param>
            <param name="index">Index the document belongs to</param>
            <param name="type">Type of document</param>   
            <param name="id">ID value</param>
            <param name="created">Document created</param>
        </member>
        <member name="M:CMS.DataEngine.SearchDocumentExtensions.Initialize(CMS.DataEngine.SearchDocument,CMS.DataEngine.SearchDocumentParameters)">
            <summary>
            Initializes search document from <paramref name="parameters"/>.
            </summary>
            <param name="document">Document to initialize.</param>
            <param name="parameters">Document initialization parameters.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="parameters"/> does not have <see cref="P:CMS.DataEngine.SearchDocumentParameters.Type"/> or <see cref="P:CMS.DataEngine.SearchDocumentParameters.Id"/> specified.</exception>
        </member>
        <member name="T:CMS.DataEngine.SearchDocumentParameters">
            <summary>
            Initialization parameters used to create new SearchDocument.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocumentParameters.Index">
            <summary>
            Index the documents belongs to. Null when document is not result of index search. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocumentParameters.Type">
            <summary>
            Type of document
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocumentParameters.Id">
            <summary>
            ID value
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocumentParameters.Created">
            <summary>
            Document created
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocumentParameters.SiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchDocumentParameters.Culture">
            <summary>
            Document culture
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchField">
            <summary>
            Represents search field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchField.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchField.Analyzer">
            <summary>
            Explicit analyzer to process search field's value. 
            When null default analyzer is used based on search index configuration. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchField.Value">
            <summary>
            Field value. May be null when field is not initialized with it's value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchField.InsertDirectly">
            <summary>
            When field is marked to be insert directly, it will not be processed before it's inserted into search document. 
            Will not be passed to SearchHelper.AddGeneralField method.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchField.DataType">
            <summary>
            Gets or sets the field type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchField.FlagNames">
            <summary>
            Gets a list of flag names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchField.GetFlag(System.String)">
            <summary>
            Gets value of a flag associated with <paramref name="name"/>.
            </summary>
            <param name="name">Name of the flag.</param>
            <returns>Value of flag <paramref name="name"/>. Returns false if flag does not exist.</returns>
            <seealso cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.TOKENIZED"/>
        </member>
        <member name="M:CMS.DataEngine.SearchField.SetFlag(System.String,System.Boolean)">
            <summary>
            Sets value of a flag associated with <paramref name="name"/>.
            </summary>
            <param name="name">Name of the flag.</param>
            <param name="value">Value to associate with the flag.</param>
            <seealso cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.TOKENIZED"/>
        </member>
        <member name="M:CMS.DataEngine.SearchField.ToString">
            <summary>
            Converts this piece of data into a string.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchFieldsConstants">
            <summary>
            Search field constants
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CONTENT">
            <summary>
            Name of content field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.ID">
            <summary>
            Name of id field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.IDCOLUMNNAME">
            <summary>
            Name of ID (DataClass) column in iDocument
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.TYPE">
            <summary>
            Name of type field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.INDEX">
            <summary>
            Name of index field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.SITE">
            <summary>
            Name of the site field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CREATED">
            <summary>
            Name of the created field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CULTURE">
            <summary>
            Name of the culture field in iDocument.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.PARTIAL_REBUILD">
            <summary>
            Special field for partial index rebuild. This field contains site name and node alias path of a document separated by semicolon (used for document move for example).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_TITLE">
            <summary>
            Custom title field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_CONTENT">
            <summary>
            Custom content field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_DATE">
            <summary>
            Custom date field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_URL">
            <summary>
            Custom URL field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.CUSTOM_IMAGEURL">
            <summary>
            Custom image URL.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.SCORE">
            <summary>
            Score field
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsConstants.POSITION">
            <summary>
            Position field
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchFieldsExtensions">
            <summary>
            Extension methods for working with <see cref="T:CMS.DataEngine.ISearchFields"/> collection.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsExtensions.mStoreContentField">
            <summary>
            Indicates whether content field should be stored in the index
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsExtensions.AddSystemFields(CMS.DataEngine.ISearchFields)">
            <summary>
            Adds system search fields to <paramref name="searchFields"/>.
            </summary>
            <remarks>
            The system search fields are fields of name <see cref="F:CMS.DataEngine.SearchFieldsConstants.TYPE"/>, <see cref="F:CMS.DataEngine.SearchFieldsConstants.ID"/>, <see cref="F:CMS.DataEngine.SearchFieldsConstants.SITE"/>, <see cref="F:CMS.DataEngine.SearchFieldsConstants.CREATED"/>,
            <see cref="F:CMS.DataEngine.SearchFieldsConstants.CULTURE"/> and <see cref="F:CMS.DataEngine.SearchFieldsConstants.INDEX"/>.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsExtensions.AddIndexField(CMS.DataEngine.ISearchFields,CMS.DataEngine.ISearchable,CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo,System.Type)">
            <summary>
            Inserts index field into search fields collection if <see cref="M:CMS.DataEngine.SearchFieldsHelper.IsIndexField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)"/> is true.
            </summary>
            <param name="searchFields">Search fields collection.</param>
            <param name="infoObj">Searchable object whose field represented by <paramref name="searchSetting"/> is to be processed.</param>
            <param name="index">Search index for which the field is being processed.</param>
            <param name="searchSetting">Search settings of DataClass field.</param>
            <param name="dataType">Defines <see cref="T:System.Type"/> of value stored in the added field.</param>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsExtensions.AddContentField(CMS.DataEngine.ISearchFields,CMS.DataEngine.ISearchable,CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo,System.Boolean)">
            <summary>
            Appends search field value into designated content field if <see cref="M:CMS.DataEngine.SearchFieldsHelper.IsContentField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)"/> is true.
            </summary>
            <param name="searchFields">Search fields collection.</param>
            <param name="infoObj">Searchable object whose field represented by <paramref name="searchSetting"/> is to be processed.</param>
            <param name="index">Search index for which the field is being processed.</param>
            <param name="searchSetting">Search settings of DataClass field.</param>
            <param name="stripTags">Indicates if HTML tags should be removed from content.</param>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsExtensions.EnsureContentField(CMS.DataEngine.ISearchFields)">
            <summary>
            Ensures <see cref="F:CMS.DataEngine.SearchFieldsConstants.CONTENT"/> field in collection. 
            Field is created if it's not already present.
            </summary>
            <param name="fields">Search fields collection</param>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsExtensions.AddToContentField(CMS.DataEngine.ISearchFields,System.Func{System.Object})">
            <summary>
            Appends data to <see cref="F:CMS.DataEngine.SearchFieldsConstants.CONTENT"/> field. 
            Field is created if it's not already present.
            </summary>
            <param name="fields">Search fields collection</param>
            <param name="getValueFunc">Function that returns data to append</param>
        </member>
        <member name="T:CMS.DataEngine.SearchFieldsHelper">
            <summary>
            Contains helper methods for index fields.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsHelper.IncludeContentField">
            <summary>
            An event raised upon <see cref="M:CMS.DataEngine.SearchFieldsHelper.IsContentField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)"/> execution. Based on the <see cref="P:CMS.DataEngine.IsContentFieldEventArgs.Result"/> the field is added to content fields.
            By default, all fields having flag named <see cref="F:CMS.DataEngine.SearchSettings.CONTENT"/> set to true are considered content fields.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsHelper.IncludeIndexField">
            <summary>
            An event raised upon <see cref="M:CMS.DataEngine.SearchFieldsHelper.IsIndexField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)"/> execution. Based on the <see cref="P:CMS.DataEngine.IsIndexFieldEventArgs.Result"/> the field is added to index fields.
            By default, all fields having flag named <see cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/> set to true are added.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchFieldsHelper.IncludeTriggerField">
            <summary>
            An event raised upon <see cref="M:CMS.DataEngine.SearchFieldsHelper.IsTriggerField(CMS.DataEngine.SearchSettingsInfo)"/> execution. Based on the <see cref="P:CMS.DataEngine.IsTriggerFieldEventArgs.Result"/> the change of this field triggers index update.
            By default, all fields having flag named <see cref="F:CMS.DataEngine.SearchSettings.INDEX_UPDATE_TRIGGER"/> triggers index update. For backward compatibility if the flag is not present
            fallback is used and returns true if field is Content or Searchable field.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchFieldsHelper.Instance">
            <summary>
            Gets the <see cref="T:CMS.DataEngine.SearchFieldsHelper"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsHelper.#ctor">
            <summary>
            Initializes a new <see cref="T:CMS.DataEngine.SearchFieldsHelper"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsHelper.IsIndexField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Returns true if field represented by <paramref name="searchSettings"/> is to be included in given <paramref name="index"/>.
            </summary>
            <param name="index">Index for which to detect whether field is an index field. Pass null to detect if field is an index field in any index type.</param>
            <param name="searchSettings">Search setting representing tested field.</param>
            <returns>True if field is an index field, false otherwise.</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsHelper.IsContentField(CMS.DataEngine.ISearchIndexInfo,CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Returns true if value of field represented by <paramref name="searchSettings"/> is to be included in a designated content column in given <paramref name="index"/>.
            </summary>
            <param name="index">Index for which to detect whether field is a content field. Pass null to detect if field is an index field in any index type.</param>
            <param name="searchSettings">Search setting representing tested field.</param>
            <returns>True if field is an index field, false otherwise.</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchFieldsHelper.IsTriggerField(CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Returns true if value of field represented by <paramref name="searchSettings"/> triggers index update upon change.
            </summary>
            <param name="searchSettings">Search setting representing tested field.</param>
            <returns>True if field change should issue index update, false otherwise.</returns>
        </member>
        <member name="T:CMS.DataEngine.SearchIndexSettings">
            <summary>
            SearchIndexSettings handles management of index settings container.
            </summary>    
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettings.CONTAINERROOTNAME">
            <summary>
            Root element name of index settings data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettings.ITEMELEMENTNAME">
            <summary>
            Element name which determines items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettings.ITEMIDENTIFIER">
            <summary>
            Attribute name which identifies single item of index settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettings.Items">
            <summary>
            Gets list of all settings items.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.LoadData(System.String)">
            <summary>
            Loads settings from xml data.
            </summary>
            <param name="data">String of xml data</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.LoadFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Loads the data from the given XML element
            </summary>
            <param name="element">XML element</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetData">
            <summary>
            Returns xml code of search index settings.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets the XML element for the data
            </summary>        
            <param name="document">Parent XML document</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetSearchIndexSettingsInfo(System.String)">
            <summary>
            Returns search index setting item.
            </summary>
            <param name="guid">String id</param>
            <returns>Returns search setting item or null if there is no such item</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetSearchIndexSettingsInfo(System.Guid)">
            <summary>
            Returns search index setting item.
            </summary>
            <param name="guid">ID of search setting item</param>
            <returns>Returns search setting item or null if there is no such item</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.SetSearchIndexSettingsInfo(CMS.DataEngine.SearchIndexSettingsInfo)">
            <summary>
            Adds or updates item in search index settings.
            </summary>
            <param name="sisi">Search index object</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.DeleteSearchIndexSettingsInfo(System.Guid)">
            <summary>
            Deletes search index setting item.
            </summary>
            <param name="guid">ID of search setting item</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.DeleteSearchIndexSettingsInfo(CMS.DataEngine.SearchIndexSettingsInfo)">
            <summary>
            Deletes search index setting item.
            </summary>
            <param name="sisi">SearchIndexSettingsInfo</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettings.GetAll">
            <summary>
            Returns dataset with all index settings items.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchIndexSettingsInfo">
            <summary>
            Search Index Settings Info object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.TYPE_ALLOWED">
            <summary>
            Public constant for item of type allowed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.TYPE_EXLUDED">
            <summary>
            Public constant for item of type excluded.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.mData">
            <summary>
            Collection of the data contents.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexSettingsInfo.splitClassNames">
            <summary>
            Split class names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ID">
            <summary>
            Gets or sets item identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.Type">
            <summary>
            Gets or sets type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ClassNames">
            <summary>
            Gets or sets class names of the custom tables.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.WhereCondition">
            <summary>
            Gets or sets the where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.SiteName">
            <summary>
            Gets or sets the item sitename.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.Path">
            <summary>
            Gets or sets path.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeCategories">
            <summary>
            Enables or disables categories inclusion.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.IncludeAttachments">
            <summary>
            Enables or disables attachment content indexing. If true, all the attachments with supported file 
            type (for which there is an extractor and which is allowed in the Site Manager setting) the text is 
            extracted and included in the search index.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.MatchClassNames(System.String)">
            <summary>
            Returns true if there is classname in this item which matches specified parameter.
            </summary>
            <param name="className">ClassName to be matched</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.MatchPath(System.String)">
            <summary>
            Returns true if <see cref="P:CMS.DataEngine.SearchIndexSettingsInfo.Path"/> in this item matches specified parameter.
            </summary>
            <param name="path">Path to be matched</param>        
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SearchIndexSettingsInfo.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.SearchIndexSettingsInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.DataEngine.SearchSettings">
            <summary>
            SearchSettings class provides methods for manipulation with SearchSettingsInfo objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.CONTAINERROOTNAME">
            <summary>
            Root element name of search settings data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.ITEMELEMENTNAME">
            <summary>
            Element name which determines items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.ITEMIDENTIFIER">
            <summary>
            Attribute name which identifies single item of index settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.SEARCHABLE">
            <summary>
            Name of flag indicating whether field is searchable in context of local indexes.
            </summary>
            <remarks>
            In local indexes a searchable field has a dedicated index field with its original value stored so that the value can be retrieved upon search.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.TOKENIZED">
            <summary>
            Name of flag indicating whether field is tokenized in context of local indexes.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.IFIELDNAME">
            <summary>
            Field field.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.CONTENT">
            <summary>
            Name of flag indicating whether field is considered a content field in context of local indexes.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchSettings.INDEX_UPDATE_TRIGGER">
            <summary>
            Name of flag indicating whether field change leads to index update when page is indexed by crawler.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettings.Items">
            <summary>
            Gets list of all settings items indexed by GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettings.ItemsByName">
            <summary>
            Gets list of all settings items indexed by name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.LoadData(System.String)">
            <summary>
            Loads settings from xml data.
            </summary>
            <param name="data">String of xml data</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetData">
            <summary>
            Returns xml code of search index settings.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.LoadFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Loads the data from the given XML element
            </summary>
            <param name="element">XML element</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets the XML element for the data
            </summary>        
            <param name="document">Parent XML document</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.SetSettingsInfo(CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Adds or overwrites search setting item in hashtable.
            </summary>
            <param name="ssi">Search setting item</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetSettingsInfo(System.String)">
            <summary>
            Returns search setting item by specified II (GUID).
            </summary>
            <param name="guid">String idenfificator</param>
            <returns>Returns search setting item or null if there is no such item</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetSettingsInfo(System.Guid)">
            <summary>
            Returns search setting item by specified II (GUID).
            </summary>
            <param name="guid">ID of search setting item</param>
            <returns>Returns search setting item or null if no item found</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetAllSettingsInfos">
            <summary>
            Returns all search settings as DataSet.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.DeleteSearchSettingsInfo(System.Guid)">
            <summary>
            Deletes search setting item.
            </summary>
            <param name="guid">ID of search setting item</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.DeleteSearchSettingsInfo(CMS.DataEngine.SearchSettingsInfo)">
            <summary>
            Deletes search index setting item.
            </summary>
            <param name="ssi">SearchIndexSettingsInfo</param>        
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.SearchesAnyOf(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if the search settings indexes any of the given columns
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.ContainsTriggerColumn(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns true if the any of the given columns triggers index update.
            </summary>
            <param name="columns">Columns to check</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.CopyTo(CMS.DataEngine.SearchSettings,System.Func{CMS.DataEngine.SearchSettingsInfo,System.Boolean})">
            <summary>
            Copies selected fields to another search settings object
            </summary>
            <param name="target">Target settings</param>
            <param name="func">Function to say which items to copy. If null, all items are copied</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.RenameColumn(System.String,System.String)">
            <summary>
            Renames existing column in settings to the new name
            </summary>
            <param name="oldColumnName">Column to rename</param>
            <param name="newColumnName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchSettingsInfo">
            <summary>
            Search settings class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.ID">
            <summary>
            GUID column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Name">
            <summary>
            Name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.FieldName">
            <summary>
            Custom field name column.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.GetFlag(System.String)">
            <summary>
            Gets value associated with flag <paramref name="name"/>.
            </summary>
            <param name="name">Name of flag to return value for.</param>
            <returns>Returns flag value, or false when flag is not present. Use <see cref="M:CMS.DataEngine.SearchSettingsInfo.ContainsColumn(System.String)"/> to determine whether flag exists.</returns>
            <seealso cref="F:CMS.DataEngine.SearchSettings.CONTENT"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.TOKENIZED"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.INDEX_UPDATE_TRIGGER"/>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.SetFlag(System.String,System.Boolean)">
            <summary>
            Sets value of flag <paramref name="name"/>.
            </summary>
            <param name="name">Name of flag to set value of.</param>
            <param name="value">Value to be set.</param>
            <seealso cref="F:CMS.DataEngine.SearchSettings.CONTENT"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.SEARCHABLE"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.TOKENIZED"/>
            <seealso cref="F:CMS.DataEngine.SearchSettings.INDEX_UPDATE_TRIGGER"/>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.SearchSettingsInfo.ColumnNames">
            <summary>
            Returns array of property names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.GetValue(System.String)">
            <summary>
            Returns value specified by property name.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets value to specified property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SearchSettingsInfo.ContainsColumn(System.String)">
            <summary>
            Indicates if specified property is included.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataContractSerializerService`1">
            <summary>
            Service for serializing / deserializing objects from / to XML using <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.
            </summary>
            <typeparam name="T">Type of object to serialize / deserialize.</typeparam>
        </member>
        <member name="M:CMS.DataEngine.DataContractSerializerService`1.Serialize(`0,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes object instance to XML string representation.
            </summary>
            <param name="obj">Input object for serialization.</param>
            <param name="settings">Settings used for <see cref="T:System.Xml.XmlWriter"></see>. If this is <c>null</c>, default settings are used.</param>
            <returns>Serialized object <paramref name="obj" /> to XML string representation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="obj"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.DataEngine.DataContractSerializerService`1.Deserialize(System.String)">
            <summary>
            Deserializes XML string to object instance.
            </summary>
            <param name="xml">Input XML text for deserialization.</param>
            <returns>Deserialized object instance from <paramref name="xml" /> string representation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="xml"/> is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when deserialization from input <paramref name="xml"/> failed.</exception>
        </member>
        <member name="T:CMS.DataEngine.IDataContractSerializerService`1">
            <summary>
            Interface for service serializing / deserializing objects from / to XML using <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.
            </summary>
            <typeparam name="T">Type of object to serialize / deserialize.</typeparam>
        </member>
        <member name="M:CMS.DataEngine.IDataContractSerializerService`1.Serialize(`0,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes object instance to XML string representation.
            </summary>
            <param name="obj">Input object for serialization.</param>
            <param name="settings">Settings used for <see cref="T:System.Xml.XmlWriter"></see>. If this is <c>null</c>, default settings are used.</param>
            <returns>Serialized object <paramref name="obj" /> to XML string representation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="obj"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.DataEngine.IDataContractSerializerService`1.Deserialize(System.String)">
            <summary>
            Deserializes XML string to object instance.
            </summary>
            <param name="xml">Input XML text for deserialization.</param>
            <returns>Deserialized object instance from <paramref name="xml" /> string representation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="xml"/> is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when deserialization from input <paramref name="xml"/> failed.</exception>
        </member>
        <member name="T:CMS.DataEngine.GetIDParameters">
            <summary>
            Parameters wrapper for the TranslationHelper.GetID function
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.OldId">
            <summary>
            Old object ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.CodeName">
            <summary>
            Code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.CodeNameColumn">
            <summary>
            Code name column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.Guid">
            <summary>
            GUID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.GuidColumn">
            <summary>
            GUID column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.SiteId">
            <summary>
            Site ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.SiteIdColumn">
            <summary>
            Site ID column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.ParentId">
            <summary>
            Parent ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.ParentIdColumn">
            <summary>
            Parent ID column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.GroupId">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.GroupIdColumn">
            <summary>
            Group ID column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.GetIDParameters.AdditionalFields">
            <summary>
            Additional fields to be loaded
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GetIDParameters.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.GetIDParameters.GetGroupingKey">
            <summary>
            Gets the grouping key for the parameters. The grouping key contains all "parent" IDs which may group the underlying GUIDs and Code names into a common set (parent ID, group ID, site ID, and the column names)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TranslationHelper">
            <summary>
            Class to provide objects translation interface ID - CodeName.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TranslationHelper.ColumnsIndexes">
            <summary>
            Used to cache indexes of data table columns
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TranslationHelper.ObjectDatabaseWrapper">
            <summary>
            Internal structure for wrapping ID, Guid and additional fields from database 
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TranslationHelper.ConversionIDs">
            <summary>
            Conversion IDs container
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.ConversionIDs.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.ConversionIDs.GroupID">
            <summary>
            Group ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.ConversionIDs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="id">ID</param>
            <param name="groupId">Group ID</param>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.TranslationData.Info">
            <summary>
            Special case - Permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.AUTO_SITENAME">
            <summary>
            Automatic site name (Get by SiteIDs from DB).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.NO_SITE">
            <summary>
            No site condition for registering records.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.TRANSLATION_TABLE">
            <summary>
            Name of translation table
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.AUTO_SITEID">
            <summary>
            Automatic site ID
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.AUTO_PARENTID">
            <summary>
            Automatic parent ID.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.mConnection">
            <summary>
            Connection object used to access data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_ID_COLUMN">
            <summary>
            Name of column with object's identifier in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_PARENT_ID_COLUMN">
            <summary>
            Name of column with object's parent identifier in a record <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_GROUP_ID_COLUMN">
            <summary>
            Name of column with object's group identifier in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_CLASS_NAME_COLUMN">
            <summary>
            Name of column with object's class name identifier in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_OBJECT_TYPE_COLUMN">
            <summary>
            Name of column with object's class name in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_CODE_NAME_COLUMN">
            <summary>
            Name of column with object's code name in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_SITE_NAME_COLUMN">
            <summary>
            Name of column with object's site name in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_INFO_COLUMN">
            <summary>
            Name of column with object's additional information in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_GUID_COLUMN">
            <summary>
            Name of column with object's GUID in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.QUERY_OBJECT_TYPE_COLUMN">
            <summary>
            Name of the computed column that contains (real) object type of current row. 
            Column is used in data query obtaining code names and other information based on ID and object type.
            Requested object type can differ from real object type when original and related object types are defined. 
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TranslationHelper.RECORD_ADDITIONAL_FIELDS_COLUMN">
            <summary>
            Name of column with object's additional fields in a record's <see cref="T:System.Data.DataRow"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.EventLogService">
            <summary>
            Service responsible for logging events.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.TranslationTable">
            <summary>
            Returns the translation table.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.IDConversion">
            <summary>
            ID conversion table [objectType.ToLowerCSafe()] -> hash table [OldID -> NewID]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.UseDisplayNameAsCodeName">
            <summary>
            If true, display name is used instead of the code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.UseAdditionalFields">
            <summary>
            Indicates whether additional fields' data (see <see cref="M:CMS.DataEngine.TranslationHelper.GetAdditionalFieldNames(CMS.DataEngine.ObjectTypeInfo)"/>)
            is associated with translation records.
            </summary>
            <remarks>
            Returns false by default. When overriding this member in a derived class,
            override the <see cref="M:CMS.DataEngine.TranslationHelper.GetAdditionalFieldNames(CMS.DataEngine.ObjectTypeInfo)"/> method as well.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.#ctor(System.Data.DataTable)">
            <summary>
            Constructor. Creates the helper initialized with given translation table.
            </summary>
            <param name="dt">Source data table</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.#ctor(System.Data.DataTable,CMS.Core.IEventLogService)">
            <summary>
            Constructor. Creates the helper initialized with given translation table.
            </summary>
            <param name="dt">Source data table</param>
            <param name="eventLogService">Logs events</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.IsEmpty(CMS.DataEngine.TranslationHelper)">
            <summary>
            Determines whether the given translation helper contains any translations or not.
            </summary>
            <param name="th">TranslationHelper object to examine</param>
            <returns>TRUE if there are no translation records</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetEmptyTable">
            <summary>
            Returns empty translation table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.EnsureColumns(System.Data.DataTable,System.Boolean)">
            <summary>
            Ensures the columns in the translation table.
            </summary>
            <param name="dataTable">Translation table</param>
            <param name="useAdditionalFields">Indicates whether column for additional fields should be ensured</param>
            <returns>True if all columns were created or already declared with expected data type.</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.EnsureColumn``1(System.Data.DataTable,System.String)">
            <summary>
            Ensures the column in the translation table.
            </summary>
            <typeparam name="T">Column data type</typeparam>
            <param name="dataTable">Translation table</param>
            <param name="columnName">Column name</param>
            <returns>true if column has the correct type defined in <paramref name="dataTable"/>; otherwise false.</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.Clear">
            <summary>
            Clears the translation table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.HasRecords">
            <summary>
            Returns true if the helper contains some records.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecord(System.Int32,CMS.DataEngine.TranslationParameters,System.String)">
            <summary>
            Registers the record within given translation table.
            </summary>
            <param name="id">Object ID</param>
            <param name="parameters">Translation record values</param>
            <param name="info">Additional record info</param>
            <remarks>
            If there was already a record registered for the given object with <paramref name="id"/> and the <paramref name="parameters"/> are different,
            the old record is replaced with the new values.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecord(CMS.DataEngine.BaseInfo)">
            <summary>
            Registers the record for object ID within given translation table.
            </summary>
            <param name="infoObject">Object instance for which the object ID will be registered.</param>
            <remarks>
            If there was already a record registered for the given object and the parameters are different,
            the old record is replaced with the new values.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecord(System.Int32,CMS.DataEngine.TranslationParameters,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Registers the record within given translation table.
            </summary>
            <param name="id">Object ID</param>
            <param name="parameters">Translation record values</param>
            <param name="info">Additional record info</param>
            <param name="additionalFields">Dictionary containing additional record fields and their values</param>
            <remarks>
            If there was already a record registered for the given object with <paramref name="id"/> and the <paramref name="parameters"/> are different,
            the old record is replaced with the new values.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.DeleteRecord(System.Data.DataRow)">
            <summary>
            Deletes given translation table record. 
            </summary>
            <param name="record">Record of translation table to be deleted.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="record"/> DataRow does not belong to <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="record"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RemoveRegisteredId(System.Data.DataRow)">
            <summary>
             Removes ID from IDs hash table.
            </summary>
            <param name="record">Record with ID to remove.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RemoveRegisteredRecord(System.Data.DataRow)">
            <summary>
            Removes record references from hash table index.
            </summary>
            <param name="record">References to this record will be removed.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.CheckRequiredDataAvailable(System.String,System.Int32,System.String)">
            <summary>
            Checks if the required data is available for the translation, and throws exception in case something is missing
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
            <param name="codeName">Object code name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.Data.DataTable,System.String,System.String,System.String,System.String[])">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dataTable">Table with the records</param>
            <param name="objectType">Object type of the target objects</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.Collections.Generic.IList{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Registers the records from the given list.
            </summary>
            <param name="objectIDs">IDs to register</param>
            <param name="objectType">Object type of the target objects</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterDynamicRecords(System.Data.DataTable,System.String,System.String,System.String,System.String[])">
            <summary>
            Registers the records from the given table.
            </summary>
            <param name="dt">Table with the records</param>
            <param name="objectTypeColumn">Name of the column with dynamic object type value</param>
            <param name="idColumnName">Name of the column where object IDs are stored</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterRecords(System.String,System.Collections.Generic.IList{System.Int32},System.String,System.String[])">
            <summary>
            Registers the records from the given ID list.
            </summary>
            <param name="objectType">Object type of the target objects</param>
            <param name="objectIDs">List of IDs to register</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterTranslationData(System.Collections.Generic.Dictionary{System.Int32,CMS.DataEngine.TranslationHelper.TranslationData},System.String,System.String[])">
            <summary>
            Registers the code names from the given table.
            </summary>
            <param name="data">Translation data organized by object ID</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded object names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterGroupRecords(System.Collections.Generic.IList{System.Int32},System.String,System.String[])">
            <summary>
            Registers the group records to the translation table.
            </summary>
            <param name="groups">List of groups IDs</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded code names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RegisterParentRecords(System.String,System.Collections.Generic.IList{System.Int32},System.String,System.String[])">
            <summary>
            Registers the parent records to the translation table.
            </summary>
            <param name="parentObjectType">Parent object type</param>
            <param name="parents">List of parent IDs</param>
            <param name="siteName">Site name</param>
            <param name="excludedNames">Excluded code names</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.FilterExistingRecords(System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Filters the existing records from the given array.
            </summary>
            <param name="objectIDs">Existing IDs</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RecordExists(System.String,System.Int32)">
            <summary>
            Returns true if specified record exists in translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeName(System.String,System.Int32)">
            <summary>
            Returns the code name of the specified object.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetRecord(CMS.DataEngine.TranslationParameters)">
            <summary>
            Gets the record specified by parameters.
            </summary>
            <remarks>
            Object's <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/> has priority over code name. However, if there is <see cref="F:System.Guid.Empty"/> provided as <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/>, only <see cref="P:CMS.DataEngine.TranslationParameters.CodeName"/> will be used to identify object.
            </remarks>
            <param name="parameters">Parameters used to obtain the record.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetRegisteredRecord(System.String)">
            <summary>
            Return record using the hash table index. 
            </summary>
            <remaks>
            Only for testing purposes outside of TranslationHelper class.
            </remaks>
            <param name="key">Index key to obtain a record.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetClassName(System.String,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns class name used to identify a database table. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetTranslationsXml(System.Boolean)">
            <summary>
            Gets the translations XML
            </summary>
            <param name="includeRoot">If true, the root node is included</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetClassName(CMS.DataEngine.TranslationParameters)">
            <summary>
            Returns class name used to identify a database table. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetRecordKey(CMS.DataEngine.TranslationParameters)">
            <summary>
            Returns hash table index key for given parameters. 
            </summary>
            <remaks>
            Only for testing purposes outside of TranslationHelper class.
            </remaks>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetRecord(System.String,System.Int32)">
            <summary>
            Gets the record by ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetCodeName(System.String,System.Int32,System.String)">
            <summary>
            Returns the code name of the specified object.
            </summary>
            <param name="objectType">Object type</param>
            <param name="id">Object ID</param>
            <param name="defaultValue">Value to return in case record not found</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetID(CMS.DataEngine.TranslationParameters)">
            <summary>
            Returns the object ID for specified record.
            </summary>
            <remarks>
            Object's <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/> has priority over code name. However, if there is <see cref="F:System.Guid.Empty"/> provided as <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/>, only <see cref="P:CMS.DataEngine.TranslationParameters.CodeName"/> will be used to identify object.
            </remarks>
            <param name="parameters">Parameters used to select record</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDWithFallback(CMS.DataEngine.TranslationParameters,System.Int32)">
            <summary>
            Returns the object ID for specified record calling <see cref="M:CMS.DataEngine.TranslationHelper.GetID(CMS.DataEngine.TranslationParameters)"/>.
            If record could not be found, method falls back to <see cref="M:CMS.DataEngine.TranslationHelper.GetIDFromDB(CMS.DataEngine.GetIDParameters,System.String)"/> and eventually registers DB object in the helper.
            If neither attempt results into valid object ID, 0 is returned.
            </summary>
            <remarks>
            Object's <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/> has priority over code name. However, if there is <see cref="F:System.Guid.Empty"/> provided as <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/>, only <see cref="P:CMS.DataEngine.TranslationParameters.CodeName"/> will be used to identify object.
            <para>
            The <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/> property contains data records that correspond with the database.        
            For translation records identified using partially correct parameters (either the code name or GUID is different than the value in the database), 
            the actual values are loaded from the database for all fields.        
            An index key referencing the correct data is then created from the partial parameters. The index key is used to obtain the record in future calls.
            </para>
            </remarks>
            <param name="siteId">Id of site</param>
            <param name="parameters">translation parameters. Property <see cref="P:CMS.DataEngine.TranslationParameters.SiteName"/> is not used and doesn't need to be set.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.AddIDTranslation(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the ID translation to the translation table.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old ID</param>
            <param name="newId">New ID</param>
            <param name="newGroupId">New group ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetOriginalType(System.String,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets original object type
            </summary>
            <param name="objectType">Object type</param>
            <param name="typeInfo">Object type info</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.SetDefaultValue(System.String,System.Int32)">
            <summary>
            Sets default value.
            </summary>
            <param name="objectType">Object type</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.RemoveDefaultValue(System.String)">
            <summary>
            Removes default value.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetDefaultValue(System.String)">
            <summary>
            Gets default value.
            </summary>
            <param name="objectType">Object type</param>
            <exception cref="T:System.ArgumentException">When provided <paramref name="objectType"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetNewID(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets the new ID for given old ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old ID</param>
            <param name="codeNameColumn">Code name column of the class</param>
            <param name="siteId">Site ID of the required object</param>
            <param name="siteIdColumn">Site ID column of the class</param>
            <param name="parentIdColumn">Parent ID column</param>
            <param name="groupIdColumn">Group ID column</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetNewID(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Gets the new ID for given old ID.
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old ID</param>
            <param name="codeNameColumn">Code name column of the class</param>
            <param name="siteId">Site ID of the required object</param>
            <param name="siteIdColumn">Site ID column of the class</param>
            <param name="parentIdColumn">Parent ID column</param>
            <param name="groupIdColumn">Group ID column</param>
            <param name="useDefaultValue">Indicates if default value should be used for ID</param>
            <param name="outGroupId">Returns Group ID value</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetParametersForId(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the parameters for getting a new object ID based on the given object type, old ID and target site ID
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldId">Old object ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.EnsureConversionTable(System.String)">
            <summary>
            Ensures the ID translation table for the given object type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumn(System.Data.DataRow,System.String,System.String,System.Int32)">
            <summary>
            Translates the DataRow column.
            </summary>
            <param name="dr">DataRow with the data</param>
            <param name="columnName">Column name</param>
            <param name="objectType">Object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateListColumn(CMS.DataEngine.GeneralizedInfo,System.String,System.String,System.Int32,System.Char)">
            <summary>
            Translates the column value with list of IDs of the given info object.
            </summary>
            <param name="infoObj">Object with the data</param>
            <param name="columnName">Column name to translate</param>
            <param name="objectType">Object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <param name="separator">ID separator</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumn(CMS.DataEngine.GeneralizedInfo,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Translates the column value of the given info object.
            </summary>
            <param name="infoObj">Object with the data</param>
            <param name="columnName">Column name to translate</param>
            <param name="objectType">Object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <param name="useDefaultValue">Indicates if default value should be used for new IDs</param>
            <param name="required">If false, the column is allowed to be set to null in case the translation is not found.</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumn(CMS.Base.IDataContainer,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Translates the column value of the given container.
            </summary>
            <param name="container">Container with the data</param>
            <param name="columnName">Column name to translate</param>
            <param name="objectType">Reference object type</param>
            <param name="siteId">Target site ID for objects lookup which are site-related</param>
            <param name="useDefaultValue">Indicates if default value should be used for new IDs</param>
            <param name="required">If false, the column is allowed to be set to null in case the translation is not found.</param>
            <returns>Returns true if the translation was successful</returns>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.ChangeCodeName(CMS.DataEngine.TranslationParameters,System.String)">
            <summary>
            Changes the object code name in the table.
            </summary>
            <remarks>
            Object's <see cref="P:CMS.DataEngine.TranslationParameters.Guid"/> might be set to <see cref="F:System.Guid.Empty"/>, however, if there is another object with properly set GUID preset simultaneously,
            both objects will be treated as distinct (despite same <see cref="P:CMS.DataEngine.TranslationParameters.CodeName"/> and <see cref="P:CMS.DataEngine.TranslationParameters.SiteName"/> and <see cref="P:CMS.DataEngine.TranslationParameters.ParentId"/> and <see cref="P:CMS.DataEngine.TranslationParameters.GroupId"/>).
            </remarks>
            <param name="parameters">Parameters that select record which we want to alter.</param>
            <param name="newCodeName">New code name.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.TranslateColumns(CMS.DataEngine.GeneralizedInfo,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String)">
            <summary>
            Translates all reference object columns.
            </summary>
            <param name="infoObj">Object with the data</param>
            <param name="siteId">Translate site ID</param>
            <param name="parentId">Translate parent ID</param>
            <param name="dependencies">Translate dependencies</param>
            <param name="targetSiteId">Target site ID for objects lookup which are site-related</param>
            <param name="excludeColumns">Columns to exclude</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetAdditionalFieldNames(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets read-only collection with names of additional fields.
            </summary>
            <param name="typeInfo">Type info for which to retrieve the list of additional fields.</param>
            <returns>Read-only collection of additional field names.</returns>
            <remarks>
            <para>
            This method is called only if <see cref="P:CMS.DataEngine.TranslationHelper.UseAdditionalFields"/> is true. Returns
            empty collection by default.
            </para>
            <para>
            Override this member in a derived class to specify which columns should be retrieved
            along with translation record.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetAdditionalFieldsData(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets dictionary with data of additional fields [fieldName -> value]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationHelper.TranslationReferenceLoader">
            <summary>
            Gets a loader object allowing to instantiate <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> from various sources.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.IsExcluded(System.String,System.String)">
            <summary>
            Returns true of the column is excluded.
            </summary>
            <param name="columnName">Column name to check</param>
            <param name="excludedColumns">Excluded column list separated by semicolon</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetNewIDs(System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Gets the dictionary of new IDs for the given list of old IDs [oldId => [ newId, newGroupId ]]
            Caches the newly retrieved items in the conversion cache
            </summary>
            <param name="objectType">Object type</param>
            <param name="oldIds">List of old object IDs</param>
            <param name="siteId">Target site ID</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDFromDB(CMS.DataEngine.GetIDParameters,System.String)">
            <summary>
            Gets the object ID from the database.
            </summary>
            <param name="parameters">Get ID parameters</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetObjectWrapperFromDB(CMS.DataEngine.GetIDParameters,System.String)">
            <summary>
            Returns wrapped object from database containing desired column values
            </summary>
            <param name="parameters">Database defining parameter values</param>
            <param name="objectType">Desired object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.CreateCodeNameWhereCondition(CMS.DataEngine.GetIDParameters)">
            <summary>
            Creates where condition that selects an object based on CodeName provided in <paramref name="parameters"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDFromDB(CMS.DataEngine.IWhereCondition,CMS.DataEngine.IWhereCondition,CMS.DataEngine.GetIDParameters,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Selects both object(s) with given GUID (<paramref name="guidWhereCondition"/>) and with given code name (<paramref name="codeNameWhereCondition"/>)
            and returns set of column values of first object with matching GUID (if such object exists) or code name (otherwise).
            If there are no such objects, 0 is returned.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDFromDB(CMS.DataEngine.WhereCondition,CMS.DataEngine.GetIDParameters,CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Selects either object with given GUID or code name (based on <paramref name="singleIdentifierWhereCondition"/>) and returns set of column values of first such object.
            If there is no such object, 0 is returned.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIDsFromDB(CMS.DataEngine.GetIDParameters,CMS.DataEngine.GeneralizedInfo,System.Collections.Generic.IList{System.String})">
            <summary>
            Gets the object ID from the database.
            </summary>
            <param name="parameters">Get ID parameters</param>
            <param name="infoObj">Info object to use for meta-data and for getting the data</param>
            <param name="codeNames">Code names to get</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetParentType(System.String)">
            <summary>
            Gets the parent object type for specified object type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetIndexOf(System.Data.DataSet,System.String)">
            <summary>
            Reads column index for given column name from data set and returns it.
            If column name is not instantiated or set to COLUMN_NAME_UNKNOWN, INVALID_INDEX is returned.
            </summary>
            <param name="dataSet">Set of data (with column names)</param>
            <param name="columnName">Name of a column the index is required for</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetTranslationDataFromDB(System.String,System.Collections.Generic.IList{System.Int32},System.String)">
            <summary>
            Gets translation data from database and returns it as a dictionary of [ID] -> [TranslationData] pairs.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectIDs">Array of object IDs</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationHelper.GetSafeClassName(System.String)">
            <summary>
            Gets the safe class name.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="T:CMS.DataEngine.TranslationParameters">
            <summary>
            Parameters wrapper for methods of <see cref="T:CMS.DataEngine.TranslationHelper"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.TypeInfo">
            <summary>
            Type info object.
            </summary>
            <remarks>
            May be null when <see cref="P:CMS.DataEngine.TranslationParameters.ObjectType"/> is not registered.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.CodeName">
            <summary>
            Code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.SiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.ParentId">
            <summary>
            Parent object ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationParameters.GroupId">
            <summary>
            Group info ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationParameters.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationParameters.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationParameters.#ctor(CMS.DataEngine.TranslationParameters)">
            <summary>
            Creates a new object that is a copy of the given instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationParameters.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationParameters.ToString">
            <summary>
            Returns text representation
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TranslationReferenceLoader">
            <summary>
            Loader allowing to instantiate <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> from various sources.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TranslationReferenceLoader.TranslationHelper">
            <summary>
            Gets the current <see cref="P:CMS.DataEngine.TranslationReferenceLoader.TranslationHelper"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TranslationReferenceLoader.#ctor(CMS.DataEngine.TranslationHelper)">
            <summary>
            Constructor
            </summary>
            <param name="translationHelper">Current translation helper</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationReferenceLoader.LoadFromElement(System.Xml.XmlElement)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> instance built from information contained in given <paramref name="element"/>.
            </summary>
            <param name="element">Element containing all the translation information.</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationReferenceLoader.LoadFromInfoObject(CMS.DataEngine.BaseInfo)">
            <summary>
            Creates translation reference from given base info object.
            </summary>
            <param name="info">Base info object</param>
        </member>
        <member name="M:CMS.DataEngine.TranslationReferenceLoader.LoadFromDatabase(System.String,System.Int32)">
            <summary>
            Creates translation reference for requested object.
            </summary>
            <param name="objectType">Type of object</param>
            <param name="objectId">Database identifier of object</param>
        </member>
        <member name="T:CMS.DataEngine.EnumerationObjectTypeFilter">
            <summary>
            Filter excluding everything except of given type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.EnumerationObjectTypeFilter.mObjectTypes">
            <summary>
            Object types to be included. Everything else will be filtered out.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.EnumerationObjectTypeFilter.#ctor(System.Collections.Generic.ISet{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="types">Object types to include. Everything else will be filtered out.</param>
        </member>
        <member name="M:CMS.DataEngine.EnumerationObjectTypeFilter.IsIncludedType(System.String)">
            <summary>
            Returns true if the given object type is included in output.
            </summary>
            <param name="objectType">Object type name</param>
        </member>
        <member name="M:CMS.DataEngine.EnumerationObjectTypeFilter.IsChildIncludedToParent(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Indicates whether given type info is a child processed together with its parent, hence should be ignored in the output.
            </summary>
            <param name="childTypeInfo">Child type info</param>
        </member>
        <member name="M:CMS.DataEngine.EnumerationObjectTypeFilter.IsBindingIncludedToParent(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Indicates whether given type info is a binding processed together with its parent, hence should be ignored in the output.
            </summary>
            <param name="bindingTypeInfo">Binding type info</param>
        </member>
        <member name="T:CMS.DataEngine.IObjectTypeDriven">
            <summary>
            Interface for object type driven controls
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectTypeDriven.ObjectType">
            <summary>
            Type of the selected objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IObjectTypeFilter">
            <summary>
            Wrapper for object types collection filtering logic.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectTypeFilter.IsIncludedType(System.String)">
            <summary>
            Indicates whether given object type is included in the output.
            </summary>
            <param name="objectType">Object type name</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectTypeFilter.IsChildIncludedToParent(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Indicates whether given type info is a child processed together with its parent, hence should be ignored in the output.
            </summary>
            <param name="childTypeInfo">Child type info</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectTypeFilter.IsBindingIncludedToParent(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Indicates whether given type info is a binding processed together with its parent, hence should be ignored in the output.
            </summary>
            <param name="bindingTypeInfo">Binding type info</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeListItem">
            <summary>
            Container for object types list item.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeListItem.ObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeListItem.IsSite">
            <summary>
            Indicates whether the object is site or not.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeListItem.HasDynamicDependency">
            <summary>
            Indicates whether the object type has any dynamic dependencies
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeManager">
            <summary>
            Class with various types of object type lists
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.RegisteredTypes">
            <summary>
            Returns all registered types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ObjectGenerator">
            <summary>
            Object generator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.Instance">
            <summary>
            Returns singleton instance of the ObjectTypeManager.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ExistingObjectTypes">
            <summary>
            Returns the list of all existing object types available in the system in a not guaranteed order (includes also inherited, list infos).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.AllObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.AllExceptBindingObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types and binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.MainObjectTypes">
            <summary>
            List of all "main" object types (= not child of other object) retrieved from modules.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.BindingObjectTypes">
            <summary>
            List of all binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ListObjectTypes">
            <summary>
            Returns list of all listing (inherited) object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ObjectTypesWithMacros">
            <summary>
            Returns the list of all the object types available in the system that can contain macros in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ObjectTypesWithDynamicDependency">
            <summary>
            Returns the list of all the object types available in the system that has dynamic dependency in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ContinuousIntegrationSupportedObjectTypes">
            <summary>
            Returns the list of all object types that are supported by continuous integration.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeManager.ObjectTypesRegistered">
            <summary>
            If true, all object types were already registered.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetAllObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetAllExceptBindingObjectTypes">
            <summary>
            Returns the list of all the object types available in the system in a not guaranteed order. Does not contain inherited object types and binding object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetObjectTypesWithMacros">
            <summary>
            Returns the list of all the object types available in the system that can contain macros in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetObjectTypesWithDynamicDependency">
            <summary>
            Returns the list of all the object types available in the system that has dynamic dependency in a not guaranteed order. Does not contain inherited object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetContinuousIntegrationSupportedObjectTypes">
            <summary>
            Returns the list of all object types that are supported by continuous integration.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetMainObjectTypes">
            <summary>
            Returns list of all "main" object types (= not child of other object) retrieved from modules.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetBindingObjectTypes">
            <summary>
            Returns list of all binding object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetListObjectTypes">
            <summary>
            Returns list of all listing (inherited) object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.CreateGenerator">
            <summary>
            Creates the object generator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetColumnNames(System.String[])">
            <summary>
            Gets list of columns from given object types
            </summary>
            <param name="objectTypes">Object types</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfos(System.Collections.Generic.IEnumerable{System.String},System.Func{CMS.DataEngine.ObjectTypeInfo,System.Boolean})">
            <summary>
            Filters given source collection of object types according to the condition specified.
            </summary>
            <param name="sourceCollection">Source collection to filter</param>
            <param name="condition">Condition to filter with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetObjectTypes(System.Collections.Generic.IEnumerable{System.String},System.Func{CMS.DataEngine.ObjectTypeInfo,System.Boolean})">
            <summary>
            Filters given source collection of object types according to the condition specified.
            </summary>
            <param name="sourceCollection">Source collection to filter</param>
            <param name="condition">Condition to filter with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypes">
            <summary>
            Ensures that the object types are properly registered
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when method is used prior to application pre-initialization.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when a loop is detected.</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeInfoDynamicList(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Registers the specified type info to all lists where it belongs to (ObjectDependencies, ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="typeInfo">Object type info to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeDynamicListsInternal(System.Collections.Generic.List{System.String})">
            <summary>
            Registers the specified types to all lists where it belongs to (ObjectDependencies, ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeDependencies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Computes ObjectDependencies from Extends field of TypeInfo of objects in the system.
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeInfoDependencies(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Computes ObjectDependencies from Extends field of TypeInfo of objects in the system.
            </summary>
            <param name="typeInfo">Object type info to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.UpdateExtendedObjectTypes(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Adds object dependency for all type infos that are extended by the <paramref name="extendingTypeInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.UpdateCompositeObjectType(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Adds <paramref name="componentTypeInfo"/> into the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ConsistsOf"/> collection
            of the composite object type (set in <see cref="P:CMS.DataEngine.ObjectTypeInfo.CompositeObjectType"/>
            property of the <paramref name="componentTypeInfo"/>), if there is any.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetCompositeTypeInfo(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns composite object type for given <paramref name="typeInfo"/> or <see langword="null"/> if the info is not hosted in any other type info.
            </summary>
            <remarks>
            <see langword="Null"/> is also returned when composite info could not be retrieved.
            <para>As a side effect this method makes returned object type a composite (see <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsComposite"/>)</para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfo(System.String,System.Boolean)">
            <summary>
            Gets the type info for the given object type
            </summary>
            <param name="objectType">Object type</param>
            <param name="exceptionIfNotFound">If true, an exception is fired if the given object type is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddObjectDependency(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectDependency)">
            <summary>
            Adds object dependency to the specified TypeInfo if it's not present yet.
            </summary>
            <param name="typeInfo">TypeInfo where to add dependencies</param>
            <param name="dependency">Dependency to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeInfoList(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Registers the specified types to all lists where it belongs to (ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="typeInfo">Object type info to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.EnsureObjectTypeLists(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers the specified types to all lists where it belongs to (ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddToObjectTypeLists(System.String,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Registers the specified type to all lists where it belongs to (ChildObjectTypes, BindingObjectTypes, OtherBindingObjectTypes).
            </summary>
            <param name="objectType">Object type to register</param>
            <param name="typeInfo">Type info of the type to which it should register</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddToObjectTypesList(System.String,CMS.DataEngine.ObjectTypeInfo,System.Func{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.ICollection{System.String}})">
            <summary>
            Adds specified object type to the object type collection if type is not already present.
            </summary>
            <param name="objectType">Object type to add</param>
            <param name="typeInfo">Type info object that is owner of the collection</param>
            <param name="collectionSelector">Function that selects collection from type info object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.AddObjectType(System.String)">
            <summary>
            Adds the object type to the list of object types
            </summary>
            <param name="objectType">Object type to add</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetEmptyObject(System.String)">
            <summary>
            Creates an empty object of the given type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.RegisterObjectType(System.String,CMS.DataEngine.ObjectTypeInfo,System.Type,System.Boolean)">
            <summary>
            Registers the object type
            </summary>
            <param name="objectType">Object type to be registered.</param>
            <param name="type">Type to be registered.</param>
            <param name="typeInfo">TypeInfo configuration of the registered object type.</param>
            <param name="allowObjectTypeProviderRegistration">Indicates whether registration of a corresponding object type info provider into IoC container can be performed.</param>
            <exception cref="T:System.ArgumentException">Thrown when object type is either null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when either type info or type is null.</exception>
            <remarks>
            <para>
            The method registers a corresponding <see cref="T:CMS.DataEngine.IInfoProvider`1"/> implementation into IoC container if <paramref name="typeInfo"/> specifies the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ProviderType"/>
            to be registered and <paramref name="allowObjectTypeProviderRegistration"/> is not <c>false</c>.
            </para>
            <para>
            All object types must be registered during application pre-initialization. Registration into the IoC container cannot be performed after the container's initialization has finished.
            </para>
            <para>
            Use the <paramref name="allowObjectTypeProviderRegistration"/> parameter in scenarios when the IoC container is not available (i.e. unit tests).
            In such scenarios, the <paramref name="allowObjectTypeProviderRegistration"/> must be <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.InitializeInfo(System.Object,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes the given info object with the given type info
            </summary>
            <param name="o">Object to initialize</param>
            <param name="typeInfo">Type info of the initialized object.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.RegisterTypesToObjectTree(CMS.DataEngine.ObjectTypeTreeNode,System.Func{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTreeLocation}})">
            <summary>
            Registers the specified types to object type tree
            </summary>
            <param name="tree">Object type tree</param>
            <param name="getLocations">Function to provide locations for the given object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetRegisteredTypeInfo(System.String)">
            <summary>
            Gets the specific type info based on the object type name.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeManager.GetTypeInfos(System.Type)">
            <summary>
            Gets all the type infos registered for the given system type
            </summary>
            <param name="type">System type</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeProviderManager">
            <summary>
            Manages object type provider registrations into IoC container. Provider types inheriting <see cref="T:CMS.DataEngine.AbstractInfoProvider`3"/> 
            are registered as corresponding <see cref="T:CMS.DataEngine.IInfoProvider`1"/> implementations.
            Provider types decorated with <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/> are registered as corresponding <see cref="P:CMS.DataEngine.ProviderInterfaceAttribute.ProviderInterface"/> implementations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeProviderManager.registeredProviderInterfaces">
            <summary>
            Collection of provider interface types and provider default implementing types (as specified by type info).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeProviderManager.Instance">
            <summary>
            Gets the <see cref="T:CMS.DataEngine.ObjectTypeProviderManager"/> instance.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeProviderManager.RegisterObjectTypeProvider(System.String,System.Type)">
            <summary>
            <para>
            Registers <paramref name="typeInfoProviderType"/> as an implementation of <see cref="T:CMS.DataEngine.IInfoProvider`1"/> into the IoC container.
            If the provider type being registered does not inherit <see cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>, it is not registered into the container.
            </para>
            <para>
            The method performs a lookup of other provider implementations via the <see cref="M:CMS.DataEngine.InfoProviderLoader.FindInfoProviderType(System.String,CMS.DataEngine.IInfoProvider@,System.Boolean)"/> method and registers them as well.
            </para>
            </summary>
            <param name="objectType">Object type the provider manages.</param>
            <param name="typeInfoProviderType">Provider type as specified in corresponding info object's type info.</param>
            <remarks>
            Info providers associated with multiple type infos result in multiple registrations of the same provider. This method skips already processed <paramref name="typeInfoProviderType"/>s.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeProviderManager.GetProviderInterface(System.Type)">
            <summary>
            Gets corresponding <see cref="T:CMS.DataEngine.IInfoProvider`1"/> for <see cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeProviderManager.ValidateAdditionalProviderInterface(System.Type,System.Type)">
            <summary>
            Validates that <paramref name="additionalProviderInterfaceType"/> is implemented by <paramref name="typeInfoProviderType"/>. If not, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeProviderManager.GetAdditionalProviderInterface(System.Type)">
            <summary>
            Gets additional interface associated with <paramref name="providerImplementingType"/> declared via the <see cref="T:CMS.DataEngine.ProviderInterfaceAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeProviderManager.RegisterCustomObjectTypeProvider(System.Type)">
            <summary>
            <para>
            Registers <paramref name="customProviderType"/> as an implementation of <see cref="T:CMS.DataEngine.IInfoProvider`1"/> into the IoC container.
            If the provider type being registered does not inherit <see cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>, it is not registered into the container and <c>false</c> is returned.
            </para>
            <para>
            The provider type being registered must inherit the original provider type associated with the info object's type info. Otherwise an exception is thrown.
            </para>
            </summary>
            <param name="customProviderType">Custom provider type to be registered.</param>
            <returns>Returns <c>true</c> after performing a registration. Otherwise returns <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="customProviderType"/> does not inherit the original provider as specified in info object's type info.</exception>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeSequenceAnalyzer">
            <summary>
            Provides the sequence of object types ordered by their dependencies.
            Dependencies are returned before the object type on which they depend on.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeSequenceAnalyzer.mProcessedObjectTypes">
            <summary>
            Set of object types that are already processed. Types that are not returned in output sequence are added to this collection as well. Prevents infinite loops.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeSequenceAnalyzer.mReturnedObjectTypes">
            <summary>
            Set of object types that are already part of the final output sequence.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeSequenceAnalyzer.mOutputObjectTypes">
            <summary>
            Set of object types that are designated as output types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeSequenceAnalyzer.mSystemRootObjectTypes">
            <summary>
            Object types that are processed as the first for every sequence. 
            </summary>
            <remarks>
            Every object type depends on its <see cref="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE"/> and <see cref="F:CMS.DataEngine.QueryInfo.OBJECT_TYPE"/> for data manipulation 
            so this object types are processed at the start of the sequence. Data manipulation of certain object types can depend on <see cref="F:CMS.DataEngine.SettingsKeyInfo.OBJECT_TYPE"/> values
            so they also need to be processed at the start of the sequence.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeSequenceAnalyzer.ObjectTypes">
            <summary>
            List of input object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeSequenceAnalyzer.AvailableTypes">
            <summary>
            List of available object types
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeSequenceAnalyzer.Log">
            <summary>
            Log action for individual items. The action is called with three parameters - the log message, indentation level and whether a cycle has been detected.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.#ctor(CMS.DataEngine.IObjectTypeFilter)">
            <summary>
            Creates an instance of <see cref="T:CMS.DataEngine.ObjectTypeSequenceAnalyzer"/> class.
            </summary>
            <param name="filter">Filtering logic for the output collection.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.#ctor(CMS.DataEngine.IObjectTypeFilter,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of <see cref="T:CMS.DataEngine.ObjectTypeSequenceAnalyzer"/> class.
            </summary>
            <param name="filter">Filtering logic for the output collection.</param>
            <param name="types">Object types to be ordered.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetSequence">
            <summary>
            Gets the ordered sequence of object types
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetSequenceWithBindings(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Returns each element of given sequence along with its bindings that do not have any unprocessed dependency.
            </summary>
            <param name="sequence">Sequence of ordered object type infos.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetRelatedBindingsWithProcessedDependencies(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets all bindings related to given object type that have all their dependencies already processed.
            </summary>
            <param name="typeInfo">Type info which bindings are returned</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.HasObjectTypeUnprocessedDependencies(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if one or more dependency types of given type info haven't been processed yet.
            </summary>
            <param name="typeInfo">Type info which dependencies are checked</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.HasObjectTypeUnprocessedOutputDependencyInDependencyHierarchy(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if given type info has any unprocessed output object type in its dependency hierarchy.
            </summary>
            <param name="typeInfo">Type info which dependencies are checked</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetRootSequence(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the ordered sequence of root object types that have no dependency.
            Unprocessed dependent object types will be stored in <see cref="F:CMS.DataEngine.ObjectTypeSequenceAnalyzer.mDependantObjectTypes"/> collection
            when enumeration of all returned items is finished.
            Unprocessed object types with dynamic dependency will be stored in <see cref="F:CMS.DataEngine.ObjectTypeSequenceAnalyzer.mDynamicDependantObjectTypes"/> collection
            when enumeration of all returned items is finished.
            </summary>
            <param name="objectTypes">Object types to process</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.InstantiateAnalyzer(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Instantiate analyzer that can be used for inspecting object type dependencies and has its own state.
            </summary>
            <param name="processedObjectTypes">List of processed object types to be used by the analyzer instance</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetSequence(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Func{CMS.DataEngine.ObjectTypeInfo,System.Boolean},System.Boolean)">
            <summary>
            Gets the ordered sequence of object types
            </summary>
            <param name="objectTypes">Object types to process</param>
            <param name="indent">Current indentation</param>
            <param name="condition">Additional condition for the given type</param>
            <param name="isChild">If true, the processed object type is in child relationship to the object type processed above</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetSequence(CMS.DataEngine.ObjectTypeInfo,System.Int32,System.Boolean)">
            <summary>
            Gets a dependency sequence for the given object type
            </summary>
            <param name="typeInfo">Object type info</param>
            <param name="indent">Current indentation</param>
            <param name="isChild">If true, the processed object type is in child relationship to the object type processed above</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetDependencyTypes(CMS.DataEngine.ObjectTypeInfo,System.Boolean)">
            <summary>
            Collects all dependencies of given type, including the parent and site.
            </summary>
            <param name="typeInfo">TypeInfo to  collect dependencies from.</param>
            <param name="getParentTypes">Indicates whether the parent object type(s) should be returned.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.GetObjectTypeListItems(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates object type list items for the given object type.
            </summary>
            <param name="typeInfo">Object type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.IsSiteObject(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the object is site object.
            </summary>
            <param name="typeInfo">Object type info to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeSequenceAnalyzer.HasDynamicDependency(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the given object type has any dynamic dependency.
            </summary>
            <param name="typeInfo">Object type info to check</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeTreeNode">
            <summary>
            Class for parsing XML tree with staging objects.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeTreeNode.OnBeforeCreateNodeHandler">
            <summary>
            Delegate for handling the OnBeforeCreate action of the tree node.
            </summary>
            <param name="source">Source node</param>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.ParentNode">
            <summary>
            Parent node of actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.ChildNodes">
            <summary>
            List of child nodes of actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Group">
            <summary>
            Group where belongs actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.ObjectType">
            <summary>
            Object type of actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Module">
            <summary>
            Module where belongs actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Site">
            <summary>
            Indicates if actual node belongs to site.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Expand">
            <summary>
            Indicates if actual node is expanded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Main">
            <summary>
            Indicates if actual node is main.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Active">
            <summary>
            Indicates if actual node is Active.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.Key">
            <summary>
            Node key
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeTreeNode.SortChildren">
            <summary>
            If true, children of this node are sorted
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor which creates group tree node
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.#ctor(System.String,CMS.DataEngine.ObjectTreeLocation,System.Boolean)">
            <summary>
            Constructor which creates the tree node from location
            </summary>
            <param name="objectType">Object type</param>
            <param name="location">Tree location</param>
            <param name="parentSiteValue">Parent site value</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.AddObjectType(System.String,System.Action{CMS.DataEngine.ObjectTypeTreeNode},System.Boolean)">
            <summary>
            Creates a new empty object type tree. Returns identity
            </summary>
            <param name="objectType">Object type</param>
            <param name="setup">Sets up the newly created node</param>
            <param name="atStart">If true, the node is added to the start of the list</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.AddGroup(System.String,System.Boolean,System.Action{CMS.DataEngine.ObjectTypeTreeNode},System.Boolean)">
            <summary>
            Creates a new empty object type tree. Returns identity
            </summary>
            <param name="groupName">Name of the root group</param>
            <param name="main">If true, the group is main group</param>
            <param name="groupSetup">Sets up the newly created node</param>
            <param name="atStart">If true, the node is added to the start of the list</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.NewObjectTree(System.String)">
            <summary>
            Creates a new empty object type tree
            </summary>
            <param name="rootGroup">Name of the root group</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.GetObjectTypes(System.Boolean)">
            <summary>
            Returns all object types of given node or child tree separated by semicolon.
            </summary>
            <param name="childNodes">Indicates if child object types should be included</param>
            <returns>String of object types separated by semicolon</returns>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.RemoveNode(System.String,System.Boolean)">
            <summary>
            Find the node with matching object type.
            </summary>
            <param name="objectType">Object type to find</param>
            <param name="siteNode">Site node</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.FindNode(System.String,System.Boolean)">
            <summary>
            Find the node with matching object type.
            </summary>
            <param name="objectType">Object type to find</param>
            <param name="siteNode">Site node</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.FindNode(System.String,System.Boolean,CMS.DataEngine.ObjectTypeTreeNode@)">
            <summary>
            Find the node with matching object type.
            </summary>
            <param name="objectType">Object type to find</param>
            <param name="siteNode">Site node</param>
            <param name="parentNode">Parent node</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.EnsureNode(System.String)">
            <summary>
            Ensures node with the given relative path
            </summary>
            <param name="relativePath">Relative path</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.AddChild(CMS.DataEngine.ObjectTypeTreeNode,System.Boolean)">
            <summary>
            Adds the given child
            </summary>
            <param name="child">Child to add</param>
            <param name="atStart">If true, the node is added to the start of the list</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeTreeNode.GetChild(System.String)">
            <summary>
            Gets a child node by its name
            </summary>
            <param name="key">Child key</param>
        </member>
        <member name="T:CMS.DataEngine.ProviderRegistrationPriority">
            <summary>
            Specifies registration priorities of info providers during application pre-initialization.
            </summary>
            <seealso cref="T:CMS.Core.Internal.ProcessingPriorityAttribute"/>
        </member>
        <member name="F:CMS.DataEngine.ProviderRegistrationPriority.DEFAULT">
            <summary>
            Default provider priority.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ProviderRegistrationPriority.CUSTOM">
            <summary>
            Custom provider priority.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DynamicObjectTypeInfo">
            <summary>
            Dynamic object type info structure for objects which definition can be changed during the lifetime.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DynamicObjectTypeInfo.IsValid">
            <summary>
            Indicates if dynamic type info is valid and shouldn't be updated based on current state of definition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicObjectTypeInfo.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerType">Provider type</param>
            <param name="objectType">Object type</param>
            <param name="objectClassName">Object class name</param>
            <param name="idColumn">ID column name</param>
            <param name="timeStampColumn">Time stamp column name</param>
            <param name="guidColumn">GUID column name</param>
            <param name="codeNameColumn">Code name column name</param>
            <param name="displayNameColumn">Display name column name</param>
            <param name="binaryColumn">Binary column name</param>
            <param name="siteIDColumn">Site ID column name</param>
            <param name="parentIDColumn">Parent ID column name</param>
            <param name="parentObjectType">Parent object type</param>
        </member>
        <member name="T:CMS.DataEngine.IncludeToParentEnum">
            <summary>
            Determines whether objects of child types are included into the export/staging data of parent objects.
            </summary>
            <remarks>
            Use for the values of the <see cref="T:CMS.DataEngine.SynchronizationSettings"/>.<see cref="P:CMS.DataEngine.SynchronizationSettings.IncludeToSynchronizationParentDataSet"/> and <see cref="T:CMS.DataEngine.ImportExportSettings"/>.<see cref="P:CMS.DataEngine.ImportExportSettings.IncludeToExportParentDataSet"/> properties.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.None">
            <summary>
            Objects of the child type are not included in the data of parent objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.Complete">
            <summary>        
            The data of parent objects includes all existing child objects of the given type.
            Import/staging adds new child objects or updates existing ones. Deletes child objects that exist on the target instance, but are missing in the data of the updated parent.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.Incremental">
            <summary>        
            The data of parent objects includes all existing child objects of the given type.
            Import/staging adds new child objects or updates existing ones. Does not delete child objects that exist on the target instance, but are missing in the data of the updated parent.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.IncludeToParentEnum.Default">
            <summary>
            Default inclusion. Do NOT assign this value manually.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependencyEnum">
            <summary>
            Stores options for handling the referential integrity of references between object types (foreign keys).
            </summary>
            <remarks>    
            Use for the value of the 'required' parameter when creating <see cref="T:CMS.DataEngine.ObjectDependency"/> or <see cref="T:CMS.DataEngine.ExtraColumn"/> objects within type information definitions.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.Required">
            <summary>
            Required reference without a default value. For objects that do not make sense without having the reference set.
            If the referenced object is deleted, the system automatically deletes the entire object containing the reference.
            If the target object does not exist during import or staging, the operation is cancelled for the given object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.RequiredHasDefault">
            <summary>        
            If the referenced object is deleted or does not exist on the target instance during import or staging, the system automatically assigns a default object.
            To set the default object, override the <see cref="M:CMS.DataEngine.BaseInfo.GetDefaultObject"/> method in the code of the given Info class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.NotRequired">
            <summary>
            Represents an optional reference. Use for objects that make sense without having the reference set.
            The reference column must support null values.
            If the referenced object is deleted or does not exist on the target instance during import or staging, the system sets a null value for the reference.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectDependencyEnum.Binding">
            <summary>
            Use for the reference fields of dedicated binding classes (classes that only represent relationships between other classes).
            Binding references are required. If the referenced object is deleted, the system automatically deletes the entire binding record.
            If the target object does not exist during import or staging, the operation is cancelled for the given binding record.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SynchronizationTypeEnum">
            <summary>
            Determines how the system logs staging synchronization tasks for object types.
            </summary>
            <remarks>
            Use for the value of the <see cref="P:CMS.DataEngine.SynchronizationSettings.LogSynchronization"/> property.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.None">
            <summary>
            The system does not log staging tasks for objects of the type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.LogSynchronization">
            <summary>
            The system logs staging tasks when objects of the type are created, updated or deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.TouchParent">
            <summary>        
            For object types that have a parent type. Creating, modifying or deleting an object of the child type triggers an update of the parent object.
            The update generates staging tasks according to the SynchronizationSettings of the parent type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationTypeEnum.Default">
            <summary>
            Default value used internally. Do NOT assign this value manually in the object type information.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo">
            <summary>
            Object type info structure.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.VALUE_UNKNOWN">
            <summary>
            Uknown value.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.COLUMN_NAME_UNKNOWN">
            <summary>
            Uknown column name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mObjectDependencies">
            <summary>
            Object dependencies (list of foreign keys definition of the object with the exception of SiteID column and ParentID columns).
            Automatically computed from Extends and DependsOn lists of all objects within the system.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectTypeInfo.mRememberUniGridState">
            <summary>
            Indicates whether UniGrids working with objects of this type will remember their state, i.e., filter, page number, page size and sorting order.
            </summary>
            <remarks>
            This setting can be overridden by individual UniGrids.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogSiteBindings">
            <summary>
            If true, object tasks are logged when site binding changes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.GlobalLogSynchronization">
            <summary>
            If true, object tasks are logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TrackObjectInstances">
            <summary>
            If true, object instances are tracked.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RelatedTypes">
            <summary>
            Returns dictionary of related typeinfos (the relationship is made from OriginalTypeInfo property, but reflects the relationship from both sides). [objectType] => [List of related object types]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DeleteAsDependency">
            <summary>
            Indicates if object should be deleted when removing dependencies of other object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TypeCondition">
            <summary>
            Condition which can distinguish between several object types within one Info class. This is used for two purposes - first to generate correct type WHERE condition
            which is used in GetData (for example) and for correct object initialization when creating empty BaseInfo objects for the specified object type.
            If you need to specify a more complex WHERE condition, use the WhereCondition property which has higher priority.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RelatedTypeInfos">
            <summary>
            Returns list of related TypeInfos of this TypeInfo (the relationship is made from OriginalTypeInfo property, but reflects the relationship from both sides).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LastObjectInvalidated">
            <summary>
            Last time of the object invalidation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ColumnsInvalidated">
            <summary>
            Indicates whether column names are invalidated. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SynchronizationSettings">
            <summary>
            Defines how Staging features work with the object type's data. Set through the properties of the SynchronizationSettings class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ImportExportSettings">
            <summary>
            Defines how the object type works with the Export and Import features. Set through the properties of the ImportExportSettings class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsDataObjectType">
            <summary>
            Indicates if the object is dynamic based on data in the DB (e.g. custom table item or biz form item object types).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsMultipleBinding">
            <summary>
            Indicates if the object is binding between more than two objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsMainObject">
            <summary>
            Indicates if the object is main (= is not child of other objects).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ReferenceColumnNames">
            <summary>
            Names of the columns that reference some object.
            </summary>
            <remarks>
            Includes the <see cref="P:CMS.DataEngine.ObjectTypeInfo.SiteIDColumn"/>, <see cref="P:CMS.DataEngine.ObjectTypeInfo.ParentIDColumn"/> and <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectDependencies"/> (except the dynamic object type dependencies, see <see cref="M:CMS.DataEngine.ObjectDependency.HasDynamicObjectType"/>).
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.MacroCollectionName">
            <summary>
            Gets or sets name of object collection used for the object type's data in the macro engine.
            If not set, the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectClassName"/> is used by default.
            </summary>
            <remarks>
            <para>
            Should be set when info object belongs to <see cref="P:CMS.DataEngine.ObjectTypeManager.MainObjectTypes"/> and has more than 1 <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            </para>
            <para>
            If <see cref="P:CMS.DataEngine.ObjectTypeInfo.MacroCollectionName"/> is set to 'cms.role' then macro intellisense supplies hint for user as 'Roles' because of
            <see cref="M:CMS.DataEngine.InfoObjectRepository`3.GetNicePropertyName(System.String)"/> method used internally
            by <see cref="T:CMS.DataEngine.InfoObjectRepository`3" />.
            </para>
            <para>
            Value of this property is used in Kentico macro engine for acquiring objects of given type, e.g. SiteObjects.Roles or GlobalObjects.Roles.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IDColumn">
            <summary>
            The name of the class field (column) that stores the IDs of objects (i.e. the primary key column). Can be null in rare cases, for example binding objects without an identity column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TimeStampColumn">
            <summary>
            The name of the class field (column) that stores the last modification date for objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.GUIDColumn">
            <summary>
            The name of the class field (column) that stores the GUID identifiers of objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CodeNameColumn">
            <summary>
            The name of the class field (column) that stores the unique text identifiers of objects. Can be null for object types without a dedicated code name column.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.NameGloballyUnique">
            <summary>
            If true, the system validates the code names of objects to be unique across both global and site-related objects.
            If false, global objects can have the same code name as a site-specific object. The default value is false.
            Applies to object types with a specified SiteIDColumn that also have the SupportsGlobalObjects property set to true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DisplayNameColumn">
            <summary>
            The name of the class field (column) that stores the visible names of objects (names used in the administration interface or on the live site).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.BinaryColumn">
            <summary>
            The name of the class field (column) that stores binary data for objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OrderColumn">
            <summary>
            The name of the class field (column) that stores the order of objects (for object types that have a defined order).
            Allows automatic actions for changing object order on listing pages (in UniGrid components).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SearchContentColumn">
            <summary>
            The name of the class field (column) that stores cached content extracted for this Info object to be used in search indexing.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CustomizedColumnsColumn">
            <summary>
            The name of the class field (column) that contains customized columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsCustomColumn">
            <summary>
            Column name of the info record for flag IsCustom.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SiteIDColumn">
            <summary>
            The name of the class field (column) that stores site IDs for site-related objects.
            Only use the site ID column if the object does not have a separate binding object type for the site relationship.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ParentIDColumn">
            <summary>
            The name of the class field (column) that stores the IDs of parent objects. Null for object types without a parent object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.PossibleParentIDColumn">
            <summary>
            Possible parent ID column name of the info record in case the parent ID column is optional (if the object can be both global and child).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.GroupIDColumn">
            <summary>
            The name of the class field (column) that stores group IDs for objects related to specific community groups.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ResourceIDColumn">
            <summary>
            The name of the class field (column) that stores ID referencing a module (resource) in Kentico. Intended for object types whose objects have a relationship with a specific module.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.MimeTypeColumn">
            <summary>
            Intended for object types that store binary data. Sets the name of the class field (column) that stores the mime type of the binary data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ExtensionColumn">
            <summary>
            Intended for object types that store binary data. Sets the name of the class field (column) that stores the extension type of the binary data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.EnabledColumn">
            <summary>
            The name of the class field (column) that indicates whether objects are enabled or disabled.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SizeColumn">
            <summary>
            Intended for object types that store binary data. Sets the name of the class field (column) that stores the size of the binary data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ThumbnailGUIDColumn">
            <summary>
            Name of the column that contains the GUID of the object thumbnail meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IconGUIDColumn">
            <summary>
            Name of the column that contains the GUID of the object icon meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ThumbnailMetaFileGroup">
            <summary>
            Name of the meta file group of the thumbnail meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IconMetaFileGroup">
            <summary>
            Name of the meta file group of the icon meta file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ModuleName">
            <summary>
            The code name of the module under which the object type belongs. Always required for all object type information definitions.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.VersionGUIDColumn">
            <summary>
            The name of the class field (column) that stores the GUID identifiers for individual versions of objects.
            Intended for object types that support versioning.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CodeColumn">
            <summary>
            Name of the column that contains code of the object (markup).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CSSColumn">
            <summary>
            Name of the column that contains CSS of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ModuleInfo">
            <summary>
            Gets the ModuleInfo object based on the value of the ModuleName property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AssemblyNameColumn">
            <summary>
            The name of the class field (column) that stores the assembly name of a related class in the project's code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.FormDefinitionColumn">
            <summary>
            Form definition column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SerializationSettings">
            <summary>
            Determines how the system serializes objects of the given type from the database into XML files. Set through the properties of the <see cref="P:CMS.DataEngine.ObjectTypeInfo.SerializationSettings"/> class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.MacroSettings">
            <summary>
            Determines how the system processes macros contained in the fields of the given type. Set through the properties of the <see cref="T:CMS.DataEngine.MacroProcessingSettings"/> class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ContinuousIntegrationSettings">
            <summary>
            Determines how the object behaves within continuous integration. Set through the properties of the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ContinuousIntegrationSettings"/> class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DefaultOrderBy">
            <summary>
            Default order by clause for getting data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ProviderType">
            <summary>
            The type of the object's InfoProvider class. Required for all object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ParentTypeInfo">
            <summary>
            Gets the ObjectTypeInfo instance representing the parent object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ProviderObject">
            <summary>
            Gets an instance of the provider class set for the object type (specified by the ProviderType property).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectType">
            <summary>
            The primary identifier string for the object type.
            This identifier is used to select object types in the API, user interface components (UniGrid, UniSelector), REST calls, etc.
            Required for all object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectClassName">
            <summary>
            The code name assigned to the matching module class in the Kentico administration interface. Identifies the object types's definition in the database. Required for all object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ClassStructureInfo">
            <summary>
            Class structure information. If not set explicitly, it is retrieved automatically by class name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ParentObjectType">
            <summary>
            The object type name of the parent (as defined in the type information of the parent object type). Null for object types without a parent object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ChildDependencyColumns">
            <summary>
            Name of the columns (separated by semicolon) of object dependencies which should be included into the parent data (for example class data for BizForms).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectDependenciesInternal">
            <summary>
            Object dependencies (list of foreign keys definition of the object with the exception of SiteID column and ParentID columns).
            Automatically computed from <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> and <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> lists of all objects within the system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectDependencies">
            <summary>
            Object dependencies (list of foreign keys definition of the object with the exception of SiteID column and ParentID columns).
            Automatically computed from <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> and <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> lists of all objects within the system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsComposite">
            <summary>
            Returns true if object is a composite object. Object consists of several partial objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CompositeObjectType">
            <summary>
            Composite object type - type of the object which is a composite object for this object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ConsistsOf">
            <summary>
            Defines the list of object types that are part of this composite object. If the object is not a composite object, this property is not initialized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Extends">
            <summary>
            List of ExtraColumn instances that extend other object types by defining a reference (foreign key) pointing to this object type.
            Allows the system to maintain referential integrity of relationships when importing or staging objects, or perform chain deleting of objects together with referenced objects.
            </summary>
            <remarks>
            If possible, use the <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property to define the reference directly in the type info of the related object type.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DependsOn">
            <summary>
            List of ObjectDependency instances that define references (foreign keys) pointing to other objects that are directly visible.
            Allows the system to maintain referential integrity of relationships when importing or staging objects, or perform chain deleting of objects together with referenced objects.
            Do not include site or parent references that are specified by the SiteIDCOlumn and ParentIDColumn properties.
            </summary>
            <remarks>
            For foreign keys of objects belonging to other modules not visible by this module, define the reference externally using the <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/>
            property in the type info of the related object.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DependsOnIndirectly">
            <summary>
            List of object types on which this object type depends on indirectly. Indirectly means there is no column with reference pointing to object of specified object type.
            Allows the system to maintain chain of dependencies between object types.
            Do not include direct dependencies like parent, site or dependencies specified by <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ChildObjectTypes">
            <summary>
            Gets list of child object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.BindingObjectTypes">
            <summary>
            Gets list of binding object types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OtherBindingObjectTypes">
            <summary>
            Gets list of other binding types - binding types where this object participate but is not parent object of those binding types.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SiteBindingObject">
            <summary>
            Gets the Info class of the binding class that stores relationships between the given class and sites (if such a site binding class exists).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SiteBinding">
            <summary>
            Gets the object type name of the binding class that stores relationships between the given class and sites (if such a site binding class exists).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CategoryObject">
            <summary>
            Empty read-only instance of the category object (if this type has a category object)
            For example settings key will have a SettingsCategoryInfo object here.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CategoryIDColumn">
            <summary>
            Category ID column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.UpdateTimeStamp">
            <summary>
            If true, timestamp of the object is updated when saved.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogIntegration">
            <summary>
            Determines whether the system logs integration bus synchronization tasks for objects of the type. True by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowTouchParent">
            <summary>
            Indicates if parent is allowed to be touched, if exists. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsVersioning">
            <summary>
            Determines whether the object type supports object versioning. The default value is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IncludeToVersionParentDataSet">
            <summary>
            Determines if objects of the given type are included in the version data of parent objects. True by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsLocking">
            <summary>
            Determines whether the object type supports object locking (check out and check in). The default value is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ContainsMacros">
            <summary>
            Indicates whether the object type has fields that can contain macro expressions in their values. Determines if objects are processed when resigning macros in the system.
            True by default. You can set the value to False to optimize the performance of the resigning process (during manual resigning and upgrades).
            Does not affect the resolving of macros.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsCloning">
            <summary>
            Indicates whether the system allows cloning for objects of the given type. True by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsCloneToOtherSite">
            <summary>
            Indicates whether objects of the type can be cloned to a different site than the site of the original object. True by default.
            Applies to object types with a specified SiteIDColumn.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.LogEvents">
            <summary>
            Indicates whether the system logs events into the Event log when objects of the type are updated. False by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.TouchCacheDependencies">
            <summary>
            Indicates whether the corresponding dummy cache keys (dependencies) are touched when an object of the type is modified.
            This causes the cache to delete all items that depend on the given dummy keys. The default value is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RequiredObject">
            <summary>
            If true, the object is required when imported / synchronized. If false, the object can be skipped when some error occurs. Default is true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasMetaFiles">
            <summary>
            If true, the objects can have meta files. By default no metafiles to simplify general processes
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasProcesses">
            <summary>
            If true, the processes can be run on the objects. By default no processes to simplify general processes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasExternalColumns">
            <summary>
            If true, the object has externally stored columns. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasScheduledTasks">
            <summary>
            If true, the scheduled tasks can be run on the objects. By default no scheduled tasks to simplify general processes.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsSiteObject">
            <summary>
            Returns true for site-related object types.
            is true if the SiteIDColumn or GroupIDColumn property is set in the type information, or if the object type has a site-related parent.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsBinding">
            <summary>
            Indicates whether the object type represents a relationship between two or more object types. Setting to true forces the object type to behave as a binding.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.UseUpsert">
            <summary>
            Indicates whether the object can use upsert. If not set, the value is inferred from <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> (only binding objects can use upsert by default).
            Setting this property to any value overrides the default behavior.
            </summary>
            <remarks>
            When set to true, objects with ID value set are updated as usual. If their ID is not set, then upsert is used.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsCategory">
            <summary>
            Indicates whether the object type represents a category for organizing other objects in a tree hierarchy (for example web part categories).
            The default value is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DeleteObjectWithAPI">
            <summary>
            If true, the object is always deleted using API methods in the remove dependencies phase, not the generated queries. Use for objects where additional actions are performed during deletion. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CheckDependenciesOnDelete">
            <summary>
            If true, the system prevents objects of the type from being deleted if they are the target of a required reference for at least one other object in the system.
            Applies to object types that are the target of a Required type reference from another object type.
            The CheckDependencies procedure is first called within the remove dependencies procedure and if there are some, the remove dependencies procedure
            throws an exception and does not continue.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.CheckPermissions">
            <summary>
            Determines whether the system checks read permissions for the given module when accessing objects of the type in the macro engine. True by default.
            The permissions are checked for the user who saved the macro, not the user viewing the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsSiteBinding">
            <summary>
            Returns true if the object is site binding.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsSelfBinding">
            <summary>
            Identifies binding classes that connect two objects of the same type = the binding's parent type is the same as the object dependency type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowDataExport">
            <summary>
            Indicates whether the system allows users to export the object type's data into files of various formats from listings (UniGrid).
            True by default for all objects except for binding objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsInvalidation">
            <summary>
            If true, the object is automatically invalidated upon it's change. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsGlobalObjects">
            <summary>
            If true, the system allows both site-related objects and global objects whose value in the site ID column is null (for example polls).
            Applies to object types with a specified SiteIDColumn. False by default. Must be true if you wish to use export or staging for global objects of the given type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Feature">
            <summary>
            Get/sets info's feature for license check
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InvalidatedObjects">
            <summary>
            Table of invalidated objects [ID] -> [Invalidated when].
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InvalidatedChildren">
            <summary>
            Table of invalidated direct child objects [ParentID] -> [Invalidated when].
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.InstanceCount">
            <summary>
            Gets the number of registered isntances.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ForeignKeys">
            <summary>
            List of the foreign keys columns.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.AllowRestore">
            <summary>
            Determines whether the system stores deleted objects of the type in the recycle bin.
            By default the value is true for all objects with allowed synchronization or versioning except for binding objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ProviderIsCustomizable">
            <summary>
            Indicates if provider supports methods customization
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsListingObjectTypeInfo">
            <summary>
            Indicates if the object type info is used as read-only data source for listing controls such as grids or selectors.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OriginalTypeInfo">
            <summary>
            Original object type of virtual object types. For normal object type it's null.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType">
            <summary>
            Original object type of virtual object types. For normal object type it's same as object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.WhereCondition">
            <summary>
            Default where condition restricting the data of this particular object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasAutomaticProperties">
            <summary>
            If true, the object of this type has got some automatic properties
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RememberUniGridState">
            <summary>
            Indicates whether listing pages (UniGrids) that display the object type's data remember the listing state for individual users
            The listing state includes filtering options, page number, page size and item order.
            </summary>
            <remarks>
            This property can be overridden by individual UniGrids.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.MaxCodeNameLength">
            <summary>
            Maximum length of the object code name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DefaultData">
            <summary>
            Default data exported within installation. Affects default data and web template data export.
            </summary>
            <remarks>
            This property is for internal use only and should not be used in custom code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.IsVirtualObject">
             <summary>
             Indicates if object is stored in DB or only in memory.
            
             If true, object is stored in memory and cannot be queried by SQL. Default is false.
             </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn">
            <summary>
            Intended for objects that have a hierarchical tree structure. Sets the name of the class field (column) that stores the path of objects in the hierarchy structure.
            You can also set the path column separately for paths built out of objects names or object IDs through the ObjectNamePathColumn and ObjectIDPathColumn properties.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectIDPathColumn">
            <summary>
            Intended for objects that have a hierarchical tree structure.
            Sets the name of the class field (column) that stores the path of objects in the hierarchy structure, consisting of object IDs.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectNamePathColumn">
            <summary>
            Intended for objects that have a hierarchical tree structure.
            Sets the name of the class field (column) that stores the path of objects in the hierarchy structure, consisting of object names.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.ObjectLevelColumn">
            <summary>
            Intended for objects that have a hierarchical tree structure. Sets the name of the class field (column) that stores the depth of objects in the hierarchy structure.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RegisterAsChildToObjectTypes">
            <summary>
            If set (= not null), then the automatic process of registering the object type in the ChildObjectTypes list is bypassed and the registration is
            forced to the types specified in this list.
            Only use if you need to register multiple parent types (if the parent has multiple type info definitions).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RegisterAsBindingToObjectTypes">
            <summary>
            If set (= not null), than the automatic process of registering the object type in the BindingObjectTypes list is bypassed and the registration is
            forced to the specified types in this list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.RegisterAsOtherBindingToObjectTypes">
            <summary>
            If set (= not null), than the automatic process of registering the object type in the OtherBindingObjectTypes list is bypassed and the registration is
            forced to the specified types in this list.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SensitiveColumns">
            <summary>
            Specifies a list of class fields (columns) that the system excludes from the macro engine, data retrieved by the REST service and event logging.
            Can be used to protect fields with sensitive values, for example passwords.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.SupportsSearch">
            <summary>
            Indicates if object can be searched. Default is true for main objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.NestedInfoTypes">
            <summary>
            List of nested info object types that contain the data internally
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.HasObjectSettings">
            <summary>
            Indicates if the object can have object settings. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.DependentObjectTypes">
            <summary>
            Specifies object types somehow dependent on the current object type (as parent, site, group or via foreign key). Skips inherited object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="providerType">The type of the object's InfoProvider class. Required for all object types.</param>
            <param name="objectType">The primary identifier string for the object type. Required for all object types.</param>
            <param name="objectClassName">The code name assigned to the matching module class in the administration interface. Required for all object types.</param>
            <param name="idColumn">The name of the class field (column) that stores the IDs of objects (primary key). Can be null in rare cases, for example binding objects without an identity column.</param>
            <param name="timeStampColumn">The name of the class field (column) that stores the last modification date for objects.</param>
            <param name="guidColumn">The name of the class field (column) that stores the GUID identifiers of objects.</param>
            <param name="codeNameColumn">The name of the class field (column) that stores the unique text identifiers of objects. Can be null for object types without a dedicated code name column.</param>
            <param name="displayNameColumn">The name of the class field (column) that stores the names of objects used in the administration interface and on the live site.</param>
            <param name="binaryColumn">The name of the class field (column) that stores binary data for objects.</param>
            <param name="siteIDColumn">The name of the class field (column) that stores site IDs for site-related objects. Only use the site ID column if the object does not have a separate binding object type for the site relationship.</param>
            <param name="parentIDColumn">The name of the class field (column) that stores the IDs of parent objects. Null for object types without a parent object.</param>
            <param name="parentObjectType">The object type name of the parent. Null for object types without a parent object.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.CreateListingObjectTypeInfo(System.String,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates a new instance of listing object type info
            </summary>
            <remarks>
            Listing object type info is used as read-only data source for listing controls such as grids or selectors.
            </remarks>
            <param name="objectType">Listing object type</param>
            <param name="sourceInfo">Source object type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InitListingObjectTypeInfo(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes given <paramref name="listInfo"/> type info as listing type with values from <paramref name="sourceInfo"/>.
            </summary>
            <param name="sourceInfo">Source type info</param>
            <param name="listInfo">Listing type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetObjectDependencies">
            <summary>
            Returns list of <see cref="T:CMS.DataEngine.ObjectDependency"/> of current <see cref="T:CMS.DataEngine.ObjectTypeInfo"/> that is combination
            of <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/>, <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> and the other object types that extends current <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetExtendedDependencyObjectTypes">
            <summary>
            Returns all object types with extended dependency on current object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IsRelatedTo(System.String)">
            <summary>
            Returns true if this object type is the same or has the same original type.
            </summary>
            <remarks>
            Object type is considered related if either <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectType"/>, <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/> or <see cref="P:CMS.DataEngine.ObjectTypeInfo.RelatedTypeInfos"/> equal to the given object type.
            </remarks>
            <param name="objType">ObjectType to compare with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.HostsComponentType(System.String)">
            <summary>
            Returns true if this object type is a composite that consists of given type (<see cref="P:CMS.DataEngine.ObjectTypeInfo.ConsistsOf"/>).
            </summary>
            <param name="objType">Component type to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RepresentsType(System.String)">
            <summary>
            Returns true is this object type is related to (<see cref="M:CMS.DataEngine.ObjectTypeInfo.IsRelatedTo(System.String)"/>) or hosts (<see cref="M:CMS.DataEngine.ObjectTypeInfo.HostsComponentType(System.String)"/>) the given type.
            </summary>
            <param name="objType">ObjectType to compare with</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetOriginalObjectType">
            <summary>
            Gets the original object type of virtual object types. For normal object type it's same as object type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDependencyReferences">
            <summary>
            Returns all direct dependency relations of current object.
            </summary>
            <remarks>
            Related types of dependent types are not returned, only the primary dependent type.
            Dependent object types consists of types defined in <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property, and child types.
            In case that current object type represents site or group, then also site or group objects are included.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDynamicDependencyReferences">
            <summary>
            Returns all dynamic dependency relations of current object.
            </summary>
            <remarks>
            All dynamic dependencies of all objects in the system are returned with following exceptions:
            Metafiles dependency is returned only when <see cref="P:CMS.DataEngine.ObjectTypeInfo.HasMetaFiles"/> is set to true.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.LoadDependentObjectTypes">
            <summary>
            Gets the object types somehow dependent on the current object type (as parent, site, group or via foreign key). Skips inherited object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.AddDependentObjectType(System.Collections.Generic.ISet{System.String},CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            When component (partial) object type claims that he depends on current type, then composite object (complete object) is dependent on the type.
            When current object is part of the same composite then preserve object type of dependent type.
            Component object types can have relations that don't exists between instances of composite objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.LoadRelatedTypes">
            <summary>
            Loads the related types for all type infos [objectType] => [List of related object types]
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.EnsureCategoryInfo">
            <summary>
            Initializes the category info.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetCategoryInfo">
            <summary>
            Gets the category info for current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetSiteBindingObject">
            <summary>
            Gets the site binding object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.HasBindingTypeDependencies">
            <summary>
            Returns true if the object has at least one Object dependency of type Binding.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.CopyEventsTo(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Copies the event's hooks from current ObjectTypeInfo to specified one.
            </summary>
            <param name="info">Target.</param>
            <remarks>Do not use in custom code!</remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetFirstKnownColumn(System.String[])">
            <summary>
            Gets the first known column from the given list of columns
            </summary>
            <param name="columns">Columns to select from</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetTypeWhereCondition">
            <summary>
            Generates default WHERE condition according to GroupColumn and TypeCondition settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ApplyTypeCondition(CMS.Base.IDataContainer)">
            <summary>
            Applies condition defined in TypeCondition property to the given info. Returns info without changes if TypeCondition is null.
            </summary>
            <param name="info">Info to apply condition to</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetObjectTypeForColumn(System.String)">
            <summary>
            Gets the object type for the given column or null if the object type is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDependencyForColumn(System.String)">
            <summary>
            Gets the dependency settings for the given column or null if the settings is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetTypeColumns(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns column name collection of specified object type.
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetTypeColumns(System.String)">
            <summary>
            Returns column name collection of specified object type.
            </summary>
            <param name="objectType">Object type name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IncludeToParentDataSet(CMS.DataEngine.OperationTypeEnum)">
            <summary>
            Gets value of appropriate include to parent data set property due to operation.
            </summary>
            <param name="operation">Operation type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ObjectInvalidated(System.Int32,System.Boolean)">
            <summary>
            Invalidates specific object.
            </summary>
            <param name="objectId">Object ID to invalidate</param>
            <param name="logTask">If true web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ObjectInvalidatedInternal(System.Int32,System.DateTime)">
            <summary>
            Invalidates specific object to the specific time.
            </summary>
            <param name="objectId">Object ID to invalidate</param>
            <param name="now">Time of invalidation</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ChildrenInvalidated(System.Int32,System.Boolean)">
            <summary>
            Invalidates direct child objects of specific parent.
            </summary>
            <param name="parentId">Parent object ID</param>
            <param name="logTask">If true web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.ChildrenInvalidatedInternal(System.Int32,System.DateTime)">
            <summary>
            Invalidates direct child objects of specific parent to the specific time.
            </summary>
            <param name="parentId">Parent object ID</param>
            <param name="now">Time of invalidation</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateAllObjects">
            <summary>
            Invalidates all objects of this type.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateAllObjects(System.Boolean)">
            <summary>
            Invalidates all objects of this type.
            </summary>
            <param name="logTask">If true, web farm task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateAllObjectsInternal(System.DateTime)">
            <summary>
            Invalidates all objects of this type to specific time.
            </summary>
            <param name="now">Time of invalidation</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateColumnNames">
            <summary>
            Invalidates column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InvalidateColumnNames(System.Boolean)">
            <summary>
            Invalidates column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IsObjectInvalid(System.Int32,System.DateTime)">
            <summary>
            Returns true if the object is invalid.
            </summary>
            <param name="objectId">Object ID</param>
            <param name="lastValid">Time when the object was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.AreChildrenInvalid(System.Int32,System.DateTime)">
            <summary>
            Returns true if the direct child objects are invalid.
            </summary>
            <param name="parentId">Parent object ID</param>
            <param name="lastValid">Time when the objects was last known as valid</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IncrementInstanceCount">
            <summary>
            Increase the number of instances
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.DecrementInstanceCount">
            <summary>
            Decrease the number of instances
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetSiteWhereCondition(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Gets the site where condition for this query
            </summary>
            <param name="siteIdentifier">Identifier of an existing site, or null.</param>
            <param name="includeGlobal">Include global objects</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetObjectPathWhereCondition(System.String)">
            <summary>
            Gets the where condition to limit the objects to specific path.
            </summary>
            <param name="path">ID path</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetBindingWhereCondition(System.String,System.Object[])">
            <summary>
            Gets the where condition to limit the objects to specific binding dependencies. Use this method for 3 and more-keys bindings.
            </summary>
            <param name="bindingType">Binding object type name</param>
            <param name="dependencies">Pairs of binding dependencies to filter by (first variable in each pair - dependency object type, second variable in each pair - dependency value)</param>
            <exception cref="T:CMS.DataEngine.ObjectTypeColumnNotFoundException">If dependency column is not found by object type</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetBindingColumns(System.Boolean,System.Boolean)">
            <summary>
            Gets the list of columns representing binding.
            </summary>
            <param name="includeParent">If true, the result includes the parent column</param>
            <param name="includeSite">If true, the result includes the site column</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.CreateWhereCondition">
            <summary>
            Gets a new empty where condition for this object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDataQuery(System.Action{CMS.DataEngine.DataQuerySettings},System.Boolean)">
            <summary>
            Gets the data query for this object type
            </summary>
            <param name="parameters">Parameters for the data retrieval</param>
            <param name="checkLicense">If true, the license is checked for this query</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetDependencyWhereCondition(System.String,System.String,System.Tuple{System.String,System.Nullable{System.Int32}}[])">
            <summary>
            Gets the where condition to limit the objects to specific dependencies.
            </summary>
            <param name="dependencyType">Dependency object type name</param>
            <param name="op">Operator</param>
            <param name="dependencies">Pairs of dependencies to filter by (first item in each pair - dependency object type, second item in each pair - dependency value)</param>
            <exception cref="T:CMS.DataEngine.ObjectTypeColumnNotFoundException">If dependency column is not found by object type</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetBindingDependencyObjectType(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns first object type from binding dependencies, parent, and site which holds reference to the different object type than the object type of the provider.
            Use only for 2-keys bindings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.InitializeForeignKeys">
            <summary>
            Initializes foreign key columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.IsForeignKey(System.String)">
            <summary>
            Indicates if given column is foreign key.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.GetNiceObjectTypeName">
            <summary>
            Gets the nice object type name for this type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RegisterColumns">
            <summary>
            Registers the Columns of this object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfo.Events">
            <summary>
            Events handled by object of this type
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo.ObjectLoadRelatedDataEventHandler">
            <summary>
            Object load related data event handler.
            </summary>
            <param name="infoObj">Info object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo.OnGetContentEventHandler">
            <summary>
            Fires when search content is requested. You can modify content value which is saved to the search index.
            </summary>
            <param name="obj">Currently indexed object</param>
            <param name="content">Current content value</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfo.OnLogObjectChangeEventHandler">
            <summary>
            Logs the object change.
            </summary>
            <param name="infoObj">Main info object</param>
            <param name="taskType">Type of the task</param>
        </member>
        <member name="E:CMS.DataEngine.ObjectTypeInfo.OnLogObjectChange">
            <summary>
            Fires when the object change should be logged - Handler for particular type info
            </summary>
        </member>
        <member name="E:CMS.DataEngine.ObjectTypeInfo.OnLogGlobalObjectChange">
            <summary>
            Fires when the object change should be logged - Global handler
            </summary>
        </member>
        <member name="E:CMS.DataEngine.ObjectTypeInfo.OnLoadRelatedData">
            <summary>
            Fires when the related data should be loaded to the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RaiseOnLoadRelatedData(CMS.DataEngine.BaseInfo)">
            <summary>
            Raises the on load related data event.
            </summary>
            <param name="infoObj">Info object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeInfo.RaiseOnLogObjectChange(CMS.DataEngine.BaseInfo,CMS.DataEngine.TaskTypeEnum)">
            <summary>
            Raises the OnLogObjectChange event.
            </summary>
            <param name="infoObj">Info object</param>
            <param name="taskType">Type of the task</param>
        </member>
        <member name="T:CMS.DataEngine.ContinuousIntegrationSettings">
            <summary>
            Determines how the object behaves within continuous integration. Represents continuous integration settings in the type information of objects.
            </summary>
            <remarks>
            Use in the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ContinuousIntegrationSettings"/> property of ObjectTypeInfo.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.Enabled">
            <summary>
            Indicates whether the object type supports continuous integration.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectFileNameFields">
            <summary>
            Gets the collection of field names to get object name for file name of the serialized object. If not specified code name or GUID of the object is used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.IdentificationField">
            <summary>
            Field used for object identification in a repository, when default code name and/or GUID are not suitable.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectTypeFolderName">
            <summary>
            Gets or sets folder name used to create object type folder. If not specified object type of the object is used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.SeparatedFields">
            <summary>
            List of separated fields. Separated field's content is stored in extra file when using continuous integration.
            This collection contains info's binary data field by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.DependencyColumns">
            <summary>
            Collection of additional columns whose change may affect object's code name, GUID, group, site or parent. 
            </summary>
            <remarks>
            For example when you override <see cref="P:CMS.DataEngine.BaseInfo.ObjectCodeName"/> and you compose the code name from other fields than <see cref="P:CMS.DataEngine.ObjectTypeInfo.CodeNameColumn"/> then these fields must be defined in this collection.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.FilterCondition">
            <summary>
            Where condition for object filtering. Only objects that meet this condition will be handled by continuous integration.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.FilterColumn">
            <summary>
            Column name used for object filtering. By default the codename column is used.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ContinuousIntegrationSettings.FilterDependencies">
            <summary>
            Collection of additional dependencies which may affect object's inclusion in repository.
            </summary>
            <remarks>
            <para>
            Dependent objects are checked in similar way as parent objects and can filter out the processed object.
            </para>
            <para>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ContinuousIntegrationSettings.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Related type information</param>
        </member>
        <member name="T:CMS.DataEngine.DefaultDataSettings">
            <summary>
            Settings for export of the default database data and web template data
            </summary>
            <remarks>
            This class is for internal use only and should not be used in custom code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.Where">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.OrderBy">
            <summary>
            Order by columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.ChildDependencies">
            <summary>
            List of child dependencies for population of child count column(s) upon default data retrieval.
            The child dependencies must contain no loops except direct reference to object type itself.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.ExcludedColumns">
            <summary>
            List of columns that should be excluded from the exported data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.IncludeToWebTemplateDataOnly">
            <summary>
            Indicates if data should be exported only as part of the web template data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DefaultDataSettings.ExcludedPrefixes">
            <summary>
            List of code display name prefixes that will be excluded from default data. By default everything starting with 'test' is excluded.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExternalColumnSettings`1">
            <summary>
            Object to encapsulate the settings of an externally stored column within a InfoObject.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StorageProvider">
            <summary>
            Storage provider to use. If not set, the default storage provider is used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StoreInExternalStorageSettingsKey">
            <summary>
            Gets or sets the name of the settings key which indicates whether to store column in external storage or not.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StoreColumnInDatabase">
            <summary>
            Indicates whether to store data also in DB.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.StoragePath">
            <summary>
            Gets or sets the callback function which returns base path of the object for given column name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.SetDataTransformation">
            <summary>
            Gets or sets a transformation function which is called when the data is saved to the external storage.
            Can be used for example to add default directives to layout code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.GetDataTransformation">
            <summary>
            Gets or sets a transformation function which is called when the data is retrieved from the external storage.
            Can be used for example to remove default directives to layout code.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExternalColumnSettings`1.DependencyColumns">
            <summary>
            Array of column names whose value change causes resaving of the external columns.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExternalColumnSettings`1.StoreInExternalStorage(System.String)">
            <summary>
            Returns true if the column should be stored in external storage
            </summary>
            <param name="objectSiteName">Object site name</param>
        </member>
        <member name="M:CMS.DataEngine.ExternalColumnSettings`1.StoreInDatabase(System.String)">
            <summary>
            Returns true if the column should be stored in database
            </summary>
            <param name="objectSiteName">Object site name</param>
        </member>
        <member name="T:CMS.DataEngine.ExtraColumn">
            <summary>
            Defines a column of another object type as a reference (foreign key relationship) pointing to the current object type.
            Determines how the system handles dependencies for the reference. For example data integrity during import and staging, or cascading deleting when a referenced object is deleted.
            </summary>
            <remarks>
            Use List collections of ExtraColumn instances to set the <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> property of <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            Each ExtraColumn in the collection registers a foreign key column of another object type as a reference pointing to the current object type.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ExtraColumn.ColumnName">
            <summary>
            Gets or sets the name of the foreign key column in the object type that is the source of the reference.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExtraColumn.ExtendedObjectType">
            <summary>
            Gets or sets the object type that is the source of the reference.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExtraColumn.DependencyType">
            <summary>
            Determines how the system handles referential integrity and automatic removal of objects when a referenced object is deleted.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExtraColumn.#ctor(System.String,System.String,CMS.DataEngine.ObjectDependencyEnum)">
            <summary>
            Creates a new ExtraColumn instance, defining a reference (foreign key relationship) from another object type to the current object type.
            </summary>
            <param name="extendedObjectType">The object type that is the source of the reference</param>
            <param name="columnName">The name of the foreign key column of the source object type that stores the IDs of the referenced objects</param>
            <param name="required">Determines how the system handles referential integrity and automatic removal of objects when a referenced object is deleted (Not required reference by default)</param>
        </member>
        <member name="T:CMS.DataEngine.IMacroProcessingColumnAdapter">
            <summary>
            Represents a column adapter for macro processing that converts the value into a format understandable by macro engine via <see cref="M:CMS.DataEngine.IMacroProcessingColumnAdapter.Preprocess(System.String)"/> method (typically, decode or decrypt operation) 
            and converts the text with resolved macros back to the original column format via  <see cref="M:CMS.DataEngine.IMacroProcessingColumnAdapter.Postprocess(System.String)"/> method (typically a corresponding complementary operation - encode or encrypt).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IMacroProcessingColumnAdapter.Preprocess(System.String)">
            <summary>
            Operation that is executed on <paramref name="text"/> before the value is processed by macro engine. 
            Typically, decode or decrypt operation.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IMacroProcessingColumnAdapter.Postprocess(System.String)">
            <summary>
            A complementary operation to <see cref="M:CMS.DataEngine.IMacroProcessingColumnAdapter.Preprocess(System.String)"/> that brings <paramref name="text"/> with resolved macros back to the original column format before saving the value back to the object. 
            Typically, encode or encrypt operation.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ImportExportSettings">
            <summary>
            Class representing export/import settings in the type information of objects.
            </summary>
            <remarks>
            Use in the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ImportExportSettings"/> property of <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mLogExport">
            <summary>
            Indicates whether the system logs export tasks when objects of the type are deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mLogProgress">
            <summary>
            Indicates whether the import progress log includes a record for objects of the type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mAllowSingleExport">
            <summary>        
            Indicates whether the object type supports export of individual objects from UniGrid listing pages.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mIncludeToExportParentDataSet">
            <summary>
            Determines how the system includes objects of the type when exporting parent objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mIncludeToWebTemplateExport">
            <summary>
            Determines the range of objects which will go to the web template export.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mWhereCondition">
            <summary>        
            Where condition that defines which objects of the type are available for export. Does not affect the single object export.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ImportExportSettings.mOrderBy">
            <summary>
            Order by clause that sets the order of objects in the XML data of export packages.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.AllowSingleExport">
            <summary>
            Indicates whether the object type supports export of individual objects from UniGrid listing pages.
            Default value is true when the object is exportable and logs export tasks, otherwise false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.LogExport">
            <summary>
            Indicates whether the system logs export tasks when objects of the type are deleted. The delete tasks can be included in export packages.
            False by default.
            </summary>
            <remarks>
            When both IsExportable and LogExport are true, SingleObjectExport defaults to true. 
            When set to true, the object type must also provide at least one location in property ObjectTreeLocations.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.LogProgress">
            <summary>
            Indicates whether the import progress log includes a record for objects of the type. True by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IsAutomaticallySelected">
            <summary>
            Indicates whether all objects of the type are automatically selected when creating export packages. For internal objects that are not visible in the object tree. False by default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.SupportsExport">
            <summary>
            Indicates whether the object type can be exported either through regular Export/Import or through SingleObjectExport.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IsExportable">
            <summary>
            Indicates whether the object type can be exported through regular Export/Import.
            False by default.
            </summary>
            <remarks>
            When both IsExportable and LogExport are true, SingleObjectExport defaults to true. 
            When set to true, the object type must also provide at least one location in property ObjectTreeLocations.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IncludeToExportParentDataSet">
            <summary>
            Determines how the system includes objects of the type when exporting parent objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.IncludeToWebTemplateExport">
            <summary>
            Determines the range of objects which will go to the web template export.
            If Default, the default selection of objects for web template export is preserved.
            If None, this object type will never go to web template export.
            If All, this object type will always go to web template export (both site and global objects).
            If Site, global objects are excluded.
            If Global, site objects are excluded.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.ExcludedDependingType">
            <summary>
            Indicates if object is excluded depending type. Default is false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.WhereCondition">
            <summary>
            Where condition that defines which objects of the type are available for export. Does not affect the single object export.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.OrderBy">
            <summary>
            Order by clause that sets the order of objects in the XML data of export packages. Used to ensure that export packages containing the same objects always have matching XML data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.ObjectTreeLocations">
            <summary>
            Sets the locations of the object type within the object tree in the export/import wizard.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ImportExportSettings.AlwaysCheckExisting">
            <summary>
            If true, the import process always checks the existing object when importing this object type.
            Use for object types that may be automatically created by another object type during import, such as automatically created scheduled tasks for recalculation etc.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ImportExportSettings.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="typeInfo">Related type information</param>
        </member>
        <member name="M:CMS.DataEngine.ImportExportSettings.RegisterColumns">
            <summary>
            Property registration.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IStructuredData">
            <summary>
            Interface for the structured objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IStructuredData.LoadFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Loads the data from the given XML element
            </summary>
            <param name="element">XML element</param>
        </member>
        <member name="M:CMS.DataEngine.IStructuredData.GetXmlElement(System.Xml.XmlDocument)">
            <summary>
            Gets the XML element for the data
            </summary>
            <param name="doc">Parent XML document</param>
        </member>
        <member name="T:CMS.DataEngine.IStructuredField">
            <summary>
            Definition of the structured field configuration
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IStructuredField.FieldName">
            <summary>
            Info field name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IStructuredField.CreateStructuredValue(System.String)">
            <summary>
            Creates the object from the given XML value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MacroProcessingSettings">
            <summary>
            Determines how the system processes macros in the object's fields.
            </summary>
            <remarks>
            Use in the <see cref="P:CMS.DataEngine.ObjectTypeInfo.MacroSettings"/> property of ObjectTypeInfo.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.MacroProcessingSettings.ContainsMacros">
            <summary>
            Indicates whether the object type has fields that can contain macro expressions in their values. Determines if objects are processed when resigning macros in the system.
            True by default. You can set the value to False to optimize the performance of the resigning process (during manual resigning and upgrades).
            Does not affect the resolving of macros.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MacroProcessingSettings.MacroCollectionName">
            <summary>
            Gets or sets name of object collection used for the object type's data in the macro engine.
            If not set, the <see cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectClassName"/> is used by default.
            </summary>
            <remarks>
            <para>
            Should be set when info object belongs to <see cref="P:CMS.DataEngine.ObjectTypeManager.MainObjectTypes"/> and has more than 1 <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            </para>
            <para>
            If <see cref="P:CMS.DataEngine.MacroProcessingSettings.MacroCollectionName"/> is set to 'cms.role' then macro intellisense supplies hint for user as 'Roles' because of
            <see cref="M:CMS.DataEngine.InfoObjectRepository`3.GetNicePropertyName(System.String)"/> method used internally
            by <see cref="T:CMS.DataEngine.InfoObjectRepository`3" />.
            </para>
            <para>
            Value of this property is used in Kentico macro engine for acquiring objects of given type, e.g. SiteObjects.Roles or GlobalObjects.Roles.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.MacroProcessingSettings.CheckPermissions">
            <summary>
            Determines whether the system checks read permissions for the given module when accessing objects of the type in the macro engine. True by default.
            The permissions are checked for the user who saved the macro, not the user viewing the result.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MacroProcessingSettings.ColumnAdapters">
            <summary>
            Registers column adapters for fields, which value cannot be processed by macro engine right away and requires additional operations (decode, decrypt, etc.).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MacroProcessingSettings.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="objectTypeInfo">Related type information</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependency">
            <summary>
            Represents a reference (foreign key relationship) from one object type to another. 
            Defines how the system handles dependencies for the reference. For example data integrity during import and staging, or cascading deleting when a referenced object is deleted.
            </summary>
            <remarks>
            Use List collections of ObjectDependency instances to set the <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property of <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            Each ObjectDependency in the collection registers a foreign key field as a reference pointing from the given object type to another.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.DependencyType">
            <summary>
            Determines how the system handles referential integrity and automatic removal of objects when a referenced object is deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.ObjectTypeColumn">
            <summary>
            Gets or sets the name of the data column that stores the target object type of the reference (for objects without FK database restrictions).
            For example ObjectSettings or Metafiles where the object dependency is a combination of MetaFileObjectType and MetaFileObjectID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDependency.IsDependencyByExtension">
            <summary>
            Returns true when dependency is defined using <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> property.
            Returns false when dependency is defined using <see cref="P:CMS.DataEngine.ObjectTypeInfo.DependsOn"/> property.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.#ctor(System.String,System.String,CMS.DataEngine.ObjectDependencyEnum,System.String)">
            <summary>
            Creates a new ObjectDependency instance, defining a reference (foreign key relationship) from one object type to another.
            </summary>
            <param name="dependencyColumn">The name of the foreign key column that stores the IDs of the referenced objects</param>
            <param name="dependencyObjectType">The object type that is the target of the reference (null if the target object type is stored in a data column - use the fourth param to specify the field name)</param>
            <param name="required">Determines how the system handles referential integrity and automatic removal of objects when a referenced object is deleted (Not required reference by default)</param>
            <param name="objectTypeColumn">The name of the column that stores the target object type of the reference (null for standard references)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.#ctor(System.String,System.String,System.Boolean,CMS.DataEngine.ObjectDependencyEnum,System.String)">
            <summary>
            Creates a new ObjectDependency instance, defining a reference (foreign key relationship) from one object type to another.
            </summary>
            <param name="dependencyColumn">The name of the foreign key column that stores the IDs of the referenced objects</param>
            <param name="dependencyObjectType">The object type that is the target of the reference (null if the target object type is stored in a data column - use the fourth param to specify the field name)</param>
            <param name="isDependencyByExtension">Determines how is dependency defined, should be true for dependencies defined using <see cref="P:CMS.DataEngine.ObjectTypeInfo.Extends"/> property</param>
            <param name="required">Determines how the system handles referential integrity and automatic removal of objects when a referenced object is deleted (Not required reference by default)</param>
            <param name="objectTypeColumn">The name of the column that stores the target object type of the reference (null for standard references)</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.IsRequired">
            <summary>
            Returns true if the dependency is required. Required dependencies are of type Required, RequiredHasDefault or Binding.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.GetHashCode">
            <summary>
            Returns the hash code of this object dependency.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.Equals(System.Object)">
            <summary>
            Compares the dependency with another object. Returns true if all fields of the two dependencies match.
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.Equals(CMS.DataEngine.ObjectDependency)">
            <summary>
            Compares the dependency with another ObjectDependency object. Returns true if all fields of the two dependencies match.
            </summary>
            <param name="other">Object to compare</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependency.HasDynamicObjectType">
            <summary>
            Returns true if the dependency is referencing a dynamic object type.
            </summary>
            <remarks>
            <para>
            Dynamic object type reference lacks any specific <see cref="P:CMS.DataEngine.ObjectReference.DependencyObjectType"/>. It has <see cref="P:CMS.DataEngine.ObjectDependency.ObjectTypeColumn"/> defined instead.
            </para>
            <para>
            Dynamic object type can reference various object types (e.g MetaFiles have column MetaFileObjectType which can hold different object types).
            </para>
            </remarks>
        </member>
        <member name="T:CMS.DataEngine.ObjectReference">
            <summary>
            Represents a reference from one object type to another. 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectReference.DependencyColumn">
            <summary>
            Gets or sets the name of the reference column that stores the IDs of the referenced objects.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectReference.DependencyObjectType">
            <summary>
            Gets or sets the object type that is the target of the reference.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectReference.#ctor(System.String,System.String)">
            <summary>
            Creates a new ObjectReference instance, defining a reference from one object type to another.
            </summary>
            <param name="dependencyColumn">The name of the reference column that stores the IDs of the referenced objects</param>
            <param name="dependencyObjectType">The object type that is the target of the reference</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectTreeLocation">
            <summary>
            Defines a location for an object type within the object tree in the export/import or staging interface.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTreeLocation.ObjectType">
            <summary>
            Object type of the actual node.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTreeLocation.ParentPath">
            <summary>
            Parent path in the object type tree.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTreeLocation.#ctor(System.String[])">
            <summary>
            Constructor. Accepts string parameters, each representing a category (level) in the object tree.
            You can use either the default category constants or custom strings.
            The tree node containing the objects is added under the final category.
            </summary>
            <param name="path">Parts of the path</param>
        </member>
        <member name="T:CMS.DataEngine.SeparatedField">
            <summary>
            Definition of separated field configuration. Content of separated field is stored in extra file when using continuous integration.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SeparatedField.FieldName">
            <summary>
            Info field name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SeparatedField.FileName">
            <summary>
            Name of the separated file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SeparatedField.FileExtension">
            <summary>
            Extension of the separated file. This extension has lower priority than <see cref="P:CMS.DataEngine.SeparatedField.FileExtensionFieldName"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SeparatedField.FileExtensionFieldName">
            <summary>
            Name of info field containing separated file extension. This extension has higher priority than <see cref="P:CMS.DataEngine.SeparatedField.FileExtension"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SeparatedField.IsBinaryField">
            <summary>
            Indicates whether the separated field contains binary data or not.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SeparatedField.#ctor(System.String)">
            <summary>
            Creates a new instance of SeparatedField for given field name.
            </summary>
            <param name="name">Info field name.</param>
        </member>
        <member name="T:CMS.DataEngine.SerializationSettings">
            <summary>
            Determines how the system serializes object fields from the database into XML files. Represents serialization settings in the type information of objects.
            </summary>
            <remarks>
            Use in the <see cref="P:CMS.DataEngine.ObjectTypeInfo.SerializationSettings"/> property of ObjectTypeInfo.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.SerializationSettings.DEFAULT_EXCLUDED_COLUMNS_DELEGATES">
            <summary>
            Collection of delegates of columns that are excluded by default when using <see cref="T:CMS.DataEngine.SerializationSettings"/>.
            </summary>
            <remarks>This collection is not meant for public use.</remarks>
        </member>
        <member name="P:CMS.DataEngine.SerializationSettings.StructuredFields">
            <summary>
            Lists fields that contain structured data and cannot directly be serialized as inner text values of XML elements.
            Maps an IStructuredField implementation to every listed field, which defines how the serialization occurs.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SerializationSettings.ExcludedFieldNames">
            <summary>
            List of field names that are excluded when serializing objects.
            </summary>
            <remarks>
            By default, the system automatically excludes the object type's IDColumn, TimeStampColumn, VersionGUIDColumn and BinaryColumn.
            </remarks>
            <remarks>Collection is supposed to contain case insensitive values – when checking field name presence, preferably use <see cref="M:CMS.DataEngine.SerializationSettings.IsExcludedField(System.String)"/> method.</remarks>
        </member>
        <member name="P:CMS.DataEngine.SerializationSettings.AdditionalFieldFilter">
            <summary>
            Predicate for excluded field selection.
            </summary>
            <remarks>
            In case the list in <see cref="P:CMS.DataEngine.SerializationSettings.ExcludedFieldNames"/> is not sufficient and additional exclusion logic is required.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SerializationSettings.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Related type information</param>
        </member>
        <member name="M:CMS.DataEngine.SerializationSettings.#ctor(CMS.DataEngine.SerializationSettings)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">Copy source</param>
        </member>
        <member name="M:CMS.DataEngine.SerializationSettings.GetStructuredField(System.String)">
            <summary>
            Gets the structured field information for the field with the given name or null if the given field is not structured.
            </summary>
            <param name="fieldName">Info field name</param>
        </member>
        <member name="M:CMS.DataEngine.SerializationSettings.IsExcludedField(System.String)">
            <summary>
            Returns true if the given object field name is excluded from the serialization.
            </summary>
            <param name="fieldName">Info field name</param>
            <remarks>Method is, by the nature of the values in <see cref="P:CMS.DataEngine.SerializationSettings.ExcludedFieldNames"/>, case insensitive.</remarks>
        </member>
        <member name="T:CMS.DataEngine.StructuredField`1">
            <summary>
            Definition of the structured field configuration
            </summary>
            <typeparam name="TImplementationType">Implementation type, must implement IStructuredData</typeparam>
        </member>
        <member name="P:CMS.DataEngine.StructuredField`1.FieldName">
            <summary>
            Info field name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.StructuredField`1.ImplementationType">
            <summary>
            Implementation type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.StructuredField`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Info field name</param>
        </member>
        <member name="M:CMS.DataEngine.StructuredField`1.CreateStructuredValue(System.String)">
            <summary>
            Creates the object from the given XML value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.StructuredField">
            <summary>
            Definition of the structured field for simple xml values with fixed order of xml elements. 
            For advanced fields use generic variant. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.StructuredField.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Info field name</param>
        </member>
        <member name="T:CMS.DataEngine.SynchronizationSettings">
            <summary>    
            Class representing synchronization (staging) settings in the type information of objects.
            </summary>
            <remarks>
            Use in the <see cref="P:CMS.DataEngine.ObjectTypeInfo.SynchronizationSettings"/> property of ObjectTypeInfo.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationSettings.mLogSynchronization">
            <summary>
            Logs synchronization.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SynchronizationSettings.mIncludeToSynchronizationParentDataSet">
            <summary>
            Parent data inclusion for synchronization.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationSettings.LogSynchronization">
            <summary>
            Determines whether the system logs staging tasks for objects of the type. Select one of the SynchronizationTypeEnum values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationSettings.ObjectTreeLocations">
            <summary>
            Adds the object type to the object tree on the Objects tab of the Staging application.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationSettings.LogCondition">
            <summary>
            Condition that determines which objects of the given type generate synchronization tasks. If set, only objects that match the condition are synchronized.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationSettings.IncludeToSynchronizationParentDataSet">
            <summary>
            Determines whether the data of parent objects automatically includes child objects of the given type during synchronization (for example staging).
            Applies to object types that have a parent. 
            Set one of the values from IncludeToParentEnum. The default value is Complete for object types that have the ParentObjectType and ParentID properties set in their type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationSettings.ExcludedStagingColumns">
            <summary>
            Gets or sets the list of columns that are excluded when staging objects.
            </summary>
            <remarks>
            The property does NOT limit the actual data of staging tasks, only the operations that take place on the target server.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.SynchronizationSettings.SupportsTaskOptimization">
            <summary>
            Indicates that objects of given type support staging task logging optimization.
            </summary>
            <remarks>
            Optimization deletes logged older compatible tasks and is enabled by default.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.SynchronizationSettings.CopyPropertiesTo(CMS.DataEngine.SynchronizationSettings)">
            <summary>
            Copies the settings properties to another settings instance
            </summary>
            <param name="settings">Synchronization settings</param>
        </member>
        <member name="T:CMS.DataEngine.XmlColumnMacroProcessingAdapter">
            <summary>
            Represents a column adapter for XML columns. Decodes the value in the preprocessing phase and encodes the value in the postprocessing phase.
            </summary>
            <seealso cref="P:CMS.DataEngine.ObjectTypeInfo.MacroSettings"/>
        </member>
        <member name="P:CMS.DataEngine.XmlColumnMacroProcessingAdapter.Instance">
            <summary>
            Instance of <see cref="T:CMS.DataEngine.XmlColumnMacroProcessingAdapter"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.XmlColumnMacroProcessingAdapter.#ctor">
            <summary>
            Constructor is private - singleton.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.XmlColumnMacroProcessingAdapter.Preprocess(System.String)">
            <summary>
            Decodes the value of XML column before processing macros.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.XmlColumnMacroProcessingAdapter.Postprocess(System.String)">
            <summary>
            Encodes the text with processed macros back to the original XML format.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TypeCondition">
            <summary>
            Class determining condition which can distinguish between several object types within one Info class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeCondition.ConditionColumns">
            <summary>
            Gets the names of the columns.
            </summary>        
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.Add(System.String,CMS.DataEngine.QueryOperator,System.Object,System.Boolean,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="op">The operator used to compare column value.</param>
            <param name="conditionValue">Value of the condition column which determines specified type</param>
            <param name="allowNull">if set to true [column value allows null].</param>
            <param name="defaultColumnValue">The default column value that would be set into info object in case of type condition application.</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereEquals(System.String,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="conditionValue">Value of the condition column which determines specified type</param>
            <remarks>DefaultColumnValue (The default column value that would be set into info object in case of type condition application) equals to conditionValue.</remarks>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereEquals(System.String,System.Object,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="conditionValue">Value of the condition column which determines specified type</param>
            <param name="defaultColumnValue">The default column value that would be set into info object in case of type condition application.</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereNotEquals(System.String,System.Object,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="conditionValue">Value of the condition column which determines specified type</param>
            <param name="defaultColumnValue">The default column value that would be set into info object in case of type condition application.</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereEqualsOrNull(System.String,System.Object,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="conditionValue">Value of the condition column which determines specified type</param>
            <param name="defaultColumnValue">The default column value that would be set into info object in case of type condition application.</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereNotEqualsOrNull(System.String,System.Object,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="conditionValue">Value of the condition column which determines specified type</param>
            <param name="defaultColumnValue">The default column value that would be set into info object in case of type condition application.</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereIsNull(System.String)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereIsNotNull(System.String)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.WhereIsNotNull(System.String,System.Object)">
            <summary>
            Adds another condition into TypeCondition.
            </summary>
            <param name="conditionColumn">Name of the column the value of which can distinguish between the object types</param>
            <param name="defaultColumnValue">The default column value that would be set into info object in case of type condition application.</param>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.GetFieldValue(System.String)">
            <summary>
            Gets the field value for the Type condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.GetValue(System.String)">
            <summary>
            Gets the actual value for the Type condition column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.GetWhereCondition">
            <summary>
            Generates default WHERE condition according to GroupColumn and TypeCondition settings. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeCondition.Check(CMS.Base.IDataContainer,System.Boolean)">
            <summary>
            Checks if condition defined in TypeCondition is not violated by the given info.
            </summary>
            <param name="info">Info to check</param>
            <param name="throwException">If true, the exception is thrown in case the object violates the type condition</param>
        </member>
        <member name="T:CMS.DataEngine.TypeConditionItem">
            <summary>
            Type condition related data. Every item is one condition expression.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeConditionItem.Column">
            <summary>
            Gets or sets the name of the column the value of which can distinguish between the object types.
            </summary>      
        </member>
        <member name="P:CMS.DataEngine.TypeConditionItem.Value">
            <summary>
            Gets or sets the value of the condition column which determines specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeConditionItem.DefaultColumnValue">
            <summary>
            Gets or sets the default value of the condition column that would be set into info object in case of type condition application.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeConditionItem.Operator">
            <summary>
            Gets or sets the operator used to compare column value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeConditionItem.AllowNull">
            <summary>
            Gets or sets if the value of the condition column is allowing null.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TypeInfoEvents">
            <summary>
            Object events for particular type info
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Update">
            <summary>
            Fires when object is updated
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.UpdateInner">
            <summary>
            Fires when the object is updated in the database.
            This is a read-only event, it is forbidden to change the object passed as event argument. If you need to modify the object, use <see cref="P:CMS.DataEngine.TypeInfoEvents.Update"/> event.
            </summary>
            <remarks>
            <see cref="P:CMS.DataEngine.TypeInfoEvents.Update"/>.Before event is fired before this event and <see cref="P:CMS.DataEngine.TypeInfoEvents.Update"/>.After event is fired after this event.
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Insert">
            <summary>
            Fires when object is inserted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Delete">
            <summary>
            Fires when object is deleted
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.BulkInsert">
            <summary>
            Fires when object is inserted in a bulk
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.BulkUpdate">
            <summary>
            Fires when object is updated in a bulk
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.BulkDelete">
            <summary>
            Fires when object is deleted in a bulk
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.Sort">
            <summary>
            Fires when sorting of a objects is requested
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.ChangeOrder">
            <summary>
            Fires when change order is requested on the object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.GetData">
            <summary>
            Fires when data are retrieved
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.GetContent">
            <summary>
            Fires when search content is requested. You can modify content value which is saved to the search index.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.LogChange">
            <summary>
            Fires when object tasks are logged. You can disable tasks logging for staging, integration etc.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TypeInfoEvents.CheckPermissions">
            <summary>
            Fires when permissions are checked on the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Type info</param>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.EnsureEvent``1(``0@,``0,System.String)">
            <summary>
            Ensures the event object
            </summary>
            <param name="field">Event field</param>
            <param name="parent">Event parent</param>
            <param name="name">Event name</param>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.CreateEvent``1(``0,System.String)">
            <summary>
            Creates an event
            </summary>
            <param name="parent">Event parent</param>
            <param name="name">Event name</param>
        </member>
        <member name="M:CMS.DataEngine.TypeInfoEvents.SetParent(CMS.DataEngine.TypeInfoEvents)">
            <summary>
            Sets the parent for the events
            </summary>
            <param name="parentEvents">Parent events</param>
        </member>
        <member name="T:CMS.DataEngine.DependencyObjectsConditionFactory">
            <summary>
            Factory used to register custom <see cref="T:CMS.DataEngine.WhereCondition"/> provider for object types with specified path column.
            </summary>
            <seealso cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/>
            <seealso cref="T:CMS.DataEngine.ObjectDependenciesConditionProvider"/>.
        </member>
        <member name="M:CMS.DataEngine.DependencyObjectsConditionFactory.RegisterConditionProvider(System.String,CMS.DataEngine.ObjectDependenciesConditionProvider)">
            <summary>
            Registers given <paramref name="provider"/> for given <paramref name="objectType"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DependencyObjectsConditionFactory.GetConditionProvider(System.String)">
            <summary>
            Returns registered provider for given <paramref name="objectType"/> or null.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependenciesConditionProvider">
            <summary>
            Describes <see cref="T:CMS.DataEngine.WhereCondition"/> provider for object types with specified path column.
            </summary>
            <seealso cref="P:CMS.DataEngine.ObjectTypeInfo.ObjectPathColumn"/>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesConditionProvider.GetWhereCondition(CMS.DataEngine.BaseInfo,CMS.DataEngine.IWhereCondition,System.String)">
            <summary>
            Returns <see cref="T:CMS.DataEngine.WhereCondition"/> used to retrieve data from database based on object path.
            </summary>
            <param name="info">Info object instance</param>
            <param name="objectWhereCondition">Where condition applied to retrieve data.</param>
            <param name="pathColumnName">Name of the column containing object path.</param>
        </member>
        <member name="T:CMS.DataEngine.ExportFormatEnum">
            <summary>
            Export format enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.XML">
            <summary>
            XML format
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.JSON">
            <summary>
            JSON format
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.ATOM10">
            <summary>
            Atom 1.0 format
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ExportFormatEnum.RSS20">
            <summary>
            RSS 2.0 format
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LayoutTypeEnum">
            <summary>
            Layout type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LayoutTypeEnum.Ascx">
            <summary>
            ASCX layout (with ASPX code).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LayoutTypeEnum.Html">
            <summary>
            HTML layout (with resolved macros).
            </summary>
        </member>
        <member name="T:CMS.DataEngine.FeatureEnum">
            <summary>
            Feature types.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Unknown">
            <summary>
            Unknown feature.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DocumentLevelPermissions">
            <summary>
            Document level permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.BizForms">
            <summary>
            BizForms.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.WorkflowVersioning">
            <summary>
            Workflow versioning.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.AdvancedWorkflow">
            <summary>
            Advanced workflow.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.MarketingAutomation">
            <summary>
            Marketing automation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Newsletters">
            <summary>
            Newsletters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Multilingual">
            <summary>
            Multilingual.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Staging">
            <summary>
            Staging.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Ecommerce">
            <summary>
            Ecommerce.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Webfarm">
            <summary>
            Webfarm.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.WebAnalytics">
            <summary>
            Web analytics.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Administrators">
            <summary>
            Global administrators.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Editors">
            <summary>
            Editors.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SiteMembers">
            <summary>
            Site members.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Documents">
            <summary>
            Documents.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Subscribers">
            <summary>
            Subscribers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.CustomTables">
            <summary>
            Custom Tables.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.UserContributions">
            <summary>
            User contributions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ADImportTool">
            <summary>
            Active directory import tool.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Membership">
            <summary>
            Membership.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.IntegrationBus">
            <summary>
            System integration bus.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ObjectVersioning">
            <summary>
            Object versioning.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.LeadScoring">
            <summary>
            Lead scoring
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ABTesting">
            <summary>
            A/B Testing
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.CampaignAndConversions">
            <summary>
            Campaign and conversions
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ContentPersonalization">
            <summary>
            Content personalization
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.MultipleSMTPServers">
            <summary>
            Multiple SMTP servers
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SchedulerWinService">
            <summary>
            Scheduler windows service
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.TranslationServices">
            <summary>
            Translation services
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SalesForce">
            <summary>
            SalesForce connector
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DBSeparation">
            <summary>
            Contact management database separation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.NewsletterABTesting">
            <summary>
            Newsletter A/B Testing
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.NewsletterTracking">
            <summary>
            Newsletter tracking (open e-mail, click through and bounces)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SocialMarketing">
            <summary>
            Publishing to Facebook and Twitter social networks
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SocialMarketingInsights">
            <summary>
            Providing access to social media analytics information
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.Personas">
            <summary>
            Displaying content to visitors based on Personas
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SharePoint">
            <summary>
            SharePoint integration
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.ContinuousIntegration">
            <summary>
            Continuous integration
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.SimpleContactManagement">
            <summary>
            Contact management with basic functionality
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.FullContactManagement">
            <summary>
            Contact management for EMS - full functionality
            </summary>
        </member>
        <member name="F:CMS.DataEngine.FeatureEnum.DataProtection">
            <summary>
            Data protection
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectActionEnum">
            <summary>
            Version action enums.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectActionEnum.Insert">
            <summary>
            Insert.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectActionEnum.Edit">
            <summary>
            Edit.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectActionEnum.Read">
            <summary>
            Read
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MessageTypeEnum">
            <summary>
            Message type returned to log panel.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Info">
            <summary>
            Informational message type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Warning">
            <summary>
            Warning message type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Error">
            <summary>
            Error message type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MessageTypeEnum.Finished">
            <summary>
            Logging finished.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectRangeEnum">
            <summary>
            Enum representing object range (in the scale of site vs. global object).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.None">
            <summary>
            No objects included by default
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.All">
            <summary>
            All objects (both, site and global) included by default
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.Site">
            <summary>
            Site objects only included by default
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.Global">
            <summary>
            Global objects only included by default
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectRangeEnum.Default">
            <summary>
            Default scope
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectPriorityEnum">
            <summary>
            Enumeration of priorities of objects.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectPriorityEnum.Low">
            <summary>
            Lowest priority
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectPriorityEnum.High">
            <summary>
            Highest priority
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectStatusEnum">
            <summary>
            Enumeration of the object status.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.New">
            <summary>
            New object.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.Unchanged">
            <summary>
            Object that didn't change.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.Changed">
            <summary>
            Object that has changed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.ToBeDeleted">
            <summary>
            Object that is flagged to be deleted.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectStatusEnum.WasDeleted">
            <summary>
            Object that has been deleted from the database
            </summary>
        </member>
        <member name="T:CMS.DataEngine.OperationTypeEnum">
            <summary>
            Operation type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Synchronization">
            <summary>
            Synchronization, full data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Export">
            <summary>
            Export, full data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.ExportSelection">
            <summary>
            Export selection (only ID and code name column, no metafiles or relationships).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Versioning">
            <summary>
            Object version, complete data
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OperationTypeEnum.Integration">
            <summary>
            Data are the same as for the Synchronization. Used as a distinguisher for special cases.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AuthorizationResultEnum">
            <summary>
            Enumeration of the user authorization result.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AuthorizationResultEnum.Allowed">
            <summary>
            Allowed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AuthorizationResultEnum.Denied">
            <summary>
            Denied.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AuthorizationResultEnum.Insignificant">
            <summary>
            Insignificant, does not influence other authorization results.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.PermissionsEnum">
            <summary>
            Permissions enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Read">
            <summary>
            Read permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Modify">
            <summary>
            Modify permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Create">
            <summary>
            Creates permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Delete">
            <summary>
            Delete permission.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PermissionsEnum.Destroy">
            <summary>
            Destroy permission.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SearchIndexDataSourceEnum">
            <summary>
            Indicates type of the data source for indexed page.
            </summary>
            <remarks>
            Data source applies only to page indexes.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexDataSourceEnum.HTMLOutput">
            <summary>
            Page HTML output is source of index data (crawler).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexDataSourceEnum.ContentFields">
            <summary>
            Page content fields are source of index data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SearchIndexDataSourceEnum.Both">
            <summary>
            Both HTML output and content fields are source of index data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.UpdateResultEnum">
            <summary>
            Result of the update operation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.NotProcessed">
            <summary>
            Not processed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.OK">
            <summary>
            Imported correctly.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.Error">
            <summary>
            Imported with errors.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.Skipped">
            <summary>
            The object was skipped.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UpdateResultEnum.PostProcess">
            <summary>
            Imported, but post processing required.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.WorkflowStepTypeEnum">
            <summary>
            Workflow step types enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Undefined">
            <summary>
            Undefined workflow step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Start">
            <summary>
            General start step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.DocumentEdit">
            <summary>
            Special type of step for document edit step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Standard">
            <summary>
            Standard workflow step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Condition">
            <summary>
            Conditional step with else branch.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Multichoice">
            <summary>
            Step with several conditional choices. (If multiple conditions match, user must choose one.)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.MultichoiceFirstWin">
            <summary>
            Step with several conditional choices. (If multiple conditions match, first is used.)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Userchoice">
            <summary>
            Step with several conditional choices. (User must always choose.)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Wait">
            <summary>
            Wait step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Action">
            <summary>
            Step with custom action.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Note">
            <summary>
            Automation process note.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.Finished">
            <summary>
            Step with custom action.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.DocumentPublished">
            <summary>
            Special type of step for document published step.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WorkflowStepTypeEnum.DocumentArchived">
            <summary>
            Special type of step for document archived step.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabaseNotInstalledException">
            <summary>
            This exception is thrown when <see cref="T:CMS.DataEngine.CMSApplication"/> cannot connect to the database specified in the connection string during initialization.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseNotInstalledException.#ctor">
            <summary>
            Initiates a new instance of DatabaseNotInstalledException.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseNotInstalledException.#ctor(System.String)">
            <summary>
            Initiates a new instance of DatabaseNotInstalledException.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initiates a new instance of DatabaseNotInstalledException.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseNotInstalledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initiates a new instance of DatabaseNotInstalledException.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassNotFoundException">
            <summary>
            This exception is thrown when data class is not found.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassNotFoundException.ClassName">
            <summary>
            Gets name of the class that wasn't found.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassNotFoundException.ObjectType">
            <summary>
            Gets the object type whose class wasn't found.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="className">Name of the class that wasn't found.</param>
            <param name="objectType">The object type whose class wasn't found.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="className">Name of the class that wasn't found.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="className">Name of the class that wasn't found.</param>
            <param name="objectType">The object type whose class wasn't found.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of DataClassNotFoundException.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="T:CMS.DataEngine.DataClassTableUpdateException">
            <summary>
            Thrown when data class requires a table update that can not be performed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassTableUpdateException.DataClassName">
            <summary>
            Gets the data class that required the table update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataClassTableUpdateException.TableName">
            <summary>
            Gets name of the table that could not be updated.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassTableUpdateException.#ctor">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.DataClassTableUpdateException"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataClassTableUpdateException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.DataClassTableUpdateException"/>.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="dataClassName">The data class which required the update.</param>
            <param name="tableName">Name of the table that could not be updated.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassTableUpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.DataClassTableUpdateException"/>.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="M:CMS.DataEngine.DataClassTableUpdateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeColumnNotFoundException">
            <summary>
            The ObjectTypeColumnNotFoundException is thrown when an object type is without column definition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeColumnNotFoundException.ObjectType">
            <summary>
            Gets the object type whose column wasn't found.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeColumnNotFoundException.#ctor">
            <summary>
            Creates a new instance of ObjectTypeColumnNotFoundException.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeColumnNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of ObjectTypeColumnNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="objectType">The object type whose column wasn't found.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeColumnNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of ObjectTypeColumnNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeColumnNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of ObjectTypeColumnNotFoundException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="objectType">The object type whose column wasn't found.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectTypeColumnNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of ObjectTypeColumnNotFoundException.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="T:CMS.DataEngine.RecoverFromFailedInitializationException">
            <summary>
            This exception is thrown when <see cref="T:CMS.DataEngine.CMSApplication"/> tries to restart the application after failed initialization.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RecoverFromFailedInitializationException.#ctor">
            <summary>
            Initiates a new instance of RecoverFromFailedInitializationException.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RecoverFromFailedInitializationException.#ctor(System.String)">
            <summary>
            Initiates a new instance of RecoverFromFailedInitializationException.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CMS.DataEngine.RecoverFromFailedInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initiates a new instance of RecoverFromFailedInitializationException.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CMS.DataEngine.RecoverFromFailedInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initiates a new instance of RecoverFromFailedInitializationException.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CMS.DataEngine.XmlMaliciousContentException">
            <summary>
            XML media file contains potentially malicous content exception.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.XmlMaliciousContentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:CMS.DataEngine.XmlMaliciousContentException"/> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CMS.DataEngine.XmlMaliciousContentException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:CMS.DataEngine.XmlMaliciousContentException"/> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:CMS.DataEngine.CMSOutputMetaFile">
            <summary>
            Represents <see cref="T:CMS.DataEngine.MetaFileInfo"/> object used for response output.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.MetaFile">
            <summary>
            Meta file info without AttachmentBinary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.LastModified">
            <summary>
            Time when the file was last modified.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.RedirectTo">
            <summary>
            If set, file should be redirected to the file system.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.SiteName">
            <summary>
            Meta file site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.PhysicalFile">
            <summary>
            Physical file path to the data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.#ctor(CMS.DataEngine.MetaFileInfo,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="mi">MetaFile info</param>
            <param name="data">Output file data</param>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.EnsureData(System.Byte[])">
            <summary>
            Ensures that the object contains the output data.
            </summary>
            <param name="defaultData">Default data which should be loaded if data required</param>
            <returns>Returns true if new data has been loaded</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.LoadData(System.Byte[])">
            <summary>
            Loads the data to the object.
            </summary>
            <param name="data">New data</param>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.DataEngine.CMSOutputMetaFile.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.DataEngine.CMSOutputMetaFile.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.DataEngine.IMetaFileInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.DataEngine.MetaFileInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MetaFileInfo">
            <summary>
            MetaFileInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.mInputStream">
            <summary>
            Input stream - for file upload.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfo.mMetaFileCustomData">
            <summary>
            Attachment custom data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileImageWidth">
            <summary>
            MetaFile image width.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileMimeType">
            <summary>
            MetaFile MIME type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileExtension">
            <summary>
            MetaFile extension.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileBinary">
            <summary>
            Gets or sets meta file binary data.
            </summary>
            <remarks>
            When meta file binary data is not set and <see cref="P:CMS.DataEngine.MetaFileInfo.InputStream"/> is provided,
            the binary data is loaded from the stream.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileGroupName">
            <summary>
            MetaFile group name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileImageHeight">
            <summary>
            MetaFile image height.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileObjectID">
            <summary>
            MetaFile object ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileName">
            <summary>
            MetaFile name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileID">
            <summary>
            MetaFile ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileGUID">
            <summary>
            MetaFile GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileObjectType">
            <summary>
            MetaFile object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileSize">
            <summary>
            MetaFile size.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileSiteID">
            <summary>
            MetaFile site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.InputStream">
            <summary>
            Gets or sets an input stream for loading the binary data of meta file. The loading is performed upon either <see cref="M:CMS.DataEngine.MetaFileInfoProvider.SetMetaFileInfo(CMS.DataEngine.MetaFileInfo)"/>
            call or <see cref="M:CMS.DataEngine.MetaFileInfo.get_MetaFileBinary"/> access.
            </summary>
            <remarks>
            <para>
            Binary data can be provided either by setting an input stream, or by setting the <see cref="P:CMS.DataEngine.MetaFileInfo.MetaFileBinary"/> property.
            The provided input stream is properly disposed after it is processed (and this property is reset to null).
            </para>
            <para>
            When meta files are configured to be stored in the file system, a stream-like processing is used (i.e. the binary data is not materialized
            in memory).
            </para>
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.BinaryDataChecksum">
            <summary>
            Binary data checksum to compare if data changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileTitle">
            <summary>
            MetaFile title.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileDescription">
            <summary>
            MetaFile description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.MetaFileCustomData">
            <summary>
            MetaFile custom data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.ObjectParentID">
            <summary>
            Object parent ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfo.ParentObjectType">
            <summary>
            Object parent type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.GetCacheDependencies">
            <summary>
            Gets collection of dependency keys to be touched when modifying the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty MetaFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MetaFileInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates a new MetaFileInfo object based on the file specified by given path.
            </summary>
            <param name="filePath">File path</param>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
            <param name="category">Category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.String,System.String)">
            <summary>
            Creates a new AttachmentInfo object based on the file posted through the upload control.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
            <param name="category">Category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.EnsureBinaryData(System.Boolean)">
            <summary>
            Ensures the binary data - loads the binary data from file stream if present.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.LoadDataFromInputStream">
            <summary>
            Loads the attachment data from <see cref="P:CMS.DataEngine.MetaFileInfo.InputStream"/>, disposes it and sets to null.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.LoadDataFromStream(System.IO.Stream)">
            <summary>
            Loads the attachment data from <paramref name="stream"/> and disposes it.
            Does nothing when <paramref name="stream"/> is null.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="stream"/> is not positioned to 0.</exception>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.ReadStreamToEnd(System.IO.Stream)">
            <summary>
            Reads stream to byte array. Does not close the stream.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.SetParent(CMS.DataEngine.GeneralizedInfo)">
            <summary>
            Updates the parent object, enables to update the data that is overridden in the parent object before or after it is saved
            </summary>
            <param name="parent">Parent object that will be saved</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.IsIcon(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the MetaFile is a thumbnail metafile
            </summary>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.IsThumbnail(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if the MetaFile is a thumbnail metafile
            </summary>
            <param name="parentTypeInfo">Parent type info</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones metafile and inserts it to DB as new object.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies. First tries to execute removedependencies query, if not found, automatic process is executed.
            </summary>
            <param name="deleteAll">If false, only required dependencies are deleted, dependencies with default value are replaced with default value and nullable values are replaced with null</param>
            <param name="clearHashtables">If true, hashtables of all objecttypes which were potentially modified are cleared</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfo.GetDefaultDataWhereCondition(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the where condition to filter out the default installation data
            </summary>
            <param name="recursive">Indicates whether where condition should contain further dependency conditions.</param>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="T:CMS.DataEngine.MetaFileInfoProvider">
            <summary>
            Class providing MetaFileInfo management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MetaFileInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfoProvider.WebApplicationPhysicalPath">
            <summary>
            Full path to the root of the web.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MetaFileInfoProvider.DeletePhysicalFiles">
            <summary>
            Indicates if physical files should be deleted.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles">
            <summary>
            Returns all metafiles.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfo(System.Int32)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileId">MetaFile id</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfo(System.Guid,System.String,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfoWithoutBinary(System.Guid,System.String,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile without the binary data.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SetMetaFileInfo(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Sets (updates or inserts) specified metaFile.
            </summary>
            <param name="metaFile">MetaFile to set</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteMetaFileInfo(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Deletes specified metaFile.
            </summary>
            <param name="metaFileObj">MetaFile object</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteMetaFileInfo(System.Int32)">
            <summary>
            Deletes specified metaFile.
            </summary>
            <param name="metaFileId">MetaFile id</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets all the files with specified where/order by.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all the files with specified where/order by.
            </summary>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the file list of the files for certain object.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the file list of the files for certain object.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
            <param name="columns">Data columns to return</param>
            <param name="topN">Specifies number of returned recordsd</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesWithBinary(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object with the binary file data. Loads the binaries from file system if the binary is missing.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesWithoutBinary(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object without the binary file data.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFiles(System.Int32,System.String)">
            <summary>
            Will call the previous method will all the remaining parameters null.
            </summary>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFiles(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Deletes all files associated to the given object.
            </summary>
            <param name="infoObject">Info object</param>
            <param name="category">Meta files category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFiles(System.Int32,System.String,System.String)">
            <summary>
            Deletes all files associated with the given object.
            </summary>
            <param name="objectId">Object ID</param>
            <param name="objectType">Object type</param>
            <param name="category">Meta files category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.UpdateMetaFiles(CMS.DataEngine.BaseInfo,System.Data.DataTable,System.Int32,CMS.DataEngine.TranslationHelper,CMS.DataEngine.LoadDataEventHandler,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the object meta files from the given DataTable. Returns true if some metafiles were updated.
            </summary>
            <param name="infoObj">Info object for which the metafiles update</param>
            <param name="filesDt">Table of the new files (with binaries)</param>
            <param name="filesObjectId">Object ID in the new files table</param>
            <param name="th">If provided, <see cref="F:CMS.DataEngine.ColumnsTranslationEvents.TranslateColumns"/> events are raised with given <see cref="T:CMS.DataEngine.TranslationHelper"/>.</param>
            <param name="onLoadData">Load data event handler</param>
            <param name="logSynchronization">Indicates if staging tasks should be logged</param>
            <param name="parentIsNew">If true, the parent object is a new object, therefore is no need to update or delete existing (there are none)</param>
            <param name="onlyAddNew">If true, only new metafiles are added and existing are not updated</param>
            <returns>Returns the GUID of the thumbnail meta file if found</returns>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.CopyMetaFiles(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Duplicates metafiles for specified object. Returns old guid/new guid list.
            </summary>
            <param name="sourceObjectId">Source object</param>
            <param name="targetObjectId">Target object</param>
            <param name="objectType">Type</param>
            <param name="category">Category</param>
            <param name="convList">List containing old and new guids</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.CopyMetaFiles(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Duplicates metafiles for specified object. Returns old guid/new guid list.
            </summary>
            <param name="sourceObjectId">Source object</param>
            <param name="targetObjectId">Target object</param>
            <param name="sourceObjectType">Source object type</param>
            <param name="sourceCategory">Source object category</param>
            <param name="targetObjectType">Target object type</param>
            <param name="targetCategory">Target object category</param>
            <param name="convList">List containing old and new guids</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.MoveMetaFiles(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Moves metafiles for one object to another.
            </summary>
            <param name="sourceObjectId">Source object ID</param>
            <param name="targetObjectId">Target object ID</param>
            <param name="sourceObjectType">Source object type</param>
            <param name="sourceCategory">Source category</param>
            <param name="targetObjectType">Target object type</param>
            <param name="targetCategory">Target category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GenerateThumbnails(System.String)">
            <summary>
            Returns the current settings whether the thumbnails should be generated.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetGUIDWhereCondition(System.Guid,System.String,System.Boolean)">
            <summary>
            Gets the meta file where condition.
            </summary>
            <param name="metaFileGuid">File GUID</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean)">
            <summary>
            Save file to the disk.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="fileData">File data (byte[] or Stream)</param>
            <param name="deleteOldFiles">Indicates whether files in destination folder with mask '[guid]*.*' should be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean,System.Boolean)">
            <summary>
            Saves file to the disk.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="fileData">File data (byte[] or Stream)</param>
            <param name="deleteOldFiles">Indicates whether files in destination folder with mask '[guid]*.*' should be deleted</param>
            <param name="synchronization">Indicates if this function is called from "ProcessTask"</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFullFileName(System.String,System.String)">
            <summary>
            Returns full file name ([name.extension] if extension is specified) or ([name] only if extension is not specified).
            </summary>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete all files with the same name ([name].*).
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">Name of the file to delete</param>
            <param name="deleteDirectory">Determines whether delete specified directory or not</param>
            <param name="synchronization">Indicates wehther the method is called due to synchronization</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetWhereCondition(System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets the where condition for meta files.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.EnsureMetaFileBinaries(System.Data.DataTable)">
            <summary>
            Ensures the binary data in the DataTable of metafiles.
            </summary>
            <param name="dt">DataTable with the data</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFile(System.String,System.String,System.Boolean)">
            <summary>
            Delete all files with the same name ([name].*).
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">Name of the file to delete</param>
            <param name="deleteDirectory">Determines whether delete specified directory or not</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesInternal">
            <summary>
            Returns all metafiles.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileInfoInternal(System.Guid,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the MetaFileInfo structure for the specified metaFile.
            </summary>
            <param name="metaFileGuid">MetaFile guid</param>
            <param name="siteName">Site name</param>
            <param name="globalOrLocal">If true, global (local) files are allowed when local (global) not found</param>
            <param name="binaryData">Indicates if binary data should be retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SetInfo(CMS.DataEngine.MetaFileInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesInternal(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <param name="columns">Data columns to return</param>
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement</param>
            <param name="topN">Specifies number of returned records</param>
            <param name="offset">Index of first record to get</param>
            <param name="maxRecords">Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)</param>
            <param name="totalRecords">Returns total number of available records</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFilesWithoutBinaryInternal(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the file list of the files for certain object without the binary file data.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order By</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFilesInternal(System.Int32,System.String,System.String)">
            <summary>
            Delete all files associated to the given object.
            </summary>
            <param name="objectId">Object id</param>
            <param name="objectType">Meta files type</param>
            <param name="category">Category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFilesInternal(CMS.DataEngine.GeneralizedInfo,System.String)">
            <summary>
            Deletes all files associated to the given object.
            </summary>
            <param name="infoObject">Info object</param>
            <param name="category">Meta files category</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.EnsurePhysicalFile(CMS.DataEngine.MetaFileInfo,System.String)">
            <summary>
            Ensures the file in the file system and returns the path to the file.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.EnsureThumbnailFile(CMS.DataEngine.MetaFileInfo,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures the thumbnail file.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="width">File width</param>
            <param name="height">File height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFile(System.Guid,System.String)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="guid">Guid of the file to get</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFile(CMS.DataEngine.MetaFileInfo,System.String)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFileBinary(System.Guid,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns meta file binary and optionaly store it in file system.
            </summary>
            <param name="guid">Guid of the file to get</param>
            <param name="id">ID of the file to get</param>
            <param name="siteName">Site name</param>
            <param name="storeInFileSystem">If true, given meta file is stored in file system</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFileBinary(System.String,System.String)">
            <summary>
            Returns the file binary from disk.
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">Name of the file to get, including extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.UpdatePhysicalFileLastWriteTime(System.String,System.String,System.String)">
            <summary>
            Update file last modified attribute, so it's evaluated us up to date.
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">File name</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.CanResizeImage(CMS.DataEngine.MetaFileInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the image should be processed (resized) by the Image manager (if the destination size is smaller).
            </summary>
            <param name="fileInfo">Meta file info to check</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="maxSideSize">Max side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetImageThumbnail(CMS.DataEngine.MetaFileInfo,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail (from the disk - if already exists, or create new one and save it to disk - if doesnt exist).
            </summary>
            <param name="fileInfo">File info</param>
            <param name="siteName">Site name</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetImageThumbnail(System.Guid,System.Byte[],System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail (from the disk - if already exists, or create new one and save it to disk - if doesnt exist).
            </summary>
            <param name="guid">File GUID</param>
            <param name="imageData">Image data</param>
            <param name="extension">Image extenstion</param>
            <param name="siteName">Site name</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
            <param name="originalWidth">Original width of the image</param>
            <param name="originalHeight">Original height of the image</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetImageThumbnailFile(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the image thumbnail from the disk.
            </summary>
            <param name="guid">Guid of the file to get</param>
            <param name="siteName">Site name</param>
            <param name="height">Image thumbnail width</param>
            <param name="width">Image thumbnail height</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.ResizeMetaFiles(System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes specified metafiles to the required dimensions.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="width">Image widht</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Image max side size</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.SetMetaFilesQuality(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Changes images quality using GDI+ built in JPEG encoder.
            </summary>
            <param name="objectId">ID of specific object</param>
            <param name="objectType">Object type</param>
            <param name="group">Group name</param>
            <param name="where">Where condition</param>
            <param name="quality">New image quality, from 0 (lowest quality) to 100 (highest quality)</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFilePhysicalPath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetExistingFilePhysicalPath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the file if exists, otherwise null.
            </summary>
            <param name="siteName">Site name</param>
            <param name="fileName">File name</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetThumbnailPhysicalPath(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns physical path to the thumbnail.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="extension">File extension</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFileFolder(System.String,System.String)">
            <summary>
            Returns physical path to the meta file folder (meta files folder path + subfolder).
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">Meta file GUID</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetFilesFolderPath(System.String)">
            <summary>
            Returns physical path to folder with meta files which are associated with the specified site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileInfoProvider.GetMetaFileUrl(System.Guid,System.String)">
            <summary>
            Returns meta file url.
            </summary>
            <param name="metaFileGuid">Meta file GUID</param>
            <param name="fileName">File name without extension</param>
        </member>
        <member name="T:CMS.DataEngine.MetaFileURLProvider">
            <summary>
            Provider for metafiles URLs.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrl(System.Guid,System.String)">
            <summary>
            Returns meta file URL.
            </summary>
            <param name="metaFileGuid">Meta file GUID</param>
            <param name="fileName">File name without extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrlFormat">
            <summary>
            Returns format of the metafile URL in relative form (with ~). Meaning of the wildcards in returned URL:
            - {0} - metafile GUID.
            - {1} - extensionless metafile file name.
            </summary>
            <example>
            Example how the returned URL can look like:
            ~/getmetafile/{0}/{1}
            </example>
            <returns>Format of the metafile URL.</returns>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrlInternal(System.Guid,System.String)">
            <summary>
            Returns meta file URL.
            </summary>
            <param name="metaFileGuid">Meta file GUID</param>
            <param name="fileName">File name without extension</param>
        </member>
        <member name="M:CMS.DataEngine.MetaFileURLProvider.GetMetaFileUrlFormatInternal">
            <summary>
            Returns format of the metafile URL in relative form (with ~). Meaning of the wildcards in returned URL:
            - {0} - metafile GUID.
            - {1} - extensionless metafile file name.
            </summary>
            <example>
            Example how the returned URL can look like:
            ~/getmetafile/{0}/{1}
            </example>
            <returns>Format of the metafile URL</returns>
        </member>
        <member name="T:CMS.DataEngine.ObjectAttachmentsCategories">
            <summary>
            Class containing names of the object attachment (metafiles) categories names used by CMS.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.LAYOUT">
            <summary>
            Layouts category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.FORMLAYOUT">
            <summary>
            Form layout category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.THUMBNAIL">
            <summary>
            Thumbnails category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.ICON">
            <summary>
            Icons category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.TEMPLATE">
            <summary>
            Templates category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.ISSUE">
            <summary>
            Issue category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.IMAGE">
            <summary>
            Image category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.EPRODUCT">
            <summary>
            E-product category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectAttachmentsCategories.ATTACHMENT">
            <summary>
            Attachment category.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ITempFileInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.DataEngine.TempFileInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.TempFileInfo">
            <summary>
            TempFileInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileSiteName">
            <summary>
            Temporary file site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileID">
            <summary>
            Temporary file ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileLastModified">
            <summary>
            Date and time when the temporary file was last modified.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileParentGUID">
            <summary>
            Temporary file scope unique identifier (temporary files are numbered uniquely within this scope).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileMimeType">
            <summary>
            Temporary file mime type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileGUID">
            <summary>
            Temporary file unique identifier.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileBinary">
            <summary>
            Temporary file binary.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileNumber">
            <summary>
            Name of the temporary file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileName">
            <summary>
            Name of the original file.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileExtension">
            <summary>
            Temporary file extension.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileDirectory">
            <summary>
            Folder within temporary files folder.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileImageWidth">
            <summary>
            Temporary file width (makes sense for images only).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileSize">
            <summary>
            Temporary files size.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileImageHeight">
            <summary>
            Temporary file height (makes sense for images only).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileTitle">
            <summary>
            Temporary file title.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfo.FileDescription">
            <summary>
            Temporary file description.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty TempFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new TempFileInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfo.EnsureBinaryData(System.Boolean)">
            <summary>
            Ensures the binary data - loads the binary data from file if available.
            </summary>
            <param name="forceLoadFromDB">If true, the data are loaded even from DB</param>
        </member>
        <member name="T:CMS.DataEngine.TempFileInfoProvider">
            <summary>
            Class providing TempFileInfo management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.IMAGE_EDITOR_FOLDER">
            <summary>
            Name of the parent folder for image editor temporary files.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.MULTIFILE_UPLOADER_FOLDER">
            <summary>
            Name of the parent folder for multifile uploader temporary files.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.TempFileInfoProvider.mTemporaryFilesFolderPath">
            <summary>
            Temporary files folder path.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.TempFileInfoProvider.TemporaryFilesFolderPath">
            <summary>
            Temporary files folder path (default: ~/App_Data/CMSTemp/)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFiles">
            <summary>
            Returns all temp files.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfo(System.Int32)">
            <summary>
            Returns temporary file with specified ID.
            </summary>
            <param name="tempFileId">Temporary file ID</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfo(System.Guid,System.Int32)">
            <summary>
            Returns temporary file with specified number.
            </summary>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="number">Temporary file number within the parent scope</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.Set(CMS.DataEngine.TempFileInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.SetTempFileInfo(CMS.DataEngine.TempFileInfo)">
            <summary>
            Sets (updates or inserts) specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be set</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.Delete(CMS.DataEngine.TempFileInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFileInfo(CMS.DataEngine.TempFileInfo)">
            <summary>
            Deletes specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFileInfo(System.Int32)">
            <summary>
            Deletes temporary file with specified ID.
            </summary>
            <param name="tempFileId">Temporary file ID</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFiles(System.String,System.Guid)">
            <summary>
            Deletes all temporary files for the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFiles(System.String,System.Guid,System.Int32,System.Int32)">
            <summary>
            Deletes all the temporary files with number between lower and upper bound for the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="lowerBound">Number of the temporary file which should be deleted as the first</param>
            <param name="upperBound">Number of the temporary file which should be deleted as the last</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFiles(System.String,System.DateTime)">
            <summary>
            Deletes old temporary files from the specified parent folder.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="olderThan">All temporary files older than this date/time are deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfoInternal(System.Int32)">
            <summary>
            Returns temporary file with specified ID.
            </summary>
            <param name="tempFileId">Temporary file ID</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns temporary file from the specified parent scope and with specified number.
            </summary>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="number">Number of the temporary file to return</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.SetTempFileInfoInternal(CMS.DataEngine.TempFileInfo)">
            <summary>
            Sets (updates or inserts) specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be set</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFileInfoInternal(CMS.DataEngine.TempFileInfo)">
            <summary>
            Deletes specified temporary file.
            </summary>
            <param name="tempFileObj">Temporary file to be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFilesInternal(System.String,System.Guid)">
            <summary>
            Deletes all the temporary files from the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFilesInternal(System.String,System.Guid,System.Int32,System.Int32)">
            <summary>
            Deletes all the temporary files with number between lower and upper bound from the given parent scope.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="lowerBound">Number of temporary file which should be deleted as the first</param>
            <param name="upperBound">Number of the temporary file which should be deleted as the last</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.DeleteTempFilesInternal(System.String,System.DateTime)">
            <summary>
            Deletes old temporary files from the specified parent folder.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="olderThan">All temporary files older than this date/time are deleted</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.EnsurePhysicalFile(CMS.DataEngine.TempFileInfo)">
            <summary>
            Ensures the file in the file system.
            </summary>
            <param name="fileInfo">Temporary file</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileBinary(System.String,System.Guid,System.Int32,System.String)">
            <summary>
            Returns the temporary file binary data from disk.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFileBinary(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the temporary file binary data from disk.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeFolder">Scope folder which is located under the parent folder</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesFolderPath(System.String,System.Guid)">
            <summary>
            Returns physical path to the folder where temporary files are located.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">Parent scope GUID</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesFolderPath(System.String,System.String)">
            <summary>
            Returns physical path to the folder where temporary files are located.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeFolder">Scope folder which is located under the parent folder</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesRootFolderPath">
            <summary>
            Returns physical path to the root folder of all temporary files.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilesRootFolderPath(System.String)">
            <summary>
            Returns physical path to the root folder of all temporary files.
            </summary>
            <param name="webFullPath">Full path to the root of the web project (e.g. c:\WebProject\)</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilePath(System.String,System.Guid,System.Int32,System.String)">
            <summary>
            Returns physical path to the specified temporary file.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeGuid">GUID of the parent scope</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="M:CMS.DataEngine.TempFileInfoProvider.GetTempFilePath(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns physical path to the specified temporary file.
            </summary>
            <param name="parentFolder">Parent folder which is located under the temporary files root folder</param>
            <param name="scopeFolder">Scope folder which is located under the parent folder</param>
            <param name="fileNumber">Temporary file number</param>
            <param name="fileExtension">Temporary file extension</param>
        </member>
        <member name="T:CMS.DataEngine.XmlVulnerabilityChecker">
            <summary>
            Checks whether xml file contains potentially malicious content that can be used for stored XSS.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.XmlVulnerabilityChecker.Check(CMS.Base.IUploadedFile)">
            <summary>
            Checks whether xml file contains potentially malicious content.
            </summary>
            <param name="uploadedFile">Uploaded file to check.</param>
        </member>
        <member name="M:CMS.DataEngine.XmlVulnerabilityChecker.Check(System.IO.Stream)">
            <summary>
            Checks whether xml file contains potentially malicious content.
            </summary>
            <param name="fileStream">Stream of the file to check.</param>
        </member>
        <member name="M:CMS.DataEngine.XmlVulnerabilityChecker.Check(System.String)">
            <summary>
            Checks whether xml file contains potentially malicious content.
            </summary>
            <param name="filePath">Path to the file to check.</param>
        </member>
        <member name="T:CMS.DataEngine.BulkDeleteEventArgs">
            <summary>
            Bulk delete event arguments.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkDeleteEventArgs.TypeInfo">
            <summary>
            Processed type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkDeleteEventArgs.WhereCondition">
            <summary>
            Where condition for the bulk delete.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkDeleteEventArgs.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkDeleteEventArgs"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkDeleteEventArgs.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkDeleteEventArgs"/>.
            </summary>
            <param name="typeInfo">Processed type info</param>
            <param name="whereCondition">Where condition for the bulk update</param>
        </member>
        <member name="T:CMS.DataEngine.BulkDeleteHandler">
            <summary>
            Bulk delete handler enables deletion processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkDeleteHandler.#ctor">
            <summary>
            Creates instance of <see cref="T:CMS.DataEngine.BulkDeleteHandler"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkDeleteHandler.#ctor(CMS.DataEngine.BulkDeleteHandler)">
            <summary>
            Creates instance of <see cref="T:CMS.DataEngine.BulkDeleteHandler"/>.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.BulkDeleteHandler.StartEvent(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition)">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="typeInfo">Type information regarding the objects updated.</param>
            <param name="where">Where condition for the update</param>
        </member>
        <member name="T:CMS.DataEngine.BulkInsertEventArgs">
            <summary>
            Bulk insert event arguments.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertEventArgs.TypeInfo">
            <summary>
            Processed type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertEventArgs.InsertedObjects">
            <summary>
            Inserted objects.
            </summary>
            <remarks>Objects in the collection are not complete (ID is not set) and are not intended for additional processing</remarks>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertEventArgs.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkInsertEventArgs"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertEventArgs.#ctor(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.IInfo})">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkInsertEventArgs"/>.
            </summary>
            <param name="typeInfo">Processed type info</param>
            <param name="objects">Inserted objects</param>
        </member>
        <member name="T:CMS.DataEngine.BulkInsertHandler">
            <summary>
            Bulk insert handler enables insert result processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertHandler.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkInsertHandler"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertHandler.#ctor(CMS.DataEngine.BulkInsertHandler)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkInsertHandler"/>.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertHandler.StartEvent(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.IInfo})">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="typeInfo">Type information regarding the objects inserted.</param>
            <param name="objects">Collection of inserted objects</param>
        </member>
        <member name="T:CMS.DataEngine.BulkUpdateEventArgs">
            <summary>
            Bulk update event arguments.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkUpdateEventArgs.TypeInfo">
            <summary>
            Processed type info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkUpdateEventArgs.WhereCondition">
            <summary>
            Where condition for the bulk update.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkUpdateEventArgs.ChangedColumns">
            <summary>
            Names of the columns that are changed by the bulk update. Any object's column can be changed if this collection is not set or empty.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkUpdateEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkUpdateEventArgs.#ctor(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor
            </summary>
            <param name="typeInfo">Processed type info</param>
            <param name="whereCondition">Where condition for the bulk update</param>
            <param name="changedColumns">Names of the columns that are changed by the bulk update. Any object's column can be changed if this collection is not set or empty.</param>
        </member>
        <member name="T:CMS.DataEngine.BulkUpdateHandler">
            <summary>
            Bulk update handler enables update result processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkUpdateHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkUpdateHandler.#ctor(CMS.DataEngine.BulkUpdateHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.BulkUpdateHandler.StartEvent(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="typeInfo">Type information regarding the objects updated.</param>
            <param name="where">Where condition for the update</param>
            <param name="changedColumns">Names of the columns that are changed by the bulk update. Any object's column can be changed if this collection is not set or empty.</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractSynchronizationSettings">
            <summary>
            Encapsulates most general settings for staging and integration bus.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.TaskType">
            <summary>
            Type of the task.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.WorkerCall">
            <summary>
            Indicates if in context of worker call (asynchronous task logging).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.RunAsynchronously">
            <summary>
            Indicates if task logging should be executed asynchronously (in separate thread). By default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.LogStaging">
            <summary>
            Indicates if the staging task should be logged. By default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.ServerID">
            <summary>
            ID of the staging server where the staging task will be logged.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.LogIntegration">
            <summary>
            Indicates if the integration task should be logged. By default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.TaskGroups">
            <summary>
            Staging task groups to which the staging task belongs.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractSynchronizationSettings.User">
            <summary>
            <see cref="T:CMS.Base.IUserInfo"/> that will be logged with staging task.
            If equals to null, no user will be logged with staging task.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractSynchronizationSettings.#ctor">
            <summary>
            Constructor for integration bus and staging settings.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LogObjectChangeEventArgs">
            <summary>
            Object event arguments for log object change event
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeEventArgs.Settings">
            <summary>
            Log object change settings
            </summary>
        </member>
        <member name="T:CMS.DataEngine.LogObjectChangeHandler">
            <summary>
            Log object change handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeHandler.#ctor(CMS.DataEngine.LogObjectChangeHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeHandler.StartEvent(CMS.DataEngine.LogObjectChangeSettings)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="settings">Log object change settings</param>
        </member>
        <member name="T:CMS.DataEngine.LogObjectChangeSettings">
            <summary>
            Class for log object change.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.LogObjectChangeSettings.ENABLED_SERVERS">
            <summary>
            Constant used to specify all the enabled servers.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.InfoObj">
            <summary>
            Info object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.LogIntegrationSimpleTasks">
            <summary>
            Indicates if the simple integration task should be logged. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.IsTouchParent">
            <summary>
            Indicates if the log request originates from touching the parent object. Default false.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.LogExportTask">
            <summary>
            Indicates id the export task should be logged. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.CreateVersion">
            <summary>
            Indicates if the version should be created. Default true.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.SiteID">
            <summary>
            Site ID of the servers.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.ServerID">
            <summary>
            ID of staging server (Or SynchronizationInfoProvider.ENABLED_SERVERS for all enabled servers)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.LogObjectChangeSettings.DataChanged">
            <summary>
            If true, the data of the object involved has changed. Default true.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeSettings.#ctor(CMS.DataEngine.GeneralizedInfo,CMS.DataEngine.TaskTypeEnum)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Object</param>
            <param name="taskType">Task type</param>
        </member>
        <member name="M:CMS.DataEngine.LogObjectChangeSettings.GetDuplicityKey(System.String)">
            <summary>
            Gets the duplicity key.
            </summary>
            <param name="keyPrefix">Key prefix</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectDataEventArgs">
            <summary>
            Object data event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataEventArgs.Data">
            <summary>
            Data set returned by object query or custom data set
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataEventArgs.Query">
            <summary>
            Object query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectDataEventArgs.TotalRecords">
            <summary>
            Number of total records when paging is used. If value is less than 0, value is calculated as number of rows in Data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectDataEventHandler">
            <summary>
            Object data handler enables manipulation with object data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataEventHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataEventHandler.#ctor(CMS.DataEngine.ObjectDataEventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectDataEventHandler.StartEvent(System.Data.DataSet,CMS.DataEngine.IObjectQuery,System.Int32)">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="result">Data set with object data.</param>
            <param name="query">Default object query used to select data in case data set is not returned by event.</param>
            <param name="totalRecords">Number of records which should by used for paging. If not set, number of rows in dataset is calculated.</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectEventArgs`1.Object">
            <summary>
            Processed object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectEventArgs`1.Content">
            <summary>
            Object content. Used when it makes sense: Search indexing
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectEvents">
            <summary>
            Object events
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Update">
            <summary>
            Fires when object is updated
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.UpdateInner">
            <summary>
            Fires when the object is updated in the database. 
            This is a read-only event, it is forbidden to change the object passed as event argument. If you need to modify the object, use <see cref="F:CMS.DataEngine.ObjectEvents.Update"/> events.
            </summary>
            <remarks>
            <see cref="F:CMS.DataEngine.ObjectEvents.Update"/>.Before event is fired before this event and <see cref="F:CMS.DataEngine.ObjectEvents.Update"/>.After event is fired after this event.
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Insert">
            <summary>
            Fires when object is inserted
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Delete">
            <summary>
            Fires when object is deleted
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.GetData">
            <summary>
            Fires when object data are being retrieved.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.GetContent">
            <summary>
            Fires when search content is requested. You can modify content value which is saved to the search index.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.LogChange">
            <summary>
            Fires when object tasks are logged. You can disable tasks logging for staging, integration etc.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.CheckPermissions">
            <summary>
            Fires when permissions are checked on the object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.ChangeOrder">
            <summary>
            Fires when change order is requested on the object
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.Sort">
            <summary>
            Fires when sorting of a objects is requested
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.BulkInsert">
            <summary>
            Fires when objects are inserted in bulk.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.BulkUpdate">
            <summary>
            Fires when objects are updated in bulk.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.BulkDelete">
            <summary>
            Fires when objects are deleted in bulk.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectEvents.RequireEventHandling">
            <summary>
            Fires before a depending object, which doesn't have deletion type specified, is deleted. You can decide if the object will be deleted with API processing all the events or with generated DB query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.#ctor(CMS.DataEngine.ObjectHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectHandler.GetRecursionKey(CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Gets the recursion key of the class to identify recursion
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectTypeInfoEventArgs">
            <summary>
            Object TypeInfo event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfoEventArgs.TypeInfo">
            <summary>
            Processed type info
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectTypeInfoEventArgs.Result">
            <summary>
            Result of the check. If true objects specified by <see cref="P:CMS.DataEngine.ObjectTypeInfoEventArgs.TypeInfo"/> will be processed.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectChangeOrderEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs.#ctor(CMS.DataEngine.BaseInfo,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="newOrder">Specific new document order index to be set</param>
            <param name="relativeOrder">Indicates if the NewOrder index is relative to current document position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectChangeOrderEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectChangeOrderEventArgs`1.NewOrder">
            <summary>
            Specific new document order index to be set.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectChangeOrderEventArgs`1.RelativeOrder">
            <summary>
            Indicates if the NewOrder index is relative to current document position.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectChangeOrderEventArgs`1.OrderColumn">
            <summary>
            Name of the order column. If null, OrderColumn from TypeInfo is taken.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderEventArgs`1.#ctor(`0,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="newOrder">Specific new document order index to be set</param>
            <param name="relativeOrder">Indicates if the NewOrder index is relative to current document position</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectChangeOrderHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderHandler.#ctor(CMS.DataEngine.ObjectChangeOrderHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectChangeOrderHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSortEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs.#ctor(CMS.DataEngine.BaseInfo,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="ascending">Indicates if the sort should be ascending</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSortEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSortEventArgs`1.OrderColumn">
            <summary>
            Name of the order column. If null, OrderColumn from TypeInfo is taken.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSortEventArgs`1.NameColumn">
            <summary>
            Column by the content of which the alphabetical order will be set.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSortEventArgs`1.Ascending">
            <summary>
            Indicates if the sort should be ascending.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortEventArgs`1.#ctor(`0,System.Boolean,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="infoObject">Object instance</param>
            <param name="ascending">Indicates if the sort should be ascending</param>
            <param name="orderColumn">Name of the order column. If null, OrderColumn from TypeInfo is taken</param>
            <param name="nameColumn">Column by the content of which the alphabetical order will be set</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSortHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortHandler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortHandler.#ctor(CMS.DataEngine.ObjectSortHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSortHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSecurityEventArgs">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSecurityEventArgs`1">
            <summary>
            Object event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.Result">
            <summary>
            Result of the security check. If true, the security check is allowed
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.User">
            <summary>
            User for which the permissions is checked
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.SiteName">
            <summary>
            Site name for which the security check is performed. Doesn't necessarily have to be the same as the object site name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSecurityEventArgs`1.Permission">
            <summary>
            Permission to check
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityEventArgs`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectSecurityHandler">
            <summary>
            Object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityHandler.#ctor(CMS.DataEngine.ObjectSecurityHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSecurityHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.DataEngine.SimpleObjectHandler">
            <summary>
            Simple object handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.#ctor(CMS.DataEngine.SimpleObjectHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.StartEvent(CMS.DataEngine.BaseInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectHandler.StartEvent(CMS.DataEngine.BaseInfo,System.String@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Object</param>
            <param name="content">Content that is processed by the handler</param>
        </member>
        <member name="T:CMS.DataEngine.SimpleObjectTypeInfoHandler">
            <summary>
            Allows to decide whether the objects of given type will be processed in a specific manner.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SimpleObjectTypeInfoHandler.StartEvent(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="typeInfo">Handled object</param>
        </member>
        <member name="T:CMS.DataEngine.BulkInsertDataEventArgs">
            <summary>
            Bulk insert event arguments.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertDataEventArgs.SourceData">
            <summary>
            Inserted data.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertDataEventArgs.TargetTable">
            <summary>
            Target table.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertDataEventArgs.InsertSettings">
            <summary>
            Bulk insert configuration.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.BulkInsertDataEventArgs.Connection">
            <summary>
            Data connection.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertDataEventArgs.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkInsertDataEventArgs"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertDataEventArgs.#ctor(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings,CMS.DataEngine.IDataConnection)">
            <summary>
            Creates new instance of <see cref="T:CMS.DataEngine.BulkInsertDataEventArgs"/>.
            </summary>
            <param name="sourceData">Source data.</param>
            <param name="targetTable">Target table.</param>
            <param name="insertSettings">Bulk insert configuration.</param>
            <param name="connection">Data connection.</param>
        </member>
        <member name="T:CMS.DataEngine.BulkInsertDataHandler">
            <summary>
            Bulk insert handler enables insert result processing.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BulkInsertDataHandler.StartEvent(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings,CMS.DataEngine.IDataConnection)">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="sourceData">Source data.</param>
            <param name="targetTable">Target table.</param>
            <param name="insertSettings">Bulk insert configuration.</param>
            <param name="connection">Data connection.</param>
        </member>
        <member name="T:CMS.DataEngine.ExecuteQueryEventArgs`1">
            <summary>
            Execute query event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExecuteQueryEventArgs`1.Query">
            <summary>
            Processed query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExecuteQueryEventArgs`1.Connection">
            <summary>
            Query connection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExecuteQueryEventArgs`1.Result">
            <summary>
            Result of the query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ExecuteQueryHandler`1">
            <summary>
            Execute query handler
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExecuteQueryHandler`1.StartEvent(CMS.DataEngine.QueryParameters,CMS.DataEngine.IDataConnection)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="query">Query that executes</param>
            <param name="conn">Connection executing the query</param>
        </member>
        <member name="T:CMS.DataEngine.SqlEvents">
            <summary>
            SQL events.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteQuery">
            <summary>
            Fires when query is executed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteNonQuery">
            <summary>
            Fires when non-query is executed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteScalar">
            <summary>
            Fires when scalar query is executed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.ExecuteReader">
            <summary>
            Fires when reader is executed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SqlEvents.BulkInsert">
            <summary>
            Fires when bulk insert is executed.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnsTranslationEventArgs">
            <summary>
            Columns translation event arguments
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnsTranslationEventArgs.TranslationHelper">
            <summary>
            Translation helper which keeps translations of objects ID columns. Use this object to register translations or translate column value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnsTranslationEventArgs.ObjectType">
            <summary>
            Object type which data is stored in the container.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ColumnsTranslationEventArgs.Data">
            <summary>
            Data container with object data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnsTranslationEvents">
            <summary>
            Columns translation events handlers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ColumnsTranslationEvents.RegisterRecords">
            <summary>
            Fires when an objects data is registered for translation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ColumnsTranslationEvents.TranslateColumns">
            <summary>
            Fires when an object ID columns are translated.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ColumnsTranslationHandler">
            <summary>
            Columns translation event handler.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ColumnsTranslationHandler.StartEvent(CMS.DataEngine.TranslationHelper,System.String,CMS.Base.IDataContainer)">
            <summary>
            Initiates the data registration event handling.
            </summary>
            <param name="th">Translation helper</param>
            <param name="objectType">Object type</param>
            <param name="data">Data container</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectDependenciesRemoverConditionHelper">
            <summary>
            Helps to create WHERE conditions.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectDependenciesRemoverConditionHelper.GetMultipleSubTrees(CMS.DataEngine.BaseInfo,CMS.DataEngine.IWhereCondition,System.String)">
            <summary>
            <para>
            Creates where condition for all the children of objects targeted by <paramref name="rootsSelector"/>. 
            The <paramref name="pathColumnName"/> parameter denotes tree structure column.
            The root objects selected by <paramref name="rootsSelector"/> are not returned.
            </para>
            <para>
            Creates where condition with semantics as WHERE column IN LIKE (@var + '/%', @var1 + '/%', ...).
            Enables to filter all children of <paramref name="info"/>s within <paramref name="rootsSelector"/> condition by <paramref name="pathColumnName"/>.
            </para>
            </summary>
            <remarks>
            Method allows to rewrite WHERE conditions looking like this: WHERE Path LIKE @SubPath1 + '/%' OR Path LIKE @SubPath2 + '/%' OR ... Path LIKE @SubPath2100;
            by using INNER JOIN. SubPath parameters are created by SELECT <paramref name="pathColumnName"/> FROM <paramref name="info"/> WHERE <paramref name="rootsSelector"/>.
            Path is equal to <paramref name="pathColumnName"/>.
            </remarks>
            <param name="info">Readonly info object.</param>
            <param name="rootsSelector">Selects only chosen <paramref name="info"/> objects.</param>
            <param name="pathColumnName">Values from which column of an <paramref name="info"/> are needed.</param>
            <example>
            Generated condition looks almost like this:
            
            WHERE <paramref name="pathColumnName"/> IN (
                (SELECT <paramref name="pathColumnName"/> FROM <paramref name="info"/> WHERE <paramref name="rootsSelector"/>) AS [A]
                INNER JOIN
                (SELECT <paramref name="pathColumnName"/> FROM <paramref name="info"/> WHERE <paramref name="rootsSelector"/>) AS [B]
                ON [A].<paramref name="pathColumnName"/> LIKE [B].<paramref name="pathColumnName"/> + '/%'.
                
            A
            - B
            -- C
            
            D
            - E
            -- F
            
            If the <paramref name="rootsSelector"/> selects A and E then B, C, F is returned.
            </example>
        </member>
        <member name="T:CMS.DataEngine.IMacroSecurityCheckPermissions">
            <summary>
            Marks a class for which permissions are to be checked during macro resolution.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IMacroSecurityCheckPermissions.GetObjectToCheck">
            <summary>
            Gets an object for which to perform the permissions check. This can be the class' instance itself or an object it encapsulates.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.EnumerableWrapper`1">
            <summary>
            Wrapper to make the given objects purely enumerable allowing to use default LINQ query provider instead of <see cref="T:CMS.DataEngine.ICMSQueryable`1"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.EnumerableWrapper`1.Source">
            <summary>
            Source data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.EnumerableWrapper`1.#ctor(CMS.DataEngine.ICMSQueryable{`0})">
            <summary>
            Constructor
            </summary>
            <param name="source">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.EnumerableWrapper`1.System#Collections#Generic#IEnumerable{TObject}#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.EnumerableWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ICMSQueryable`1">
            <summary>
            Interface for queryable CMS objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ICMSQueryable`1.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="T:CMS.DataEngine.ICMSQueryable">
            <summary>
            Interface for queryable CMS objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ICMSQueryable.Count">
            <summary>
            Number of total items in the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ICMSQueryable.IsOffline">
            <summary>
            Returns true if the given collection is offline (disconnected from the database)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ICMSQueryable.OrderByColumns">
            <summary>
            Columns list of SQL order by expression.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DatabaseFieldAttribute">
            <summary>
            Specifies to which database column the property maps
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseFieldAttribute.ColumnName">
            <summary>
            Database column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseFieldAttribute.ValueType">
            <summary>
            Type representing the stored value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseFieldAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseFieldAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="colName">Database column name</param>
        </member>
        <member name="T:CMS.DataEngine.DatabaseIDFieldAttribute">
            <summary>
            Specifies to which database column the property maps.
            Marks this column as an ID column.
            </summary>
            <remarks>
            Information about ID column is used in unit tests to properly fake given type.
            Use this attribute to mark an ID column of object with dynamic typeinfo. 
            Objects with fixed typeinfo has this information placed in code and therefore fakes can be initialized without using this attribute. 
            Using this attribute on object with fixed typeinfo overrides ID column information in typeinfo.
            </remarks>
        </member>
        <member name="T:CMS.DataEngine.DatabaseMappingAttribute">
            <summary>
            Specifies to which database column the property maps. For simple database mappings use <see cref="T:CMS.DataEngine.DatabaseFieldAttribute"/> instead.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseMappingAttribute.Expression">
            <summary>
            Database column name or expression returning boolean value for bool properties.
            E.g. "NodeID" for int property or "Enabled = 1" for bool property.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DatabaseMappingAttribute.ExecuteInDB">
            <summary>
            If true, the member is executed on DB level, if false, then programmatically
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DatabaseMappingAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="executeInDb">If true, the member is executed on DB level, if false, then programmatically</param>
        </member>
        <member name="M:CMS.DataEngine.DatabaseMappingAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">
            Expression defining the mapping of the attribute to database.
            Database column name or expression returning boolean value for bool properties. E.g.
            "NodeID" for int property or "Enabled = 1" for bool property.
            </param>
        </member>
        <member name="T:CMS.DataEngine.IStringMetadata">
            <summary>
            Defines SQL query format used in <see cref="T:CMS.DataEngine.CMSQueryProvider`1"/> for selected string methods.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IStringMetadata.StartsWith(System.String)">
            <summary>
            Returns true if the given string 
            </summary>
            <param name="prefix">Prefix to check</param>
        </member>
        <member name="M:CMS.DataEngine.IStringMetadata.EndsWith(System.String)">
            <summary>
            Returns true if the given string ends with the given suffix
            </summary>
            <param name="suffix">Suffix to check</param>
        </member>
        <member name="M:CMS.DataEngine.IStringMetadata.Contains(System.String)">
            <summary>
            Returns true if the given string contains the given substring
            </summary>
            <param name="substring">Substring to check</param>
        </member>
        <member name="T:CMS.DataEngine.SqlRepresentationAttribute">
            <summary>
            Defines the SQL representation of the given method call
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SqlRepresentationAttribute.Format">
            <summary>
            Defines format of the SQL representing this method call. Individual parameters are represented via standard format string with {0}, {1} etc.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SqlRepresentationAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="format">Defines format of the SQL representing this method call. Individual parameters are represented via standard format string with {0}, {1} etc.</param>
        </member>
        <member name="T:CMS.DataEngine.AbstractCMSQueryProvider`1">
            <summary>
            Abstract LINQ query provider for CMS objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessExpression(System.Linq.Expressions.Expression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the given expression.
            </summary>
            <param name="exp">Expression to process</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsUnary(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsComputeBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsLogicalBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.IsComparisonBinaryOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns true if the given type is an unary expression
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessBinding(System.Linq.Expressions.MemberBinding,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member binding.
            </summary>
            <param name="binding">Binding to process</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessElementInitializer(System.Linq.Expressions.ElementInit,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the element initializer.
            </summary>
            <param name="initializer">Initializer to process</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessUnary(System.Linq.Expressions.UnaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the unary expression.
            </summary>
            <param name="u">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessBinary(System.Linq.Expressions.BinaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the binary expression.
            </summary>
            <param name="b">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessTypeIs(System.Linq.Expressions.TypeBinaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the type IDs.
            </summary>
            <param name="b">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessConstant(System.Linq.Expressions.ConstantExpression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Constant expression.
            </summary>
            <param name="c">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessConditional(System.Linq.Expressions.ConditionalExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the conditional expression.
            </summary>
            <param name="c">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessParameter(System.Linq.Expressions.ParameterExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the parameter.
            </summary>
            <param name="p">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberAccess(System.Linq.Expressions.MemberExpression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member access.
            </summary>
            <param name="m">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMethodCall(System.Linq.Expressions.MethodCallExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the method call.
            </summary>
            <param name="m">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression},CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the list of expressions.
            </summary>
            <param name="original">List</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberAssignment(System.Linq.Expressions.MemberAssignment,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member assignment.
            </summary>
            <param name="assignment">Assignment</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member member binding.
            </summary>
            <param name="binding">Binding</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberListBinding(System.Linq.Expressions.MemberListBinding,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member list binding.
            </summary>
            <param name="binding">Binding</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding},CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the binding list.
            </summary>
            <param name="original">List</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit},CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Process list of element initializers.
            </summary>
            <param name="original">List</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessLambda(System.Linq.Expressions.LambdaExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the lambda expression.
            </summary>
            <param name="lambda">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessNew(System.Linq.Expressions.NewExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the new expression.
            </summary>
            <param name="nex">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessMemberInit(System.Linq.Expressions.MemberInitExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes initialization of the member.
            </summary>
            <param name="init">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessListInit(System.Linq.Expressions.ListInitExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the initialization of the list.
            </summary>
            <param name="init">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessNewArray(System.Linq.Expressions.NewArrayExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the array.
            </summary>
            <param name="na">Array</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractCMSQueryProvider`1.ProcessInvocation(System.Linq.Expressions.InvocationExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Process the invocation of the method.
            </summary>
            <param name="iv">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="T:CMS.DataEngine.CMSQueryProvider`1">
            <summary>
            LINQ query provider for CMS objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSQueryProvider`1.Source">
            <summary>
            Data source object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.CMSQueryProvider`1.RequireLinqFallback">
            <summary>
            Indicates if fallback to LINQ to object is required
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.#ctor(CMS.DataEngine.ICMSQueryable{`0})">
            <summary>
            Constructor
            </summary>
            <param name="source">Source of the data</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query from given expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query from given expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query.
            </summary>
            <param name="expression">Query expression</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query.
            </summary>
            <param name="expression">Query expression</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.CreateQueryInternal``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates the query from given expression.
            </summary>
            <param name="expression">Expression to parse</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.LinqToObjectsFallback``1(System.Linq.Expressions.Expression,CMS.DataEngine.ICMSQueryable{`0},System.Linq.IQueryable{``0}@,CMS.DataEngine.ICMSQueryable{`0})">
            <summary>
            Fallback to LINQ to objects
            </summary>
            <param name="expression">Expression to execute</param>
            <param name="source">Source data</param>
            <param name="result">Returning the result</param>
            <param name="newSource">New source data to be injected instead of original source</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ExecuteInternal(System.Linq.Expressions.Expression)">
            <summary>
            Gets the result of the expression
            </summary>
            <param name="expression">Expression to execute</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.LoadExpression(System.Linq.Expressions.Expression)">
            <summary>
            Loads the given expression.
            </summary>
            <param name="ex">Expression to load</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessUnary(System.Linq.Expressions.UnaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the unary expression.
            </summary>
            <param name="u">Expression</param>
            <param name="sb">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessBinary(System.Linq.Expressions.BinaryExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the binary expression.
            </summary>
            <param name="b">Expression</param>
            <param name="s">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessConstant(System.Linq.Expressions.ConstantExpression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Constant expression.
            </summary>
            <param name="c">Expression</param>
            <param name="s">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp">Parent expression</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessMemberAccess(System.Linq.Expressions.MemberExpression,CMS.DataEngine.ExpressionBuilderSettings,System.Linq.Expressions.Expression)">
            <summary>
            Processes the member access.
            </summary>
            <param name="m">Expression</param>
            <param name="s">ExpressionBuilderSettings for processing of children</param>
            <param name="parentExp"></param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.ProcessMethodCall(System.Linq.Expressions.MethodCallExpression,CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Processes the method call.
            </summary>
            <param name="m">Expression</param>
            <param name="settings">ExpressionBuilderSettings for processing of children</param>
        </member>
        <member name="M:CMS.DataEngine.CMSQueryProvider`1.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Removes the quotes from the expression.
            </summary>
            <param name="e">Expression</param>
        </member>
        <member name="T:CMS.DataEngine.ExpressionBuilderSettings">
            <summary>
            Object to encapsulate the expression builder settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.Result">
            <summary>
            String builder where to collect results
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.MemberSeparator">
            <summary>
            Separator for member access
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.IsWhereCondition">
            <summary>
            If true, the built expression is a where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ExpressionBuilderSettings.IsColumnList">
            <summary>
            If true, the built expression is a column list
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExpressionBuilderSettings.#ctor(CMS.DataEngine.ExpressionBuilderSettings)">
            <summary>
            Constructor
            </summary>
            <param name="parentSettings">Parent settings</param>
        </member>
        <member name="T:CMS.DataEngine.ExpressionTreeModifier">
            <summary>
            Provides the ability to replace particular constant in the expression tree by a new value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExpressionTreeModifier.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Converts the constant expression to the results
            </summary>
            <param name="c">Constant to visit</param>
        </member>
        <member name="M:CMS.DataEngine.ExpressionTreeModifier.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ExpressionTreeModifier.CopyAndModify(System.Linq.Expressions.Expression)">
            <summary>
            Provides a copy of the expression tree with modifications applied
            </summary>
            <param name="expression">Expression to copy</param>
        </member>
        <member name="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException">
            <summary>
            The exception that is re-thrown when an exception is caught during <seealso cref="M:CMS.DataEngine.CMSQueryProvider`1.LinqToObjectsFallback``1(System.Linq.Expressions.Expression,CMS.DataEngine.ICMSQueryable{`0},System.Linq.IQueryable{``0}@,CMS.DataEngine.ICMSQueryable{`0})"/>.
            The original exception is then set in the <see cref="P:System.Exception.InnerException"/> member and the failed expression is set in the <see cref="P:CMS.DataEngine.LinqExpressionCannotBeExecutedException.FailedExpression"/> member.
            </summary>
            <seealso cref="T:System.Exception" />
            <seealso cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)"/>
        </member>
        <member name="P:CMS.DataEngine.LinqExpressionCannotBeExecutedException.FailedExpression">
            <summary>
            Gets the expression that failed to execute.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException" /> class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException" /> class.
            </summary>
            <param name="failedExpression">The expression that failed to execute.</param>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.String,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="failedExpression">The expression that failed to execute.</param>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.String,System.Exception,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="failedExpression">The expression that failed to execute.</param>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:CMS.DataEngine.LinqExpressionCannotBeExecutedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.LinqExpressionCannotBeExecutedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <param name="failedExpression">The expression that failed to execute.</param>
        </member>
        <member name="T:CMS.DataEngine.Module">
            <summary>
            Represents the standard module.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.Module.mCommandsRegistered">
            <summary>
            If true commands were already registered
            </summary>
        </member>
        <member name="F:CMS.DataEngine.Module.mCommands">
            <summary>
            Dictionary of the commands [objectType -> CommandFunc]
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Module.#ctor(CMS.Core.ModuleMetadata,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="metadata">Module metadata</param>
            <param name="isInstallable">Indicates if module is designed as installable.</param>
        </member>
        <member name="M:CMS.DataEngine.Module.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="moduleName">Module name</param>
            <param name="isInstallable">Indicates if module is designed as installable.</param>
        </member>
        <member name="M:CMS.DataEngine.Module.Clear(System.Boolean)">
            <summary>
            Clears resources allocated by module.
            </summary>
            <remarks>
            All provider hashtables are cleared in <see cref="M:CMS.DataEngine.ModuleManager.ClearHashtables(System.Boolean)"/> method call.
            Clear just provider non-related stuff in overridden methods.
            </remarks>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.Module.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hash tables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.Module.GetObject(System.String)">
            <summary>
            Gets the object created from the given DataRow.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.Module.ProcessCommand(System.String,System.Object[])">
            <summary>
            Processes the specified command.
            </summary>
            <param name="commandName">Command name</param>
            <param name="parameters">Command parameters</param>
        </member>
        <member name="M:CMS.DataEngine.Module.EnsureCommands">
            <summary>
            Ensures the object types to be registered
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Module.RegisterCommands">
            <summary>
            Registers the object type of this module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Module.RegisterCommand(System.String,System.Func{System.Object[],System.Object})">
            <summary>
            Registers the given command
            </summary>
            <param name="name">Command name</param>
            <param name="func">Command function</param>
        </member>
        <member name="M:CMS.DataEngine.Module.RegisterContext``1(System.String)">
            <summary>
            Registers the module context
            </summary>
            <param name="name">Context name</param>
        </member>
        <member name="T:CMS.DataEngine.ModuleCommands">
            <summary>
            Module commands.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.GetDefaultReportConnectionString">
            <summary>
            Item's default connection string 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.ReportingRefreshCategoryDataCount(CMS.DataEngine.BaseInfo)">
            <summary>
            Refresh children count for single category.
            </summary>
            <param name="infoObj">Category to update</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends the e-mail.
            </summary>
            <param name="emailAddress">E-mail address(es) of recipient(s). Use semicolon as a separator.</param>
            <param name="fromEmailAddress">E-mail address from which is the email sent</param>
            <param name="emailSubject">E-mail subject</param>
            <param name="emailBody">E-mail body</param>
            <param name="emailPlainTextBody">E-mail plain text body (optional)</param>
            <param name="siteName">Name of the site (optional)</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryGetMediaLibraryInfo(System.Int32)">
            <summary>
            Gets media library info object.
            </summary>
            <param name="libraryId">Media library ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryGetMediaFileUrl(System.String,System.String)">
            <summary>
            Returns media url according to site settings.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryGetMediaFileUrl(System.Guid,System.String)">
            <summary>
            Returns media url according to GUID and file name.
            </summary>
            <param name="fileGuid">File GUID</param>
            <param name="fileName">File name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryDeleteMediaFile(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deletes media file from file system.
            </summary>
            <param name="siteID">Site id</param>
            <param name="libraryID">Library id</param>
            <param name="filePath">Sub path to file</param>
            <param name="onlyFile">Indicates if only file should be deleted</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.MediaLibraryDeleteMediaFilePreview(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes media file preview from file system.
            </summary>
            <param name="siteName">Site name</param>
            <param name="libraryID">Library ID</param>
            <param name="filePath">File path</param>
            <param name="synchronization">Indicates if method is running by web farms synchronization</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetCurrentContactID">
            <summary>
            Returns current contact ID.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetExistingContact">
            <summary>
            Returns current contact if such exists.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingCreateNewContact(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates new contact and assigns given member.
            </summary>
            <param name="firstName">Contact first name</param>
            <param name="lastName">Contact last name</param>
            <param name="email">E-mail address</param>
            <param name="relatedId">Related ID</param>
            <param name="type">Type of member (user, subscriber, customer)</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingGetUserLoginContactID(System.Object)">
            <summary>
            Returns contact ID for specified user info.
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingRemoveCustomer(System.Int32)">
            <summary>
            Removes customer references from all contact management objects.
            </summary>
            <param name="customerID">Customer being deleted</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingCreateRelation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns current contact ID.
            </summary>
            <param name="relatedId">RelatedID (subscriber ID, customer ID)</param>
            <param name="memberType">Member type converted to int</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.OnlineMarketingContactIsMonitored(System.Int32)">
            <summary>
            Returns TRUE if contact is monitored.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleCommands.SynchronizationProcessTask(CMS.DataEngine.OperationTypeEnum,CMS.DataEngine.TaskTypeEnum,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Processes the given task.
            </summary>
            <param name="operationType">Operation type</param>
            <param name="taskType">Type of the task</param>
            <param name="taskObjectType">Task object type</param>
            <param name="taskData">Document data for the synchronization task</param>
            <param name="taskBinaryData">Binary data for the synchronization task</param>
            <param name="processChilds">Process child objects</param>
            <param name="siteName">Site name</param>
            <param name="userName">User name</param>
            <param name="taskGroups">Staging task groups to which task is associated</param>
        </member>
        <member name="T:CMS.DataEngine.ModuleManager">
            <summary>
            Manages the list of modules within application
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.RemoveReadOnlyObject(System.String,System.Boolean)">
            <summary>
            Removes object structures.
            </summary>
            <param name="objectType">Object type</param>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.ClearReadOnlyObjects(System.Boolean)">
            <summary>
            Clears object structures.
            </summary>
            <param name="logTask">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetReadOnlyObjectByClassName(System.String)">
            <summary>
            Gets the cached object representation of the given class name.
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetReadOnlyObject(System.String)">
            <summary>
            Gets the cached object instance of given type.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetReadOnlyObject(System.String,System.Boolean)">
            <summary>
            Gets the cached object instance of given type.
            </summary>
            <param name="objectType">Object type</param>
            <param name="exceptionIfNotFound">If true, an exception is fired if the given object type is not found</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.EnsureTypeInfo(CMS.DataEngine.BaseInfo)">
            <summary>
            Materializes type info to avoid lazy loading of it's properties after the object is published.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObject(System.String,System.Boolean)">
            <summary>
            Gets a new object of the given type.
            </summary>
            <param name="objectType">Object type</param>
            <param name="throwIfNotFound">If true, the method throws an exception in case the object type was not found</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObject(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Gets a new object of the given type created from the given DataRow.
            </summary>
            <param name="objectRow">Object DataRow</param>
            <param name="objectType">Object type</param>
            <param name="throwIfNotFound">If true, the method throws an exception in case the object type was not found</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObject(CMS.Base.IDataContainer,System.String,System.Boolean)">
            <summary>
            Gets a new object of the given type created from <paramref name="dataContainer"/>.
            </summary>
            <param name="dataContainer">Data container to create the object from.</param>
            <param name="objectType">Object type</param>
            <param name="throwIfNotFound">If true, the method throws an exception in case the object type was not found</param>
            <returns>Returns <see cref="T:CMS.DataEngine.BaseInfo"/> of proper <paramref name="objectType"/> based on <paramref name="dataContainer"/>.</returns>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetObject(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Gets a new object of the given type created using the given settings.
            </summary>
            <param name="settings">Object settings</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetModule(System.String)">
            <summary>
            Gets the module entry for specified module.
            </summary>
            <param name="name">Module name</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.ClearHashtables(System.Boolean)">
            <summary>
            Clears all the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.ModuleManager.GetContextProperty(System.String,System.String)">
            <summary>
            Gets the value of context property.
            </summary>
            <param name="name">Context name</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="T:CMS.DataEngine.ConnectionContext">
            <summary>
            Connection context.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.CurrentScopeConnection">
            <summary>
            Current DB connection to use within current connection scope.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ConnectionContext.CurrentConnectionScope">
            <summary>
            Request connection scope.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ConnectionContext.EnsureThreadScope(System.String)">
            <summary>
            Ensures the <see cref="T:CMS.DataEngine.CMSConnectionScope"/> for current thread.
            </summary>
            <param name="connectionString">Connection string</param>
            <returns><c>true</c> if <see cref="T:CMS.DataEngine.CMSConnectionScope"/> was created for current thread; otherwise <c>false</c></returns>
            <remarks>Thread scope should be created only once per thread lifetime.</remarks>
        </member>
        <member name="M:CMS.DataEngine.ConnectionContext.DisposeThreadScope">
            <summary>
            Disposes the <see cref="T:CMS.DataEngine.CMSConnectionScope"/> for current thread.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineHandlers">
            <summary>
            Handlers within Data engine module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.Init">
            <summary>
            Initializes the handlers
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.UpdateSearchSettings(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Removes obsolete search settings from predefined object types.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.InitRequestContext(System.Object,System.EventArgs)">
            <summary>
            Initializes the request context to use proper database based on current domain name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.DisposeRequestScope(System.Object,System.EventArgs)">
            <summary>
            Disposes the request connection scope
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.DisposeThreadRequestScope(System.Object,CMS.Base.ThreadEventArgs)">
            <summary>
            Fires when thread cleanups its context
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.EnsureThreadRequestScope(System.Object,CMS.Base.ThreadEventArgs)">
            <summary>
            Fires before the thread runs
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.EnsureConnectionString(System.Object,CMS.Base.ThreadEventArgs)">
            <summary>
            Fires when the new thread starts
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.ClearCacheFor(System.Collections.Generic.IEnumerable{System.String},CMS.DataEngine.SettingsKeyChangedEventArgs,System.Action)">
            <summary>
            Based on presence of <see cref="P:CMS.DataEngine.SettingsKeyChangedEventArgs.KeyName"/> from <paramref name="eventArgs"/> in
            <paramref name="settingsKeys"/> executes <paramref name="clearingAction"/>.
            </summary>
            <param name="settingsKeys">Sequence of settings keys names</param>
            <param name="eventArgs">Settings key arguments of current handler</param>
            <param name="clearingAction">Action to be executed on <paramref name="settingsKeys"/> hit</param>
        </member>
        <member name="M:CMS.DataEngine.DataEngineHandlers.HandleCache(System.Object,CMS.DataEngine.SettingsKeyChangedEventArgs)">
            <summary>
            Settings key changed handler
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataEngineModule">
            <summary>
            Represents the Data Engine module.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.OnPreInit">
            <summary>
            Pre-initializes the module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.InitServices">
            <summary>
            Initializes the data engine services
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.DataEngine.DataEngineModuleMetadata">
            <summary>
            Represents the Data Engine module metadata.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataEngineModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.DataEngine.PredefinedObjectType">
            <summary>
            Predefined object type constants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUP_DOCUMENTS">
            <summary>
            Document object type - Special constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUP_OBJECTS">
            <summary>
            All objects object type - Group constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.COMMUNITY_CURRENT_GROUP">
            <summary>
            Current group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PAGETEMPLATE">
            <summary>
            Code name for page templates.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WEBPARTCATEGORY">
            <summary>
            Code name for webpart categories.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DASHBOARD">
            <summary>
            Code name for dashboard.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.TRANSFORMATION">
            <summary>
            Code name for transformations.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SITE">
            <summary>
            Code name for sites.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CULTURESITE">
            <summary>
            Code name for site culture binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.USER">
            <summary>
            Code name for users.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.USERSETTINGS">
            <summary>
            Code name for user settings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PERMISSION">
            <summary>
            Code name for permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CLASSPERMISSION">
            <summary>
            Code name for class (document type) permissions.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CATEGORY">
            <summary>
            Code name for document global category.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.USERCULTURE">
            <summary>
            User culture binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.RESOURCE">
            <summary>
            Code name for resources.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ROLE">
            <summary>
            Code name for roles.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CUSTOM_TABLE_ITEM_PREFIX">
            <summary>
            Custom table item prefix for object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BIZFORM_ITEM_PREFIX">
            <summary>
            BizFrom item prefix for object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTTYPE">
            <summary>
            Object type for document type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ALLOWEDCHILDCLASS">
            <summary>
            Allowed child class bindings.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENT">
            <summary>
            Document.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENT_ITEM_PREFIX">
            <summary>
            Document item prefix for object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTCATEGORY">
            <summary>
            Document-category relationship.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NODE">
            <summary>
            Node.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.DOCUMENTLOCALIZATION">
            <summary>
            Node culture specific data.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.MEDIALIBRARY">
            <summary>
            Code name for media library.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.MEDIAFILE">
            <summary>
            Code name for media file.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.FORMCLASS">
            <summary>
            Object type for form class
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BIZFORMROLE">
            <summary>
            BizForm role binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ALTERNATIVEFORM">
            <summary>
            Alternative form constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.GROUP">
            <summary>
            Code name for general group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTER">
            <sumary>
            Code name for newsletter.
            </sumary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERISSUE">
            <summary>
            Code name for newsletter issues.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERISSUEVARIANT">
            <summary>
            Code name for newsletter A/B variants.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERSUBSCRIBER">
            <summary>
            Code name for newsletter subscribers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERTEMPLATE">
            <summary>
            Code name for newsletter email templates.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERWIDGET">
            <summary>
            Code name for newsletter email widgets.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERUNSUBSCRIPTION">
            <summary>
            Code name for newsletter unsubscription.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.NEWSLETTERCONTACTGROUP">
            <summary>
            Code name for newsletters contact group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.EMAILQUEUEITEM">
            <summary>
            Code name for item in newsletter email queue.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SUBSCRIBERTONEWSLETTER">
            <summary>
            Code name for subscriber newsletter info.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.REPORTCATEGORY">
            <summary>
            Code name for report categories.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.REPORT">
            <summary>
            Code name for reports.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.REPORTSUBSCRIPTION">
            <summary>
            Code name for report subscription
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SKU">
            <summary>
            Code name for SKUs.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.OPTIONCATEGORY">
            <summary>
            Code name for sku option categories.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CUSTOMER">
            <summary>
            Code name for customers.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ORDER">
            <summary>
            Code name for orders.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SHOPPING_CART">
            <summary>
            Code name for shopping cart.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WORKFLOWSTEPROLE">
            <summary>
            Workflow step role binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WORKFLOWSTEPUSER">
            <summary>
            Workflow step user binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.WORKFLOWUSER">
            <summary>
            Workflow user binding.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.VERSIONHISTORY">
            <summary>
            Code name for version history.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.AUTOMATIONSTATE">
            <summary>
            Code name for marketing automation process.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.AUTOMATIONWORKFLOWTRIGGER">
            <summary>
            Code name for marketing automation workflow trigger.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACT">
            <summary>
            Code name for the contact.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACTGROUP">
            <summary>
            Code name for the contact group.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACTGROUPMEMBERCONTACT">
            <summary>
            Code name for the contact group member.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.SCORE">
            <summary>
            Code name for the score.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ABTEST">
            <summary>
            Code name for tests.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ABVARIANTDATA">
            <summary>
            Code name for tests' variants (MVC).
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ACTIVITY">
            <summary>
            Code name for Activity.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.ACTIVITYRECALCULATIONQUEUEINFO">
            <summary>
            Code name for Activity recalculation queue.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONTACTCHANGERECALCULATIONQUEUEINFO">
            <summary>
            Code name for Contact changes recalculation queue.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.BIZFORM">
            <summary>
            Code name for BizForms.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.OBJECTSCHEDULEDTASK">
            <summary>
            Object's scheduled task.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.RELATIONSHIPNAME">
            <summary>
            Relationship name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PERSONA">
            <summary>
            Code name for persona.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.PERSONA_RULE">
            <summary>
            Code name for persona scoring rule.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CUSTOMTABLECLASS">
            <summary>
            Object type for custom table class
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.CONSENTAGREEMENT">
            <summary>
            Object type for consent agreement.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.PredefinedObjectType.EMAILTEMPLATE">
            <summary>
            Object type for email template.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.AbstractQueryObject">
            <summary>
            Base for any object participating in the Data query evaluation
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AbstractQueryObject.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="parameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
        </member>
        <member name="P:CMS.DataEngine.AbstractQueryObject.Parameters">
            <summary>
            Query parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this query parameters to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.CloneObject">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.Changed">
            <summary>
            Marks the object as changed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AbstractQueryObject.Reset">
            <summary>
            Flushes the results but leaves the generated query text unchanged.
            After the reset, query can be executed again to obtain new data.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryObject">
            <summary>
            Base interface for all query objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryObject.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryObject.Parameters">
            <summary>
            Query data parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObject.CloneObject">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObject.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="parameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryObject.Changed">
            <summary>
            Marks the object as changed
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryObjectWithValue">
            <summary>
            Base interface for all query objects with value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObjectWithValue.GetExpression">
            <summary>
            Gets a string expression representing this object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryObjectWithValue.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryParameters`1">
            <summary>
            Query parameters interface.
            </summary>
            <typeparam name="TParent">Type of Query instance.</typeparam>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters`1.GetTypedQuery">
            <summary>
            Returns specifically typed instance of current Query object to allow user to compose Query in fluent syntax.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryParameters">
            <summary>
            Query parameters interface.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this where condition to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies the properties to the target query.
            </summary>
            <param name="target">Target object defining properties</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.Expand(System.String)">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.IQueryParameters.EnsureParameters">
            <summary>
            Ensures data parameters for the given query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnListBase">
            <summary>
            Provides basic query column list functionality
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.Item(System.Int32)">
            <summary>
            Returns column on specific index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.Parent">
            <summary>
            Parent query for the column list
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.ContainsAllColumnsSelector">
            <summary>
            Indicates whether list contains all columns selector
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.NoColumns">
            <summary>
            Indicates whether list represents an empty list with no columns, 
            no matter already existing columns or columns added after
            </summary>
            <remarks>
            If <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/> is explicitly added into an empty list, then this property is true
            and query does not return any columns only string representation of <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/>.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.Columns">
            <summary>
            <para>There are three possible outputs.</para>
            <para>Firstly <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/>, there will be no column in query.</para>
            <para>Secondly list of columns represented as string, without occurrence of <see cref="F:CMS.DataEngine.SqlHelper.NO_COLUMNS"/>.</para>
            <para>Finally <see cref="F:System.String.Empty"/>, that resolves to * in query.</para>
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.AnyColumnsDefined">
            <summary>
            Returns true if any columns are defined within this column list
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.Count">
            <summary>
            Returns the number of defined columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.ReturnsAllColumns">
            <summary>
            Returns true if the columns contain all columns specification or columns do not contain definition of any columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.IsSingleColumn">
            <summary>
            Returns true if the columns represent a single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnListBase.PresentColumns">
            <summary>
            Gets the hash set of present columns for duplicity detection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.#ctor(CMS.DataEngine.IQueryObject)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.Remove(CMS.DataEngine.IQueryColumn)">
            <summary>
            Removes one explicitly defined column by <see cref="P:CMS.DataEngine.SelectQueryColumnBase`1.Name"/> from the columns collection
            </summary>
            <remarks>
            See method <see cref="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)"/> and <seealso cref="T:CMS.DataEngine.QueryColumn"/> constructor for the difference how 
            <see cref="P:CMS.DataEngine.SelectQueryColumnBase`1.Name"/> property can differ.
            </remarks>
            <param name="col">Column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.RemoveAll(CMS.DataEngine.IQueryColumn)">
            <summary>
            Removes explicitly defined columns by <see cref="P:CMS.DataEngine.SelectQueryColumnBase`1.Name"/> from the columns collection
            </summary>
            <remarks>
            See method <see cref="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)"/> and <seealso cref="T:CMS.DataEngine.QueryColumn"/> constructor for the difference how 
            <see cref="P:CMS.DataEngine.SelectQueryColumnBase`1.Name"/> property can differ.
            </remarks>
            <param name="col">Column to remove</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.ReplaceColumn(System.String,CMS.DataEngine.IQueryColumn)">
            <summary>
            Replaces the column with a given name with the new column definition
            </summary>
            <param name="originalName">Column name</param>
            <param name="newColumn">New column</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.AddInternal(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the given column to the column list
            </summary>
            <param name="col">Column to be added</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.AddUniqueInternal(CMS.DataEngine.IQueryColumn,System.Boolean)">
            <summary>
            Adds the given column to the column list, only if not already present
            </summary>
            <param name="col">Column to be added</param>
            <param name="ignoreAllColumnsSelector">Indicates whether column will be added if all columns selector is present in the list</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.EnsureAllColumns">
            <summary>
            Ensures all columns flag if the list is empty
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.GetColumns(CMS.DataEngine.QueryDataParameters,System.Boolean)">
            <summary>
            Gets list of columns represented as string
            </summary>
            <param name="parameters">Query parameters. If provided, the column parameters are included into the parameters and column expression is altered accordingly</param>
            <param name="expand">If true, the result expression is expanded with parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.GetPresentColumns">
            <summary>
            Gets the hash set of present columns for duplicity detection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.Clear">
            <summary>
            Clears the list of columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.Changed">
            <summary>
            Marks the list as changed and flushes all necessary caches
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.Equals(System.Object)">
            <summary>
            Returns true if the object equals to another
            </summary>
            <param name="obj">Object to compare to</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.GetHashCode">
            <summary>
            Gets the object hash code
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.ToString">
            <summary>
            Gets a string representation of the column list
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.op_Equality(CMS.DataEngine.QueryColumnListBase,CMS.DataEngine.QueryColumnListBase)">
            <summary>
            Compares two column lists
            </summary>
            <param name="cols1">First column list</param>
            <param name="cols2">Second columns list</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.op_Inequality(CMS.DataEngine.QueryColumnListBase,CMS.DataEngine.QueryColumnListBase)">
            <summary>
            Compares two column lists
            </summary>
            <param name="cols1">First column list</param>
            <param name="cols2">Second columns list</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.Clone(CMS.DataEngine.IQueryObject)">
            <summary>
            Clones the column list
            </summary>
            <param name="newParent">New parent for the cloned object</param>>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.GetEnumerator">
            <summary>
            Gets the enumerator for the columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnListBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryParametersBase`1">
            <summary>
            Generic variant of the abstract query object, provides fluent syntax
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryParametersBase`1.mParameters">
            <summary>
            Query data parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParametersBase`1.IsImmutable">
            <summary>
            If true, this object instance is immutable, and next subsequent modification starts with a clone of the object.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParametersBase`1.TypedThis">
            <summary>
            Returns specifically typed current instance
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParametersBase`1.Parameters">
            <summary>
            Query data parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this where condition to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies all the object properties to the given target class
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.CloneObject">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Clone">
            <summary>
            Creates the clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.EnsureParameters">
            <summary>
            Ensures data parameters for the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="addParameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Immutable">
            <summary>
            Makes this object instance immutable, and next subsequent modification starts with a clone of the object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Snapshot">
            <summary>
            Creates an immutable snapshot of the current query as a base for further evaluation. Doesn't modify the original query in any way.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.GetTypedQuery">
            <summary>
            Returns specifically typed instance of current Query object to allow user to compose Query in fluent syntax. If current Query is immutable then its clone is returned.
            </summary>
            <remarks>Use this method in case of creating custom parameterization method for <see cref="T:CMS.DataEngine.DataQuery" /> and its derivatives to obtain specifically typed instance of the Query and to reflect its immutability. 
            Invoke this method before any manipulation is done on the Query object.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Expand(System.String)">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.Expand(System.String,System.Func{CMS.DataEngine.DataParameter,System.String})">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
            <param name="getValue">Custom function for getting the value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.ToString">
            <summary>
            Returns the string representation of the expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParametersBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="T:CMS.DataEngine.AggregatedColumn">
            <summary>
            Aggregated query column e.g. "AVG(XYZ) AS Average"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AggregatedColumn.AggregationType">
            <summary>
            Aggregation type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AggregatedColumn.Over">
            <summary>
            Over clause for the aggregation. 
            When null, over clause is not generated at all, otherwise it is generated even when value is an empty string, in such case " OVER ()" is generated
            </summary>
        </member>
        <member name="P:CMS.DataEngine.AggregatedColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.#ctor(CMS.DataEngine.AggregationType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="aggregation">Aggregation type</param>
            <param name="expression">Column name expression</param>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.GetValueExpression">
            <summary>
            Gets the column expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.ApplyOver(System.String)">
            <summary>
            Applies the over clause to the given expression
            </summary>
            <param name="expression">Column expression</param>
        </member>
        <member name="M:CMS.DataEngine.AggregatedColumn.ApplyAggregation(System.String)">
            <summary>
            Applies the aggregation to the given expression
            </summary>
            <param name="expression">Column expression</param>
        </member>
        <member name="T:CMS.DataEngine.AggregationType">
            <summary>
            Constants for aggregation types
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.None">
            <summary>
            No aggregation
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Count">
            <summary>
            Number of the items
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Sum">
            <summary>
            Sum of the items
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:CMS.DataEngine.AggregationType.Average">
            <summary>
            Average value
            </summary>
        </member>
        <member name="T:CMS.DataEngine.BracketInvariantStringComparer">
            <summary>
            Performs a case-insensitive, culture invariant comparison of strings with brackets removed by <see cref="M:CMS.DataEngine.SqlHelper.RemoveSquareBrackets(System.String)"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.BracketInvariantStringComparer.Equals(System.String,System.String)">
            <summary>
            Compares two strings to decide if they are same without brackets.
            </summary>
            <param name="x">The first string to compare.</param>
            <param name="y">The second string to compare.</param>
            <returns>True if two strings are equal with removed brackets; otherwise, false.</returns>
        </member>
        <member name="M:CMS.DataEngine.BracketInvariantStringComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the specified string with removed brackets.
            </summary>
            <param name="obj">A string.</param>
            <returns>Hash code calculated from the value of the obj parameter.</returns>
        </member>
        <member name="T:CMS.DataEngine.CountColumn">
            <summary>
            Count column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.CountColumn.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression to count. Leave empty for COUNT(*)</param>
        </member>
        <member name="T:CMS.DataEngine.IQueryColumn">
            <summary>
            General interface for the query columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IQueryColumn.AsAlias">
            <summary>
            Converts the column to a column representing its alias
            </summary>
        </member>
        <member name="T:CMS.DataEngine.NestedSelectQueryColumn">
            <summary>
            Query column defined by the nested query e.g. "(SELECT UserID FROM CMS_User WHERE ...) AS RelatedUserID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.NestedSelectQueryColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NestedSelectQueryColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.NestedSelectQueryColumn.#ctor(CMS.DataEngine.IDataQuery)">
            <summary>
            Constructor
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="T:CMS.DataEngine.OrderByColumn">
            <summary>
            Order by column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.OrderByColumn.Direction">
            <summary>
            Order direction
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.#ctor(System.String,CMS.DataEngine.OrderDirection)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression (column name)</param>
            <param name="direction">Order direction</param>
        </member>
        <member name="P:CMS.DataEngine.OrderByColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.GetExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumn.IsValidColumnName(System.String)">
            <summary>
            Returns true if given expression is valid column name (no SQL query is contained)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.OrderDirection">
            <summary>
            Constants for DataQuery operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OrderDirection.Default">
            <summary>
            Default order direction, keeps the direction the way it is or ascending as default
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OrderDirection.Ascending">
            <summary>
            Ascending (A to Z, 0 to 9)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.OrderDirection.Descending">
            <summary>
            Descending (Z to A, 9 to 0)
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryColumn">
            <summary>
            Simple query column e.g. "DocumentName" / "DocumentName AS Name"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumn.ForceColumnBrackets">
            <summary>
            Gets or sets the value that indicates whether square brackets should be used for non-base column defined by IdentifierRegExp
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <remarks>
            <seealso cref="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)"/> for the difference how the created column looks like
            when you name the columns "A as B" in this constructor or in the given method
            </remarks>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="forceColumnBrackets">Indicates whether for brackets should be used for non-base column defined by IdentifierRegExp</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.GetValueExpression">
            <summary>
            Gets the value expression of the columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)">
            <summary>
            Creates a query column from the given expression
            </summary>
            <param name="expression">Column expression</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumn.IsBasicColumnName(System.String)">
            <summary>
            Returns true if column name match the identifier rules and is not NULL
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnBase`1">
            <summary>
            Query column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.Name">
            <summary>
            Gets the column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.Expression">
            <summary>
            Expression (column name)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.TypedThis">
            <summary>
            Returns specifically typed current instance
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryColumnBase`1.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.AsAlias">
            <summary>
            Returns the new column created from this column alias
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression (column name)</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.WithExpression(System.String)">
            <summary>
            Sets the expression
            </summary>
            <param name="expression">New column expression</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.GetExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnBase`1.op_Explicit(CMS.DataEngine.QueryColumnBase{`0})~System.String">
            <summary>
            Implicit operator for conversion from QueryColumn class to string
            </summary>
            <param name="col">Column object</param>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnList">
            <summary>
            Represents a list of query columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.#ctor(CMS.DataEngine.IQueryObject)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.#ctor(System.String)">
            <summary>
            Creates an empty column list built from the given columns
            </summary>
            <param name="columns">List of columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddRangeUniqueColumnsWithAliases(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn})">
            <summary>
            Adds unique <see cref="T:CMS.DataEngine.IQueryColumn"/>s with aliases, even though all columns selector was present in the list.
            Columns without alias won't be added. 
            </summary>
            <remarks>
            Should be used when * is present in the list and user wants to include SQL expression as a column.
            Column with expression must have an alias or won't be added. If the alias is the same as column name
            contained in *, then DB exception (Ambiguous column name) may occur, e.g. Select *, X AS DocumentName From CMS_Documents Order By DocumentName.
            </remarks>
            <example>
            { A } is not added.
            { A AS B } is added.
            { SUBSTR(A, 0, 5) } is not added.
            { SUBSTR(A, 0, 5) AS X } is added.
            { A + A } is not added.
            { A + A AS X } is added.
            </example>
            <param name="queryColumnsWithAliases">Query columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(System.String)">
            <summary>
            Adds one <see cref="T:CMS.DataEngine.QueryColumn"/> into list, regardless of existing columns.
            <see cref="T:CMS.DataEngine.QueryColumn"/> added to the list is created via <see cref="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)"/>.
            </summary>
            <example>
            <para>"A, B, C" will result in exception</para>
            <para>"A as B", "A" or "5 as B" are accepted</para>
            </example>
            <param name="column">String representation of column</param>
            <exception cref="T:System.ArgumentException">Only one column should be passed as argument</exception>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Add(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds column into list, regardless of existing columns.
            </summary>
            <param name="queryColumn">Query column</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddRange(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn})">
            <summary>
            Adds columns into list, regardless of existing columns.
            </summary>
            <param name="queryColumns">Query columns</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.EnsureOrderByColumns(System.String@)">
            <summary>
            Ensures that the order by columns are provided within the list of columns as aliases, modifies the order by expression to the aliases of those columns.
            </summary>
            <param name="orderBy">Order by expression</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Load(System.String)">
            <summary>
            Loads the given columns to the list.
            </summary>
            <param name="columns">Lists of columns separated by commas</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Load(System.String[])">
            <summary>
            Loads the given list of columns to the list.
            </summary>
            <param name="columns">Array of columns</param>
            <example>
            <code>
            var queryColumnListInstance = new QueryColumnList();
            queryColumnListInstance.Load(new[] {"ColumnA", "ColumnB", "ColumnC"})
            </code>
            </example>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddRangeUnique(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Adds columns that are not present in the list.
            </summary>
            <remarks>
            Query columns to add are created from string columns via <see cref="M:CMS.DataEngine.QueryColumn.FromExpression(System.String)"/>.
            Adds only <see cref="T:CMS.DataEngine.IQueryColumn"/> columns which names are not already present.
            </remarks>
            <param name="columns">Columns to be added</param>
            <param name="ignoreAllColumnsSelector">
            Indicates whether column will be added if all columns selector is present in the list.
            If the list is empty, <see cref="P:CMS.DataEngine.QueryColumnListBase.NoColumns"/> is false and <paramref name="ignoreAllColumnsSelector"/> is true, all columns selector is added.
            </param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddObjectColumns(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn},System.Boolean,System.Boolean)">
            <summary>
            Adds the given list of query columns.
            </summary>
            <param name="columns">Columns to add</param>
            <param name="ignoreAllColumnsSelector">Indicates whether column will be added if all columns selector is present in the list</param>
            <param name="ensureAllColumns">If true, the collection ensures all columns to be present if no columns are defined</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddStringColumns(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            Adds the given list of columns to the list.
            </summary>
            <param name="cols">Columns represented as string enumerable</param>
            <param name="ignoreAllColumnsSelector">Indicates whether column will be added if all columns selector is present in the list</param>
            <param name="ensureAllColumns">If true, the collection ensures all columns to be present if no columns are defined</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.SetNoColumns">
            <summary>
            Sets no columns flag if no columns added yet.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.Load(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn})">
            <summary>
            Loads the given list of columns to the list.
            </summary>
            <param name="columns">Enumeration of columns</param>
            <example>
            <code>
            var queryColumnListInstance = new QueryColumnList();
            var columns = new List&lt;IQueryColumn&gt;() { new QueryColumn("ColumnA"), new QueryColumn("ColumnB") })
            queryColumnListInstance.Load(columns);
            </code>
            </example>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddUnique(CMS.DataEngine.IQueryColumn,System.Boolean)">
            <summary>
            Adds the given column to the column list, if column is not already present.
            </summary>
            <param name="column">Column</param>
            <param name="ignoreAllColumnsSelector">
            Indicates whether column will be added if all columns selector is present in the list
            If the list is empty, <see cref="P:CMS.DataEngine.QueryColumnListBase.NoColumns"/> is false and <paramref name="ignoreAllColumnsSelector"/> is true, all columns selector is added.
            </param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddRangeUnique(System.Collections.Generic.IEnumerable{CMS.DataEngine.IQueryColumn},System.Boolean)">
            <summary>
            Adds the given enumerable of query columns, if not already present in the list.
            </summary>
            <param name="columns">Columns to be added</param>
            <param name="ignoreAllColumnsSelector">
            Indicates whether column will be added if all columns selector is present in the list.
            If the list is empty, <see cref="P:CMS.DataEngine.QueryColumnListBase.NoColumns"/> is false and <paramref name="ignoreAllColumnsSelector"/> is true, all columns selector is added.
            </param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AddRangeUnique(CMS.DataEngine.QueryColumnList,System.Boolean)">
            <summary>
            Adds the given list of query columns, if not already present in the list.
            </summary>
            <param name="columns">Columns to be added</param>
            <param name="ignoreAllColumnsSelector">
            Indicates whether column will be added if all columns selector is present in the list.
            If the list is empty, <see cref="P:CMS.DataEngine.QueryColumnListBase.NoColumns"/> is false and <paramref name="ignoreAllColumnsSelector"/> is true, all columns selector is added.
            </param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnList.AsAliases">
            <summary>
            Returns the column list transformed to the aliases of the columns.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnSqlFunctions">
            <summary>
            Provides extension methods with SQL functions applicable to the <see cref="T:CMS.DataEngine.QueryColumn"/> object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnSqlFunctions.Cast(CMS.DataEngine.QueryColumn,System.String,System.Int32,System.Int32)">
            <summary>
            Applies CAST function to the column.
            </summary>
            <param name="column">Column used for required function.</param>
            <param name="dataType">Data type to which the cast should be done. Use constants defined in <see cref="T:CMS.DataEngine.FieldDataType"/> class.</param>
            <param name="size">Size of the type</param>
            <param name="precision">Precision of the type</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnSqlFunctions.IsNull(CMS.DataEngine.QueryColumn,System.Object)">
            <summary>
            Applies ISNULL function to the column.
            </summary>
            <param name="column">Column used for required function.</param>
            <param name="nullReplacement">Replacement expression used instead of null value. Value must be of a type that is implicitly convertible to the type of the column.</param>
        </member>
        <member name="T:CMS.DataEngine.QueryColumnXmlExtensions">
            <summary>
            Query column extension methods which provide XML querying capabilities.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnXmlExtensions.XmlQuery(CMS.DataEngine.QueryColumn,System.String)">
            <summary>
            Applies an XQuery against an XML column.
            </summary>
            <param name="column">Query column</param>
            <param name="xQuery">XML query</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnXmlExtensions.XmlValue(CMS.DataEngine.QueryColumn,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Applies an XML value method against an XML column.
            </summary>
            <param name="column">Query column</param>
            <param name="xQuery">XQuery expression</param>
            <param name="dataType">Data type to which the cast should be done. See <see cref="T:CMS.DataEngine.FieldDataType" /></param>
            <param name="size">Size of the type</param>
            <param name="precision">Precision of the type</param>
        </member>
        <member name="M:CMS.DataEngine.QueryColumnXmlExtensions.XmlExists(CMS.DataEngine.QueryColumn,System.String)">
            <summary>
            Applies an XML exists method against an XML column.
            </summary>
            <param name="column">Query column</param>
            <param name="xQuery">XQuery expression</param>
        </member>
        <member name="T:CMS.DataEngine.RowNumberColumn">
            <summary>
            Row number query column e.g. "ROW_NUMBER() OVER (ORDER BY DefaultCulture) AS CMS_RN"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RowNumberColumn.OrderBy">
            <summary>
            OrderBy expression for the row number
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RowNumberColumn.PartitionBy">
            <summary>
            If set, the row order gets partitioned by specific column(s)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.RowNumberColumn.IsSingleColumn">
            <summary>
            Returns true if this column represents a single column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor(System.String,CMS.DataEngine.IQueryColumn)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="orderBy">Order by</param>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RowNumberColumn.GetValueExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SelectQueryColumnBase`1">
            <summary>
            Query column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectQueryColumnBase`1.Name">
            <summary>
            Gets the column name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectQueryColumnBase`1.ColumnAlias">
            <summary>
            Column alias
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectQueryColumnBase`1.EnsureBracketsForAlias">
            <summary>
            If true, brackets for the column alias are ensured
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="expression">Expression (column name)</param>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.As(System.String)">
            <summary>
            Sets the alias to the column
            </summary>
            <param name="alias">Column alias</param>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.GetValueExpression">
            <summary>
            Gets the value expression of the column
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectQueryColumnBase`1.GetExpression">
            <summary>
            Gets the expression for the column data
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQuery">
            <summary>
            Queries particular database data or defines parameters for data selection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.#ctor(System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="queryName">Full query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.#ctor(System.String,System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.Combine(System.Collections.Generic.IEnumerable{CMS.DataEngine.IDataQuery},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines several queries into a single result
            </summary>
            <param name="queries">Queries</param>
            <param name="operators">Operators between queries</param>
            <param name="connectionStringName">Specifies connection string against which the query will be executed. If connection string name is not specified, uses the default database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.Combine``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines several queries into a single result
            </summary>
            <param name="queries">Queries</param>
            <param name="operators">Operators between queries</param>
            <param name="connectionStringName">Specifies connection string against which the query will be executed. If connection string name is not specified, uses the default database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.SetupCombinedQuery(CMS.DataEngine.IDataQuery,System.Collections.Generic.IEnumerable{CMS.DataEngine.IDataQuery},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combines several queries into a single result
            </summary>
            <param name="result">Result query</param>
            <param name="queries">Queries</param>
            <param name="operators">Operators between queries</param>
            <param name="connectionStringName">Specifies connection string against which the query will be executed. If connection string name is not specified, uses the default database.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuery.FromList(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a materialized DataQuery from the given list of IDs
            </summary>
            <param name="ids">List of IDs</param>
        </member>
        <member name="T:CMS.DataEngine.DataQueryBase`1">
            <summary>
            Queries particular database data or defines parameters for data selection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.CustomQueryText">
            <summary>
            Custom query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Result">
            <summary>
            DataSet with the result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.QueryName">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.FullQueryName">
            <summary>
            Represents a full query name of the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.TotalRecords">
            <summary>
            Gets the number of total records when paging is used. Gets updated once the query executes
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Count">
            <summary>
            Number of total items in the collection
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.IncludeBinaryData">
            <summary>
            If true, the query includes the object binary data. Default is true
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.DataSource">
            <summary>
            Data source that provides the query data. If not set, the query queries the database directly
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.DefaultOrderByColumns">
            <summary>
            Default order by columns used in case if needed, and order by is not specified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.NextPageAvailable">
            <summary>
            Returns true if the next page is available.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.SupportsReader">
            <summary>
            Gets a value indicating whether the query supports the <see cref="M:CMS.DataEngine.DataQueryBase`1.ExecuteReader(System.Data.CommandBehavior,System.Boolean)"/> method.
            Otherwise the <see cref="M:CMS.DataEngine.DataQueryBase`1.Execute"/> method must be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ReturnsSingleColumn">
            <summary>
            Returns true if the query returns single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.ConnectionStringForced">
            <summary>
            If true, the connection string was set explicitly
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.AllowMaterialization">
            <summary>
            If true, the query allows materialization
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.HasDataSource">
            <summary>
            Returns true if the query has specific data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.IsCombinedQuery">
            <summary>
            If true, this query is combined from several queries. When additional parameters are applied to it, it will be wrapped into a nested query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQueryBase`1.Tables">
            <summary>
            Collection of the result tables
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.#ctor(System.String,System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="className">Class name</param>
            <param name="queryName">Query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.#ctor(System.String)">
            <summary>
            Creates a query based on the given query name
            </summary>
            <param name="queryName">Full query name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Changed">
            <summary>
            Marks the object as changed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Reset">
            <summary>
            Flushes the results but leaves the generated query text unchanged.
            After the reset, query can be executed again to obtain new data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.DataSourceChanged">
            <summary>
            Marks the object as changed when data source changes
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetConnectionStringName">
            <summary>
            Gets the connection string name of the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetCompleteSettings(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the complete parameters for the query execution. The parameters are always a new instance of DataQuerySettings which can be further modified without any impact to the query itself.
            </summary>
            <param name="executingQuery">Executing query for which the parameters are retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.EnsureColumns(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Ensures columns within the given parameters
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetBinaryColumns">
            <summary>
            Gets the binary columns for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ResolveColumns(CMS.DataEngine.QueryColumnList,System.Boolean,System.Boolean)">
            <summary>
            Resolves the columns in the given list
            </summary>
            <remarks>
            Merges <paramref name="columns"/> with columns from <see cref="T:CMS.DataEngine.ClassStructureInfo"/> of type <typeparamref name="TQuery"/>.
            </remarks>
            <param name="columns">List of columns to resolve</param>
            <param name="includeBinaryData">Include binary columns</param>
            <param name="forceResolve">If true, the resolving is forced (resolves even when not necessary)</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetAvailableColumns">
            <summary>
            Gets the list of all available columns for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.EnsureDefaultOrderBy(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Ensures the default order by within the given query parameters
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.EnsureDefaultSource(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Ensures default source within the given query parameters
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDefaultSource">
            <summary>
            Gets the default source for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetClassName">
            <summary>
            Gets the class name for current query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.SetClassName(System.String)">
            <summary>
            Gets the class name for current query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDefaultOrderBy">
            <summary>
            Gets the default order by columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetIDColumn">
            <summary>
            Gets the ID column for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies the properties to the target query.
            </summary>
            <param name="target">Target query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this query parameters to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetFullQueryText(System.Boolean,System.Boolean,CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded</param>
            <param name="includeParameters">If true, parameter declarations are included if parameters are not expanded</param>
            <param name="settings">Query settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetFullQueryTextInternal(System.Boolean,System.Boolean,CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded with their values, otherwise the parameter names are kept in the query.</param>
            <param name="includeParameters">If true, parameter declarations are included if parameters are not expanded</param>
            <param name="settings">Query settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.LoadTotalRecords">
            <summary>
            Loads the number of total records count from the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.LoadTotalRecordsNonPaged">
            <summary>
            Loads the number of total records for an unpaged query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.LoadTotalRecordsPaged">
            <summary>
            Loads the number of total records for a paged query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsColumn(System.String)">
            <summary>
            Converts the query to the query column using this query as nested
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsSubQuery">
            <summary>
            Modifies the query to be able to be used as a sub-query, e.g. for usage in WHERE A IN ([query]). Ensures single column result, and removes order by from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetExpression">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.HasResults">
            <summary>
            Returns true, if the query returns any results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsSingleColumn(System.String,System.Boolean)">
            <summary>
            Creates a single column query from the given query
            </summary>
            <param name="defaultColumn">Specific column to use in case query doesn't return single column yet</param>
            <param name="forceColumn">If true, the given column is forced to the output</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDefaultSingleColumn">
            <summary>
            Gets the default single column for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsIDQuery">
            <summary>
            Creates an ID query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsNested``1(CMS.DataEngine.NestedQuerySettings)">
            <summary>
            Creates a nested query from the given query
            </summary>
            <param name="settings">Settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplyProperties(CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Applies main query properties to the given query to ensure synchronized state before execution
            </summary>
            <param name="query">Query to prepare</param>
            <param name="multiQuery">If true, the query is an inner query within multi-query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AllowTopNDistribution">
            <summary>
            Returns true if distribution of TOP N to inner queries is allowed. Defaults to false.
            Distribution of TOP N to inner queries helps performance mainly in case the inner query is complex and includes nesting levels, for simple queries it is better not to allow the distribution.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplyTopN(System.Int32,CMS.DataEngine.IDataQuery)">
            <summary>
            Applies TOP N settings to the given query if it is more restrictive than the current query settings.
            </summary>
            <param name="topN">Top N to apply</param>
            <param name="query">Target query</param>
            <returns>Returns true if TOP N was applied to the inner query</returns>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplyPagingTopN(CMS.DataEngine.IDataQuerySettings,CMS.DataEngine.IDataQuery)">
            <summary>
            Applies top N based on paging settings to the inner query to select only necessary data
            </summary>
            <param name="settings">Query settings</param>
            <param name="query">Target query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplyOrderBy(CMS.DataEngine.IDataQuerySettings,CMS.DataEngine.IDataQuery)">
            <summary>
            Applies order by from the given settings to the inner query
            </summary>
            <param name="settings">Source settings</param>
            <param name="query">Target query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsNestedInternal``1(CMS.DataEngine.DataQuerySettings,CMS.DataEngine.NestedQuerySettings)">
            <summary>
            Creates a nested query from the given query
            </summary>
            <param name="settings">Parameters for the query</param>
            <param name="nestedSettings">Nested settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.AsMaterializedList(System.String,System.Boolean)">
            <summary>
            Makes a materialized list from the given query
            </summary>
            <param name="columnName">Column name to output</param>
            <param name="distinct">If true, only distinct values are selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.As``1">
            <summary>
            Changes the type of the query to another type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Select``1(System.Func{System.Data.DataRow,``0})">
            <summary>
            Transforms the current result
            </summary>
            <param name="func">Select function</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetScalarResult``1(``0)">
            <summary>
            Gets the scalar
            </summary>
            <param name="defaultValue">Default value if result not found or not capable to convert to output type</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetListResult``1">
            <summary>
            Gets the result as a list of values from the first column that the query returns. Excludes null values from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ForEachPage(System.Action{`0},System.Int32)">
            <summary>
            Executes the given action for each page (DataSet) in the results. If the query is not set up as a paged query before calling this 
            method and <paramref name="pageSize"/> is not set, executes the action once with the current results.
            </summary>
            <param name="pageAction">Action which will be executed for each page</param>
            <param name="pageSize">Page size. 0 means no processing page-by-page. By default uses current paging settings. Page size of the query is set to the original value after this method finishes.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ForEachRow(System.Action{System.Data.DataRow},System.Int32)">
            <summary>
            Executes the given action for each item (DataRow) in the result. Processes the items in batches of the given size.
            </summary>
            <param name="rowAction">Row action</param>
            <param name="batchSize">Batch size. 0 means no batch processing. By default uses current paging settings.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetSource">
            <summary>
            Gets a source for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplySettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ApplySettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetClassStructureInfo">
            <summary>
            Gets the class structure info for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.NewEmptyQuery">
            <summary>
            Creates a new empty query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetEnumerableResult(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Gets an enumeration of data records representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <returns>Returns the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
            <remarks>
            The returned data records can contain additional system columns (<see cref="F:CMS.DataEngine.SystemColumns.ROW_NUMBER"/> and <see cref="F:CMS.DataEngine.SystemColumns.TOTAL_RECORDS"/>)
            when a paged query is being executed. The columns support the framework infrastructure and should not be relied on in custom code.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetEnumerableResultAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an enumeration of data records representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
            <remarks>
            The returned data records can contain additional system columns (<see cref="F:CMS.DataEngine.SystemColumns.ROW_NUMBER"/> and <see cref="F:CMS.DataEngine.SystemColumns.TOTAL_RECORDS"/>)
            when a paged query is being executed. The columns support the framework infrastructure and should not be relied on in custom code.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Execute">
            <summary>
            Executes the current query and returns it's results as a <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ExecuteReader(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the current query and returns it's results as an <see cref="T:System.Data.IDataReader"/>. The <see cref="P:CMS.DataEngine.DataQueryBase`1.SupportsReader"/> flag indicates whether this operation
            is supported.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <returns>Returns the data reader resulting from query execution, or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
            <remarks>
            The method returns null if <see cref="P:CMS.DataEngine.WhereConditionBase`1.ReturnsNoResults"/> indicates the query won't result in any results.
            </remarks>
            <seealso cref="M:CMS.DataEngine.DataQueryBase`1.Execute"/>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ExecuteReaderAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the current query and returns it's results as an <see cref="T:System.Data.IDataReader"/>. The <see cref="P:CMS.DataEngine.DataQueryBase`1.SupportsReader"/> flag indicates whether this operation
            is supported.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either the data reader resulting from query execution, or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
            <remarks>
            The method returns a task returning null if <see cref="P:CMS.DataEngine.WhereConditionBase`1.ReturnsNoResults"/> indicates the query won't result in any results.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetData">
            <summary>
            Executes the query. Sets the total records number during execution.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReader(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the query using DB data reader. The <see cref="P:CMS.DataEngine.DataQueryBase`1.SupportsReader"/> flag indicates whether this operation
            is supported.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <returns>Returns the data reader resulting from query execution, or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
            <remarks>
            The method returns null if <see cref="P:CMS.DataEngine.WhereConditionBase`1.ReturnsNoResults"/> indicates the query won't result in any results.
            </remarks>
            <seealso cref="M:CMS.DataEngine.DataQueryBase`1.GetData"/>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderAsync(System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query using DB data reader. The <see cref="P:CMS.DataEngine.DataQueryBase`1.SupportsReader"/> flag indicates whether this operation
            is supported.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either the data reader resulting from query execution, or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
            <remarks>
            The method returns a task returning null if <see cref="P:CMS.DataEngine.WhereConditionBase`1.ReturnsNoResults"/> indicates the query won't result in any results.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDataSource">
            <summary>
            Executes the current query over data source and returns it's results as a <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDataSource">
            <summary>
            Executes the current query over data source and returns it's results as an <see cref="T:System.Data.IDataReader"/>.
            The method is effectively a wrapper around <see cref="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDataSource"/> based on <see cref="M:System.Data.DataSet.CreateDataReader"/>.
            </summary>
            <returns>Returns the data reader based on <see cref="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDataSource"/>, or null.</returns>
            <remarks>
            The method returns null if the underlying call to <see cref="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDataSource"/> returns null or a <see cref="T:System.Data.DataSet"/> with no data tables.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDataSourceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the current query over data source and returns it's results as an <see cref="T:System.Data.IDataReader"/>.
            The method is effectively a wrapper around <see cref="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDataSource"/>.
            </summary>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning the data reader based on <see cref="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDataSource"/>.</returns>
            <remarks>
            The method returns a task returning null if the underlying call to <see cref="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDataSource"/> returns null.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.PrepareDataQuerySourceParameters">
            <summary>
            Prepares the data source parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDB">
            <summary>
            Executes the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataFromDBInternal">
            <summary>
            Executes the current query and returns it's results as a DataSet
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetResults(CMS.DataEngine.IDataQuery,System.Int32@)">
            <summary>
            Gets results from executing query
            </summary>
            <param name="query">Executing query</param>
            <param name="totalRecords">Returns the total records number</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDB(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the query using DB data reader.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <returns>Returns the data reader resulting from query execution, or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDBInternal(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the query using DB data reader.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <returns>Returns the data reader resulting from query execution, or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDBAsync(System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query using DB data reader.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either the data reader resulting from query execution, or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetReaderFromDBInternalAsync(System.Data.CommandBehavior,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the query using DB data reader.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either the data reader resulting from query execution, or null.</returns>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetQueryParameters(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the executing query parameters
            </summary>
            <param name="settings">Query settings</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetConnection">
            <summary>
            Gets the executing connection for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetCompleteQueryParameters(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Returns query parameter container filled with the complete settings of current query.
            </summary>
            <remarks>
            Wraps distinct paged query as nested so the row number column required for paging doesn't thwart the distinct selection.
            </remarks>
            <param name="settings">Query settings to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetCompleteQueryParametersInternal(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Returns query parameter container filled with the complete settings of current query.
            </summary>
            <remarks>
            Wraps distinct paged query as nested so the row number column required for paging doesn't thwart the distinct selection.
            </remarks>
            <param name="settings">Query settings to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.TranslateOrderByColumn(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Translates order column alias for real column name in given DataQuerySettings
            Use only for paged queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GenerateQueryText(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Generates the query text
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetBaseQueryText">
            <summary>
            Gets the base query texts for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.GetDataSourceName">
            <summary>
            Gets data source identifier that represents the location from which the data are obtained. 
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query. 
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.HasCompatibleSource(CMS.DataEngine.IDataQuery)">
            <summary>
            Returns true if the given query is an external source
            </summary>
            <param name="query">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.BinaryData(System.Boolean)">
            <summary>
            Sets whether the binary data should be included to the result
            </summary>
            <param name="binary">Include binary data?</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSource(System.Data.DataSet)">
            <summary>
            Sets the given DataSet as the source of the data query
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WithSource(CMS.DataEngine.DataQuerySource)">
            <summary>
            Sets the given source as the source of the data query
            </summary>
            <param name="source">Data query source</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.From(CMS.DataEngine.QuerySource)">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="source">Source</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Source(System.Action{CMS.DataEngine.QuerySource})">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="sourceParameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.OrderByDefault">
            <summary>
            Sets the default order by for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.ExpandColumns">
            <summary>
            Expands the columns within this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WhereAnyColumnContains(System.String)">
            <summary>
            Adds condition to all items that contain given text in any of the string columns. Performs a SQL substring search on the data.
            </summary>
            <param name="text">Text to search</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.WhereAnyColumn(CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Matches the given condition on any column with the same type as the given value type.
            </summary>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Union(`0,System.Boolean)">
            <summary>
            Gets the union of this data query with another query
            </summary>
            <param name="query">Query to union with</param>
            <param name="unionAll">If true, the union does not eliminate the duplicities (produces UNION ALL)</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.CombineWith(`0,System.String)">
            <summary>
            Combines the query with the given query
            </summary>
            <param name="query">Query to combine with</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.UnionAll(`0)">
            <summary>
            Gets the union of this data query with another query without eliminating the duplicities
            </summary>
            <param name="query">Query to union with</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Intersect(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.Except(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="M:CMS.DataEngine.DataQueryBase`1.op_Implicit(CMS.DataEngine.DataQueryBase{`0})~System.Data.DataSet">
            <summary>
            Implicit operator for conversion from DataQuery class to DataSet
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySettings">
            <summary>
            Defines parameters for the data query. Use DataQuery method UseParameters to apply this parameters to a query.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySettingsBase`1">
            <summary>
            Defines parameters for the data selection
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mOrderByColumns">
            <summary>
            Order by columns
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mSelectColumnsList">
            <summary>
            Columns to select
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mFilterColumns">
            <summary>
            Columns to provide extra filtering (which are not included into the output)
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mGroupByColumns">
            <summary>
            Columns to group by
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mHavingCondition">
            <summary>
            Having condition
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mTopNRecords">
            <summary>
            TopN
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mOffset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mMaxRecords">
            <summary>
            Maximum number of records to select
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mQuerySource">
            <summary>
            Source of the query
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mDefaultQuerySource">
            <summary>
            Default source of the query in case source is not defined
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySettingsBase`1.mSelectDistinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.OrderByColumns">
            <summary>
            List of columns by which the result should be sorted, e.g. "NodeLevel, DocumentName DESC"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.FilterColumns">
            <summary>
            List of columns used for extra filtering within the query, e.g. "CMS_C, CMS_RN"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.SelectColumnsList">
            <summary>
            List of columns to return, by default returns all columns, e.g. "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.GroupByColumns">
            <summary>
            List of columns to group by, by default doesn't group, e.g. "NodeLevel, NodeOwner"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HavingCondition">
            <summary>
            Where condition for the group by on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.TopNRecords">
            <summary>
            If set, selects only first top N number of records
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.QuerySource">
            <summary>
            Query source object
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.SelectDistinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.DefaultQuerySource">
            <summary>
            Default source of the query in case source is not defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.Offset">
            <summary>
            Index of the first record to return (use for paging together with MaxRecords)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.MaxRecords">
            <summary>
            Maximum number of results to return (use for paging together with Offset)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.TotalExpression">
            <summary>
            Total items expression. When defined, used instead default total items for a paged query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.IsPagedQuery">
            <summary>
            Returns true if the query has the paging enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.IsSubQuery">
            <summary>
            If true, the query is a sub-query used in another query.
            This brings certain constraints such as that it cannot use order by or CTE.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.IsNested">
            <summary>
            Indicates that this query is nested within another query as its source.
            This brings certain constraints such as that is cannot use CTE.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.ForceOrderBy">
            <summary>
            If true, the order by should be forced in the process of execution
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HavingIsComplex">
            <summary>
            Returns true if the given having condition is a complex condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HavingIsEmpty">
            <summary>
            Returns true if the having condition is empty
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySettingsBase`1.HasGroupBy">
            <summary>
            Returns true if the given query has group by set
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.CreateFilterColumns">
            <summary>
            Creates the list for filter columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.GetDefaultSource">
            <summary>
            Gets the default source for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this query parameters to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Creates the clone of the collection.
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.GetExpressions(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Gets the query expressions
            </summary>
            <param name="parameters">Query data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AnySettingsDefined">
            <summary>
            Returns true if the object has any settings defined that influence the resulting query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceSelectedColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceOrderByColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceColumnName(System.String,System.String,System.String)">
            <summary>
            Replaces the column name in the given list of columns
            </summary>
            <param name="columns">List of columns</param>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddHavingInternal(System.String)">
            <summary>
            Adds the given having condition to the final having condition
            </summary>
            <param name="having">Having condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddHavingInternal(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given having condition
            </summary>
            <param name="condition">Condition to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Then">
            <summary>
            Identity method to make the query expression more readable. Use before the OrderBy method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Take">
            <summary>
            Identity method to make the query expression more readable. Use before the Columns or Page method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Distinct(System.Boolean)">
            <summary>
            Sets the query to use distinct selection over the given columns
            </summary>
            <param name="distinct">If set to true, returns only distinct (different) values.</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.TopN(System.Int32)">
            <summary>
            Selects only first top N number of records
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Column(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Column(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Columns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Columns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.AddFilterColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional filter column to the query
            </summary>
            <param name="col">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NoColumns">
            <summary>
            Sets the query to return no columns at all
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.ReplaceColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Page(System.Int32,System.Int32)">
            <summary>
            Specifies the page to select with given page index and page size. Page number is indexed from 0 (first page)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.PagedBy(System.Int32)">
            <summary>
            Sets up the query as a paged query with the given page size. Resets the page index to first page. Use in combination with NextPageAvailable and NextPage to iterate over the data in batches.
            </summary>
            <remarks>
            Note that if you iterate the results after calling this method, the results will cover only a single page. To iterate through all items page-by-page, use methods ForEachRow or ForEachObject.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NotPaged">
            <summary>
            Sets up the query to become not paged query and output all results at once.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NextPage">
            <summary>
            Adjusts the query to a next page, using the current page size. Use in combination with PagedBy and NextPageAvailable to iterate over the data in batches.
            </summary>
            <remarks>
            Number of records in one page can be specified by setting MaxRecords property or calling PagedBy() method.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.OrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NewGroupBy(System.String[])">
            <summary>
            Clears the current group by, reverting the source of data to the original. Note, that this method also resets the existing having condition which is closely bound to the group by.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.GroupBy(System.String[])">
            <summary>
            Specifies the columns to group by
            </summary>
            <param name="columns">List of columns to group by</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.NewHaving">
            <summary>
            Clears the current having condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Having(System.String,System.Boolean)">
            <summary>
            Specifies the having condition
            </summary>
            <param name="having">Having condition</param>
            <param name="replace">If true, the having condition replaces the original having condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Having(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given having conditions to the query.
            </summary>
            <param name="conditions">Having where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.Having(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySettingsBase`1.WithComment(System.String)">
            <summary>
            Adds the comment to the given query
            </summary>
            <param name="comment">Comment to add</param>
        </member>
        <member name="T:CMS.DataEngine.IDataQuery`1">
            <summary>
            Interface for the data query for a specific query type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given parameters to the query
            </summary>
            <param name="parameters">Parameters to use</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.BinaryData(System.Boolean)">
            <summary>
            Sets whether the binary data should be included to the result
            </summary>
            <param name="binary">Include binary data?</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSource(System.Data.DataSet)">
            <summary>
            Sets the given DataSet as the source of the data query
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WithSource(CMS.DataEngine.DataQuerySource)">
            <summary>
            Sets the given source as the source of the data query
            </summary>
            <param name="source">Data query source</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.From(CMS.DataEngine.QuerySource)">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="source">Source</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Source(System.Action{CMS.DataEngine.QuerySource})">
            <summary>
            Defines the source of the data (table, view or a nested query)
            </summary>
            <param name="sourceParameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.OrderByDefault">
            <summary>
            Sets the default order by for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.ExpandColumns">
            <summary>
            Expands the columns within this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WhereAnyColumnContains(System.String)">
            <summary>
            Adds condition to all items that contain given text in any of the string columns. Performs a SQL substring search on the data.
            </summary>
            <param name="text">Text to search</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.WhereAnyColumn(CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Matches the given condition on any column with the same type as the given value type.
            </summary>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Union(`0,System.Boolean)">
            <summary>
            Gets the union of this data query with another query
            </summary>
            <param name="query">Query to union with</param>
            <param name="unionAll">If true, the union does not eliminate the duplicities (produces UNION ALL)</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.UnionAll(`0)">
            <summary>
            Gets the union of this data query with another query without eliminating the duplicities
            </summary>
            <param name="query">Query to union with</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Intersect(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery`1.Except(`0)">
            <summary>
            Gets the intersection of this data query with another query
            </summary>
            <param name="query">Query to intersect with</param>
        </member>
        <member name="T:CMS.DataEngine.IDataQuery">
            <summary>
            Data query interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.QueryName">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.CustomQueryText">
            <summary>
            Custom query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.IncludeBinaryData">
            <summary>
            If true, the query includes the object binary data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.QueryText">
            <summary>
            Query text
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.Result">
            <summary>
            <see cref="T:System.Data.DataSet"/> with the result.
            </summary>
            <seealso cref="M:CMS.DataEngine.IDataQuery.Execute"/>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.Count">
            <summary>
            Number of actual records retrieved from the database
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.TotalRecords">
            <summary>
            Gets the number of total records when paging is used. Gets updated once the query executes
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.DefaultOrderByColumns">
            <summary>
            Default order by columns used in case if needed, and order by is not specified
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.Tables">
            <summary>
            Collection of the result tables
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.SupportsReader">
            <summary>
            Gets a value indicating whether the query supports the <see cref="M:CMS.DataEngine.IDataQuery.ExecuteReader(System.Data.CommandBehavior,System.Boolean)"/> method.
            Otherwise the <see cref="M:CMS.DataEngine.IDataQuery.Execute"/> method must be used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.DataSource">
            <summary>
            Data source that provides the query data. If not set, the query queries the database directly
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.HasDataSource">
            <summary>
            Returns true if the query has specific data source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.IsCombinedQuery">
            <summary>
            If true, this query is combined from several queries. When additional parameters are applied to it, it will be wrapped into a nested query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.ReturnsSingleColumn">
            <summary>
            Returns true if the query returns single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.ConnectionStringName">
            <summary>
            Query connection string name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuery.AllowMaterialization">
            <summary>
            If true, the query allows materialization
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetFullQueryText(System.Boolean,System.Boolean,CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded</param>
            <param name="includeParameters">If true, parameter declarations are included if parameters are not expanded</param>
            <param name="settings">Query settings</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetSource">
            <summary>
            Gets a source for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetCompleteQueryParameters(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Returns query parameter container filled with the complete settings of current query.
            </summary>
            <remarks>
            Wraps distinct paged query as nested so the row number column required for paging doesn't thwart the distinct selection.
            </remarks>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetCompleteSettings(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the complete parameters for the query execution
            </summary>
            <param name="executingQuery">Executing query for which the parameters are retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ApplySettings(System.Action{CMS.DataEngine.DataQuerySettings})">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ApplySettings(CMS.DataEngine.AbstractQueryObject)">
            <summary>
            Applies the given settings to the query
            </summary>
            <param name="parameters">Parameters to apply</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetEnumerableResult(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Gets an enumeration of data records representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <returns>Returns the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetEnumerableResultAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an enumeration of data records representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.Execute">
            <summary>
            Executes the current query and returns it's results as a <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ExecuteReader(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Executes the current query and returns it's results as an <see cref="T:System.Data.IDataReader"/>. The <see cref="P:CMS.DataEngine.IDataQuery.SupportsReader"/> flag indicates whether this operation
            is supported.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection</param>
            <returns>Returns the data reader resulting from query execution, or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ExecuteReaderAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously executes the current query and returns it's results as an <see cref="T:System.Data.IDataReader"/>. The <see cref="P:CMS.DataEngine.IDataQuery.SupportsReader"/> flag indicates whether this operation
            is supported.
            </summary>
            <param name="commandBehavior">Command behavior for the reader.</param>
            <param name="newConnection">If true, the reader will be executed using its own dedicated connection</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either the data reader resulting from query execution, or null.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetScalarResult``1(``0)">
            <summary>
            Gets the scalar
            </summary>
            <param name="defaultValue">Default value if result not found or not capable to convert to output type</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetListResult``1">
            <summary>
            Gets the result as a list of values from the first column that the query returns. Excludes null values from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.Select``1(System.Func{System.Data.DataRow,``0})">
            <summary>
            Transforms the current result
            </summary>
            <param name="func">Select function</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.ForEachRow(System.Action{System.Data.DataRow},System.Int32)">
            <summary>
            Executes the given action for each item (DataRow) in the result. Processes the items in batches of the given size.
            </summary>
            <param name="rowAction">Row action</param>
            <param name="batchSize">Batch size. 0 means no batch processing. By default uses current paging settings.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsNested``1(CMS.DataEngine.NestedQuerySettings)">
            <summary>
            Creates a nested query from the given query
            </summary>
            <param name="settings">Settings</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsIDQuery">
            <summary>
            Creates an ID query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.As``1">
            <summary>
            Changes the type of the query to another type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsSingleColumn(System.String,System.Boolean)">
            <summary>
            Creates a single column query from the given query
            </summary>
            <param name="defaultColumn">Specific column to use in case query doesn't return single column yet</param>
            <param name="forceColumn">If true, the given column is forced to the output</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsSubQuery">
            <summary>
            Modifies the query to be able to be used as a sub-query, e.g. for usage in WHERE A IN ([query]). Ensures single column result, and removes order by from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.AsMaterializedList(System.String,System.Boolean)">
            <summary>
            Makes a materialized list from the given query
            </summary>
            <param name="columnName">Column name to output</param>
            <param name="distinct">If true, only distinct IDs are selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.HasCompatibleSource(CMS.DataEngine.IDataQuery)">
            <summary>
            Returns true if the given query is an external source
            </summary>
            <param name="query">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuery.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="T:CMS.DataEngine.IDataQuerySettings`1">
            <summary>
            Data query parameters interface for a specific query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Then">
            <summary>
            Identity method to make the query expression more readable. Use before the OrderBy method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Take">
            <summary>
            Identity method to make the query expression more readable. Use before the Columns or Page method. Doesn't provide any functionality.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Distinct(System.Boolean)">
            <summary>
            Sets the query to use distinct selection over the given columns
            </summary>
            <param name="distinct">If set to true, returns only distinct (different) values.</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.TopN(System.Int32)">
            <summary>
            Selects only first top N number of records
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Column(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Column(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Columns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Columns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Columns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.AddColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.ReplaceColumn(System.String,System.String)">
            <summary>
            Replaces the selected column with a new name
            </summary>
            <param name="originalName">Original column name</param>
            <param name="newName">New column name</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Page(System.Int32,System.Int32)">
            <summary>
            Specifies the page to select with given page index and page size. Page number is indexed from 0 (first page)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.PagedBy(System.Int32)">
            <summary>
            Sets up the query as a paged query with the given page size. Resets the page index to first page. Use in combination with NextPageAvailable and NextPage to iterate over the data in batches.
            </summary>
            <remarks>
            Note that if you iterate the results after calling this method, the results will cover only a single page. To iterate through all items page-by-page, use methods ForEachRow or ForEachObject.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NotPaged">
            <summary>
            Sets up the query to become not paged query and output all results at once.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NextPage">
            <summary>
            Adjusts the query to a next page, using the current page size. Use in combination with PagedBy and NextPageAvailable to iterate over the data in batches.
            </summary>
            <remarks>
            Number of records in one page can be specified by setting MaxRecords property or calling PagedBy() method.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.OrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NewGroupBy(System.String[])">
            <summary>
            Clears the current group by, reverting the source of data to the original. Note, that this method also resets the existing having condition which is closely bound to the group by.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.GroupBy(System.String[])">
            <summary>
            Specifies the columns to group by
            </summary>
            <param name="columns">List of columns to group by</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.NewHaving">
            <summary>
            Clears the current having condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Having(System.String,System.Boolean)">
            <summary>
            Specifies the group by having condition
            </summary>
            <param name="having">Having condition</param>
            <param name="replace">If true, the having condition replaces the original having condition</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Having(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given having conditions to the query.
            </summary>
            <param name="conditions">Having where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.Having(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.IDataQuerySettings`1.WithComment(System.String)">
            <summary>
            Adds the comment to the given query
            </summary>
            <param name="comment">Comment to add</param>
        </member>
        <member name="T:CMS.DataEngine.IDataQuerySettings">
            <summary>
            Data query parameters interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.OrderByColumns">
            <summary>
            List of columns by which the result should be sorted, e.g. "NodeLevel, DocumentName DESC"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.GroupByColumns">
            <summary>
            List of columns to group by, by default doesn't group, e.g. "NodeLevel, NodeOwner"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.SelectColumnsList">
            <summary>
            List of columns to return, by default returns all columns, e.g. "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.TopNRecords">
            <summary>
            If set, selects only first top N number of records
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.Offset">
            <summary>
            Index of the first record to return (use for paging together with MaxRecords)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.MaxRecords">
            <summary>
            Maximum number of results to return (use for paging together with Offset)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.TotalExpression">
            <summary>
            Total items expression. When defined, used instead default total items for a paged query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.IsPagedQuery">
            <summary>
            Returns true if the query has the paging enabled
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.QuerySource">
            <summary>
            Source of the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.DefaultQuerySource">
            <summary>
            Default source of the query in case source is not defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.SelectDistinct">
            <summary>
            If set to true, returns only distinct (different) values.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.HavingCondition">
            <summary>
            Where condition for the group by on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.FilterColumns">
            <summary>
            List of columns used for extra filtering within the query, e.g. "CMS_C, CMS_RN"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.IsSubQuery">
            <summary>
            If true, the query is a sub-query used in another query.
            This brings certain constraints such as that it cannot use order by or CTE.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.IsNested">
            <summary>
            Indicates that this query is nested within another query as its source.
            This brings certain constraints such as that is cannot use CTE.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IDataQuerySettings.HasGroupBy">
            <summary>
            Returns true if the given query has group by set
            </summary>
        </member>
        <member name="T:CMS.DataEngine.NestedQuerySettings">
            <summary>
            Settings to define how a nested query should be created
            </summary>
        </member>
        <member name="P:CMS.DataEngine.NestedQuerySettings.EnsureOrderByColumns">
            <summary>
            If true, order by columns are translated into output columns CMS_O1, CMS_O2 etc. so that the data is available in the outer query. Default true
            </summary>
        </member>
        <member name="P:CMS.DataEngine.NestedQuerySettings.MovePagingToOuterQuery">
            <summary>
            If true, paging parameters are moved to the outer query. Default true 
            </summary>
        </member>
        <member name="P:CMS.DataEngine.NestedQuerySettings.UseSameDataSet">
            <summary>
            If true, outer query uses the same DataSet as the inner query to provide the same type of result by default. Default true
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DataParameter">
            <summary>
            Container for a single query parameter.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Type">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.Direction">
            <summary>
            Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.
            The default is <see cref="F:System.Data.ParameterDirection.Input"/>.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataParameter.ParamRegEx">
            <summary>
            Regular expression to located the parameter within text
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.ToString">
            <summary>
            Converts the data parameter to string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetParameterRegEx">
            <summary>
            Gets the regular expression for a parameter
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.Expand(System.String)">
            <summary>
            Expands the given expression
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.Expand(System.String,System.Func{CMS.DataEngine.DataParameter,System.String})">
            <summary>
            Expands the given expression
            </summary>
            <param name="expression">Expression to expand</param>
            <param name="getValue">Custom function for getting the value</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetDeclaration">
            <summary>
            Gets the parameter declaration
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.Equals(System.Object)">
            <summary>
            Returns true if the parameter equals to another parameter object. Both name and value must match in order to consider two parameters equal.
            </summary>
            <param name="obj">Object to compare to</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetValueToCompare">
            <summary>
            Gets the value for the parameter comparison
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetCurrentValue">
            <summary>
            Gets the current value for query execution
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.Compare(System.Object,System.Object)">
            <summary>
            Compares two given values and returns true if the values match
            </summary>
            <param name="value1">First value</param>
            <param name="value2">Second value</param>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.GetHashCode">
            <summary>
            Gets the hash code of the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataParameter.Clone">
            <summary>
            Clones the parameter
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DynamicDataParameter">
            <summary>
            Represents a dynamic data parameter which value is resolved at the execution of the query, not when the parameter is defined
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DynamicDataParameter.GetValue">
            <summary>
            Function to get parameter value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDataParameter.#ctor(System.String,System.Func{System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="name">Parameter name</param>
            <param name="getValue">Function to get parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.DynamicDataParameter.GetValueToCompare">
            <summary>
            Gets the value for the parameter comparison
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDataParameter.GetCurrentValue">
            <summary>
            Gets the current value for query execution
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DynamicDataParameter.Clone">
            <summary>
            Clones the parameter
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryDataParameters">
            <summary>
            Container that holds a list of query parameters.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.mLocalParameters">
            <summary>
            List of parameters defined locally in this instance
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.mExistingLocalParameters">
            <summary>
            Table of existing parameters [name -> DataParameter]
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.mExtraLocalMacros">
            <summary>
            Extra query macros
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryDataParameters.ParamNameRegex">
            <summary>
            Regular expression to get all parameters from the given expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.IsEmpty">
            <summary>
            Returns true if parameters are empty
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.ExtraLocalMacros">
            <summary>
            Extra query macros
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.LocalParameters">
            <summary>
            List of parameters defined locally in this instance
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.ExistingLocalParameters">
            <summary>
            Table of existing parameters [name -> DataParameter]
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.ParentParameters">
            <summary>
            Parent query parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.FillDataSet">
            <summary>
            DataSet to be filled by the query. If not given, new DataSet is created
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.QueryBefore">
            <summary>
            Text included before the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.QueryAfter">
            <summary>
            Text included after the query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Item(System.String)">
            <summary>
            Returns the parameter of the specified name.
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Item(System.Int32)">
            <summary>
            Returns the parameter on specified index.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Count">
            <summary>
            Number of the registered parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.MacroCount">
            <summary>
            Number of macros in the data parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryDataParameters.Source">
            <summary>
            Source of the data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.#ctor(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Constructor
            </summary>
            <param name="parentParameters">Parent query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetParameter(System.String)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="name">Parameter name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddDateTime(System.String,System.DateTime)">
            <summary>
            Adds the date time parameter into the list (if the date time is DateTime.MinValue, adds DBNull.Value).
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddGuid(System.String,System.Guid)">
            <summary>
            Adds the guid parameter into the list (if the guid id Guid.Empty, adds DBNull.Value).
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddId(System.String,System.Int32)">
            <summary>
            Adds the ID parameter into the list (if the ID is not larger than 0, adds DBNull.Value).
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="condition">Condition, if false, the NULL value is set</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddUnique(System.String,System.Object,System.Boolean)">
            <summary>
            Adds the parameter into the list, if the parameter already exists, defines a unique name for it.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddUnique(CMS.DataEngine.DataParameter,System.Boolean)">
            <summary>
            Adds the parameter into the list, if the parameter already exists, defines a unique name for it.
            </summary>
            <param name="par">Parameter to add</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(System.String,System.Object,System.Type)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
            <param name="type">Type of the parameter</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(CMS.DataEngine.DataParameter)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="param">Parameter to add</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Add(CMS.DataEngine.DataParameter,System.Boolean)">
            <summary>
            Adds the parameter into the list.
            </summary>
            <param name="param">Parameter to add</param>
            <param name="unique">If true, the parameter will be added with a unique name if already present</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetUniqueName(System.String,System.Boolean)">
            <summary>
            Gets a unique parameter name using the base name
            </summary>
            <param name="name">Base name</param>
            <param name="checkBaseName">If true, given base name is also checked for uniqueness</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.IncludeDataParameters(CMS.DataEngine.QueryDataParameters,System.String,System.Boolean)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="addParameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.IncludeParameters(CMS.DataEngine.QueryDataParameters,System.String,System.Boolean)">
            <summary>
            Adds the data parameters to the current query parameters
            </summary>
            <param name="addParameters">Parameters to add</param>
            <param name="expression">Expression which refers to the parameters</param>
            <param name="mergeSameParameters">If true, the process merges the parameters with same name and value into one</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ContainsSameParameter(CMS.DataEngine.DataParameter)">
            <summary>
            Returns true, if parameters contain the same parameter as the given one
            </summary>
            <param name="par">Parameter</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Expand(System.String)">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Expand(System.String,System.Func{CMS.DataEngine.DataParameter,System.String})">
            <summary>
            Expands the expression by replacing parameters with their values
            </summary>
            <param name="expression">Expression to expand</param>
            <param name="getValue">Custom function for getting the value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetCompleteQueryText(System.String)">
            <summary>
            Gets the complete query text updated with the parameters
            </summary>
            <param name="queryText">Query text template</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddBeforeAfter(System.String)">
            <summary>
            Adds the before and after query text
            </summary>
            <param name="queryText">Query text</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ResolveMacros(System.String)">
            <summary>
            Resolves macros within the given query text
            </summary>
            <param name="queryText">Query text template</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ResolveMacro(System.String,System.String,System.String)">
            <summary>
            Resolves the given macro within the given query text
            </summary>
            <param name="queryText">Query text</param>
            <param name="name">Macro name</param>
            <param name="value">Macro value</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.AddMacro(System.String,System.String,System.Boolean)">
            <summary>
            Adds the macro to the query data parameters
            </summary>
            <param name="name">Macro name</param>
            <param name="value">Macro value</param>
            <param name="addHashes">If true, hash chars are added to the macro automatically, e.g. "TABLE" is converted to "##TABLE##"</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.ToString">
            <summary>
            Converts the data parameter to string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetMacros">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.Equals(System.Object)">
            <summary>
            Returns true if the object equals another object
            </summary>
            <param name="obj">Object to compare to</param>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetHashCode">
            <summary>
            Provides a hashcode for the object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.GetDeclaration">
            <summary>
            Gets the declaration of parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryDataParameters.IncludeValue(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Includes the given value to the parameters if necessary
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Value to include</param>
            <param name="parameters">Parameters</param>
            <returns>Returns the expression to represent the value in a query</returns>
        </member>
        <member name="T:CMS.DataEngine.QueryExecutionTypeEnum">
            <summary>
            Execution type of the query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteNonQuery">
            <summary>
            ExecuteNonQuery.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteQuery">
            <summary>
            ExecuteQuery.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteReader">
            <summary>
            ExecuteReader.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryExecutionTypeEnum.ExecuteScalar">
            <summary>
            ExecuteScalar.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryParameters">
            <summary>
            Query parameters container.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Type">
            <summary>
            Query type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.RequiresTransaction">
            <summary>
            Requires transaction.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.ConnectionStringName">
            <summary>
            Connection string name to use
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.ExecutionType">
            <summary>
            Execution type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.UseNewConnection">
            <summary>
            If true, a new connection instance is created for this query execution
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.MaxRecords">
            <summary>
            Maximum number of records to get. If maxRecords is zero or less, all records are returned (no paging is used)
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Offset">
            <summary>
            Index of first record to get
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Name">
            <summary>
            Query name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.IsForExecution">
            <summary>
            True if the parameters are suitable for query execution
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Text">
            <summary>
            Query text.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Macros">
            <summary>
            Query expressions
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.Params">
            <summary>
            Query parameters.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.IsSubQuery">
            <summary>
            If true, the query is a sub-query used in another query.
            This brings certain constraints such as that it cannot use order by or CTE.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryParameters.IsNested">
            <summary>
            Indicates that this query is nested within another query as its source.
            This brings certain constraints such as that is cannot use CTE.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.#ctor(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="queryText">Query text</param>
            <param name="queryParams">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="transaction">Requires transaction</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.#ctor(CMS.DataEngine.QueryInfo,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryMacros)">
            <summary>
            Constructor.
            </summary>
            <param name="qi">Query info</param>
            <param name="parameters">Query parameters</param>
            <param name="macros">Query expressions</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.#ctor(System.String,System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean,CMS.DataEngine.QueryMacros,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="queryName">Query name in format application.class.queryname</param>
            <param name="queryText">Query text</param>
            <param name="parameters">Query parameters</param>
            <param name="queryType">Query type</param>
            <param name="requiresTransaction">Requires transaction</param>
            <param name="macros">Query expressions</param>
            <param name="connectionStringName">Connection string name</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.ResolveMacros">
            <summary>
            Resolves the query macros in <see cref="P:CMS.DataEngine.QueryParameters.Text"/> property value.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.ResolveMacrosInternal(System.Boolean)">
            <summary>
            Resolves the query macros in <see cref="P:CMS.DataEngine.QueryParameters.Text"/> property value.
            </summary>
            <param name="updateQueryText">If true, the query text is updated with resolved version</param>
            <returns>Resolved query text</returns>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.GetParametersForExecution(System.Boolean,System.Boolean)">
            <summary>
            Gets the query parameters for query execution
            </summary>
            <param name="getTotal">If true, the query is configured to get total number of records when paging is enabled</param>
            <param name="subQuery">If true, the query is used as a sub-query</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.Clone">
            <summary>
            Clones the query parameters
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.FinalizeForExecution(System.Boolean,System.Boolean)">
            <summary>
            Finalizes the given query parameters for execution within SQL connection
            </summary>
            <param name="getTotal">If true, the query is configured to get total number of records when paging is enabled</param>
            <param name="subQuery">If true, the query is used as a sub-query</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.GetFullQueryText(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="parameters">Query parameters. If provided, the data parameters are included into the parameters and query text is altered accordingly</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.GetFullQueryText(System.Boolean,System.Boolean)">
            <summary>
            Gets the full query text including resolved parameters
            </summary>
            <param name="expand">If true, the parameters are expanded with their values, otherwise the parameter names are kept in the query.</param>
            <param name="includeParameters">If true, parameter declarations are included if parameters are not expanded</param>
        </member>
        <member name="M:CMS.DataEngine.QueryParameters.ToString">
            <summary>
            Returns the string representation of the query parameters
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryTypeEnum">
            <summary>
            Query type enumeration.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryTypeEnum.SQLQuery">
            <summary>
            SQL query.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryTypeEnum.StoredProcedure">
            <summary>
            Stored Procedure.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IQueryExpression">
            <summary>
            General interface for the query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQueryExpression.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryExpression">
            <summary>
            Represents a general query expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpression.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpression.#ctor(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Constructor with expression
            </summary>
            <param name="expression">Expression text</param>
            <param name="parameters">Parameters used in <paramref name="expression"/>.</param>
        </member>
        <member name="T:CMS.DataEngine.QueryExpressionBase`1">
            <summary>
            Query expression base class
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QueryExpressionBase`1.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.GetExpression">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.AsValue">
            <summary>
            Gets a query expression representing this object as a value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies all the object properties to the given target class
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.QueryExpressionBase`1.AsColumn(System.String)">
            <summary>
            Creates a column from the given expression
            </summary>
            <param name="alias">Column alias</param>
        </member>
        <member name="T:CMS.DataEngine.QueryValueExpression">
            <summary>
            Query value expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryValueExpression.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QueryValueExpression.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
            <param name="name">Value name</param>
            <param name="expand">If true, expands the value to a constant</param>
        </member>
        <member name="M:CMS.DataEngine.QueryValueExpression.As(System.String)">
            <summary>
            Changes the name of the expression parameter to the given name
            </summary>
            <param name="name">Name for the parameter</param>
        </member>
        <member name="T:CMS.DataEngine.UpdateQueryExpression">
            <summary>
            Provides the values expression for the update query built from the given pairs of column names and respective values (or expressions)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.UpdateQueryExpression.#ctor">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.UpdateQueryExpression"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.UpdateQueryExpression.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.UpdateQueryExpression"/> built from pairs of column / values.
            </summary>
            <param name="values">List of column-value pairs to update</param>
        </member>
        <member name="T:CMS.DataEngine.IMultiObjectQuery`3">
            <summary>
            Multi object query interface for a specific query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IMultiObjectQuery">
            <summary>
            Multi object query interface
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IMultiQuery`2">
            <summary>
            Multi query interface for a specific query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.Type(System.String,System.Action{`1})">
            <summary>
            Includes given type with optional parameters
            </summary>
            <param name="type">Type to include</param>
            <param name="parameters">Action to setup the inner type parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.Types(System.String[])">
            <summary>
            Includes the given types to the resulting query
            </summary>
            <param name="types">Types to include</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumn(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.AddResultColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.ResultOrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.IMultiQuery`2.NoDefaultColumns">
            <summary>
            Sets the query to return no columns at all
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IMultiQuery">
            <summary>
            Multi query interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.SelectResultColumnsList">
            <summary>
            List of columns to use for results, by default returns all columns defined in the inner queries. Example: "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.UseTypeColumns">
            <summary>
            If true (default), the query uses type columns for the output, otherwise it uses only global columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IMultiQuery.OrderByResultColumns">
            <summary>
            List of columns for the result order by. If not specified, the result is ordered by sources and global order by.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MultiObjectQuery">
            <summary>
            Multiple objects query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MultiObjectQueryBase`3">
            <summary>
            Base class for multiple objects query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.TypedResult">
            <summary>
            Typed result
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.UseObjectTypeCondition">
            <summary>
            If true, the query uses the object type condition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.GetEnumerableTypedResult(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Gets enumerable collection of <typeparamref name="TObject"/> representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <returns>Returns the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.GetEnumerableTypedResultAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets enumerable collection of <typeparamref name="TObject"/> representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.EnsureTypedResult">
            <summary>
            Ensures that the result is strongly typed, and returns the result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.InitTypedResult(CMS.DataEngine.InfoDataSet{`2})">
            <summary>
            Initializes the typed result
            </summary>
            <param name="typedResult">Result</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.CreateQuery(System.String)">
            <summary>
            Creates query for the given type
            </summary>
            <param name="type">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.NewDataSet">
            <summary>
            Creates a new DataSet for the query results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ApplyProperties(CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Applies main query properties to the given query to ensure synchronized state before execution
            </summary>
            <param name="query">Query to prepare</param>
            <param name="multiQuery">If true, the query is an inner query within multi-query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.AsNested">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ModifyAllInnerQueries(System.Action{`1})">
            <summary>
            Modifies all inner queries with the given parameters
            </summary>
            <param name="p">Parameters for inner queries</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ModifySingleInnerQuery(System.Action{`1})">
            <summary>
            Modifies single inner query with the given parameters. Operation is not supported if multi query doesn't represent a single query source
            </summary>
            <param name="p">Parameters for inner query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.OnlyGlobal">
            <summary>
            Filters the data to include only global objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.ExceptGlobal">
            <summary>
            Filters the data to include only site objects, but not global objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.OnSite(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Filters the data to include only records on the given site. If site binding is defined, filters the global objects by the site ID
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">If true, includes the global objects in case the object type covers both site and global objects</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithID(System.Int32)">
            <summary>
            Sets the where condition for a specific object ID
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithCodeName(System.String)">
            <summary>
            Sets the where condition for a specific object code name
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithGuid(System.Guid)">
            <summary>
            Sets the where condition for a specific object GUID
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.WithObjectType(System.String)">
            <summary>
            Changes the query to use the given object type. Applies the object type condition to the query. The new object type must have the same class name as the original one.
            </summary>
            <param name="objectType">Object type for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.GetObjectType(System.Boolean)">
            <summary>
            Returns object type of objects returned by this query
            </summary>
            <param name="throwException">Throws exception when object type cannot be obtained
            because multi query that doesn't represent a single query</param>
            <exception cref="T:System.NotSupportedException">When throwException is true and  multi query that doesn't represent a single query.</exception>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.GetEnumerator">
            <summary>
            Gets the typed enumerator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.Expression">
            <summary>
            Query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.Provider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiObjectQueryBase`3.IsOffline">
            <summary>
            Returns true if the given collection is offline (disconnected from the database)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiObjectQueryBase`3.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="T:CMS.DataEngine.MultiQueryBase`2">
            <summary>
            Base class for the query consisting of multiple queries
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MultiQueryBase`2.mUseTypeColumns">
            <summary>
            Defines if type columns should be retrieved. If null, they are included if particular types were explicitly requested.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.MultiQueryBase`2.mUseDefaultQuery">
            <summary>
            Defines how default query can be used. If null, the default query is forced in case typed columns are explicitly not allowed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.Queries">
            <summary>
            Inner queries. Can be used to search for specific query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.QueriesList">
            <summary>
            Inner queries list. Defines order of the queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.DefaultQuery">
            <summary>
            Default query used by the process when type queries are not used.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.UseDefaultQuery">
            <summary>
            Flag indicating if the default query should be forcibly used. Default false. This flag is automatically reverted to false in case initializer of particular type query is used through Type("sometype", q => q.Where(...)).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.UseTypeColumns">
            <summary>
            If true (default), the query uses type columns for the output, otherwise it uses only global columns
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.DefaultOrderByType">
            <summary>
            If true, the result is ordered by source type by default, then by source order. If false (default), the result is ordered by the source order, and items from different types may interleave.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.UseGlobalWhereOnResult">
            <summary>
            If true, the global where condition from the parent query is used outside the inner queries on the whole result. If false (default), the global where condition is used inside individual inner queries.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.SelectResultColumnsList">
            <summary>
            List of columns to use for results, by default returns all columns defined in the inner queries. Example: "DocumentName, DocumentID"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.OrderByResultColumns">
            <summary>
            List of columns for the result order by. If not specified, the result is ordered by sources and global order by.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.ReturnsSingleColumn">
            <summary>
            Returns true if the query returns single column
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MultiQueryBase`2.SelectedTypes">
            <summary>
            Returns the types of the inner queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureQueries(System.String[])">
            <summary>
            Ensures the queries for the given types
            </summary>
            <param name="types">Types to ensure</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureQueries(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Ensures the queries for the given types
            </summary>
            <param name="types">Types to ensure</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureQuery(System.String)">
            <summary>
            Ensures the query with the given type
            </summary>
            <param name="type">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResolveType(System.String)">
            <summary>
            Resolves the given type into corresponding types
            </summary>
            <param name="type">Source type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.CreateQuery(System.String)">
            <summary>
            Creates query for the given type
            </summary>
            <param name="type">Query type</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.SetClassName(System.String)">
            <summary>
            Sets class name for current query
            </summary>
            <param name="value">New class name value</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.IsQuerySourceUsed">
            <summary>
            Returns true if the query has defined QuerySource
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetCompleteSettings(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the complete parameters for the query execution
            </summary>
            <param name="executingQuery">Executing query for which the parameters are retrieved</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetGlobalSettings">
            <summary>
            Gets the global settings for the query execution
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetQueriesForMultiQuery">
            <summary>
            Gets the list of queries for multi query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetDefaultSource">
            <summary>
            Gets the default source
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetMultiQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets a multi-query for execution
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.BuildMultiQueryFrom(System.Collections.Generic.List{`1},CMS.DataEngine.DataQuerySettings)">
            <summary>
            Builds a multi-query from the given list of queries
            </summary>
            <param name="queries">List of queries</param>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.SynchronizeColumnLists(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Synchronizes the column lists in the given list of queries
            </summary>
            <param name="queries">Queries</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.EnsureTotalFromSubTotals(CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Ensures that the total number of records is generated from sub-totals if paging is enabled
            </summary>
            <param name="query">Result query</param>
            <param name="singleQuery">If true, the query is a single query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetSingleInnerQuery">
            <summary>
            Attempts to get a single query if multi-query is defined only by a single query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetSingleQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Attempts to get a single query for the whole result based on the current state of the query object
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.CloneInnerQuery(`1)">
            <summary>
            Makes a clone of the inner query
            </summary>
            <param name="query">Query to clone</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.NewDataParameters">
            <summary>
            Creates new data parameters for query execution
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetTypesWhereCondition(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the where condition which filters the default query data for specific types
            </summary>
            <param name="types">List of types for which create the where condition</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.NewDataSet">
            <summary>
            Creates a new DataSet for the query results
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.PrepareInnerMultiQuery(`1,System.Boolean)">
            <summary>
            Prepares the inner query for execution within multi query
            </summary>
            <param name="query">Query to prepare</param>
            <param name="expandColumns">If true, query columns will be expanded</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ApplyGlobalParameters(`1,CMS.DataEngine.DataQuerySettings,System.Boolean)">
            <summary>
            Applies global parameters to a single inner query
            </summary>
            <param name="query">Inner query</param>
            <param name="settings">Parameters for the query</param>
            <param name="includeParameters">If true, the parameters are also included into the query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddColumnsToQuery(`1,CMS.DataEngine.QueryColumnList)">
            <summary>
            Add columns to the query.
            </summary>
            <param name="query">Query where columns will be added</param>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetAvailableColumns">
            <summary>
            Gets the list of all available columns for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AsSubQuery">
            <summary>
            Modifies the query to be able to be used as a sub-query, e.g. for usage in WHERE A IN ([query]). Ensures single column result, and removes order by from the result.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AsSingleColumn(System.String,System.Boolean)">
            <summary>
            Creates a single column query from the given query
            </summary>
            <param name="defaultColumn">Specific column to use in case query doesn't return single column yet</param>
            <param name="forceColumn">If true, the given column is forced to the output</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.GetDefaultSingleColumn">
            <summary>
            Gets the default single column for the query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Copies the properties to the target query.
            </summary>
            <param name="target">Target query</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.WithSource(CMS.DataEngine.DataQuerySource)">
            <summary>
            Sets the given source as the source of the data query
            </summary>
            <param name="source">Data query source</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.Type(System.String,System.Action{`1})">
            <summary>
            Includes given type with optional parameters.
            When additional parameters are specified, the query always executes using sub-queries for individual types.
            If only type is specified, the query allows usage of the default query and additional data from sub-queries may not be included.
            </summary>
            <param name="type">Type to include</param>
            <param name="parameters">Action to setup the inner type parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.Types(System.String[])">
            <summary>
            Includes the given types to the resulting query
            </summary>
            <param name="types">Types to include</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumn(System.String)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Sets the column to select
            </summary>
            <param name="column">Column to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumns(System.String[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Sets the columns to select
            </summary>
            <param name="columns">Columns to set to be selected</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumn(CMS.DataEngine.IQueryColumn)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumns(CMS.DataEngine.IQueryColumn[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumn(System.String)">
            <summary>
            Adds the additional column to the query
            </summary>
            <param name="column">Column to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.AddResultColumns(System.String[])">
            <summary>
            Adds the additional columns to the query
            </summary>
            <param name="columns">Columns to add</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderBy(System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderByDescending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in descending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderByAscending(System.String[])">
            <summary>
            Adds the columns to the order by query to order by the given columns in ascending order
            </summary>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.ResultOrderBy(CMS.DataEngine.OrderDirection,System.String[])">
            <summary>
            Adds the columns to the order by query
            </summary>
            <param name="dir">Order direction</param>
            <param name="columns">Columns to add to order by</param>
        </member>
        <member name="M:CMS.DataEngine.MultiQueryBase`2.NoDefaultColumns">
            <summary>
            Sets the query to return no columns at all
            </summary>
        </member>
        <member name="T:CMS.DataEngine.UseDefaultQueryEnum">
            <summary>
            Enumeration of the default query usage options
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UseDefaultQueryEnum.Allowed">
            <summary>
            Default query is allowed to be used if necessary
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UseDefaultQueryEnum.Force">
            <summary>
            Default query should be explicitly used
            </summary>
        </member>
        <member name="F:CMS.DataEngine.UseDefaultQueryEnum.NotAllowed">
            <summary>
            Default query should never be used
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClassNameExecutingQueryProvider">
            <summary>
            Provider returns query based on object class name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassNameExecutingQueryProvider.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.ClassNameExecutingQueryProvider"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassNameExecutingQueryProvider.GetExecutionQuery">
            <summary>
            Returns executing query as <see cref="T:CMS.DataEngine.IDataQuery"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ClassNameExecutingQueryProvider.Refresh(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Refreshes the underlying data affecting the query retrieval
            </summary>
            <param name="typeInfo">Type info holding all necessary data</param>
        </member>
        <member name="T:CMS.DataEngine.IDQuery`1">
            <summary>
            Predefined query returning IDs of the given object type, can be used as a nested query in IN and NOT IN statements
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDQuery`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resultColumn">Resulting column</param>
        </member>
        <member name="T:CMS.DataEngine.IDQuery">
            <summary>
            Predefined query returning IDs of the given object type, can be used as a nested query in IN and NOT IN statements
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IDQuery.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="resultColumn">Resulting column</param>
            <param name="useObjectTypeCondition">If true, the query uses the object type condition. The condition applies only when object type is specified.</param>
        </member>
        <member name="T:CMS.DataEngine.IExecutingQueryProvider">
            <summary>
            Allows possibility to change the execution chain of <see cref="T:CMS.DataEngine.ObjectQuery"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IExecutingQueryProvider.GetExecutionQuery">
            <summary>
            Returns execution query as <see cref="T:CMS.DataEngine.IDataQuery"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IExecutingQueryProvider.Refresh(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Refreshes the underlying data affecting the query retrieval
            </summary>
            <param name="typeInfo">Type info holding all necessary data</param>
        </member>
        <member name="T:CMS.DataEngine.InfoObjectExecutingQueryProvider">
            <summary>
            Provider returns query obtained via <see cref="T:CMS.DataEngine.BaseInfo"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectExecutingQueryProvider.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.DataEngine.InfoObjectExecutingQueryProvider"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectExecutingQueryProvider.GetExecutionQuery">
            <summary>
            Returns executing query as <see cref="T:CMS.DataEngine.IDataQuery"/>
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InfoObjectExecutingQueryProvider.Refresh(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Refreshes the underlying data affecting the query retrieval
            </summary>
            <param name="typeInfo">Type info holding all necessary data</param>
        </member>
        <member name="T:CMS.DataEngine.IObjectQuery`2">
            <summary>
            Interface for the object query for a specific query type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectQuery`2.TypedResult">
            <summary>
            Typed result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.GetEnumerableTypedResult(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Gets enumerable collection of <typeparamref name="TObject"/> representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <returns>Returns the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support this method. Use <see cref="P:CMS.DataEngine.IObjectQuery`2.TypedResult"/> instead.</exception>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.GetEnumerableTypedResultAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets enumerable collection of <typeparamref name="TObject"/> representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support this method. Use <see cref="P:CMS.DataEngine.IObjectQuery`2.TypedResult"/> instead.</exception>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.OnlyGlobal">
            <summary>
            Filters the data to include only global objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.ExceptGlobal">
            <summary>
            Filters the data to include only site objects, but not global objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.OnSite(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Filters the data to include only records on the given site. If site binding is defined, filters the global objects by the site ID
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">If true, includes the global objects in case the object type covers both site and global objects</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithID(System.Int32)">
            <summary>
            Sets the where condition for a specific object ID
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithCodeName(System.String)">
            <summary>
            Sets the where condition for a specific object code name
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithGuid(System.Guid)">
            <summary>
            Sets the where condition for a specific object GUID
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.WithObjectType(System.String)">
            <summary>
            Changes the query to use the given object type. Applies the object type condition to the query. The new object type must have the same class name as the original one.
            </summary>
            <param name="objectType">Object type for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IObjectQuery`2.AsNested">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="T:CMS.DataEngine.IObjectQuery">
            <summary>
            Interface for the object query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectQuery.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IObjectQuery.UseObjectTypeCondition">
            <summary>
            If true, the query uses the object type condition.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ObjectQuery`1">
            <summary>
            Queries particular database data or defines parameters for data selection
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery`1.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="useObjectTypeCondition">If true, the query uses the object type condition. The condition applies only when object type is specified.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery`1.op_Explicit(CMS.DataEngine.ObjectQuery{`0})~CMS.DataEngine.InfoDataSet{`0}">
            <summary>
            Operator for conversion from typed ObjectQuery class to typed InfoDataSet
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectQuery">
            <summary>
            Predefined query returning given object type. Uses the .selectall query internally.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQuery.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
            <param name="useObjectTypeCondition">If true, the query uses the object type condition. The condition applies only when object type is specified.</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectQueryBase`2">
            <summary>
            Predefined query returning given object type. Uses the .selectall query internally.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectQueryBase`2.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectQueryBase`2.mObject">
            <summary>
            Object instance of specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Name">
            <summary>
            Object name, empty by default
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.UseObjectQuery">
            <summary>
            If true, the object query is used as default, otherwise, standard DataQuery is used
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.UseObjectTypeCondition">
            <summary>
            If true, the query uses the object type condition.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.TypeUpdated">
            <summary>
            Updates the query class name based on the current status
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.TypeInfo">
            <summary>
            Type info of the specified type
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.TypedResult">
            <summary>
            Gets <see cref="T:CMS.DataEngine.InfoDataSet`1"/> representing the result of this query.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.ExecutingQueryProvider">
            <summary>
            Gets or sets the provider of executing query
            </summary>
            <remarks>
            By default returns <see cref="T:CMS.DataEngine.InfoObjectExecutingQueryProvider"/>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.InitFromType``1">
            <summary>
            Initializes the query from the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.NewEmptyQuery">
            <summary>
            Creates a new empty query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.EnsureTypedResult">
            <summary>
            Ensures that the result is strongly typed, and returns the result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.InitTypedResult(CMS.DataEngine.InfoDataSet{`1})">
            <summary>
            Initializes the typed result
            </summary>
            <param name="typedResult">Result</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.InitIDQuery(System.String)">
            <summary>
            Initializes the ID query
            </summary>
            <param name="resultColumn">Resulting column</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetDataSourceName">
            <summary>
            Gets the unique query source ID
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetSourceQuery">
            <summary>
            Gets the query that provides the source of data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetExecutingQuery(CMS.DataEngine.DataQuerySettings)">
            <summary>
            Gets the query to execute against database
            </summary>
            <param name="settings">Parameters for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetEnumerableTypedResult(System.Data.CommandBehavior,System.Boolean)">
            <summary>
            Gets enumerable collection of <typeparamref name="TObject"/> representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <returns>Returns the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetEnumerableTypedResultAsync(System.Data.CommandBehavior,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets enumerable collection of <typeparamref name="TObject"/> representing the result of this query.
            </summary>
            <param name="commandBehavior">Command behavior for the underlying reader.</param>
            <param name="newConnection">If true, the underlying reader will be executed using its own dedicated connection.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning the enumeration resulting from query execution.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when the query does not support reader.</exception>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetResults(CMS.DataEngine.IDataQuery,System.Int32@)">
            <summary>
            Gets results from executing query
            </summary>
            <param name="query">Executing query</param>
            <param name="totalRecords">Returns the total records number</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetData">
            <summary>
            Gets data set returned by object query or custom data set. Data set can be modified by calling ObjectEvents.GetData event.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Creates the clone of the collection.
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.ForEachObject(System.Action{`1},System.Int32)">
            <summary>
            Executes the given action for each item (TObject) in the result. Processes the items in batches of the given size.
            </summary>
            <param name="objAction">Object action</param>
            <param name="batchSize">Batch size. 0 means no batch processing. By default uses current paging settings.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetClassStructureInfo">
            <summary>
            Gets the class structure info for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetClassName">
            <summary>
            Gets the class name for current query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetDefaultOrderBy">
            <summary>
            Gets the default order by columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetIDColumn">
            <summary>
            Gets the ID column for this query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.AsNested">
            <summary>
            Creates a nested query from the given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.OnlyGlobal">
            <summary>
            Filters the data to include only global objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.ExceptGlobal">
            <summary>
            Filters the data to include only site objects, but not global objects
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.OnSite(CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Filters the data to include only records on the given site. If site binding is defined, filters the global objects by the site ID
            </summary>
            <param name="siteIdentifier">Site identifier</param>
            <param name="includeGlobal">If true, includes the global objects in case the object type covers both site and global objects</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithID(System.Int32)">
            <summary>
            Sets the where condition for a specific object ID
            </summary>
            <param name="objectId">Object ID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithCodeName(System.String)">
            <summary>
            Sets the where condition for a specific object code name
            </summary>
            <param name="codeName">Code name</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithGuid(System.Guid)">
            <summary>
            Sets the where condition for a specific object GUID
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithSource(`1[])">
            <summary>
            Sets the given DataSet as the source of the data query
            </summary>
            <param name="items">Source items</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.WithObjectType(System.String)">
            <summary>
            Changes the query to use the given object type. Applies the object type condition to the query. The new object type must have the same class name as the original one.
            </summary>
            <param name="objectType">Object type for the query</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the query results.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the query results.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.ElementType">
            <summary>
            Returns the element type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Expression">
            <summary>
            Query expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.Provider">
            <summary>
            Query provider
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectQueryBase`2.IsOffline">
            <summary>
            Returns true if the given collection is offline (disconnected from the database)
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.CreateChild(CMS.DataEngine.IDataQuerySettings)">
            <summary>
            Creates the child collection based on the given provider
            </summary>
            <param name="settings">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectQueryBase`2.op_Explicit(CMS.DataEngine.ObjectQueryBase{`0,`1})~CMS.DataEngine.InfoDataSet{`1}">
            <summary>
            Implicit operator for conversion from DataQuery class to DataSet
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="T:CMS.DataEngine.OrderByColumnList">
            <summary>
            Represents list of OrderBy columns
            </summary>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumnList.#ctor(System.String)">
            <summary>
            Creates an empty column list built from the given columns
            </summary>
            <param name="columns">List of columns</param>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumnList.Load(System.String)">
            <summary>
            Loads the given columns to the list
            </summary>
            <param name="columns">Lists of columns separated by commas</param>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumnList.AddColumnInternal(System.String)">
            <summary>
            Adds column into list
            </summary>
            <param name="column">column expression including name of the column with ASC or DESC expression</param>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumnList.GetDirection(System.String)">
            <summary>
            Translates string direction value to enum-based value
            </summary>
            <param name="direction">string direction (ASC or DESC)</param>
            <returns>Enum direction representation</returns>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumnList.FilterOrderByColumns(CMS.DataEngine.QueryColumnList)">
            <summary>
            Removes from the order by columns those not present in select columns. For the purposes of nested distinct queries.
            </summary>
            <param name="selectColumns">Columns returned by the nested query.</param>
        </member>
        <member name="M:CMS.DataEngine.OrderByColumnList.TranslateAliases(CMS.DataEngine.QueryColumnList)">
            <summary>
            Translates order column alias for real column name for given select columns
            </summary>
            <param name="selectColumnsList">Select query columns holding name and alias column names</param>
        </member>
        <member name="T:CMS.DataEngine.Query.QueryBatch">
            <summary>
            Represents a batch of <see cref="T:CMS.DataEngine.IDataQuery" /> queries which are executed within a single database call.
            Queries are grouped by their connection strings, and each such group is executed as a single batch.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryBatch.#ctor(System.Collections.Generic.IEnumerable{CMS.DataEngine.IDataQuery})">
            <summary>
            Constructor, creates the batch from given queries
            </summary>
            <param name="queries">List of queries to batch</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryBatch.Execute">
            <summary>
            Executes the batch
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryBatch.GetGroupedQueries">
            <summary>
            Gets the queries to execute the batch grouped by connection string
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryBatch.BuildBatchQuery(System.Collections.Generic.IEnumerable{CMS.DataEngine.IDataQuery},System.String)">
            <summary>
            Builds a batch query from the given list of queries
            </summary>
            <param name="queries">Queries to batch</param>
            <param name="connectionStringName">Connection string under which the resulting query should execute</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryBatch.GetFullQueryText">
            <summary>
            Returns the full query text of the query for debug purposes
            </summary>
        </member>
        <member name="T:CMS.DataEngine.Query.QueryExtensions">
            <summary>
            Extensions to easily convert values to queries
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsColumn(System.String)">
            <summary>
            Converts string to a query column which can be used in a query
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsValue``1(``0,System.Boolean)">
            <summary>
            Converts object to a query value which can be used as a query parameter
            </summary>
            <param name="value">Value</param>
            <param name="expand">If true, the value expands as constant</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsExpression(System.String)">
            <summary>
            Converts string to a query expression which can be used in a query
            </summary>
            <param name="expression">Expression</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.AsLiteral``1(``0)">
            <summary>
            Converts value to a literal value which can be used in a query
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.GetFinalExecutingQuery(CMS.DataEngine.IDataQuery)">
            <summary>
            Gets the final executing query for a given query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.SetUpdateQueryValues(CMS.DataEngine.IDataQuery,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Sets values in update query to the given set of values
            </summary>
            <param name="query">Data query</param>
            <param name="values">Values for the data. Dictionary of [columnName] => [value]</param>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.GetCount``1(CMS.DataEngine.ObjectQuery{``0})">
            <summary>
            Gets the number of items which returns given object query.
            </summary>
            <typeparam name="TInfo">Info object type</typeparam>
            <param name="objectQuery">Object query</param>
            <returns>Number of items.</returns>
        </member>
        <member name="M:CMS.DataEngine.Query.QueryExtensions.EnsureDataSet``1(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Ensures <see cref="P:CMS.DataEngine.QueryDataParameters.FillDataSet"/> property for given <typeparamref name="TInfo"/>.
            </summary>
            <param name="parameters"><see cref="T:CMS.DataEngine.QueryDataParameters"/> object</param>
            <typeparam name="TInfo">Info object type</typeparam>
        </member>
        <member name="T:CMS.DataEngine.SelectCondition">
            <summary>
            Provides the selection where condition for ABC IN (1, 2, 3, 4, 5, ...) for very large number of items.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.ALL_INLINE">
            <summary>
            Constant for Inline limit property defining that all items should be processed inline
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.ALL_TABLE_VALUED_PARAMETER">
            <summary>
            Constant for Inline limit property defining that all items should be processed as table-valued parameter.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mInlineLimit">
            <summary>
            Limit of the number of items for the inline evaluation.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mWhereCondition">
            <summary>
            Where condition.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mGroupGUID">
            <summary>
            Group GUID for the temp table.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SelectCondition.mParameters">
            <summary>
            Query parameters.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectCondition.WhereCondition">
            <summary>
            Returns the resulting where condition.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectCondition.IsEmpty">
            <summary>
            Returns true if the selection is empty.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SelectCondition.InlineLimit">
            <summary>
            Limit of the number of items for the inline evaluation.
            
            If there are more items than this limit, the where condition is returned in format:
            ColumnName IN (SELECT * FROM @List)), where @List is of the following SQL user-defined table types: Type_CMS_IntegerTable, Type_CMS_BigIntTable, Type_CMS_StringTable, Type_CMS_GuidTable
            
            Otherwise, inline format is used:
            ColumnName IN (Value1, Value2, ...)
            
            If set to -1, inline format is always used.
            </summary>
            <remarks>The default value depends on CMSDefaultSQLInlineLimit setting, which has a default value of 1000.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.#ctor">
            <summary>
            Constructor, prepares empty condition object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.#ctor(CMS.DataEngine.QueryDataParameters)">
            <summary>
            Constructor, prepares empty condition object bound to specific query parameters.
            </summary>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.PrepareCondition``1(System.String,System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>
            Prepares the select condition for specific value types
            </summary>
            <typeparam name="T">Method will prepare the condition over <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/> or <see cref="T:System.Guid"/>.</typeparam>
            <remarks>
            Null values are ignored.
            </remarks>
            <param name="columnName">Column name</param>
            <param name="values">Values for the IN expression</param>
            <param name="negation">Indicates if the negation should be used in the condition (Column NOT IN (1, 2, 3 ...))</param>
            <remarks>If <paramref name="values"></paramref> contains only one item, WhereEquals condition is used</remarks>
            <exception cref="T:System.NotSupportedException">Thrown when unsupported value type is used.</exception>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.PrepareParameter``1(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord})">
            <summary>
            Prepares a query parameter with unique name.
            </summary>
            <param name="values">Rows to insert to the table-valued parameter</param>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.Dispose">
            <summary>
            Disposes the object and removes the selection from the database if it was allocated in the temp table.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SelectCondition.PrepareWhereCondition``1(System.String,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Server.SqlDataRecord},System.Boolean)">
            <summary>
            Prepares the where condition for the given list.
            </summary>
            <param name="columnName">Column name for the where condition</param>
            <param name="values">Distinct values for the where condition</param>
            <param name="negation">Indicates if the negation should be used in the condition (ABC NOT IN (1, 2, 3 ...))</param>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySource">
            <summary>
            Base class for Data query source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.DATABASE_PREFIX">
            <summary>
            Specifies database as a source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.MEMORY_PREFIX">
            <summary>
            Specifies memory as a source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.MATERIALIZED">
            <summary>
            Specifies source for a materialized query within a database
            </summary>
        </member>
        <member name="F:CMS.DataEngine.DataQuerySource.CMSDATABASE">
            <summary>
            Specifies default CMS database as a source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySource.DataSourceName">
            <summary>
            Data source identifier.
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query. 
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySource.ConnectionStringName">
            <summary>
            Connection string name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetDataSourceName">
            <summary>
            Gets data source identifier.
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query. 
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetConnectionStringName">
            <summary>
            Gets the connection string name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetData(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Gets the data for data query
            </summary>
            <param name="parameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySource.GetCount(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Returns the number of rows in the result queried by this data source if GetData is called with the same parameters
            </summary>
            <param name="parameters">Source parameters</param>
        </member>
        <member name="T:CMS.DataEngine.DataQuerySourceParameters">
            <summary>
            Parameters for the data query source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.Query">
            <summary>
            Executing query
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.Settings">
            <summary>
            Query parameters
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.Offset">
            <summary>
            Offset of the first record to retrieve
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.MaxRecords">
            <summary>
            Max records to retrieve
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataQuerySourceParameters.TotalRecords">
            <summary>
            Returns total records
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySourceParameters.#ctor(CMS.DataEngine.IDataQuery,CMS.DataEngine.DataQuerySettings,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="query">Data query</param>
            <param name="settings">Query parameters</param>
            <param name="offset">Offset of the first record to retrieve</param>
            <param name="maxRecords">Max records to retrieve</param>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySourceParameters.ToString">
            <summary>
            Gets the string representation of the where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataQuerySourceParameters.GetPart(System.String,System.Object)">
            <summary>
            Gets the part of the string representation
            </summary>
            <param name="name">Name</param>
            <param name="value">Value</param>
        </member>
        <member name="T:CMS.DataEngine.IQuerySource">
            <summary>
            Query source interface
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IQuerySource.SourceExpression">
            <summary>
            Source expression
            </summary>
        </member>
        <member name="T:CMS.DataEngine.JoinTypeEnum">
            <summary>
            Join type enumeration
            </summary>
        </member>
        <member name="F:CMS.DataEngine.JoinTypeEnum.Inner">
            <summary>
            Inner join
            </summary>
        </member>
        <member name="F:CMS.DataEngine.JoinTypeEnum.LeftOuter">
            <summary>
            Left outer join
            </summary>
        </member>
        <member name="F:CMS.DataEngine.JoinTypeEnum.RightOuter">
            <summary>
            Right outer join
            </summary>
        </member>
        <member name="T:CMS.DataEngine.MemoryDataQuerySource">
            <summary>
            Data query source as DataSet
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MemoryDataQuerySource.SourceData">
            <summary>
            Source data
            </summary>
        </member>
        <member name="P:CMS.DataEngine.MemoryDataQuerySource.DataSourceName">
            <summary>
            Data source identifier.
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query.
            If name is not set, new name is generated. Generated name is not cached, MemoryDataQuerySource must always be non-compatible even with the same instance. 
            For more information <see cref="M:CMS.DataEngine.DataQueryBase`1.HasCompatibleSource(CMS.DataEngine.IDataQuery)"/> method.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.MemoryDataQuerySource.GetSourceData">
            <summary>
            Function to dynamically get the source data at the given moment
            </summary>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.#ctor(System.Data.DataSet)">
            <summary>
            Constructor
            </summary>
            <param name="sourceData">Source data</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.#ctor(System.Func{System.Data.DataSet})">
            <summary>
            Constructor
            </summary>
            <param name="getSourceData">Function to dynamically get the source data at the given moment</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.GetDataSourceName">
            <summary>
            Gets data source identifier. 
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query.
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.GetData(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Executes the query
            </summary>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.GetCount(CMS.DataEngine.DataQuerySourceParameters)">
            <summary>
            Returns the number of rows in the result queried by this data source if GetData is called with the same parameters
            </summary>
            <param name="parameters">Source parameters</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.FixWhere(System.String)">
            <summary>
            Fixes the where condition to be able to be used with DataTable select
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.MemoryDataQuerySource.FilterColumns(System.Data.DataView,System.String,System.Boolean,System.String[])">
            <summary>
            Filters columns in given data view. Supports column aliases (ClassID AS ID).
            </summary>
            <returns>Data table with subset of columns.</returns>
        </member>
        <member name="T:CMS.DataEngine.ObjectSource`1">
            <summary>
            Data query source which gets the data for specific object type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSource`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSource`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.DataEngine.ObjectSourceBase`1">
            <summary>
            Query source
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSourceBase`1.mObjectType">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.ObjectSourceBase`1.mObject">
            <summary>
            Object instance of specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSourceBase`1.ObjectType">
            <summary>
            Returns the object type of the objects stored within the collection.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSourceBase`1.Object">
            <summary>
            Object instance of the specified type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ObjectSourceBase`1.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.InitFromType``1">
            <summary>
            Initializes the query from the given type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.TypeUpdated">
            <summary>
            Updates the query class name based on the current status
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.TranslateSource(CMS.DataEngine.QuerySourceTable)">
            <summary>
            Translates the source to the final query expression
            </summary>
            <param name="source">Source table</param>
        </member>
        <member name="M:CMS.DataEngine.ObjectSourceBase`1.GetTableName(System.String)">
            <summary>
            Gets the table name for the given class name
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="T:CMS.DataEngine.QuerySource">
            <summary>
            Data query source which gets the data from specific SQL expression. That can be table name, view name, or more complex SQL expression.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySource.#ctor(CMS.DataEngine.QuerySourceTable)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source table</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySource.op_Implicit(System.String)~CMS.DataEngine.QuerySource">
            <summary>
            Implicit operator for conversion from string to query source
            </summary>
            <param name="expression">Source expression</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySource.op_Implicit(CMS.DataEngine.QuerySourceTable)~CMS.DataEngine.QuerySource">
            <summary>
            Implicit operator for conversion from source table to query source
            </summary>
            <param name="sourceTable">Source table</param>
        </member>
        <member name="T:CMS.DataEngine.QuerySourceBase`1">
            <summary>
            Defines base class for the query source
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceBase`1.SourceExpression">
            <summary>
            Source expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceBase`1.LeftSourceName">
            <summary>
            Left source name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceBase`1.RightSourceName">
            <summary>
            Left source name
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.#ctor(CMS.DataEngine.QuerySourceTable)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source table</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.TranslateSource(CMS.DataEngine.QuerySourceTable)">
            <summary>
            Translates the source to the final query expression
            </summary>
            <param name="source">Source table</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.GetJoinCondition(System.String,System.String)">
            <summary>
            Gets the join condition for the given columns
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.GetSourceExpression(CMS.DataEngine.QueryDataParameters,System.Boolean)">
            <summary>
            Gets the source expression represented as string
            </summary>
            <param name="parameters">Query parameters. If provided, the column parameters are included into the parameters and column expression is altered accordingly</param>
            <param name="expand">If true, the result expression is expanded with parameters</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join(CMS.DataEngine.QuerySourceTable,CMS.DataEngine.IWhereCondition,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="condition">Join condition</param>
            <param name="joinType">Type of the join</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join(CMS.DataEngine.QuerySourceTable,System.String,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="condition">Join condition</param>
            <param name="joinType">Type of the join</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join(CMS.DataEngine.QuerySourceTable,System.String,System.String,CMS.DataEngine.IWhereCondition,CMS.DataEngine.JoinTypeEnum)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
            <param name="joinType">Type of the join</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin(System.String,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin(System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin(CMS.DataEngine.QuerySourceTable,System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin(CMS.DataEngine.QuerySourceTable,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin(CMS.DataEngine.QuerySourceTable,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin(CMS.DataEngine.QuerySourceTable,System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin(CMS.DataEngine.QuerySourceTable,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin(CMS.DataEngine.QuerySourceTable,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="condition">Join condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin(CMS.DataEngine.QuerySourceTable,System.String,System.String)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="source">Source table</param>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.Join``1(System.String,System.String,CMS.DataEngine.JoinTypeEnum,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="joinType">Type of the join</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.LeftJoin``1(System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.RightJoin``1(System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.InnerJoin``1(System.String,System.String,CMS.DataEngine.IWhereCondition)">
            <summary>
            Joins the given source with another
            </summary>
            <param name="leftColumn">Left column</param>
            <param name="rightColumn">Right column</param>
            <param name="additionalCondition">Additional JOIN condition, this will be added with AND operator to the base condition</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.op_Implicit(CMS.DataEngine.QuerySourceBase{`0})~System.String">
            <summary>
            Implicit operator for conversion from query source to string expression
            </summary>
            <param name="source">Source object</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceBase`1.op_Implicit(CMS.DataEngine.QuerySourceBase{`0})~CMS.DataEngine.QuerySourceTable">
            <summary>
            Implicit operator for conversion from query source to query source table expression
            </summary>
            <param name="source">Source object</param>
        </member>
        <member name="T:CMS.DataEngine.QuerySourceTable">
            <summary>
            Defines the query source table (or view) with optional alias and hints.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceTable.Expression">
            <summary>
            Table name or expression
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceTable.Alias">
            <summary>
            Optional table alias
            </summary>
        </member>
        <member name="P:CMS.DataEngine.QuerySourceTable.Hints">
            <summary>
            Table hints
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceTable.#ctor(System.String,System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="sourceExpression">Source expression</param>
            <param name="sourceAlias">Source alias</param>
            <param name="hints">Hints</param>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceTable.GetFullExpression">
            <summary>
            Gets the full query source table expression made from the configured components
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceTable.GetName">
            <summary>
            Gets the source name, either alias or the expression
            </summary>
        </member>
        <member name="M:CMS.DataEngine.QuerySourceTable.op_Implicit(System.String)~CMS.DataEngine.QuerySourceTable">
            <summary>
            Implicit conversion from the given expression (as table name) to query source table
            </summary>
            <param name="sourceExpression">Source expression</param>
        </member>
        <member name="T:CMS.DataEngine.IWhereCondition`1">
            <summary>
            Interface for classes which provide where condition for a specific query type
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.And">
            <summary>
            Changes the where operator to AND for subsequent where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.And(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the AND operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.And(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the AND operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Or">
            <summary>
            Changes the where operator to OR for next where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Or(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the OR operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Or(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the OR operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotNull(System.String)">
            <summary>
            Adds the where condition for a not null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereEmpty(System.String)">
            <summary>
            Adds the where condition for a null or empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotEmpty(System.String)">
            <summary>
            Adds the where condition for a non empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNull(System.String)">
            <summary>
            Adds the where condition for a null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereTrue(System.String)">
            <summary>
            Adds the where condition for a true column value (boolean column equals true).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereFalse(System.String)">
            <summary>
            Adds the where condition for a false column value (boolean column equals false).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with EXISTS and the nested query "EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with NOT EXISTS and the nested query "NOT EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given where conditions to the query
            </summary>
            <param name="conditions">Nested where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNot(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the negation of the given where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.NewWhere">
            <summary>
            Clears the current where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.NoResults">
            <summary>
            Sets the where condition to exclude all data from result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Adds the given where condition to the query
            </summary>
            <param name="where">Where condition</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.Where(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Adds the given where condition to the query. Matches the column value with an unary operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereEqualsOrNull(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value or null value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereNotLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using NOT LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition`1.WhereID(System.String,System.Int32)">
            <summary>
            Adds the where condition to match the ID to the query. In case the column name is not provided or unknown, does not generate where condition. If given ID is invalid, adds the condition to match NULL.
            </summary>
            <param name="columnName">Column name</param>
            <param name="id">ID</param>
        </member>
        <member name="T:CMS.DataEngine.IWhereCondition">
            <summary>
            Interface for classes which provide where condition
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IWhereCondition.DataSourceName">
            <summary>
            Data source identifier that represents the location from which the data are obtained. 
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query. 
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.IWhereCondition.WhereCondition">
            <summary>
            Where condition on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IWhereCondition.WhereIsComplex">
            <summary>
            Returns true if the given where condition contains compound conditions, e. g. "A > 1 AND B = 5"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IWhereCondition.WhereIsEmpty">
            <summary>
            Returns true if the where condition is empty
            </summary>
        </member>
        <member name="M:CMS.DataEngine.IWhereCondition.ReturnNoResults">
            <summary>
            Sets the query to return no results. This action is irreversible, once the query is set to return no results it cannot be changed. 
            This method is used by data engine to forbid access to data that are not allowed to be accessed (e.g. license limitations), without notifying the process about the fact.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryOperator">
            <summary>
            Constants for DataQuery operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.Equals">
            <summary>
            Equals "="
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.NotEquals">
            <summary>
            Not equals "&lt;&gt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.Like">
            <summary>
            Like "LIKE"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.NotLike">
            <summary>
            Not line "NOT LIKE"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.GreaterThan">
            <summary>
            Greater than "&gt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LargerThan">
            <summary>
            Larger than "&gt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LessThan">
            <summary>
            Less than "&lt;"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.GreaterOrEquals">
            <summary>
            Greater or equals "&gt;="
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LargerOrEquals">
            <summary>
            Larger or equals "&gt;="
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryOperator.LessOrEquals">
            <summary>
            Less or equals "&lt;="
            </summary>
        </member>
        <member name="T:CMS.DataEngine.QueryUnaryOperator">
            <summary>
            Constants for DataQuery unary operators
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryUnaryOperator.IsNull">
            <summary>
            Is null "IS NULL"
            </summary>
        </member>
        <member name="F:CMS.DataEngine.QueryUnaryOperator.IsNotNull">
            <summary>
            Is not null "IS NOT NULL"
            </summary>
        </member>
        <member name="T:CMS.DataEngine.WhereBuilder">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.Default">
            <summary>
            Default where builder
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.LIKE">
            <summary>
            SQL "LIKE" operator constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.NOT_LIKE">
            <summary>
            SQL "NOT LIKE" operator constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.EQUAL">
            <summary>
            SQL "=" operator constant.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereBuilder.NOT_EQUAL">
            <summary>
            SQL "&lt;&gt;" operator constant.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.OperatorOR">
            <summary>
            Returns the OR operator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.OperatorAND">
            <summary>
            Returns the AND operator
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereBuilder.NULL">
            <summary>
            Returns the NULL constant
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetNegation(System.String)">
            <summary>
            Gets the negation of the given where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetIsNull(System.String,System.Boolean)">
            <summary>
            Gets the IS NULL expression
            </summary>
            <param name="columnName">Column name</param>
            <param name="negation">If true, negates the expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetIn(System.String,System.Boolean,System.String)">
            <summary>
            Gets the IN expression
            </summary>
            <param name="columnName">Column name</param>
            <param name="negation">If true, produces NOT IN</param>
            <param name="nested">Nested expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetExists(System.Boolean,System.String)">
            <summary>
            Gets the EXISTS expression
            </summary>
            <param name="negation">If true, produces NOT EXISTS</param>
            <param name="nested">Nested expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetBinaryOperator(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression)">
            <summary>
            Gets the binary operator based on the expression type
            </summary>
            <param name="ex">Expression type</param>
            <param name="rightExpression">Expression on the right side of binary operator (second expression)</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetOperator(CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the operator string
            </summary>
            <param name="op">Operator to convert</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetOperator(CMS.DataEngine.QueryOperator)">
            <summary>
            Gets the operator string
            </summary>
            <param name="op">Operator to convert</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetParameter(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets a new parameter
            </summary>
            <param name="name">Value name</param>
            <param name="value">Value</param>
            <param name="parameters">Collection of data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryOperator,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets the where condition for the given expressions. Note that in this variant string value is always represented as a value. To pass in column name, you need to use new QueryColumn("Name")
            </summary>
            <param name="leftSide">Left side</param>
            <param name="op">Operator</param>
            <param name="rightSide">Right side</param>
            <param name="parameters">Collection of data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetWhere(System.String,CMS.DataEngine.QueryOperator,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
            <param name="parameters">Collection of data parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetNullComparison(System.String,CMS.DataEngine.QueryOperator)">
            <summary>
            Gets the null comparison for the given expression in format "[expression] IS NULL"
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetNestedWhereCondition(System.String)">
            <summary>
            Adds the where condition to the existing one
            </summary>
            <param name="where">Where condition to add</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.AddWhereCondition(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds the where condition to the existing one
            </summary>
            <param name="where">Where condition to add</param>
            <param name="condition">Condition to add</param>
            <param name="op">Operator</param>
            <param name="nested">If true, the where condition is added as nested</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.GetEqualsOrNull(System.String,System.Object,CMS.DataEngine.QueryDataParameters@)">
            <summary>
            Gets the equals or empty expression
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereBuilder.RepresentsNull(System.Object)">
            <summary>
            Returns true if the given value represents database NULL
            </summary>
            <param name="value">Value to check</param>
        </member>
        <member name="T:CMS.DataEngine.WhereCondition">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor">
            <summary>
            Default constructor
            </summary>
            <remarks>
            <para>
            Conditions created using the constructor don't contain a data source identifier.
            Source identifiers are used to determine whether sub queries (<see cref="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)"/>) are materialized or inserted directly into the parent query.
            For example, a sub query selecting objects from a separated online marketing database needs to be materialized when the parent query is executed against the main database.
            </para>
            <para>
            If you know the data type that the new condition works with, create the condition using the <see cref="M:CMS.DataEngine.ObjectTypeInfo.CreateWhereCondition"/> method.
            You can also set the data source manually through the <see cref="P:CMS.DataEngine.WhereConditionBase`1.DataSourceName"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="whereCondition">Where condition</param>
            <remarks>
            <para>
            Conditions created using the constructor don't contain a data source identifier.
            Source identifiers are used to determine whether sub queries (<see cref="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)"/>) are materialized or inserted directly into the parent query.
            For example, a sub query selecting objects from a separated online marketing database needs to be materialized when the parent query is executed against the main database.
            </para>
            <para>
            If you know the data type that the new condition works with, create the condition using the <see cref="M:CMS.DataEngine.ObjectTypeInfo.CreateWhereCondition"/> method.
            You can also set the data source manually through the <see cref="P:CMS.DataEngine.WhereConditionBase`1.DataSourceName"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
            <remarks>
            <para>
            Conditions created using the constructor don't contain a data source identifier.
            Source identifiers are used to determine whether sub queries (<see cref="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)"/>) are materialized or inserted directly into the parent query.
            For example, a sub query selecting objects from a separated online marketing database needs to be materialized when the parent query is executed against the main database.
            </para>
            <para>
            If you know the data type that the new condition works with, create the condition using the <see cref="M:CMS.DataEngine.ObjectTypeInfo.CreateWhereCondition"/> method.
            You can also set the data source manually through the <see cref="P:CMS.DataEngine.WhereConditionBase`1.DataSourceName"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Constructor
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <remarks>
            <para>
            Conditions created using the constructor don't contain a data source identifier.
            Source identifiers are used to determine whether sub queries (<see cref="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)"/>) are materialized or inserted directly into the parent query.
            For example, a sub query selecting objects from a separated online marketing database needs to be materialized when the parent query is executed against the main database.
            </para>
            <para>
            If you know the data type that the new condition works with, create the condition using the <see cref="M:CMS.DataEngine.ObjectTypeInfo.CreateWhereCondition"/> method.
            You can also set the data source manually through the <see cref="P:CMS.DataEngine.WhereConditionBase`1.DataSourceName"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.#ctor(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Constructor
            </summary>
            <param name="conditions">Creates a where condition from the given where conditions</param>
            <remarks>
            <para>
            Conditions created using the constructor don't contain a data source identifier.
            Source identifiers are used to determine whether sub queries (<see cref="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)"/>) are materialized or inserted directly into the parent query.
            For example, a sub query selecting objects from a separated online marketing database needs to be materialized when the parent query is executed against the main database.
            </para>
            <para>
            If you know the data type that the new condition works with, create the condition using the <see cref="M:CMS.DataEngine.ObjectTypeInfo.CreateWhereCondition"/> method.
            You can also set the data source manually through the <see cref="P:CMS.DataEngine.WhereConditionBase`1.DataSourceName"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.WhereCondition.From(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Creates a new where condition from the given parameters
            </summary>
            <param name="where">Where condition parameters</param>
        </member>
        <member name="T:CMS.DataEngine.WhereConditionBase`1">
            <summary>
            Where condition builder - Generic base class
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereConditionBase`1.mWhereCondition">
            <summary>
            Where condition
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereConditionBase`1.mWhereBuilder">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="F:CMS.DataEngine.WhereConditionBase`1.mReturnsNoResults">
            <summary>
            Returns true if query doesn't return any results
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereBuilder">
            <summary>
            Where condition builder
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereOperator">
            <summary>
            Operator used for adding where condition. Default is AND
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereCondition">
            <summary>
            Where condition on the data, e.g. "DocumentName = 'ABC'"
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereIsComplex">
            <summary>
            Returns true if the given where condition contains compound conditions, e. g. "A > 1 AND B = 5"
            </summary>
            <remarks>
            Complex where condition will be surrounded by brackets if added to other where condition.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.WhereIsEmpty">
            <summary>
            Returns true if the where condition is empty
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.ReturnsNoResults">
            <summary>
            Returns true if query doesn't return any results
            </summary>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.DataSourceName">
            <summary>
            Data source identifier that represents the location from which the data are obtained. 
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query. 
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.WhereConditionBase`1.ParentQuery">
            <summary>
            Parent query object
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ApplyParametersTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Applies this where condition to the target object
            </summary>
            <param name="target">Target object defining parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.CopyPropertiesTo(CMS.DataEngine.IQueryObject)">
            <summary>
            Creates the clone of the collection.
            </summary>
            <param name="target">Target class</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ResetWhereOperator">
            <summary>
            Resets the where operator to the default value
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="leftSide">Left side of the condition</param>
            <param name="op">Operator</param>
            <param name="rightSide">Right side of the condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetWhere(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Gets the where condition for the given column
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ToString(System.Boolean)">
            <summary>
            Returns the string representation of the expression, with possibility of expanding parameters
            </summary>
            <param name="expand">If true, the result is expanded with parameters so it can act as standalone value.</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AddWhereConditionInternal(CMS.DataEngine.IWhereCondition,System.Boolean)">
            <summary>
            Adds the given where condition
            </summary>
            <param name="condition">Condition to add</param>
            <param name="negation">If true, the added where condition is negated</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AddWhereConditionInternal(System.String)">
            <summary>
            Adds the given where condition to the final where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetStartsWithPattern(System.String)">
            <summary>
            Gets the starts with pattern for the like expression
            </summary>
            <param name="text">Text to match</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetEndsWithPattern(System.String)">
            <summary>
            Gets the ends with pattern for the like expression
            </summary>
            <param name="text">Text to match</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetContainsPattern(System.String)">
            <summary>
            Gets the contains pattern for the like expression
            </summary>
            <param name="text">Text to match</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AnySettingsDefined">
            <summary>
            Returns true if the object has any settings defined that influence the resulting query
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.CheckReturnsNoResults">
            <summary>
            Checks if where condition results in no data
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetDataSourceName">
            <summary>
            Gets data source identifier that represents the location from which the data are obtained. 
            </summary>
            <remarks>
            Source identifiers are used to determine whether sub queries should be materialized or inserted directly into parent query. 
            </remarks>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.And">
            <summary>
            Changes the where operator to AND for subsequent where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.And(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the AND operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.And(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the AND operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Or">
            <summary>
            Changes the where operator to OR for next where conditions. Use in combination of methods Where...
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Or(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the given where condition with the OR operator
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Or(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition with the OR operator. Creates a new where condition object and runs the setup actions on it.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.AddWhereCondition(System.String)">
            <summary>
            Adds the given where condition to the final where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotNull(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a not null expression value
            </summary>
            <param name="expression">Expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotNull(System.String)">
            <summary>
            Adds the where condition for a not null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEmpty(System.String)">
            <summary>
            Adds the where condition for a null or empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEmpty(System.String)">
            <summary>
            Adds the where condition for a non empty column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNull(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a null expression value
            </summary>
            <param name="expression">Expression</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNull(System.String)">
            <summary>
            Adds the where condition for a null column value
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereTrue(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a true expression value (boolean expression equals true).
            </summary>
            <param name="expression">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereTrue(System.String)">
            <summary>
            Adds the where condition for a true column value (boolean column equals true).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereFalse(CMS.DataEngine.IQueryObjectWithValue)">
            <summary>
            Adds the where condition for a false expression value (boolean expression equals false).
            </summary>
            <param name="expression">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereFalse(System.String)">
            <summary>
            Adds the where condition for a false column value (boolean column equals false).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition to the nested query, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)".
            Supported generic type is int, long, string or guid ONLY!
            </summary>
            <param name="columnName">Column name</param>
            <param name="nestedQuery">Nested query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.HasCompatibleSource(CMS.DataEngine.IDataQuery)">
            <summary>
            Returns true if the given query is an external source
            </summary>
            <param name="query">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Int64})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.Int64})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotIn(System.String,System.Collections.Generic.ICollection{System.Guid})">
            <summary>
            Adds where condition to the list of values, e.g. "columnName NOT IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Int32},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Int64},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereIn(System.String,System.Collections.Generic.ICollection{System.Guid},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"
            </summary>
            <param name="columnName">Column name</param>
            <param name="values">List of values for the query</param>
            <param name="negation">If true, the expression is NOT IN</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereInGeneric``1(System.String,System.Collections.Generic.ICollection{``0},System.Boolean)">
            <summary>
            Adds where condition to the list of values, e.g. "columnName IN (...)"  Supported generic types are Int, String and Guid
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="values">The values.</param>
            <param name="negation">if set to true [negation].</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with EXISTS and the nested query "EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotExists(CMS.DataEngine.IDataQuery)">
            <summary>
            Adds where condition with NOT EXISTS and the nested query "NOT EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereExists(CMS.DataEngine.IDataQuery,System.Boolean)">
            <summary>
            Adds where condition with EXISTS and the nested query "EXISTS (...)"
            </summary>
            <param name="nestedQuery">Nested query</param>
            <param name="negation">If true, the expression is NOT EXISTS</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(CMS.DataEngine.IWhereCondition[])">
            <summary>
            Adds the given where conditions to the query
            </summary>
            <param name="conditions">Nested where conditions</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNot(CMS.DataEngine.IWhereCondition)">
            <summary>
            Adds the negation of the given where condition
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.Action{CMS.DataEngine.WhereCondition})">
            <summary>
            Adds the given where condition to the query. Creates a new where condition object and runs the setup actions on it.
            </summary>
            <param name="condition">Nested where condition</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.NewWhere">
            <summary>
            Clears the current where condition
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.NoResults">
            <summary>
            Sets the where condition to exclude all data from result
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Adds the given where condition to the query
            </summary>
            <param name="where">Where condition</param>
            <param name="parameters">Query parameters</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereContains(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column to contain some substring
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotContains(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column not to contain some substring
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotContains(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to contain some substring
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereStartsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column to start with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotStartsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column not to start with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotStartsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to start with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEndsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string expression to end with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEndsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column to end with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEndsWith(CMS.DataEngine.IQueryObjectWithValue,System.String)">
            <summary>
            Adds the condition for a string column not to end with some prefix
            </summary>
            <param name="expression">Expression</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEndsWith(System.String,System.String)">
            <summary>
            Adds the condition for a string column not to end with some prefix
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="leftSide">Column name</param>
            <param name="op">Operator</param>
            <param name="rightSide">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.String,CMS.DataEngine.QueryOperator,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(CMS.DataEngine.IQueryObjectWithValue,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Adds the given where condition to the query. Matches the column value with an unary operator.
            </summary>
            <param name="expression">Expression</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Where(System.String,CMS.DataEngine.QueryUnaryOperator)">
            <summary>
            Adds the given where condition to the query. Matches the column value with an unary operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="op">Operator</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEqualsOrNull(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value or null value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side to the given right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is not equal to the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the column which is not equal to a given value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessThan(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessOrEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less or equal than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterThan(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterOrEquals(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater or equal than the right side.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessThan(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLessOrEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is less or equal than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereGreaterOrEquals(System.String,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side which is greater or equal than the right side.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLike(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side and right side using LIKE operator.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotLike(CMS.DataEngine.IQueryObjectWithValue,System.Object)">
            <summary>
            Adds the given where condition to the query. Matches the left side and right side using NOT LIKE operator.
            </summary>
            <param name="leftSide">Left side</param>
            <param name="rightSide">Right side</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereNotLike(System.String,System.String)">
            <summary>
            Adds the given where condition to the query. Matches the column to a given value using NOT LIKE operator.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.WhereID(System.String,System.Int32)">
            <summary>
            Adds the where condition to match the ID to the query. In case the column name is not provided or unknown, does not generate where condition. If given ID is invalid, adds the condition to match NULL.
            </summary>
            <param name="columnName">Column name</param>
            <param name="id">ID</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.ReturnNoResults">
            <summary>
            Sets the query to return no results. This action is irreversible, once the query is set to return no results it cannot be changed. 
            This method is used by data engine to forbid access to data that are not allowed to be accessed (e.g. license limitations), without notifying the process about the fact.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetValidColumnName(System.String)">
            <summary>
            Returns column name in string format from query column expression (Ensures square brackets)
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CMS.DataEngine.WhereConditionBase`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:CMS.DataEngine.DefaultEventLogWriter">
            <summary>
            The default implementation of event log writer that is capable of logging events during all stages of the applications lifecycle.
            </summary>
            <seealso cref="T:CMS.Core.IEventLogWriter" />
        </member>
        <member name="M:CMS.DataEngine.DefaultEventLogWriter.#ctor(System.Collections.Generic.IEnumerable{CMS.Core.IInternalEventLogWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.DefaultEventLogWriter"/> class.
            </summary>
            <param name="writers">The internal writers that are called based on the application state.</param>
        </member>
        <member name="M:CMS.DataEngine.DefaultEventLogWriter.WriteLog(CMS.Core.EventLogData)">
            <summary>
            Writes event log data into an appropriate output based on whether the database is available.
            </summary>
            <param name="eventLogData">The event log data.</param>
        </member>
        <member name="T:CMS.DataEngine.Services.FeatureServiceFactory`1">
            <summary>
            Factory to select appropriate <typeparamref name="TService"/> based on current application initialization state.
            </summary>
            <typeparam name="TService">Service to be selected.</typeparam>
        </member>
        <member name="F:CMS.DataEngine.Services.FeatureServiceFactory`1.mDatabasePredicate">
            <summary>
            Returns <see langword="true"/> when <typeparamref name="TService"/> implements <see cref="T:CMS.Core.Features.IRequiresDatabaseFeature"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CMS.DataEngine.Services.FeatureServiceFactory`1.DatabaseService">
            <summary>
            Implementation of <typeparamref name="TService"/> that relies on the underlying database being available.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Services.FeatureServiceFactory`1.DefaultService">
            <summary>
            Implementation of <typeparamref name="TService"/> that is resolved if database is not available.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.Services.FeatureServiceFactory`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.Services.FeatureServiceFactory`1"/> class.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.Services.FeatureServiceFactory`1.Current">
            <summary>
            Returns appropriate <typeparamref name="TService"/> based on current application initialization state.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ISettingsCategoryInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.DataEngine.SettingsCategoryInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsCategoryContainer">
            <summary>
            Object encapsulating all settings objects to be accessible via macro engine.
            </summary>
            <remarks>This class is intended for backward compatibility of old setting macro style (Settings.Category.CMSSettingKey)</remarks>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.SettingsCategoryInfo">
            <summary>
            Gets the encapsulated settings category info.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.SiteID">
            <summary>
            Gets the site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.KeysAsObjects">
            <summary>
            Indicates whether settings keys are treated as normal children (InfoObjects) or simple values.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.#ctor(CMS.DataEngine.SettingsCategoryInfo,System.Int32,System.Boolean)">
            <summary>
            Creates new instance of SettingsCategoryContainer.
            </summary>
            <param name="category">Settings category to be encapsulated</param>
            <param name="siteId">ID of the site</param>
            <param name="keysAsObjects">Indicates whether settings keys are treated as normal children (InfoObjects) or simple values</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.Item(System.String)">
            <summary>
            Gets the value of the column, setter is not implemented.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryContainer.GetObjectToCheck">
            <summary>
            Gets an object for which to perform the permissions check.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsCategoryInfo">
            <summary>
            Represents a Settings key.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsCategoryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsCategoryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryID">
            <summary>
            Category ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryDisplayName">
            <summary>
            Category display name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryName">
            <summary>
            Category name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryOrder">
            <summary>
            Category order.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryParentID">
            <summary>
            Category parent ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIDPath">
            <summary>
            Category ID path within the category tree.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryLevel">
            <summary>
            Category level in the category tree.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryChildCount">
            <summary>
            Number of category child categories.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIconPath">
            <summary>
            Category icon path.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIsGroup">
            <summary>
            Indicates if category represents group. True -> It is a settings group, False -> It is a settings category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryIsCustom">
            <summary>
            Indicates if category is custom. True -> It is a custom category, False -> It is a system category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfo.CategoryResourceID">
            <summary>
            Category resource identifier.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.BuildObjectPath(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="parentColumName">Column of the parent ID</param>
            <param name="pathColumnName">Column name to build the path from</param>
            <param name="levelColumnName">Column name of the level</param>
            <param name="level">Level of the object within the tree hierarchy</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.#ctor">
            <summary>
            Constructor, creates an empty SettingsKeyInfo structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates the DataClassInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="T:CMS.DataEngine.SettingsCategoryInfoProvider">
            <summary>
            Class providing Settings category management.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsCategoryInfoProvider.mRootCategory">
            <summary>
            Info object representing Settings root category.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsCategoryInfoProvider.RootCategory">
            <summary>
            Returns root settings category (this property is cached).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetRootSettingsCategoryInfo">
            <summary>
            Gets root of categories. This is distinguished by CategoryLevel = 0. If more found -> use first.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoryInfo(System.Int32)">
            <summary>
            Returns the SettingsCategoryInfo structure for the specified category.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoryInfoByName(System.String)">
            <summary>
            Returns the SettingsCategoryInfo structure for the name.
            </summary>
            <param name="categoryName">CategoryName</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryInfo(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Sets (updates or inserts) specified category.
            </summary>
            <param name="category">Settings category to set</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.DeleteSettingsCategoryInfo(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Deletes specified category.
            </summary>
            <param name="categoryObj">Country object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.DeleteSettingsCategoryInfo(System.Int32)">
            <summary>
            Deletes specified category.
            </summary>
            <param name="categoryId">Country ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategories">
            <summary>
            Gets all settings categories.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategories(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all categories.
            </summary>    
            <param name="where">Where condition to filter data</param>
            <param name="orderBy">Order by statement to use</param>
            <param name="topN">Number of data rows which should be included in the result</param>
            <param name="columns">Table columns separated by comma which should be included in the result</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategories(System.Int32)">
            <summary>
            Gets DataSet with child setting categories of the specified parent setting category.
            </summary>
            <param name="parentCategoryId">ID of the parent setting category</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategories(System.String,System.String)">
            <summary>
            Gets DataSet with child setting categories of the specified parent setting category, filtered by where condition.
            </summary>
            <param name="parentCategoryName">Name of the parent setting category</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryUp(System.Int32)">
            <summary>
            Moves specified category up.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryDown(System.Int32)">
            <summary>
            Moves specified category down.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryChildCount(System.Int32)">
            <summary>
            Sets correct SettingsCategoryChildCount to the specified SettingsCategory.
            </summary>
            <param name="settingsCategoryID">ID of the SettingsCategory</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetLastSettingsCategoryOrder(System.Int32)">
            <summary>
            Returns last SettingsCategory order for specified parent SettingsCategory.
            </summary>
            <param name="parentCategoryID">Parent SettingsCategory ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.RefreshDataCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetCategoriesOnPathWhereCondition(System.String)">
            <summary>
            Gets where condition for all parent categories on path except root category.
            </summary>
            <param name="categoryIdPath">Category ID path</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetCategoriesOnPath(System.String)">
            <summary>
            Gets all the categories on the specified category ID path in the corresponding order.
            </summary>
            <param name="categoryIdPath">Category ID path</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.RefreshObjectsCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetInfo(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.DeleteInfo(CMS.DataEngine.SettingsCategoryInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetSettingsCategoriesInternal(System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets all categories.
            </summary>
            <param name="orderBy">Order by statement to use</param>
            <param name="where">Where condition to filter data</param>
            <param name="topN">Number of data rows which should be included in the result</param>
            <param name="columns">Table columns which should be included in the result</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategoriesInternal(System.Int32)">
            <summary>
            Gets DataSet with child setting categories of the specified parent category.
            </summary>
            <param name="parentCategoryId">ID of the parent setting category</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetChildSettingsCategoriesInternal(System.String,System.String)">
            <summary>
            Gets DataSet with child setting categories of the specified parent category.
            </summary>
            <param name="parentCategoryName">Code name of the parent setting category</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryUpInternal(System.Int32)">
            <summary>
            Moves specified category up.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.MoveCategoryDownInternal(System.Int32)">
            <summary>
            Moves specified category down.
            </summary>
            <param name="categoryId">Category ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.SetSettingsCategoryChildCountInternal(System.Int32)">
            <summary>
            Sets correct CategoryChildCount to the specified SettingsCategory.
            </summary>
            <param name="settingsCategoryID">ID of the SettingsCategory</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetLastSettingsCategoryOrderInternal(System.Int32)">
            <summary>
            Returns last order for specified parent SettingsCategory.
            </summary>
            <param name="parentCategoryID">Parent SettingsCategory ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.RefreshDataCountsInternal">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsCategoryInfoProvider.GetParentPath(System.String)">
            <summary>
            Returns the parent path for the specified path (any kind of path with "/" as a separator)
            </summary>
            <param name="path">Original path</param>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyActionEnum">
            <summary>
            Enumerates the possible actions when changing the settings key.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyActionEnum.Update">
            <summary>
            Specifies that the settings key had already existed and was updated.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyActionEnum.Insert">
            <summary>
            Specifies that the settings key was newly created.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyActionEnum.Delete">
            <summary>
            Specifies that the settings key was removed.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyChangedEventArgs">
            <summary>
            Class containing data for event raised when the settings key is successfuly changed.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.KeyName">
            <summary>
            Gets the name of the key.
            </summary>
            <value>The name of the key.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.KeyValue">
            <summary>
            Gets the key value.
            </summary>
            <value>The key value.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.SiteID">
            <summary>
            Gets the site ID.
            </summary>
            <value>The site ID.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.SiteName">
            <summary>
            Gets the name of the site.
            </summary>
            <value>The name of the site.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.Action">
            <summary>
            Gets the action that was performed on the settings key.
            </summary>
            <value>The action that was performed on the settings key.</value>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyChangedEventArgs.FullKeyName">
            <summary>
            Gets the full name of the key with site name prefix.
            </summary>
            <value>The full name of the key.</value>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.SettingsKeyChangedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyChangedEventArgs.#ctor(System.String,System.Object,System.Int32,System.String,CMS.DataEngine.SettingsKeyActionEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.DataEngine.SettingsKeyChangedEventArgs"/> class.
            </summary>
            <param name="keyName">Name of the key</param>
            <param name="keyValue">The key value</param>
            <param name="siteId">ID of the site</param>
            <param name="siteName">Name of the site</param>
            <param name="action">Action that was performed on the settings key</param>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyInfo">
            <summary>
            Represents a Settings key.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyID">
            <summary>
            Gets or sets the key ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyName">
            <summary>
            Gets or sets the key name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyDisplayName">
            <summary>
            Gets or sets the key display name.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyDescription">
            <summary>
            Gets or sets the key description.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyExplanationText">
            <summary>
            Gets or sets the key explanation text.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyValue">
            <summary>
            Gets or sets the key value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyType">
            <summary>
            Gets or sets the key type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyCategoryID">
            <summary>
            Gets or sets the key category ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.SiteID">
            <summary>
            Gets or sets the key site ID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyLastModified">
            <summary>
            Time stamp.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyGUID">
            <summary>
            Key GUID.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyOrder">
            <summary>
            Gets or sets the key order.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyDefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyValidation">
            <summary>
            Gets or sets regular expression for validation.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyEditingControlPath">
            <summary>
            Gets or sets the path to formcontrol which can be used to edit the settings.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyFormControlSettings">
            <summary>
            Gets or sets the form control settings serialized in XML.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyIsGlobal">
            <summary>
            Indicates if the settings key is only global.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyIsCustom">
            <summary>
            Indicates whether the settings key is custom or system default.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.KeyIsHidden">
            <summary>
            Indicates whether the settings key is hidden or not. If it is set to true, such key will not be displayed in
            the settings section and users will not be able to edit value of such key.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfo.LogSynchronization">
            <summary>
            If true, synchronization tasks are logged on the object update.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetCacheDependencies">
            <summary>
            Gets collection of dependency keys to be touched when modifying the current object.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.#ctor">
            <summary>
            Constructor, creates an empty SettingsKeyInfo structure.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates the DataClassInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetDefaultDataExportColumns">
            <summary>
            Returns names of all columns that should be exported with default data as a comma separated string. 
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfo.GetDefaultData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the default object installation data
            </summary>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyInfoProvider">
            <summary>
            Provides access to settings keys.
            </summary>
            <remarks>
            This provider is not managed by the IoC container.
            </remarks>
        </member>
        <member name="E:CMS.DataEngine.SettingsKeyInfoProvider.OnSettingsKeyChanged">
            <summary>
            Occurs when the settings key is changed.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyInfoProvider.GetURL">
            <summary>
            Executes when URL is requested from the settings
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.DeploymentMode">
            <summary>
            Gets or sets the value that indicates whether the virtual objects are in deployment mode (reflects CMSDeploymentMode hidden setting).
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.VirtualObjectsAllowed">
            <summary>
            Gets the value that indicates whether virtual path provider is running or deployment mode is set
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.Settings">
            <summary>
            Gets the collection of settings stored by site name.
            </summary>
            <remarks>
            Use this property directly only in cases where you don't need loaded values (e.g remove or update of cached values).
            If you want to read the values use <see cref="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(System.String)"/> method instead.
            </remarks>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyInfoProvider.IsDataAvailable">
            <summary>
            Returns true if the data is available for this provider
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetSettingsKeyInfo(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Sets the specified settings key data.
            </summary>
            <param name="infoObj">Settings key info object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfo(System.Int32)">
            <summary>
            Returns the settings key with specified ID.
            </summary>
            <param name="keyId">Key ID</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfo(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the settings key info for key with the specified name. The name can be either KeyName (for global settings) or SiteName.KeyName (for local settings).
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfo(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the settings key info for key with the specified name.
            </summary>
            <param name="keyName">Key name to retrieve</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.DeleteSettingsKeyInfo(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Deletes the specified settings key.
            </summary>
            <param name="infoObj">Settings key</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SearchSettingsKey(CMS.DataEngine.SettingsKeyInfo,System.String,System.Boolean)">
            <summary>
            Searches display name and description of the specified key for the specified text.
            The display name and description are localized and HTML encoded prior to searching.
            </summary>
            <param name="key">Key to search</param>
            <param name="searchText">Text to search for</param>
            <param name="searchInDescription">Indicates if the key description should be included in the search</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.MoveSettingsKeyUp(System.String)">
            <summary>
            Moves specified key up.
            </summary>
            <param name="keyName">Key code name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.MoveSettingsKeyDown(System.String)">
            <summary>
            Moves specified key down.
            </summary>
            <param name="keyName">Key code name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeys">
            <summary>
            Returns all settings keys.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeys(System.Int32,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a DataSet with all the keys for given site and category sorted by KeyDisplayName.
            If site is not specified, only the global settings are loaded.
            </summary>
            <param name="categoryId">Settings category ID</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettings(System.String)">
            <summary>
            Gets the settings
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(CMS.DataEngine.ProviderDictionaryCollection,System.Data.DataSet)">
            <summary>
            Loads the settings from the given DataSet
            </summary>
            <param name="sender">Instance of <see cref="T:CMS.DataEngine.ProviderDictionaryCollection"/>.</param>
            <param name="ds">DataSet with the settings</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettingsWithReaderCheck(CMS.DataEngine.ProviderDictionaryCollection,System.Object)">
            <summary>
            Loads the objects.
            </summary>
            <param name="sender">Instance of <see cref="T:CMS.DataEngine.ProviderDictionaryCollection"/>.</param>
            <param name="parameter">Site name as a parameter</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(CMS.DataEngine.ProviderDictionaryCollection,System.Data.IDataReader)">
            <summary>
            Loads the settings from the given data reader
            </summary>
            <param name="sender">Instance of <see cref="T:CMS.DataEngine.ProviderDictionaryCollection"/>.</param>
            <param name="reader">Data reader</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.LoadSettings(System.String)">
            <summary>
            Loads all keys for specific site if not loaded yet.
            </summary>
            <param name="siteName">Site name to load</param>
            <returns>Currently loaded or already existing collection of keys for specific site.</returns>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.DeleteObjectFromHashtables(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Clears the cached value of the specified settings key.
            </summary>
            <param name="info">Object info for the settings key which should be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.UpdateObjectInHashtables(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Updates the cached value of the specified settings key.
            </summary>
            <param name="info">Object info for the settings key which should be deleted</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetGlobalValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of the global key if the key exists.
            </summary>
            <param name="keyName">Key name for global setting</param>
            <param name="value">Key value</param>
            <param name="logSynchronization">If true, synchronization task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetValue(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Object,System.Boolean)">
            <summary>
            Sets the value of the given key if the key exists.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="value">Key value</param>
            <param name="logSynchronization">If true, synchronization task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns value of the specified key from the database or "" if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <returns>Returns "" if the key does not exist</returns>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns value of the specified key from the database or "" if not found. Falls back to the <see cref="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(CMS.DataEngine.SettingsKeyName)"/> if site-specific key is not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <returns>Returns "" if the key does not exist</returns>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Returns value of the specified key from the database or "" if not found. Falls back to the <see cref="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValue(CMS.DataEngine.SettingsKeyName)"/> if site-specific key is not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="nullIfNotFound">Return null if the key does not exist</param>
            <returns>Returns "" if the key does not exist</returns>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueFromDB(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Gets the settings key value from DB.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueFromDB(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the settings key value from DB.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetURLValue(CMS.DataEngine.SettingsKeyName,System.String)">
            <summary>
            Gets the URL value from settings.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <param name="defaultUrl">Default URL</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetURLValue(System.String,CMS.DataEngine.SiteInfoIdentifier,System.String)">
            <summary>
            Gets the URL value from settings.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="defaultUrl">Default URL</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the integer value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the integer value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValue(System.String,System.String,System.Int32,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the integer value of setting in web.config or value of specified key if setting is not present in web.config file.
            </summary>
            <param name="configKey">Web.config key</param>
            <param name="keyName">Key name</param>
            <param name="settingDefaultValue">Default value of the setting when web.config key is missing and database is not available</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDoubleValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the double value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDoubleValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the double value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDecimalValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the decimal value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDecimalValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the decimal value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValue(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Returns the boolean value of the specified key from the database or false if not found.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValue(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the boolean value of the specified key from the database or false if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValue(System.String,System.String,System.Boolean)">
            <summary>
            Returns the boolean value of setting in web.config or value of specified key if setting is not present in web.config file.
            </summary>
            <param name="configKey">Web.config key</param>
            <param name="keyName">Name of the setting</param>
            <param name="settingDefaultValue">Default value of the setting when web.config key is missing and database is not available</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.IsValueInherited(CMS.DataEngine.SettingsKeyName)">
            <summary>
            Checks if the value of the specified settings value is inherited.
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting, see <see cref="T:CMS.DataEngine.SettingsKeyName"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.IsValueInherited(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks if the value of the specified settings value is inherited.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeysInternal">
            <summary>
            Returns all settings keys.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the boolean value of the specified key from the database or false if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetBoolValueInternal(System.String,System.String,System.Boolean)">
            <summary>
            Returns the boolean value of setting in web.config or value of specified key if setting is not present in web.config file.
            </summary>
            <param name="configKey">Web.config key</param>
            <param name="keyName">Name of the setting</param>
            <param name="settingDefaultValue">Default value of the setting when web.config key is missing and database is not available</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValueInternal(System.String,System.String,System.Int32,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the integer value of setting in web.config or value of specified key if setting is not present in web.config file.
            </summary>
            <param name="configKey">Web.config key</param>
            <param name="keyName">Key name</param>
            <param name="settingDefaultValue">Default value of the setting when web.config key is missing and database is not available</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetIntValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Int32)">
            <summary>
            Returns the integer value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="defaultValue">Default value of the setting when web.config key is missing and database is not available</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDoubleValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the double value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetDecimalValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the decimal value of the specified key from the database or 0 if not found.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetURLValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.String)">
            <summary>
            Gets the URL value from settings.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="defaultUrl">Default URL</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Boolean)">
            <summary>
            Returns value of the specified key from the database.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="nullIfNotFound">Return null if the key does not exist</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetValueFromDBInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the settings key value from DB.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <remarks>If the <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/> is <c>true</c> and if <paramref name="keyName"/> is not found <see cref="T:System.InvalidOperationException"/> is thrown instead.</remarks>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.ReportNotExistingSettingsKey(System.String)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> for not existing key under <see cref="P:CMS.Base.SystemContext.DevelopmentMode"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetValueInternal(System.String,CMS.DataEngine.SiteInfoIdentifier,System.Object,System.Boolean)">
            <summary>
            Sets the value of the given key if the key exists.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
            <param name="value">Key value</param>
            <param name="logSynchronization">If true, synchronization task is logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SetSettingsKeyInfoInternal(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Sets the specified settings key data.
            </summary>
            <param name="infoObj">Settings key info object</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.RaiseOnSettingsKeyChanged(CMS.DataEngine.SettingsKeyInfo,System.Boolean,System.String)">
            <summary>
            Raises handler for settings key change
            </summary>
            <param name="settingsKey">Settings key</param>
            <param name="isUpdate">Indicates if setting is updated</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.DeleteSettingsKeyInfoInternal(CMS.DataEngine.SettingsKeyInfo)">
            <summary>
            Deletes the specified settings key.
            </summary>
            <param name="infoObj">Settings key</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.SearchSettingsKeyInternal(CMS.DataEngine.SettingsKeyInfo,System.String,System.Boolean)">
            <summary>
            Searches display name and description of the specified key for the specified text.
            The display name and description are localized and HTML encoded prior to searching.
            </summary>
            <param name="key">Key to search</param>
            <param name="searchText">Text to search for</param>
            <param name="searchInDescription">Indicates if the key description should be included in the search</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetSettingsKeyInfoInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the settings key info for key with the specified name.
            </summary>
            <param name="keyName">Key name to retrieve</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.IsValueInheritedInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks if the value of the specified settings value is inherited.
            </summary>
            <param name="keyName">Key name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name), see <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/> and <see cref="T:CMS.DataEngine.InfoIdentifier"/> for more information</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clears the object's hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.ProcessWebFarmTaskInternal(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyInfoProvider.GetObjectQueryInternal">
            <summary>
            Gets the object query for the provider
            </summary>
        </member>
        <member name="T:CMS.DataEngine.SettingsKeyName">
            <summary>
            Represents the settings key name.
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyName.KeyName">
            <summary>
            Key name
            </summary>
        </member>
        <member name="F:CMS.DataEngine.SettingsKeyName.SiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsKeyName.IsGlobal">
            <summary>
            Gets a value that indicates if the settings key name is global (i.e. site name is not specified).
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Key name in format "[site name].[key name]" for site setting or "[key name]" for global setting</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.#ctor(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Key name in format "[key name]"</param>
            <param name="siteIdentifier">Site identifier</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.ToString">
            <summary>
            Returns the fully qualified key name in format "[site name].[key name]" or "[key name]" for global setting.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.op_Implicit(System.String)~CMS.DataEngine.SettingsKeyName">
            <summary>
            Implicitly converts the specified SettingsKeyName string representation to a SettingsKeyName instance.
            </summary>
            <param name="keyName">Settings key name string representation</param>
        </member>
        <member name="M:CMS.DataEngine.SettingsKeyName.op_Implicit(CMS.DataEngine.SettingsKeyName)~System.String">
            <summary>
            Implicitly converts the specified SettingsKeyName instance to it's string representation.
            </summary>
            <param name="settingsKeyName">Settings key name</param>
        </member>
        <member name="T:CMS.DataEngine.SettingsService">
            <summary>
            Settings service
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsService.IsAvailable">
            <summary>
            Returns true if the settings service's data is available.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.SettingsService.Item(System.String)">
            <summary>
            Gets the specific settings from the database.
            </summary>
            <param name="keyName">Settings key</param>
        </member>
        <member name="T:CMS.DataEngine.IStagingTaskGroup">
            <summary>
            Interface for classes that are used to group staging tasks.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IStagingTaskGroup.TaskGroupID">
            <summary>
            Task group ID
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IStagingTaskGroup.TaskGroupDescription">
            <summary>
            Task group description
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IStagingTaskGroup.TaskGroupCodeName">
            <summary>
            Task group code name
            </summary>
        </member>
        <member name="P:CMS.DataEngine.IStagingTaskGroup.TaskGroupGuid">
            <summary>
            Task group guid
            </summary>
        </member>
        <member name="M:CMS.DataEngine.TypeUtils.IsIoCManaged``1">
            <summary>
            Gets a value indicating whether <typeparamref name="TProvider"/> is a provider
            managed by IoC container.
            </summary>
            <seealso cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>
            <seealso cref="T:CMS.DataEngine.IInfoProvider`1"/>
        </member>
        <member name="M:CMS.DataEngine.TypeUtils.IsIoCManaged(System.Type)">
            <summary>
            Gets a value indicating whether <paramref name="providerType"/> is a provider
            managed by IoC container.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="providerType"/> is null.</exception>
            <seealso cref="T:CMS.DataEngine.AbstractInfoProvider`2"/>
            <seealso cref="T:CMS.DataEngine.IInfoProvider`1"/>
        </member>
        <member name="T:CMS.DataEngine.DataTasks">
            <summary>
            Web farm synchronization for objects
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DataTasks.SynchronizeMetaFiles">
            <summary>
            Gets or sets value that indicates whether file synchronization is enabled.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DataTasks.Init">
            <summary>
            Initializes the tasks
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClearClassStructureInfosWebFarmTask">
            <summary>
            Web farm task used to clear all class structure infos.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.DataEngine.ClearClassStructureInfosWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ClassStructureInfo.Clear(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClearHashtablesWebFarmTask">
            <summary>
            Web farm task used to clear hashtables.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.DataEngine.ClearHashtablesWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ModuleManager.ClearHashtables(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ClearReadOnlyObjectsWebFarmTask">
            <summary>
            Web farm task used to clear all read only objects.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.DataEngine.ClearReadOnlyObjectsWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ModuleManager.ClearReadOnlyObjects(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DeleteMetaFileWebFarmTask">
            <summary>
            Web farm task used to delete meta files.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.DeleteMetaFileWebFarmTask.SiteName">
            <summary>
            Gets or sets name of the site to which file is assigned to.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeleteMetaFileWebFarmTask.FileName">
            <summary>
            Gets or sets name of the file which will be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.DeleteMetaFileWebFarmTask.DeleteDirectory">
            <summary>
            Gets or sets a value that indicates whether delete specified directory.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DeleteMetaFileWebFarmTask.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CMS.DataEngine.DeleteMetaFileWebFarmTask"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DeleteMetaFileWebFarmTask.ConditionMethod">
            <summary>
            Returns true if the synchronization of the deletion of the meta files is allowed
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DeleteMetaFileWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.MetaFileInfoProvider.DeleteFile(System.String,System.String,System.Boolean,System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.DictionaryCommandWebFarmTask">
            <summary>
            Web farm task used to execute dictionary web farm task.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.DictionaryCommandWebFarmTask.TaskTextData">
            <summary>
            Gets or sets task text data.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.DictionaryCommandWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.AbstractProviderDictionary.ProcessWebFarmTask(System.String,System.String,System.Byte[])"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InvalidateAllWebFarmTask">
            <summary>
            Web farm task used to invalidate all objects.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.DataEngine.InvalidateAllWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ObjectTypeInfo.InvalidateAllObjects(System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InvalidateChildrenWebFarmTask">
            <summary>
            Web farm task used to invalidate children objects.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.InvalidateChildrenWebFarmTask.ParentId">
            <summary>
            Gets or sets identifier of the object which children will be invalidated.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InvalidateChildrenWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ObjectTypeInfo.ChildrenInvalidated(System.Int32,System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.InvalidateObjectWebFarmTask">
            <summary>
            Web farm task used to invalidate objects.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.InvalidateObjectWebFarmTask.ObjectId">
            <summary>
            Gets or sets identifier of the object which will be invalidated.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.InvalidateObjectWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ObjectTypeInfo.ObjectInvalidated(System.Int32,System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.ProcessObjectWebFarmTask">
            <summary>
            Web farm task used to process an object's data of given object type <see cref="P:CMS.DataEngine.ProcessObjectWebFarmTask.ObjectType"/>.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.ProcessObjectWebFarmTask.ObjectType">
            <summary>
            Gets or sets identifier of the object type.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcessObjectWebFarmTask.ObjectData">
            <summary>
            Gets or sets object's data to synchronize.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.ProcessObjectWebFarmTask.ActionName">
            <summary>
            Gets or sets name of the action to be executed upon object of given <see cref="P:CMS.DataEngine.ProcessObjectWebFarmTask.ObjectType"/> with given <see cref="P:CMS.DataEngine.ProcessObjectWebFarmTask.ObjectData"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.ProcessObjectWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.IWebFarmProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])"/> method on provider of given <see cref="P:CMS.DataEngine.ProcessObjectWebFarmTask.ObjectType"/> while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.RemoveClassStructureInfoWebFarmTask">
            <summary>
            Web farm task used to remove classes.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.RemoveClassStructureInfoWebFarmTask.ClassName">
            <summary>
            Gets or sets the name of the class to be removed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RemoveClassStructureInfoWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ClassStructureInfo.Remove(System.String,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.RemoveReadOnlyObjectWebFarmTask">
            <summary>
            Web farm task used to remove read only objects.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.RemoveReadOnlyObjectWebFarmTask.ObjectType">
            <summary>
            Gets or sets object type to remove.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.RemoveReadOnlyObjectWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.ModuleManager.RemoveReadOnlyObject(System.String,System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.DataEngine.UpdateMetaFileWebFarmTask">
            <summary>
            Web farm task used to update meta files.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.DataEngine.UpdateMetaFileWebFarmTask.SiteName">
            <summary>
            Gets or sets name of the site which the media library is assigned to.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateMetaFileWebFarmTask.FileGuid">
            <summary>
            Gets or sets identifier of the file to be updated.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateMetaFileWebFarmTask.FileExtension">
            <summary>
            Gets or sets extension of the file to be updated.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateMetaFileWebFarmTask.DeleteOldFiles">
            <summary>
            Gets or sets a value that indicates if files in destination folder with mask '[guid]*.*' should be deleted.
            </summary>
        </member>
        <member name="P:CMS.DataEngine.UpdateMetaFileWebFarmTask.FileName">
            <summary>
            Gets or sets name of the file to be updated.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.UpdateMetaFileWebFarmTask.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CMS.DataEngine.UpdateMetaFileWebFarmTask"/>.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.UpdateMetaFileWebFarmTask.ConditionMethod">
            <summary>
            Returns true if the synchronization of the metafiles is allowed.
            </summary>
        </member>
        <member name="M:CMS.DataEngine.UpdateMetaFileWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.DataEngine.MetaFileInfoProvider.SaveFileToDisk(System.String,System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.RegisterCustomProviderAttribute">
            <summary>
            Registers the custom provider within the system, replaces the default provider from which the defined one inherits.
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomProviderAttribute.MarkedType">
            <summary>
            Gets the type used as provider implementation
            </summary>
        </member>
        <member name="M:CMS.RegisterCustomProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type used as helper implementation</param>
        </member>
        <member name="M:CMS.RegisterCustomProviderAttribute.PreInit">
            <summary>
            Applies the attribute
            </summary>
        </member>
        <member name="T:CMS.AspNet.Platform.ApplicationErrorLogger">
            <summary>
            Logs last application error.
            </summary>
        </member>
        <member name="M:CMS.AspNet.Platform.ApplicationErrorLogger.LogLastApplicationError">
            <summary>
            Logs the last application error.
            </summary>
        </member>
        <member name="T:CMS.DataProviderSQL.DataConnection">
            <summary>
            Represents SQL Server data connection.
            </summary>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.BulkInsert(System.Data.DataTable,System.String,CMS.DataEngine.BulkInsertSettings)">
            <summary>
            Performs a bulk insert of the data into a target database table
            </summary>
            <param name="sourceData">Source data table</param>
            <param name="targetTable">Name of the target DB table</param>
            <param name="insertSettings">Bulk insert configuration</param>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.CreateNativeConnection">
            <summary>
            Creates a new native connection
            </summary>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.CreateCommand(System.String)">
            <summary>
            Creates a new SQL command
            </summary>
            <param name="cmdText">Command text</param>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.CreateParameter(System.String,System.Object)">
            <summary>
            Creates a new command parameter
            </summary>
            <param name="name">Parameter name</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.CreateDataAdapter">
            <summary>
            Creates a data adapter
            </summary>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.HandleDbError(System.String,System.Data.Common.DbException)">
            <summary>
            Handles the database error. Returns false, if the error was not handled
            </summary>
            <param name="message">Error message</param>
            <param name="ex">Database exception</param>
        </member>
        <member name="M:CMS.DataProviderSQL.DataConnection.ProcessOutParameters(System.Data.Common.DbParameterCollection,System.Collections.Generic.IEnumerable{CMS.DataEngine.DataParameter})">
            <summary>
            Ensures propagation of output (or input-output or stored procedure return value) parameters after the SQL command execution to the query parameters collection.
            </summary>
            <remarks>Processing of output parameters is ensured for the following methods (and their async variants if exist):
            <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>, <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteNonQuery(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>, <see cref="M:CMS.DataEngine.AbstractDataConnection.ExecuteScalar(System.String,CMS.DataEngine.QueryDataParameters,CMS.DataEngine.QueryTypeEnum,System.Boolean)"/>.</remarks>
            <param name="commandParams">SQL command parameters</param>
            <param name="queryParams">Query parameters</param>
        </member>
        <member name="T:CMS.DataProviderSQL.DataProvider">
            <summary>
            Data provider class.
            </summary>
        </member>
        <member name="M:CMS.DataProviderSQL.DataProvider.GetNewConnection(System.String)">
            <summary>
            Returns new data connection.
            </summary>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="T:CMS.DataProviderSQL.SqlGenerator">
            <summary>
            Sql generator.
            </summary>
        </member>
        <member name="T:CMS.DataProviderSQL.TableManager">
            <summary>
            Ensures management of database table and table column.
            </summary>
        </member>
        <member name="T:CMS.RegisterObjectTypeAttribute">
            <summary>
            This attribute finds the static TypeInfo fields (all of them) and registers object types those TypeInfos define to the system.
            </summary>
        </member>
        <member name="P:CMS.RegisterObjectTypeAttribute.MarkedType">
            <summary>
            Type marked with this attribute
            </summary>
        </member>
        <member name="P:CMS.RegisterObjectTypeAttribute.ObjectType">
            <summary>
            Object type
            </summary>
        </member>
        <member name="P:CMS.RegisterObjectTypeAttribute.TypeInfo">
            <summary>
            Type info representing this type
            </summary>
        </member>
        <member name="M:CMS.RegisterObjectTypeAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="infoType">Info type</param>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.RegisterObjectTypeAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="M:CMS.RegisterObjectTypeAttribute.GetTypeInfoFields(System.Reflection.BindingFlags)">
            <summary>
            Gets list of fields of type ObjectTypeInfo for this attribute.
            </summary>
            <param name="flags">Binding flags</param>
        </member>
        <member name="M:CMS.RegisterObjectTypeAttribute.GetTypeInfo">
            <summary>
            Gets the type info for this attribute.
            </summary>
        </member>
        <member name="T:CMS.Base.URLEventArgs">
            <summary>
            Get URL event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.URLEventArgs.URL">
            <summary>
            URL
            </summary>
        </member>
        <member name="T:CMS.Base.URLHandler">
            <summary>
            Simple thread handler
            </summary>
        </member>
        <member name="M:CMS.Base.URLHandler.StartEvent(System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="url">Handled URL</param>
        </member>
        <member name="T:CMS.Base.QueryEventArgs">
            <summary>
            Query event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.QueryEventArgs.Query">
            <summary>
            Query
            </summary>
        </member>
        <member name="T:CMS.Base.QueryHandler">
            <summary>
            Query handler
            </summary>
        </member>
        <member name="M:CMS.Base.QueryHandler.StartEvent(System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="query">Handled query</param>
        </member>
    </members>
</doc>
