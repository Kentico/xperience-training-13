<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Ecommerce</name>
    </assembly>
    <members>
        <member name="T:CMS.Ecommerce.ActivityTrackingHelper">
            <summary>
            Helper methods for logging activities in administration.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ActivityTrackingHelper.GetContactID(CMS.Ecommerce.CustomerInfo,System.Int32)">
            <summary>
            Returns contact ID for particular customer.
            </summary>
            <param name="cust">Customer</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="T:CMS.Ecommerce.EcommerceActivityLogger">
            <summary>
            Provides possibility to log E-commerce activities.
            </summary>
            <remarks>
            Parent product information is logged for product variants. 
            VariantID is logged into <see cref="P:CMS.Activities.IActivityInfo.ActivityItemDetailID"/> field in case that given <see cref="T:CMS.Ecommerce.SKUInfo"/> object is product variant.
            </remarks>
        </member>
        <member name="F:CMS.Ecommerce.EcommerceActivityLogger.mActivityLogService">
            <summary>
            Activity log service instance.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceActivityLogger.#ctor(CMS.Activities.IActivityLogService)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.EcommerceActivityLogger"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="activityLogService"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceActivityLogger.LogProductAddedToShoppingCartActivity(CMS.Ecommerce.SKUInfo,System.Int32)">
            <summary>
            Logs activity product added to shopping cart.
            </summary>
            <param name="sku">SKU info object.</param>
            <param name="quantity">SKU quantity.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceActivityLogger.LogProductRemovedFromShoppingCartActivity(CMS.Ecommerce.SKUInfo,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Logs activity product removed from shopping cart.
            </summary>
            <param name="sku">SKU info object.</param>
            <param name="quantity">SKU quantity.</param>
            <param name="contactID">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceActivityLogger.LogProductAddedToWishlistActivity(CMS.Ecommerce.SKUInfo)">
            <summary>
            Logs activity product added to wish list.
            </summary>
            <param name="sku">SKUInfo object.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceActivityLogger.LogPurchaseActivity(System.Int32,System.Decimal,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Logs purchase activity.
            </summary>
            <param name="orderID">Order ID.</param>
            <param name="totalPrice">Order total price in main currency.</param>
            <param name="totalPriceInCorrectCurrency">String representation of order total price in main currency.</param>
            <param name="loggingDisabledInAdministration"><c>True</c> if activities should not be logged in administration.</param>
            <param name="contactID">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceActivityLogger.LogPurchasedProductActivity(CMS.Ecommerce.SKUInfo,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Logs product purchased activity.
            </summary>
            <param name="sku">SKUInfo object.</param>
            <param name="skuUnits">SKU units.</param>
            <param name="contactID">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity.</param>
        </member>
        <member name="T:CMS.Ecommerce.IEcommerceActivityLogger">
            <summary>
            Provides possibility to log E-commerce activities.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IEcommerceActivityLogger.LogProductAddedToShoppingCartActivity(CMS.Ecommerce.SKUInfo,System.Int32)">
            <summary>
            Logs activity product added to shopping cart.
            </summary>
            <param name="sku">SKU info object.</param>
            <param name="quantity">SKU quantity.</param>
        </member>
        <member name="M:CMS.Ecommerce.IEcommerceActivityLogger.LogProductRemovedFromShoppingCartActivity(CMS.Ecommerce.SKUInfo,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Logs activity product removed from shopping cart.
            </summary>
            <param name="sku">SKU info object.</param>
            <param name="quantity">SKU quantity.</param>
            <param name="contactID">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity.</param>
        </member>
        <member name="M:CMS.Ecommerce.IEcommerceActivityLogger.LogProductAddedToWishlistActivity(CMS.Ecommerce.SKUInfo)">
            <summary>
            Logs activity product added to wish list.
            </summary>
            <param name="sku">SKUInfo object.</param>
        </member>
        <member name="M:CMS.Ecommerce.IEcommerceActivityLogger.LogPurchaseActivity(System.Int32,System.Decimal,System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Logs purchase activity.
            </summary>
            <param name="orderID">Order ID.</param>
            <param name="totalPrice">Order total price in main currency.</param>
            <param name="totalPriceInCorrectCurrency">String representation of order total price in main currency.</param>
            <param name="loggingDisabledInAdministration"><c>True</c> if activities should not be logged in administration.</param>
            <param name="contactID">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity.</param>
        </member>
        <member name="M:CMS.Ecommerce.IEcommerceActivityLogger.LogPurchasedProductActivity(CMS.Ecommerce.SKUInfo,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Logs product purchased activity.
            </summary>
            <param name="sku">SKUInfo object.</param>
            <param name="skuUnits">SKU units.</param>
            <param name="contactID">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity.</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductAddedToShoppingCartActivityInitializer">
            <summary>
            Initializes activity product added to shopping cart
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductAddedToShoppingCartActivityInitializer.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Ecommerce.ProductAddedToShoppingCartActivityInitializer"/>.
            </summary>
            <param name="quantity">SKU quantity</param>
            <param name="skuId">SKU id</param>
            <param name="skuName">SKU name</param>
            <param name="variantID">SKU ID of the selected variant (zero for products without variants)</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAddedToShoppingCartActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Adds information about quantity, product id and name to <see cref="T:CMS.Activities.IActivityInfo"/>.
            </summary>
            <param name="activity"></param>
        </member>
        <member name="T:CMS.Ecommerce.ProductAddedToWishlistActivityInitializer">
            <summary>
            Initializes activity product added to wishlist. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductAddedToWishlistActivityInitializer.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Ecommerce.ProductAddedToWishlistActivityInitializer"/>.
            </summary>
            <param name="skuID">Sku id</param>
            <param name="skuName">Sku name</param>
            <param name="variantID">SKU id of the selected variant (zero for products without variants)</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAddedToWishlistActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Adds information about quantity, product id and name to <see cref="T:CMS.Activities.IActivityInfo"/>.
            </summary>
            <param name="activity"></param>
        </member>
        <member name="P:CMS.Ecommerce.ProductAddedToWishlistActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductAddedToWishlistActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ProductRemovedFromShoppingCartActivityInitializer">
            <summary>
            Initializes activity product removed from shopping cart
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductRemovedFromShoppingCartActivityInitializer.#ctor(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Logs activity product removed from shopping cart.
            </summary>
            <param name="quantity">Sku quantity</param>
            <param name="skuID">Sku id</param>
            <param name="skuName">Sku name</param>
            <param name="variantID">SKU ID of the selected variant (zero for products without variants)</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductRemovedFromShoppingCartActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Adds information about quantity, product id and name to <see cref="T:CMS.Activities.IActivityInfo"/>.
            </summary>
            <param name="activity"></param>
        </member>
        <member name="T:CMS.Ecommerce.PurchaseActivityInitializer">
            <summary>
            Initializes purchase activity. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PurchaseActivityInitializer.#ctor(System.Int32,System.Decimal,System.String)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Ecommerce.PurchaseActivityInitializer"/>.
            </summary>
            <param name="orderId">Order ID</param>
            <param name="totalPrice">Order total price</param>
            <param name="totalPriceInCorrectCurrency">String representation of order total price in correct currency</param>
        </member>
        <member name="M:CMS.Ecommerce.PurchaseActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Adds information about quantity, product id and name to <see cref="T:CMS.Activities.IActivityInfo"/>.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Ecommerce.PurchaseActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PurchaseActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PurchasedProductActivityInitializer">
            <summary>
            Initializes activity purchased product.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AddressConverter">
            <summary>
            Provides conversion methods for addresses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressConverter.Convert(CMS.Ecommerce.OrderAddressInfo)">
            <summary>
            Converts <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> to <see cref="T:CMS.Ecommerce.AddressInfo"/>.
            </summary>
            <param name="orderAddress">Order address to copy data from.</param>
            <returns>New <see cref="T:CMS.Ecommerce.AddressInfo"/> based on <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> data.</returns>
        </member>
        <member name="M:CMS.Ecommerce.AddressConverter.Convert(CMS.Ecommerce.AddressInfo,System.Int32,CMS.Ecommerce.AddressType)">
            <summary>
            Converts <see cref="T:CMS.Ecommerce.AddressInfo"/> to <see cref="T:CMS.Ecommerce.OrderAddressInfo"/>.
            </summary>
            <param name="address">Address to copy data from.</param>
            <param name="orderId">ID of the order to assign address to.</param>
            <param name="addressType">Type of the address.</param>
            <returns>New <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> based on <see cref="T:CMS.Ecommerce.AddressInfo"/> data.</returns>
        </member>
        <member name="M:CMS.Ecommerce.AddressConverter.CopyDataColumns(CMS.DataEngine.BaseInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Copies data from <paramref name="sourceAddress"/> to <paramref name="destinationAddress"/>.
            This method is called from <see cref="M:CMS.Ecommerce.AddressConverter.Convert(CMS.Ecommerce.OrderAddressInfo)"/> and <see cref="M:CMS.Ecommerce.AddressConverter.Convert(CMS.Ecommerce.AddressInfo,System.Int32,CMS.Ecommerce.AddressType)"/>
            to copy data between object types.
            </summary>
            <param name="sourceAddress">Source address to copy data from.</param>
            <param name="destinationAddress">Destination address to copy data to.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartAdapterService">
            <summary>
            Service providing an interface between <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> and the calculation pipeline.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartAdapterService.GetCalculationRequest(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Collects information necessary for the calculation from given <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> and stores it in <see cref="T:CMS.Ecommerce.CalculationRequest"/>.
            </summary>
            <param name="cartInfo">Shopping cart to be calculated</param>
            <returns><see cref="T:CMS.Ecommerce.CalculationRequest"/> filled with relevant information from given <paramref name="cartInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartAdapterService.GetCalculationResult(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates the <see cref="T:CMS.Ecommerce.CalculationResult"/> object used to store calculation results (subtotals, price summaries etc.).
            </summary>
            <param name="cartInfo">Shopping cart to be calculated.</param>
            <returns>Instance of the <see cref="T:CMS.Ecommerce.CalculationResult"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartAdapterService.ApplyCalculationResult(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.CalculationResult)">
            <summary>
            Applies result values to given <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.
            </summary>
            <param name="cartInfo">Shopping cart where the result values should be applied</param>
            <param name="result">Container with calculation result values</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartCalculationFactory">
            <summary>
            Represents factory providing shopping cart calculator implementations.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartCalculationFactory.GetCalculator(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns calculator implementation based on given <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/>.
            </summary>
            <remarks>
            Never return null object! Use empty implementation if needed.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.EmptyCalculatorLoggingService">
            <summary>
            Default empty implementation of <see cref="T:CMS.Ecommerce.ICalculatorLoggingService"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EmptyCalculatorLoggingService.Log(CMS.Ecommerce.CalculatorData)">
            <summary>
            Logs given calculation data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICalculatorLoggingService">
            <summary>
            Provides logging functionality for shopping cart calculation pipeline.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICalculatorLoggingService.Log(CMS.Ecommerce.CalculatorData)">
            <summary>
            Logs given calculation data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CalculationRequest">
            <summary>
            Input data necessary to perform calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.Items">
            <summary>
            Items to be calculated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.Currency">
            <summary>
            Currency in what the calculation is to be performed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.PaymentOption">
            <summary>
            The method of the payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.Site">
            <summary>
            Site on which the calculation occurs.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.User">
            <summary>
            User for whom the calculation happens.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.Customer">
            <summary>
            Customer for whom the calculation happens.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.CouponCodes">
            <summary>
            Collection of coupon codes affecting the calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.BillingAddress">
            <summary>
            Billing address for the resulting order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.ShippingAddress">
            <summary>
            Shipping address for the resulting order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.ShippingOption">
            <summary>
            Shipping method for the resulting order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.TotalItemsWeight">
            <summary>
            Sum of all items' weight.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.RequestCustomData">
            <summary>
            Calculation request custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.CalculationDate">
            <summary>
            Date and time when discounts and taxes are to be valid.
            <remarks>
            For most price calculations, the value is equal to the current time. 
            When calculating prices for existing orders, the values is equal to the date and time when the order was created.
            </remarks>
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequest.OrderId">
            <summary>
            Gets the order ID in case that calculation runs for already created order.
            </summary>
            <remarks>
            Returns 0 value when calculation runs prior order creation.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.CalculationRequestItem">
            <summary>
            Item to be processed in a calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.ItemGuid">
            <summary>
            Identifier of the corresponding cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.SKU">
            <summary>
            Item's SKU
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.Quantity">
            <summary>
            Item quantity
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.AutoAddedQuantity">
            <summary>
            The quantity of the item which was automatically added.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.Options">
            <summary>
            Options that modify or customize the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.ItemCustomData">
            <summary>
            Request item custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItem.PriceOverride">
            <summary>
            Prices which are used in the calculation instead of the calculation from the <see cref="P:CMS.Ecommerce.CalculationRequestItem.SKU"/> with the <see cref="T:CMS.Ecommerce.IProductPricingService"/> implementation.
            <see cref="P:CMS.Ecommerce.ProductPrices.Price"/> represents unit price with applied catalog-level discounts.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CalculationRequestItemOption">
            <summary>
            Option that may provide modification or customization of an item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItemOption.OptionGuid">
            <summary>
            Identifier of the corresponding cart item option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationRequestItemOption.SKU">
            <summary>
            Item option's SKU
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CalculationResult">
            <summary>
            Result data of a calculation
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.GrandTotal">
            <summary>
            The final value to be paid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.Total">
            <summary>
            The total price of all items, shipping and taxes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.Subtotal">
            <summary>
            The sum of prices of all items.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.Shipping">
            <summary>
            The price for shipping.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.Tax">
            <summary>
            Total tax value.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.TaxSummary">
            <summary>
            The summary of taxes applied during the calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.Items">
            <summary>
            Collection of detailed information for each cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.OrderDiscount">
            <summary>
            Discount which is applied to the items total price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.OrderDiscountSummary">
            <summary>
            The summary of discounts applied to the items total price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.OtherPayments">
            <summary>
            Sum of all side payments used. E.g. gift card
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.OtherPaymentsApplications">
            <summary>
            Other payment application summary.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResult.AppliedCouponCodes">
            <summary>
            List of the applied coupon codes.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CalculationResultItem">
            <summary>
            Detailed information of an item included in the calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.ItemGuid">
            <summary>
            Identifier of the corresponding cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.UnitDiscount">
            <summary>
            Value of the discount applied on each unit of the item.
            </summary>
            <remarks>
            This discount is included in <see cref="P:CMS.Ecommerce.CalculationResultItem.ItemUnitPrice"/>. Summary of item discounts can be found in <see cref="P:CMS.Ecommerce.CalculationResultItem.UnitDiscountSummary"/>.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.UnitDiscountSummary">
            <summary>
            The summary of discounts applied on each unit of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.ItemUnitPrice">
            <summary>
            Unit price of the item. This value includes <see cref="P:CMS.Ecommerce.CalculationResultItem.UnitDiscount"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.ItemDiscount">
            <summary>
            Value of the item discount.
            </summary>
            <remarks>
            This discount is included in <see cref="P:CMS.Ecommerce.CalculationResultItem.LineSubtotal"/>. Summary of item discounts can be found in <see cref="P:CMS.Ecommerce.CalculationResultItem.ItemDiscountSummary"/>.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.ItemDiscountSummary">
            <summary>
            The summary of discounts applied on this item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculationResultItem.LineSubtotal">
            <summary>
            Total price of the item.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartAdapterService">
            <summary>
            Service providing an interface between <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> and the calculation pipeline.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.GetCalculationRequest(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Collects information necessary for the calculation from given <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> and stores it in <see cref="T:CMS.Ecommerce.CalculationRequest"/>.
            </summary>
            <param name="cartInfo">Shopping cart to be calculated</param>
            <returns><see cref="T:CMS.Ecommerce.CalculationRequest"/> filled with relevant information from given <paramref name="cartInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.GetCalculationResult(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates the <see cref="T:CMS.Ecommerce.CalculationResult"/> object used to store calculation result (subtotals, price summaries etc.).
            <see cref="P:CMS.Ecommerce.CalculationResult.Items"/> collection contains <see cref="T:CMS.Ecommerce.CalculationResultItem"/> items.
            </summary>
            <param name="cartInfo">Shopping cart to be calculated.</param>
            <returns>Instance of the <see cref="T:CMS.Ecommerce.CalculationResult"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.ApplyCalculationResult(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.CalculationResult)">
            <summary>
            Applies result values to given <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.
            Override this method to change the way the calculation result is applied to the shopping cart.
            </summary>
            <param name="cartInfo">Shopping cart where the result values should be applied</param>
            <param name="result">Container with calculation result values</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.CreateRequest">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CalculationRequest"/>.
            Override this method to use a derived request implementation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.CreateRequestItem">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CalculationRequestItem"/>.
            Override this method to use a derived request item implementation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.CreateRequestItemOption">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CalculationRequestItemOption"/>.
            Override this method to use a derived request item option implementation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.CreateResult">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CalculationResult"/>.
            Override this method to use a derived result implementation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.CreateResultItem">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CalculationResultItem"/>.
            Override this method to use a derived result item implementation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartAdapterService.ApplyResultToItem(CMS.Ecommerce.ShoppingCartItemInfo,CMS.Ecommerce.CalculationResultItem)">
            <summary>
            Applies the <paramref name="resultItem"/> to the <paramref name="cartItem"/>.
            Override this method to change the way the calculation result is applied to the cart item.
            </summary>
            <param name="cartItem">Shopping cart item to apply result to.</param>
            <param name="resultItem">Result of the calculation to be applied</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartCalculationFactory">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IShoppingCartCalculationFactory"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCalculationFactory.GetCalculator(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns calculator implementation based on given <see cref="T:CMS.DataEngine.SiteInfoIdentifier"/>.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CalculatorData">
            <summary>
            Holds data required to perform shopping cart calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculatorData.Request">
            <summary>
            Gets calculation request data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CalculatorData.Result">
            <summary>
            Gets calculation output data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CalculatorData.#ctor(CMS.Ecommerce.CalculationRequest,CMS.Ecommerce.CalculationResult)">
            <summary>
            Instantiates new instance of <see cref="T:CMS.Ecommerce.CalculatorData"/> with given input data <see cref="T:CMS.Ecommerce.CalculationRequest"/> and output data <see cref="T:CMS.Ecommerce.CalculationResult"/>.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CartItemDiscountCalculator">
            <summary>
            Provides cart item discount calculation (product coupon and multibuy discounts).
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CartItemDiscountCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Calculates the values of multibuy discounts and stores them to <see cref="P:CMS.Ecommerce.CalculationResultItem.ItemDiscount"/> property.
            </summary>
            <param name="calculationData">All calculation related data.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartCalculator">
            <summary>
            Represents one part of shopping cart calculation pipeline.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Runs shopping cart calculation based on given calculation related data.
            </summary>
            <param name="calculationData">All calculation related data.</param>
            <remarks>
            Given <see cref="P:CMS.Ecommerce.CalculatorData.Result"/> is modified during calculation process.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.OrderDiscountsCalculator">
            <summary>
            Calculation step providing calculation of order discounts. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderDiscountsCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Calculates the values of order discounts and stores them to <see cref="P:CMS.Ecommerce.CalculationResult.OrderDiscount"/> property.
            </summary>
            <param name="calculationData">All calculation related data.</param>
        </member>
        <member name="T:CMS.Ecommerce.OtherPaymentsCalculator">
            <summary>
            Calculation step providing calculation of the other payments such as gift cards. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OtherPaymentsCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Evaluates other payments applications.
            </summary>
            <param name="calculationData">Cart calculation data</param>
        </member>
        <member name="T:CMS.Ecommerce.ShippingCalculator">
            <summary>
            Provides calculation of shipping price.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Runs shipping calculation based on given calculation related data.
            </summary>
            <param name="calculationData">All calculation related data.</param>
            <remarks>
            Calculator uses the default implementation of the <see cref="T:CMS.Ecommerce.IShippingPriceService"/> to determine the shipping price.
            Given <see cref="P:CMS.Ecommerce.CalculatorData.Result"/> is modified during calculation process.
            Calculates <see cref="P:CMS.Ecommerce.CalculationResult.Shipping"/> price.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartCalculatorCollection">
            <summary>
            Represents the ordered collection of calculation pipeline actions performing shopping cart calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCalculatorCollection.#ctor(System.Collections.Generic.IEnumerable{CMS.Ecommerce.IShoppingCartCalculator})">
            <summary>
            Instantiates a new <see cref="T:CMS.Ecommerce.ShoppingCartCalculatorCollection"/> with given particular calculators.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCalculatorCollection.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Runs shopping cart calculation on given data.
            </summary>
            <param name="calculationData">All calculation related data.</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxCalculator">
            <summary>
            Provides tax calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Runs shopping cart calculation based on given calculation related data.
            </summary>
            <param name="calculationData">All calculation related data.</param>
            <remarks>
            Calculates <see cref="P:CMS.Ecommerce.CalculationResult.Tax"/> value.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.TotalValuesCalculator">
            <summary>
            Provides total shopping cart price calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TotalValuesCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Runs shopping cart calculation based on given calculation related data.
            </summary>
            <param name="calculationData">All calculation related data.</param>
            <remarks>
            Given <see cref="P:CMS.Ecommerce.CalculatorData.Result"/> is modified during calculation process.
            Calculates <see cref="P:CMS.Ecommerce.CalculationResultItem.LineSubtotal"/> values for each result item.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.TotalValuesCalculator.CalculateSubtotal(CMS.Ecommerce.CalculatorData)">
            <summary>
            Returns sum price of all items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TotalValuesCalculator.CalculateTotal(CMS.Ecommerce.CalculatorData)">
            <summary>
            Returns total price of all items including shipping and taxes.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TotalValuesCalculator.CalculateGrandTotal(CMS.Ecommerce.CalculatorData)">
            <summary>
            Returns total price lowered by other payments.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.UnitPriceCalculator">
            <summary>
            Provides calculation of cart items' unit prices.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.UnitPriceCalculator.Calculate(CMS.Ecommerce.CalculatorData)">
            <summary>
            Calculates the unit price for the each item in the <see cref="P:CMS.Ecommerce.CalculationRequest.Items"/> collection.
            Unit price including catalog-level discounts is stored in the corresponding <see cref="P:CMS.Ecommerce.CalculationResult.Items"/>.
            </summary>
            <param name="calculationData">All calculation related data.</param>
        </member>
        <member name="M:CMS.Ecommerce.UnitPriceCalculator.CalculateUnitPrice(CMS.Ecommerce.CalculationRequestItem,CMS.Ecommerce.CalculationRequest,CMS.Ecommerce.CalculationResult)">
            <summary>
            Calculates the price of one shopping cart item unit based on calculation request data.
            </summary>
            <param name="item">Item to be calculated</param>
            <param name="request">Calculation request data</param>
            <param name="result">Calculation result</param>
        </member>
        <member name="M:CMS.Ecommerce.UnitPriceCalculator.GetUnitsCount(CMS.Ecommerce.CalculationRequestItem,System.Collections.Generic.IEnumerable{CMS.Ecommerce.CalculationRequestItem})">
            <summary>
            Gets the units count for specified cart item.
            </summary>
            <param name="item">Item for which units count is calculated</param>
            <param name="items">All items from the calculation request</param>
        </member>
        <member name="T:CMS.Ecommerce.CheckoutProcessEnum">
            <summary>
            Type of checkout process.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CheckoutProcessEnum.CMSDeskOrder">
            <summary>
            Checkout process for the CMSDesk order section.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CheckoutProcessEnum.CMSDeskOrderItems">
            <summary>
            Checkout process for the CMSDesk order items section.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CheckoutProcessEnum.CMSDeskCustomer">
            <summary>
            Checkout process for the CMSDesk customer section.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CheckoutProcessInfo">
            <summary>
            Class providing checkout process definition management.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CheckoutProcessInfo.STEP_INDEX_NOT_KNOWN">
            <summary>
            This constants says that index of the step is not known.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessInfo.RootNode">
            <summary>
            Root node of the checkout process xml definition.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.SetCheckoutProcessStepNode(CMS.Ecommerce.CheckoutProcessStepInfo)">
            <summary>
            Updates/inserts checkout step node in/into xml definition.
            </summary>
            <param name="stepObj">Checkout step data object with new step information</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.ReplaceCheckoutProcessStepNode(CMS.Ecommerce.CheckoutProcessStepInfo,System.String)">
            <summary>
            Updates/inserts checkout step node in/into xml definition.
            </summary>
            <param name="stepObj">Checkout step data object with new step information</param>
            <param name="originalName">Name of the node to be replaced</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.RemoveCheckoutProcessStepNode(System.String)">
            <summary>
            Removes checkout step from the XML.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.MoveCheckoutProcessStepNodeUp(System.String)">
            <summary>
            Moves specified step up.
            </summary>
            <param name="stepName">Name of the step to move</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.MoveCheckoutProcessStepNodeDown(System.String)">
            <summary>
            Moves specified step down.
            </summary>
            <param name="stepName">Name of the step to move</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetCheckoutProcessStepNode(System.String)">
            <summary>
            Returns checkout step node according to the specified step name.
            </summary>
            <param name="stepName">Checkout step name</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetCheckoutProcessStepInfo(System.String)">
            <summary>
            Returns CheckoutProcessStepInfo object created from the xml node of the specified name attribute.
            </summary>
            <param name="stepName">Step name</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetCheckoutProcessStepInfo(System.Int32)">
            <summary>
            Returns CheckoutProcessStepInfo object created from the xml node of the specified order(index).
            </summary>
            <param name="index">Index of the step to be returned</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetCheckoutProcessSteps(CMS.Ecommerce.CheckoutProcessEnum)">
            <summary>
            Returns list of steps for the specified type of checkout process.
            </summary>
            <param name="process">Checkout process type</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.LoadXmlDefinition(System.String)">
            <summary>
            Loads checkout process xml definition.
            </summary>
            <param name="definition">Checkout process xml definition</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetXmlDefinition">
            <summary>
            Returns checkout process xml form definition.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetDataTableFromXmlDefinition">
            <summary>
            Returns DataTable with steps for specified checkout process.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.CreateCheckoutProcessRow(System.Data.DataTable,CMS.Ecommerce.CheckoutProcessStepInfo)">
            <summary>
            Creates table row with checkout step information.
            </summary>
            <param name="checkoutProcessTable">Checkout step table</param>
            <param name="stepObj">Checkout step information</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.CreateCheckoutProcessTable">
            <summary>
            Returns the empty checkout process table.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.GetCheckoutProcessStepNodes(CMS.Ecommerce.CheckoutProcessEnum)">
            <summary>
            Returns checkout step nodes of the specified checkout process.
            </summary>
            <param name="process">Checkout process type</param>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.#ctor">
            <summary>
            Constructor - creates empty checkout process object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessInfo.#ctor(System.String)">
            <summary>
            Constructor - loads checkout process xml definition.
            </summary>
            <param name="definition">Checkout process xml definition</param>
        </member>
        <member name="T:CMS.Ecommerce.CheckoutProcessStepInfo">
            <summary>
            Checkout process step object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.Caption">
            <summary>
            Step caption.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.Name">
            <summary>
            Step code name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.Icon">
            <summary>
            Step icon.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.ControlPath">
            <summary>
            ASCX control path.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.ShowInCMSDeskOrder">
            <summary>
            Indicates whether step should be included in checkout process in CMSDesk Order section.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.ShowInCMSDeskOrderItems">
            <summary>
            Indicates whether step should be included in checkout process in CMSDesk Order/Items section
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.ShowInCMSDeskCustomer">
            <summary>
            Indicates whether step should be included in checkout process in CMSDesk Customer section.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CheckoutProcessStepInfo.StepIndex">
            <summary>
            Zero based step index - initialized when creating list of checkout process steps.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessStepInfo.#ctor">
            <summary>
            Constructor - creates empty checkout process step object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CheckoutProcessStepInfo.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor - creates checkout process step object from XML node data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.BrandInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.BrandInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BrandInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BrandInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandID">
            <summary>
            Brand ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandName">
            <summary>
            Brand name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandDisplayName">
            <summary>
            Brand display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandDescription">
            <summary>
            Brand description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandHomepage">
            <summary>
            Brand homepage.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandThumbnailGUID">
            <summary>
            Brand thumbnail GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandSiteID">
            <summary>
            Brand site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandEnabled">
            <summary>
            Brand enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandGuid">
            <summary>
            Brand guid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BrandInfo.BrandLastModified">
            <summary>
            Brand last modified.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.BrandInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instances of the <see cref="T:CMS.Ecommerce.BrandInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.BrandInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.BrandInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:CMS.Ecommerce.BrandInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.GetBrands">
            <summary>
            Returns a query for all the <see cref="T:CMS.Ecommerce.BrandInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.GetBrandInfo(System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.BrandInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.BrandInfo"/> ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.GetBrandInfo(System.String,System.String)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.BrandInfo"/> with specified name.
            </summary>
            <param name="name"><see cref="T:CMS.Ecommerce.BrandInfo"/> name.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.SetBrandInfo(CMS.Ecommerce.BrandInfo)">
            <summary>
            Sets (updates or inserts) specified <see cref="T:CMS.Ecommerce.BrandInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.BrandInfo"/> to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.DeleteBrandInfo(CMS.Ecommerce.BrandInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.BrandInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.BrandInfo"/> to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.BrandInfoProvider.DeleteBrandInfo(System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.BrandInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.BrandInfo"/> ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.IBrandInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.BrandInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CollectionInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.CollectionInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CollectionInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CollectionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionID">
            <summary>
            Collection ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionDisplayName">
            <summary>
            The collection name displayed to users on the live site and in the administration interface..
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionName">
            <summary>
            Collection name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionDescription">
            <summary>
            Collection description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionSiteID">
            <summary>
            Collection site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionEnabled">
            <summary>
            Collection enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionGuid">
            <summary>
            Collection guid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CollectionInfo.CollectionLastModified">
            <summary>
            Collection last modified.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.CollectionInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instances of the <see cref="T:CMS.Ecommerce.CollectionInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.CollectionInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.CollectionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:CMS.Ecommerce.CollectionInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.GetCollections">
            <summary>
            Returns a query for all the <see cref="T:CMS.Ecommerce.CollectionInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.GetCollectionInfo(System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.CollectionInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.CollectionInfo"/> ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.GetCollectionInfo(System.String,System.String)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.CollectionInfo"/> with specified name.
            </summary>
            <param name="name"><see cref="T:CMS.Ecommerce.CollectionInfo"/> name.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.SetCollectionInfo(CMS.Ecommerce.CollectionInfo)">
            <summary>
            Sets (updates or inserts) specified <see cref="T:CMS.Ecommerce.CollectionInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.CollectionInfo"/> to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.DeleteCollectionInfo(CMS.Ecommerce.CollectionInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.CollectionInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.CollectionInfo"/> to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.CollectionInfoProvider.DeleteCollectionInfo(System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.CollectionInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.CollectionInfo"/> ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICollectionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.CollectionInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CurrencyInfo">
            <summary>
            CurrencyInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CurrencyInfo.DEFAULT_ROUNDING_DECIMALS">
            <summary>
            Default number of decimals for rounding
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CurrencyInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CurrencyInfo.TYPEINFO">
            <summary>
            Type information
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyDisplayName">
            <summary>
            Currency display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyName">
            <summary>
            Currency code name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyCode">
            <summary>
            Currency code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyID">
            <summary>
            Currency ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyEnabled">
            <summary>
            Indicates if currency is enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyIsMain">
            <summary>
            Indicates if currency is main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyFormatString">
            <summary>
            Currency formatting string.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyRoundTo">
            <summary>
            Number of digits the price in this currency is rounded to. Default value is <c>2</c>, it corresponds to the "{0:0.00}" formatting string.
            </summary>
            <seealso cref="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedValue(System.Decimal,CMS.Ecommerce.CurrencyInfo)"/>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyGUID">
            <summary>
            Currency GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencyLastModified">
            <summary>
            Date and time when the currency was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfo.CurrencySiteID">
            <summary>
            Currency site ID. Set to 0 for global currency.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.FormatPrice(System.Decimal)">
            <summary>
            Returns price HTML encoded and formatted according to <see cref="P:CMS.Ecommerce.CurrencyInfo.CurrencyFormatString"/>.
            </summary>
            <param name="price">Price to be formatted.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.#ctor">
            <summary>
            Constructor - Creates an empty CurrencyInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new CurrencyInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.LoadDefaultData">
            <summary>
            Loads the default object data
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.CurrencyInfoProvider">
            <summary>
            Class providing CurrencyInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CurrencyInfoProvider.mMainCurrencies">
            <summary>
            Main currencies indexed by the site ID
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CurrencyInfoProvider.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyInfoProvider.MainCurrencies">
            <summary>
            Main currencies indexed by the site ID
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrencies">
            <summary>
            Returns the query for all currencies.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrencyInfo(System.Int32)">
            <summary>
            Returns currency with specified ID.
            </summary>
            <param name="currencyId">Currency ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.CurrencyInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.CurrencyInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrencyInfo(System.String,System.String)">
            <summary>
            Returns currency with specified name.
            </summary>
            <param name="currencyName">Currency name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.SetCurrencyInfo(CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Sets (updates or inserts) specified currency.
            </summary>
            <param name="currencyObj">Currency to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.DeleteCurrencyInfo(CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Deletes specified currency.
            </summary>
            <param name="currencyObj">Currency to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.DeleteCurrencyInfo(System.Int32)">
            <summary>
            Deletes currency with specified ID.
            </summary>
            <param name="currencyId">Currency ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrencies(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all currencies matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the currencies should be retrieved from. If set to 0, global currencies are retrieved</param>
            <param name="onlyEnabled">If true, only enabled currencies are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.IsCurrencyWithExchangeRate(System.Int32,System.Int32)">
            <summary>
            Returns true if site specified by its ID has defined exchange rate to given currency. Only enabled currencies are searched.
            </summary>
            <param name="currencyId">ID of currency to be looked for</param>
            <param name="siteId">ID of the site to get exchange table for</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetMainCurrency(System.Int32)">
            <summary>
            Returns main currency of the specified site.
            </summary>
            <param name="siteId">Site ID for site main currency or 0 for global main currency</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetMainCurrencyCode(System.Int32)">
            <summary>
            Returns code of main currency for given site. Returns empty string when not found.
            </summary>
            <param name="siteId">Site ID for site main currency or 0 for global main currency</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrenciesByCode(System.Int32)">
            <summary>
            Returns CurrencyInfo objects present on given site in form of dictionary mapping currency code to CurrencyInfo object.
            </summary>
            <param name="siteId">ID of the site to get currencies for. 'Use global currencies' setting is considered.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetRelativelyFormattedPrice(System.Decimal,CMS.Ecommerce.CurrencyInfo,System.Boolean)">
            <summary>
            Returns HTML encoded (depends on <paramref name="encode"/> parameter) and relatively formatted price according to <see cref="P:CMS.Ecommerce.CurrencyInfo.CurrencyFormatString"/> defined for <paramref name="currencyObj"/> parameter.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="currencyObj">Currency which supplies formatting string</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetRelativelyFormattedPrice(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            Returns HTML encoded (depends on <paramref name="encode"/> parameter) and relatively formatted price according to <see cref="P:CMS.Ecommerce.CurrencyInfo.CurrencyFormatString"/> defined for specified site main currency.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="siteId">ID of the site which main currency has to be used for formatting</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedPrice(System.Decimal,CMS.Ecommerce.CurrencyInfo,System.Boolean)">
            <summary>
            Returns HTML encoded (depends on <paramref name="encode"/> parameter) and formatted price according to <see cref="P:CMS.Ecommerce.CurrencyInfo.CurrencyFormatString"/> defined for <paramref name="currencyObj"/> parameter. 
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="currencyObj">Currency which supplies formatting string</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedPrice(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            Returns HTML encoded (depends on <paramref name="encode"/> parameter) and formatted price according to <see cref="P:CMS.Ecommerce.CurrencyInfo.CurrencyFormatString"/> defined for specified site main currency.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="siteId">ID of the site which main currency has to be used for formatting</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedValue(System.Decimal,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns formatted price according to <see cref="P:CMS.Ecommerce.CurrencyInfo.CurrencyRoundTo"/>. 
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="currencyObj">
            Currency which can supply formatting string or 'round to' parameter - number of digits the price should be rounded to. 
            By default currency has no effect to the result and formatting string "{0:0.00}" is used.
            </param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.ChangeMainCurrency(System.Int32,System.Int32)">
            <summary>
            Changes main currency.
            </summary>
            <param name="siteId">ID of the site, which main currency is to be changed</param>
            <param name="newCurrencyId">ID of the new main currency</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrencyInfoInternal(System.String,System.String)">
            <summary>
            Returns currency with specified name from specified site.
            </summary>
            <param name="currencyName">Currency name</param>                
            <param name="siteName">Site name. Use null for global currency</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.SetInfo(CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.DeleteInfo(CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrenciesInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all currencies matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the currencies should be retrieved from. If set to 0, global currencies are retrieved</param>
            <param name="onlyEnabled">True - only enabled currencies from the specified site are returned. False - all site currencies are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.IsCurrencyWithExchangeRateInternal(System.Int32,System.Int32)">
            <summary>
            Returns true if site specified by its ID has defined exchange rate to given currency. Only enabled currencies are searched.
            </summary>
            <param name="currencyId">ID of currency to be looked for</param>
            <param name="siteId">ID of the site to get exchange table for</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetMainCurrencyInternal(System.Int32)">
            <summary>
            Returns main currency of specified site.
            </summary>
            <param name="siteId">Site ID for site main currency or 0 for global main currency</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetMainCurrencyCodeInternal(System.Int32)">
            <summary>
            Returns main currency code for given site or empty string when not found.
            </summary>
            <param name="siteId">Site ID for site main currency or 0 for global main currency code</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetCurrenciesByCodeInternal(System.Int32)">
            <summary>
            Returns CurrencyInfo objects present on given site in form of dictionary mapping currency code to CurrencyInfo object.
            </summary>
            <param name="siteId">ID of the site to get currencies for. 'Use global currencies' setting is considered.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetRelativelyFormattedPriceInternal(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            Returns relatively formatted price according to formatting string of the specified site main currency.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="siteId">Id of the site which main currency has to be used for formatting</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetRelativelyFormattedPriceInternal(System.Decimal,CMS.Ecommerce.CurrencyInfo,System.Boolean)">
            <summary>
            Returns relatively formatted price according to formatting string of the specified currency.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="currencyObj">Currency which supplies formatting string</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedPriceInternal(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            Returns formatted price according to formatting string of the specified site main currency.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="siteId">Id of the site which main currency has to be used for formatting</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedPriceInternal(System.Decimal,CMS.Ecommerce.CurrencyInfo,System.Boolean)">
            <summary>
            Returns formatted price according to formatting string of the specified currency.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="currencyObj">Currency which supplies formatting string</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.GetFormattedValueInternal(System.Decimal,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns formatted price, by default formatting string "{0:0.00}" is used.
            </summary>
            <param name="price">Price to be formatted</param>
            <param name="currencyObj">
            Currency which can supply formatting string or 'round to' parameter - number of digits the price should be rounded to. 
            By default currency has no effect to the result and formatting string "{0:0.00}" is used.
            </param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.ChangeMainCurrencyInternal(System.Int32,System.Int32)">
            <summary>
            Changes main currency.
            </summary>
            <param name="siteId">ID of the site, which main currency is to be changed</param>
            <param name="newCurrencyId">ID of the new main currency</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyInfoProvider.LoadMainCurrencies">
            <summary>
            Loads all main currencies to hashtable.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICurrencyInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.CurrencyInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ISiteMainCurrencySource">
            <summary>
            Defines the members for a service providing a main currency for sites.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISiteMainCurrencySource.GetSiteMainCurrency(System.Int32)">
            <summary>
            Returns a main currency of the specified site.
            </summary>
            <param name="siteId">An ID of the site. Use <c>0</c> for global main currency.</param>
        </member>
        <member name="M:CMS.Ecommerce.ISiteMainCurrencySource.GetSiteMainCurrencyCode(System.Int32)">
            <summary>
            Returns a code of main currency for given site. Returns an empty string when not found.
            </summary>
            <param name="siteId">An ID of the site. Use <c>0</c> for global main currency.</param>
        </member>
        <member name="T:CMS.Ecommerce.SiteMainCurrencySource">
            <summary>
            Represents a source of site's main currencies.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SiteMainCurrencySource.GetSiteMainCurrency(System.Int32)">
            <summary>
            Returns a main currency of the specified site.
            </summary>
            <param name="siteId">An ID of the site. Use <c>0</c> for global main currency.</param>
        </member>
        <member name="M:CMS.Ecommerce.SiteMainCurrencySource.GetSiteMainCurrencyCode(System.Int32)">
            <summary>
            Returns a code of main currency for given site. Returns an empty string when not found.
            </summary>
            <param name="siteId">An ID of the site. Use <c>0</c> for global main currency.</param>
        </member>
        <member name="T:CMS.Ecommerce.DepartmentInfo">
            <summary>
            DepartmentInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DepartmentInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DepartmentInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentName">
            <summary>
            Code name of the department.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentID">
            <summary>
            ID of the department.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentDisplayName">
            <summary>
            Display name of the department.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentDefaultTaxClassID">
            <summary>
            Department default tax class ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentGUID">
            <summary>
            Department GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DepartmentInfo.DepartmentSiteID">
            <summary>
            Department site ID. Set to 0 for global department.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfo.#ctor">
            <summary>
            Constructor - Creates an empty DepartmentInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new DepartmentInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.DepartmentInfoProvider">
            <summary>
            Class providing DepartmentInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetDepartments">
            <summary>
            Returns the query for all departments.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetDepartmentInfo(System.Int32)">
            <summary>
            Returns department with specified ID.
            </summary>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.DepartmentInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.DepartmentInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetDepartmentInfo(System.String,System.String)">
            <summary>
            Returns department with specified name.
            </summary>
            <param name="departmentName">Department name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.SetDepartmentInfo(CMS.Ecommerce.DepartmentInfo)">
            <summary>
            Sets (updates or inserts) specified department.
            </summary>
            <param name="departmentObj">Department to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.DeleteDepartmentInfo(CMS.Ecommerce.DepartmentInfo)">
            <summary>
            Deletes specified department.
            </summary>
            <param name="departmentObj">Department to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.DeleteDepartmentInfo(System.Int32)">
            <summary>
            Deletes department with specified ID.
            </summary>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetDepartments(System.Int32)">
            <summary>
            Returns the query for all departments on specified site.
            </summary>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetDepartmentInfoInternal(System.String,System.String)">
            <summary>
            Returns department with specified name.
            </summary>
            <param name="departmentName">Department name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.SetInfo(CMS.Ecommerce.DepartmentInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentInfoProvider.GetDepartmentsInternal(System.Int32)">
            <summary>
            Returns the query for all departments on specified site.
            </summary>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="T:CMS.Ecommerce.IDepartmentInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.DepartmentInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CurrencyConverter">
            <summary>
            Static wrapper for currency conversion service.
            </summary>    
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.Convert(System.Decimal,System.String,System.String,System.Int32)">
            <summary>
            Converts given monetary amount expressed in one currency to another currency using site specific conversion.
            </summary>
            <param name="amount">Amount to be converted.</param>
            <param name="inCurrencyCode">Code of the currency in which the amount is expressed (e.g. USD).</param>
            <param name="toCurrencyCode">Code of the currency to convert amount to (e.g. EUR).</param>
            <param name="siteID">ID of the site on which the conversion is done.</param>
            <returns>Amount converted to target currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.Convert(System.Decimal,System.Boolean,System.String,System.Int32)">
            <summary>
            Converts given monetary amount expressed main currency to different currency using site specific conversion.
            </summary>
            <param name="amountInMain">Amount in.</param>
            <param name="inGlobalMain">Indicates if amount is expressed in global main currency. Amount is in site main currency when set to false.</param>
            <param name="toCurrencyCode">Code of the currency to convert amount to (e.g. EUR).</param>
            <param name="siteID">ID of the site on which the conversion is done.</param>
            <returns>Amount converted to target currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.GetExchangeRate(System.String,System.String,System.Int32)">
            <summary>
            Calculates exchange rate for conversion from one currency to another. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <returns>Exchange rate from one currency to another currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.TryGetExchangeRate(System.String,System.String,System.Int32,System.Decimal@)">
            <summary>
            Calculates exchange rate for conversion from one currency to another. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            All exceptions are logged into event log.
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <param name="rate">When this method returns, contains exchange rate from one currency to another currency on specific site.</param>
            <returns>True if exchange rate was obtained successfully; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.GetExchangeRate(System.Boolean,System.String,System.Int32)">
            <summary>
            Calculates exchange rate for conversion from main currency to different currency. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            </summary>
            <param name="fromGlobalMain">Indicates if conversion is done from global main currency or from site main currency.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <returns>Exchange rate from main currency to another currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.TryGetExchangeRate(System.Boolean,System.String,System.Int32,System.Decimal@)">
            <summary>
            Calculates exchange rate for conversion from main currency to different currency. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            All exceptions are logged into event log.
            </summary>
            <param name="fromGlobalMain">Indicates if conversion is done from global main currency or from site main currency.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <param name="rate">When this method returns, contains exchange rate from main currency to different currency on specific site.</param>
            <returns>True if exchange rate was obtained successfully; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverter.ApplyExchangeRate(System.Decimal,System.Decimal)">
            <summary>
            Applies given exchange rate to monetary amount. If rate is negative or zero, amount is returned with no change.
            </summary>
            <param name="amount">Monetary amount.</param>
            <param name="rate">Exchange rate to be applied.</param>
            <returns>Amount converted using given rate.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CurrencyConverterService">
            <summary>
            Currency conversion service.
            </summary> 
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.#ctor(CMS.Core.IEventLogService,CMS.Ecommerce.ICurrencyConverterFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CurrencyConverter"/>.
            </summary>
            <param name="eventLogService">Service for logging events.</param>
            <param name="currencyConverterFactory">Creates new <see cref="T:CMS.Ecommerce.ICurrencyConverter"/> objects.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.ApplyExchangeRate(System.Decimal,System.Decimal)">
            <summary>
            Applies given exchange rate to monetary amount. If rate is negative or zero, amount is returned with no change.
            </summary>
            <param name="amount">Monetary amount.</param>
            <param name="rate">Exchange rate to be applied.</param>
            <returns>Amount converted using given rate.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.Convert(System.Decimal,System.Boolean,System.String,System.Int32)">
            <summary>
            Converts given monetary amount expressed main currency to different currency using site specific conversion.
            </summary>
            <param name="amountInMain">Amount in.</param>
            <param name="inGlobalMain">Indicates if amount is expressed in global main currency. Amount is in site main currency when set to false.</param>
            <param name="toCurrencyCode">Code of the currency to convert amount to (e.g. EUR).</param>
            <param name="siteID">ID of the site on which the conversion is done.</param>
            <returns>Amount converted to target currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.Convert(System.Decimal,System.String,System.String,System.Int32)">
            <summary>
            Converts given monetary amount expressed in one currency to another currency using site specific conversion.
            </summary>
            <param name="amount">Amount to be converted.</param>
            <param name="inCurrencyCode">Code of the currency in which the amount is expressed (e.g. USD).</param>
            <param name="toCurrencyCode">Code of the currency to convert amount to (e.g. EUR).</param>
            <param name="siteID">ID of the site on which the conversion is done.</param>
            <returns>Amount converted to target currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.GetExchangeRate(System.Boolean,System.String,System.Int32)">
            <summary>
            Calculates exchange rate for conversion from main currency to different currency. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            </summary>
            <param name="fromGlobalMain">Indicates if conversion is done from global main currency or from site main currency.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <returns>Exchange rate from main currency to another currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.GetExchangeRate(System.String,System.String,System.Int32)">
            <summary>
            Calculates exchange rate for conversion from one currency to another. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <returns>Exchange rate from one currency to another currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.TryGetExchangeRate(System.Boolean,System.String,System.Int32,System.Decimal@)">
            <summary>
            Calculates exchange rate for conversion from main currency to different currency. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            All exceptions are logged into event log.
            </summary>
            <param name="fromGlobalMain">Indicates if conversion is done from global main currency or from site main currency.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <param name="rate">When this method returns, contains exchange rate from main currency to different currency on specific site.</param>
            <returns>True if exchange rate was obtained successfully; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.TryGetExchangeRate(System.String,System.String,System.Int32,System.Decimal@)">
            <summary>
            Calculates exchange rate for conversion from one currency to another. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            All exceptions are logged into event log.
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <param name="rate">When this method returns, contains exchange rate from one currency to another currency on specific site.</param>
            <returns>True if exchange rate was obtained successfully; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrencyConverterService.GetConverter(System.Int32)">
            <summary>
            Returns currency converter used on given site.
            </summary>
            <param name="siteID">ID of the site to get currency converter for.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverter.#ctor(System.Func{System.String,CMS.Ecommerce.CurrencyInfo},System.Func{CMS.Ecommerce.CurrencyInfo,System.Decimal},System.Func{System.Decimal},CMS.Ecommerce.ICurrencyConverterService)">
            <summary>
            Initializes a new instance of <see cref="T:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverter"/>.
            </summary>
            <param name="codeToCurrencyConverter">Function returning CurrencyInfo object for currency code (e.g. USD).</param>
            <param name="getRate">Function returning exchange rate from main currency to given currency.</param>
            <param name="getExchangeRateFromGlobal">Function returning exchange rate from global main currency to site main currency.</param>
            <param name="currencyConverter">The currency converter service.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverter.Convert(System.Decimal,System.String,System.String)">
            <summary>
            Converts monetary value from one currency to other currency.
            </summary>
            <param name="amount">Monetary amount to be converted.</param>
            <param name="inCurrencyCode">Code of currency in which amount is expressed.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to.</param>
            <returns>Amount converted to currency specified by toCurrencyCode parameter.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverter.GetExchangeRate(System.String,System.String)">
            <summary>
            Returns exchange rate for conversion from one currency to another. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverter.GetExchangeRate(CMS.Ecommerce.CurrencyInfo,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns exchange rate for conversion from one currency to another.
            </summary>
            <param name="fromCurrency">Source currency.</param>
            <param name="toCurrency">Target currency.</param>
        </member>
        <member name="T:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverterFactory">
            <summary>
            Default implementation of factory providing site specific currency converters. 
            Created converters uses exchange rates obtained using ExchangeRateInfoProvider and ExchangeTableInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverterFactory.GetCurrencyConverter(System.Int32)">
            <summary>
            Returns currency converter able to convert currencies used on site specified by its ID.
            </summary>
            <param name="siteID">ID of the site to get currency converter for.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverterFactory.CreateConverter(System.Int32)">
            <summary>
            Returns new currency converter initialized to convert currencies on site specified by site ID.
            </summary>
            <param name="siteID">ID of the site to create converter for.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverterFactory.GetRate(CMS.Ecommerce.CurrencyInfo,System.Int32)">
            <summary>
            Returns rate from main currency to given currency using exchange table used on given site.
            If looking for rate for global currency, but given site does not use global currencies, global exchange table is used.
            </summary>
            <param name="toCurrency">Target currency.</param>
            <param name="siteID">ID of the site which exchange table should be used.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRates.DefaultCurrencyConverterFactory.GetCurrency(System.String,System.Int32)">
            <summary>
            Returns CurrencyInfo object with given currency code. Currency is taken primarily from site specified by id (0 for global).
            When site currency is not found, global currencies are searched.
            </summary>
            <param name="currencyCode"></param>
            <param name="siteID"></param>
        </member>
        <member name="T:CMS.Ecommerce.ExchangeRateInfo">
            <summary>
            ExchangeRateInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ExchangeRateInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ExchangeRateInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeRateInfo.ExchangeTableID">
            <summary>
            ID of the exchange table.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeRateInfo.ExchagneRateID">
            <summary>
            ID of the exchange rate.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeRateInfo.ExchangeRateToCurrencyID">
            <summary>
            ID of the target currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeRateInfo.ExchangeRateValue">
            <summary>
            Exchange rate value
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeRateInfo.ExchangeRateGUID">
            <summary>
            Exchange rate GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeRateInfo.ExchangeRateLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfo.#ctor">
            <summary>
            Constructor - Creates an empty ExchangeRateInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ExchangeRateInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.ExchangeRateInfoProvider">
            <summary>
            Class providing ExchangeRateInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetExchangeRates">
            <summary>
            Returns the query for all exchange rates between currencies.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetExchangeRateInfo(System.Int32)">
            <summary>
            Returns exchange rate with specified ID.
            </summary>
            <param name="rateId">Exchange rate ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.SetExchangeRateInfo(CMS.Ecommerce.ExchangeRateInfo)">
            <summary>
            Sets (updates or inserts) specified exchange rate.
            </summary>
            <param name="rateObj">Exchange rate to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.DeleteExchangeRateInfo(CMS.Ecommerce.ExchangeRateInfo)">
            <summary>
            Deletes specified exchange rate.
            </summary>
            <param name="rateObj">Exchange rate to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.DeleteExchangeRateInfo(System.Int32)">
            <summary>
            Deletes exchange rate with specified ID.
            </summary>
            <param name="rateId">Exchange rate ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetExchangeRates(System.Int32)">
            <summary>
            Returns query with all exchange rates of the specified exchange table.
            </summary>
            <param name="tableId">Exchange table ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding structure.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding structure.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetExchangeRateInfo(System.Int32,System.Int32)">
            <summary>
            Returns exchange rate from specified exchange table which is applied to specified currency.
            </summary>
            <param name="currencyId">Currency ID</param>        
            <param name="tableId">Exchange table ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.Add(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
            <param name="exchangeRateValue">Exchange rate value.</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetLastExchangeRate(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns valid exchange rate between main currency of the specified site and currency specified by currencyID
            or last invalid exchange rate if no valid rate found. Throws an exception when currency or exchange rate not found.
            </summary>
            <param name="currencyId">ID of the currency to which we want exchange</param>
            <param name="siteId">ID of the site for which the exchange rate should be returned</param>
            <param name="fromGlobal">If set to true, exchange rate between global main currency and specified site currency is calculated and returned. Has effect only when converting to site currency</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetExchangeRatesInternal(System.Int32)">
            <summary>
            Returns query containing all exchange rates of the specified exchange table.
            </summary>
            <param name="tableId">Exchange table ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetExchangeRateInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns exchange rate from specified exchange table which is applied to specified currency.
            </summary>
            <param name="currencyId">Currency ID</param>        
            <param name="tableId">Exchange table ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetLastExchangeRateInternal(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns valid exchange rate between main currency of the specified site and currency specified by currencyID
            or last invalid exchange rate if no valid rate found. Throws an exception when currency or exchange rate not found.
            </summary>
            <param name="currencyId">ID of the currency to which we want exchange</param>
            <param name="siteId">ID of the site for which the exchange rate should be returned</param>
            <param name="fromGlobal">If set to true, exchange rate between global main currency and specified site currency is calculated and returned. Has effect only when converting to site currency</param>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when trying to convert currencies among different sites.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetLastExchangeRateForSite(System.Int32,System.Int32)">
            <summary>
            Returns cached valid exchange rate between main currency of the specified site and currency specified by ID
            or last invalid exchange rate if no valid rate found or 1 if no exchange rate found.
            </summary>
            <param name="currencyId">ID of the currency to which we want exchange</param>
            <param name="siteId">ID of the site for which the exchange rate should be returned</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeRateInfoProvider.GetLastExchangeRateFromDB(System.Int32,System.Int32)">
            <summary>
            Returns valid exchange rate between main currency of the specified site and currency specified by ID
            or last invalid exchange rate if no valid rate found. Throws an exception when exchange rate not found. Takes data from database.
            </summary>
            <param name="currencyId">ID of the currency to which we want exchange</param>
            <param name="siteId">ID of the site for which the exchange rate should be returned</param>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when no suitable exchange rate found.</exception>
        </member>
        <member name="T:CMS.Ecommerce.ExchangeTableInfo">
            <summary>
            ExchangeTableInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ExchangeTableInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ExchangeTableInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableValidFrom">
            <summary>
            Valid from.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableID">
            <summary>
            ID of the exchange table.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableDisplayName">
            <summary>
            Table display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableValidTo">
            <summary>
            Valid to.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableGUID">
            <summary>
            Exchange table GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableSiteID">
            <summary>
            Exchange table site ID. Set to 0 for global exchange table.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ExchangeTableInfo.ExchangeTableRateFromGlobalCurrency">
            <summary>
            Rate from global main currency to site main currency.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfo.#ctor">
            <summary>
            Constructor - Creates an empty ExchangeTableInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ExchangeTableInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.ExchangeTableInfoProvider">
            <summary>
            Class providing ExchangeTableInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetExchangeTables">
            <summary>
            Returns the query for all exchange tables.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetExchangeTableInfo(System.Int32)">
            <summary>
            Returns exchange table with specified ID.
            </summary>
            <param name="tableId">Exchange table ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.SetExchangeTableInfo(CMS.Ecommerce.ExchangeTableInfo)">
            <summary>
            Sets (updates or inserts) specified exchange table.
            </summary>
            <param name="tableObj">Exchange table to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.DeleteExchangeTableInfo(CMS.Ecommerce.ExchangeTableInfo)">
            <summary>
            Deletes specified exchange table.
            </summary>
            <param name="tableObj">Exchange table to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.DeleteExchangeTableInfo(System.Int32)">
            <summary>
            Deletes exchange table with specified ID.
            </summary>
            <param name="tableId">Exchange table ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetExchangeTables(System.Int32)">
            <summary>
            Returns dataset of all exchange tables for specified site.
            </summary>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetExchangeTableInfo(System.String,System.String)">
            <summary>
            Returns exchange table with specified display name.
            </summary>
            <param name="tableName">Exchange table display name</param>        
            <param name="siteName">Exchange table site name</param>        
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastExchangeTableInfo(System.Int32)">
            <summary>
            For specified site returns last valid exchange table or last invalid exchange table if no valid table found or 
            null if no exchange table found.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastValidExchangeTableInfo(System.Int32)">
            <summary>
            For specified site returns last valid exchange table or null if no valid exchange table found.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastExchangeRateFromGlobalMainCurrency(System.Int32)">
            <summary>
            Returns valid exchange rate from global main currency to the currency of the specified site
            or last invalid exchange rate if no valid rate found. Throws an exception when no rate found.
            If site uses global currencies or global currency code equals site currency code, 1 is returned automatically.
            </summary>
            <param name="siteId">ID of the site for which the exchange rate should be returned</param>  
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetExchangeTablesInternal(System.Int32)">
            <summary>
            Returns dataset of all exchange tables for specified site.
            </summary>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetExchangeTableInfoInternal(System.String,System.String)">
            <summary>
            Returns exchange table with specified display name.
            </summary>
            <param name="tableName">Exchange table display name</param>        
            <param name="siteName">Exchange table site name</param>        
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastExchangeTableInfoInternal(System.Int32)">
            <summary>
            For specified site returns last valid exchange table or last invalid exchange table if no valid table found or 
            null if no exchange table found.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastValidExchangeTableInfoInternal(System.Int32)">
            <summary>
            For specified site returns last valid exchange table or null if no valid exchange table found.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastExchangeRateFromGlobalMainCurrencyInternal(System.Int32)">
            <summary>
            Returns valid exchange rate from global main currency to the currency of the specified site
            or last invalid exchange rate if no valid rate found. Throws an exception when no rate found.
            If site uses global currencies or global currency code equals site currency code, 1 is returned automatically.
            </summary>
            <param name="siteId">ID of the site for which the exchange rate should be returned</param>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when exchange rate from global main currency is not specified.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ExchangeTableInfoProvider.GetLastValidTableInfo(System.Int32,CMS.Helpers.CacheSettings)">
            <summary>
            Returns last valid exchange table from database.
            </summary>
            <param name="siteId">Site ID</param>
            <param name="cacheSettings">Cache settings</param>
        </member>
        <member name="T:CMS.Ecommerce.ICurrencyConverter">
            <summary>
            Defines methods that convert money between currencies.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverter.Convert(System.Decimal,System.String,System.String)">
            <summary>
            Converts monetary value from one currency to other currency.
            </summary>
            <param name="amount">Monetary amount to be converted.</param>
            <param name="inCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <returns>Amount converted to currency specified by toCurrencyCode parameter.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverter.GetExchangeRate(System.String,System.String)">
            <summary>
            Returns exchange rate for conversion from one currency to another. 
            Example: if 1 USD = 16 CZK then this method returns 1/16 = 0.0625 for conversion from USD to CZK.
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="T:CMS.Ecommerce.ICurrencyConverterFactory">
            <summary>
            Defines the contract that class factories must implement to create new ICurrencyConverter objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterFactory.GetCurrencyConverter(System.Int32)">
            <summary>
            Returns currency converter able to convert currencies used on site specified by its ID.
            </summary>
            <param name="siteID">ID of the site to get currency converter for.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICurrencyConverterService">
            <summary>
            Contract for currency conversion service.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.ApplyExchangeRate(System.Decimal,System.Decimal)">
            <summary>
            Applies given exchange rate to monetary amount. If rate is negative or zero, amount is returned with no change.
            </summary>
            <param name="amount">Monetary amount.</param>
            <param name="rate">Exchange rate to be applied.</param>
            <returns>Amount converted using given rate.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.Convert(System.Decimal,System.Boolean,System.String,System.Int32)">
            <summary>
            Converts given monetary amount expressed main currency to different currency using site specific conversion.
            </summary>
            <param name="amountInMain">Amount in.</param>
            <param name="inGlobalMain">Indicates if amount is expressed in global main currency. Amount is in site main currency when set to false.</param>
            <param name="toCurrencyCode">Code of the currency to convert amount to (e.g. EUR).</param>
            <param name="siteID">ID of the site on which the conversion is done.</param>
            <returns>Amount converted to target currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.Convert(System.Decimal,System.String,System.String,System.Int32)">
            <summary>
            Converts given monetary amount expressed in one currency to another currency using site specific conversion.
            </summary>
            <param name="amount">Amount to be converted.</param>
            <param name="inCurrencyCode">Code of the currency in which the amount is expressed (e.g. USD).</param>
            <param name="toCurrencyCode">Code of the currency to convert amount to (e.g. EUR).</param>
            <param name="siteID">ID of the site on which the conversion is done.</param>
            <returns>Amount converted to target currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.GetExchangeRate(System.Boolean,System.String,System.Int32)">
            <summary>
            Calculates exchange rate for conversion from main currency to different currency. 
            </summary>
            <param name="fromGlobalMain">Indicates if conversion is done from global main currency or from site main currency.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <returns>Exchange rate from main currency to another currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.GetExchangeRate(System.String,System.String,System.Int32)">
            <summary>
            Calculates exchange rate for conversion from one currency to another. 
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <returns>Exchange rate from one currency to another currency on specific site.</returns>
            <exception cref="T:System.ArgumentException">Thrown when currency with given code does not exist in the system.</exception>
            <exception cref="T:CMS.Ecommerce.InvalidCurrencyConversionException">Thrown when conversion fails (e.g. exchange rate not found).</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.TryGetExchangeRate(System.Boolean,System.String,System.Int32,System.Decimal@)">
            <summary>
            Calculates exchange rate for conversion from main currency to different currency. 
            </summary>
            <param name="fromGlobalMain">Indicates if conversion is done from global main currency or from site main currency.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <param name="rate">When this method returns, contains exchange rate from main currency to different currency on specific site.</param>
            <returns>True if exchange rate was obtained successfully; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ICurrencyConverterService.TryGetExchangeRate(System.String,System.String,System.Int32,System.Decimal@)">
            <summary>
            Calculates exchange rate for conversion from one currency to another. 
            </summary>
            <param name="fromCurrencyCode">Code of currency in which amount is expressed, e.g. USD, EUR.</param>
            <param name="toCurrencyCode">Code of currency to convert amount to, e.g. USD, EUR.</param>
            <param name="siteID">ID of the site for which the rate is calculated.</param>
            <param name="rate">When this method returns, contains exchange rate from one currency to another currency on specific site.</param>
            <returns>True if exchange rate was obtained successfully; otherwise, false.</returns>
        </member>
        <member name="T:CMS.Ecommerce.IExchangeRateInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IExchangeRateInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding structure.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IExchangeRateInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding structure.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IExchangeRateInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IExchangeRateInfoProvider.Add(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.ExchangeRateInfo"/> binding.
            </summary>
            <param name="currencyId">Currency ID.</param>
            <param name="exchangeTableId">Exchange table ID.</param>
            <param name="exchangeRateValue">Exchange rate value.</param>
        </member>
        <member name="T:CMS.Ecommerce.IExchangeTableInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ExchangeTableInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.InvalidCurrencyConversionException">
            <summary>
            The exception that is thrown when currency conversion fails.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InvalidCurrencyConversionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.Ecommerce.IManufacturerInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ManufacturerInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ManufacturerInfo">
            <summary>
            ManufacturerInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ManufacturerInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ManufacturerInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerEnabled">
            <summary>
            Manufacturer enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerID">
            <summary>
            Manufacturer ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerDisplayName">
            <summary>
            Manufacturer display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerName">
            <summary>
            Manufacturer code name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerDescription">
            <summary>
            Manufacturer description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerHomepage">
            <summary>
            Manufacture homepage.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerGUID">
            <summary>
            Manufacturer GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerSiteID">
            <summary>
            Manufacturer site ID. Set to 0 for global manufacturer.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ManufacturerInfo.ManufacturerThumbnailGUID">
            <summary>
            Manufacturer thumbnail metafile GUID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfo.#ctor">
            <summary>
            Constructor - Creates an empty ManufacturerInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ManufacturerInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.ManufacturerInfoProvider">
            <summary>
            Class providing ManufacturerInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetManufacturers">
            <summary>
            Returns the query for all manufacturers.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetManufacturerInfo(System.Int32)">
            <summary>
            Returns manufacturer with specified ID.
            </summary>
            <param name="manufacturerId">Manufacturer ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.SetManufacturerInfo(CMS.Ecommerce.ManufacturerInfo)">
            <summary>
            Sets (updates or inserts) specified manufacturer.
            </summary>
            <param name="manufacturerObj">Manufacturer to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.DeleteManufacturerInfo(CMS.Ecommerce.ManufacturerInfo)">
            <summary>
            Deletes specified manufacturer.
            </summary>
            <param name="manufacturerObj">Manufacturer to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.DeleteManufacturerInfo(System.Int32)">
            <summary>
            Deletes manufacturer with specified ID.
            </summary>
            <param name="manufacturerId">Manufacturer ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetManufacturers(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all manufacturers for specified site.
            </summary>
            <param name="siteId">Site ID</param>   
            <param name="onlyEnabled">True - only enable manufacturers are returned.
            False - both enabled and disabled manufacturers are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.ManufacturerInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.ManufacturerInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetManufacturerInfo(System.String,System.String)">
            <summary>
            Returns manufacturer with specified code name.
            </summary>
            <param name="manufacturerName">Manufacturer code name</param>        
            <param name="siteName">Manufacturer site name</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.IsUserAuthorizedToModifyManufacturer(CMS.Ecommerce.ManufacturerInfo,System.String,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to modify specific manufacturer. 
            For global manufacturer: 'EcommerceGlobalModify' permission is checked. 
            For site-specific manufacturer: 'EcommerceModify' OR 'ModifyManufacturers' permission is checked.
            </summary>
            <param name="manufacturer">Manufacturer to be checked</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.IsUserAuthorizedToModifyManufacturer(System.Boolean,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to modify manufacturers.
            </summary>
            <param name="global">For global manufacturers (global = True): 'EcommerceGlobalModify' permission is checked. 
            For site-specific manufacturers (global = False): 'EcommerceModify' OR 'ModifyManufacturers' permission is checked.</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetManufacturersInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all manufacturers for specified site.
            </summary>
            <param name="siteId">Site ID</param>   
            <param name="onlyEnabled">True - only enable manufacturers are returned.
            False - both enabled and disabled manufacturers are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.ManufacturerInfoProvider.GetManufacturerInfoInternal(System.String,System.String)">
            <summary>
            Returns manufacturer with specified code name.
            </summary>
            <param name="manufacturerName">Manufacturer code name</param>        
            <param name="siteName">Manufacturer site name</param>
        </member>
        <member name="T:CMS.Ecommerce.IPaymentOptionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionInfo">
            <summary>
            PaymentOptionInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.PaymentOptionInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.PaymentOptionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionID">
            <summary>
            ID of the payment option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionName">
            <summary>
            Code name of the payment option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionSiteID">
            <summary>
            Payment option site ID. Set to 0 for global payment option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionEnabled">
            <summary>
            Indicates whether the payment option is enabled or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionPaymentGateUrl">
            <summary>
            Payment option - Payment gate url.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionDisplayName">
            <summary>
            Code name of the payment option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionDescription">
            <summary>
            Payment option description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionAssemblyName">
            <summary>
            Payment gateway assembly name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionClassName">
            <summary>
            Payment gateway class name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionSucceededOrderStatusID">
            <summary>
            ID of the status which is considered to be "payment successful" status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionAuthorizedOrderStatusID">
            <summary>
            ID of the status which is considered to be "payment authorized" status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionFailedOrderStatusID">
            <summary>
            ID of the status which is considered to be "payment failed" status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionGUID">
            <summary>
            Payment option GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionAllowIfNoShipping">
            <summary>
            Allow payment option to be selected if order does not need shipping.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionInfo.PaymentOptionThumbnailGUID">
            <summary>
            Payment option thumbnail metafile GUID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfo.#ctor">
            <summary>
            Constructor - Creates an empty PaymentOptionInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new PaymentOptionInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionInfoProvider">
            <summary>
            Class providing PaymentOptionInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentOptions">
            <summary>
            Returns the query for all payment options.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentOptionInfo(System.Int32)">
            <summary>
            Returns payment option with specified ID.
            </summary>
            <param name="optionId">Payment option ID</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentOptionInfo(System.String,System.String)">
            <summary>
            Returns payment option with specified name.
            </summary>
            <param name="optionName">Payment option name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.SetPaymentOptionInfo(CMS.Ecommerce.PaymentOptionInfo)">
            <summary>
            Sets (updates or inserts) specified payment option.
            </summary>
            <param name="optionObj">Payment option to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.DeletePaymentOptionInfo(CMS.Ecommerce.PaymentOptionInfo)">
            <summary>
            Deletes specified payment option.
            </summary>
            <param name="optionObj">Payment option to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.DeletePaymentOptionInfo(System.Int32)">
            <summary>
            Deletes payment option with specified ID.
            </summary>
            <param name="optionId">Payment option ID</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentOptions(System.Int32,System.Boolean)">
            <summary>
            Returns query for of all payment options matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the options should be retrieved from. If set to 0, global payment options are retrieved</param>
            <param name="onlyEnabled">True - only enabled payment options from the specified site are returned. False - all site options are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentURL(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns URL to payment gateway.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.ResolveUrlMacros(System.String,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Resolves macros of payment gateway URL.
            </summary>
            <param name="url">URL to resolve</param>
            <param name="cart">Cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.IsPaymentOptionApplicable(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.PaymentOptionInfo)">
            <summary>
            Checks if payment option is applicable for given shopping cart.
            </summary>
            <param name="cart">Shopping cart in which payment option should be used.</param>
            <param name="paymentOption">Payment option to check if it is applicable.</param>
            <returns>True if payment option exists, is enabled and is allowed.</returns>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentOptionInfoInternal(System.String,System.String)">
            <summary>
            Returns payment option with specified name.
            </summary>
            <param name="optionName">Payment option name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentOptionsInternal(System.Int32,System.Boolean)">
            <summary>
            Returns query for all payment options matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the options should be retrieved from. If set to 0, global payment options are retrieved</param>
            <param name="onlyEnabled">True - only enabled payment options from the specified site are returned. False - all site options are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.GetPaymentURLInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns URL to payment gateway.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.ResolveUrlMacrosInternal(System.String,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Resolves macros of payment gateway URL.
            </summary>
            <param name="url">URL to resolve</param>
            <param name="cart">Cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProvider.IsPaymentOptionApplicableInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.PaymentOptionInfo)">
            <summary>
            Checks if payment option is applicable for given shopping cart.
            </summary>
            <param name="cart">Shopping cart in which payment option should be used.</param>
            <param name="paymentOption">Payment option to check if it is applicable.</param>
            <returns>True if payment option exists, is enabled and is allowed.</returns>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionInfoProviderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:CMS.Ecommerce.IPaymentOptionInfoProvider"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionInfoProviderExtensions.GetBySite(CMS.Ecommerce.IPaymentOptionInfoProvider,System.Int32,System.Boolean)">
            <summary>
            Returns query for of all payment options matching the specified parameters.
            </summary>
            <param name="paymentOptionInfoProvider">Provider for <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> management.</param>
            <param name="siteId">ID of the site the options should be retrieved from. If set to 0, global payment options are retrieved</param>
            <param name="onlyEnabled">True - only enabled payment options from the specified site are returned. False - all site options are returned</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="paymentOptionInfoProvider"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.ApplyTaxBasedOnEnum">
            <summary>
            Options saying what the taxes are to be based on.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ApplyTaxBasedOnEnum.BillingAddress">
            <summary>
            Taxes are based on billing address.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ApplyTaxBasedOnEnum.ShippingAddress">
            <summary>
            Taxes are based on shipping address.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ProductsTreeModeEnum">
            <summary>
            Options specifying how will the products be organized in product management UI.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ProductsTreeModeEnum.None">
            <summary>
            No products tree.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ProductsTreeModeEnum.Sections">
            <summary>
            Products tree based on documents.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CarrierInfo">
            <summary>
            CarrierInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CarrierInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CarrierInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierID">
            <summary>
            Carrier ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierDisplayName">
            <summary>
            Carrier display name
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierName">
            <summary>
            Carrier name
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierSiteID">
            <summary>
            Carrier site ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierGUID">
            <summary>
            Carrier GUID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierLastModified">
            <summary>
            Carrier last modified
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierAssemblyName">
            <summary>
            Carrier assembly name
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CarrierInfo.CarrierClassName">
            <summary>
            Carrier class name
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfo.#ctor">
            <summary>
            Constructor - Creates an empty CarrierInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new CarrierInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Ecommerce.CarrierInfoProvider">
            <summary>
            Class providing CarrierInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarriers">
            <summary>
            Returns a query for all the CarrierInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarrierInfo(System.Int32)">
            <summary>
            Returns CarrierInfo with specified ID.
            </summary>
            <param name="id">CarrierInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarrierInfo(System.String)">
            <summary>
            Returns CarrierInfo with specified name.
            </summary>
            <param name="name">CarrierInfo name</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarrierInfo(System.String,System.String)">
            <summary>
            Returns CarrierInfo with specified name.
            </summary>
            <param name="name">CarrierInfo name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarrierInfo(System.Guid)">
            <summary>
            Returns CarrierInfo with specified GUID.
            </summary>
            <param name="guid">CarrierInfo GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.SetCarrierInfo(CMS.Ecommerce.CarrierInfo)">
            <summary>
            Sets (updates or inserts) specified CarrierInfo.
            </summary>
            <param name="infoObj">CarrierInfo to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.DeleteCarrierInfo(CMS.Ecommerce.CarrierInfo)">
            <summary>
            Deletes specified CarrierInfo.
            </summary>
            <param name="infoObj">CarrierInfo to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.DeleteCarrierInfo(System.Int32)">
            <summary>
            Deletes CarrierInfo with specified ID.
            </summary>
            <param name="id">CarrierInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarriers(System.Int32)">
            <summary>
            Returns a query for all the CarrierInfo objects of a specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarrierProvider(System.Int32)">
            <summary>
            Returns Carrier provider object for given id of carrier info. Returns instance of DefaultCarrierProvider when carrier not found.
            Return null when carrier provider class not found.
            </summary>
            <param name="carrierId">ID of carrier to instantiate carrier provider for.</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarriersInternal(System.Int32)">
            <summary>
            Returns a query for all the CarrierInfo objects of a specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CarrierInfoProvider.GetCarrierProviderInternal(System.Int32)">
            <summary>
            Returns Carrier provider object for given id of carrier info. Returns instance of DefaultCarrierProvider when carrier not found.
            Return null when carrier provider class not found.
            </summary>
            <param name="carrierId">ID of carrier to instantiate carrier provider for.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultCarrierProvider">
            <summary>
            Default carrier provider encapsulating default shipping cost calculation by weight.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DefaultCarrierProvider.Services">
            <summary>
            Gets dictionary of service names and their display names.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DefaultCarrierProvider.CarrierProviderName">
            <summary>
            Carrier provider name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCarrierProvider.GetServices">
            <summary>
            Returns list of service names and their display names.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCarrierProvider.GetPrice(CMS.Ecommerce.Delivery,System.String)">
            <summary>
            Calculates shipping costs of delivering given delivery.
            </summary>
            <param name="delivery">Delivery to be checked.</param>
            <param name="currencyCode">Code of currency to return shipping price in (e.g. USD or EUR).</param>
            <returns>Price in currency specified by currencyCode.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCarrierProvider.CanDeliver(CMS.Ecommerce.Delivery)">
            <summary>
            Checks if service is available for specified conditions.
            </summary>
            <param name="delivery">Delivery to be checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCarrierProvider.GetConfigurationUIElementGUID">
            <summary>
            Returns Guid of UIElement that is used to configure carrier provider.
            Return Guid.Empty if carrier does not have configuration UI.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCarrierProvider.GetServiceConfigurationUIElementGUID(System.String)">
            <summary>
            Returns Guid of UIElement that is used to configure service properties.
            Return Guid.Empty if service does not have configuration UI.
            </summary>
            <param name="serviceName">Service name</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCarrierProvider.SupportsService(System.String)">
            <summary>
            Returns true carrier provider can handle given service.
            </summary>
            <param name="serviceName">Service name to check.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICarrierInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.CarrierInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICarrierProvider">
            <summary>
            Interface providing base methods and properties for carrier providers.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ICarrierProvider.CarrierProviderName">
            <summary>
            Carrier provider name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICarrierProvider.GetServices">
            <summary>
            Returns list of service names and their display names.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICarrierProvider.CanDeliver(CMS.Ecommerce.Delivery)">
            <summary>
            Carrier can deliver given delivery.
            </summary>
            <param name="delivery">Delivery to be checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.ICarrierProvider.GetConfigurationUIElementGUID">
            <summary>
            Returns Guid of UIElement that is used to configure carrier provider.
            Return Guid.Empty if carrier does not have configuration UI.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICarrierProvider.GetServiceConfigurationUIElementGUID(System.String)">
            <summary>
            Returns Guid of UIElement that is used to configure service properties.
            Return Guid.Empty if service does not have configuration UI.
            </summary>
            <param name="serviceName">Service name</param>
        </member>
        <member name="T:CMS.Ecommerce.IShippingCostInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ShippingCostInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingCostInfo">
            <summary>
            ShippingCostInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShippingCostInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShippingCostInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingCostInfo.ShippingCostGUID">
            <summary>
            Shipping cost unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingCostInfo.ShippingCostLastModified">
            <summary>
            Date and time when the shipping cost was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingCostInfo.ShippingCostMinWeight">
            <summary>
            Order minimal weight the shipping cost is applied for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingCostInfo.ShippingCostShippingOptionID">
            <summary>
            ID of the shipping option the shipping cost belongs to.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingCostInfo.ShippingCostValue">
            <summary>
            Shipping cost value.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingCostInfo.ShippingCostID">
            <summary>
            Shipping cost ID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfo.#ctor">
            <summary>
            Constructor - Creates an empty ShippingCostInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ShippingCostInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.ShippingCostInfoProvider">
            <summary>
            Class providing ShippingCostInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.GetShippingCosts">
            <summary>
            Returns the query for all shipping costs.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.GetShippingCosts(System.Int32)">
            <summary>
            Returns dataset of shipping costs for all weight categories in given shipping option. Result is ordered by min weight.
            </summary>
            <param name="shippingOptionId">Id of the shipping option</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.GetShippingCostInfo(System.Int32)">
            <summary>
            Returns shipping cost with specified ID.
            </summary>
            <param name="shippingCostId">Shipping cost ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.GetShippingCostInfo(System.Int32,System.Double)">
            <summary>
            Returns appropriate shipping cost for given shipping option and weight.
            </summary>
            <param name="shippingId">Id of the shipping option</param>
            <param name="weight">Weight of delivery</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.SetShippingCostInfo(CMS.Ecommerce.ShippingCostInfo)">
            <summary>
            Sets (updates or inserts) specified shipping cost.
            </summary>
            <param name="shippingCostObj">Shipping cost to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.DeleteShippingCostInfo(CMS.Ecommerce.ShippingCostInfo)">
            <summary>
            Deletes specified shipping cost.
            </summary>
            <param name="shippingCostObj">Shipping cost to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.DeleteShippingCostInfo(System.Int32)">
            <summary>
            Deletes shipping cost with specified ID.
            </summary>
            <param name="shippingCostId">Shipping cost ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.GetShippingCostsInternal(System.Int32)">
            <summary>
            Returns dataset of shipping costs for all weight categories in given shipping option. Result is ordered by min weight descending (from heaviest).
            </summary>
            <param name="shippingOptionId">Id of the shipping option</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingCostInfoProvider.GetShippingCostInfoInternal(System.Int32,System.Double)">
            <summary>
            Returns appropriate shipping cost for given shipping option and weight of delivery.
            </summary>
            <param name="shippingId">Id of the shipping option</param>
            <param name="weight">Weight of delivery</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultDeliveryBuilder">
            <summary>
            The default implementation of <see cref="T:CMS.Ecommerce.IDeliveryBuilder"/>. Creates delivery objects based on the calculation request.
            </summary>
            <remarks>
            This is the default implementation of <see cref="T:CMS.Ecommerce.IDeliveryBuilder"/>. You can derive your own implementation from this class. 
            The following code illustrates how to register custom implementation.
            <code>
            [assembly:RegisterImplementation(typeof(IDeliveryBuilder), typeof(MyDeliveryBuilder))]
            public class MyDeliveryBuilder : DefaultDeliveryBuilder
            {
                ...
            }
            </code>
            </remarks>
            <seealso cref="T:CMS.Ecommerce.IDeliveryBuilder"/>
            <seealso cref="T:CMS.Ecommerce.Delivery"/>
            <seealso cref="T:CMS.Ecommerce.DeliveryItem"/>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.SetFromCalculationRequest(CMS.Ecommerce.CalculationRequest,System.Func{CMS.Ecommerce.CalculationRequestItem,System.Boolean})">
            <summary>
            Sets the currently constructed <see cref="T:CMS.Ecommerce.Delivery"/> according to the supplied calculation request data.
            </summary>
            <remarks>
            <para>
            The following data is taken from the calculation request:
            <list type="bullet">
            <item><term>Shipping option</term>
            <description>The shipping option taken from <see cref="P:CMS.Ecommerce.CalculationRequest.ShippingOption"/>.</description>
            </item>
            <item><term>Delivery address</term>
            <description>Taken from <see cref="P:CMS.Ecommerce.CalculationRequest.ShippingAddress"/> or <see cref="P:CMS.Ecommerce.CalculationRequest.BillingAddress"/> when not present.</description>
            </item>
            <item><term>Items</term>
            <description>All <see cref="T:CMS.Ecommerce.CalculationRequestItem">items</see> representing products are included. 
            The <paramref name="itemSelector"/> allows you to further narrow the subset of items added to the constructed constructed delivery.</description>
            </item>
            </list>
            </para>
            <para>
            Please note that <see cref="P:CMS.Ecommerce.Delivery.CustomData"/> are not populated from the calculation request. The same applies to <see cref="P:CMS.Ecommerce.DeliveryItem.CustomData"/> created from calculation request items.
            To include some custom data into <see cref="T:CMS.Ecommerce.Delivery"/>, inherit your custom delivery builder.
            </para>
            </remarks>
            <param name="request">The <see cref="T:CMS.Ecommerce.CalculationRequest">Calculation request data</see> to be packed in the constructed delivery.</param>
            <param name="itemSelector">The predicate deciding which <see cref="T:CMS.Ecommerce.CalculationRequestItem">items</see> are added to <see cref="T:CMS.Ecommerce.Delivery"/>. 
            When <c>null</c>, all items are added.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.AddItems(CMS.Ecommerce.CalculationRequest,System.Func{CMS.Ecommerce.CalculationRequestItem,System.Boolean})">
            <summary>
            Adds calculation request items selected by the <paramref name="itemSelector"/> predicate to the constructed <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <remarks>
            All <see cref="T:CMS.Ecommerce.CalculationRequestItem">items</see> representing products are included. 
            The <paramref name="itemSelector"/> allows you to further narrow the subset if items placed into constructed delivery.
            </remarks>
            <param name="request">The <see cref="T:CMS.Ecommerce.CalculationRequest"/> object from which the items are added.</param>
            <param name="itemSelector">The predicate deciding which items are added to <see cref="T:CMS.Ecommerce.Delivery"/>. 
            When <c>null</c>, all items are added.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.AddItem(CMS.Ecommerce.CalculationRequestItem)">
            <summary>
            Adds a calculation request item to the constructed <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <param name="item">The item to be added to the constructed <see cref="T:CMS.Ecommerce.Delivery"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.CreateDeliveryItem(CMS.Ecommerce.CalculationRequestItem)">
            <summary>
            Creates a new <see cref="T:CMS.Ecommerce.DeliveryItem"/> object for the given calculation request item.
            </summary>
            <param name="requestItem">The request item for which the delivery item is created.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.SetDeliveryAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets an address to which the currently constructed <see cref="T:CMS.Ecommerce.Delivery"/> will be shipped.
            </summary>
            <param name="address">The target address.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.SetShippingOption(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Sets the shipping option used for the currently constructed <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <param name="shippingOption">The used shipping option.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.SetWeight(System.Decimal)">
            <summary>
            Sets weight of the package with the whole <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <param name="weight">Weight of the <see cref="T:CMS.Ecommerce.Delivery"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.SetShippingDate(System.DateTime)">
            <summary>
            Sets the date of shipping.
            </summary>
            <param name="shippingDate">The date of shipping.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.InitCustomData(CMS.Ecommerce.CalculationRequest)">
            <summary>
            Override this method to add custom data to the constructed <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <remarks>
            The following code illustrates possibilities of adding custom data to <see cref="T:CMS.Ecommerce.Delivery"/>.
            <code>
            protected override void InitCustomData(CalculationRequest request)
            {
                base.InitCustomData(request);
                
                // Single value
                SetCustomData("RegisteredCustomer", request.Customer.CustomerIsRegistered);
                
                // Add complete calculation request's custom data to delivery
                AddContainerToCustomData(request.RequestCustomData);
            }
            </code>
            </remarks>
            <param name="request">The calculation request data from which the custom data is gotten.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.SetCustomData(System.String,System.Object)">
            <summary>
            Sets custom data under the given key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">Custom data to be stored under given <paramref name="key"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.AddContainerToCustomData(CMS.Base.IDataContainer)">
            <summary>
            Adds the data container to the custom data of the constructed <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <param name="container">The data container to be added.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.InitItemCustomData(CMS.Ecommerce.DeliveryItem,CMS.Ecommerce.CalculationRequestItem)">
            <summary>
            Adds custom data to the constructed <see cref="T:CMS.Ecommerce.DeliveryItem"/>.
            </summary>
            <param name="deliveryItem">The delivery item to which custom data is set.</param>
            <param name="requestItem">The calculation request item from which the deliver item is constructed.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.GetItemCustomDataContainers(System.Collections.Generic.List{CMS.Base.IDataContainer},CMS.Ecommerce.CalculationRequestItem)">
            <summary>
            Override this method to populate the supplied list with the custom data containers.
            </summary>
            <remarks>
            The following code illustrates how to add custom data to <see cref="T:CMS.Ecommerce.DeliveryItem"/>.
            <code>
            protected override void GetItemCustomDataContainers(List&lt;IDataContainer&gt; containers, CalculationRequestItem requestItem)
            {
                base.GetItemCustomDataContainers(containers, requestItem);
                
                containers.Add(requestItem.ItemCustomData);
            }
            </code>
            </remarks>
            <param name="containers">The list of containers to be populated.</param>
            <param name="requestItem">The calculation request item for which the custom data is processed.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.BuildDelivery">
            <summary>
            Creates a new <see cref="T:CMS.Ecommerce.Delivery"/> object based on builder settings.
            </summary>
            <returns>A new <see cref="T:CMS.Ecommerce.Delivery"/> object.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.EnsureDefaultValues(CMS.Ecommerce.Delivery)">
            <summary>
            Sets the shipping date of the delivery to now when no specific date was set. 
            Override this method to ensure the default data in the constructed <see cref="T:CMS.Ecommerce.Delivery"/>
            </summary>
            <remarks>
            This method is called before new delivery is returned.
            </remarks>
            <param name="delivery">The constructed <see cref="T:CMS.Ecommerce.Delivery"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultDeliveryBuilder.EnsureNewCustomDataInstance">
            <summary>
            Creates new instance of custom data container containing same values as original one.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.Delivery">
            <summary>
            Class representing a delivery (a set of items shipped together using a shipping option).
            </summary>
            <remarks>
            Use <see cref="T:CMS.Ecommerce.DefaultDeliveryBuilder"/> or derived class to create instances of this type.
            </remarks>
            <seealso cref="T:CMS.Ecommerce.DeliveryItem"/>
            <seealso cref="T:CMS.Ecommerce.DefaultDeliveryBuilder"/>
        </member>
        <member name="P:CMS.Ecommerce.Delivery.Items">
            <summary>
            The items shipped in the delivery. Only products and product options of the product type are present.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.Delivery.ShippingDate">
            <summary>
            The shipping date (when the package leaves the store).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.Delivery.Weight">
            <summary>
            Weight of the whole package.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.Delivery.ShippingOption">
            <summary>
            The shipping option used for the delivery.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.Delivery.DeliveryAddress">
            <summary>
            The address to which the delivery is shipped.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.Delivery.CustomData">
            <summary>
            Custom data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.Delivery.Clone">
            <summary>
            Returns clone of delivery object
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DeliveryItem">
            <summary>
            Class representing one item in <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <seealso cref="T:CMS.Ecommerce.Delivery"/>
        </member>
        <member name="P:CMS.Ecommerce.DeliveryItem.Amount">
            <summary>
            The quantity of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DeliveryItem.Product">
            <summary>
            The product represented by the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DeliveryItem.CustomData">
            <summary>
            Custom data of this item.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DeliveryItem.#ctor(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Creates new delivery item using data from given cart item.
            </summary>
            <param name="cartItem">Cart item to init delivery item with.</param>
        </member>
        <member name="M:CMS.Ecommerce.DeliveryItem.#ctor(CMS.Ecommerce.CalculationRequestItem)">
            <summary>
            Creates new delivery item using data from given calculation request item.
            </summary>
            <param name="requestItem">Request item to init delivery item with.</param>
        </member>
        <member name="T:CMS.Ecommerce.IDeliveryBuilder">
            <summary>
            Interface for classes able to create <see cref="T:CMS.Ecommerce.Delivery"/> objects from the calculation request.
            </summary>
            <seealso cref="T:CMS.Ecommerce.DefaultDeliveryBuilder"/>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.SetFromCalculationRequest(CMS.Ecommerce.CalculationRequest,System.Func{CMS.Ecommerce.CalculationRequestItem,System.Boolean})">
            <summary>
            Sets the currently constructed <see cref="T:CMS.Ecommerce.Delivery"/> according to the supplied calculation request data and adds request items selected by 
            the <paramref name="itemSelector"/> predicate.
            </summary>
            <param name="request">The calculation request data to be packed in the constructed <see cref="T:CMS.Ecommerce.Delivery"/>.</param>
            <param name="itemSelector">The predicate deciding which items are added to <see cref="T:CMS.Ecommerce.Delivery"/>. 
            When <c>null</c>, all items are added.</param>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.SetDeliveryAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets an address to which the currently constructed <see cref="T:CMS.Ecommerce.Delivery"/> will be shipped.
            </summary>
            <param name="address">The target address.</param>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.SetShippingOption(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Sets the shipping option used for the currently constructed <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <param name="shippingOption">The used shipping option.</param>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.SetWeight(System.Decimal)">
            <summary>
            Sets weight of the package with the whole <see cref="T:CMS.Ecommerce.Delivery"/>.
            </summary>
            <param name="weight">Weight of the <see cref="T:CMS.Ecommerce.Delivery"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.SetShippingDate(System.DateTime)">
            <summary>
            Sets the date of shipping.
            </summary>
            <param name="shippingDate">The date of shipping.</param>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.SetCustomData(System.String,System.Object)">
            <summary>
            Sets custom data under the given key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">Custom data to be stored under given <paramref name="key"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.IDeliveryBuilder.BuildDelivery">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.Delivery"/> based on builder settings.
            </summary>
            <returns>A new <see cref="T:CMS.Ecommerce.Delivery"/> object.</returns>
        </member>
        <member name="T:CMS.Ecommerce.IShippingPriceCalculator">
            <summary>
            Interface for classes providing shipping price calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShippingPriceCalculator.GetPrice(CMS.Ecommerce.Delivery,System.String)">
            <summary>
            Calculates shipping costs of delivering the <paramref name="delivery"/>.
            </summary>
            <param name="delivery">Delivery to be checked.</param>
            <param name="currencyCode">Code of currency to return shipping price in (e.g. <c>USD</c> or <c>EUR</c>).</param>
            <returns>Price in currency specified by currencyCode.</returns>
        </member>
        <member name="T:CMS.Ecommerce.IShippingPriceCalculatorFactory">
            <summary>
            Contract for factories creating instances of <see cref="T:CMS.Ecommerce.IShippingPriceCalculator"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShippingPriceCalculatorFactory.GetCalculator(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Returns a calculator of shipping costs for specified <paramref name="shippingOption"/>.
            </summary>
            <param name="shippingOption">Shipping option to get calculator for.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShippingPriceService">
            <summary>
            Service providing shipping price calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShippingPriceService.GetShippingPrice(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Calculates the price of the <see cref="P:CMS.Ecommerce.CalculationRequest.ShippingOption"/> in the <see cref="P:CMS.Ecommerce.CalculationRequest.Currency"/> including all discounts.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Actual order amount for evaluation of the shipping discounts.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShippingOptionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ShippingOptionInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionInfo">
            <summary>
            ShippingOptionInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShippingOptionInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShippingOptionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionSiteID">
            <summary>
            Shipping option site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionCarrierID">
            <summary>
            ID of shipping carrier used by this shipping option for shipping price calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionCarrierServiceName">
            <summary>
            Name (code) of shipping carrier service used by shipping option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionDisplayName">
            <summary>
            Shipping option display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionDescription">
            <summary>
            Shipping option description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionID">
            <summary>
            ID of the shipping option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionName">
            <summary>
            Code name of the shipping option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionTaxClassID">
            <summary>
            Shipping option tax class ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionEnabled">
            <summary>
            Indicates whether the shipping option is enabled or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionGUID">
            <summary>
            ShippingOption GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionThumbnailGUID">
            <summary>
            Shipping option thumbnail metafile GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionServiceDisplayName">
            <summary>
            Shipping option carrier service display name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfo.#ctor">
            <summary>
            Constructor - Creates an empty ShippingOptionInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ShippingOptionInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionInfoProvider">
            <summary>
            Class providing ShippingOptionInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetShippingOptions">
            <summary>
            Returns the query for all shipping options.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetShippingOptionInfo(System.Int32)">
            <summary>
            Returns shipping option with specified ID.
            </summary>
            <param name="optionId">Shipping option ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetShippingOptionInfo(System.String,System.String)">
            <summary>
            Returns shipping option with specified name.
            </summary>
            <param name="optionName">Shipping option name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.SetShippingOptionInfo(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Sets (updates or inserts) specified shipping option.
            </summary>
            <param name="optionObj">Shipping option to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.DeleteShippingOptionInfo(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Deletes specified shipping option.
            </summary>
            <param name="optionObj">Shipping option to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.DeleteShippingOptionInfo(System.Int32)">
            <summary>
            Deletes shipping option with specified ID.
            </summary>
            <param name="optionId">Shipping option ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetShippingOptions(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all shipping options matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the options should be retrieved from. If set to 0, global shipping options are retrieved</param>
            <param name="onlyEnabled">True - only enabled shipping options from the specified site are returned. False - all site options are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetFormattedWeight(System.Double,System.String,System.Boolean)">
            <summary>
            Returns weight formatted according site specific weight format string. If no format string specified, uses x.xx format instead.
            </summary>
            <param name="weight">Weight</param>
            <param name="siteName">Name of the site for obtaining format string</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.IsShippingNeeded(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Check if shopping cart needs shipping, return true if it does.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.IsShippingOptionApplicable(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Checks if shipping option is applicable in given shopping cart.
            </summary>
            <param name="cart">Shopping cart in which shipping option should be used.</param>
            <param name="shippingOption">Shipping option to check if it is applicable.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.SetInfo(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetShippingOptionsInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all shipping options matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the options should be retrieved from. If set to 0, global shipping options are retrieved</param>
            <param name="onlyEnabled">True - only enabled shipping options from the specified site are returned. False - all site options are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.GetFormattedWeightInternal(System.Double,System.String,System.Boolean)">
            <summary>
            Returns weight formatted according site specific weight format string. If no format string specified, uses x.xx format instead.
            </summary>
            <param name="weight">Weight</param>
            <param name="siteName">Name of the site for obtaining format string</param>
            <param name="encode">Encode output</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.IsShippingNeededInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Check if shopping cart needs shipping, return true if it does.
            </summary>
            <param name="cart">Shopping cart</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProvider.IsShippingOptionApplicableInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Checks if shipping option is applicable for given shopping cart.
            </summary>
            <param name="cart">Shopping cart in which shipping option should be used.</param>
            <param name="shippingOption">Shipping option to check if it is applicable.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionInfoProviderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:CMS.Ecommerce.IShippingOptionInfoProvider"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionInfoProviderExtensions.GetBySite(CMS.Ecommerce.IShippingOptionInfoProvider,System.Int32,System.Boolean)">
            <summary>
            Returns query for all shipping options matching the specified parameters.
            </summary>
            <param name="shippingOptionInfoProvider">Provider for <see cref="T:CMS.Ecommerce.ShippingOptionInfo"/> management.</param>
            <param name="siteId">ID of the site the options should be retrieved from. If set to 0, global shipping options are retrieved</param>
            <param name="onlyEnabled">True - only enabled shipping options from the specified site are returned. False - all site options are returned</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shippingOptionInfoProvider"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.ShippingPriceCalculatorFactory">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IShippingPriceCalculatorFactory"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingPriceCalculatorFactory.GetCalculator(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Returns a calculator of shipping costs for specified <paramref name="shippingOption"/>.
            </summary>
            <param name="shippingOption">Shipping option to get calculator for.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShippingPrices">
            <summary>
            Container for the shipping prices and applied discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingPrices.StandardPrice">
            <summary>
            Standard shipping price. Price does not contain any discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingPrices.Price">
            <summary>
            Calculated shipping price. All discounts are included.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingPrices.ShippingDiscountSummary">
            <summary>
            Applied discounts summary. Sum of the discount is already applied in the <see cref="P:CMS.Ecommerce.ShippingPrices.Price"/> property.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingPrices.AppliedDiscounts">
            <summary>
            Collection of the applied <see cref="T:CMS.Ecommerce.IDiscount"/> discounts.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingPriceService">
            <summary>
            Service calculating the <see cref="T:CMS.Ecommerce.ShippingPrices"/> including the discount applications.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingPriceService.#ctor(CMS.Ecommerce.IShippingDiscountSource,CMS.Ecommerce.IShippingPriceCalculatorFactory,CMS.Ecommerce.IRoundingServiceFactory,CMS.Ecommerce.IDiscountApplicator)">
            <summary>
            Creates an instance of <see cref="T:CMS.Ecommerce.ShippingPriceService"/>.
            </summary>
            <param name="discountSource">Shipping discount source.</param>
            <param name="priceCalculatorFactory">Shipping price calculation factory.</param>
            <param name="roundingServiceFactory">Rounding service.</param>
            <param name="discountApplicator">Discount applicator.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingPriceService.GetShippingPrice(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Calculates the price of the <see cref="P:CMS.Ecommerce.CalculationRequest.ShippingOption"/> in the <see cref="P:CMS.Ecommerce.CalculationRequest.Currency"/> including all discounts.
            Method uses the implementation of <see cref="T:CMS.Ecommerce.IShippingPriceCalculatorFactory"/> to determine the base price 
            and applies the shipping discount returned by implementation of the <see cref="T:CMS.Ecommerce.IShippingDiscountSource"/>.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Actual order amount for evaluation of the free shipping offers.</param>
        </member>
        <member name="T:CMS.Ecommerce.IInternalStatusInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.InternalStatusInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.InternalStatusInfo">
            <summary>
            InternalStatusInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.InternalStatusInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.InternalStatusInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusEnabled">
            <summary>
            Indicates whether the status is enabled or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusID">
            <summary>
            ID of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusName">
            <summary>
            Code name of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusDisplayName">
            <summary>
            Display name of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusGUID">
            <summary>
            InternalStatus GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.InternalStatusInfo.InternalStatusSiteID">
            <summary>
            Internal status site ID. Set to 0 for global internal status.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfo.#ctor">
            <summary>
            Constructor - Creates an empty InternalStatusInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new InternalStatusInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.InternalStatusInfoProvider">
            <summary>
            Class providing InternalStatusInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetInternalStatuses">
            <summary>
            Returns the query for all internal statuses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetInternalStatusInfo(System.Int32)">
            <summary>
            Returns internal status with specified ID.
            </summary>
            <param name="statusId">Internal status ID</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.InternalStatusInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.InternalStatusInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetInternalStatusInfo(System.String,System.String)">
            <summary>
            Returns internal status with specified name.
            </summary>
            <param name="statusName">Internal status name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.SetInternalStatusInfo(CMS.Ecommerce.InternalStatusInfo)">
            <summary>
            Sets (updates or inserts) specified internal status.
            </summary>
            <param name="statusObj">Internal status to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.DeleteInternalStatusInfo(CMS.Ecommerce.InternalStatusInfo)">
            <summary>
            Deletes specified internal status.
            </summary>
            <param name="statusObj">Internal status to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.DeleteInternalStatusInfo(System.Int32)">
            <summary>
            Deletes internal status with specified ID.
            </summary>
            <param name="statusId">Internal status ID</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetInternalStatuses(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all internal statuses for specified site.
            </summary>
            <param name="siteId">Site ID</param> 
            <param name="onlyEnabled">True - only enable internal statuses are returned.
            False - both enabled and disabled internal statuses are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetInternalStatusInfoInternal(System.String,System.String)">
            <summary>
            Returns internal status with specified name.
            </summary>
            <param name="statusName">Internal status name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.InternalStatusInfoProvider.GetInternalStatusesInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all internal statuses for specified site.
            </summary>
            <param name="siteId">Site ID</param> 
            <param name="onlyEnabled">True - only enable internal statuses are returned.
            False - both enabled and disabled internal statuses are returned.</param>
        </member>
        <member name="T:CMS.Ecommerce.IOrderStatusInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OrderStatusInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IPublicStatusInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.PublicStatusInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.OrderStatusInfo">
            <summary>
            OrderStatusInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderStatusInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderStatusInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusOrder">
            <summary>
            Order of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusID">
            <summary>
            ID of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusEnabled">
            <summary>
            Indicates whether the status is enabled or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusDisplayName">
            <summary>
            Display name of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusName">
            <summary>
            Code name of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusColor">
            <summary>
            Status color in hex format (#xxxxxx).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusGUID">
            <summary>
            Order status GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusLastModified">
            <summary>
            Order status last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusSendNotification">
            <summary>
            Indicates if notification should be send to the customer and administrator when order status is changed to this status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusSiteID">
            <summary>
            Order status site ID. Set to 0 for global order status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusInfo.StatusOrderIsPaid">
            <summary>
            Order status is paid.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned status to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfo.#ctor">
            <summary>
            Constructor - Creates an empty OrderStatusInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OrderStatusInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderStatusInfoProvider">
            <summary>
            Class providing OrderStatusInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetOrderStatuses">
            <summary>
            Returns the query for all order statuses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetOrderStatusInfo(System.Int32)">
            <summary>
            Returns order status with specified ID.
            </summary>
            <param name="statusId">Order status ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.OrderStatusInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.OrderStatusInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetOrderStatusInfo(System.String,System.String)">
            <summary>
            Returns order status with specified name.
            </summary>
            <param name="statusName">Order status name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.SetOrderStatusInfo(CMS.Ecommerce.OrderStatusInfo)">
            <summary>
            Sets (updates or inserts) specified order status.
            </summary>
            <param name="statusObj">Order status to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.DeleteOrderStatusInfo(CMS.Ecommerce.OrderStatusInfo)">
            <summary>
            Deletes specified order status.
            </summary>
            <param name="statusObj">Order status to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.DeleteOrderStatusInfo(System.Int32)">
            <summary>
            Deletes order status with specified ID.
            </summary>
            <param name="statusId">Order status ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetOrderStatuses(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all order statuses matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the order statuses should be retrieved from. If set to 0, global order statuses are retrieved</param>
            <param name="onlyEnabled">True - only enabled order statuses from the specified site are returned. False - all site order statuses are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetFirstEnabledStatus(System.Int32)">
            <summary>
            Returns first enabled order status in order progress for given site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetNextEnabledStatus(System.Int32)">
            <summary>
            Returns next enabled order status in order progress.
            </summary>
            <param name="statusId">Current order status id</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetPreviousEnabledStatus(System.Int32)">
            <summary>
            Returns previous enabled order status in order progress.
            </summary>
            <param name="statusId">Current order status id</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetOrderStatusInfoInternal(System.String,System.String)">
            <summary>
            Returns order status with specified name.
            </summary>
            <param name="statusName">Order status name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetOrderStatusesInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all order statuses matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the statuses should be retrieved from. If set to 0, global order statuses are retrieved</param>
            <param name="onlyEnabled">True - only enabled statuses from the specified site are returned. False - all site statuses are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetFirstEnabledStatusInternal(System.Int32)">
            <summary>
            Returns first enabled order status in order progress.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetNextEnabledStatusInternal(System.Int32)">
            <summary>
            Returns next enabled status in order progress.
            </summary>
            <param name="statusId">Current order status id</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusInfoProvider.GetPreviousEnabledStatusInternal(System.Int32)">
            <summary>
            Returns previous enabled status in order progress.
            </summary>
            <param name="statusId">Current order status id</param>
        </member>
        <member name="T:CMS.Ecommerce.PublicStatusInfo">
            <summary>
            PublicStatusInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.PublicStatusInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.PublicStatusInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusName">
            <summary>
            Code name of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusID">
            <summary>
            ID of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusEnabled">
            <summary>
            Indicates whether the status is enabled or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusDisplayName">
            <summary>
            Display name of the status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusGUID">
            <summary>
            PublicStatus GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PublicStatusInfo.PublicStatusSiteID">
            <summary>
            Public status site ID. Set to 0 for global public status.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfo.#ctor">
            <summary>
            Constructor - Creates an empty PublicStatusInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new PublicStatusInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.PublicStatusInfoProvider">
            <summary>
            Class providing PublicStatusInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetPublicStatuses">
            <summary>
            Returns the query for all public statuses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetPublicStatusInfo(System.Int32)">
            <summary>
            Returns public status with specified ID.
            </summary>
            <param name="statusId">Public status ID</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.PublicStatusInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.PublicStatusInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetPublicStatusInfo(System.String,System.String)">
            <summary>
            Returns public status with specified name.
            </summary>
            <param name="statusName">Public status name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.SetPublicStatusInfo(CMS.Ecommerce.PublicStatusInfo)">
            <summary>
            Sets (updates or inserts) specified public status.
            </summary>
            <param name="statusObj">Public status to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.DeletePublicStatusInfo(CMS.Ecommerce.PublicStatusInfo)">
            <summary>
            Deletes specified public status.
            </summary>
            <param name="statusObj">Public status to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.DeletePublicStatusInfo(System.Int32)">
            <summary>
            Deletes public status with specified ID.
            </summary>
            <param name="statusId">Public status ID</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetPublicStatuses(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all public statuses matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the public statuses should be retrieved from. If set to 0, global public statuses are retrieved</param>
            <param name="onlyEnabled">True - only enabled public statuses from the specified site are returned. False - all site public statuses are returned</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetPublicStatusInfoInternal(System.String,System.String)">
            <summary>
            Returns public status with specified name.
            </summary>
            <param name="statusName">Public status name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.PublicStatusInfoProvider.GetPublicStatusesInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all public statuses matching the specified parameters.
            </summary>
            <param name="siteId">ID of the site the statuses should be retrieved from. If set to 0, global public statuses are retrieved</param>
            <param name="onlyEnabled">True - only enabled statuses from the specified site are returned. False - all site statuses are returned</param>
        </member>
        <member name="T:CMS.Ecommerce.ISupplierInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.SupplierInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SupplierInfo">
            <summary>
            SupplierInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SupplierInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SupplierInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierFax">
            <summary>
            Fax of the supplier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierEmail">
            <summary>
            E-mail of the supplier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierID">
            <summary>
            ID of the supplier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierPhone">
            <summary>
            Phone of the supplier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierDisplayName">
            <summary>
            Supplier display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierName">
            <summary>
            Supplier code name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierEnabled">
            <summary>
            Supplier enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierGUID">
            <summary>
            Supplier GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SupplierInfo.SupplierSiteID">
            <summary>
            Supplier site ID. Set to 0 for global supplier.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfo.#ctor">
            <summary>
            Constructor - Creates an empty SupplierInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SupplierInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.SupplierInfoProvider">
            <summary>
            Class providing SupplierInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.GetSuppliers">
            <summary>
            Returns the query for all suppliers.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.GetSupplierInfo(System.Int32)">
            <summary>
            Returns supplier with specified ID.
            </summary>
            <param name="supplierId">Supplier ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.SetSupplierInfo(CMS.Ecommerce.SupplierInfo)">
            <summary>
            Sets (updates or inserts) specified supplier.
            </summary>
            <param name="supplierObj">Supplier to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.DeleteSupplierInfo(CMS.Ecommerce.SupplierInfo)">
            <summary>
            Deletes specified supplier.
            </summary>
            <param name="supplierObj">Supplier to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.DeleteSupplierInfo(System.Int32)">
            <summary>
            Deletes supplier with specified ID.
            </summary>
            <param name="supplierId">Supplier ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.GetSuppliers(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all suppliers for specified site.
            </summary>
            <param name="siteId">Site ID</param>   
            <param name="onlyEnabled">True - only enable suppliers are returned.
            False - both enabled and disabled suppliers are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.GetSupplierInfo(System.String,System.String)">
            <summary>
            Returns suppliers with specified code name.
            </summary>
            <param name="supplierName">Supplier code name</param>        
            <param name="siteName">Supplier site name</param>        
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.IsUserAuthorizedToModifySupplier(CMS.Ecommerce.SupplierInfo,System.String,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to modify specific supplier. 
            For global supplier: 'EcommerceGlobalModify' permission is checked. 
            For site-specific supplier: 'EcommerceModify' OR 'ModifySuppliers' permission is checked.
            </summary>
            <param name="supplier">Supplier to be checked</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.IsUserAuthorizedToModifySupplier(System.Boolean,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to modify suppliers.
            </summary>
            <param name="global">For global suppliers (global = True): 'EcommerceGlobalModify' permission is checked. 
            For site-specific suppliers (global = False): 'EcommerceModify' OR 'ModifySuppliers' permission is checked.</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.GetSuppliersInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all suppliers for specified site.
            </summary>
            <param name="siteId">Site ID</param>   
            <param name="onlyEnabled">True - only enable suppliers are returned.
            False - both enabled and disabled suppliers are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.SupplierInfoProvider.GetSupplierInfoInternal(System.String,System.String)">
            <summary>
            Returns suppliers with specified code name.
            </summary>
            <param name="supplierName">Supplier code name</param>        
            <param name="siteName">Supplier site name</param>        
        </member>
        <member name="T:CMS.Ecommerce.CustomerTaxClass">
            <summary>
            Represents the type of customer from taxes point of view.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CustomerTaxClass.Taxable">
            <summary>
            Predefined customer tax class for taxable customers.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CustomerTaxClass.Exempt">
            <summary>
            Predefined customer tax class for tax exempt customers.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ITaxClassCountryInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassCountryInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding structure.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassCountryInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding structure.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassCountryInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassCountryInfoProvider.Add(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
            <param name="taxValue">Tax rate.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxClassInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.TaxClassInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ITaxClassStateInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassStateInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding structure.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassStateInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding structure.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassStateInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassStateInfoProvider.Add(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
            <param name="taxValue">Tax rate.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultTaxCalculationService">
            <summary>
            Simple implementation of <see cref="T:CMS.Ecommerce.ITaxCalculationService"/>. Calculates taxes using tax estimation service.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ITaxEstimationService"/>
        </member>
        <member name="P:CMS.Ecommerce.DefaultTaxCalculationService.IsTaxIncludedInPrice">
            <summary>
            Gets whether product price already include tax.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationService.#ctor(CMS.Ecommerce.ITaxEstimationService,CMS.Ecommerce.ITaxClassService,CMS.Ecommerce.ICustomerTaxClassService,CMS.Ecommerce.ITaxAddressService,CMS.Ecommerce.ISettingService)">
            <summary>
            Constructor. Creates a new instance of <see cref="T:CMS.Ecommerce.DefaultTaxCalculationService"/>.
            </summary>
            <param name="estimationService">Service used to get tax estimates.</param>
            <param name="taxService">Service used to get tax classes for items and shipping.</param>
            <param name="customerTaxService">Service used to get customer tax class.</param>
            <param name="addressService">Service used to get address for tax estimation</param>
            <param name="settingService">A setting key service.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationService.CalculateTaxes(CMS.Ecommerce.TaxCalculationRequest)">
            <summary>
            Calculates all the taxes for given purchase.
            </summary>
            <param name="taxRequest">Tax calculation request containing information about purchase.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationService.CalculateItemsTax(System.Collections.Generic.ICollection{CMS.Ecommerce.TaxItem},CMS.Ecommerce.TaxCalculationParameters,System.Decimal)">
            <summary>
            Calculates the total tax and the tax summary for tax items.
            </summary>
            <param name="items">Items to calculate tax for.</param>
            <param name="parameters">Parameters of the tax calculation.</param>
            <param name="orderDiscount">Discount of the entire order.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationService.CalculateShippingTax(CMS.Ecommerce.TaxCalculationRequest,CMS.Ecommerce.TaxCalculationResult)">
            <summary>
            Calculates the tax for shipping.
            </summary>
            <param name="taxRequest">Tax calculation request.</param>
            <param name="taxResult">Tax calculation result</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationService.UpdateTaxCalculationResult(CMS.Ecommerce.TaxCalculationResult,System.Decimal,CMS.Ecommerce.TaxClassInfo)">
            <summary>
            Adds a tax info to <paramref name="taxCalculationResult"/>.
            </summary>
            <param name="taxCalculationResult">Result to be updated</param>
            <param name="calculatedTax">Tax value to add to <paramref name="taxCalculationResult"/></param>
            <param name="taxClass">Tax class to add to <paramref name="taxCalculationResult"/></param>
            <remarks>If no tax was calculated, nothing is added to <paramref name="taxCalculationResult"/>.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationService.CalculateTax(CMS.Ecommerce.CustomerTaxClass,CMS.Ecommerce.TaxClassInfo,System.Decimal,CMS.Ecommerce.TaxCalculationParameters)">
            <summary>
            Calculates the tax for specified <paramref name="price"/>.
            </summary>
            <param name="customerTaxClass">Tax class of the customer.</param>
            <param name="taxClass">Tax class to be calculated.</param>
            <param name="price">Price from which the tax is calculated.</param>
            <param name="parameters">Parameters of the tax calculation.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultTaxCalculationServiceFactory">
            <summary>
            Represents a factory providing site-specific tax calculation service.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationServiceFactory.#ctor(CMS.Ecommerce.ITaxEstimationService,CMS.Ecommerce.ITaxClassService,CMS.Ecommerce.ICustomerTaxClassService,CMS.Ecommerce.ITaxAddressServiceFactory,CMS.Ecommerce.ISettingServiceFactory)">
            <summary>
            Constructor. Creates a new instance of <see cref="T:CMS.Ecommerce.DefaultTaxCalculationServiceFactory"/>.
            </summary>
            <param name="estimationService">Service used to get tax estimates.</param>
            <param name="taxService">Service used to get tax classes for items and shipping.</param>
            <param name="customerTaxService">Service used to get customer tax class.</param>
            <param name="addressServiceFactory">Factory used to get instances of address services.</param>
            <param name="settingServiceFactory">Factory used to get instances of setting services.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationServiceFactory.GetTaxCalculationService(System.Int32)">
            <summary>
            Gets Tax calculation service specific for given site.
            </summary>
            <remarks>
            Note that only one instance of service is created per site. 
            This means that all calls with the same value of <paramref name="siteId"/> will return the same instance of the service.</remarks>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxCalculationServiceFactory.CreateTaxCalculationService(System.Int32)">
            <summary>
            Creates a new tax calculation service for site specified by <paramref name="siteId"/>.
            </summary>
            <param name="siteId">ID of the site to create service for.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxCalculationService">
            <summary>
            Defines the contract for classes providing tax calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxCalculationService.CalculateTaxes(CMS.Ecommerce.TaxCalculationRequest)">
            <summary>
            Calculates all the taxes for given purchase.
            </summary>
            <param name="taxRequest">Tax calculation request containing information about purchase.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxCalculationServiceFactory">
            <summary>
            Interface for factories providing site-specific tax calculation services.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxCalculationServiceFactory.GetTaxCalculationService(System.Int32)">
            <summary>
            Gets Tax calculation service specific for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxCalculationParameters">
            <summary>
            Parameters of the tax calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationParameters.Customer">
            <summary>
            Customer who is buying goods or services.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationParameters.Currency">
            <summary>
            Currency in which the purchase is made.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationParameters.CalculationDate">
            <summary>
            Date of purchase.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationParameters.ShippingAddress">
            <summary>
            Address where the goods are delivered.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationParameters.BillingAddress">
            <summary>
            Billing address of taxed purchase.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationParameters.SiteID">
            <summary>
            Gets or sets the site on which taxes are calculated.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.TaxCalculationRequest">
            <summary>
            Represents the tax calculation request. Contains all the parameters needed to evaluate taxes applied to the purchase.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxCalculationRequest.Items">
            <summary>
            Items to calculate taxes for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationRequest.ShippingPrice">
            <summary>
            The price of the shipping.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationRequest.Shipping">
            <summary>
            Shipping option used to deliver items being calculated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationRequest.TaxParameters">
            <summary>
            Other parameters of tax calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationRequest.Discount">
            <summary>
            The discount amout to apply to the purchase.
            </summary>
            <remarks>
            By default, this is the amount of applied order discounts, not a percent.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.TaxCalculationResult">
            <summary>
            Represents the result of a tax calculation process.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationResult.Summary">
            <summary>
            Summary of tax classes and their values.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationResult.ItemsTax">
            <summary>
            Gets or sets calculated tax for items.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationResult.ShippingTax">
            <summary>
            Gets or sets calculated tax for shipping.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxCalculationResult.TotalTax">
            <summary>
            Gets total calculated tax.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.TaxItem">
            <summary>
            Item of taxed purchase.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxItem.SKU">
            <summary>
            Taxed SKUInfo object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxItem.Quantity">
            <summary>
             Amount of taxed SKUs.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxItem.Price">
            <summary>
            Price of all units of this item.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CountryStateTaxRateSource">
            <summary>
            Provides tax rates based on the configuration stored using <see cref="T:CMS.Ecommerce.TaxClassCountryInfoProvider"/> and <see cref="T:CMS.Ecommerce.TaxClassStateInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CountryStateTaxRateSource.#ctor(CMS.Ecommerce.ITaxClassCountryInfoProvider,CMS.Ecommerce.ITaxClassStateInfoProvider)">
            <summary>
            Initializes a new instance of the <paramref name="taxClassCountryInfoProvider"/> class.
            </summary>
            <param name="taxClassCountryInfoProvider">Provider for <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> management.</param>
            <param name="taxClassStateInfoProvider">Provider for <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.CountryStateTaxRateSource.GetRate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a tax rate (0..1) for the specified tax class, country and state.
            </summary>
            <param name="taxClassId">An ID of the tax class.</param>
            <param name="countryId">An ID of the country.</param>
            <param name="stateId">An ID of the state. Use 0 when unknown or not applicable.</param>
        </member>
        <member name="T:CMS.Ecommerce.CustomerTaxClassService">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ICustomerTaxClassService"/>. 
            Handles the classification of customers into customer tax classes according to the <see cref="P:CMS.Ecommerce.CustomerInfo.CustomerTaxRegistrationID"/> property.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerTaxClassService.GetTaxClass(CMS.Ecommerce.CustomerInfo,CMS.Ecommerce.TaxClassInfo)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.CustomerTaxClass"/> for the specified customer. The default value is <see cref="F:CMS.Ecommerce.CustomerTaxClass.Taxable"/>
            </summary>
            <param name="customer">A customer to be classified.</param>
            <param name="taxClass">Tax class object.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultTaxEstimationService">
            <summary>
            Provides a tax estimation based on country and state. This is the default implementation of the <see cref="T:CMS.Ecommerce.ITaxEstimationService"/>. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxEstimationService.#ctor(CMS.Ecommerce.ICountryStateTaxRateSource,CMS.Ecommerce.IRoundingServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.DefaultTaxEstimationService"/> class with the specified tax rate source."/> 
            </summary>
            <param name="rateSource">A source of country/state tax rates.</param>
            <param name="roundingServiceFactory">The factory supplying service for price rounding.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxEstimationService.GetTax(System.Decimal,CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.TaxEstimationParameters)">
            <summary>
            Estimates the tax from the given price.
            </summary>
            <param name="price">A price without tax.</param>
            <param name="taxClass">A tax class for which the taxes are estimated.</param>
            <param name="parameters">Parameters of the tax estimation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taxClass"/> or <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxEstimationService.ExtractTax(System.Decimal,CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.TaxEstimationParameters)">
            <summary>
            Calculates the tax part of the given price. The result is rounded.
            </summary>
            <param name="price">A price including tax.</param>
            <param name="taxClass">A tax class for which the taxes are estimated.</param>
            <param name="parameters">Parameters of the tax estimation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taxClass"/> or <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxEstimationService.GetRate(CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.AddressInfo)">
            <summary>
            Returns a tax rate (0..1) for the specified address (country/state part of the address).
            </summary>
            <param name="taxClass">Tax class.</param>
            <param name="address">Address to get tax rate for.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxEstimationService.GetExtractionRate(System.Decimal)">
            <summary>
            Returns rate for tax extraction.
            </summary>
            <remarks>
            Returned value is not rounded.
            </remarks>
            <param name="rate">Tax rate (0..1).</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultTaxEstimationService.RoundTax(System.Decimal,CMS.Ecommerce.TaxEstimationParameters)">
            <summary>
            Returns rounded value according to the specified currency.
            </summary>
            <param name="value">Tax value to be rounded.</param>
            <param name="parameters">Currency which supplies number of digits the value is rounded to.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxAddressService">
            <summary>
            Defines the contract for classes responsible for the tax address resolution.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxAddressService.GetTaxAddress(CMS.Ecommerce.AddressInfo,CMS.Ecommerce.AddressInfo,CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.CustomerInfo)">
            <summary>
            Returns an address using which the tax should be calculated.
            </summary>
            <remarks>
            Note that the result can be <paramref name="billingAddress"/>, <paramref name="shippingAddress"/> or any other <see cref="T:CMS.Ecommerce.AddressInfo"/> instance.
            </remarks>
            <param name="billingAddress">A billing address of taxed purchase.</param>
            <param name="shippingAddress">A address where the goods are delivered.</param>
            <param name="taxClass">A tax class to get address for.</param>
            <param name="customer">A customer making a taxed purchase.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxAddressServiceFactory">
            <summary>
            Defines the interface for factories providing a site-specific tax address selection.
            </summary>
            <seealso cref="T:CMS.Ecommerce.TaxAddressService"/>
        </member>
        <member name="M:CMS.Ecommerce.ITaxAddressServiceFactory.GetTaxAddressService(System.Int32)">
            <summary>
            Returns a tax address service for the given site.
            </summary>
            <param name="siteId">An ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxEstimationService">
            <summary>
            Defines the methods to implement a tax estimation service - i.e. fast, but not so accurate tax calculation.
            </summary>
            <remarks>
            Implementing classes should provide a best effort tax estimation even in cases when some (or all) of the tax estimation parameters are missing.
            </remarks>
            <seealso cref="T:CMS.Ecommerce.TaxEstimationParameters"/>
            <seealse cref="T:CMS.Ecommerce.ITaxCalculationService"/>
        </member>
        <member name="M:CMS.Ecommerce.ITaxEstimationService.GetTax(System.Decimal,CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.TaxEstimationParameters)">
            <summary>
            Estimates the tax from the given price. The result is rounded.
            </summary>
            <remarks>
            This method is used to get taxes for price which does not include tax.
            </remarks>
            <param name="price">A price without tax.</param>
            <param name="taxClass">A tax class for which the taxes are estimated.</param>
            <param name="parameters">Parameters of the tax estimation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taxClass"/> or <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ITaxEstimationService.ExtractTax(System.Decimal,CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.TaxEstimationParameters)">
            <summary>
            Estimates the tax part of the given price. The result is rounded.
            </summary>
            <remarks>
            This method is used to get (extract) the tax from the price which already includes tax.
            </remarks>
            <param name="price">A price including tax.</param>
            <param name="taxClass">A tax class for which the taxes are estimated.</param>
            <param name="parameters">Parameters of the tax estimation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="taxClass"/> or <paramref name="parameters"/> is <c>null</c>.</exception>
        </member>
        <member name="T:CMS.Ecommerce.TaxAddressService">
            <summary>
            Represents a service providing an address for the tax calculation based on e-commerce module settings.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ITaxAddressServiceFactory"/>
        </member>
        <member name="P:CMS.Ecommerce.TaxAddressService.SiteID">
            <summary>
            ID of the site for which this instance was created.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxAddressService.SitePrefersShippingAddress">
            <summary>
            Indicates whether a shipping address is preferred on the site for which this instance was created.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxAddressService.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.TaxAddressService"/> reflecting settings of the specified site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxAddressService.GetTaxAddress(CMS.Ecommerce.AddressInfo,CMS.Ecommerce.AddressInfo,CMS.Ecommerce.TaxClassInfo,CMS.Ecommerce.CustomerInfo)">
            <summary>
            Returns an address which should be used for the tax calculation. 
            </summary>
            <remarks>
            <para>This method picks one of the supplied addresses according to the 'CMSStoreApplyTaxBasedOn' ecommerce setting (<see cref="M:CMS.Ecommerce.ECommerceSettings.ApplyTaxesBasedOn(CMS.DataEngine.SiteInfoIdentifier)"/>).
            The default address is returned when both <paramref name="billingAddress"/> and <paramref name="shippingAddress"/> are <c>null</c>. Returns <c>null</c> when the
            <see cref="M:CMS.Ecommerce.ECommerceSettings.DefaultCountryName(CMS.DataEngine.SiteInfoIdentifier)"/> settings is empty.
            </para>
            <para>
            The <paramref name="taxClass"/> and <paramref name="customer"/> are ignored by default, but you can override this method and leverage these parameters to customize
            the decision logic. Use the <see cref="M:CMS.Ecommerce.TaxAddressService.GetDefaultAddress"/> method to get the site's default address or the <see cref="M:CMS.Ecommerce.TaxAddressService.CreateAddress(System.Int32,System.Int32,System.String,System.String,System.String,System.String)"/> method to create a 
            completely new address (e.g. address of your store).
            </para>
            </remarks>
            <param name="billingAddress">A billing address.</param>
            <param name="shippingAddress">An address where the goods are delivered.</param>
            <param name="taxClass">A tax class to get an address for.</param>
            <param name="customer">A customer making a purchase.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxAddressService.GetDefaultAddress">
            <summary>
            Returns the default address or <c>null</c> when can not be determined.
            </summary>
            <remarks>
            You can override this method to customize the way how the default address is obtained. Use the <see cref="P:CMS.Ecommerce.TaxAddressService.SiteID"/> to get the ID of the site for which
            this instance was created.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.TaxAddressService.CreateAddress(System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new address according to the given parameters.
            </summary>
            <param name="countryId">An ID of the country.</param>
            <param name="stateId">An ID of the state.</param>
            <param name="city">A city name.</param>
            <param name="zip">A ZIP code.</param>
            <param name="line1">A first line of an address.</param>
            <param name="line2">A second line of an address.</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxAddressServiceFactory">
            <summary>
            Represents a factory creating site-specific tax address services.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxAddressServiceFactory.GetTaxAddressService(System.Int32)">
            <summary>
            Returns a site specific tax address service.
            </summary>
            <remarks>
            Only one instance is created for each site. The instance is reused on the next call with the same <paramref name="siteId"/>.
            </remarks> 
            <param name="siteId">ID of the site for which the service is created.</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxEstimationParameters">
            <summary>
            Represents parameters of the tax estimation.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ITaxEstimationService"/>
        </member>
        <member name="P:CMS.Ecommerce.TaxEstimationParameters.Address">
            <summary>
            Gets or sets the address for which the tax is estimated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxEstimationParameters.Currency">
            <summary>
            Gets or sets the currency in which the taxes are calculated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxEstimationParameters.SiteID">
            <summary>
            Gets or sets the site on which taxes are calculated.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICountryStateTaxRateSource">
            <summary>
            Defines the contract for classes providing tax rate for country (and state).
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICountryStateTaxRateSource.GetRate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a tax rate (0..1) for the specified tax class, country and state.
            </summary>
            <param name="taxClassId">An ID of the tax class.</param>
            <param name="countryId">An ID of the country.</param>
            <param name="stateId">An ID of the state. Use 0 when unknown or not applicable.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICustomerTaxClassService">
            <summary>
            Defines the contract for classes responsible for the categorization of customers into customer tax classes.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICustomerTaxClassService.GetTaxClass(CMS.Ecommerce.CustomerInfo,CMS.Ecommerce.TaxClassInfo)">
            <summary>
            Returns a <see cref="T:CMS.Ecommerce.CustomerTaxClass"/> for the specified combination of <paramref name="customer"/> and <paramref name="taxClass"/>.
            The default value is <see cref="F:CMS.Ecommerce.CustomerTaxClass.Taxable"/>
            </summary>
            <param name="customer">A customer to be classified.</param>
            <param name="taxClass">Tax class object.</param>
        </member>
        <member name="T:CMS.Ecommerce.ITaxClassService">
            <summary>
            Defines the contract for classes responsible for the product tax class retrieval.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassService.GetTaxClass(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Gets a tax class to which the shipping option belongs. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ITaxClassService.GetTaxClass(CMS.Ecommerce.SKUInfo)">
            <summary>
            Gets a tax class to which the product belongs.
            </summary>
            <param name="product">A product, product variant or product accessory.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for the specified product or <c>null</c> when not found.</returns>
        </member>
        <member name="T:CMS.Ecommerce.TaxClassService">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ITaxClassService"/> interface.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassService.SKUInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassService.TaxClassInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.TaxClassInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.#ctor(CMS.Ecommerce.ISKUInfoProvider,CMS.Ecommerce.ITaxClassInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.TaxClassService"/> class.
            </summary>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
            <param name="taxClassInfoProvider">Provider for <see cref="T:CMS.Ecommerce.TaxClassInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="taxClassInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetTaxClass(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Gets a tax class to which the shipping option belongs based on <see cref="P:CMS.Ecommerce.ShippingOptionInfo.ShippingOptionTaxClassID"/> property. 
            </summary>
            <param name="shipping">A shipping option to get tax class for.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified shipping option or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetTaxClass(CMS.Ecommerce.SKUInfo)">
            <summary>
            Gets a tax class to which the product belongs.
            </summary>
            <remarks>
            <see cref="P:CMS.Ecommerce.SKUInfo.SKUTaxClassID"/> property is used as product/accessory tax class identifier. 
            The same property of the parent product is used for product variants.
            </remarks>
            <param name="product">A product, product variant or product accessory.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified product or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetVariantTaxClass(CMS.Ecommerce.SKUInfo)">
            <summary>
            Gets a tax class for given product variant.
            </summary>
            <param name="variant">Product variant.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified variant or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetProductTaxClass(CMS.Ecommerce.SKUInfo)">
            <summary>
            Gets a tax class for given (main) product.
            </summary>
            <param name="product">Main product.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified product or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetAccessoryTaxClass(CMS.Ecommerce.SKUInfo)">
            <summary>
            Gets a tax class for given product variant.
            </summary>
            <param name="accessory">Product accessory.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified product accessory or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetSKUTaxClass(CMS.Ecommerce.SKUInfo)">
            <summary>
            Gets a tax class for given sku.
            </summary>
            <param name="sku">Product variant.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified product or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassService.GetShippingTaxClass(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Gets a tax class for given shipping option.
            </summary>
            <param name="shipping">Shipping option.</param>
            <returns><see cref="T:CMS.Ecommerce.TaxClassInfo"/> for specified shipping option or <c>null</c> when not found.</returns>
        </member>
        <member name="T:CMS.Ecommerce.TaxClassCountryInfo">
            <summary>
            TaxClassCountryInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxClassCountryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxClassCountryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassCountryInfo.TaxClassCountryID">
            <summary>
            Tax class - country relationship ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassCountryInfo.TaxValue">
            <summary>
            Value of the tax.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassCountryInfo.CountryID">
            <summary>
            ID of the country.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassCountryInfo.TaxClassID">
            <summary>
            ID of the tax class.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassCountryInfo.ObjectFullName">
            <summary>
            Gets the full name in format TaxClassID.CountryID
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfo.#ctor">
            <summary>
            Constructor - Creates an empty TaxClassCountryInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new TaxClassCountryInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxClassCountryInfoProvider">
            <summary>
            Class providing TaxClassCountryInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.GetTaxClassCountries">
            <summary>
            Returns the query for all relationships between tax classes and countries.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding structure.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding structure.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.GetTaxClassCountryInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified tax class and country.
            </summary>
            <param name="countryId">Country ID</param>
            <param name="taxClassId">Tax class ID</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.SetTaxClassCountryInfo(CMS.Ecommerce.TaxClassCountryInfo)">
            <summary>
            Sets relationship between specified tax class and country.
            </summary>
            <param name="infoObj">Tax class-country relationship to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.DeleteTaxClassCountryInfo(CMS.Ecommerce.TaxClassCountryInfo)">
            <summary>
            Deletes relationship between specified tax class and country.
            </summary>
            <param name="infoObj">Tax class-country relationship to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.Add(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
            <param name="taxValue">Tax rate.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.SetCountryTaxValue(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Sets tax value defined for specified country. 
            </summary>
            <param name="countryId">Country ID</param>
            <param name="taxClassId">Tax class ID</param>
            <param name="value">Tax rate</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.TaxClassCountryInfo"/> binding.
            </summary>
            <param name="countryId">Country ID.</param>
            <param name="taxClassId">Tax class ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.RemoveCountryTaxValue(System.Int32,System.Int32)">
            <summary>
            Removes tax value defined for specified country. 
            </summary>
            <param name="countryId">Country ID</param>
            <param name="taxClassId">Tax class ID</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.GetTaxClassCountryInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified tax class and country.
            </summary>
            <param name="countryId">Country ID</param>
            <param name="taxClassId">Tax class ID</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassCountryInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Returns where condition for TaxClassCountry selection using full name (in format TaxClassID.CountryID)
            </summary>
            <param name="fullName">TaxClassCoountry full name</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxClassInfo">
            <summary>
            TaxClassInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxClassInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxClassInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassDisplayName">
            <summary>
            Display name of the tax class.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassID">
            <summary>
            ID of the tax class.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassName">
            <summary>
            Code name of the tax class.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassZeroIfIDSupplied">
            <summary>
            Zero tax if tax ID is supplied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassGUID">
            <summary>
            TaxClass GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassInfo.TaxClassSiteID">
            <summary>
            Tax class site ID. Set to 0 for global tax class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfo.#ctor">
            <summary>
            Constructor - Creates an empty TaxClassInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new TaxClassInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxClassInfoProvider">
            <summary>
            Provides methods for working with <see cref="T:CMS.Ecommerce.TaxClassInfo"/> and its data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetTaxClasses">
            <summary>
            Returns a query for all tax classes.
            </summary>
            <returns>All tax class query.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetTaxClassInfo(System.Int32)">
            <summary>
            Returns a tax class with the specified ID.
            </summary>
            <param name="classId">ID of the tax class.</param>
            <returns>Tax class object with the ID.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.TaxClassInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.TaxClassInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetTaxClassInfo(System.String,System.String)">
            <summary>
            Returns a tax class with the specified code name on the specified site.
            </summary>
            <param name="className">Code name of the tax class.</param>               
            <param name="siteName">Name of the site with the tax class.</param>                
            <returns>Tax class object with the name.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.SetTaxClassInfo(CMS.Ecommerce.TaxClassInfo)">
            <summary>
            Creates or updates the specified tax class in the database.
            </summary>
            <param name="classObj">Tax class to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.DeleteTaxClassInfo(CMS.Ecommerce.TaxClassInfo)">
            <summary>
            Deletes the specified tax class.
            </summary>
            <param name="classObj">Tax class to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.DeleteTaxClassInfo(System.Int32)">
            <summary>
            Deletes a tax class with the specified ID.
            </summary>
            <param name="classId">ID of the tax class that is deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetTaxClasses(System.Int32)">
            <summary>
            Returns all tax classes on the specified site.
            </summary>
            <param name="siteId">ID of the site with the tax classes.</param>        
            <returns>Site's tax class query.</returns>       
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetTaxClassInfoInternal(System.String,System.String)">
            <summary>
            Returns a tax class with the specified code name on the specified site.
            </summary>
            <param name="className">Code name of the tax class.</param>               
            <param name="siteName">Name of the site with the tax class.</param>                
            <returns>Tax class object with the name.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassInfoProvider.GetTaxClassesInternal(System.Int32)">
            <summary>
            Returns all tax classes on the specified site.
            </summary>
            <param name="siteId">ID of the site with the tax classes.</param>        
            <returns>Site's tax class query.</returns>       
        </member>
        <member name="T:CMS.Ecommerce.TaxClassStateInfo">
            <summary>
            TaxClassStateInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxClassStateInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TaxClassStateInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassStateInfo.TaxClassStateID">
            <summary>
            Tax class - state relationship ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassStateInfo.TaxValue">
            <summary>
            Value of the tax.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassStateInfo.TaxClassID">
            <summary>
            ID of the tax class.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassStateInfo.StateID">
            <summary>
            ID of the state.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.TaxClassStateInfo.ObjectFullName">
            <summary>
            Gets the full name in format TaxClassID.StateID
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfo.#ctor">
            <summary>
            Constructor - Creates an empty TaxClassStateInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new TaxClassStateInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.TaxClassStateInfoProvider">
            <summary>
            Class providing TaxClassStateInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.GetTaxClassStates">
            <summary>
            Returns the query for all relationships between tax classes and states.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding structure.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding structure.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.GetTaxClassStateInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified tax class and state.
            </summary>
            <param name="taxClassId">Tax class ID</param>
            <param name="stateId">State ID</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.SetTaxClassStateInfo(CMS.Ecommerce.TaxClassStateInfo)">
            <summary>
            Sets relationship between specified tax class and state.
            </summary>
            <param name="infoObj">Tax class-state relationship to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.DeleteTaxClassStateInfo(CMS.Ecommerce.TaxClassStateInfo)">
            <summary>
            Deletes relationship between specified tax class and state.
            </summary>
            <param name="infoObj">Tax class-state relationship to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.Add(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
            <param name="taxValue">Tax rate.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.SetStateTaxValue(System.Int32,System.Int32,System.Decimal)">
            <summary>
            Sets tax value defined for specified state.
            </summary>
            <param name="taxClassId">Tax class ID</param>
            <param name="stateId">Country ID</param>
            <param name="value">Tax rate</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.TaxClassStateInfo"/> binding.
            </summary>
            <param name="taxClassId">Tax class ID.</param>
            <param name="stateId">State ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.RemoveStateTaxValue(System.Int32,System.Int32)">
            <summary>
            Removes tax value defined for specified state.
            </summary>
            <param name="taxClassId">Tax class ID</param>
            <param name="stateId">State ID</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.GetTaxClassStateInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified tax class and state.
            </summary>
            <param name="taxClassId">Tax class ID</param>
            <param name="stateId">State ID</param>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.TaxClassStateInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Returns where condition for TaxClassState selection using full name (in format TaxClassID.StateID)
            </summary>
            <param name="fullName">TaxClassState full name</param>
        </member>
        <member name="T:CMS.Ecommerce.Internal.AddressContactDataMapper">
            <summary>
            Maps address data to contact.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.Internal.AddressContactDataMapper.Map(CMS.Base.ISimpleDataContainer,CMS.ContactManagement.ContactInfo)">
            <summary>
            Maps address <paramref name="data"/> to provided <paramref name="contact"/>.
            </summary>
            <param name="data">Source data.</param>
            <param name="contact">Contact.</param>
        </member>
        <member name="T:CMS.Ecommerce.AddressInfo">
            <summary>
            AddressInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AddressInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AddressInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressCustomerID">
            <summary>
            Address customer ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressZip">
            <summary>
            Address ZIP code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressStateID">
            <summary>
            Address state ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressPhone">
            <summary>
            Address phone.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressCountryID">
            <summary>
            Address country ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressID">
            <summary>
            Address ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressName">
            <summary>
            Address name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressPersonalName">
            <summary>
            Address personal name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressLine1">
            <summary>
            Address line 1.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressLine2">
            <summary>
            Address line 2.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressCity">
            <summary>
            Address city.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressGUID">
            <summary>
            Address GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddressInfo.AddressLastModified">
            <summary>
            Date and time when the address was last modified.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property (additional support for Country and State properties).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.ToMacroString">
            <summary>
            Returns formatted address text.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.#ctor">
            <summary>
            Constructor - Creates an empty AddressInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AddressInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.AddressInfoProvider">
            <summary>
            Class providing AddressInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddresses">
            <summary>
            Returns the query for all addresses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressInfo(System.Int32)">
            <summary>
            Returns address with specified ID.
            </summary>
            <param name="addressId">Address ID</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressInfo(System.Guid)">
            <summary>
            Returns address with specified GUID.
            </summary>
            <param name="addressGuid">Address GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.SetAddressInfo(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets (updates or inserts) specified address.
            </summary>
            <param name="addressObj">Address to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.DeleteAddressInfo(CMS.Ecommerce.AddressInfo)">
            <summary>
            Deletes specified address.
            </summary>
            <param name="addressObj">Address to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.DeleteAddressInfo(System.Int32)">
            <summary>
            Deletes address with specified ID.
            </summary>
            <param name="addressId">Address ID</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddresses(System.Int32)">
            <summary>
            Returns query for all customer addresses.
            </summary>
            <param name="customerId">ID of the customer the address belongs to</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressName(CMS.Ecommerce.AddressInfo)">
            <summary>
            Returns address name created from the address parameters. The format of the address name is [personal or company name], [address line 1], [address line 2], [city].
            </summary>
            <param name="addressObj">Address data</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressPersonalName(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Returns address personal name created from the <paramref name="customer"/>.
            The format of the address name is '<see cref="P:CMS.Ecommerce.CustomerInfo.CustomerFirstName"/> <see cref="P:CMS.Ecommerce.CustomerInfo.CustomerLastName"/>'.
            </summary>
            <param name="customer">Customer from whom the personal address name is created.</param>
            <seealso cref="P:CMS.Ecommerce.AddressInfo.AddressPersonalName"/>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressesInternal(System.Int32)">
            <summary>
            Returns query for all addresses matching the specified parameters.
            </summary>
            <param name="customerId">ID of the customer the address belongs to</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressNameInternal(CMS.Ecommerce.AddressInfo)">
            <summary>
            Returns address name created from the address parameters. The format of the address name is [personal or company name], [address line 1], [address line 2], [city].
            </summary>
            <param name="addressObj">Address data</param>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProvider.GetAddressPersonalNameInternal(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Returns address personal name created from the <paramref name="customer"/>.
            The format of the address name is '<see cref="P:CMS.Ecommerce.CustomerInfo.CustomerFirstName"/> <see cref="P:CMS.Ecommerce.CustomerInfo.CustomerLastName"/>'.
            </summary>
            <param name="customer">Customer from whom the personal address name is created.</param>
            <seealso cref="P:CMS.Ecommerce.AddressInfo.AddressPersonalName"/>
        </member>
        <member name="T:CMS.Ecommerce.AddressInfoProviderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:CMS.Ecommerce.IAddressInfoProvider"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AddressInfoProviderExtensions.GetByCustomer(CMS.Ecommerce.IAddressInfoProvider,System.Int32)">
            <summary>
            Returns query for all addresses matching the specified parameters.
            </summary>
            <param name="addressInfoProvider">Provider for <see cref="T:CMS.Ecommerce.AddressInfo"/> management.</param>
            <param name="customerId">ID of the customer the address belongs to</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="addressInfoProvider"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.CreditEventInfo">
            <summary>
            CreditEventInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CreditEventInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CreditEventInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventName">
            <summary>
            Event name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventCustomerID">
            <summary>
            ID of the customer the event belongs to.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventID">
            <summary>
            Event ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventDescription">
            <summary>
            Event description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventDate">
            <summary>
            Event date.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventCreditChange">
            <summary>
            Event credit change.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventCreditGUID">
            <summary>
            Event credit GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventCreditLastModified">
            <summary>
            Date and time when the credit event was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreditEventInfo.EventSiteID">
            <summary>
            Credit event site ID. Set to 0 for global credit event.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfo.#ctor">
            <summary>
            Constructor - Creates an empty CreditEventInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new CreditEventInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.CreditEventInfoProvider">
            <summary>
            Class providing CreditEventInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEvents">
            <summary>
            Returns the query for all credit events.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventInfo(System.Int32)">
            <summary>
            Returns credit event with specified ID.
            </summary>
            <param name="eventId">Credit event ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.SetCreditEventInfo(CMS.Ecommerce.CreditEventInfo)">
            <summary>
            Sets (updates or inserts) specified credit event.
            </summary>
            <param name="eventObj">Credit event to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.DeleteCreditEventInfo(CMS.Ecommerce.CreditEventInfo)">
            <summary>
            Deletes specified credit event.
            </summary>
            <param name="eventObj">Credit event to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.DeleteCreditEventInfo(System.Int32)">
            <summary>
            Deletes credit event with specified ID.
            </summary>
            <param name="eventId">Credit event ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEvents(System.Int32)">
            <summary>
            Returns the query for all credit events for given site. Reflects use global credit setting.
            </summary>
            <param name="siteId">Id of the site to get credit events for.</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEvents(System.Int32,System.Int32)">
            <summary>
            Returns query for all customers' credit events on given site.
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.DeleteCreditEvents(System.Int32,System.Int32)">
            <summary>
            Deletes all customers' credit events.
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">Site ID</param> 
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetTotalCredit(System.Int32,System.Int32)">
            <summary>
            Returns customer's total credit.
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">Site ID</param> 
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventName(CMS.Ecommerce.OrderInfo)">
            <summary>
            Returns credit event name built from order data.
            </summary>
            <param name="orderObj">Order data</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventDescription(CMS.Ecommerce.OrderInfo)">
            <summary>
            Returns credit event description built from order data.
            </summary>
            <param name="orderObj">Order data</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventsInternal(System.Int32)">
            <summary>
            Returns dataset of all credit events for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventsInternal(System.Int32,System.Int32)">
            <summary>
            Returns dataset of all customers' credit events for specified site.
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.DeleteCreditEventsInternal(System.Int32,System.Int32)">
            <summary>
            Deletes all customer's credit events.
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetTotalCreditInternal(System.Int32,System.Int32)">
            <summary>
            Returns customer's total credit.
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventNameInternal(CMS.Ecommerce.OrderInfo)">
            <summary>
            Returns credit event name built from order data.
            </summary>
            <param name="orderObj">Order data</param>
        </member>
        <member name="M:CMS.Ecommerce.CreditEventInfoProvider.GetCreditEventDescriptionInternal(CMS.Ecommerce.OrderInfo)">
            <summary>
            Returns credit event description built from order data.
            </summary>
            <param name="orderObj">Order data</param>
        </member>
        <member name="T:CMS.Ecommerce.CustomerInfo">
            <summary>
            CustomerInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CustomerInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CustomerInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerEmail">
            <summary>
            Customer e-mail.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerFax">
            <summary>
            Customer fax.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerUserID">
            <summary>
            ID of the customer's user account. If set, it says that the customer is registered.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerUser">
            <summary>
            Registered user information. It is null for anonymous customer.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerID">
            <summary>
            Customer ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerLastName">
            <summary>
            Customer last name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerPhone">
            <summary>
            Customer phone.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerFirstName">
            <summary>
            Customer first name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerCompany">
            <summary>
            Customer company name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerGUID">
            <summary>
            Customer GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerTaxRegistrationID">
            <summary>
            Customer tax registration ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerOrganizationID">
            <summary>
            Customer organization ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerCreated">
            <summary>
            Date and time when the customer was created.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerLastModified">
            <summary>
            Date and time when the customer was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerSiteID">
            <summary>
            Customer site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerIsRegistered">
            <summary>
            Indicates if customer has login (meaning CustomerUserID is set).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerInfoName">
            <summary>
            Returns customer first name followed by last name and by company name when available. Format is "John Doe (My company)".
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.CustomerHasCompanyInfo">
            <summary>
            Indicates if customer has company information (company name, org id or tax id) filled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.Orders">
            <summary>
            Collection of customer orders made on current site.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.AllOrders">
            <summary>
            Collection of all customer orders.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.PurchasedProducts">
            <summary>
            Collection of all customer purchased products from all sites.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerInfo.Wishlist">
            <summary>
            Collection of all customer wishlist items from all sites. It is empty, if customer is not registered.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.#ctor">
            <summary>
            Constructor - Creates an empty CustomerInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new CustomerInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.RegisterProperties">
            <summary>
            Registers properties of the object
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.ToMacroString">
            <summary>
            Returns customer informative name taken from CustomerInfoName property.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfo.GetPreferences(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets customer's preferences on the site specified by <paramref name="site"/> parameter.
            </summary>
            <param name="site">Identifier of the site for which the preferences are obtained.</param>
            <returns>Customer's preferences on given site.
            Returns <see cref="F:CMS.Ecommerce.CustomerPreferences.Unknown"/> when preferences not found.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CustomerInfoExtensions">
            <summary>
            Encapsulates extension methods regarding <see cref="T:CMS.Ecommerce.CustomerInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoExtensions.UpdateLinkedContact(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Updates data of a contact who is linked to the <paramref name="customerInfo"/>.
            </summary>
            <remarks>If customer does not have linked <see cref="T:CMS.ContactManagement.ContactInfo"/> then one is created for him.</remarks>
            <param name="customerInfo">Customer whose data are used to update a <see cref="T:CMS.ContactManagement.ContactInfo"/> linked to him.</param>
        </member>
        <member name="T:CMS.Ecommerce.CustomerInfoProvider">
            <summary>
            Class providing CustomerInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.GetCustomers">
            <summary>
            Returns the query for all customers.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.GetCustomerInfo(System.Int32)">
            <summary>
            Returns customer with specified ID.
            </summary>
            <param name="customerId">Customer ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.SetCustomerInfo(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Sets (updates or inserts) specified customer.
            </summary>
            <param name="customerObj">Customer to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.DeleteCustomerInfo(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Deletes specified customer.
            </summary>
            <param name="customerObj">Customer to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.DeleteCustomerInfo(System.Int32)">
            <summary>
            Deletes customer with specified ID.
            </summary>
            <param name="customerId">Customer ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.GetCustomerInfoByUserID(System.Int32)">
            <summary>
            Returns customer with specified user ID.
            </summary>
            <param name="userId">User ID of the required customer</param>        
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.IsUserAuthorizedToModifyCustomer(System.String,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to modify customers. 'EcommerceModify' OR 'ModifyCustomers' permission is checked.
            </summary>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>        
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.InvalidateCustomer(System.Int32)">
            <summary>
            Invalidates customer (and user when registered) who made given order.
            </summary>
            <param name="customerId">ID of the customer to be invalidated.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.RegisterAndNotify(CMS.Ecommerce.CustomerInfo,System.String,System.String,System.String)">
            <summary>
            Registers the customer (<paramref name="ci"/>) with the given user name
            (<paramref name="userName"/>) and password (<paramref name="pass"/>),
            and notifies the customer with an invitation email.
            If <paramref name="pass"/> is <c>null</c>, the system generates a new password.
            If <paramref name="userName"/> is <c>null</c>, the customer's email is used instead.
            </summary>
            <param name="ci">Customer object.</param>
            <param name="emailTemplateCodeName">Template code name of the invitation email.</param>
            <param name="userName">Customer's user name.</param>
            <param name="pass">Customer's password.</param>
            <returns><c>True</c> if the method was successful.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.RegisterCustomer(CMS.Ecommerce.CustomerInfo,System.String,System.String)">
            <summary>
            Registers the customer (<paramref name="ci"/>) with the given user name
            (<paramref name="userName"/>) and password (<paramref name="password"/>).
            If <paramref name="userName"/> is <c>null</c>, the customer's email is used instead.
            </summary>
            <param name="ci">Customer object.</param>
            <param name="password">Customer's password.</param>
            <param name="userName">Customer's user name.</param>
            <returns>Customer's new user or <c>null</c> if customer could not be registered. An error is logged to the event log in that case.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.SendLoginDetailsNotificationEmail(CMS.Membership.UserInfo,System.String,System.String,System.Int32)">
            <summary>
            Send login details notification email based on given template. Resolves macros "UserName", "Password", "UserFullName", "AccountUrl".
            Returns true on success. 
            </summary>
            <param name="user">New user</param>
            <param name="password">New password</param>
            <param name="emailTemplateCodeName">Template</param>
            <param name="siteId">Site Id</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CopyDataFromCustomerToUser(CMS.Ecommerce.CustomerInfo,CMS.Membership.UserInfo)">
            <summary>
            Copies customers data to user object (first name, last name, full name, phone, email). Returns true if data were different. 
            </summary>
            <param name="customer">Customer info object as a source of user info data.</param>
            <param name="user">User info object to be updated.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CopyDataFromUserToCustomer(CMS.Ecommerce.CustomerInfo,CMS.Membership.UserInfo)">
            <summary>
            Copies users data to customer object (first name, last name, phone, email). Returns true if data were different. 
            </summary>
            <param name="customer">Customer to be updated.</param>
            <param name="user">User info as a source of data.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.GetCustomerInfoInternal(System.Int32)">
            <summary>
            Returns customer with specified ID.
            </summary>
            <param name="customerId">Customer ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.SetCustomerInfoInternal(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Sets (updates or inserts) specified customer.
            </summary>
            <param name="customerObj">Customer to be set</param>        
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.DeleteCustomerInfoInternal(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Deletes specified customer.
            </summary>
            <param name="customerObj">Customer to be deleted</param>        
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.GetCustomerInfoByUserIDInternal(System.Int32)">
            <summary>
            Returns customer with specified user ID.
            </summary>
            <param name="userId">User ID of the required customer</param>   
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.InvalidateCustomerInternal(System.Int32)">
            <summary>
            Invalidates customer (and user when registered) who made given order.
            </summary>
            <param name="customerId">ID of the customer to be invalidated.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.RegisterAndNotifyInternal(CMS.Ecommerce.CustomerInfo,System.String,System.String,System.String)">
            <summary>
            Registers the customer (<paramref name="ci"/>) with the given user name
            (<paramref name="userName"/>) and password (<paramref name="pass"/>),
            and notifies the customer with an invitation email.
            If <paramref name="pass"/> is <c>null</c>, the system generates a new password.
            If <paramref name="userName"/> is <c>null</c>, the customer's email is used instead.
            </summary>
            <param name="ci">Customer object.</param>
            <param name="emailTemplateCodeName">Template code name of the invitation email.</param>
            <param name="userName">Customer's user name.</param>
            <param name="pass">Customer's password.</param>
            <returns><c>True</c> if the method was successful.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.RegisterCustomerInternal(CMS.Ecommerce.CustomerInfo,System.String,System.String)">
            <summary>
            Registers the customer (<paramref name="ci"/>) with the given user name
            (<paramref name="userName"/>) and password (<paramref name="password"/>).
            If <paramref name="userName"/> is <c>null</c>, the customer's email is used instead.
            </summary>
            <param name="ci">Customer object.</param>
            <param name="password">Customer's password.</param>
            <param name="userName">Customer's user name.</param>
            <returns>Customer's new user.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CopyDataFromCustomerToUserInternal(CMS.Ecommerce.CustomerInfo,CMS.Membership.UserInfo)">
            <summary>
            Copies customers data to user object (first name, last name, full name, phone, email). Returns true if data were different. 
            </summary>
            <param name="customer">Customer info object as a source of user info data.</param>
            <param name="user">User info object to be updated.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CopyDataFromUserToCustomerInternal(CMS.Ecommerce.CustomerInfo,CMS.Membership.UserInfo)">
            <summary>
            Copies users data to customer object (first name, last name, phone, email). Returns true if data were different. 
            </summary>
            <param name="customer">Customer to be updated.</param>
            <param name="user">User info as a source of data.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.SendLoginDetailsNotificationEmailInternal(CMS.Membership.UserInfo,System.String,System.String,System.Int32)">
            <summary>
            Send login details notification email based on given template. Resolves macros "UserName", "Password", "UserFullName", "AccountUrl".
            Returns true on success. 
            </summary>
            <param name="user">New user</param>
            <param name="password">New password</param>
            <param name="emailTemplateCodeName">Template</param>
            <param name="siteId">Site Id</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.SynchronizeCustomers(CMS.Membership.UserInfo)">
            <summary>
            Selects collection of customers for given user and ensures synchronization of values first name, last name, phone and email.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.SynchronizeUser(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Ensures synchronization of customer's user if customer's first name, last name, phone or email has changed.
            </summary>
            <param name="customer"></param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CheckCustomerRegistrationDetails(CMS.Ecommerce.CustomerInfo,System.String,System.String)">
            <summary>
            Checks customer registration details and logs messages into the Event log in case of error.
            </summary>
            <param name="customer">Customer object</param>
            <param name="password">New password</param>
            <param name="userName">New username</param>
            <returns>True if everything is OK, false otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CheckCustomerRegistrationPassword(System.String,System.Int32)">
            <summary>
            Checks customer registration password and logs message into the Event log in case of error.
            </summary>
            <param name="password">New password</param>
            <param name="siteId">Site identifier.</param>
            <returns>True if everything is OK, false otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CheckCustomerRegistrationUsername(System.String,System.Int32)">
            <summary>
            Checks customer registration user name and logs message into the Event log in case of error.
            </summary>
            <param name="userName">New username</param>
            <param name="siteId">Site identifier</param>
            <returns>True if everything is OK, false otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CustomerInfoProvider.CheckCustomerRegistrationEmail(System.String,System.Int32)">
            <summary>
            Checks customer registration email and logs message into the Event log in case of error.
            </summary>
            <param name="email">New email</param>
            <param name="siteId">Site identifier</param>
            <returns>True if everything is OK, false otherwise.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CustomerPreferences">
            <summary>
            Represent customer preferences. 
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CustomerPreferences.Unknown">
            <summary>
            Predefined unknown customer preferences.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerPreferences.CurrencyID">
            <summary>
            ID of the preferred currency. <c>null</c> when preference is unknown.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerPreferences.ShippingOptionID">
            <summary>
            ID of the preferred shipping option. <c>null</c> when preference is unknown.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerPreferences.PaymentOptionID">
            <summary>
            ID of the preferred payment option. <c>null</c> when preference is unknown.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerPreferences.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CustomerPreferences"/> using given preferred options.
            </summary>
            <param name="currencyID">The identifier of the preferred currency.</param>
            <param name="shippingOptionID">The identifier of the preferred shipping option.</param>
            <param name="paymentOptionID">The identifier of the preferred payment option.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultCustomerPreferencesProvider">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ICustomerPreferencesProvider"/> taking customer's preferences 
            from the last order placed on respective site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCustomerPreferencesProvider.GetPreferences(CMS.Ecommerce.CustomerInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets customer's preferences on the site specified by <paramref name="site"/> parameter.
            </summary>
            <param name="customer">Customer for who the preferences are obtained.</param>
            <param name="site">Identifier of the site for which the preferences are obtained.</param>
            <returns>Customer's preferences on given site.</returns>
        </member>
        <member name="T:CMS.Ecommerce.DefaultCustomerRegistrationRepository">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ICustomerRegistrationRepository"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCustomerRegistrationRepository.#ctor(CMS.Ecommerce.ISettingServiceFactory,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.DefaultCustomerRegistrationRepository"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DefaultCustomerRegistrationRepository.IsCustomerRegisteredAfterCheckout">
            <summary>
            Indicates that customer will be registered after checkout.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DefaultCustomerRegistrationRepository.RegisteredAfterCheckoutTemplate">
            <summary>
            E-mail template code name used for registration after checkout.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCustomerRegistrationRepository.Clear">
            <summary>
            Clears repository values.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DefaultCustomerRegistrationRepositoryFactory">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ICustomerRegistrationRepositoryFactory"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCustomerRegistrationRepositoryFactory.#ctor(CMS.Ecommerce.ISettingServiceFactory)">
            <summary>
            Create a new instance of <see cref="T:CMS.Ecommerce.DefaultCustomerRegistrationRepositoryFactory"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultCustomerRegistrationRepositoryFactory.GetRepository(System.Int32)">
            <summary>
            Returns customer registration repository for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.IAddressInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.AddressInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICreditEventInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.CreditEventInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICustomerInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.CustomerInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICustomerPreferencesProvider">
            <summary>
            Interface for provider of customer's preferences.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICustomerPreferencesProvider.GetPreferences(CMS.Ecommerce.CustomerInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets customer's preferences on the site specified by <paramref name="site"/> parameter.
            </summary>
            <param name="customer">Customer for who the preferences are obtained.</param>
            <param name="site">Identifier of the site for which the preferences are obtained.</param>
            <returns>Customer's preferences on given site. 
            Returns <see cref="F:CMS.Ecommerce.CustomerPreferences.Unknown"/> when customer or preferences not found.</returns>
        </member>
        <member name="T:CMS.Ecommerce.ICustomerRegistrationRepository">
            <summary>
            Repository for storing data related to customer registration after checkout process is finished.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ICustomerRegistrationRepository.IsCustomerRegisteredAfterCheckout">
            <summary>
            Indicates that customer will be registered after checkout.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ICustomerRegistrationRepository.RegisteredAfterCheckoutTemplate">
            <summary>
            E-mail template code name used for registration after checkout.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICustomerRegistrationRepository.Clear">
            <summary>
            Clears repository values.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICustomerRegistrationRepositoryFactory">
            <summary>
            Interface for factories providing customer registration repositories.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ICustomerRegistrationRepository"/>
        </member>
        <member name="M:CMS.Ecommerce.ICustomerRegistrationRepositoryFactory.GetRepository(System.Int32)">
            <summary>
            Returns customer registration repository for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.OrdersCollection">
            <summary>
            Collection of customer orders represented by OrderInfo objects
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrdersCollection.TotalVolume">
            <summary>
            Total volume of all customer orders. Value is expressed in site main currency for site orders. 
            Result is in global main currency when collection contains orders from all sites.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrdersCollection.CustomerID">
            <summary>
            The ID of customer whose orders should be loaded
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrdersCollection.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor - creates collection of orders for the given customer
            </summary>
            <param name="customerId">Customer ID</param>
            <param name="siteId">ID of the site from which the customer orders should be loaded. Use 0 to fill collection with customer orders from all sites.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrdersCollection.Clone">
            <summary>
            Creates the clone of the collection.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrdersCollection.GetCompleteWhereCondition">
            <summary>
            Gets the complete where condition for the collection
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrdersCollection.CopyPropertiesTo(CMS.DataEngine.IInfoObjectCollection)">
            <summary>
            Copies the properties of this collection to the other collection
            </summary>
            <param name="targetCollection">Target collection</param>
        </member>
        <member name="T:CMS.Ecommerce.AbstractCartItemDiscountSource">
            <summary>
            Represents class with support methods for multibuy and product coupon discount sources.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CartDiscountsFilter">
            <summary>
            Allows to filter list of conditional cart discounts according to its conditions and stop processing flag.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CartDiscountsFilter.ResolverHelper">
            <summary>
            Helper for correct macro resolver preparation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CartDiscountsFilter.ResolverHelper.PrepareResolver(CMS.MacroEngine.MacroResolver,CMS.Ecommerce.CalculatorData)">
            <summary>
            Sets source data in given resolver from given calculation data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CartDiscountsFilter.#ctor(CMS.Ecommerce.CalculatorData)">
            <summary>
            Constructor.
            </summary>
            <param name="calculation">Data from shopping cart calculation to be used for resolving cart discounts.</param>
        </member>
        <member name="M:CMS.Ecommerce.CartDiscountsFilter.Filter(System.Collections.Generic.IEnumerable{CMS.Ecommerce.IConditionalDiscount},System.Decimal)">
            <summary>
            Filters given discounts and leaves only those which conditions and min amounts are met.
            </summary>
            <param name="discounts">Conditional discounts to be filtered.</param>
            <param name="priceLimit">Only discounts with lower minimal amount than priceLimit will be left. Parameter is expected to be in the main currency and is ignored when set negative.</param>
        </member>
        <member name="M:CMS.Ecommerce.CartDiscountsFilter.GetCondition(CMS.Ecommerce.IConditionalDiscount)">
            <summary>
            Returns DiscountCartCondition from given discount object.
            </summary>
            <param name="discount">Discount to get cart condition from.</param>
        </member>
        <member name="T:CMS.Ecommerce.BaseCouponCodeInfoProvider`2">
            <summary>
            Base provider for MultiBuyCouponCodeInfoProvider and CouponCodeInfoProvider
            </summary>    
        </member>
        <member name="M:CMS.Ecommerce.BaseCouponCodeInfoProvider`2.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Initializes a new instance of the BaseCouponCodeInfoProvider{TInfo, TProvider} class.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.Ecommerce.BaseCouponCodeInfoProvider`2.GetCouponUsageInfoMessage(CMS.DataEngine.ObjectQuery,System.Boolean)">
            <summary>
            Returns formatted message about codes.
            </summary>
            <param name="codes">Coupon codes.</param>
            <param name="dataOnly">If <c>true</c>, only statistics (used / limit) are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.BaseCouponCodeInfoProvider`2.GetCouponCodeUseCount(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String)">
            <summary>
            Gets info about how many coupons are available in specific discount and how many of them were already used.
            </summary>
            <remarks>
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing columns: discount ID, Uses, UnlimitedCodeCount and Limit.
            </remarks>
            <param name="discountIDs">IDs of discounts to get coupon counts for. Use null for all relevant discounts.</param>
            <param name="useCountColumn">Name of column containing count of already executed redemptions.</param>
            <param name="useLimitColumn">Name of column containing count of redemption limit.</param>
        </member>
        <member name="M:CMS.Ecommerce.BaseCouponCodeInfoProvider`2.TryCheckDiscountPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean@)">
            <summary>
            Checks user's read/modify discount permissions. Permission check result is stored in result property.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
            <param name="result">Check permissions result.</param>
            <returns>Returns <c>true</c> if permission type was handled; <c>false</c> otherwise</returns>
        </member>
        <member name="T:CMS.Ecommerce.CodeUniquenessChecker">
            <summary>
            Ensures discount code uniqueness in entire application.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CodeUniquenessChecker.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CodeUniquenessChecker"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CodeUniquenessChecker.IsUnique(System.String)">
            <summary>
            Returns true if given code is unique, false otherwise.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CouponCode">
            <summary>
            Represents the coupon code.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCode.#ctor">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CouponCode"/>
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCode.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CouponCode"/>
            </summary>
            <param name="code">Coupon code.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCode.#ctor(System.String,CMS.Ecommerce.CouponCodeApplicationStatusEnum,CMS.Ecommerce.ICouponCodeApplication,System.Nullable{System.Decimal})">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CouponCode"/>
            </summary>
            <param name="code">Coupon code.</param>
            <param name="applicationStatus">Status of coupon code application.</param>
            <param name="applicationAction">Action for coupon code application.</param>
            <param name="valueInMainCurrency">Coupon code discount value.</param>
        </member>
        <member name="P:CMS.Ecommerce.CouponCode.Code">
            <summary>
            Gets the coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCode.ValueInMainCurrency">
            <summary>
            The provided discount value in main currency.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCode.ShouldSerializeValueInMainCurrency">
            <summary>
            Do not remove. 
            A conventional method that prevents the serialization of nullable decimal property.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CMS.Ecommerce.CouponCode.ApplicationStatus">
            <summary>
            Gets the information about coupon application.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCode.Apply">
            <summary>
            Applies coupon code during order creation.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CouponCodeApplicationStatusEnum">
            <summary>
            Represents the status of coupon code application.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeApplicationStatusEnum.Invalid">
            <summary>
            Default state. Coupon code hasn't been applied yet.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeApplicationStatusEnum.NotAppliedInCart">
            <summary>
            Coupon code is in cart, but it is not applied.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeApplicationStatusEnum.AppliedInCart">
            <summary>
            Coupon code is applied in shopping cart, but the order is not created yet.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeApplicationStatusEnum.AppliedInOrder">
            <summary>
            Coupon code is applied in order.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeApplicationStatusEnum.GiftCardCorrection">
            <summary>
            Coupon code is applied temporarily as a gift card correction.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CouponCodeCollection">
            <summary>
            Represents the collection of coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeCollection.Codes">
            <summary>
            Gets the coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeCollection.NotAppliedInCartCodes">
            <summary>
            Gets coupon codes, that are in cart, but not applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeCollection.CartAppliedCodes">
            <summary>
            Gets coupon codes that are already applied in cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeCollection.OrderAppliedCodes">
            <summary>
            Gets all applied coupon codes that are already applied in order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeCollection.AllAppliedCodes">
            <summary>
            Gets all applied coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeCollection.CouponCodes">
            <summary>
            Gets the coupon codes.
            </summary>
            <remarks>
            Exists due to serialization reasons.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.Add(System.String,CMS.Ecommerce.CouponCodeApplicationStatusEnum)">
            <summary>
            Adds coupon with given <paramref name="couponCode"/> and <paramref name="status"/> to the collection.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.Remove(System.String)">
            <summary>
            Removes the coupon with given <paramref name="couponCode"/> from collection.
            Does nothing when no such coupon exists.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.Merge(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ICouponCode})">
            <summary>
            Merge existing coupon codes with given ones.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.IsNotAppliedInCart(System.String)">
            <summary>
            Returns true when given codes is present in cart, but it is not applied.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.IsAppliedInCart(System.String)">
            <summary>
            Returns true when given codes is present and was applied in cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.IsAppliedInOrder(System.String)">
            <summary>
            Returns true when given codes is present and was applied in order.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.Apply">
            <summary>
            Applies all applicable coupon codes during order creation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.Serialize">
            <summary>
            Serializes the collection into string.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.Deserialize(System.String)">
            <summary>
            Returns a new instance of <see cref="T:CMS.Ecommerce.CouponCodeCollection"/> deserialized from given string.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.UpdateCurrentlyAppliedCoupons(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ICouponCode})">
            <summary>
            Override old coupon codes with appropriate new coupon codes. Coupon codes already applied in order are left intact.
            </summary>
            <param name="couponCodes">Currently applied coupon codes</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.UpdateNoLongerAppliedCoupons(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ICouponCode})">
            <summary>
            Change application status of coupon codes that are present in cart, but ceased to be applied.
            </summary>
            <param name="couponCodes">Currently applied coupon codes</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.RemoveInvalidCoupons">
            <summary>
            Removes coupon codes that are not valid.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollection.RemoveGiftCardCorrections">
            <summary>
            Removes coupon codes that represent gift card corrections.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CouponCodeCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.Ecommerce.CouponCodeCollection"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollectionExtensions.GetAllDistinctCouponCodes(CMS.Ecommerce.IReadOnlyCouponCodeCollection)">
            <summary>
            Returns all unique coupon codes from the collection. Uses case-insensitive ordinal string comparison.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeCollectionExtensions.Contains(CMS.Ecommerce.IReadOnlyCouponCodeCollection,System.String)">
            <summary>
            Returns true if the collection contains the specified <paramref name="couponCode"/>. Uses case-insensitive ordinal string comparison.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CouponCodeInfo">
            <summary>
            CouponCodeInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CouponCodeInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeID">
            <summary>
            Coupon code ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeCode">
            <summary>
            Unique discount coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeUseLimit">
            <summary>
            Indicates how many times the coupon code can be applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeUseCount">
            <summary>
            Indicates how many times the code was applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeDiscountID">
            <summary>
            ID of the coupon code parent discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeLastModified">
            <summary>
            Date and time when coupon code was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.CouponCodeGUID">
            <summary>
            Coupon code unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponCodeInfo.UseLimitExceeded">
            <summary>
            Indicates that this code has exceeded its use limitation. Returns false for codes with no use limit.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.#ctor">
            <summary>
            Constructor - Creates an empty CouponCodeInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new CouponCodeInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.LoadDefaultData">
            <summary>
            Loads the default object data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.CouponCodeInfoProvider">
            <summary>
            Class providing CouponCodeInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodes">
            <summary>
            Returns a query for all the CouponCodeInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodes(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the CouponCodeInfo objects on specified site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodeInfo(System.Int32)">
            <summary>
            Returns CouponCodeInfo with specified ID.
            </summary>
            <param name="id">CouponCodeInfo ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodeInfo(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns CouponCodeInfo with specified name.
            </summary>
            <param name="name">CouponCodeInfo name.</param>
            <param name="siteIdentifier">The site identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodeInfo(System.Guid)">
            <summary>
            Returns CouponCodeInfo with specified GUID.
            </summary>
            <param name="guid">CouponCodeInfo GUID.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.SetCouponCodeInfo(CMS.Ecommerce.CouponCodeInfo)">
            <summary>
            Sets (updates or inserts) specified CouponCodeInfo.
            </summary>
            <param name="infoObj">CouponCodeInfo to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.DeleteCouponCodeInfo(CMS.Ecommerce.CouponCodeInfo)">
            <summary>
            Deletes specified CouponCodeInfo.
            </summary>
            <param name="infoObj">CouponCodeInfo to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.DeleteCouponCodeInfo(System.Int32)">
            <summary>
            Deletes CouponCodeInfo with specified ID.
            </summary>
            <param name="id">CouponCodeInfo ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodeUseCount(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets info about how many coupons are available in specific discount and how many of them were already used.
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing CouponCodeDiscountID, Uses, UnlimitedCodeCount and Limit.
            </summary>
            <param name="discountIDs">IDs of discounts to get coupon counts for. Use null for all relevant discounts.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponUsageInfoMessage(CMS.Ecommerce.DiscountInfo,System.Boolean)">
            <summary>
            Returns formatted message about codes.
            </summary>
            <param name="parent">Parent offer discount of coupon codes.</param>
            <param name="dataOnly">If <c>true</c>, only statistics (used / limit) are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.CreateCoupon(CMS.Ecommerce.DiscountInfo,System.String,System.Int32)">
            <summary>
            Creates and saves new coupon for specified discount.
            NOTE: The uniqueness is not checked.
            </summary>
            <param name="discount">The discount.</param>
            <param name="code">The code.</param>
            <param name="numberOfUses">The number of uses.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodesInternal(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the CouponCodeInfo objects on specified site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodeInfoInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns CouponCodeInfo with specified name on specified site.
            </summary>
            <param name="name">CouponCodeInfo name.</param>
            <param name="siteIdentifier">The site identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.SetInfo(CMS.Ecommerce.CouponCodeInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetCouponCodeUseCountInternal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets info about how many coupons are available in specific discount and how many of them were already used.
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing CouponCodeDiscountID, Uses, UnlimitedCodeCount and Limit.
            </summary>
            <param name="discountIDs">IDs of discounts to get coupon counts for. Use null for all relevant discounts.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.CreateCouponInternal(CMS.Ecommerce.DiscountInfo,System.String,System.Int32)">
            <summary>
            Creates and saves new coupon for specified discount.
            NOTE: The uniqueness is not checked.
            </summary>
            <param name="discount">The discount.</param>
            <param name="code">The code.</param>
            <param name="numberOfUses">The number of uses.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetDiscountCouponCodes(System.Int32)">
            <summary>
            Returns a query for <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> objects for the given <paramref name="discountID"/>.
            </summary>
            <param name="discountID">DiscountInfo identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.CouponCodeInfoProvider.GetDiscountCouponCode(System.Int32,System.String)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> for the discount with specified <paramref name="couponCode"/>.
            Returns <c>null</c> if no code found.
            </summary>
            <param name="discountID">DiscountInfo identifier</param>
            <param name="couponCode">CouponCode code</param>
        </member>
        <member name="T:CMS.Ecommerce.CouponGeneratorConfig">
            <summary>
            Represents configuration object for discount coupon creation with redemption limit.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponGeneratorConfig.CouponCode">
            <summary>
            Generated coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CouponGeneratorConfig.NumberOfUses">
            <summary>
            Specifies number of uses of coupon code.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponGeneratorConfig.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CouponGeneratorConfig"/>
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CouponGeneratorConfig.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CouponGeneratorConfig"/>
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GiftCardCouponCodeInfo">
            <summary>
            GiftCardCouponCodeInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.GiftCardCouponCodeInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.GiftCardCouponCodeInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeID">
            <summary>
            Gift card coupon code ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeCode">
            <summary>
            Unique gift card coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeRemainingValue">
            <summary>
            Coupon code's remaining value
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeGiftCardID">
            <summary>
            ID of the coupon code parent gift card.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeLastModified">
            <summary>
            Date and time when gift card coupon code was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeGuid">
            <summary>
            Gift card coupon code unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardCouponCodeInfo.GiftCardCouponCodeGiftCardValue">
            <summary>
            The value of a parent gift card. Used also in UniGrid transformation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfo.#ctor">
            <summary>
            Constructor - Creates an empty GiftCardCouponCodeInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new GiftCardCouponCodeInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfo.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.GiftCardCouponCodeInfoProvider">
            <summary>
            Class providing GiftCardCouponCodeInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodes">
            <summary>
            Returns a query for all the GiftCardCouponCodeInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodes(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the GiftCardCouponCodeInfo objects on specified site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodeInfo(System.Int32)">
            <summary>
            Returns GiftCardCouponCodeInfo with specified ID.
            </summary>
            <param name="id">GiftCardCouponCodeInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.GiftCardCouponCodeInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.GiftCardCouponCodeInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodeInfo(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns GiftCardCouponCodeInfo with specified name.
            </summary>
            <param name="name">GiftCardCouponCodeInfo name</param>
            <param name="siteIdentifier">The site identifier</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodeInfo(System.Guid)">
            <summary>
            Returns GiftCardCouponCodeInfo with specified GUID.
            </summary>
            <param name="guid">GiftCardCouponCodeInfo GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.Set(CMS.Ecommerce.GiftCardCouponCodeInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.SetGiftCardCouponCodeInfo(CMS.Ecommerce.GiftCardCouponCodeInfo)">
            <summary>
            Sets (updates or inserts) specified GiftCardCouponCodeInfo.
            </summary>
            <param name="infoObj">GiftCardCouponCodeInfo to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.DeleteGiftCardCouponCodeInfo(CMS.Ecommerce.GiftCardCouponCodeInfo)">
            <summary>
            Deletes specified GiftCardCouponCodeInfo.
            </summary>
            <param name="infoObj">GiftCardCouponCodeInfo to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.DeleteGiftCardCouponCodeInfo(System.Int32)">
            <summary>
            Deletes GiftCardCouponCodeInfo with specified ID.
            </summary>
            <param name="id">GiftCardCouponCodeInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodeUsage(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets information about the total number of coupon codes available for the gift cards with specified IDs and the total remaining value of these coupon codes.
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing GiftCardCouponCodeGiftCardID, GiftCardValue, TotalRemainingValue and CouponCount.
            </summary>
            <param name="giftCardIDs">IDs of gift cards to get coupon counts for. Use null for all relevant gift cards.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponUsageInfoMessage(CMS.Ecommerce.GiftCardInfo,System.Boolean)">
            <summary>
            Returns formatted message about codes.
            </summary>
            <param name="parent">Parent offer gift card of coupon codes</param>
            <param name="dataOnly">If <c>true</c>, only statistics (used / limit) are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.CreateGiftCardCoupon(CMS.Ecommerce.GiftCardInfo,System.String)">
            <summary>
            Creates and saves new coupon for specified gift card.
            NOTE: The uniqueness is not checked.
            </summary>
            <param name="giftCard">The gift card</param>
            <param name="code">The code</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodesInternal(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the GiftCardCouponCodeInfo objects on specified site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodeInfoInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns GiftCardCouponCodeInfo with specified name on specified site.
            </summary>
            <param name="name">GiftCardCouponCodeInfo name</param>
            <param name="siteIdentifier">The site identifier</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetCouponUsageInfoMessage(CMS.DataEngine.ObjectQuery,System.Boolean)">
            <summary>
            Returns formatted message about codes.
            </summary>
            <param name="codes">Coupon codes.</param>
            <param name="dataOnly">If <c>true</c>, only statistics (used / limit) are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodeUsageInternal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets information about the total number of coupon codes available for the gift cards with specified IDs and the total remaining value of these coupon codes.
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing GiftCardCouponCodeGiftCardID, GiftCardValue, TotalRemainingValue and CouponCount.
            </summary>
            <param name="giftCardIDs">IDs of gift cards to get coupon counts for. Use null for all relevant gift cards.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.CreateGiftCardCouponInternal(CMS.Ecommerce.GiftCardInfo,System.String)">
            <summary>
            Creates and saves new coupon for specified gift card.
            NOTE: The uniqueness is not checked.
            </summary>
            <param name="giftCard">The gift card</param>
            <param name="code">The code</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCodes(System.Int32)">
            <summary>
            Returns a query for <see cref="T:CMS.Ecommerce.GiftCardCouponCodeInfo"/> objects for the given <paramref name="giftCardID"/>.
            </summary>
            <param name="giftCardID">GiftCardInfo identifier</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardCouponCodeInfoProvider.GetGiftCardCouponCode(System.Int32,System.String)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.GiftCardCouponCodeInfo"/> for the gift card with specified <paramref name="couponCode"/>.
            Returns <c>null</c> if no code found.
            </summary>
            <param name="giftCardID">GiftCardInfo identifier</param>
            <param name="couponCode">CouponCode code</param>
        </member>
        <member name="T:CMS.Ecommerce.ICodeUniquenessChecker">
            <summary>
            Ensures discount code uniqueness in entire application.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICodeUniquenessChecker.IsUnique(System.String)">
            <summary>
            Returns true if given code is unique, false otherwise.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICouponCode">
            <summary>
            Represents the coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ICouponCode.Code">
            <summary>
            Gets the coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ICouponCode.ValueInMainCurrency">
            <summary>
            The provided discount value in main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ICouponCode.ApplicationStatus">
            <summary>
            Gets the information about coupon application.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICouponCodeApplication">
            <summary>
            Represents action for coupon code application.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeApplication.Apply">
            <summary>
            Applies coupon code during order creation.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICouponCodeCollection">
            <summary>
            Represents the collection of coupon codes.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.Add(System.String,CMS.Ecommerce.CouponCodeApplicationStatusEnum)">
            <summary>
            Adds coupon with given <paramref name="couponCode"/> and <paramref name="status"/> to the collection.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.Remove(System.String)">
            <summary>
            Removes the coupon with given <paramref name="couponCode"/> from collection.
            Does nothing when no such coupon exists.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.Merge(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ICouponCode})">
            <summary>
            Merge existing coupon codes with given ones.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.IsNotAppliedInCart(System.String)">
            <summary>
            Returns true when given codes is present in cart, but it is not applied.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.IsAppliedInCart(System.String)">
            <summary>
            Returns true when given codes is present and is applied in cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.IsAppliedInOrder(System.String)">
            <summary>
            Returns true when given codes is present and was applied in order.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICouponCodeCollection.Serialize">
            <summary>
            Serializes the collection into string.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICouponCodeInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IGiftCardCouponCodeInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.GiftCardCouponCodeInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyCouponCodeInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyCouponCodeInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IReadOnlyCouponCodeCollection">
            <summary>
            Represents the read only collection of coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IReadOnlyCouponCodeCollection.Codes">
            <summary>
            Gets all coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IReadOnlyCouponCodeCollection.NotAppliedInCartCodes">
            <summary>
            Gets coupon codes, that are in cart, but not applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IReadOnlyCouponCodeCollection.CartAppliedCodes">
            <summary>
            Gets coupon codes that are already applied in cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IReadOnlyCouponCodeCollection.OrderAppliedCodes">
            <summary>
            Gets coupon codes that are already applied in order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IReadOnlyCouponCodeCollection.AllAppliedCodes">
            <summary>
            Gets coupon codes that are already applied in cart or order.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyCouponCodeInfo">
            <summary>
            MultiBuyCouponCodeInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyCouponCodeInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyCouponCodeInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeID">
            <summary>
            Multi buy coupon code ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeCode">
            <summary>
            Unique product coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeUseLimit">
            <summary>
            Coupon usage is limited by inserted value.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeUseCount">
            <summary>
            Multi buy coupon code use count
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeMultiBuyDiscountID">
            <summary>
            Multi buy coupon code multi buy discount ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeLastModified">
            <summary>
            Multi buy coupon code last modified
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.MultiBuyCouponCodeGUID">
            <summary>
            Multi buy coupon code GUID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyCouponCodeInfo.UseLimitExceeded">
            <summary>
            Indicates that this code has exceeded its use limitation. Returns false for codes with no use limit.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.#ctor">
            <summary>
            Constructor - Creates an empty MultiBuyCouponCodeInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MultiBuyCouponCodeInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.LoadDefaultData">
            <summary>
            Loads the default object data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.CheckUniqueCodeName">
            <summary>
            Checks if the object has unique code name. Returns true if the object has unique code name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider">
            <summary>
            Class providing MultiBuyCouponCodeInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodes">
            <summary>
            Returns a query for all the MultiBuyCouponCodeInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodes(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the MultiBuyCouponCodeInfo objects on specified site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodeInfo(System.Int32)">
            <summary>
            Returns MultiBuyCouponCodeInfo with specified ID.
            </summary>
            <param name="id">MultiBuyCouponCodeInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyCouponCodeInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyCouponCodeInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodeInfo(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns MultiBuyCouponCodeInfo with specified name.
            </summary>
            <param name="name">MultiBuyCouponCodeInfo name.</param>
            <param name="siteIdentifier">The site identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodeInfo(System.Guid)">
            <summary>
            Returns MultiBuyCouponCodeInfo with specified GUID.
            </summary>
            <param name="guid">MultiBuyCouponCodeInfo GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.SetMultiBuyCouponCodeInfo(CMS.Ecommerce.MultiBuyCouponCodeInfo)">
            <summary>
            Sets (updates or inserts) specified MultiBuyCouponCodeInfo.
            </summary>
            <param name="infoObj">MultiBuyCouponCodeInfo to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.DeleteMultiBuyCouponCodeInfo(CMS.Ecommerce.MultiBuyCouponCodeInfo)">
            <summary>
            Deletes specified MultiBuyCouponCodeInfo.
            </summary>
            <param name="infoObj">MultiBuyCouponCodeInfo to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.DeleteMultiBuyCouponCodeInfo(System.Int32)">
            <summary>
            Deletes MultiBuyCouponCodeInfo with specified ID.
            </summary>
            <param name="id">MultiBuyCouponCodeInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetCouponCodeUseCount(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets info about how many coupons are available in specific bultibuy discount and how many of them were already used.
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing MultiBuyCouponCodeMultiBuyDiscountID, Uses, UnlimitedCodeCount and Limit.
            </summary>
            <param name="discountIDs">IDs of discounts to get coupon counts for. Use null for all relevant bultibuy discounts.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponUsageInfoMessage(CMS.Ecommerce.MultiBuyDiscountInfo,System.Boolean)">
            <summary>
            Returns formatted message about codes.
            </summary>
            <param name="parent">Parent offer multibuy discount of coupon codes</param>
            <param name="dataOnly">If <c>true</c>, only statistics (used / limit) are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.CreateCoupon(CMS.Ecommerce.MultiBuyDiscountInfo,System.String,System.Int32)">
            <summary>
            Creates and saves new coupon for specified discount.
            NOTE: The uniqueness is not checked.
            </summary>
            <param name="discount">The discount.</param>
            <param name="code">The code.</param>
            <param name="numberOfUses">The number of uses.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodesInternal(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the MultiBuyCouponCodeInfo objects on specified site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodeInfoInternal(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns MultiBuyCouponCodeInfo with specified name on specified site.
            </summary>
            <param name="name">MultiBuyCouponCodeInfo name.</param>
            <param name="siteIdentifier">The site identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetMultiBuyCouponCodeUseCountInternal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets info about how many coupons are available in specific multibuy discount and how many of them were already used.
            Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with one table containing MultiBuyCouponCodeMultiBuyDiscountID, Uses, UnlimitedCodeCount and Limit.
            </summary>
            <param name="discountIDs">IDs of discounts to get coupon counts for. Use null for all relevant multibuy discounts.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.CreateCouponInternal(CMS.Ecommerce.MultiBuyDiscountInfo,System.String,System.Int32)">
            <summary>
            Creates and saves new coupon for specified discount.
            NOTE: The uniqueness is not checked.
            </summary>
            <param name="discount">The discount.</param>
            <param name="code">The code.</param>
            <param name="numberOfUses">The number of uses.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetDiscountCouponCodes(System.Int32)">
            <summary>
            Returns a query for <see cref="T:CMS.Ecommerce.MultiBuyCouponCodeInfo"/> objects for the given <paramref name="discountID"/>.
            </summary>
            <param name="discountID">MultiBuyDiscountInfo identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyCouponCodeInfoProvider.GetDiscountCouponCode(System.Int32,System.String)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.MultiBuyCouponCodeInfo"/> for the discount with specified <paramref name="couponCode"/>.
            Returns <c>null</c> if no code found.
            </summary>
            <param name="discountID">MultiBuyDiscountInfo identifier</param>
            <param name="couponCode">MultiBuyCouponCode code</param>
        </member>
        <member name="T:CMS.Ecommerce.RandomCodeGenerator">
            <summary>
            Class generating random coupon codes according to specified pattern.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.RandomCodeGenerator.mPattern">
            <summary>
            Pattern of generated codes. It is set via constructor.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.RandomCodeGenerator.mPrefix">
            <summary>
            Prefix of codes. This string will be added at the beginning of all generated codes.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.RandomCodeGenerator.CHARS">
            <summary>
            Characters A-Z.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.RandomCodeGenerator.DIGITS">
            <summary>
            Digits 0-9.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.RandomCodeGenerator.SYMBOLS">
            <summary>
            Symbols A-Z and 0-9.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.#ctor(CMS.Ecommerce.ICodeUniquenessChecker,System.String,System.String)">
            <summary>
            Initializes new instance of RandomCodeGenerator generating random codes starting with prefix. Format of codes is specified by codePattern
            parameter.
            </summary>
            <param name="checker">Ensures generated code uniqueness.</param>
            <param name="codePattern">Pattern for codes. Hash # stands for random digit, dollar $ stands for random character and asterisk for any alphanumeric symbol.
            Other characters are copied to output.</param>
            <param name="codePrefix">Every generated code will start with this prefix.</param>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.GenerateCode">
            <summary>
            Generates one new unique code. Throws exception when not able to generate unique code within 10 attempts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.TryGenerateCode">
            <summary>
            Generates one random code.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.RememberCode(System.String)">
            <summary>
            Remembers given code as already generated.
            </summary>
            <param name="code">Code to be remembered.</param>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.CodeIsUnique(System.String)">
            <summary>
            Checks if given code is unique - not generated yet.
            </summary>
            <param name="code">Code to be checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.GetRandomNumber(System.Int32)">
            <summary>
            Returns random number from 0 to max (exclusive).
            </summary>
            <param name="max">Exclusive upper bound of the random number returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.GetRandomDigit">
            <summary>
            Returns random digit 0-9.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.GetRandomChar">
            <summary>
            Returns random character A-Z.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.GetRandomSymbol">
            <summary>
            Returns random symbol 0-9 or A-Z.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.RandomCodeGenerator.GetSymbolForType(System.Char)">
            <summary>
            Returns charType. Override this method to add custom character sets.
            </summary>
            <param name="charType">Character type to generate random character for.</param>
        </member>
        <member name="T:CMS.Ecommerce.DiscountApplicationEnum">
            <summary>
            Discount application enumeration.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountApplicationEnum.Order">
            <summary>
            Entire order.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountApplicationEnum.Products">
            <summary>
            Products.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountApplicationEnum.Shipping">
            <summary>
            Shipping.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DiscountCustomerEnum">
            <summary>
            Discount customer selection enumeration.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountCustomerEnum.All">
            <summary>
            All customers
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountCustomerEnum.RegisteredUsers">
            <summary>
            Registered customers
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountCustomerEnum.SelectedRoles">
            <summary>
            Selected roles
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DiscountInfo">
            <summary>
            DiscountInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountID">
            <summary>
            Discount ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountDisplayName">
            <summary>
            Discount display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountName">
            <summary>
            Discount name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountDescription">
            <summary>
            Discount description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountEnabled">
            <summary>
            Discount enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountIsFlat">
            <summary>
            True - discount value is flat, False - discount value is relative. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountValue">
            <summary>
            Discount value.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountUsesCoupons">
            <summary>
            Indicates if this discount is applicable only with discount coupon.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountValidFrom">
            <summary>
            Discount valid from.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountValidTo">
            <summary>
            Discount valid to.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountProductCondition">
            <summary>
            Macro condition to restrict this discount to particular products only.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountCartCondition">
            <summary>
            Macro condition to restrict this discount based on shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountApplyFurtherDiscounts">
            <summary>
            Indicates that further discounts (in order of DiscountOrder) are to be processed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountOrder">
            <summary>
            Order of this discount among other discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountOrderAmount">
            <summary>
            Order price to limit application of discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountCustomerRestriction">
            <summary>
            Type of discount customer restriction.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountApplyTo">
            <summary>
            Indicates what kind of objects are the discounts applicable to. Discount can be applied to orders or products.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountRoles">
            <summary>
            Discount roles to apply discount for. Is dependable on DiscountCustomerRestriction configuration.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountGUID">
            <summary>
            Discount GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountLastModified">
            <summary>
            Discount last modified date and time.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountSiteID">
            <summary>
            Discount site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.IsRunning">
            <summary>
            Determines whether discount is currently running. ValidFrom and ValidTo properties are compared to current date/time.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.CouponsUseLimitExceeded">
            <summary>
            Indicates that all coupon codes has exceeded its use limitation. Returns false for discounts without coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.IsApplicableToOrders">
            <summary>
            Indicates whether this discount can be applied to whole orders.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.IsApplicableToShipping">
            <summary>
            Indicates whether this discount can be applied to shipping price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.IsCatalogDiscount">
            <summary>
            Indicates that this discount is catalog kind of discount. 
            This means that discount does not need shopping cart data to be applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.HasCoupons">
            <summary>
            Indicates if discount has some coupons defined.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.HasOrUsesCoupon">
            <summary>
            Indicates if discount uses coupon or has some coupons defined.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.AcceptsCoupon(System.String,System.Boolean)">
            <summary>
            Indicates if given coupon code is suitable for this discount. Returns false if this discount has no codes assigned.
            </summary>
            <param name="couponCode">Code to be checked</param>
            <param name="ignoreUseLimit">Indicates if use limitation is to be ignored.</param>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountStatus">
            <summary>
            Discount status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.CMS#Ecommerce#IDiscountInfo#DiscountType">
            <summary>
            Gets the type of the discount.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.#ctor">
            <summary>
            Constructor - Creates an empty DiscountInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new DiscountInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.DeleteObject">
            <summary>
            Deletes the discount using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.SetObject">
            <summary>
            Updates the discount using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the current discount.
            Stored query results are cleared because discount codes could been modified.
            </summary>
            <param name="keepThisInstanceValid">Indicates if the current instance remains valid.</param>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.ItemDiscountType">
            <summary>
            Discount type. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.ItemDiscountDisplayName">
            <summary>
            Discount display name. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.ItemDiscountValue">
            <summary>
            Discount value. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.ItemDiscountIsFlat">
            <summary>
            True - discount value is flat, False - discount value is relative. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.ItemDiscountIsGlobal">
            <summary>
            True - says that discounts value is set in global main currency, False - says that discounts value is set in site main currency. 
            Takes effect only if discount value is flat. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.ApplyFurtherDiscounts">
            <summary>
            Indicates that discounts following this one in order of increasing DiscountOrder value are to be applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountItemOrder">
            <summary>
            Discount order used to define its priority (1 is the highest priority). Corresponds to DiscountOrder property.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.DiscountItemMinOrderAmount">
            <summary>
            Order price to limit application of discount.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.ApplyTogetherWith(CMS.Ecommerce.IConditionalDiscount)">
            <summary>
            Returns true if this discount is to be applied on the same base as the given discount.
            False indicates that discounts are to be applied one after another. False is returned 
            also when discount parameter is null.
            </summary>
            <param name="discount">Examined discount.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.LogUseOnce(System.String)">
            <summary>
            Informs this discount that it was applied.
            </summary>
            <param name="couponCode">The coupon code that was used for discount application.</param>       
        </member>
        <member name="P:CMS.Ecommerce.DiscountInfo.Priority">
            <summary>
            Discount priority.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.TryUpdatePriority(System.Double)">
            <summary>
            Updates discount priority.
            </summary>
            <param name="priority">New priority</param>
            <returns>Error message (null if succeeded)</returns>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.IsRunningDueDate(System.DateTime)">
            <summary>
            Determines whether discount is running due the specified date. ValidFrom and ValidTo properties are compared to the specified date/time.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfo.CMS#Ecommerce#IDiscountInfo#CreateCoupon(CMS.Ecommerce.CouponGeneratorConfig)">
            <summary>
            Creates and saves new coupon for this discount.
            NOTE: The uniqueness is not checked.
            </summary>        
            <param name="config">Configuration for coupon code creation</param>
        </member>
        <member name="T:CMS.Ecommerce.DiscountInfoProvider">
            <summary>
            Class providing DiscountInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscountInfo(System.Int32)">
            <summary>
            Returns discount with specified ID.
            </summary>
            <param name="discountId">Discount ID</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscountInfo(System.String,System.String)">
            <summary>
            Returns discount with specified name.
            </summary>
            <param name="discountName">Discount name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.SetDiscountInfo(CMS.Ecommerce.DiscountInfo)">
            <summary>
            Sets (updates or inserts) specified discount.
            </summary>
            <param name="discountObj">Discount to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.DeleteDiscountInfo(CMS.Ecommerce.DiscountInfo)">
            <summary>
            Deletes specified discount.
            </summary>
            <param name="discountObj">Discount to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.DeleteDiscountInfo(System.Int32)">
            <summary>
            Deletes discount with specified ID.
            </summary>
            <param name="discountId">Discount ID</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscounts">
            <summary>
            Returns the query for all discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscounts(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all discounts for specified site.
            </summary>
            <param name="siteId">Site ID</param>  
            <param name="onlyEnabled">True - only enable discounts are returned.
            False - both enabled and disabled discounts are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscounts(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns dataset of all discounts for specified conditions.
            </summary>
            <param name="parameters">Parameters to return discounts for.</param>
            <returns>Dataset of discounts</returns>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.IsUserAuthorizedToModifyDiscount(System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to modify discount.
            </summary>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.IsUserAuthorizedToReadDiscount(CMS.DataEngine.SiteInfoIdentifier,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to read discount.
            </summary>
            <param name="site">Site identifier</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.LogDiscountUseOnce(CMS.Ecommerce.DiscountInfo,System.String)">
            <summary>
            Informs this discount that it was applied.
            </summary>
            <param name="discount">The discount.</param>
            <param name="couponCode">The coupon code that was used for discount application.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetRunningDiscounts(CMS.DataEngine.SiteInfoIdentifier,System.DateTime,System.Nullable{CMS.Ecommerce.DiscountApplicationEnum})">
            <summary>
            Gets running discounts on given sites in defined time. If discount uses coupons, only discounts with usable coupons are returned.
            </summary>
            <param name="site">Site to get active discounts for.</param>
            <param name="date">Time when discount should be active.</param>
            <param name="discountApplicationEnum">Type of discount which will be selected. If null all types are selected.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.SetInfo(CMS.Ecommerce.DiscountInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscountsInternal(System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all discounts for specified site.
            </summary>
            <param name="siteId">Site ID</param>  
            <param name="onlyEnabled">True - only enable discounts are returned.
            False - both enabled and disabled discounts are returned.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetDiscountsInternal(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns dataset of all discounts for specified conditions.
            </summary>
            <param name="parameters">Parameters to return discounts for.</param>
            <returns>Dataset of discounts</returns>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.LogDiscountUseOnceInternal(CMS.Ecommerce.DiscountInfo,System.String)">
            <summary>
            Informs this discount that it was applied.
            </summary>
            <param name="discount">The discount.</param>
            <param name="couponCode">The coupon code that was used for discount application.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProvider.GetRunningDiscountsInternal(CMS.DataEngine.SiteInfoIdentifier,System.DateTime,System.Nullable{CMS.Ecommerce.DiscountApplicationEnum})">
            <summary>
            Gets running discounts on given sites in defined time. If discount uses coupons, only discounts with usable coupons are returned.
            </summary>
            <param name="site">Site to get active discounts for.</param>
            <param name="date">Time when discount should be active.</param>
            <param name="discountApplicationEnum">Type of discount which will be selected. If null all types are selected.</param>
        </member>
        <member name="T:CMS.Ecommerce.DiscountInfoProviderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:CMS.Ecommerce.IDiscountInfoProvider"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountInfoProviderExtensions.GetBySite(CMS.Ecommerce.IDiscountInfoProvider,System.Int32,System.Boolean)">
            <summary>
            Returns dataset of all discounts for specified site.
            </summary>
            <param name="discountInfoProvider">Provider for <see cref="T:CMS.Ecommerce.DiscountInfo"/> management.</param>
            <param name="siteId">Site ID</param>
            <param name="onlyEnabled">True - only enabled discounts are returned. False - both enabled and disabled discounts are returned.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="discountInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.DiscountRestrictionHelper.CheckCustomerRestriction(CMS.Ecommerce.DiscountCustomerEnum,System.String,CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns <c>true</c> if the user meets discount restrictions.
            </summary>
            <param name="restriction">Type of restriction</param>
            <param name="discountRoles">Role names delimited by ';' character.</param>
            <param name="user">User to check</param>
            <param name="siteIdentifier">ID</param>
        </member>
        <member name="T:CMS.Ecommerce.DiscountsFilterBase">
            <summary>
            Base class for discount filters.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsFilterBase.Resolver">
            <summary>
            Macro resolver to be used for resolving discount conditions.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountsFilterBase.FilterDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.IConditionalDiscount})">
            <summary>
            Returns discounts for which method DiscountIsUsable returns true. 
            Filtering stops when the first discount without ApplyFurtherDiscounts flag found.
            </summary>
            <param name="discounts">Discounts to be filtered.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountsFilterBase.DiscountIsUsable(CMS.Ecommerce.IConditionalDiscount)">
            <summary>
            Returns true if condition in given discount is satisfied using Resolver object.
            </summary>
            <param name="discount">Discount to be evaluated.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountsFilterBase.GetCondition(CMS.Ecommerce.IConditionalDiscount)">
            <summary>
            Returns condition for given discount. 
            </summary>
            <param name="discount">Discount to get discount for.</param>
        </member>
        <member name="T:CMS.Ecommerce.DiscountsParameters">
            <summary>
            Represents set of discounts parameters used e.g. for discounts filtering and querying.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsParameters.SiteID">
            <summary>
            ID or code name of the site to which discounts belong.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsParameters.Enabled">
            <summary>
            Specifies if discounts are enabled. This flag is irrelevant when <c>null</c>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsParameters.DueDate">
            <summary>
            Date and time when discounts are to be valid. Date is irrelevant when <c>null</c>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsParameters.User">
            <summary>
            Gets or sets the user for who the discounts are to be valid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsParameters.Currency">
            <summary>
            Gets or sets the currency in which the discounts are expressed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountsParameters.CouponCodes">
            <summary>
            Collection of coupon codes.
            Empty collection means that discounts do not need coupons (only discount that doesn't use coupons).
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DiscountStatusEnum">
            <summary>
            Discount status enumerator.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountStatusEnum.Disabled">
            <summary>
            Discount is disabled.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountStatusEnum.Active">
            <summary>
            Discount is active.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountStatusEnum.NotStarted">
            <summary>
            Discount has not started yet.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountStatusEnum.Finished">
            <summary>
            Discount is finished.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountStatusEnum.Incomplete">
            <summary>
            Discount is incomplete. (Uses coupons but no coupons created)
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DiscountTypeEnum">
            <summary>
            Discount type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.ProductCoupon">
            <summary>
            Product coupon
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.VolumeDiscount">
            <summary>
            Volume discount
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.CustomDiscount">
            <summary>
            Custom discount
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.Discount">
            <summary>
            General discount 
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.CatalogDiscount">
            <summary>
            Catalog discount 
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.ShippingDiscount">
            <summary>
            Shipping discount 
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.OrderDiscount">
            <summary>
            Order discount 
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.MultibuyDiscount">
            <summary>
            Multibuy discount 
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.DiscountTypeEnum.GiftCard">
            <summary>
            GiftCard discount 
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GiftCardInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.GiftCardInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.GiftCardInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.GiftCardInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardID">
            <summary>
            Gift card ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardGuid">
            <summary>
            Gift card guid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardDisplayName">
            <summary>
            Gift card name displayed to customers.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardName">
            <summary>
            Gift card name used internally.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardDescription">
            <summary>
            Internal note invisible to customers.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardEnabled">
            <summary>
            If disabled, the gift card is never applied. If enabled, the gift card checks other conditions to be applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardLastModified">
            <summary>
            Gift card last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardSiteID">
            <summary>
            Gift card site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardValue">
            <summary>
            Value of gift card.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardMinimumOrderPrice">
            <summary>
            Gift card minimum order price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardCartCondition">
            <summary>
            Conditions which have to be met in order to apply the gift card.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardValidFrom">
            <summary>
            Gift card is valid from this date.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardValidTo">
            <summary>
            Gift card is valid to this date.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardCustomerRestriction">
            <summary>
            Customers to limit gift card for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.GiftCardRoles">
            <summary>
            User roles to apply gift cards for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.CouponsUseLimitExceeded">
            <summary>
            Indicates that all coupon codes has exceeded its use limitation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.HasCoupons">
            <summary>
            Indicates if gift card has some coupons defined.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.Status">
            <summary>
            Gets the status of gift card. 
            </summary>
            <remarks>
            Possible values are Disabled, Incomplete, Active, NotStarted of Finished.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardInfo.IsRunning">
            <summary>
            Determines whether gift card is currently running. ValidFrom and ValidTo properties are compared to current date/time.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.LogUseOnce(System.String,System.Decimal)">
            <summary>
            Informs this gift card that it was applied.
            </summary>
            <param name="couponCode">The coupon code that was used for gift card application.</param>
            <param name="paymentValue">The amount paid by gift card coupon.</param>       
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the current gift card.
            Stored query results are cleared because gift card codes could been modified.
            </summary>
            <param name="keepThisInstanceValid">Indicates if the current instance remains valid</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.IsRunningDueDate(System.DateTime)">
            <summary>
            Determines whether gift card is running due the specified date. ValidFrom and ValidTo properties are compared to the specified date/time.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.GiftCardInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instances of the <see cref="T:CMS.Ecommerce.GiftCardInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.GiftCardInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.GiftCardInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:CMS.Ecommerce.GiftCardInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetGiftCards">
            <summary>
            Returns a query for all the <see cref="T:CMS.Ecommerce.GiftCardInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetGiftCardInfo(System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.GiftCardInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.GiftCardInfo"/> ID</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetGiftCardInfo(System.String,System.String)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.GiftCardInfo"/> with specified name.
            </summary>
            <param name="name"><see cref="T:CMS.Ecommerce.GiftCardInfo"/> name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.SetGiftCardInfo(CMS.Ecommerce.GiftCardInfo)">
            <summary>
            Sets (updates or inserts) specified <see cref="T:CMS.Ecommerce.GiftCardInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.GiftCardInfo"/> to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.DeleteGiftCardInfo(CMS.Ecommerce.GiftCardInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.GiftCardInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.GiftCardInfo"/> to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.DeleteGiftCardInfo(System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.GiftCardInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.GiftCardInfo"/> ID</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetGiftCards(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns dataset of all gift cards for specified conditions.
            </summary>
            <param name="parameters">Parameters to return gift cards for</param>
            <returns>Dataset of gift cards</returns>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.IsUserAuthorizedToModifyGiftCard(System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to modify gift card.
            </summary>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.IsUserAuthorizedToReadGiftCard(CMS.DataEngine.SiteInfoIdentifier,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to read gift card.
            </summary>
            <param name="site">Site identifier</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.LogGiftCardUseOnce(CMS.Ecommerce.GiftCardInfo,System.String,System.Decimal)">
            <summary>
            Informs this gift card that it was applied.
            </summary>
            <param name="giftCard">The gift card</param>
            <param name="couponCode">The coupon code that was used for gift card application</param>
            <param name="paymentValue">The amount paid by gift card coupon.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetRunningGiftCards(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)">
            <summary>
            Gets running gift cards on given sites in defined time. If gift card uses coupons, only gift cards with usable coupons are returned.
            </summary>
            <param name="site">Site to get active gift cards for</param>
            <param name="date">Time when gift card should be active</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.SetInfo(CMS.Ecommerce.GiftCardInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetGiftCardsInternal(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns dataset of all gift cards for specified conditions.
            </summary>
            <param name="parameters">Parameters to return gift cards for</param>
            <returns>Dataset of gift cards</returns>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.LogGiftCardUseOnceInternal(CMS.Ecommerce.GiftCardInfo,System.String,System.Decimal)">
            <summary>
            Informs this gift card that it was applied.
            </summary>
            <param name="giftCard">The gift card</param>
            <param name="couponCode">The coupon code that was used for gift card application</param>
            <param name="paymentValue">The amount paid by gift card coupon.</param>      
        </member>
        <member name="M:CMS.Ecommerce.GiftCardInfoProvider.GetRunningGiftCardsInternal(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)">
            <summary>
            Gets running gift cards on given sites in defined time.
            </summary>
            <param name="site">Site to get active gift cards for</param>
            <param name="date">Time when gift card should be active</param>
        </member>
        <member name="T:CMS.Ecommerce.IGiftCardInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.GiftCardInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IConditionalDiscount">
            <summary>
            Represents discount which is applicable only if specific macro condition is met.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IConditionalDiscount.DiscountProductCondition">
            <summary>
            Macro condition regarding products which must be satisfied to be able to use discount
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IConditionalDiscount.DiscountCartCondition">
            <summary>
            Macro condition regarding shopping cart which must be satisfied to be able to use discount
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IConditionalDiscount.ApplyFurtherDiscounts">
            <summary>
            Indicates that further discounts (in order of DiscountOrder) are to be processed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IConditionalDiscount.DiscountItemOrder">
            <summary>
            Discount order used to define its priority (1 is the highest priority).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IConditionalDiscount.DiscountItemMinOrderAmount">
            <summary>
            Minimum order discount amount.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IConditionalDiscount.ApplyTogetherWith(CMS.Ecommerce.IConditionalDiscount)">
            <summary>
            Returns true if this discount is to be applied on the same base as the given discount.
            False indicates that discounts are to be applied one after another.
            </summary>
            <param name="discount">Examined discount.</param>
        </member>
        <member name="T:CMS.Ecommerce.IDiscountInfo">
            <summary>
            Represents info object providing any discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountID">
            <summary>
            Gets discount ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountSiteID">
            <summary>
            Gets discount site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountDisplayName">
            <summary>
            Gets discount display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountEnabled">
            <summary>
            Gets discount enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountUsesCoupons">
            <summary>
            Indicates if this discount is applicable only with discount coupon.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountStatus">
            <summary>
            Gets discount status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.IsRunning">
            <summary>
            Determines whether discount is currently running. ValidFrom and ValidTo properties are compared to current date/time.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscountInfo.DiscountType">
            <summary>
            Gets the type of the discount.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IDiscountInfo.CreateCoupon(CMS.Ecommerce.CouponGeneratorConfig)">
            <summary>
            Creates and saves new coupon for this discount.
            </summary>        
            <param name="config">Configuration for coupon code creation</param>
        </member>
        <member name="T:CMS.Ecommerce.IDiscountInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.DiscountInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscount">
            <summary>
            Interface for discounts in form: "Buy N units of these products... and get M unit of these products for free".
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IMultiBuyDiscount.DiscountGuid">
            <summary>
            Unique identifier of the discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IMultiBuyDiscount.BasedOnUnitsCount">
            <summary>
            The number of products needed to enable this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IMultiBuyDiscount.ApplyOnUnitsCount">
            <summary>
            The number of discounted units.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IMultiBuyDiscount.ApplyFurtherDiscounts">
            <summary>
            Indicates if further discounts are to be applied if this discount applies.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IMultiBuyDiscount.AutoAddEnabled">
            <summary>
            Indicates if product is added to cart automatically, the system adds product to shopping cart only when the discount is percentage and set 100 % off.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IMultiBuyDiscount.MaxApplication">
            <summary>
            Maximum number of possible usages of the discount. Zero or negative value is representing an unlimited application count.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscount.PrioritizeItems(System.Collections.Generic.List{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Sorts cart items according to priority. Places items preferred to be discounted on the beginning of list.
            </summary>
            <param name="items">Cart items to prioritize.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscount.IsBasedOn(CMS.Ecommerce.MultiBuyItem)">
            <summary>
            Indicates if this discount is based on given cart item, i.e. this method returns true for items needed 
            to be in the cart to be eligible to get this discount.
            </summary>
            <param name="item">Item to check.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscount.IsApplicableOn(CMS.Ecommerce.MultiBuyItem)">
            <summary>
            Indicates if this discount is affecting the price of given cart item, i.e. this method returns true for items 
            discounted by this discount.
            </summary>
            <param name="item">Item to check.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscount.GetMissingProducts">
            <summary>
            Returns IDs of SKUs which could be discounted if present in cart. Most important products go first.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountBrandInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountBrandInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountBrandInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountBrandInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountBrandInfoProvider.Add(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <param name="included">Include flag.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountCollectionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountCollectionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountCollectionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountCollectionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountCollectionInfoProvider.Add(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <param name="included">Include flag.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountDepartmentInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountDepartmentInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountDepartmentInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountDepartmentInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountDepartmentInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyDiscountInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountsApplicator">
            <summary>
            Interface implemented by applicators of multibuy/coupon discounts and auto-adders.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountsApplicator.Reset">
            <summary>
            Resets applicator to its initial state.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountsApplicator.ApplyDiscount(CMS.Ecommerce.IMultiBuyDiscount,CMS.Ecommerce.MultiBuyItem,System.Nullable{System.Int32})">
            <summary>
            Applies discount to given number of unit of given item.
            </summary>
            <param name="discount">Discount to be applied.</param>
            <param name="itemToBeDiscounted">Cart item to apply discount on.</param>
            <param name="units">Number of unit to be discounted. Can be used to override value from <paramref name="itemToBeDiscounted"/> (<see cref="P:CMS.Ecommerce.MultiBuyItem.Units"/>).</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountsApplicator.AcceptsMissedDiscount(CMS.Ecommerce.IMultiBuyDiscount,System.Int32)">
            <summary>
            Notifies the applicator that discount was nearly applied. 
            It could be applied on some products if present in cart.
            </summary>
            <param name="discount">Nearly applied discount.</param>
            <param name="missedApplications">Missed application count.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountsEvaluator">
            <summary>
            Interface for classes that handle application of multi buy discounts on set of cart items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountsEvaluator.EvaluateDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.IMultiBuyDiscount},System.Collections.Generic.IEnumerable{CMS.Ecommerce.MultiBuyItem},CMS.Ecommerce.IMultiBuyDiscountsApplicator)">
            <summary>
            Evaluates given discounts and applies matching ones to corresponding cart items.
            </summary>
            <param name="discounts">Discounts to be evaluated.</param>
            <param name="cartItems">Cart items to be evaluated.</param>
            <param name="applicator">Applicator to be used to apply results of the evaluation.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountSKUInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountSKUInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountSKUInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountSKUInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountSKUInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountTreeInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountTreeInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountTreeInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountTreeInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountTreeInfoProvider.Add(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <param name="included">Include flag.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscount">
            <summary>
            Class implementing multibuy discount from calculation point of view.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscount.discount">
            <summary>
            Inner discount object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.DiscountGuid">
            <summary>
            Unique Guid identifier of the discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.DiscountName">
            <summary>
            Multibuy discount display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.AppliedCouponCode">
            <summary>
            Applied coupon code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.Value">
            <summary>
            Discount value. Value is percentage of fix, based on value of <see cref="P:CMS.Ecommerce.MultiBuyDiscount.IsFlat"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.IsFlat">
            <summary>
            True - discount value is fix, False - discount value is relative.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.BasedOnUnitsCount">
            <summary>
            The number of products needed to enable this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.ApplyOnUnitsCount">
            <summary>
            The number of discounted units.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.ApplyFurtherDiscounts">
            <summary>
            Indicates if further discounts are to be applied if this discount applies.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.AutoAddEnabled">
            <summary>
            Indicates if product is added to cart automatically, the system adds product to shopping cart only when the discount is percentage and set 100 % off.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.MaxApplication">
            <summary>
            Maximum number of possible usages of the discount. Zero or negative value is representing an unlimited application count.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.#ctor(CMS.Ecommerce.MultiBuyDiscountInfo,System.Func{System.Decimal,System.Decimal},System.String)">
            <summary>
            Creates a new instance of relative <see cref="T:CMS.Ecommerce.MultiBuyDiscount"/> based on the specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountInfo"/>.
            </summary>
            <param name="multiBuyDiscountInfo">MultiBuyDiscountInfo object to create instance for.</param>
            <param name="valueCalculator">Service used to round the result.</param>
            <param name="appliedCouponCode">Applied coupon code which.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.#ctor(CMS.Ecommerce.MultiBuyDiscountInfo,System.Decimal,System.String)">
            <summary>
            Creates new instance of absolute <see cref="T:CMS.Ecommerce.MultiBuyDiscount"/> based on the specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountInfo"/>.
            </summary>
            <param name="multiBuyDiscountInfo">MultiBuyDiscountInfo object to create instance for.</param>
            <param name="value">Absolute value of the discount.</param>
            <param name="appliedCouponCode">Applied coupon code.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.PrioritizeItems(System.Collections.Generic.List{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Moves Y items to higher priorities in case of BXGY discount.
            </summary>
            <param name="items">Cart items to prioritize.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.IsBasedOn(CMS.Ecommerce.MultiBuyItem)">
            <summary>
            Indicates if this discount is based on given cart item, i.e. this method returns true for items needed 
            to be in the cart to be eligible to get this discount.
            </summary>
            <param name="item">Item to check.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.IsApplicableOn(CMS.Ecommerce.MultiBuyItem)">
            <summary>
            Indicates if this discount is affecting the price of given cart item, i.e. this method returns true for items 
            discounted by this discount.
            </summary>
            <param name="item">Item to check.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.GetMissingProducts">
            <summary>
            Returns IDs of SKUs which could be discounted if present in cart. Most important products go first.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.CalculateDiscount(System.Decimal)">
            <summary>
            Calculates the discount value for given <paramref name="basePrice"/>.
            </summary>
            <param name="basePrice">The price to calculate discount from.</param>
            <returns>Rounded discount value.</returns>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscount.DiscountUsesCoupons">
            <summary>
            Indicates if discount is applicable only with discount coupon.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.AcceptsCoupon(System.String,System.Boolean)">
            <summary>
            Indicates if given coupon code is suitable for this discount. Returns false if this discount has no codes assigned.
            </summary>
            <param name="couponCode">Code to be checked</param>
            <param name="ignoreUseLimit">Indicates if use limitation is to be ignored.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscount.Apply">
            <summary>
            Logs discount usage.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountBrandInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountBrandInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountBrandInfo.MultiBuyDiscountID">
            <summary>
            Multi buy discount ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountBrandInfo.BrandID">
            <summary>
            Brand ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountBrandInfo.BrandIncluded">
            <summary>
            Brand included.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.GetMultiBuyDiscountBrands">
            <summary>
            Returns all <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> bindings.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.GetMultiBuyDiscountBrandInfo(System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID.</param>
            <param name="brandId">Brand ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.SetMultiBuyDiscountBrandInfo(CMS.Ecommerce.MultiBuyDiscountBrandInfo)">
            <summary>
            Sets specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/>.
            </summary>
            <remarks>
            Seting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> to set.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.DeleteMultiBuyDiscountBrandInfo(CMS.Ecommerce.MultiBuyDiscountBrandInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <remarks>
            Deleting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> object.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.RemoveMultiBuyDiscountFromBrand(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <remarks>
            Removing the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID.</param>
            <param name="brandId">Brand ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.Add(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <param name="included">Include flag.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountBrandInfoProvider.AddMultiBuyDiscountToBrand(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> binding.
            </summary>
            <remarks>
            Adding the <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID.</param>
            <param name="brandId">Brand ID.</param>
            <param name="included">Inlude flag.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.MultiBuyDiscountID">
            <summary>
            Multibuy discount ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.CollectionID">
            <summary>
            Collection ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.CollectionIncluded">
            <summary>
            Collection included
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.GetMultiBuyDiscountCollections">
            <summary>
            Returns all <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> bindings.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.GetMultiBuyDiscountCollectionInfo(System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID.</param>
            <param name="collectionId">Collection ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.SetMultiBuyDiscountCollectionInfo(CMS.Ecommerce.MultiBuyDiscountCollectionInfo)">
            <summary>
            Sets specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/>.
            </summary>
            <remarks>
            Setting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> to set.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.DeleteMultiBuyDiscountCollectionInfo(CMS.Ecommerce.MultiBuyDiscountCollectionInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <remarks>
            Deleting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> object.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.RemoveMultiBuyDiscountFromCollection(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <remarks>
            Adding the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID.</param>
            <param name="collectionId">Collection ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.Add(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <param name="included">Inlude flag.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountCollectionInfoProvider.AddMultiBuyDiscountToCollection(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> binding.
            </summary>
            <remarks>
            Adding the <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID.</param>
            <param name="collectionId">Collection ID.</param>
            <param name="included">Inlude flag.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo">
            <summary>
            MultiBuyDiscountDepartmentInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.MultiBuyDiscountID">
            <summary>
            Multi buy discount ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.DepartmentID">
            <summary>
            Department ID
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.#ctor">
            <summary>
            Constructor - Creates an empty MultiBuyDiscountDepartmentInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MultiBuyDiscountDepartmentInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.GetMultiBuyDiscountDepartments">
            <summary>
            Returns all MultiBuyDiscountDepartmentInfo bindings.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.GetMultiBuyDiscountDepartmentInfo(System.Int32,System.Int32)">
            <summary>
            Returns MultiBuyDiscountDepartmentInfo binding structure.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.SetMultiBuyDiscountDepartmentInfo(CMS.Ecommerce.MultiBuyDiscountDepartmentInfo)">
            <summary>
            Sets specified MultiBuyDiscountDepartmentInfo.
            </summary>
            <remarks>
            Seting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj">MultiBuyDiscountDepartmentInfo to set</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.DeleteMultiBuyDiscountDepartmentInfo(CMS.Ecommerce.MultiBuyDiscountDepartmentInfo)">
            <summary>
            Deletes specified MultiBuyDiscountDepartmentInfo binding.
            </summary>
            <remarks>
            Deleting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj">MultiBuyDiscountDepartmentInfo object</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.RemoveMultiBuyDiscountFromDepartment(System.Int32,System.Int32)">
            <summary>
            Deletes MultiBuyDiscountDepartmentInfo binding.
            </summary>
            <remarks>
            Removing the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="departmentId">Department ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.AddMultiBuyDiscountToDepartment(System.Int32,System.Int32)">
            <summary>
            Creates MultiBuyDiscountDepartmentInfo binding. 
            </summary>
            <remarks>
            Adding the <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.GetMultiBuyDiscountDepartmentInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the MultiBuyDiscountDepartmentInfo structure.
            Null if binding doesn't exist.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.RemoveMultiBuyDiscountFromDepartmentInternal(System.Int32,System.Int32)">
            <summary>
            Deletes MultiBuyDiscountDepartmentInfo binding.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountDepartmentInfoProvider.AddMultiBuyDiscountToDepartmentInternal(System.Int32,System.Int32)">
            <summary>
            Creates MultiBuyDiscountDepartmentInfo binding. 
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="departmentId">Department ID</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountInfo">
            <summary>
            MultiBuyDiscountInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountInfo.OBJECT_TYPE">
            <summary>
            Multibuy discount object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountInfo.OBJECT_TYPE_PRODUCT_COUPON">
            <summary>
            Product coupon discount object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountInfo.TYPEINFO">
            <summary>
            Multibuy discount type information.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountInfo.TYPEINFO_PRODUCT_COUPON">
            <summary>
            Product coupon discount type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountID">
            <summary>
            Multi buy discount ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountDisplayName">
            <summary>
            Multi buy discount display name
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountName">
            <summary>
            Multi buy discount name
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountDescription">
            <summary>
            Multi buy discount description
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountEnabled">
            <summary>
            Multi buy discount enabled
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountIsFlat">
            <summary>
            True - multi buy discount value is flat, False - multi buy value is relative. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountValue">
            <summary>
            Multi buy discount value.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountGUID">
            <summary>
            Multi buy discount GUID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountLastModified">
            <summary>
            Multi buy discount last modified
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountApplyToSKUID">
            <summary>
            Multi buy discount get product sku ID, i.e ID of product which user can get for free.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountUsesCoupons">
            <summary>
            Indicates if this discount is applicable only with discount coupon.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountValidFrom">
            <summary>
            Multi buy discount valid from
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountValidTo">
            <summary>
            Multi buy discount valid to
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountSiteID">
            <summary>
            Multi buy discount site ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountPriority">
            <summary>
            Multi buy discount priority.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountApplyFurtherDiscounts">
            <summary>
            Indicates that further discounts (in order of MultiBuyDiscountPriority) are to be processed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountLimitPerOrder">
            <summary>
            Specifies how many times customers can apply the discount in one order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountMinimumBuyCount">
            <summary>
            Minimum unit quantity condition. Default value is 1.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountCustomerRestriction">
            <summary>
            Multibuy discount customer restriction.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountRoles">
            <summary>
            Discount roles to apply discount for. Is dependable on MultiBuyDiscountCustomerRestriction configuration.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountAutoAddEnabled">
            <summary>
            Indicates if product is added to cart automatically, the system adds product to shopping cart only when the discount is percentage and set 100 % off.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountIsProductCoupon">
            <summary>
            Indicates whether discount is product coupon or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.TypeInfo">
            <summary>
            Object type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.IsRunning">
            <summary>
            Determines whether multi buy discount is currently running. ValidFrom and ValidTo properties are compared to current date/time.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.CouponsUseLimitExceeded">
            <summary>
            Indicates that all coupon codes has exceeded its use limitation. Returns false for discounts without coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.Status">
            <summary>
            Indicates status of multi buy discount. It can be Disabled, Active, NotStarted of Finished.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountBrands">
            <summary>
            Returns cached collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> which are connected with this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountIncludedBrands">
            <summary>
            Gets included collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> connected to this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountExcludedBrands">
            <summary>
            Gets excluded collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> connected to this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.UseBrands">
            <summary>
            Determines whether multi buy discount uses set of brands for application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountCollections">
            <summary>
            Returns cached collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> which are connected with this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountIncludedCollections">
            <summary>
            Gets included collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> connected to this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountExcludedCollections">
            <summary>
            Gets excluded collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> connected to this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.UseCollections">
            <summary>
            Determines whether multi buy discount uses set of collections for application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountProducts">
            <summary>
            Returns cached collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> which are connected with this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.UseProducts">
            <summary>
            Determines whether multi buy discount uses set of products for application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountDepartments">
            <summary>
            Returns cached collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> which are connected with this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.UseDepartments">
            <summary>
            Determines whether multi buy discount uses set of departments for application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountSections">
            <summary>
            Returns cached collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> which are connected with this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountIncludedSections">
            <summary>
            Gets included collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> connected to this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountExcludedSections">
            <summary>
            Gets excluded collection of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> connected to this discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.UseSections">
            <summary>
            Determines whether multi buy discount uses set of sections for application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.HasOrUsesCoupon">
            <summary>
            Indicates if multibuy discount uses coupon or has some coupons defined.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.HasCoupons">
            <summary>
            Indicates if discount has some coupons defined.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the current discount.
            Stored query results are cleared because discount codes could been modified.
            </summary>
            <param name="keepThisInstanceValid">Indicates if the current instance remains valid.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.#ctor">
            <summary>
            Constructor - Creates an empty MultiBuyDiscountInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MultiBuyDiscountInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountInfo.DiscountUsesCoupons">
            <summary>
            Indicates if discount is applicable only with discount coupon.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.AcceptsCoupon(System.String,System.Boolean)">
            <summary>
            Indicates if given coupon code is suitable for this discount. Returns false if this discount has no codes assigned.
            </summary>
            <param name="couponCode">Code to be checked</param>
            <param name="ignoreUseLimit">Indicates if use limitation is to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfo.IsValidForDate(System.DateTime)">
            <summary>
            Returns if the multi buy discount is valid in specified date by checking <see cref="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountValidFrom"/> and <see cref="P:CMS.Ecommerce.MultiBuyDiscountInfo.MultiBuyDiscountValidTo"/> properties.
            Returns <c>True</c> also if the properties are not specified (they return <see cref="F:System.DateTime.MinValue"/>).
            </summary>
            <param name="date">Date for validation</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountInfoProvider">
            <summary>
            Class providing MultiBuyDiscountInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetMultiBuyDiscounts">
            <summary>
            Returns a query for all the multi buy discount objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetProductCouponDiscounts">
            <summary>
            Returns a query for all the product coupon discount objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetMultiBuyDiscountInfo(System.Int32)">
            <summary>
            Returns MultiBuyDiscountInfo with specified ID.
            </summary>
            <param name="id">MultiBuyDiscountInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetMultiBuyDiscountInfo(System.String,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns MultiBuyDiscountInfo with specified name.
            </summary>
            <param name="name">MultiBuyDiscountInfo name</param>
            <param name="siteIdentifier">Site identifier (site ID or site name)</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetMultiBuyDiscountInfo(System.Guid)">
            <summary>
            Returns MultiBuyDiscountInfo with specified GUID.
            </summary>
            <param name="guid">MultiBuyDiscountInfo GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.SetMultiBuyDiscountInfo(CMS.Ecommerce.MultiBuyDiscountInfo)">
            <summary>
            Sets (updates or inserts) specified MultiBuyDiscountInfo.
            </summary>
            <param name="infoObj">MultiBuyDiscountInfo to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.DeleteMultiBuyDiscountInfo(CMS.Ecommerce.MultiBuyDiscountInfo)">
            <summary>
            Deletes specified MultiBuyDiscountInfo.
            </summary>
            <param name="infoObj">MultiBuyDiscountInfo to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.DeleteMultiBuyDiscountInfo(System.Int32)">
            <summary>
            Deletes MultiBuyDiscountInfo with specified ID.
            </summary>
            <param name="id">MultiBuyDiscountInfo ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetMultiBuyDiscounts(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the MultiBuyDiscountInfo objects of a specified site.
            </summary>
            <param name="siteIdentifier">Site identifier (site ID or site name)</param>  
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetProductCouponDiscounts(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns a query for all the product coupon discount objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.AcceptsCoupon(CMS.Ecommerce.MultiBuyDiscountInfo,System.String,System.Boolean)">
            <summary>
            Indicates if given coupon code is suitable for discount. Returns false if discount has no codes assigned.
            </summary>
            <param name="discount">The discount.</param>
            <param name="couponCode">Code to be checked</param>
            <param name="ignoreUseLimit">Indicates if use limitation is to be ignored.</param>        
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetRunningMultiBuyDiscounts(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)">
            <summary>
            Gets running multibuy discounts on given sites in defined time. If discount uses coupons, only discounts with usable coupons are returned.
            </summary>
            <param name="site">Site to get active discounts for.</param>
            <param name="date">Time when discount should be active.</param>      
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetRunningProductCouponDiscounts(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)">
            <summary>
            Gets running product coupon discounts on given sites in defined time. If discount uses coupons, only discounts with usable coupons are returned.
            </summary>
            <param name="site">Site to get active discounts for.</param>
            <param name="date">Time when discount should be active.</param>      
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetMultiBuyDiscountsInternal">
            <summary>
            Returns a query for all the multi buy discount objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetProductCouponDiscountsInternal">
            <summary>
            Returns a query for all the product coupon discount objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.AcceptsCouponInternal(CMS.Ecommerce.MultiBuyDiscountInfo,System.String,System.Boolean)">
            <summary>
            Indicates if given coupon code is suitable for discount. Returns false if discount has no codes assigned.
            </summary>
            <param name="discount">The discount.</param>
            <param name="couponCode">Code to be checked</param>
            <param name="ignoreUseLimit">Indicates if use limitation is to be ignored.</param>        
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetRunningMultiBuyDiscountsInternal(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)">
            <summary>
            Gets running discounts on given sites in defined time. If discount uses coupons, only discounts with usable coupons are returned.
            </summary>
            <param name="site">Site to get active discounts for.</param>
            <param name="date">Time when discount should be active.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountInfoProvider.GetRunningProductCouponDiscountsInternal(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)">
            <summary>
            Gets running product coupon discounts on given sites in defined time. If discount uses coupons, only discounts with usable coupons are returned.
            </summary>
            <param name="site">Site to get active discounts for.</param>
            <param name="date">Time when discount should be active.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountsAutoAdder">
            <summary>
            Class calculating missed discount opportunities and adding discounted items to the shopping cart automatically.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.ProductsToBeAutoAdded">
            <summary>
            Dictionary with products which could be added to the shopping cart for free in format [SKUID, number of its units].
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.AvailableProducts">
            <summary>
            Auto-add candidates with information about suitability for auto-adding. 
            Key is SKUID and value is a tuple with SKUSellOnlyIfAvailable information and number of available units on stock.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.ShoppingCartItemInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.SKUInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.#ctor(CMS.Ecommerce.IShoppingCartItemInfoProvider,CMS.Ecommerce.ISKUInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountsAutoAdder"/> class.
            </summary>
            <param name="shoppingCartItemInfoProvider">Provider for <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/> management.</param>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shoppingCartItemInfoProvider"/> or <paramref name="skuInfoProvider"/> is null.</exception>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.Items">
            <summary>
            Cart items to find auto add triggers.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.Reset">
            <summary>
            Resets auto adder to its initial state.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.ApplyDiscount(CMS.Ecommerce.IMultiBuyDiscount,CMS.Ecommerce.MultiBuyItem,System.Nullable{System.Int32})">
            <summary>
            Applies discount to given number of unit of given item.
            </summary>
            <param name="discount">Discount to be applied.</param>
            <param name="itemToBeDiscounted">Cart item to apply discount on.</param>
            <param name="units">Number of unit to be discounted.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.AcceptsMissedDiscount(CMS.Ecommerce.IMultiBuyDiscount,System.Int32)">
            <summary>
            Notifies the applicator that discount was nearly applied. 
            It could be applied on given products if present in cart.
            </summary>
            <param name="discount">Nearly applied discount.</param>
            <param name="missedApplications">Missed application count.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.UpdateAutoAddedItemsInShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Inserts/updates shopping cart items which user can get for free, but he did not insert these items to the cart manually.
            </summary>
            <param name="cart">Shopping cart to add free items to.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.CreateShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,System.Int32,System.Int32)">
            <summary>
            Creates shopping cart item to be auto added.
            </summary>
            <param name="cart">Shopping cart to add auto added item.</param>
            <param name="skuID">SKUID of item which will be auto added.</param>
            <param name="units">Count of auto added units.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.ClearAutoAddedItemsInShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes auto added items which unit count is 0 from shopping cart.
            </summary>
            <param name="cart">Shopping cart to add free items to.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.ProductCanBeAutoAdded(System.Int32)">
            <summary>
            Checks if product does not have options and is available on stock if stock availability is required.
            </summary>
            <param name="skuID">SKUID to be checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsAutoAdder.GetUnitsWhichCanBeAutoAdded(System.Int32)">
            <summary>
            Returns null if auto add candidate SKUID is a product with options otherwise Tuple with SKUSellOnlyAvailable and number of available units.
            </summary>
            <param name="skuID">ID of SKU to check suitability for.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountsEvaluator">
            <summary>
            Class handling application of multi buy discounts on set of cart items. Discounts are based on the most expensive products. 
            Discounts are applied to cheapest products.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsEvaluator.OriginalItems">
            <summary>
            Original list of cart items currently processed by this applicator.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsEvaluator.PrioritizedItems">
            <summary>
            List of cart items currently processed by this applicator.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsEvaluator.SortedItems">
            <summary>
            Cart items sorted by price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsEvaluator.UsedDiscountItems">
            <summary>
            Dictionary containing the number of uses for each cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountsEvaluator.Applicator">
            <summary>
            MultiBuy discounts applicator to be used for application of items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.Reset">
            <summary>
            Resets evaluator to its initial state.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.EvaluateDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.IMultiBuyDiscount},System.Collections.Generic.IEnumerable{CMS.Ecommerce.MultiBuyItem},CMS.Ecommerce.IMultiBuyDiscountsApplicator)">
            <summary>
            Evaluates given discounts and applies matching ones to corresponding cart items.
            </summary>
            <param name="discounts">Discounts to be evaluated.</param>
            <param name="cartItems">Cart items to be evaluated.</param>
            <param name="applicator">MultiBuy discounts applicator to be used for application of items.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.PrepareItemsForDiscount(CMS.Ecommerce.IMultiBuyDiscount)">
            <summary>
            Ensures that PrioritizedItems list is ready for application of given discount. 
            </summary>
            <param name="discount">Discount to prepare items for.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.TryApplyDiscount(CMS.Ecommerce.IMultiBuyDiscount)">
            <summary>
            Evaluates given discount against all cart items and applies usable of them. Returns true if discount was applied at least once.
            </summary>
            <param name="discount">Discount to be evaluated.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.FindMissedDiscounts(CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem},System.Int32)">
            <summary>
            Evaluates the unused units and searches for the missed discounts.
            Returns <c>true</c> if the missed applications was accepted.
            </summary>
            <param name="discount">Evaluated discount</param>
            <param name="itemsToBaseDiscountOn">Collection of the discounting items.</param>
            <param name="usedApplicationCount">Indicates how many times was the discount already applied.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.FindDiscountApplication(CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem},System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Finds opportunity to apply given discount. This method adds potential discounting items with unit counts into itemsToBaseDiscountOn collection. 
            Potentially discounted items with discounted units counts are added to itemsToBeDiscounted collection.
            </summary>
            <param name="discount">Discount to find opportunity for.</param>
            <param name="itemsToBaseDiscountOn">Empty collection of items to base discount on. 
            This method adds found required items here.</param>
            <param name="itemsToBeDiscounted">Empty collection of items to be discounted.
            This method adds found items discounted by given discount here.</param>
            <returns>Returns true when given discount is applicable.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.FindItemsToBaseDiscountOn(CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Finds items satisfying given discounts conditions.
            </summary>
            <param name="discount">Discount to find items for.</param>
            <param name="itemsToBaseDiscountOn">Empty collection of items. Found items are placed here.</param>
            <returns>Returns true if found items fully satisfies discount.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.FindItemsToBeDiscounted(CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Finds items to be discounted with given discount based on given items. Returns true when at least one item was found.
            </summary>
            <param name="discount">Discount to find suitable items for.</param>
            <param name="itemsToBeDiscounted">Empty collection of items. Found items are placed here.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.CanBeDiscounted(CMS.Ecommerce.MultiBuyItem,CMS.Ecommerce.IMultiBuyDiscount)">
            <summary>
            Checks if given item can be discounted using given discount.
            </summary>
            <param name="item">Item to be checked.</param>
            <param name="discount">Discount to be checked.</param>
            <returns>Returns true if discount is applicable on given item.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.CanBaseDiscountOn(CMS.Ecommerce.MultiBuyItem,CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Checks if given item can be used to fulfill discounts conditions.
            </summary>
            <param name="item">Item to be checked.</param>
            <param name="discount">Discount to be checked.</param>
            <param name="itemsToBaseDiscountOn">Units with number of units already found as base for given discount.</param>
            <returns>Returns true if item covers (partially) discounts condition.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.ApplyDiscount(CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem},System.Collections.Generic.ICollection{CMS.Ecommerce.MultiBuyItem})">
            <summary>
            Applies the given <paramref name="discount"/> and returns the application count.
            Discount is applied and corresponding items are marked as used.
            </summary>
            <param name="discount">Discount to apply.</param>
            <param name="itemsToBaseDiscountOn">Discounting items.</param>
            <param name="itemsToBeDiscounted">Discounted items.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.GetApplicationCount(CMS.Ecommerce.IMultiBuyDiscount,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{CMS.Ecommerce.MultiBuyItem,System.Int32}},System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{CMS.Ecommerce.MultiBuyItem,System.Int32}})">
            <summary>
            Calculates the number of possible <paramref name="discount"/> applications.
            </summary>
            <param name="discount">Evaluated discount.</param>
            <param name="itemsToBaseDiscountOn">Set of discounting items and their unit count.</param>
            <param name="itemsToBeDiscounted">Set of discounted items and their unit count.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.ApplyDiscount(CMS.Ecommerce.IMultiBuyDiscount,CMS.Ecommerce.MultiBuyItem,System.Int32)">
            <summary>
            Applies discount to given number of unit of given item using.
            </summary>
            <param name="discount">Discount to be applied.</param>
            <param name="itemToBeDiscounted">Cart item to apply discount on.</param>
            <param name="units">Number of unit to be discounted.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.GetUnusedNonFreeUnits(CMS.Ecommerce.MultiBuyItem,System.Boolean)">
            <summary>
            Returns the number of unit not used as base for any discount nor discounted.
            </summary>
            <param name="item">Item to get number of units for.</param>
            <param name="includingAutoAddedUnits">Indicates if the result contains also automatically added units.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.UpdateItemsUsage(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{CMS.Ecommerce.MultiBuyItem,System.Int32}})">
            <summary>
            Updates the <paramref name="items"/> usage to the <see cref="P:CMS.Ecommerce.MultiBuyDiscountsEvaluator.UsedDiscountItems"/> collection.
            </summary>
            <param name="items">Items to be marked as used</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsEvaluator.GetUsedSubset(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{CMS.Ecommerce.MultiBuyItem,System.Int32}},System.Int32)">
            <summary>
            Returns the subset of the <paramref name="items"/>.
            Items are returned in the order specified in the <paramref name="items"/> collection.
            Subset total unit count is limited by <paramref name="maxUsedItems"/> units count.
            </summary>
            <param name="items">Collection of the items and their unit count.</param>
            <param name="maxUsedItems">Maximal unit</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo">
            <summary>
            MultiBuyDiscountSKUInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountSKUInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountSKUInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountSKUInfo.MultiBuyDiscountID">
            <summary>
            Multi buy discount ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountSKUInfo.SKUID">
            <summary>
            SKUID
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfo.#ctor">
            <summary>
            Constructor - Creates an empty MultiBuyDiscountSKUInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MultiBuyDiscountSKUInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.GetMultiBuyDiscountSKUs">
            <summary>
            Returns all MultiBuyDiscountSKUInfo bindings.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.GetMultiBuyDiscountSKUInfo(System.Int32,System.Int32)">
            <summary>
            Returns MultiBuyDiscountSKUInfo binding structure.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.SetMultiBuyDiscountSKUInfo(CMS.Ecommerce.MultiBuyDiscountSKUInfo)">
            <summary>
            Sets specified MultiBuyDiscountSKUInfo.
            </summary>
            <remarks>
            Seting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj">MultiBuyDiscountSKUInfo to set</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.DeleteMultiBuyDiscountSKUInfo(CMS.Ecommerce.MultiBuyDiscountSKUInfo)">
            <summary>
            Deletes specified MultiBuyDiscountSKUInfo binding.
            </summary>
            <remarks>
            Deleting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj">MultiBuyDiscountSKUInfo object</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.RemoveMultiBuyDiscountFromProduct(System.Int32,System.Int32)">
            <summary>
            Deletes MultiBuyDiscountSKUInfo binding.
            </summary>
            <remarks>
            Removing the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.AddMultiBuyDiscountToProduct(System.Int32,System.Int32)">
            <summary>
            Creates MultiBuyDiscountSKUInfo binding. 
            </summary>
            <remarks>
            Adding the <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.GetMultiBuyDiscountSKUInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the MultiBuyDiscountSKUInfo structure.
            Null if binding doesn't exist.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.RemoveMultiBuyDiscountFromProductInternal(System.Int32,System.Int32)">
            <summary>
            Deletes MultiBuyDiscountSKUInfo binding.
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSKUInfoProvider.AddMultiBuyDiscountToProductInternal(System.Int32,System.Int32)">
            <summary>
            Creates MultiBuyDiscountSKUInfo binding. 
            </summary>
            <param name="multiBuyDiscountId">Multi buy discount ID</param>
            <param name="skuId">Product ID</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountTreeInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.MultiBuyDiscountTreeInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountTreeInfo.MultiBuyDiscountID">
            <summary>
            Multi buy discount ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountTreeInfo.NodeID">
            <summary>
            Node ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyDiscountTreeInfo.NodeIncluded">
            <summary>
            Node included
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.GetMultiBuyDiscountTrees">
            <summary>
            Returns all <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> bindings.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding structure.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.GetMultiBuyDiscountTreeInfo(System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding structure.
            </summary>
            <param name="multibuydiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.SetMultiBuyDiscountTreeInfo(CMS.Ecommerce.MultiBuyDiscountTreeInfo)">
            <summary>
            Sets specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/>.
            </summary>
            <remarks>
            Seting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> to set.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.DeleteMultiBuyDiscountTreeInfo(CMS.Ecommerce.MultiBuyDiscountTreeInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <remarks>
            Deleting the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> object.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.RemoveMultiBuyDiscountFromTree(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <remarks>
            Removing the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multibuydiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.Add(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <param name="multiBuyDiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <param name="included">Include flag.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountTreeInfoProvider.AddMultiBuyDiscountToTree(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> binding.
            </summary>
            <remarks>
            Adding the <see cref="T:CMS.Ecommerce.MultiBuyDiscountTreeInfo"/> does not affect other existing info objects like <see cref="T:CMS.Ecommerce.MultiBuyDiscountSKUInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountBrandInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountCollectionInfo"/> or <see cref="T:CMS.Ecommerce.MultiBuyDiscountDepartmentInfo"/>
            This could lead to extended discount application than needed.
            </remarks>
            <param name="multibuydiscountId">Buy X Get Y discount ID.</param>
            <param name="nodeId">Node ID.</param>
            <param name="included">Include flag.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyItem">
            <summary>
            Represents an item for Buy X get Y discounts evaluation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyItem.ID">
            <summary>
            Gets or sets the ID of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyItem.SKU">
            <summary>
            Gets or sets the SKU behind this item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyItem.UnitPrice">
            <summary>
            Gets or sets the unit price of this item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyItem.Units">
            <summary>
            Gets or sets the amount of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.MultiBuyItem.AutoAddedUnits">
            <summary>
            Gets or sets the amount of the automatically added items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyItem.#ctor(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.MultiBuyItem"/> initialized with the specified <paramref name="item"/>.
            </summary>
            <param name="item">Cart item to create <see cref="T:CMS.Ecommerce.MultiBuyItem"/> from.</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyItem.#ctor(CMS.Ecommerce.CalculationRequestItem,System.Decimal)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.MultiBuyItem"/> initialized with the specified <paramref name="item"/>.
            </summary>
            <param name="item">Calculation request item to create <see cref="T:CMS.Ecommerce.MultiBuyItem"/> from.</param>
            <param name="unitPrice">Unit price of the product to calculate discount from.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountSource">
            <summary>
            Represents a source of multibuy discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountSource.GetDiscounts(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns multibuy discounts for the specified <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Other parameters used to filter discounts.</param>
        </member>
        <member name="T:CMS.Ecommerce.IMultiBuyDiscountsService">
            <summary>
            Defines the contract for classes providing multibuy discount evaluation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IMultiBuyDiscountsService.EvaluateDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.MultiBuyItem},CMS.Ecommerce.DiscountsParameters,CMS.Ecommerce.IMultiBuyDiscountsApplicator)">
            <summary>
            Evaluates multibuy discounts specified by the <paramref name="parameters"/> on the given <paramref name="items"/> collection
            using the <paramref name="applicator"/>.
            </summary>
            <param name="items">Items to be evaluated.</param>
            <param name="parameters">Parameter of the discounts.</param>
            <param name="applicator">Applicator to be used to apply results of the evaluation.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountSource">
            <summary>
            Represents a source of multibuy discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountSource.GetDiscounts(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns multibuy discounts for the specified <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Other parameters used to filter discounts.</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountsService">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IMultiBuyDiscountsService"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountsService.EvaluateDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.MultiBuyItem},CMS.Ecommerce.DiscountsParameters,CMS.Ecommerce.IMultiBuyDiscountsApplicator)">
            <summary>
            Evaluates multibuy discounts specified by the <paramref name="parameters"/> on the given <paramref name="items"/> collection 
            using the <paramref name="applicator"/>.
            </summary>
            <param name="items">Items to be evaluated.</param>
            <param name="parameters">Parameter of the discounts.</param>
            <param name="applicator">Applicator to be used to apply results of the evaluation.</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductDiscountsFilter">
            <summary>
            Allows to filter list of conditional product discounts according to its conditions and stop processing flag.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountsFilter.Filter(CMS.Ecommerce.SKUInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.IConditionalDiscount})">
            <summary>
            Filters given discounts and leaves only those which conditions are met.
            </summary>
            <param name="product">Object to be used for condition evaluation.</param>
            <param name="discounts">Conditional discounts to be filtered.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountsFilter.GetCondition(CMS.Ecommerce.IConditionalDiscount)">
            <summary>
            Returns DiscountProductCondition from given discount object.
            </summary>
            <param name="discount">Discount to get product condition from.</param>
        </member>
        <member name="T:CMS.Ecommerce.CatalogDiscountSource">
            <summary>
            Represents a source of catalog discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CatalogDiscountSource.#ctor(CMS.Ecommerce.IDiscountInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CatalogDiscountSource"/> class.
            </summary>
            <param name="discountInfoProvider">Provider for <see cref="T:CMS.Ecommerce.DiscountInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.CatalogDiscountSource.GetDiscounts(CMS.Ecommerce.SKUInfo,CMS.Ecommerce.PriceParameters)">
            <summary>
            Returns the catalog discounts collection which should be applied for the specified <paramref name="sku"/>.
            Applied discounts must be running due to <see cref="P:CMS.Ecommerce.PriceParameters.CalculationDate"/>, applicable for the given <see cref="P:CMS.Ecommerce.PriceParameters.User"/> and satisfy the discount conditions.
            </summary>
            <param name="sku">The SKU to get discounts for.</param>
            <param name="priceParams">Product price calculation parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.CatalogDiscountSource.GetProductDiscountsFilter">
            <summary>
            Returns the instance of the <see cref="T:CMS.Ecommerce.ProductDiscountsFilter"/> used for catalog discount filtering.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountApplicator.ApplyDiscounts(System.Decimal,System.Collections.Generic.IEnumerable{CMS.Ecommerce.DiscountCollection})">
            <summary>
            Returns the application summary of discount in the <paramref name="discountGroups"/>.
            </summary>
            <remarks>
            Implementation handles the strategy of applying the multiple discounts.
            </remarks>
            <param name="price">Base price to apply discounts on.</param>
            <param name="discountGroups">Groups of discounts</param>
        </member>
        <member name="T:CMS.Ecommerce.DiscountCollection">
            <summary>
            Represents a group of discounts applied on the same base price.
            </summary>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="M:CMS.Ecommerce.DiscountCollection.#ctor(System.Collections.Generic.IEnumerable{CMS.Ecommerce.IDiscount})">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.DiscountCollection"/> class that
            contains <see cref="T:CMS.Ecommerce.IDiscount"/> elements copied from the specified collection.
            </summary>
            <param name="discounts">The collection whose discounts are copied to the new list.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.DiscountCollection"/> class that is empty.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DiscountCollection.Count">
            <summary>
            Gets the number of discounts contained in the <see cref="T:CMS.Ecommerce.DiscountCollection"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DiscountCollection.Add(CMS.Ecommerce.IDiscount)">
            <summary>
            Adds a discount to the collection.
            </summary>
            <param name="discount">The discount to be added.</param>
        </member>
        <member name="M:CMS.Ecommerce.DiscountCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.FixedDiscountApplication">
            <summary>
            Represents a fixed value discount application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.FixedDiscountApplication.DiscountName">
            <summary>
            Discount name used for summaries.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.FixedDiscountApplication.AppliedCouponCode">
            <summary>
            Coupon code which triggered this application.
            <c>null</c> if the discount is not triggered by coupon code
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.FixedDiscountApplication.#ctor(System.String,System.Decimal,System.String,System.Action{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.FixedDiscountApplication"/>.
            </summary>
            <param name="displayName">Discount display name</param>
            <param name="fixedValue">Fixed discount value</param>
            <param name="code">Applied coupon code</param>
            <param name="logCoupon">Action which represents coupon code log</param>
        </member>
        <member name="M:CMS.Ecommerce.FixedDiscountApplication.CalculateDiscount(System.Decimal)">
            <summary>
            Calculates the discount value from the specified <paramref name="basePrice"/>.
            </summary>
            <param name="basePrice">Base price in the calculation currency.</param>
        </member>
        <member name="M:CMS.Ecommerce.FixedDiscountApplication.Apply">
            <summary>
            Increments the discount coupon code usage count.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ICatalogDiscountSource">
            <summary>
            Represents a source of catalog discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICatalogDiscountSource.GetDiscounts(CMS.Ecommerce.SKUInfo,CMS.Ecommerce.PriceParameters)">
            <summary>
            Returns the catalog discounts collection which should be applied for the specified <paramref name="sku"/>.
            Applied discounts must be running due to <see cref="P:CMS.Ecommerce.PriceParameters.CalculationDate"/>, applicable for the given <see cref="P:CMS.Ecommerce.PriceParameters.User"/> and satisfy the discount conditions.
            </summary>
            <param name="sku">The SKU to get discounts for.</param>
            <param name="priceParams">Product price calculation parameters</param>
        </member>
        <member name="T:CMS.Ecommerce.IDiscount">
            <summary>
            Represents a general discount application which is applicable on the base price.
            </summary>
            <remarks>
            Use this class as a base for custom discount calculation implementations.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.IDiscount.DiscountName">
            <summary>
            Gets the display name of the discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDiscount.AppliedCouponCode">
            <summary>
            Applied coupon code.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IDiscount.CalculateDiscount(System.Decimal)">
            <summary>
            Calculates the discount value for given <paramref name="basePrice"/>.
            </summary>
            <remarks>
            It is expected to return negative discount value for negative <paramref name="basePrice"/>.
            </remarks>
            <param name="basePrice">The price to calculate discount from.</param>
            <returns>Rounded discount value.</returns>
        </member>
        <member name="T:CMS.Ecommerce.IDiscountApplicator">
            <summary>
            Service that applies multiple discounts on the price.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IDiscountApplicator.ApplyDiscounts(System.Decimal,System.Collections.Generic.IEnumerable{CMS.Ecommerce.DiscountCollection})">
            <summary>
            Returns the application summary of the <paramref name="discountGroups"/> when applied on the specified <paramref name="price"/>.
            </summary>
            <remarks>
            Implementation handles the strategy of applying the multiple discounts.
            </remarks>
            <param name="price">Base price to apply discounts on.</param>
            <param name="discountGroups">Groups of discounts.</param>
        </member>
        <member name="T:CMS.Ecommerce.IOrderDiscountSource">
            <summary>
            Represents a source of order discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IOrderDiscountSource.GetDiscounts(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns the order discounts for the specified <paramref name="data"/> grouped by their priority.
            Applied order discounts must be running, applicable for the given <see cref="P:CMS.Ecommerce.CalculationRequest.User"/> and satisfy the discount conditions.
            Only order discounts satisfying the minimum order amount are returned.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderPrice">Order price which is used to filter applicable order discounts. (specified in the calculation currency)</param>
        </member>
        <member name="T:CMS.Ecommerce.IProductCouponService">
            <summary>
            Defines the contract for classes providing product coupon discount evaluation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IProductCouponService.EvaluateDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.MultiBuyItem},CMS.Ecommerce.DiscountsParameters,CMS.Ecommerce.IMultiBuyDiscountsApplicator)">
            <summary>
            Evaluates product coupon discounts specified by the <paramref name="parameters"/> on the given <paramref name="items"/> collection.
            </summary>
            <param name="items">Items to be evaluated.</param>
            <param name="parameters">Parameter of the discounts.</param>
            <param name="applicator">Applicator to be used to apply results of the evaluation.</param>
        </member>
        <member name="T:CMS.Ecommerce.IProductCouponSource">
            <summary>
            Represents a source of product coupon discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IProductCouponSource.GetDiscounts(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns product coupon discounts for the specified <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Parameters used to filter discounts.</param>
        </member>
        <member name="T:CMS.Ecommerce.IProductDiscountService">
            <summary>
            Service providing calculation of discounts related to product units.
            </summary>
            <remarks>
            The calculation processes Catalog discounts and Volume discounts.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.IProductDiscountService.GetProductDiscounts(CMS.Ecommerce.SKUInfo,System.Decimal,CMS.Ecommerce.PriceParameters)">
            <summary>
            Returns the discount application summary for the given <paramref name="sku"/> product.
            </summary>
            <param name="sku">Product or product option</param>
            <param name="standardPrice">Input price for calculation.</param>
            <param name="priceParams"><see cref="T:CMS.Ecommerce.PriceParameters"/> calculation parameters.</param>
        </member>
        <member name="T:CMS.Ecommerce.IProductDiscountSource">
            <summary>
            Represents a source of discounts related to product units.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IProductDiscountSource.GetDiscounts(CMS.Ecommerce.SKUInfo,System.Decimal,CMS.Ecommerce.PriceParameters)">
            <summary>
            Returns groups of discounts for specified <paramref name="sku"/>.
            </summary>
            <param name="sku">The SKU object.</param>
            <param name="standardPrice">The price of the <paramref name="sku"/></param>
            <param name="priceParams">Other parameters.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShippingDiscountSource">
            <summary>
            Represents a source of shipping discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShippingDiscountSource.GetDiscounts(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns the shipping discounts for the specified <paramref name="data"/>.
            Applied shipping discounts must be running, applicable for the given <see cref="P:CMS.Ecommerce.CalculationRequest.User"/> and satisfy the discount conditions.
            Only shipping discounts satisfying the minimum order amount are returned.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Order amount which is used to filter applicable shipping discounts. (specified in the calculation currency)</param>
        </member>
        <member name="M:CMS.Ecommerce.IShippingDiscountSource.GetRemainingAmountForFreeShipping(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns remaining amount for free shipping. 
            Method checks applicable free shipping offers which <see cref="P:CMS.Ecommerce.DiscountInfo.DiscountOrderAmount"/> 
            is larger than <paramref name="orderAmount"/> and returns additional amount to reach free shipping offer.
            Method returns 0 if there is no valid discount or if free shipping is already applied.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Current order amount. (specified in the calculation currency)</param>
        </member>
        <member name="T:CMS.Ecommerce.IVolumeDiscountSource">
            <summary>
            Represents a source of volume discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IVolumeDiscountSource.GetDiscount(CMS.Ecommerce.SKUInfo,System.Decimal)">
            <summary>
            Returns product volume discount applicable to the specified <paramref name="sku"/> when purchased in given <paramref name="quantity"/>.
            </summary>
            <param name="sku">The product to get volume discount for.</param>
            <param name="quantity">The amount of the <paramref name="sku"/>.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderDiscountSource.#ctor(CMS.Ecommerce.ICurrencyConverterFactory,CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.IRoundingServiceFactory,CMS.Ecommerce.ICouponCodeInfoProvider,CMS.Ecommerce.IDiscountInfoProvider)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.OrderDiscountSource"/>.
            </summary>
            <param name="converterFactory">Factory for fetching currency converters by site.</param>
            <param name="siteMainCurrencySource">Main currency source.</param>
            <param name="roundingServiceFactory">Rounding service.</param>
            <param name="couponCodeInfoProvider">Provider for <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> management.</param>
            <param name="discountInfoProvider">Provider for <see cref="T:CMS.Ecommerce.DiscountInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderDiscountSource.GetDiscounts(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns the order discounts for the specified <paramref name="data"/> grouped by their priority.
            Applied order discounts must be running, applicable for the given <see cref="P:CMS.Ecommerce.CalculationRequest.User"/> and satisfy the discount conditions.
            Only order discounts satisfying the minimum order amount are returned.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderPrice">Order price which is used to filter applicable order discounts. (specified in the calculation currency)</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderDiscountSource.CombineWithCouponCodes(System.Collections.Generic.IEnumerable{CMS.Ecommerce.DiscountInfo},System.Collections.Generic.IEnumerable{CMS.Ecommerce.CouponCodeInfo},CMS.Ecommerce.CalculationRequest)">
            <summary>
            Combines the specified <paramref name="discounts"/> with <see cref="P:CMS.Ecommerce.CalculationRequest.CouponCodes"/> 
            and returns Order discount applications.
            </summary>
            <param name="discounts">Order discounts.</param>
            <param name="couponCodes">Coupon codes pre-selected for given <paramref name="discounts"/>.</param>
            <param name="request">Calculation request data.</param>
        </member>
        <member name="T:CMS.Ecommerce.PercentageDiscountApplication">
            <summary>
            Represents a percentage discount application.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PercentageDiscountApplication.DiscountName">
            <summary>
            Discount name used for summaries.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PercentageDiscountApplication.AppliedCouponCode">
            <summary>
            Coupon code which triggered this application.
            <c>null</c> if the discount is not triggered by coupon code
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PercentageDiscountApplication.#ctor(System.String,System.Decimal,CMS.Ecommerce.CurrencyInfo,System.String,CMS.Ecommerce.IRoundingService,System.Action{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.PercentageDiscountApplication"/>.
            </summary>
            <param name="displayName">Discount display name</param>
            <param name="rate">Percentage rate (0..1)</param>
            <param name="currency">Currency used to determine rounding</param>
            <param name="code">Applied coupon code</param>
            <param name="roundingService">Service used to round discount calculation</param>
            <param name="logCoupon">Action which represents coupon code log</param>
        </member>
        <member name="M:CMS.Ecommerce.PercentageDiscountApplication.CalculateDiscount(System.Decimal)">
            <summary>
            Calculates percentage discount from the <paramref name="basePrice"/>.
            </summary>
            <param name="basePrice">Base price in the calculation currency.</param>
        </member>
        <member name="M:CMS.Ecommerce.PercentageDiscountApplication.Apply">
            <summary>
            Increments the discount coupon code usage count.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ProductCouponService">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IProductCouponService"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductCouponService.EvaluateDiscounts(System.Collections.Generic.IEnumerable{CMS.Ecommerce.MultiBuyItem},CMS.Ecommerce.DiscountsParameters,CMS.Ecommerce.IMultiBuyDiscountsApplicator)">
            <summary>
            Evaluates product coupon discounts specified by the <paramref name="parameters"/> on the given <paramref name="items"/> collection.
            </summary>
            <param name="items">Items to be evaluated.</param>
            <param name="parameters">Parameter of the discounts.</param>
            <param name="applicator">Applicator to be used to apply results of the evaluation.</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductCouponSource">
            <summary>
            Represents a source of product coupon discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductCouponSource.GetDiscounts(CMS.Ecommerce.DiscountsParameters)">
            <summary>
            Returns product coupon discounts for the specified <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Parameters used to filter discounts.</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductDiscountService">
            <summary>
            Default implementation of the <see cref="T:CMS.Ecommerce.IProductDiscountService"/> interface.
            </summary>
            <remarks>
            The calculation processes Catalog discounts and Volume discounts.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountService.#ctor(CMS.Ecommerce.IProductDiscountSource,CMS.Ecommerce.IDiscountApplicator)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.ProductDiscountService"/> using the specified discount source and discount applicator.
            </summary>
            <param name="discountSource">The source of the discounts.</param>
            <param name="applicator"><see cref="T:CMS.Ecommerce.IDiscountApplicator"/> item discount applicator service for discounts application.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountService.GetProductDiscounts(CMS.Ecommerce.SKUInfo,System.Decimal,CMS.Ecommerce.PriceParameters)">
            <summary>
            Returns the discounts application summary for the given <paramref name="sku"/> product.
            </summary>
            <param name="sku">Product or product option.</param>
            <param name="standardPrice">Input price for calculation.</param>
            <param name="priceParams"><see cref="T:CMS.Ecommerce.PriceParameters"/> calculation parameters.</param>
            <returns>Instance of <see cref="T:CMS.Ecommerce.ProductPrices"/> with calculation summary.</returns>
        </member>
        <member name="T:CMS.Ecommerce.ProductDiscountSource">
            <summary>
            Represents a source of discounts related to product units.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountSource.#ctor(CMS.Ecommerce.ICatalogDiscountSource,CMS.Ecommerce.IVolumeDiscountSource,CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.ICurrencyConverterFactory,CMS.Ecommerce.IRoundingServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ProductDiscountSource"/> class using the specified discount sources, main currency source, currency converter factory and rounding service factory.
            </summary>
            <param name="catalogDiscountSource">The source of catalog discounts.</param>
            <param name="volumeDiscountSource">The source of volume discounts.</param>
            <param name="mainCurrencySource">The source of main currencies.</param>
            <param name="converterFactory">The factory supplying currency converters.</param>
            <param name="roundingServiceFactory">The factory supplying service for price rounding.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountSource.GetDiscounts(CMS.Ecommerce.SKUInfo,System.Decimal,CMS.Ecommerce.PriceParameters)">
            <summary>
            Returns groups of discounts for the specified <paramref name="sku"/> and price.
            </summary>
            <remarks>
            Override this method to change the order in which the product discounts are applied. The following code shows the default implementation.
            <code>
            public override IEnumerable&lt;DiscountCollection&gt; GetDiscounts(SKUInfo sku, decimal standardPrice, PriceParameters priceParams)
            {
                var groups = new List&lt;DiscountCollection&gt;();
            
                AddCatalogDiscounts(groups, sku, priceParams);
                AddVolumeDiscounts(groups, sku, priceParams);
            
                return groups;
            }
            </code>
            </remarks>
            <param name="sku">The SKU object.</param>
            <param name="standardPrice">The price of the <paramref name="sku"/>.</param>
            <param name="priceParams">Other parameters.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountSource.AddCatalogDiscounts(System.Collections.Generic.ICollection{CMS.Ecommerce.DiscountCollection},CMS.Ecommerce.SKUInfo,CMS.Ecommerce.PriceParameters)">
            <summary>
            Adds grouped catalog discounts applicable to the specified <paramref name="sku"/> to the <paramref name="groups"/> collection.
            </summary>
            <param name="groups">Collection of discount groups.</param>
            <param name="sku">The product.</param>
            <param name="priceParams">Calculation parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountSource.AddVolumeDiscounts(System.Collections.Generic.ICollection{CMS.Ecommerce.DiscountCollection},CMS.Ecommerce.SKUInfo,CMS.Ecommerce.PriceParameters)">
            <summary>
            Adds a new discount group containing the volume discount for the specified <paramref name="sku"/> in the given <see cref="P:CMS.Ecommerce.PriceParameters.Quantity"/> quantity.
            </summary>
            <remarks>
            No discount group is added when no volume discount is applicable on the <paramref name="sku"/>.
            </remarks>
            <param name="groups">Collection of discount groups.</param>
            <param name="sku">The product.</param>
            <param name="priceParams">Calculation parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountSource.CreateFixedProductDiscount(System.String,System.Decimal,CMS.Ecommerce.PriceParameters)">
            <summary>
            Creates a new fixed product discount of the specified <paramref name="displayName"/> and <paramref name="value"/>.
            </summary>
            <remarks>
            Override this method to change the way the system calculates fixed product discounts.
            </remarks>
            <param name="displayName">The display name of the discount.</param>
            <param name="value">The value of the discount.</param>
            <param name="priceParams">Other parameters.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductDiscountSource.CreatePercentageProductDiscount(System.String,System.Decimal,CMS.Ecommerce.PriceParameters)">
            <summary>
            Creates a new percentage product discount of the specified <paramref name="displayName"/>. 
            The amount of the discount is specified by <paramref name="rate"/> parameter.
            </summary>
            <remarks>
            Override this method to change the way the system calculates percentage product discounts.
            </remarks>
            <param name="displayName">The display name of the discount.</param>
            <param name="rate">The rate of the discount (use 0.2 for 20% discount).</param>
            <param name="priceParams">Other parameters.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShippingDiscountSource">
            <summary>
            Represents a source of shipping discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingDiscountSource.#ctor(CMS.Ecommerce.ICurrencyConverterFactory,CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.IRoundingServiceFactory,CMS.Ecommerce.ICouponCodeInfoProvider,CMS.Ecommerce.IDiscountInfoProvider)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.ShippingDiscountSource"/>.
            </summary>
            <param name="converterFactory">Factory for fetching currency converters by site.</param>
            <param name="siteMainCurrencySource">Main currency source.</param>
            <param name="roundingServiceFactory">Rounding service.</param>
            <param name="couponCodeInfoProvider">Provider for <see cref="T:CMS.Ecommerce.CouponCodeInfo"/> management.</param>
            <param name="discountInfoProvider">Provider for <see cref="T:CMS.Ecommerce.DiscountInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingDiscountSource.GetDiscounts(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns the shipping discounts for the specified <paramref name="data"/>.
            Applied shipping discounts must be running, applicable for the given <see cref="P:CMS.Ecommerce.CalculationRequest.User"/> and satisfy the discount conditions.
            Only shipping discounts satisfying the minimum order amount are returned.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Order amount which is used to filter applicable shipping discounts. (specified in the calculation currency)</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingDiscountSource.GetRemainingAmountForFreeShipping(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns remaining amount for free shipping. 
            Method checks applicable free shipping offers which <see cref="P:CMS.Ecommerce.DiscountInfo.DiscountOrderAmount"/> 
            is larger than <paramref name="orderAmount"/> and returns additional amount to reach free shipping offer.
            Method returns 0 if there is no valid discount or if free shipping is already applied.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Current order amount. (specified in the calculation currency)</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingDiscountSource.CombineWithCouponCodes(System.Collections.Generic.ICollection{CMS.Ecommerce.DiscountInfo},CMS.Ecommerce.CalculationRequest)">
            <summary>
            Combines the specified <paramref name="shippingDiscounts"/> with <see cref="P:CMS.Ecommerce.CalculationRequest.CouponCodes"/> 
            and returns Shipping discount applications.
            </summary>
            <param name="shippingDiscounts">Shipping discounts.</param>
            <param name="request">Calculation request data.</param>
        </member>
        <member name="T:CMS.Ecommerce.VolumeDiscountSource">
            <summary>
            Represents a source of volume discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountSource.#ctor(CMS.Ecommerce.IVolumeDiscountInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.VolumeDiscountSource"/> class.
            </summary>
            <param name="volumeDiscountInfoProvider">Provider for <see cref="T:CMS.Ecommerce.VolumeDiscountInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountSource.GetDiscount(CMS.Ecommerce.SKUInfo,System.Decimal)">
            <summary>
            Returns product volume discount applicable to the specified <paramref name="sku"/> when purchased in given <paramref name="quantity"/>.
            </summary>
            <param name="sku">The product to get volume discount for.</param>
            <param name="quantity">The amount of the <paramref name="sku"/>.</param>
        </member>
        <member name="T:CMS.Ecommerce.IVolumeDiscountInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.VolumeDiscountInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.VolumeDiscountInfo">
            <summary>
            VolumeDiscountInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VolumeDiscountInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VolumeDiscountInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountID">
            <summary>
            ID of the discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountValue">
            <summary>
            Value of the discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountMinCount">
            <summary>
            Minimal number of objects for the discount to be applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountSKUID">
            <summary>
            ID of the SKU for which the discount is applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountIsFlatValue">
            <summary>
            Indicates whether the discount is flat or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountGUID">
            <summary>
            GUID of the discount.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.VolumeDiscountLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VolumeDiscountInfo.ItemDiscountDisplayName">
            <summary>
            Discount display name. Used for discount calculation in the shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfo.#ctor">
            <summary>
            Constructor - Creates an empty VolumeDiscountInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new VolumeDiscountInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.VolumeDiscountInfoProvider">
            <summary>
            Class providing VolumeDiscountInfo management.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VolumeDiscountInfoProvider.MINIMUM_APPLICABLE_AMOUNT">
            <summary>
            Minimum amount of items to get volume discount applicable
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.GetVolumeDiscounts">
            <summary>
            Returns the query for all volume discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.GetVolumeDiscountInfo(System.Int32)">
            <summary>
            Returns volume discount with specified ID.
            </summary>
            <param name="discountId">Volume discount ID</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.SetVolumeDiscountInfo(CMS.Ecommerce.VolumeDiscountInfo)">
            <summary>
            Sets (updates or inserts) specified volume discount.
            </summary>
            <param name="discountObj">Volume discount to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.DeleteVolumeDiscountInfo(CMS.Ecommerce.VolumeDiscountInfo)">
            <summary>
            Deletes specified volume discount.
            </summary>
            <param name="discountObj">Volume discount to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.DeleteVolumeDiscountInfo(System.Int32)">
            <summary>
            Deletes volume discount with specified ID.
            </summary>
            <param name="discountId">Volume discount ID</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.GetVolumeDiscounts(System.Int32)">
            <summary>
            Returns query for volume discounts related to specified product(SKU).
            </summary>
            <param name="skuId">SKU id</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.GetVolumeDiscountInfo(System.Int32,System.Int32)">
            <summary>
            Returns corresponding VolumeDiscountInfo structure for the specified SKU and SKU units, if no volume discount found returns null.
            </summary>        
            <param name="skuId">SKU id</param>
            <param name="units">SKU units</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.ValidateVolumeDiscount(CMS.Ecommerce.ShoppingCartItemInfo,CMS.Ecommerce.VolumeDiscountInfo)">
            <summary>
            Returns True if volume discount is valid and can be applied to the specified shopping cart item, otherwise returns False.
            </summary>
            <param name="item">Shopping cart item to which the volume discount should be applied</param>
            <param name="discount">Volume discount data</param>        
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.GetVolumeDiscountsInternal(System.Int32)">
            <summary>
            Returns query for volume discounts related to specified product(SKU). Records are ordered by VolumeDiscountMinCount field.
            </summary>
            <param name="skuId">SKU id</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.GetVolumeDiscountInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns corresponding VolumeDiscountInfo structure for the specified SKU and SKU units, if no volume discount found returns null.
            </summary>        
            <param name="skuId">SKU id</param>
            <param name="units">SKU units</param>
        </member>
        <member name="M:CMS.Ecommerce.VolumeDiscountInfoProvider.ValidateVolumeDiscountInternal(CMS.Ecommerce.ShoppingCartItemInfo,CMS.Ecommerce.VolumeDiscountInfo)">
            <summary>
            Returns True if volume discount is valid and can be applied to the specified shopping cart item, otherwise returns False.
            </summary>
            <param name="item">Shopping cart item to which the volume discount should be applied</param>
            <param name="discount">Volume discount data</param>        
        </member>
        <member name="T:CMS.Ecommerce.SKUTreeNode">
            <summary>
            Class representing document connected with product
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.DocumentSKUName">
            <summary>
            Document SKU name
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.DocumentSKUDescription">
            <summary>
            Document SKU description
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.DocumentSKUShortDescription">
            <summary>
            Document SKU short description
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.RegisteredProperties">
            <summary>
            Registered properties
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.PrioritizedProperties">
            <summary>
            List of prioritized properties.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.SKU">
            <summary>
            SKU class - Custom document fields
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.NodeSKUID">
            <summary>
            E-commerce SKU (product) ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>   
        </member>
        <member name="P:CMS.Ecommerce.SKUTreeNode.IsComplete">
            <summary>
            Returns true if the object changed.
            </summary>       
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.#ctor">
            <summary>
            Empty constructor, allowed only if Initialize is called immediately after it.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.#ctor(System.String)">
            <summary>
            Base constructor for inherited classes and internal purposes
            </summary>
            <param name="className">Class name of the document</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="columnName">Property name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.SetValue(System.String,System.Object)">
            <summary>
            Sets value of the specified node column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specific column
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.GetOriginalValue(System.String)">
            <summary>
            Gets the original value of the given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.RevertChanges">
            <summary>
            Reverts the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.GetTypeSpecificColumnNames">
            <summary>
            Gets the column names that are specific to the type
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.CopyDataTo(CMS.DocumentEngine.TreeNode,CMS.DocumentEngine.CopyNodeDataSettings)">
            <summary>
            Copies the node data to the destination node according to the settings. 
            </summary>
            <param name="destNode">Destination node</param>
            <param name="settings">Copy settings</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.LoadData(CMS.DataEngine.LoadDataSettings)">
            <summary>
            Loads the object data from given data container.
            </summary>
            <param name="settings">Data settings</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.InsertTreeNodeData(CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts the CMS_Tree part of the document node
            </summary>
            <param name="parent">Parent node</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.UpdateTreeNodeData">
            <summary>
            Updates the CMS_Tree part of the document node
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.MapDocumentName">
            <summary>
            Maps the document name based on the document type settings
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.NodeSharesSKUWithOtherNode(CMS.DocumentEngine.TreeProvider)">
            <summary>
            Returns true when node is bound to the same SKU as some other non-link node does.
            </summary>
            <param name="tree">Tree provider to use</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.RemoveDocumentDependencies(CMS.DocumentEngine.DeleteDocumentSettings)">
            <summary>
            Handles removing of dependencies for product document.
            </summary>
            <param name="settings">Delete document settings</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.GetOriginalDataSet">
            <summary>
            For the link node, the DataSet of original data is returned, otherwise returns DataSet of node.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.GetDataSet">
            <summary>
            Returns the DataSet of the node data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.SetSKU">
            <summary>
            Inserts or updates the internal SKU object
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.SetSKUColumn(System.String,System.Object)">
            <summary>
            Sets value of the specified SKU column
            </summary>
            <param name="column">SKU column to be set</param>
            <param name="value">Value to be used</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.EnsureConsistency">
            <summary>
            Ensures data consistency.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.CheckSKUReferencedObject(System.String,System.Func{System.Int32,CMS.DataEngine.BaseInfo},System.Object)">
            <summary>
            Checks the presence of referenced object. 
            When the referenced object does not exist, <c>null</c> or <paramref name="replacement"/> is stored to the FK column. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNode.ClearSKU">
            <summary>
            Clears SKU property without reseting NodeSKUID.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUTreeNodeFactory">
            <summary>
            Factory that provides SKUTreeNode for product document types
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNodeFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNodeFactory.CanCreateObject(System.Object)">
            <summary>
            Returns true if the factory is able to create the object based on the given parameter
            </summary>
            <param name="parameter">Object parameter</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUTreeNodeFactory.CanCreateObject(System.String)">
            <summary>
            Returns true if the factory is able to create the object of the given type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.Ecommerce.ECommerceHelper">
            <summary>
            Custom E-commerce helper.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceHelper.CouponCodeComparer">
            <summary>
            Gets the comparer for coupon codes. Provides case-insensitive ordinal string comparison.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.IsUserAuthorizedToModifyConfiguration(System.Boolean,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized to modify site/global e-commerce configuration.
            </summary>
            <param name="global">True - permission 'ConfigurationGlobalModify' is checked, False - permission 'ConfigurationGlobalModify' is checked</param>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.IsUserAuthorizedForPermission(System.String,System.String,CMS.Base.IUserInfo)">
            <summary>
            Checks the specified ecommerce permission for the given user.
            </summary>
            <param name="permissionName">Permission name to be checked</param>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.IsUserAuthorizedForPermission(System.String,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the specified ecommerce permission for the given user.
            </summary>
            <param name="permissionName">Permission name to be checked</param>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.GetSiteID(CMS.DataEngine.SiteInfoIdentifier,System.String)">
            <summary>
            Returns 0 if specified site uses global objects based on the specified e-commerce setting, otherwise returns site ID of the specified site.
            </summary>
            <param name="siteIdentifier">Site identifier (site ID or site name)</param>
            <param name="keyName">One of the e-commerce settings keys which determine if specific global objects are used</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.GetAllCouponCodesQuery(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns data query with all existing coupon codes from all existing discounts.
            </summary>
            <param name="site">Site identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.GetFormattedPercentageValue(System.Decimal,System.IFormatProvider)">
            <summary>
            Returns formatted value with removed trailing zero values and added trailing percentage character.
            </summary>
            <param name="value">Decimal number value.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.IsUserAuthorizedPerEcommerce(System.String,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given permission, returns true if so.
            </summary>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.GetLastUsedOrDefaultAddress(System.Int32)">
            <summary>
            Gets last used customer address if present or address with a default country defined in the 'CMSStoreDefaultCountryName' setting key.
            </summary>
            <param name="customerId">ID of the customer the address belongs to</param>
            <returns>AddressInfo object</returns>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.IsCustomerRegisteredAfterCheckout(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Returns true when customer is going to be automatically registered after checkout process is finished.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceHelper.IsCustomerRegisteredAfterCheckout(System.Int32)">
            <summary>
            Returns true when customer is going to be automatically registered after checkout process is finished.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.EcommercePermissions">
            <summary>
            Class containing string constants of all e-commerce module permissions and static methods for checking permissions.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.ECOMMERCE_READ">
            <summary>
            Constant representing 'EcommerceRead' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.ECOMMERCE_MODIFY">
            <summary>
            Constant representing 'EcommerceModify' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.ECOMMERCE_MODIFYGLOBAL">
            <summary>
            Constant representing 'EcommerceGlobalModify' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.ECOMMERCE_DESTROY">
            <summary>
            Constant representing 'Destroy' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.CONFIGURATION_READ">
            <summary>
            Constant representing 'ConfigurationRead' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.CONFIGURATION_MODIFY">
            <summary>
            Constant representing 'ConfigurationModify' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.CONFIGURATION_MODIFYGLOBAL">
            <summary>
            Constant representing 'ConfigurationGlobalModify' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.ORDERS_READ">
            <summary>
            Constant representing 'ReadOrders' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.ORDERS_MODIFY">
            <summary>
            Constant representing 'ModifyOrders' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.REPORTS_READ">
            <summary>
            Constant representing 'ReadReports' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.CUSTOMERS_READ">
            <summary>
            Constant representing 'ReadCustomers' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.CUSTOMERS_MODIFY">
            <summary>
            Constant representing 'ModifyCustomers' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.PRODUCTS_READ">
            <summary>
            Constant representing 'ReadProducts' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.PRODUCTS_MODIFY">
            <summary>
            Constant representing 'ModifyProducts' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.DISCOUNTS_READ">
            <summary>
            Constant representing 'ReadDiscounts' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.DISCOUNTS_MODIFY">
            <summary>
            Constant representing 'ModifyDiscounts' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.MANUFACTURERS_READ">
            <summary>
            Constant representing 'ReadManufacturers' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.MANUFACTURERS_MODIFY">
            <summary>
            Constant representing 'ModifyManufacturers' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.SUPPLIERS_READ">
            <summary>
            Constant representing 'ReadSuppliers' permission
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommercePermissions.SUPPLIERS_MODIFY">
            <summary>
            Constant representing 'ModifySuppliers' permission
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EcommercePermissions.CheckConfigurationPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean,System.Func{CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean})">
            <summary>
            Checks the configuration permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails.</param>
            <param name="isGlobal"><c>True</c> if the object is global object. <c>False</c> if the object belongs to specific site only.</param>
            <param name="checkPermissionsBase">Default method for checking permissions.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommercePermissions.CheckProductsPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean,System.Func{CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean})">
            <summary>
            Checks the products permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails.</param>
            <param name="isGlobal"><c>True</c> if the object is global object. <c>False</c> if the object belongs to specific site only.</param>
            <param name="checkPermissionsBase">Default method for checking permissions.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommercePermissions.CheckCustomersPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Func{CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean})">
            <summary>
            Checks the customers permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
            <param name="checkPermissionsBase">Default method for checking permissions.</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommercePermissions.CheckOrdersPermissions(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Func{CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean})">
            <summary>
            Checks the orders permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
            <param name="checkPermissionsBase">Default method for checking permissions.</param>
        </member>
        <member name="T:CMS.Ecommerce.ECommerceSettings">
            <summary>
            Class providing access to E-commerce related settings.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_ANONYMOUS_CUSTOMERS">
            <summary>
            Represents CMSStoreAllowAnonymousCustomers e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SHOPPINGCART_URL">
            <summary>
            Represents CMSShoppingCartURL e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.WISHLIST_URL">
            <summary>
            Represents CMSWishlistURL e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.DEFAULT_PRODUCT_IMAGE_URL">
            <summary>
            Represents CMSDefaultProductImageURL e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.REDIRECT_TO_SHOPPINGCART">
            <summary>
            Represents CMSStoreRedirectToShoppingCart e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.INVOICE_TEMPLATE">
            <summary>
            Represents CMSStoreInvoiceTemplate e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.DEFAULT_COUNTRY_NAME">
            <summary>
            Represents CMSStoreDefaultCountryName e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SHOW_TAX_REGISTRATION_ID">
            <summary>
            Represents CMSStoreShowTaxRegistrationID e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SHOW_ORGANIZATION_ID">
            <summary>
            Represents CMSStoreShowOrganizationID e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SEND_EMAILS_FROM">
            <summary>
            Represents CMSStoreSendEmailsFrom e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SEND_EMAILS_TO">
            <summary>
            Represents CMSStoreSendEmailsTo e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_EXTRA_COMPANYADDRESS">
            <summary>
            Represents CMSStoreUseExtraCompanyAddress e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SEND_ORDER_NOTIFICATION">
            <summary>
            Represents CMSStoreSendOrderNotification e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SEND_PAYMENT_NOTIFICATION">
            <summary>
            Represents CMSStoreSendPaymentNotification e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.CHECKOUT_PROCESS">
            <summary>
            Represents CMSStoreCheckoutProcess e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.REQUIRE_COMPANYINFO">
            <summary>
            Represents CMSStoreRequireCompanyInfo e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.APPLY_TAXES_BASED_ON">
            <summary>
            Represents CMSStoreApplyTaxBasedOn e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.WEIGHT_FORMATTING_STRING">
            <summary>
            Represents CMSStoreWeightFormattingString e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.MASS_UNIT">
            <summary>
            Represents CMSStoreMassUnit e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_CUSTOMER_CULTURE_FOR_EMAILS">
            <summary>
            Represents CMSStoreUseCustomerCultureForEmails e-commerce settings key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_GLOBAL_PRODUCTS">
            <summary>
            Represents CMSStoreAllowGlobalProducts e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_GLOBAL_PRODUCT_OPTIONS">
            <summary>
            Represents CMSStoreAllowGlobalProductOptions e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_GLOBAL_MANUFACTURERS">
            <summary>
            Represents CMSStoreAllowGlobalManufacturers e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_GLOBAL_SUPPLIERS">
            <summary>
            Represents CMSStoreAllowGlobalSuppliers e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_GLOBAL_DEPARTMENTS">
            <summary>
            Represents CMSStoreAllowGlobalDepartments e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_GLOBAL_PAYMENT_METHODS">
            <summary>
            Represents CMSStoreAllowGlobalPaymentMethods e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_TAX_CLASSES">
            <summary>
            Represents CMSStoreUseGlobalTaxClasses e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_CURRENCIES">
            <summary>
            Represents CMSStoreUseGlobalCurrencies e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_EXCHANGE_RATES">
            <summary>
            Represents CMSStoreUseGlobalExchangeRates e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_CREDIT">
            <summary>
            Represents CMSStoreUseGlobalCredit e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_ORDER_STATUS">
            <summary>
            Represents CMSStoreUseGlobalOrderStatus e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_PUBLIC_STATUS">
            <summary>
            Represents CMSStoreUseGlobalPublicStatus e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_INTERNAL_STATUS">
            <summary>
            Represents CMSStoreUseGlobalInternalStatus e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.USE_GLOBAL_INVOICE">
            <summary>
            Represents CMSStoreUseGlobalInvoice e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.INVOICE_NUMBER_PATTERN">
            <summary>
            Pattern (macro expression) used to generate an invoice number.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.EPRODUCTS_REMINDER">
            <summary>
            Represents CMSStoreEProductsReminder e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.PRODUCTS_STARTING_PATH">
            <summary>
            Represents CMSStoreProductsStartingPath e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.ALLOW_PRODUCTS_WITHOUT_DOCUMENTS">
            <summary>
            Represents CMSStoreAllowProductsWithoutDocuments e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.PRODUCTS_TREE">
            <summary>
            Represents CMSStoreProductsTree e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.PRODUCTS_ARE_NEW_FOR">
            <summary>
            Represents CMSStoreProductsAreNewFor e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.RELATED_PRODUCTS_RELATIONSHIP_NAME">
            <summary>
            Represents CMSStoreRelatedProductsRelationshipName e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.NEW_PRODUCT_STATUS">
            <summary>
            Represents CMSStoreNewProductStatus e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.DISPLAY_PRODUCTS_IN_SECTIONS_TREE">
            <summary>
            Represents CMSStoreDisplayProductsInSectionsTree e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.CHEAPEST_VARIANT_ADVERTISING">
            <summary>
            Represents CMSCheapestVariantAdvertising e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.AUTOMATIC_REGISTRATION_CUSTOMER">
            <summary>
            Represents CMSStoreAutoRegisterCustomer e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.AUTOMATIC_REGISTRATION_EMAIL_TEMPLATE">
            <summary>
            Represents CMSStoreAutoRegistrationEmailTemplate e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.SHOPPING_CART_EXPIRATION_PERIOD">
            <summary>
            Represents CMSShoppingCartExpirationPeriod e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.MARK_SHOPPING_CART_AS_ABANDONED_PERIOD">
            <summary>
            Represents CMSMarkShoppingCartAsAbandonedPeriod e-commerce setting key name.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceSettings.INCLUDE_TAX_IN_PRICES">
            <summary>
            Represents name of setting key determining wheteher the product price includes tax or not.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceSettings.UseStrictInventoryManagement">
            <summary>
            Indicates if strict inventory management is enabled. Value is taken from webconfig key CMSUseStrictInventoryManagement.
            Default value is false.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceSettings.ProvidersCacheMinutes">
            <summary>
            Time (minutes) used for caches used in ecommerce providers. Default value is 10 minutes.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowAnonymousCustomers(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if customers need to register in your site so that they can make the purchase.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ShoppingCartURL(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the URL of the shopping cart page.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.WishListURL(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the URL of the wish list page.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.DefaultProductImageURL(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the URL of the default product image which is used when image of the product is not specified.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.RedirectToShoppingCart(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if user will be redirected to shopping cart after adding product to cart.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.InvoiceTemplate(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets HTML template used to generate an invoice (or receipt) after an order is finished and saved.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.DefaultCountryName(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets default country, choose your country or country where you sell the most. All taxes are applied based on their values in the default country unless the customer specifies their country or state during the checkout process.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ShowTaxRegistrationID(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if organization ID field (e.g. VAT registration ID) should be displayed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ShowOrganizationID(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if organization ID field should be displayed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.SendEmailsFrom(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets an e-mail address the e-commerce notification e-mails are sent from.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.SendEmailsTo(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets site-related e-mail address (e.g. merchant's e-mail address) the e-commerce notification e-mails are sent to.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseExtraCompanyAddress(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if the option of providing company address is available in the check out process.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.SendOrderNotification(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if e-mail notifications are sent after an order is finished and saved.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.SendPaymentNotification(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if e-mail notifications are sent after an order payment is completed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.CheckoutProcess(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the checkout process used in the store shopping cart.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.RequireCompanyInfo(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if it is compulsory to provide company account information in the check out process.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ApplyTaxesBasedOn(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates whether the tax is applied based on shipping or billing address.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.WeightFormattingString(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets the format used to display product weight. Use {0} expression to insert the weight into the formatting string.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.MassUnit">
            <summary>
            Gets the mass unit code used by the system to represent weights.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseCustomerCultureForEmails(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if emails to customer will be sent in shopping cart culture. 
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalProducts(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global products are allowed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalProductOptions(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global product options are allowed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalManufacturers(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global manufacturers are allowed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalSuppliers(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global suppliers are allowed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalDepartments(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global departments are allowed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalPaymentMethods(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global payment methods are allowed.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalTaxClasses(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global tax classes are used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalCurrencies(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global currencies are used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalExchangeRates(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global exchange rates are used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalCredit(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global credit is used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalOrderStatus(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global order statuses are used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalPublicStatus(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global public statuses are used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalInternalStatus(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global internal statuses are used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.UseGlobalInvoice(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if global invoice is used.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.InvoiceNumberPattern(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Pattern (macro expression) for generating of invoice number.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.EProductsReminder(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets number of days before e-product expiration when reminder is to be sent.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ProductsStartingPath(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Path within the content tree where sub-tree of product sections starts.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowProductsWithoutDocuments(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates whether it is possible to create products without document data.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ProductsTree(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns the mode of displaying tree in the products administration UI.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ProductsAreNewFor(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Number of days for which created products are marked as 'new products' in the store. 
            Days are counted from the product 'In store from' property.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.RelatedProductsRelationshipName(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Relationship name to be used for related products.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.NewProductStatus(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Product public status which represents the status of the product which is evaluated as a new product 
            (according to the 'Products are new for' setting and 'In store from' product property).        
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.DisplayProductsInSectionsTree(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if products will be displayed in products sections tree. This setting has no effect when not using sections tree.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowGlobalObjects(CMS.DataEngine.SiteInfoIdentifier,System.String)">
            <summary>
            Indicates if global objects of given type are allowed/used on the site specified by site name.
            </summary>
            <param name="siteIdentifier">Name or ID of the site.</param>
            <param name="objectType">Type of object to get settings value for.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AllowCombineSiteAndGlobal(System.String)">
            <summary>
            Indicates if ecommerce object of given type can be combined site and global within one site. 
            False means that site can use only global or only site records.
            </summary>
            <param name="objectType">Type of ecommerce object to get settings value for.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.CheapestVariantAdvertising(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if the system updates the product price, visible in the product listing, automatically with the price of the cheapest product variant.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AutomaticCustomerRegistration(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates if customer is automatically registered after checkout process and email is send.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.AutomaticRegistrationEmailTemplateCodeName(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Returns email template code name for automatic customer registration email notification.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.ShoppingCartExpirationPeriod(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Number of days before the shopping cart is expired.
            Default value is 30 days.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.MarkShoppingCartAsAbandonedPeriod(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Number of hours after which are shopping carts marked as abandoned.
            Default value is 4 hours.
            </summary>
            <param name="siteIdentifier">Code name or ID of the site. Use null or empty string for global setting</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.GetGlobalKeyForType(System.String)">
            <summary>
            Returns settings key name allowing global object of given object type.
            </summary>
            <param name="objectType">Object type name</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceSettings.IsTaxIncludedInPrices(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Indicates whether prices on given <paramref name="site"/> already include tax.
            </summary>
            <param name="site">Code name or ID of the site. Use null or empty string for global setting.</param>
        </member>
        <member name="T:CMS.Ecommerce.EcommerceEvents">
            <summary>
            Global e-commerce events
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommerceEvents.NewOrderCreated">
            <summary>
            Fired when new order was created through checkout process.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommerceEvents.OrderPaid">
            <summary>
            Fired when existing order has been paid.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.EcommerceEvents.ProductAddedToShoppingCart">
            <summary>
            Fired when a product was added to the shopping cart.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.NewOrderCreatedEventArgs">
            <summary>
            Event arguments for "new order created" event
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.NewOrderCreatedEventArgs.NewOrder">
            <summary>
            Newly created order.
            </summary>        
        </member>
        <member name="T:CMS.Ecommerce.NewOrderCreatedHandler">
            <summary>
            New order created (through checkout process) event handler
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.NewOrderCreatedHandler.StartEvent(CMS.Ecommerce.OrderInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="order">The newly created order.</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderPaidEventArgs">
            <summary>
            Event arguments for "order paid" event
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderPaidEventArgs.Order">
            <summary>
            Paid order.
            </summary>        
        </member>
        <member name="T:CMS.Ecommerce.OrderPaidHandler">
            <summary>
            Order paid event handler
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderPaidHandler.StartEvent(CMS.Ecommerce.OrderInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="order">The paid order.</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductAddedToCartEventArgs">
            <summary>
            Event arguments for "product added to shopping cart" event
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductAddedToCartEventArgs.AddedShoppingCartItem">
            <summary>
            Newly added shopping cart item.
            </summary>        
        </member>
        <member name="M:CMS.Ecommerce.ProductAddedToCartEventArgs.#ctor(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Ecommerce.ProductAddedToCartEventArgs"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">When null <paramref name="addedShoppingCartItem"/> is provided.</exception>
        </member>
        <member name="T:CMS.Ecommerce.ProductAddedToCartHandler">
            <summary>
            Product added to shopping cart event handler.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductAddedToCartHandler.StartEvent(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="addedShoppingCartItem">Product added to shopping cart</param>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.Address">
            <summary>
            Authorize.NET API - Information about address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Address.FirstName">
            <summary>
            Personal name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Address.AddressLine">
            <summary>
            Address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Address.City">
            <summary>
            City.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Address.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Address.Zip">
            <summary>
            ZIP.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Address.Country">
            <summary>
            Country.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest">
            <summary>
            Authorize.NET API - Envelop for payment request.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest.MerchantAuthentication">
            <summary>
            Authentication data for gateway.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest.RefId">
            <summary>
            Manually assigned request ID. Will be returned in respective response.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest.TransactionRequest">
            <summary>
            Payment request data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionResponse">
            <summary>
            Authorize.NET API - Envelope for payment response.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionResponse.RefId">
            <summary>
            ID of respective request, set in <see cref="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest.RefId"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionResponse.MainMessages">
            <summary>
            Information about transaction result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionResponse.TransactionResponse">
            <summary>
            Transaction response data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.CreditCard">
            <summary>
            Authorize.NET API - Credit card data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreditCard.CardNumber">
            <summary>
            Card number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreditCard.ExpirationDate">
            <summary>
            Card expiration.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.CreditCard.CardCode">
            <summary>
            CVV or CVC code.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.Customer">
            <summary>
            Authorize.NET API - Information about customer.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Customer.Id">
            <summary>
            Customer ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Customer.Email">
            <summary>
            Customer email.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.Error">
            <summary>
            Authorize.NET API - Information about error.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Error.ErrorCode">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Error.ErrorText">
            <summary>
            Error text.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.ErrorResponse">
            <summary>
            Authorize.NET API - Envelope for error response.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.ErrorResponse.MainMessages">
            <summary>
            Information about error.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessage">
            <summary>
            Authorize.NET API - Piece of main information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessage.Code">
            <summary>
            Messasge code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessage.Text">
            <summary>
            Message text.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessages">
            <summary>
            Authorize.NET API - Information about response.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessages.ResultCode">
            <summary>
            Whether response contains error.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessages.MainMessage">
            <summary>
            Text representation.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessagesResultCode">
            <summary>
            Authorize.NET API - Result code of payment transaction.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessagesResultCode.Ok">
            <summary>
            Payment transaction has been successfull.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.MainMessagesResultCode.Error">
            <summary>
            Payment transaction ended with error.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.MerchantAuthentication">
            <summary>
            Authorize.NET API - Authentication data for gateway.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.MerchantAuthentication.Name">
            <summary>
            API login ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.MerchantAuthentication.TransactionKey">
            <summary>
            Transaction key.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.Message">
            <summary>
            Authorize.NET API - Message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Message.Code">
            <summary>
            Message code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Message.Description">
            <summary>
            Message description.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.Order">
            <summary>
            Authorize.NET API - Information about order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Order.InvoiceNumber">
            <summary>
            Invoice number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Order.Description">
            <summary>
            Order description.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.PartialAmount">
            <summary>
            Authorize.NET API - Information about part of payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.PartialAmount.Amount">
            <summary>
            Amount of partial payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.PartialAmount.Name">
            <summary>
            Name of partial payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.PartialAmount.Description">
            <summary>
            Description of partial payment.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.Payment">
            <summary>
            Authorize.NET API - Information about payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.Payment.CreditCard">
            <summary>
            Credit card data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult">
            <summary>
            Envelope for representing Authorize.NET response, which could be of type <see cref="P:CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult.ErrorResponse"/> or <see cref="P:CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult.TransactionRespone"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult.TransactionRespone">
            <summary>
            Transaction response.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult.ErrorResponse">
            <summary>
            Error response.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest">
            <summary>
            Authorize.NET API - Payment request data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.TransactionType">
            <summary>
            Type of request.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.Amount">
            <summary>
            Grand total price for order including tax and shipping.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.Payment">
            <summary>
            Data about payment - credit card data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.RefTransId">
            <summary>
            Transaction ID of previous transaction. In case of capture request - ID of authorize transaction.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.Order">
            <summary>
            Data about order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.Tax">
            <summary>
            Information about tax.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.Shipping">
            <summary>
            Information about shipping.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.PONumber">
            <summary>
            Manually assigned purchase order number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.Customer">
            <summary>
            Data about customer.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.BillTo">
            <summary>
            Billing address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionRequest.ShipTo">
            <summary>
            Shipping address.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse">
            <summary>
            Authorize.NET API - Response of payment transaction.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse.ResponseCode">
            <summary>
            Type of response.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse.AuthCode">
            <summary>
            Authorization or approval code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse.TransId">
            <summary>
            ID of transaction assigned by gateway. Must be used in any follow-on transactions such as capture authorized payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse.MessagesMultiple">
            <summary>
            Information about processed payment.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse.Errors">
            <summary>
            List of errors occured during processing of payment.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponseCode">
            <summary>
            Authorize.NET API - Type of transaction response.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponseCode.Approved">
            <summary>
            Transaction has been approved.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponseCode.Declined">
            <summary>
            Transaction has been declined.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponseCode.Error">
            <summary>
            An error occured during transaction processing.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponseCode.HeldForReview">
            <summary>
            Transaction has been held for review.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType">
            <summary>
            Authorize.NET API - Type of transaction.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType.AuthCaptureTransaction">
            <summary>
            Authorize and capture transaction.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType.AuthOnlyTransaction">
            <summary>
            Authorize only transaction.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType.PriorAuthCaptureTransaction">
            <summary>
            Capture previously authorized transaction.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetParameters">
            <summary>
            Class providing names of Authorize.NET payment gateway required parameters.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetParameters.CARD_CCV">
            <summary>
            Credit card CCV.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetParameters.CARD_NUMBER">
            <summary>
            Credit card number.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetParameters.CARD_EXPIRATION">
            <summary>
            Credit card expiration.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AuthorizeNetParameters.API_NAMESPACE">
            <summary>
            Namespace of Authorize.NET API.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CMSAuthorizeNetProvider">
            <summary>
            Class providing payment using Authorize.NET payment gateway.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizeNetPaymentResult">
            <summary>
            Gets strongly typed payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSAuthorizeNetProvider.CountryInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSAuthorizeNetProvider.CustomerInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.CustomerInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSAuthorizeNetProvider.StateInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.StateInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.CreatePaymentResultInfo">
            <summary>
            Creates Authorize.Net payment result object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSAuthorizeNetProvider.IsPaymentAuthorized">
            <summary>
            Indicates whether the payment is already authorized meaning that payment capture is possible.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.UseDelayedPayment">
            <summary>
            Returns whether both gateway and provider shall use delayed payment method.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.ValidateCustomData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Validates credit card <paramref name="paymentData"/> submitted by user.
            </summary>
            <param name="paymentData">Data to validate</param>
            <returns>Error messages if <paramref name="paymentData"/> are not valid.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.MatchesRegex(System.Object,System.String)">
            <summary>
            Returns whether given <paramref name="data"/> matches <paramref name="regexPattern"/>.
            </summary>
            <param name="data">Object containing data to check</param>
            <param name="regexPattern">Regular expression pattern to match</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.IsExpirationValid(System.Object)">
            <summary>
            Validates whether <paramref name="expiration"/> is valid.
            </summary>
            <param name="expiration">Object containing expiration</param>
            <returns>Whether expiration is valid.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.ProcessPayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Processes the payment in external gateway directly.
            </summary>
            <param name="paymentData">Additional payment data containing credit card data.</param>
            <returns>
            Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.
            </returns>
            <seealso cref="M:CMS.Ecommerce.CMSPaymentGatewayProvider.CreatePaymentResultInfo"/>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.ProcessPaymentInternal(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Processes the payment in external gateway directly.
            </summary>
            <param name="paymentData">Additional payment data containing credit card data.</param>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizeNetPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizePayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Authorizes a payment.
            </summary>
            <param name="paymentData">Additional payment data containing credit card data.</param>
            <remarks>
            Returned object contains transaction identifier which needs to be persisted to allow further manipulation.
            </remarks>
            <returns>Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizePaymentInternal(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Authorizes a payment.
            </summary>
            <param name="paymentData">Additional payment data containing credit card data.</param>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizeNetPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.CapturePayment">
            <summary>
            Captures a payment.
            </summary>
            <remarks>
            Previously received transaction identifier is required to perform a capture of previously authorized transaction.
            </remarks>
            <returns>Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.CapturePaymentInternal">
            <summary>
            Captures a payment.
            </summary>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizeNetPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.UpdatePaymentInfo(CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionResponse)">
            <summary>
            Get information about payment status and payment description.
            </summary>
            <param name="response">Response from which to retrieve information</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.ProcessRequest(CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest)">
            <summary>
            Serializes and send payment request to Authorize.NET gateway, then receive and deserialize returned response.
            </summary>
            <param name="request">Request object</param>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult"/>.</returns>
            <remarks>
            Any occurred error is logged to event log and stored in <see cref="P:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizeNetPaymentResult"/>.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.DeserializeResponse``1(System.String)">
            <summary>
            Process XML response and return object containing data from response.
            </summary>
            <param name="response">Response in XML format</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.TryProcessError(CMS.Ecommerce.AuthorizeNetDataContracts.ResponseResult)">
            <summary>
            Check whether response from gateway is <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.ErrorResponse"/> or <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponse"/> containing errors. Create error message and description.
            </summary>
            <param name="response">Deserialized response from gateway</param>
            <returns>False if request doesn't contain any errors, otherwise true.</returns>
            <remarks>
            Any occurred error is logged to event log and stored in <see cref="P:CMS.Ecommerce.CMSAuthorizeNetProvider.AuthorizeNetPaymentResult"/>.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetMainMessageTextRepresentation(CMS.Ecommerce.AuthorizeNetDataContracts.MainMessage,System.Boolean)">
            <summary>
            Get string representation of information in <paramref name="message"/>.
            </summary>
            <param name="message">Message from which to get information</param>
            <param name="includeCode">Whether to include code number</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetTransactionResponseName(CMS.Ecommerce.AuthorizeNetDataContracts.TransactionResponseCode)">
            <summary>
            Returns transaction response name for given code.
            </summary>
            <param name="code">Code of transaction response</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetPaymentRequest(System.Collections.Generic.IDictionary{System.String,System.Object},CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType)">
            <summary>
            Creates request object for performing payment.
            </summary>
            <param name="paymentData">Additional payment data containing credit card data.</param>
            <param name="transactionType"><see cref="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType.AuthCaptureTransaction"/> for direct payment request. <see cref="F:CMS.Ecommerce.AuthorizeNetDataContracts.TransactionType.AuthOnlyTransaction"/> for authorize payment request</param>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="paymentData"/>is null or doesn't contain proper data <see cref="T:CMS.Ecommerce.AuthorizeNetParameters"/>.> </exception>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetCapturePaymentRequest">
            <summary>
            Creates request object for capturing authorized payment.
            </summary>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.CreateTransactionRequest"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.SerializeRequest``1(``0)">
            <summary>
            Serializes given request object.
            </summary>
            <param name="request">Request to serialize</param>
            <returns>XML representation of given request.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetMerchantAuthentication">
            <summary>
            Creates authentication for payment request.
            </summary>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.MerchantAuthentication"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when merchant login ID or merchant transaction key exceeds maximal length.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetCustomer">
            <summary>
            Creates customer part of payment request.
            </summary>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.Customer"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetOrder">
            <summary>
            Creates order part of payment request.
            </summary>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.Order"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetPayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates payment part of payment request.
            </summary>
            <param name="paymentData">Credit card data</param>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.Payment"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetPartialAmount(System.String,System.String,System.String)">
            <summary>
            Creates partial amount part of payment request. Partial amount represents data about tax or shipping.
            </summary>
            <param name="amount">Amount of tax or shipping</param>
            <param name="name">Name of partial amount</param>
            <param name="description">Description of partial amount</param>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.PartialAmount"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSAuthorizeNetProvider.GetAddress(CMS.Ecommerce.OrderAddressInfo)">
            <summary>
            Creates address for payment request. Address represents billing or shipping.
            </summary>
            <param name="address">Source of billing or shipping address</param>
            <returns>Instance of <see cref="T:CMS.Ecommerce.AuthorizeNetDataContracts.Address"/>.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CMSCreditPaymentProvider">
            <summary>
            Class providing methods and properties for credit payment.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSCreditPaymentProvider.mAvailableCreditInMainCurrency">
            <summary>
            Available credit in main currency.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSCreditPaymentProvider.mAvailableCreditInOrderCurrency">
            <summary>
            Available credit in order currency.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSCreditPaymentProvider.mExchangeRate">
            <summary>
            Exchange rate.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSCreditPaymentProvider.mMainCurrencyObj">
            <summary>
            Main currency data object.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSCreditPaymentProvider.mOrderCurrencyObj">
            <summary>
            Order currency data object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:CMS.Ecommerce.CMSCreditPaymentProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.#ctor(CMS.Ecommerce.ICurrencyConverterService,CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.IRoundingServiceFactory,CMS.Ecommerce.ICreditEventInfoProvider,CMS.Ecommerce.IOrderInfoProvider)">
            <summary>
            Initializes a new instance of a <see cref="T:CMS.Ecommerce.CMSCreditPaymentProvider"/>.
            </summary>
            <param name="currencyConverterService"></param>
            <param name="siteMainCurrencySource">Defines the members for a service providing a main currency for sites.</param>
            <param name="roundingServiceFactory">Provides site-specific rounding services.</param>
            <param name="creditEventInfoProvider">Provider for <see cref="T:CMS.Ecommerce.CreditEventInfo"/> management.</param>
            <param name="orderInfoProvider">Provider for <see cref="T:CMS.Ecommerce.OrderInfo"/> management</param>
        </member>
        <member name="P:CMS.Ecommerce.CMSCreditPaymentProvider.MainCurrencyObj">
            <summary>
            Main currency info object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSCreditPaymentProvider.OrderCurrencyObj">
            <summary>
            Order currency info object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSCreditPaymentProvider.AvailableCreditInMainCurrency">
            <summary>
            Available credit in main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSCreditPaymentProvider.AvailableCreditInOrderCurrency">
            <summary>
            Available credit in order currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSCreditPaymentProvider.ReloadAction">
            <summary>
            Gets or sets the action which is then called during <see cref="M:CMS.Ecommerce.CMSCreditPaymentProvider.ReloadPaymentData"/> method call.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSCreditPaymentProvider.CreditChangeAfterPayment">
            <summary>
            Credit change after payment.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.HasCustomerEnoughCredit(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Indicates whether customer has enough credit to finish payment.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.ReloadPaymentData">
            <summary>
            Reloads payment data - order and main currencies, their exchange rates, customer available credit.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.ProcessPayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Process payment.
            </summary>        
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.IsUserAuthorizedToFinishPayment(System.Boolean)">
            <summary>
            Checks whether current user is authorized to finish payment, if he is not authorized sets corresponding payment gateway error message.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSCreditPaymentProvider.IsUserAuthorizedToFinishPayment(CMS.Membership.UserInfo,CMS.Ecommerce.ShoppingCartInfo,System.Boolean)">
            <summary>
            Checks whether specified user is authorized to finish payment, if he is not authorized sets corresponding payment gateway error message.
            </summary>
            <param name="user">User attempting to finish payment.</param>
            <param name="cart">Cart to be paid for.</param>
            <param name="internalOrder">Indicates if payment is done from administration by store admin in the name of customer.</param>
        </member>
        <member name="T:CMS.Ecommerce.CMSPaymentGatewayProvider">
            <summary>
            Class providing base methods and properties for payment gateway management.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSPaymentGatewayProvider.mShoppingCartInfoObj">
            <summary>
            Shopping cart object which stores all data during the checkout process.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSPaymentGatewayProvider.mOrder">
            <summary>
            Order object which is going to be paid.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSPaymentGatewayProvider.mPaymentResult">
            <summary>
            Payment result.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSPaymentGatewayProvider.mOrderId">
            <summary>
            Order ID.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.CMSPaymentGatewayProvider.mIsPaymentCompleted">
            <summary>
            Indicates whether payment is already completed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.ShoppingCartInfoObj">
            <summary>
            Shopping cart object which stores all data during the checkout process. If OrderId is set it is created from existing order, otherwise it is returned from current shopping cart control.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.OrderId">
            <summary>
            Order ID. Set this value when you want to process payment for the existing order outside the checkout process.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.Order">
            <summary>
            Order object which is going to be paid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.PaymentResult">
            <summary>
            Payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.IsPaymentCompleted">
            <summary>
            Indicates whether payment is already completed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.InfoMessage">
            <summary>
            Payment result message displayed to user when payment succeeds.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentGatewayProvider.ErrorMessage">
            <summary>
            Payment result message displayed to user when payment fails.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.ValidateCustomData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Validates payment gateway custom data of the current shopping cart step -  payment gateway form data validation is performed by default.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.IsUserAuthorizedToFinishPayment(CMS.Membership.UserInfo,CMS.Ecommerce.ShoppingCartInfo,System.Boolean)">
            <summary>
            Checks whether specified user is authorized to finish payment.
            </summary>
            <param name="user">User attempting to finish payment.</param>
            <param name="cart">Cart to be paid for.</param>
            <param name="internalOrder">Indicates if payment is done from administration by store admin in the name of customer.</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.UseDelayedPayment">
            <summary>
            Returns whether both gateway and provider shall use delayed payment method.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.GetPaymentGatewayProvider``1(System.Int32)">
            <summary>
            Returns payment gateway provider instance of given generic type.
            </summary>
            <param name="paymentOptionId">Payment option ID</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.LogEvent(System.String,System.String,System.String)">
            <summary>
            Logs error with given <paramref name="message"/>, <paramref name="eventCode"/> and <paramref name="eventSource"/> to event log.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.CreatePaymentResultInfo">
            <summary>
            Creates payment result object - base PaymentResultInfo object is created by default.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.GetPaymentGatewayUrl">
            <summary>
            Returns payment gateway url.
            </summary>        
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.AddAdditionalInfoToPaymentResult">
            <summary>
            Adds some additional information to payment result, such as time stamp and payment method name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.UpdateOrderPaymentResult">
            <summary>
            Updates order payment result in database.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.CheckOrder">
            <summary>
            Check, whether Order and Shopping cart objects are present.
            <exception cref="T:System.InvalidOperationException">In case Order or ShoppingcartInfo object is not set</exception>
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentGatewayProvider.RoundPrice(System.Decimal,System.IFormatProvider,System.String)">
            <summary>
            Transform given <paramref name="price"/> into string representation according to given <paramref name="formatProvider"/> and <paramref name="formatString"/>.
            </summary>
            <param name="price">Price to transform</param>
            <param name="formatProvider">Formatting information</param>
            <param name="formatString">Formatting string</param>
        </member>
        <member name="T:CMS.Ecommerce.CMSPayPalProvider">
            <summary>
            Class providing payment using PayPal payment gateway.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor">
            <summary>
            Internal class capable of extracting tax.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.#ctor(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor"/>.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.ExtractSubTotal(System.Decimal)">
            <summary>
            Extracts tax from given <paramref name="subtotal"/> value.
            </summary>
            <returns>Value without extracted tax.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.ExtractShipping(System.Decimal)">
            <summary>
            Extracts tax from given <paramref name="shipping"/> value.
            </summary>
            <returns>Value without extracted tax.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.ExtractOrderDiscount(System.Decimal)">
            <summary>
            Extracts tax from given <paramref name="orderDiscount"/> value.
            </summary>
            <returns>Value without extracted tax.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.ExtractItemPrice(System.Decimal,CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Extracts tax from given product <paramref name="price"/> value and shopping <paramref name="cartItem"/>.
            </summary>
            <returns>Value without extracted tax.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.GetTaxCalculationService">
            <summary>
            Returns implementation of <see cref="T:CMS.Ecommerce.ITaxCalculationService"/> for further tax calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.TaxExtractor.GetTaxCalculationRequest">
            <summary>
            Returns instance of <see cref="T:CMS.Ecommerce.TaxCalculationRequest"/> needed for further tax calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPayPalProvider.CountryInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPayPalProvider.CustomerInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.CustomerInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPayPalProvider.StateInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.StateInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult">
            <summary>
            Gets strongly typed payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPayPalProvider.Culture">
            <summary>
            Gets PayPal gateway compatible culture.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.CreatePaymentResultInfo">
            <summary>
            Creates PayPal payment result object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetPaymentStatusName(System.String)">
            <summary>
            Returns payment status name for given paypal response state.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.CallGatewayWithExceptionHandling(System.Action)">
            <summary>
            Provides shared exception handling for any method connecting to gateway.
            </summary>
            <remarks>
            Any exception occurred during communication is logged into event log as <see cref="F:CMS.EventLog.EventType.ERROR"/>.
            If any exception occurs, <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/> is marked as failed.
            </remarks>
            <param name="action">Method trying to connect to gateway and performing any payment related operation.</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ProcessPayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Processes the payment on external gateway.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ProcessPaymentInternal(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Process the direct payment.
            </summary>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.UseDelayedPayment">
            <summary>
            Returns whether both gateway and provider shall use delayed payment method.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPayPalProvider.IsPaymentAuthorized">
            <summary>
            Indicates whether the payment is already authorized meaning that payment capture is possible.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.AuthorizePayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Authorizes a payment.
            </summary>
            <param name="paymentData">Additional payment data.</param>
            <remarks>
            Returned object contains transaction identifier which needs to be persisted to allow further manipulation.
            </remarks>
            <returns>Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.AuthorizePaymentInternal(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Authorizes a payment.
            </summary>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.CapturePayment">
            <summary>
            Captures a payment.
            </summary>
            <remarks>
            Previously received transaction identifier is required to perform a capture of previously authorized transaction.
            </remarks>
            <returns>Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.CapturePaymentInternal">
            <summary>
            Captures a payment.
            </summary>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ExecutePayment(System.String,System.String)">
            <summary>
            Executes payment for given <paramref name="paymentId"/> and <paramref name="payerId"/>.
            Both values has to be obtained from payment gateway.
            Payment cannot be captured unless its authorization is confirmed.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ExecutePaymentInternal(System.String,System.String)">
            <summary>
            Executes payment for given <paramref name="paymentId"/> and <paramref name="payerId"/>.
            </summary>
            <remarks>
            Method stores the gateway response data into <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/>.
            Any occurred error is logged to event log.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.RunPaymentExecution(System.String,System.String)">
            <summary>
            Runs payment execution for <paramref name="paymentId"/> and <paramref name="payerId"/>.
            </summary>
            <returns>Executed payment.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ProcessExecutedDirectPayment(PayPal.Api.Payment)">
            <summary>
            Sets payment related data from given <paramref name="payment"/> to <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ProcessExecutedDelayedPayment(PayPal.Api.Payment)">
            <summary>
            Sets authorization related data from given <paramref name="payment"/> to <see cref="P:CMS.Ecommerce.CMSPayPalProvider.PayPalPaymentResult"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.IsDirectPayment(PayPal.Api.Payment)">
            <summary>
            Returns true when given <paramref name="payment"/> has sale intent.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.IsDelayedPayment(PayPal.Api.Payment)">
            <summary>
            Returns true when given <paramref name="payment"/> has authorize intent.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetApprovalUrl(PayPal.Api.Payment)">
            <summary>
            Returns url for approving the authorization from given <paramref name="payment"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetDetailUrl(PayPal.Api.Payment)">
            <summary>
            Returns url with payment detail from given <paramref name="payment"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetPayment(System.String)">
            <summary>
            Returns <see cref="T:PayPal.Api.Payment"/> created from Order used for payment authorization.
            </summary>
            <param name="paymentIntent">Payment intention, for more information see https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-payments-api/create-express-checkout-payments/?mark=intent.</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.ValidatePayment(PayPal.Api.Payment)">
            <summary>
            Validates given <paramref name="payment"/> before the gateway request is performed.
            </summary>
            <remarks>
            Method ensures that payment object fulfills all validations performed on gateway side.
            </remarks>
            <see cref="T:PayPal.Api.Payment"/>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetTransactionAmount">
            <summary>
            Returns <see cref="T:PayPal.Api.Amount"/> object providing money amount information required by gateway.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetTransactionAmountSubtotal">
            <summary>
            Returns subtotal value required by the gateway.
            </summary>
            <seealso cref="T:PayPal.Api.Amount"/>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetTransactionAmountShipping">
            <summary>
            Returns shipping value required by the gateway.
            </summary>
            <seealso cref="T:PayPal.Api.Amount"/>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetPaymentItems">
            <summary>
            Returns collection of <see cref="T:PayPal.Api.Item"/> created from order items used for payment authorization.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.AddOrderDiscountItem(System.Collections.Generic.List{PayPal.Api.Item})">
            <summary>
            Adds item with negative value of <see cref="P:CMS.Ecommerce.ShoppingCartInfo.OrderDiscount"/> into given <paramref name="items"/> collection.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.AddOtherPaymentItem(System.Collections.Generic.List{PayPal.Api.Item})">
            <summary>
            Adds item with negative value of <see cref="P:CMS.Ecommerce.ShoppingCartInfo.OtherPayments"/> into given <paramref name="items"/> collection.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetItem(System.String,System.Int32,System.Decimal)">
            <summary>
            Returns item created from given parameters.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetProductItems(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns item created from given <paramref name="cartItem"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetItemPrice(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns unit price of one item required by the gateway.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetPayerInfo">
            <summary>
            Returns information about payer created from order used for payment authorization.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetBillingAddress">
            <summary>
            Returns billing address created from order used for payment authorization.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetShippingAddress">
            <summary>
            Returns shipping address created from order used for payment authorization.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetReturnUrl">
            <summary>
            Returns return url for payment request
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetCancelUrl">
            <summary>
            Returns cancellation url for payment request
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CMSPayPalProvider.GetCapture">
            <summary>
            Returns <see cref="T:PayPal.Api.Capture"/> created from Order used for payment capture.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GatewayExtensions">
            <summary>
            Extension methods usable in gateway implementations.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GatewayExtensions.ToRfcDateTime(System.DateTime)">
            <summary>
            Returns given <paramref name="dateTime"/> in RFC 3339 compliant format.
            </summary>
            <remarks>
            For more info see https://tools.ietf.org/html/rfc3339#section-5.6.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.GatewayExtensions.ToNullIfEmpty(System.String)">
            <summary>
            Returns null if given <paramref name="value"/> is null or <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GatewayExtensions.Reset(CMS.Ecommerce.PaymentResultItemInfo)">
            <summary>
            Resets the <see cref="P:CMS.Ecommerce.PaymentResultItemInfo.Value" /> and <see cref="P:CMS.Ecommerce.PaymentResultItemInfo.Text" /> property values.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GatewayExtensions.GetFormattedDiscountNames(CMS.Ecommerce.ValuesSummary)">
            <summary>
            Returns discount names contained in <paramref name="summary"/> formatted for external gateways.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GatewayExtensions.GetTotalValue(CMS.Ecommerce.ValuesSummary)">
            <summary>
            Returns sum of particular values in given <paramref name="valuesSummary"/>.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IDelayedPaymentGatewayProvider">
            <summary>
            Interface describing the external payment gateway supporting direct payments.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IDelayedPaymentGatewayProvider.IsPaymentAuthorized">
            <summary>
            Indicates whether the payment is already authorized meaning that payment capture is possible.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IDelayedPaymentGatewayProvider.AuthorizePayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Authorizes a payment.
            </summary>
            <param name="paymentData">Additional payment data.</param>
            <remarks>
            Returned object contains transaction identifier which needs to be persisted to allow further manipulation.
            </remarks>
            <returns>Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IDelayedPaymentGatewayProvider.CapturePayment">
            <summary>
            Captures a payment.
            </summary>
            <remarks>
            Previously received transaction identifier is required to perform a capture of previously authorized transaction.
            </remarks>
            <returns>Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.</returns>
        </member>
        <member name="T:CMS.Ecommerce.IDirectPaymentGatewayProvider">
            <summary>
            Interface describing the external payment gateway supporting direct payments.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IDirectPaymentGatewayProvider.ProcessPayment(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Processes the payment in external gateway directly.
            </summary>
            <param name="paymentData">Additional payment data.</param>
            <returns>
            Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/>.
            </returns>
            <seealso cref="M:CMS.Ecommerce.CMSPaymentGatewayProvider.CreatePaymentResultInfo"/>
        </member>
        <member name="T:CMS.Ecommerce.IPaymentGatewayProcessor">
            <summary>
            Main entry point for processing payment on any payment gateways.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IPaymentGatewayProcessor.ProcessPayment(CMS.Ecommerce.IPaymentGatewayProvider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Process payment using given <paramref name="provider"/>.
            </summary>
            <param name="provider"><see cref="T:CMS.Ecommerce.IPaymentGatewayProvider"/> implementation.</param>
            <param name="paymentData">Additional payment data.</param>
            <returns>
            Result provided by given provider.
            </returns>
        </member>
        <member name="T:CMS.Ecommerce.IPaymentGatewayProvider">
            <summary>
            General payment gateway provider implementation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IPaymentGatewayProvider.OrderId">
            <summary>
            Sets existing <see cref="T:CMS.Ecommerce.OrderInfo"/> ID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IPaymentGatewayProvider.UseDelayedPayment">
            <summary>
            Returns whether both gateway and provider shall use delayed payment method.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IPayPalContextProvider">
            <summary>
            Describes provider of PayPal context.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IPayPalContextProvider.GetApiContext(System.Int32)">
            <summary>
            Returns complete <see cref="T:PayPal.Api.APIContext"/> used in PayPal SDK for payment processing.
            </summary>
            <param name="siteId">ID of the site.</param>
            <returns></returns>
        </member>
        <member name="T:CMS.Ecommerce.PaymentGatewayProcessor">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IPaymentGatewayProcessor"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentGatewayProcessor.ProcessPayment(CMS.Ecommerce.IPaymentGatewayProvider,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Process payment using given <paramref name="provider"/>.
            </summary>
            <param name="provider">
                <see cref="T:CMS.Ecommerce.IPaymentGatewayProvider"/> implementation.
            </param>
            <param name="paymentData">
            Additional payment data.
            </param>
            <returns>
            Instance of <see cref="T:CMS.Ecommerce.PaymentResultInfo"/> provided by given provider.
            </returns>
            <remarks>
            Implementation tries to use authorize and capture payment method base on given <paramref name="provider"/>.
            If provider implements <see cref="T:CMS.Ecommerce.IDelayedPaymentGatewayProvider"/> and allows to delayed capture <see cref="M:CMS.Ecommerce.IPaymentGatewayProvider.UseDelayedPayment"/> only capture and returned <see cref="T:CMS.Ecommerce.PaymentResultInfo"/> contains transaction identifier.
            If provider implements <see cref="T:CMS.Ecommerce.IDirectPaymentGatewayProvider"/> payment is done right-away.
            If neither <see cref="T:CMS.Ecommerce.IDelayedPaymentGatewayProvider"/> or <see cref="T:CMS.Ecommerce.IDirectPaymentGatewayProvider"/> is implemented, null value is returned.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.PayPalContextProvider">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IPayPalContextProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PayPalContextProvider.#ctor(CMS.Ecommerce.ISettingServiceFactory)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.PayPalContextProvider"/>.
            </summary>
            <param name="settingServiceFactory">Factory used to get instances of setting services.</param>
        </member>
        <member name="M:CMS.Ecommerce.PayPalContextProvider.GetApiContext(System.Int32)">
            <summary>
            Returns complete <see cref="T:PayPal.Api.APIContext"/> used in PayPal SDK for payment processing.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.GtmData">
            <summary>
            Represents key value pair data used for Google Tag Manager integration.
            </summary>
            <remarks>
            Properties of the object are case insensitive.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.GtmData.#ctor">
            <summary>
            Creates expandable Google Tag Manager object.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GtmDataHelper">
            <summary>
            Helps to generate JSON output for Google Tag Manager.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GtmDataHelper.SerializeToJson(CMS.Ecommerce.GtmData,System.String)">
            <summary>
            Serializes <paramref name="gtmData"/> to JSON.
            </summary>
            <param name="gtmData">Data to be serialized to JSON.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>JSON representation of <paramref name="gtmData"/>.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmDataHelper.SerializeToJsonInternal(CMS.Ecommerce.GtmData,System.String)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmDataHelper.SerializeToJson(System.Collections.Generic.IEnumerable{CMS.Ecommerce.GtmData},System.String)">
            <summary>
            Serializes collection of <see cref="T:CMS.Ecommerce.GtmData"/> to array of JSONs.
            </summary>
            <param name="gtmDataCollection">Data to be serialized to array of JSONs.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>Array of JSONs.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmDataHelper.SerializeToJsonInternal(System.Collections.Generic.IEnumerable{CMS.Ecommerce.GtmData},System.String)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmDataHelper.SerializeToJsonInternal(CMS.Ecommerce.GtmData,System.String)">
            <summary>
            Serializes <paramref name="gtmData"/> to JSON.
            </summary>
            <param name="gtmData">Data to be serialized to JSON.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>JSON representation of <paramref name="gtmData"/>.</returns>
            <example>
            <para>To customize gtmData before serialization, override this method in similar fashion.</para>
            <para>gtmData.Add("key", "value");</para>
            <para>base.SerializeInternal(gtmObject, purpose);</para>
            <para>To customize the whole serialization process do not call base implementation and implement custom gtmData serialization.</para>
            </example>
            <returns>The <paramref name="gtmData"/> serialized to string.</returns>
        </member>
        <member name="M:CMS.Ecommerce.GtmDataHelper.SerializeToJsonInternal(System.Collections.Generic.IEnumerable{CMS.Ecommerce.GtmData},System.String)">
            <summary>
            Serializes collection of <see cref="T:CMS.Ecommerce.GtmData"/> to array of JSONs.
            </summary>
            <param name="gtmDataCollection">Data to be serialized to array of JSONs.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>Array of JSONs.</returns>
        </member>
        <member name="T:CMS.Ecommerce.GtmOrderHelper">
            <summary>
            Helper class that helps to map objects to Google Tag Manager order related objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.MapPurchase(CMS.Ecommerce.OrderInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.OrderInfo"/> to <see cref="T:CMS.Ecommerce.GtmData"/> representing Google Tag Manager purchase.
            Purchase consists of order and its items.
            </summary>
            <param name="order"><see cref="T:CMS.Ecommerce.OrderInfo"/> to be mapped to Google Tag Manager purchase object.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged resulting <see cref="T:CMS.Ecommerce.GtmData"/> object.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger purchase object.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmOrderHelper.MapPurchaseInternal(CMS.Ecommerce.OrderInfo,System.Object,System.String)"/>
            <seealso cref="M:CMS.Ecommerce.GtmPropertiesMerger.Merge(CMS.Ecommerce.GtmData,System.Object,System.Boolean)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.MapOrder(CMS.Ecommerce.OrderInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.OrderInfo"/> to <see cref="T:CMS.Ecommerce.GtmData"/> representing Google Tag Manager order object.
            Order contains only data about order and do not contain order items array.
            </summary>
            <param name="order"><see cref="T:CMS.Ecommerce.OrderInfo"/> to be mapped to Google Tag Manager order object.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with <paramref name="order"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger order object.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmOrderHelper.MapOrderInternal(CMS.Ecommerce.OrderInfo,System.Object,System.String)"/>
            <seealso cref="M:CMS.Ecommerce.GtmPropertiesMerger.Merge(CMS.Ecommerce.GtmData,System.Object,System.Boolean)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.MapOrderItems(CMS.Ecommerce.OrderInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.OrderItemInfo"/>s to list of <see cref="T:CMS.Ecommerce.GtmData"/> representing Google Tag Manager order item object.
            Order items contain products array in given <paramref name="order"/> and does not contain any order data.
            </summary>
            <param name="order">Items of <see cref="T:CMS.Ecommerce.OrderInfo"/> to be mapped to list of Google Tag Manager order item object.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with each mapped <see cref="T:CMS.Ecommerce.OrderItemInfo"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger order items object.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmOrderHelper.MapOrderItemsInternal(CMS.Ecommerce.OrderInfo,System.Object,System.String)"/>
            <seealso cref="M:CMS.Ecommerce.GtmPropertiesMerger.Merge(CMS.Ecommerce.GtmData,System.Object,System.Boolean)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.MapPurchaseInternal(CMS.Ecommerce.OrderInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.OrderInfo"/> to <see cref="T:CMS.Ecommerce.GtmData"/> representing Google Tag Manager purchase.
            Purchase consists of order and its items.
            </summary>
            <param name="order"><see cref="T:CMS.Ecommerce.OrderInfo"/> to be mapped to be mapped to Google Tag Manager purchase object.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged resulting <see cref="T:CMS.Ecommerce.GtmData"/> object.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger purchase object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="order"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.MapOrderInternal(CMS.Ecommerce.OrderInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.OrderInfo"/> to <see cref="T:CMS.Ecommerce.GtmData"/> representing Google Tag Manager order object.
            Order contains only data about order and do not contain any order items array.
            </summary>
            <param name="order"><see cref="T:CMS.Ecommerce.OrderInfo"/> to be mapped to Google Tag Manager order object.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with <paramref name="order"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger order object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="order"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.MapOrderItemsInternal(CMS.Ecommerce.OrderInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.OrderItemInfo"/>s to list of <see cref="T:CMS.Ecommerce.GtmData"/> representing Google Tag Manager order item objects.
            Order items contain products array in given <paramref name="order"/> and does not contain any order data.
            </summary>
            <param name="order">Items of <see cref="T:CMS.Ecommerce.OrderInfo"/> to be mapped to list of Google Tag Manager order item object.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with each mapped <see cref="T:CMS.Ecommerce.OrderItemInfo"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger order items object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="order"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmOrderHelper.GetOrderItems(CMS.Ecommerce.OrderInfo)">
            <summary>
            Returns all <see cref="T:CMS.Ecommerce.OrderItemInfoData"/> related to the <paramref name="order"/>.
            </summary>
            <param name="order">Order from which to retrieve all order items.</param>
        </member>
        <member name="T:CMS.Ecommerce.GtmProductHelper">
            <summary>
            Helper class that helps to map products to Google Tag Manager product object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GtmProductHelper.MapSKU(CMS.Ecommerce.SKUInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.SKUInfo"/> to <see cref="T:CMS.Ecommerce.GtmData"/> that represents properties and values of Google Tag Manger product.
            </summary>
            <param name="sku"><see cref="T:CMS.Ecommerce.SKUInfo"/> to be mapped.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with <paramref name="sku"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger product object.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmProductHelper.MapSKUInternal(CMS.Ecommerce.SKUInfo,System.Object,System.String)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmProductHelper.MapShoppingCartItems(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ShoppingCartItemInfo},System.Object,System.String)">
            <summary>
            Maps shopping cart items to collection of <see cref="T:CMS.Ecommerce.GtmData"/> that represents properties and values of Google Tag Manger products.
            </summary>
            <param name="cartItems">Shopping cart items to be mapped.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with every <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger product object.</returns>
            <seealso cref="M:CMS.Ecommerce.GtmProductHelper.MapShoppingCartItemsInternal(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ShoppingCartItemInfo},System.Object,System.String)"/>
            <seealso cref="M:CMS.Ecommerce.GtmProductHelper.MapSKU(CMS.Ecommerce.SKUInfo,System.Object,System.String)"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmProductHelper.MapSKUInternal(CMS.Ecommerce.SKUInfo,System.Object,System.String)">
            <summary>
            Maps <see cref="T:CMS.Ecommerce.SKUInfo"/> to <see cref="T:CMS.Ecommerce.GtmData"/> that represents properties and values of Google Tag Manger product.
            </summary>
            <param name="sku"><see cref="T:CMS.Ecommerce.SKUInfo"/> to be mapped.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with <paramref name="sku"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <example>
            <para>To customize returned gtmData override this method in similar fashion.</para>
            <para>base.MapInternal(gtmObject, additionalData, purpose);</para>
            <para>gtmData.Add("key", "value");</para>
            <para>To customize the whole mapping process do not call base implementation.</para>
            </example>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger product object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sku"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmProductHelper.MapShoppingCartItemsInternal(System.Collections.Generic.IEnumerable{CMS.Ecommerce.ShoppingCartItemInfo},System.Object,System.String)">
            <summary>
            Maps shopping cart items to collection of <see cref="T:CMS.Ecommerce.GtmData"/> that represents properties and values of Google Tag Manger products.
            </summary>
            <param name="cartItems">Shopping cart items to be mapped.</param>
            <param name="additionalData">Data with additional non-conflicting key value pairs to be merged with every <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/>.</param>
            <param name="purpose">Contextual information fitting for customizations.</param>
            <example>
            <para>To customize returned gtmData override this method in similar fashion.</para>
            <para>base.MapCartItemsInternal(gtmObject, additionalData, purpose);</para>
            <para>gtmData.Add("key", "value");</para>
            <para>To customize the whole mapping process do not call base implementation.</para>
            </example>
            <returns>The <see cref="T:CMS.Ecommerce.GtmData"/> that represents Google Tag Manger product object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cartItems"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmProductHelper.GetPrice(CMS.Ecommerce.SKUInfo)">
            <summary>
            Returns price for <paramref name="sku"/>.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GtmPropertiesMerger">
            <summary>
            Utility class for merging properties of two objects.
            </summary>
            <seealso cref="T:CMS.Ecommerce.GtmData"/>
        </member>
        <member name="M:CMS.Ecommerce.GtmPropertiesMerger.Merge(CMS.Ecommerce.GtmData,System.Object,System.Boolean)">
            <summary>
            <para>
            Merges <paramref name="gtmData"/> and <paramref name="additionalData"/> to form new <see cref="T:CMS.Ecommerce.GtmData"/>.
            </para>
            <para>
            If <paramref name="additionalData"/> can be enumerated as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items, then the key-value pairs
            are merged. Otherwise, the public properties and their values are merged.
            </para>
            </summary>
            <param name="gtmData">Source object to be merged with <paramref name="additionalData"/> object.</param>
            <param name="additionalData">Properties of this object are merged with <paramref name="gtmData"/> object.</param>
            <param name="overwrite">
            Decides whether values of properties with the same name are substituted for values of <paramref name="additionalData"/> object.
            </param>
            <remarks>
            Objects properties are merged only on the first level.
            </remarks>
            <example>
            <para>Source object: new GtmData { a = 1, b = 2 }</para>
            <para>Merge object: new { a = 3, c = 4 }</para>
            <para>Rewrite equals false: new GtmData { a = 1, b = 2, c = 4 }</para>
            <para>Rewrite equals false: new GtmData { a = 3, b = 2, c = 4 }</para>
            </example>
            <returns>
            New <see cref="T:CMS.Ecommerce.GtmData"/> with combined properties and values of original <paramref name="gtmData"/> and <paramref name="additionalData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="gtmData"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="additionalData"/> can be enumerated as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items, but a null key is found.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmPropertiesMerger.MergeInternal(CMS.Ecommerce.GtmData,System.Object,System.Boolean)">
            <summary>
            <para>
            Merges <paramref name="gtmData"/> and <paramref name="additionalData"/> to form new <see cref="T:CMS.Ecommerce.GtmData"/>.
            </para>
            <para>
            If <paramref name="additionalData"/> can be enumerated as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items, then the key-value pairs
            are merged. Otherwise, the public properties and their values are merged.
            </para>
            </summary>
            <param name="gtmData">Source object to be merged with <paramref name="additionalData"/> object.</param>
            <param name="additionalData">Properties of this object are merged with <paramref name="gtmData"/> object.</param>
            <param name="overwrite">
            Decides whether values of properties with the same name are substituted for values of <paramref name="additionalData"/> object.
            </param>
            <remarks>
            Objects properties are merged only on the first level.
            </remarks>
            <example>
            <para>Source object: new GtmData { a = 1, b = 2 }</para>
            <para>Merge object: new { a = 3, c = 4 }</para>
            <para>Rewrite equals false: new GtmData { a = 1, b = 2, c = 4 }</para>
            <para>Rewrite equals false: new GtmData { a = 3, b = 2, c = 4 }</para>
            </example>
            <returns>
            New <see cref="T:CMS.Ecommerce.GtmData"/> with combined properties and values of original <paramref name="gtmData"/> and <paramref name="additionalData"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="gtmData"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="additionalData"/> can be enumerated as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items, but a null key is found.</exception>
        </member>
        <member name="M:CMS.Ecommerce.GtmPropertiesMerger.TryMergeKeyValuePairType(CMS.Ecommerce.GtmData,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Tries to enumerate <paramref name="additionalData"/> as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items and merge them into <paramref name="result"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="additionalData"/> can be enumerated as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items, but a null key is found.</exception>
        </member>
        <member name="T:CMS.Ecommerce.OrderItemInfoData">
            <summary>
            Class encapsulates data related to the <see cref="T:CMS.Ecommerce.OrderItemInfo"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfoData.OrderItem">
            <summary>
            Contains data about order item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfoData.SKU">
            <summary>
            <see cref="T:CMS.Ecommerce.SKUInfo"/> related to the <see cref="P:CMS.Ecommerce.OrderItemInfoData.OrderItem"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfoData.Brand">
            <summary>
            <see cref="T:CMS.Ecommerce.BrandInfo"/> related to the <see cref="P:CMS.Ecommerce.OrderItemInfoData.SKU"/>, or null.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IAddressConverter">
            <summary>
            Defines methods which converts addresses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IAddressConverter.Convert(CMS.Ecommerce.OrderAddressInfo)">
            <summary>
            Converts <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> to <see cref="T:CMS.Ecommerce.AddressInfo"/>.
            </summary>
            <param name="orderAddress">Order address to copy data from.</param>
            <returns>New <see cref="T:CMS.Ecommerce.AddressInfo"/> based on <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> data.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IAddressConverter.Convert(CMS.Ecommerce.AddressInfo,System.Int32,CMS.Ecommerce.AddressType)">
            <summary>
            Converts <see cref="T:CMS.Ecommerce.AddressInfo"/> to <see cref="T:CMS.Ecommerce.OrderAddressInfo"/>.
            </summary>
            <param name="address">Address to copy data from.</param>
            <param name="orderId">ID of the order to assign address to.</param>
            <param name="addressType">Type of the address.</param>
            <returns>New <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> based on <see cref="T:CMS.Ecommerce.AddressInfo"/> data.</returns>
        </member>
        <member name="T:CMS.Ecommerce.IPrioritizable">
            <summary>
            Interface providing access to priority of object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.IPrioritizable.Priority">
            <summary>
            Object priority.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IPrioritizable.TryUpdatePriority(System.Double)">
            <summary>
            Updates object priority and returns update result.
            </summary>
            <param name="newPriority">New priority</param>
            <returns>Update result should contain error message or null if update succeeded.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CalculatorDataMethods">
            <summary>
            Calculator data methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CalculatorDataMethods.ContainsProducts(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if calculation data contains all or any product defined by product GUIDs depending on quantifier value.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.CalculatorDataMethods.CalculationDataContainsProducts(System.Collections.Generic.IReadOnlyList{System.Object})">
            <summary>
            Evaluate if calculation data contains products (all by default).
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:CMS.Ecommerce.CalculatorDataMethods.OrderIsOneOfTheFirstOrdersPlacedByRegisteredCustomer(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true when calculated order is one of the first orders registered customer has placed.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Ecommerce.CustomerMethods">
            <summary>
            Macro methods for <see cref="T:CMS.Ecommerce.CustomerInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerMethods.IsCustomerRegisteredWithin(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true when customer has been registered within the last number of days.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.DepartmentMethods.GetDepartmentTaxClassSelectorWhereCondition(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns where condition to select tax classes which can be assigned to edited department.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Ecommerce.EcommerceMethods">
            <summary>
            Ecommerce methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetFormattedWeight(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns formatted weight, based on mass unit format configuration.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.ShoppingCartURL(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns URL to the shopping cart.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.ShoppingCartAbsoluteUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns absolute URL to the shopping cart.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.ShoppingCartProducts(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns products of the shopping cart. Bundle items and product options are excluded.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.WishlistURL(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns URL to the wish list.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.WishlistAbsoluteUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns absolute URL to the wish list.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetProductUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns user friendly URL of the specified SKU and site name.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetProductUrlByGUID(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns user friendly URL of the specified SKU and site name.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetProductRelativePath(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns relative path to the product page.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetManufacturer(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets object from the specified column of the manufacturer with specific ID.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetDepartment(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets object from the specified column of the department with specific ID.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetSupplier(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets object from the specified column of the supplier with specific ID.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetInternalStatus(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets object from the specified column of the internal status with specific ID.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetPublicStatus(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Gets object from the specified column of the public status with specific ID.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.FormatPriceForCart(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns the price formatted according to the properties of the specified shopping cart's currency. Rounding is based on the settings of the shopping cart's site.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.FormatPriceInMainCurrency(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns price rounded and formatted according to the current site's main currency properties.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetMainSiteCurrency(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns main currency for a given site.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.IsOptionUsedInVariants(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if option is used in variant.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetCouponsMessage(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns info message about coupon usage.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetMultiBuyCouponsMessage(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns info message about coupon usage.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetGiftCardCouponsMessage(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns info message about gift card coupon usage.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetMassUnit(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns mass unit (e.g. lb or kg) used for expressing masses.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetFormattedPriceForCart(System.Object,System.Object,System.Object)">
            <summary>
            Returns the price formatted according to the properties of the specified shopping cart's currency. Rounding is based on the settings of the cart's site.
            </summary>
            <param name="priceObj">Price to be formatted</param>
            <param name="cartIDObj">Shopping cart ID</param>
            <param name="roundObj">True - price is rounded before formatting, according to the settings of the cart's site</param>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetShoppingCartURL(System.String)">
            <summary>
            Returns URL to the shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetShoppingCartAbsoluteUrl(System.String,System.String)">
            <summary>
            Returns absolute URL to the shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetWishlistAbsoluteUrl(System.String,System.String)">
            <summary>
            Returns absolute URL to the wish list.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EcommerceMethods.GetFormattedPriceInMainCurrency(System.Object,System.Object)">
            <summary>
            Returns price rounded and formatted according to the main currency properties.
            </summary>
            <param name="priceObj">Price to be formatted</param>
            <param name="roundObj">True - price is rounded according to the main currency settings before formatting</param>
        </member>
        <member name="T:CMS.Ecommerce.EcommerceNamespace">
            <summary>
            Macro namespace for ecommerce macro methods.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.EcommerceResolvers">
            <summary>
            Resolvers used in e-mail templates and other macro visual components.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EcommerceResolvers.SKUResolver">
            <summary>
            Returns SKU resolver.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EcommerceResolvers.CalculationResolver">
            <summary>
            Ecommerce calculation resolver.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EcommerceResolvers.EcommerceResolver">
            <summary>
            E-commerce e-mail template macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EcommerceResolvers.EcommerceEproductExpirationResolver">
            <summary>
            E-commerce expiring e-product e-mail template macro resolver.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.EProductMethods">
            <summary>
            Macro methods for e-products.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EProductMethods.GetEproductUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns e-product download URL.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Ecommerce.MultiBuyDiscountMethods">
            <summary>
            MultiBuy discount methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountMethods.GetMultiBuyProductSelectorWhereCondition(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns where condition to remove products which can not be used in MultiBuy discount.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountMethods.GenerateSiteCondition">
            <summary>
            Generates where condition to select only products usable on current site, current site products and global products if they are allowed on current site.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MultiBuyDiscountMethods.GetMultiBuyDepartmentSelectorWhereCondition(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Generates where condition to select only departments used in current site 
            and global departments depending on allow global departments setting.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Ecommerce.OptionCategoryMethods">
            <summary>
            Option category methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryMethods.IsProductGlobal(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if product is global.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionMethods.GetShippingOptionTaxClassSelectorWhereCondition(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns where condition to select tax class which can be assigned to edited shipping option.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUMethods">
            <summary>
            Methods for selecting SKUs - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUMethods.GetBundleSelectorWhereCondition(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns where condition to select bundle items.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUMethods.GetTaxClassSelectorWhereCondition(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns where condition to select tax class for the specified SKU.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="P:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.GetData">
            <summary>
            Get Ecommerce module statistical data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.GetParentProductsCount">
            <summary>
            Returns the number of products (variants and product options excluded).
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.GetVariantsCount">
            <summary>
            Returns the number of variants (options excluded).
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.GetSitesWithOrdersCount">
            <summary>
            Returns the number of sites having at least one order.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.GetProductDocumentsCount">
            <summary>
            Returns the number of product documents (nodes bound to SKU).
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ModuleUsageTracking.EcommerceUsageDataSource.GetExRateFromGlobalMainCurrencyCount">
            <summary>
            Returns the number of exchange tables with exchange rate from global main currency filled.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CMS.Ecommerce.ECommerceActionContext">
            <summary>
            Ecommerce Action context. Ensures context for the actions block.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceActionContext.mSetLowestPriceToParent">
            <summary>
            Indicates if system automatically sets the parent product price of the cheapest product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceActionContext.SetLowestPriceToParent">
            <summary>
            Indicates if system automatically set the parent product price of the cheapest product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceActionContext.CurrentSetLowestPriceToParent">
            <summary>
            Indicates if system automatically set the parent product price of the cheapest product variant within the context.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceActionContext.RestoreOriginalValues">
            <summary>
            Restores the original values to the context
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ECommerceContext">
            <summary>
            E-commerce context.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.MoreCurrenciesUsedOnSite">
            <summary>
            Returns true, if more than one currency is used and enabled on current site, otherwise false.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.OnlyOneShippingOptionAvailableOnSite">
            <summary>
            Returns true, if there is only one shipping option available on current site, otherwise false.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.OnlyOnePaymentOptionAvailableOnSite">
            <summary>
            Returns true, if there is only one payment option available on current site, otherwise false.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.IsExchangeRateFromGlobalMainCurrencyMissing">
            /// <summary>
            Indicates if exchange rate from global main currency is missing in the last valid exchange table. Returns false if site uses
            global currencies or global exchange rates or code of site main currency is the same as code of global main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentCustomer">
            <summary>
            Customer from current shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentCustomerCountry">
            <summary>
            Current customer country.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentCustomerState">
            <summary>
            Current customer state.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentShoppingCart">
            <summary>
            <para>
            Gets or sets the current shopping cart. The cart is retrieved using the <see cref="M:CMS.Ecommerce.IShoppingService.GetCurrentShoppingCart"/> method
            while setting the cart is done by <see cref="M:CMS.Ecommerce.ICurrentShoppingCartService.SetCurrentShoppingCart(CMS.Ecommerce.ShoppingCartInfo)"/> method.
            </para>
            <para>
            The property is cached per web request and is available only within the context of a web request.
            The underlying services can be used directly when caching is not required.
            </para>
            </summary>
            <seealso cref="T:CMS.Ecommerce.IShoppingService"/>
            <seealso cref="T:CMS.Ecommerce.ICurrentShoppingCartService"/>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.InvalidateCurrentShoppingCartCache">
            <summary>
            Invalidates the current shopping cart in a per request cache used by the <see cref="P:CMS.Ecommerce.ECommerceContext.CurrentShoppingCart"/> member.
            </summary>
            <seealso cref="P:CMS.Ecommerce.ECommerceContext.CurrentShoppingCart"/>
            <remarks>
            The cache is automatically invalidated when calling the default implementation of <see cref="M:CMS.Ecommerce.ICurrentShoppingCartService.SetCurrentShoppingCart(CMS.Ecommerce.ShoppingCartInfo)"/> method.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentCurrency">
            <summary>
            Current currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentManufacturer">
            <summary>
            Current manufacturer object according the URL parameter of the current request.
            It is available when the request contains parameters "manufacturerId" or "manufacturerName" with valid value of the manufacturer.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentProduct">
            <summary>
            Current product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentProductDepartment">
            <summary>
            Current product department.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentProductSupplier">
            <summary>
            Current product supplier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentProductInternalStatus">
            <summary>
            Current product internal status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ECommerceContext.CurrentProductPublicStatus">
            <summary>
            Current product public status.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedForPermission(System.String)">
            <summary>
            Checks the specified ecommerce permission for current user.
            </summary>
            <param name="permissionName">Permission name to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifyCustomer">
            <summary>
            Indicates if user is authorized to modify specific customer.
            'EcommerceModify' OR 'ModifyCustomers' permission is checked.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifyDiscount">
            <summary>
            Indicates if user is authorized to modify discounts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifyManufacturer(CMS.Ecommerce.ManufacturerInfo)">
            <summary>
            Indicates if current user is authorized to modify specific manufacturer.
            For global manufacturer: 'EcommerceGlobalModify' permission is checked.
            For site-specific manufacturer: 'EcommerceModify' OR 'ModifyManufacturers' permission is checked.
            </summary>
            <param name="manufacturerObj">Manufacturer to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifyManufacturer(System.Boolean)">
            <summary>
            Indicates if user is authorized to modify manufacturers.
            </summary>
            <param name="global">For global manufacturers (global = True): 'EcommerceGlobalModify' permission is checked.
            For site-specific manufacturers (global = False): 'EcommerceModify' OR 'ModifyManufacturers' permission is checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifyOptionCategory(CMS.Ecommerce.OptionCategoryInfo)">
            <summary>
            Indicates if user is authorized to modify specific option category.
            For global option category: 'EcommerceGlobalModify' permission is checked.
            For site-specific manufacturer: 'EcommerceModify' OR 'ModifyProducts' permission is checked.
            </summary>
            <param name="categoryObj">Option category to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifyOptionCategory(System.Boolean)">
            <summary>
            Indicates if user is authorized to modify option categories.
            </summary>
            <param name="global">For global option categories (global = True): 'EcommerceGlobalModify' permission is checked.
            For site-specific option categories (global = False): 'EcommerceModify' OR 'ModifyProducts' permission is checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifySKU(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates if user is authorized to modify specific SKU.
            For global SKU: 'EcommerceGlobalModify' permission is checked.
            For site-specific SKU: 'EcommerceModify' OR 'ModifyProducts' permission is checked.
            </summary>
            <param name="skuObj">SKU to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifySKU(System.Boolean)">
            <summary>
            Indicates if user is authorized to modify SKUs.
            </summary>
            <param name="global">For global SKUs (global = True): 'EcommerceGlobalModify' permission is checked.
            For site-specific SKUs (global = False): 'EcommerceModify' OR 'ModifyProducts' permission is checked.</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifySupplier(CMS.Ecommerce.SupplierInfo)">
            <summary>
            Indicates if user is authorized to modify specific supplier.
            For global supplier: 'EcommerceGlobalModify' permission is checked.
            For site-specific supplier: 'EcommerceModify' OR 'ModifySuppliers' permission is checked.
            </summary>
            <param name="supplierObj">Supplier to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceContext.IsUserAuthorizedToModifySupplier(System.Boolean)">
            <summary>
            Indicates if user is authorized to modify suppliers.
            </summary>
            <param name="global">For global suppliers (global = True): 'EcommerceGlobalModify' permission is checked.
            For site-specific suppliers (global = False): 'EcommerceModify' OR 'ModifySuppliers' permission is checked.</param>
        </member>
        <member name="T:CMS.Ecommerce.ECommerceModule">
            <summary>
            Represents the E-commerce module.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceModule.ECOMMERCE_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for ecommerce.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ECommerceModule.ECOMMERCE_EPRODUCT_EXPIRATION_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for ecommerce e-product expiration.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceModule.SynchronizeTask_After(System.Object,CMS.Synchronization.StagingTaskEventArgs)">
            <summary>
             Fires after the staging processes task.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceModule.ProcessTask_Before(System.Object,CMS.Synchronization.StagingSynchronizationEventArgs)">
            <summary>
            Fires before the staging processes task.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceModule.ObjectCountCheckEventOnExecute(System.Object,CMS.LicenseProvider.ObjectCountCheckEventArgs)">
            <summary>
            Sets the SKU count for the current website to the <paramref name="eventArgs"/>.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ECommerceModuleMetadata">
            <summary>
            Represents the E-commerce module metadata.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ECommerceModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ContactHandlers">
            <summary>
            Provides handlers for Ecommerce and contact interaction.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ContactHandlers.Init">
            <summary>
            Initializes the contact handlers.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ContactHandlers.MoveShoppingCarts(System.Object,CMS.Base.CMSEventArgs{CMS.ContactManagement.ContactMergeModel})">
            <summary>
            Moves all shopping carts from the given source contact to the target contact.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DocumentHandlers">
            <summary>
            Provides handlers for special SKUs actions within document actions
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DocumentHandlers.Init">
            <summary>
            Initializes the document handlers
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DocumentHandlers.DeleteMultiBuyDiscountTree(System.Object,CMS.DocumentEngine.DocumentEventArgs)">
            <summary>
            Delete bindings between given document and MultiBuyDiscountInfo.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DocumentHandlers.EnsureProductSiteConsistency(System.Object,CMS.DocumentEngine.DocumentEventArgs)">
            <summary>
            Removes sku from document when document is moved to another site. 
            SKU is removed only if is not accessible on target site.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.MacroEngineHandlers">
            <summary>
            Provides handlers for Ecommerce and MacroEngine modules interaction.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MacroEngineHandlers.Init">
            <summary>
            Initializes the macro rules handlers.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MacroEngineHandlers.CheckPermissions_Before(System.Object,CMS.DataEngine.ObjectSecurityEventArgs)">
            <summary>
            Checks permissions for e-commerce macro rules.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.MembershipHandlers">
            <summary>
            Provides handlers for Ecommerce and Membership modules interaction.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MembershipHandlers.Init">
            <summary>
            Initializes the membership handlers.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ExportSpecialActions">
            <summary>
            Handles special actions during the export process.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ExportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUExport">
            <summary>
            Handles special actions during the SKU export process.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUExport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUImport">
            <summary>
            Handles special actions during the SKU import process.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUImport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUSearchIndexer.SKU_DOCUMENTS_INDEX">
            <summary>
            Constant for custom search index for documents related to an SKU.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUSearchIndexer.IsTaskProcessingAllowed(CMS.Search.SearchTaskInfo)">
            <summary>
            Indicates if task processing is allowed for given task.
            </summary>
            <param name="sti">Search task to process.</param>
        </member>
        <member name="T:CMS.Ecommerce.AddressType">
            <summary>
            Represents the type of address.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AddressType.Unknown">
            <summary>
            Unknown address
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AddressType.Billing">
            <summary>
            Billing address
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AddressType.Shipping">
            <summary>
            Shipping address
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.AddressType.Company">
            <summary>
            Company address
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IOrderStatusUserInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OrderStatusUserInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.OrderStatusUserInfo">
            <summary>
            OrderStatusUserInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderStatusUserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderStatusUserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.OrderID">
            <summary>
            ID of the order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.ToStatusID">
            <summary>
            To status ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.ChangedByUserID">
            <summary>
            Changed by user ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.Note">
            <summary>
            Note of the order status.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.Date">
            <summary>
            Date of the change.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.OrderStatusUserID">
            <summary>
            Order status user ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderStatusUserInfo.FromStatusID">
            <summary>
            From status ID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfo.#ctor">
            <summary>
            Constructor - Creates an empty OrderStatusUserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OrderStatusUserInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderStatusUserInfoProvider">
            <summary>
            Class providing OrderStatusUserInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.GetOrderStatusHistory">
            <summary>
            Returns the query for all order status history items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.GetOrderStatusUserInfo(System.Int32)">
            <summary>
            Returns order status history item with specified ID.
            </summary>
            <param name="itemId">Order status history item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.SetOrderStatusUserInfo(CMS.Ecommerce.OrderStatusUserInfo)">
            <summary>
            Sets (updates or inserts) specified order status history item.
            </summary>
            <param name="itemObj">Order status history item to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.DeleteOrderStatusUserInfo(CMS.Ecommerce.OrderStatusUserInfo)">
            <summary>
            Deletes specified order status history item.
            </summary>
            <param name="itemObj">Order status history item to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.DeleteOrderStatusUserInfo(System.Int32)">
            <summary>
            Deletes order status history item with specified ID.
            </summary>
            <param name="itemId">Order status history item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.GetOrderStatusHistory(System.Int32)">
            <summary>
            Returns the query containing order status history for specified order.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderStatusUserInfoProvider.GetOrderStatusHistoryInternal(System.Int32)">
            <summary>
            Returns the query containing order status history for given orderId.
            </summary>
            <param name="orderId">ID of the order to get history for</param>
        </member>
        <member name="T:CMS.Ecommerce.IOrderAddressInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OrderAddressInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IOrderInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OrderInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IOrderItemInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OrderItemInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IOrderItemSKUFileInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OrderItemSKUFileInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.OrderItemInfo">
            <summary>
            OrderItemInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderItemInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderItemInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderItemInfo.mOrderItemCustomData">
            <summary>
            Order item custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemUnitPrice">
            <summary>
            Price of the item per unit, corresponds to the price of the <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitPrice"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemTotalPrice">
            <summary>
            Total item price. Corresponds with the <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.TotalPrice"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemTotalPriceInMainCurrency">
            <summary>
            Total order item price in main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemOrderID">
            <summary>
            ID of the order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemID">
            <summary>
            ID of the order item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemSKUName">
            <summary>
            Name of the order item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemSKUID">
            <summary>
            ID of the SKU for this order item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemUnitCount">
            <summary>
            Number of units within the order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemGUID">
            <summary>
            Order item unique identifier. Order item means collection of the product and its selected product options.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemParentGUID">
            <summary>
            Unique identifier of the parent order item. When set current product is a product option, otherwise it is a product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemBundleGUID">
            <summary>
            Unique identifier of parent bundle product. If set, this product is a bundle item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemCustomData">
            <summary>
            Order item custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemValidTo">
            <summary>
            Order item valid to date and time.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemSendNotification">
            <summary>
            Indicates if customer is to be notified in advance about expiration of his order item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemSKU">
            <summary>
            Associated SKU object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemText">
            <summary>
            Text assigned to the order item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemProductDiscounts">
            <summary>
            Xml content with the summary of the catalog-level discounts which were applied to the shopping cart item. 
            Contains whole DiscountsTable from shopping cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemInfo.OrderItemDiscountSummary">
            <summary>
            Xml content with the summary of the discounts which were applied to the whole shopping cart item. 
            Contains whole <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.DiscountSummary"/> from the <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.#ctor">
            <summary>
            Constructor - Creates an empty OrderItemInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OrderItemInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor - Creates a new OrderItemInfo object from serialized data.
            </summary>        
            <param name="info">Serialization data</param>
            <param name="context">Context</param> 
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfo.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.OrderItemInfoProvider">
            <summary>
            Class providing OrderItemInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItems">
            <summary>
            Returns the query for all order items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItemInfo(System.Int32)">
            <summary>
            Returns order item with specified ID.
            </summary>
            <param name="itemId">Order item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.Set(CMS.Ecommerce.OrderItemInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.SetOrderItemInfo(CMS.Ecommerce.OrderItemInfo)">
            <summary>
            Sets (updates or inserts) specified order item.
            </summary>
            <param name="itemObj">Order item to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.Delete(CMS.Ecommerce.OrderItemInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItemInfo(CMS.Ecommerce.OrderItemInfo)">
            <summary>
            Deletes specified order item.
            </summary>
            <param name="itemObj">Order item to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItemInfo(CMS.Ecommerce.OrderItemInfo,System.Boolean)">
            <summary>
            Deletes specified order item. Allows to return ordered items back to inventory.
            </summary>
            <param name="itemObj">Order item to be deleted</param>
            <param name="updateInventory">When true, items are returned back to inventory.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItemInfo(System.Int32)">
            <summary>
            Deletes order item with specified ID.
            </summary>
            <param name="itemId">Order item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItemInfo(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns order item created form shopping cart item data.
            </summary>
            <param name="item">Shopping cart item.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItems(System.Int32)">
            <summary>
            Returns all items of the specified order. Returned items contain pre-loaded <see cref="P:CMS.Ecommerce.OrderItemInfo.OrderItemSKU"/> SKU data.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetExpiringOrderItems(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns dataset of all expiring order items matching given parameters along with additional relevant information.
            </summary>
            <param name="days">Number of days before order item expiration</param>
            <param name="siteId">Site ID. Set to 0 to get expiring order items on all sites.</param>
            <param name="where">Additional where condition</param>
            <param name="onlyWithSendNotification">Get only records with send notification flag set to true.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItems(System.Int32)">
            <summary>
            Delete all order items for specified order.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItemInfoInternal(System.Int32)">
            <summary>
            Returns order item with specified ID.
            </summary>
            <param name="itemId">Order item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.SetOrderItemInfoInternal(CMS.Ecommerce.OrderItemInfo)">
            <summary>
            Sets (updates or inserts) specified order item.
            </summary>
            <param name="itemObj">Order item to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItemInfoInternal(CMS.Ecommerce.OrderItemInfo)">
            <summary>
            Deletes specified order item.
            </summary>
            <param name="itemObj">Order item to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItemInfoInternal(CMS.Ecommerce.OrderItemInfo,System.Boolean)">
            <summary>
            Deletes specified order item. Allows to return ordered items back to inventory.
            </summary>
            <param name="itemObj">Order item to be deleted.</param>
            <param name="updateInventory">When true, items are returned back to inventory.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItemInfoInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns order item created from shopping cart item data.
            </summary>
            <param name="item">Shopping cart item.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetOrderItemsInternal(System.Int32)">
            <summary>
            Returns all items of the specified order. Returned items contain pre-loaded <see cref="P:CMS.Ecommerce.OrderItemInfo.OrderItemSKU"/> SKU data.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.GetExpiringOrderItemsInternal(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns dataset of all expiring order items matching given parameters along with additional relevant information.
            </summary>
            <param name="days">Number of days before order item expiration</param>
            <param name="siteId">Site ID. Set to 0 to get expiring order items on all sites.</param>
            <param name="where">Additional where condition</param>
            <param name="onlyWithSendNotification">Get only records with send notification flag set to true.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemInfoProvider.DeleteOrderItemsInternal(System.Int32)">
            <summary>
            Delete all order items for specified order.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderItemSKUFileInfo">
            <summary>
            OrderItemSKUFileInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderItemSKUFileInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderItemSKUFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemSKUFileInfo.Token">
            <summary>
            Unique download identifier.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemSKUFileInfo.OrderItemID">
            <summary>
            Parent order item ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemSKUFileInfo.OrderItemSKUFileID">
            <summary>
            Order item SKU file ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderItemSKUFileInfo.FileID">
            <summary>
            Associated SKU file ID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty OrderItemSKUFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OrderItemSKUFileInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderItemSKUFileInfoProvider">
            <summary>
            Class providing OrderItemSKUFileInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.GetOrderItemSKUFiles">
            <summary>
            Returns the query for all order item SKU files.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.GetOrderItemSKUFileInfo(System.Int32)">
            <summary>
            Returns order item SKU file with specified ID.
            </summary>
            <param name="fileId">Order item SKU file ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.GetOrderItemSKUFileInfo(System.Guid)">
            <summary>
            Returns order item SKU file with specified unique token.
            </summary>
            <param name="token">Order item SKU file unique token.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.SetOrderItemSKUFileInfo(CMS.Ecommerce.OrderItemSKUFileInfo)">
            <summary>
            Sets (updates or inserts) specified order item SKU file.
            </summary>
            <param name="fileObj">Order item SKU file to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.DeleteOrderItemSKUFileInfo(CMS.Ecommerce.OrderItemSKUFileInfo)">
            <summary>
            Deletes specified order item SKU file.
            </summary>
            <param name="fileObj">Order item SKU file to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.DeleteOrderItemSKUFileInfo(System.Int32)">
            <summary>
            Deletes order item SKU file with specified ID.
            </summary>
            <param name="fileId">Order item SKU file ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.GetOrderItemSKUFiles(System.Int32)">
            <summary>
            Returns dataset of all order item SKU files matching the specified parameters with additional details.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderItemSKUFileInfoProvider.GetOrderItemSKUFilesInternal(System.Int32)">
            <summary>
            Returns dataset of all order item SKU files matching the specified parameters with additional details.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderAddressInfo">
            <summary>
            OrderAddressInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderAddressInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderAddressInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressOrderID">
            <summary>
            Address order ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressType">
            <summary>
            Address type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressZip">
            <summary>
            Address ZIP code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressStateID">
            <summary>
            Address state ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressPhone">
            <summary>
            Address phone.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressCountryID">
            <summary>
            Address country ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressID">
            <summary>
            Address ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressPersonalName">
            <summary>
            Address personal name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressLine1">
            <summary>
            Address line 1.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressLine2">
            <summary>
            Address line 2.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressCity">
            <summary>
            Address city.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressGUID">
            <summary>
            Address GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderAddressInfo.AddressLastModified">
            <summary>
            Date and time when the address was last modified.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property (additional support for Country and State properties).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.#ctor">
            <summary>
            Constructor - Creates an empty OrderAddressInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OrderAddressInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderAddressInfoProvider">
            <summary>
            Class providing AddressInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfoProvider.GetAddresses">
            <summary>
            Returns the query for all addresses.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfoProvider.SetAddressInfo(CMS.Ecommerce.OrderAddressInfo)">
            <summary>
            Sets (updates or inserts) specified address.
            </summary>
            <param name="addressObj">Address to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfoProvider.DeleteAddressInfo(CMS.Ecommerce.OrderAddressInfo)">
            <summary>
            Deletes specified address.
            </summary>
            <param name="addressObj">Address to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfoProvider.GetAddressInfo(System.Int32)">
            <summary>
            Gets the address information.
            </summary>
            <param name="addressId">The address unique identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderAddressInfoProvider.DeleteAddressInfo(System.Int32)">
            <summary>
            Deletes address with specified ID.
            </summary>
            <param name="addressId">Address ID</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderInfo">
            <summary>
            OrderInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderInfo.mOrderCustomData">
            <summary>
            Order custom data.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OrderInfo.mOrderPaymentResult">
            <summary>
            Payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderID">
            <summary>
            Order ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderPaymentOptionID">
            <summary>
            Order payment option ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderSiteID">
            <summary>
            Order site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderTotalTax">
            <summary>
            Order total tax in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderTaxSummary">
            <summary>
            Order tax summary.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderInvoiceNumber">
            <summary>
            Order invoice number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCurrencyID">
            <summary>
            Order currency ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderShippingOptionID">
            <summary>
            Order shipping option ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderInvoice">
            <summary>
            Order invoice.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderNote">
            <summary>
            Order note.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCompletedByUserID">
            <summary>
            Order created by user ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCustomerID">
            <summary>
            Order customer ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderStatusID">
            <summary>
            Order status ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderGrandTotal">
            <summary>
            Order grand total.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderGrandTotalInMainCurrency">
            <summary>
            Order grand total in the main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderTotalPrice">
            <summary>
            Order total price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderTotalPriceInMainCurrency">
            <summary>
            Order total price in main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderTotalShipping">
            <summary>
            Order total shipping in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderDate">
            <summary>
            Order date.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderPaymentResult">
            <summary>
            Order payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderTrackingNumber">
            <summary>
            Order tracking number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderGUID">
            <summary>
            Order GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderIsPaid">
            <summary>
            Order is paid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderIsAuthorized">
            <summary>
            Indicates whether the order payment is authorized.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCulture">
            <summary>
            Culture of the order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCustomData">
            <summary>
            Order custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderDiscounts">
            <summary>
            Xml content with the summary of the order and multibuy discounts which were applied to the shopping cart item. 
            Contains discount name, price and price in main currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderOtherPayments">
            <summary>
            Order other payments (such as gif codes) XML summary.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCouponCodes">
            <summary>
            Order coupon codes XML summary
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderPaymentFormattedResult">
            <summary>
            Returns formatted payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderBillingAddress">
            <summary>
            Gets the current billing address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderShippingAddress">
            <summary>
            Gets the current shipping address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OrderInfo.OrderCompanyAddress">
            <summary>
            Gets the current company address.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.#ctor">
            <summary>
            Constructor - Creates an empty OrderInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OrderInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor - Creates a new OrderInfo object from serialized data.
            </summary>        
            <param name="info">Serialization data</param>
            <param name="context">Context</param> 
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.UpdateOrderStatus(CMS.Ecommerce.PaymentResultInfo)">
            <summary>
            Updates <see cref="P:CMS.Ecommerce.OrderInfo.OrderStatusID"/> property accordingly to given <paramref name="paymentResult"/> and assigned <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> configuration.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfo.UpdateOrderStatus(System.Int32)">
            <summary>
            Assigns order status to order. If can not be used due to global objects settings, looks for site status with the same code name.
            </summary>
            <param name="statusId">Id of the status</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderInfoProvider">
            <summary>
            Class providing OrderInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GetOrders">
            <summary>
            Returns the query for all orders.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GetOrderInfo(System.Int32)">
            <summary>
            Returns order with specified ID.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.Set(CMS.Ecommerce.OrderInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SetOrderInfo(CMS.Ecommerce.OrderInfo)">
            <summary>
            Sets (updates or inserts) specified order.
            </summary>
            <param name="orderObj">Order to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.Delete(CMS.Ecommerce.OrderInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.DeleteOrderInfo(CMS.Ecommerce.OrderInfo)">
            <summary>
            Deletes specified order.
            </summary>
            <param name="orderObj">Order to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.DeleteOrderInfo(System.Int32)">
            <summary>
            Deletes order with specified ID.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GetOrders(System.Int32)">
            <summary>
            Returns a query for all orders for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GenerateInvoiceNumber(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns invoice number generated from given shopping cart data.
            </summary>
            <param name="cart">Shopping cart info object to generate invoice number for</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.CreateEmailMacroResolver(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates the macro resolver for the given shopping cart.
            </summary>
            <param name="cart">Shopping data</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderNotificationToCustomer(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order notification to customer.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderNotificationToCustomer' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderNotificationToAdministrator(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order notification to administrator.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderNotificationToAdmin' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderPaymentNotificationToCustomer(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order payment notification to customer.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderPaymentNotificationToCustomer' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderPaymentNotificationToAdministrator(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order payment notification to administrator.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderPaymentNotificationToAdmin' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderStatusNotificationToCustomer(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order status notification to customer.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderStatusNotificationToCustomer' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderStatusNotificationToAdministrator(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order status notification to administrator.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderStatusNotificationToAdmin' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GetOrderInfoInternal(System.Int32)">
            <summary>
            Returns order with specified ID.
            </summary>
            <param name="orderId">Order ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SetOrderInfoInternal(CMS.Ecommerce.OrderInfo)">
            <summary>
            Sets (updates or inserts) specified order.
            </summary>
            <param name="orderObj">Order to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.DeleteOrderInfoInternal(CMS.Ecommerce.OrderInfo)">
            <summary>
            Deletes specified order.
            </summary>
            <param name="orderObj">Order to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GetOrdersInternal(System.Int32)">
            <summary>
            Returns a query for all orders for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.GenerateInvoiceNumberInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns invoice number generated from given shopping cart data.
            </summary>
            <param name="cart">Shopping cart info object</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.UpdateOrderStatusHistoryInternal(CMS.Ecommerce.OrderInfo,System.Int32,System.Boolean)">
            <summary>
            Updates order status history and sends notification emails about order status change.
            </summary>
            <param name="orderObj">Order data</param>
            <param name="originalStatusId">ID of the status before change. Don't care if newOrder == true</param>
            <param name="newOrder">True - it is a new order, False - it is an existing order</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.ProcessOrderIsPaidChangeInternal(CMS.Ecommerce.OrderInfo)">
            <summary>
            Process order items of given order according to order is paid change.
            </summary>
            <param name="order">Order</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.ProcessMembershipsInternal(CMS.Ecommerce.OrderInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.OrderItemInfo},System.DateTime)">
            <summary>
            Process membership order items of given order.
            </summary>
            <param name="order">Order</param>
            <param name="membershipItems">Membership items of given order</param>
            <param name="now">Date and time to use as current date and time value</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.ProcessEProductsInternal(CMS.Ecommerce.OrderInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.OrderItemInfo},System.DateTime)">
            <summary>
            Process EProduct order items of given order.
            </summary>
            <param name="order">Order</param>
            <param name="eproductItems">EProduct items of given order</param>
            <param name="now">Date and time to use as current date and time value</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.ProcessMembershipInternal(CMS.Ecommerce.OrderInfo,CMS.Ecommerce.OrderItemInfo,CMS.Ecommerce.SKUInfo,CMS.Membership.UserInfo,System.DateTime)">
            <summary>
            Process user's membership according to given parameters.
            </summary>
            <param name="oi">Order</param>
            <param name="oii">Order item</param>
            <param name="skui">SKU</param>
            <param name="ui">User</param>
            <param name="now">Date and time to use as current date and time value</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.ProcessEProductInternal(CMS.Ecommerce.OrderInfo,CMS.Ecommerce.OrderItemInfo,CMS.Ecommerce.SKUInfo,System.DateTime)">
            <summary>
            Process e-product according to given parameters.
            </summary>
            <param name="order">Order</param>
            <param name="item">Order item</param>
            <param name="skui">SKU</param>
            <param name="now">Date and time to use as current date and time value</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.CreateEmailMacroResolverInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates the macro resolver for the given shopping cart.
            </summary>
            <param name="cart">Shopping data</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderNotificationToCustomerInternal(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order notification to customer.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderNotificationToCustomer' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderNotificationToAdministratorInternal(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order notification to administrator.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderNotificationToAdmin' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderPaymentNotificationToCustomerInternal(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order payment notification to customer.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderPaymentNotificationToCustomer' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderPaymentNotificationToAdministratorInternal(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order payment notification to administrator.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderPaymentNotificationToAdmin' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderStatusNotificationToCustomerInternal(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order status notification to customer.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderStatusNotificationToCustomer' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendOrderStatusNotificationToAdministratorInternal(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Sends order status notification to administrator.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="templateName">Name of the template which is used for e-mail. If null or empty, 'Ecommerce.OrderStatusNotificationToAdmin' template is used</param>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProvider.SendEmailNotificationInternal(CMS.Ecommerce.ShoppingCartInfo,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sends order notification to customer.
            </summary>
            <param name="cart">Shopping cart info object</param>
            <param name="templateName">Name of the e-mail template which should be used for creating an e-mail</param>
            <param name="defaultTemplate">Name of the e-mail template which is used if primary template is not specified</param>
            <param name="defaultSubject">E-mail default subject. It is used if template subject is not specified</param>
            <param name="toCustomer">True - it is a notification to customer. False - it is a notification to administrator</param>
            <param name="eventSource">Source of the event which is logged when sending fails</param>
        </member>
        <member name="T:CMS.Ecommerce.OrderInfoProviderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:CMS.Ecommerce.IOrderInfoProvider"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OrderInfoProviderExtensions.GetBySite(CMS.Ecommerce.IOrderInfoProvider,System.Int32)">
            <summary>
            Returns a query for all orders for specified site.
            </summary>
            <param name="orderInfoProvider">Provider for <see cref="T:CMS.Ecommerce.OrderInfo"/> management.</param>
            <param name="siteId">ID of the site the orders should be retrieved from.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="orderInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.DefaultItemChecker.#ctor(CMS.Ecommerce.ISKUInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.DefaultItemChecker"/> class.
            </summary>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="skuInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.DefaultItemChecker.CheckNewItem(CMS.Ecommerce.ShoppingCartItemParameters,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Checks if the <paramref name="newItemParams"/> are valid and product configuration can be added to the given <paramref name="cart"/>.
            </summary>
            <param name="newItemParams">New item parameters (product with options)</param>
            <param name="cart"><see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> where the new item will be placed.</param>
            <remarks>
            Following checks are performed:
            <list type="bullet">
                <item><description><see cref="P:CMS.Ecommerce.SKUInfo.SKUEnabled"/> for product/variant/option</description></item>
                <item><description>Using of global/site products/options according current settings</description></item>
                <item><description>Presence and validity of options for obligatory product categories</description></item>
                <item><description>
                Other invalid scenarios (e.g. presence of options used in variants, adding of main product with variants, 
                disabled options for the given main product, adding standalone options e.t.c)
                </description></item>
            </list>
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.ICartItemChecker">
            <summary>
            Service for consistency checking of added products.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICartItemChecker.CheckNewItem(CMS.Ecommerce.ShoppingCartItemParameters,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Checks if the <paramref name="newItemParams"/> are valid and product configuration can be added to the given <paramref name="cart"/>.
            </summary>
            <param name="newItemParams">New item parameters (product with options)</param>
            <param name="cart"><see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> where the new item will be placed.</param>
        </member>
        <member name="T:CMS.Ecommerce.CookieShoppingCartClientStorage">
            <summary>
            Class for storing shopping cart GUID in the client's cookie.
            </summary>
            <seealso cref="F:CMS.Helpers.CookieName.ShoppingCart"/>
        </member>
        <member name="M:CMS.Ecommerce.CookieShoppingCartClientStorage.GetCartGuid">
            <summary>
            Gets the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> from the cookie.
            </summary>
            <returns>Shopping cart GUID from client or <see cref="F:System.Guid.Empty"/> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CookieShoppingCartClientStorage.SetCartGuid(System.Guid)">
            <summary>
            Stores the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to the client's cookie.
            </summary>
            <remarks>
            The value is set to cookie only if changed.
            </remarks>
            <param name="cartGuid">GUID of the shopping cart to be stored on the client's cookie.</param>
        </member>
        <member name="T:CMS.Ecommerce.CurrentShoppingCartService">
            <summary>
            Represents a service providing current shopping cart functionality.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.#ctor(CMS.Ecommerce.ICurrentShoppingCartStrategy,CMS.Ecommerce.IShoppingCartRepository,CMS.Ecommerce.IShoppingCartFactory,CMS.Ecommerce.IShoppingCartCache,CMS.Ecommerce.IShoppingCartClientStorage,CMS.Ecommerce.IShoppingCartSession,CMS.Base.Internal.IHttpContextRetriever)">
            <summary>
            Constructor. Creates new instance of <see cref="T:CMS.Ecommerce.CurrentShoppingCartService"/>.
            </summary>
            <param name="clientStorage">Client-site storage of shopping cart identifier.</param>
            <param name="cartCache">Server-side cache able to hold shopping cart for current visitor.</param>
            <param name="cartSession">Session storage of shopping cart identifier.</param>
            <param name="cartFactory">Factory used to create new shopping cart when visitor has no cart.</param>
            <param name="cartStrategy">Strategy used for evaluation of candidate shopping cart and its preparation for use.</param>
            <param name="cartRepository">Persistent storage of shopping cart objects.</param>
            <param name="httpContextRetriever">Retrieves IHttpContext of current request.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.GetCurrentShoppingCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Finds the most suitable shopping cart for given user. Creates and initializes new one when no cart found.
            </summary>
            <param name="user">User to get current shopping cart for.</param>
            <param name="site">ID or the codename of the site.</param>
            <returns>Visitor's current shopping cart.</returns>
            <remarks>The cart is evaluated if it has been retrieved from database.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.SetCurrentShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets current shopping cart for current visitor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.GetCandidateCart(System.Boolean@,System.Boolean@)">
            <summary>
            Looks for current visitor's shopping cart candidate.
            </summary>
            <remarks>
            When the candidate cart is not found in cache, session is used to obtain shopping cart identifier.
            When the shopping cart identifier is not found in session, client storage is used to obtain it.
            </remarks>
            <param name="anonymize">Set to true if shopping cart identifier is taken from the client.</param>
            <param name="evaluationIsNeeded">Indicates that cart has to be evaluated afterwards.</param>
            <returns>Candidate cart or <c>null</c> when no candidate cart found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.HandleCandidateCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier,System.Boolean,System.Boolean@)">
            <summary>
            Examines candidate shopping cart and prepares it to be used by the visitor.
            </summary>
            <remarks>
            <para>
            Candidate shopping <paramref name="cart"/> can be dropped, taken over by user or replaced with user older cart from the repository.
            </para>
            <para>
            Candidate shopping <paramref name="cart"/> is dropped if it is not usable on given <paramref name="site"/>
            or <paramref name="user"/> can not take over the cart according to <see cref="F:CMS.Ecommerce.CurrentShoppingCartService.mCartStrategy"/>.
            </para>
            </remarks>
            <param name="cart">Candidate shopping cart. When <c>null</c>, an existing cart from <see cref="F:CMS.Ecommerce.CurrentShoppingCartService.mCartRepository"/> is retrieved.</param>
            <param name="user">User in which context is the candidate cart examined.</param>
            <param name="site">ID or code name of the site.</param>
            <param name="anonymizeCart">Private data are cleared when <c>true</c>. Private data are not cleared when the cart is replaced with user's own cart.</param>
            <param name="evaluationIsNeeded">Indicates that cart has to be evaluated afterwards.</param>
            <returns>Shopping cart which is suitable for shopping by <paramref name="user"/> on <paramref name="site"/>. Returns <c>null</c> when no such cart found.</returns>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartService.HandleForeignCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier,System.Boolean,System.Boolean@)"/>
            <seealso cref="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.CartCanBeUsedOnSite(CMS.Ecommerce.ShoppingCartInfo,CMS.DataEngine.SiteInfoIdentifier)"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.GetExistingCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Gets and prepares user's shopping cart from the repository.
            </summary>
            <param name="user">User for which the shopping cart is returned.</param>
            <param name="site">ID or code name of the site to look for cart.</param>
            <returns>User's shopping cart retrieved from the <see cref="F:CMS.Ecommerce.CurrentShoppingCartService.mCartRepository"/> or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.HandleForeignCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier,System.Boolean,System.Boolean@)">
            <summary>
            Handles candidate shopping cart which does not belong to <paramref name="user"/>.
            </summary>
            <remarks>
            Candidate shopping cart is dropped when it can not be taken over by <paramref name="user"/>.
            </remarks>
            <param name="cart">Candidate shopping cart not belonging to <paramref name="user"/>.</param>
            <param name="user">User in which context is the candidate cart examined.</param>
            <param name="site">ID or code name of the site.</param>
            <param name="anonymizeCart">Private data are cleared when <c>true</c>.</param>
            <param name="evaluationIsNeeded">Indicates that cart has to be evaluated afterwards.</param>
            <returns>Shopping cart which is suitable for shopping by <paramref name="user"/> on <paramref name="site"/>. Returns <c>null</c> when cart can not be taken over.</returns>
            <seealso cref="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.UserCanTakeOverCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)"/>
            <seealso cref="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.TakeOverCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)"/>
            <seealso cref="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.AnonymizeShoppingCart(CMS.Ecommerce.ShoppingCartInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.ProcessStoredCarts(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier,System.Boolean@)">
            <summary>
            Handles priority of candidate shopping <paramref name="cart"/> over shopping cart already stored for <paramref name="user"/> in the <see cref="F:CMS.Ecommerce.CurrentShoppingCartService.mCartRepository"/>.
            </summary>
            <param name="cart">Candidate shopping cart.</param>
            <param name="user">User for which is the preference examined.</param>
            <param name="site">Site on which is the preference examined.</param>
            <param name="anonymizeCart">Flag set to <c>true</c> when candidate shopping cart is used. </param>
            <returns>Preferred shopping cart.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.CreateCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Creates new cart for <paramref name="user"/> on <paramref name="site"/> using <see cref="F:CMS.Ecommerce.CurrentShoppingCartService.mCartFactory"/>.
            </summary>
            <param name="user">User for who the cart is created.</param>
            <param name="site">ID or site codename where the cart is created.</param>
            <returns>Shopping cart prepared to be used by <paramref name="user"/>.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.RememberCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Stores given shopping cart into cache and carts identifier to client's storage.
            </summary>
            <param name="cart">Shopping cart to be remembered.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartService.EvaluateCartSafely(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Stores shopping cart to cache temporarily and then evaluates it.
            This is prevention from infinite recursion of cart evaluation in case that macro using <see cref="P:CMS.Ecommerce.ECommerceContext.CurrentShoppingCart"/> is resolved during evaluation.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CurrentShoppingCartStrategy">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ICurrentShoppingCartStrategy"/>.
            </summary>
            <remarks>
            You can derive your own implementation from this class to customize the way the system finds shopping cart for visitor. 
            The following code illustrates how to register custom implementation.
            <code>
            [assembly:RegisterImplementation(typeof(ICurrentShoppingCartStrategy), typeof(MyCurrentShoppingCartStrategy))]
            public class MyCurrentShoppingCartStrategy : CurrentShoppingCartStrategy
            {
                ...
            }
            </code>
            </remarks>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartInfo"/>
            <seealso cref="T:CMS.DataEngine.SiteInfoIdentifier"/>
            <seealso cref="T:CMS.Membership.UserInfo"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.CartCanBeUsedOnSite(CMS.Ecommerce.ShoppingCartInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks if given shopping cart is assigned to the site.
            </summary>
            <param name="cart">Shopping cart to be checked.</param>
            <param name="site">ID or code name of the site to check.</param>
            <returns><c>True</c> if given <paramref name="cart"/> can be used on the site specified by <paramref name="site"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of arguments is <c>null</c>.</exception>
            <seealso cref="T:CMS.Ecommerce.IShoppingCartFactory"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.UserCanTakeOverCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Checks if user can adopt shopping cart.
            </summary>
            <param name="cart">Candidate shopping cart to be checked.</param>
            <param name="user">Potential owner of the <paramref name="cart"/>.</param>
            <returns><c>True</c> if given <paramref name="cart"/> has no owner or the owner is anonymous.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cart"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.TakeOverCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Makes the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> owned by the user.
            </summary>
            <remarks>
            Updates the <see cref="P:CMS.Ecommerce.ShoppingCartInfo.User"/>, <see cref="P:CMS.Ecommerce.ShoppingCartInfo.Customer"/> and <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartContactID"/> properties.
            If the cart is empty, it's currency is set to user's preferred currency.
            </remarks>
            <param name="cart">The cart to be assigned to the <paramref name="user"/>.</param>
            <param name="user">User which is assigned to the <paramref name="cart"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of arguments is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.PreferStoredCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Decides whether shopping cart is 'good enough' for user 
            or an older shopping cart stored in the system should be preferred.
            </summary>
            <param name="cart">Candidate shopping cart to be checked. <c>Null</c> if no candidate cart found.</param>
            <param name="user">The user whose preference is explored.</param>
            <returns><c>True</c> if <paramref name="cart"/> is <c>null</c> or empty.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.AnonymizeShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes personal information from the shopping cart.
            </summary>
            <remarks>
            <para>
            This method is used when the current shopping was not created specifically for current user. 
            </para>
            <para>
            This situation occurs in the following situations:
            <list type="bullet">
            <item>
            <description>User logs in. This means that cart was created for public user and now it is used for logged user.</description>
            </item>
            <item>
            <description>The shopping cart was found by identifier taken from the client (<see cref="T:CMS.Ecommerce.IShoppingCartClientStorage"/>). 
            This happens when the cache (<see cref="T:CMS.Ecommerce.IShoppingCartCache"/>) expires and it is not guaranteed that cart belongs to different anonymous customer.</description>
            </item> 
            </list>
            </para>
            </remarks>
            <param name="cart">Shopping cart which private data are cleared.</param>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearPrivateData(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearCustomer(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearShipping(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearPayment(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearAddresses(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearNote(CMS.Ecommerce.ShoppingCartInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.RefreshCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Ensures that <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> does not contain invalid data.
            </summary>
            <remarks>
            Invalidates cached discounts and checks selected currency.
            </remarks>
            <param name="cart">Shopping cart to refresh.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearPrivateData(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Clears all data considered to be 'private' (i.e. customer, shipping option including addresses, payment option, discounts and note).
            </summary>
            <param name="cart">The shopping cart to clear private data.</param>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearCustomer(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearShipping(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearPayment(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearAddresses(CMS.Ecommerce.ShoppingCartInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearNote(CMS.Ecommerce.ShoppingCartInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearCustomer(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes information about customer from the shopping cart.
            </summary>
            <param name="cart">The shopping cart from which customer is removed.</param>
            <seealso cref = "M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearAddresses(CMS.Ecommerce.ShoppingCartInfo)" />
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearShipping(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes information about shipping from the shopping cart.
            </summary>
            <param name="cart">The shopping cart from which the shipping is removed.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearPayment(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes information about payment from the shopping cart.
            </summary>
            <param name="cart">The shopping cart from which the payment data are removed.</param>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearAddresses(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes information about addresses from the shopping cart.
            </summary>
            <param name="cart">The shopping cart from which the addresses are removed.</param>
            <seealso cref="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearCustomer(CMS.Ecommerce.ShoppingCartInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.CurrentShoppingCartStrategy.ClearNote(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes information about note from the shopping cart.
            </summary>
            <param name="cart">The shopping cart from which the note is removed.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICurrentShoppingCartService">
            <summary>
            Interface for service providing current shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartService.GetCurrentShoppingCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Finds the most suitable shopping cart for given user. Creates and initializes new one when no cart found.
            </summary>
            <param name="user">User to get current shopping cart for.</param>
            <param name="site">ID or the codename of the site.</param>
            <returns>Visitor's current shopping cart.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartService.SetCurrentShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets current shopping cart for current visitor.
            </summary>
            <remarks>
            The default implementation of this service calls the <see cref="M:CMS.Ecommerce.ECommerceContext.InvalidateCurrentShoppingCartCache"/> method.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.ICurrentShoppingCartStrategy">
            <summary>
            Represent a strategy used during obtaining visitor's current shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ICurrentShoppingCartService"/>
            <seealso cref="T:CMS.Ecommerce.CurrentShoppingCartStrategy"/>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.CartCanBeUsedOnSite(CMS.Ecommerce.ShoppingCartInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Checks if given shopping cart can be used on given site.
            </summary>
            <param name="cart">Shopping cart to be checked.</param>
            <param name="site">ID or codename of the site to check.</param>
            <returns><c>True</c> if given <paramref name="cart"/> can be used on the site specified by <paramref name="site"/></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of arguments is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.UserCanTakeOverCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Checks if <paramref name="user"/> can adopt shopping cart specified by <paramref name="cart"/>.
            </summary>
            <param name="cart">Candidate shopping cart to be checked.</param>
            <param name="user">New potential owner of the <paramref name="cart"/></param>
            <returns><c>True</c> if given <paramref name="cart"/> can be taken over by user.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cart"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.TakeOverCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Makes the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> owned by the user.
            </summary>
            <param name="cart">The cart to be assigned to the <paramref name="user"/>.</param>
            <param name="user">User which is assigned to the <paramref name="cart"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when any of arguments is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.PreferStoredCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Decides whether shopping cart specified by <paramref name="cart"/> is 'good enough' for user 
            or an older shopping cart stored in the system should be preferred.
            </summary>
            <param name="cart">Candidate shopping cart to be checked. <c>Null</c> if no candidate cart found.</param>
            <param name="user">The user whose preference is explored.</param>
            <returns><c>True</c> if any user's shopping cart stored in the system is more preferred than <paramref name="cart"/>. 
            Returns <c>false</c> if <paramref name="cart"/> is good enough for user to be used for shopping.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.AnonymizeShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes personal information from the shopping cart.
            </summary>
            <remarks>
            <para>
            This method is used when the current shopping was not created specifically for current user. 
            </para>
            <para>
            This situation occurs in the following situations:
            <list type="bullet">
            <item>
            <description>User logs in. This means that cart was created for public user and now it is used for logged user.</description>
            <description>The shopping cart was found by identifier taken from the client (<see cref="T:CMS.Ecommerce.IShoppingCartClientStorage"/>). 
            This happens when the cache (<see cref="T:CMS.Ecommerce.IShoppingCartCache"/>) expires and it is not guaranteed that cart belongs to different anonymous customer.</description>
            </item> 
            </list>
            </para>
            <para>
            Implementation must set <see cref="P:CMS.Ecommerce.ShoppingCartInfo.PrivateDataCleared"/> to <c>true</c>.
            </para>
            </remarks>
            <param name="cart">Shopping cart which private data are cleared.</param>
            <seealso cref="T:CMS.Ecommerce.IShoppingCartClientStorage"/>
            <seealso cref="T:CMS.Ecommerce.IShoppingCartCache"/>
        </member>
        <member name="M:CMS.Ecommerce.ICurrentShoppingCartStrategy.RefreshCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Ensures that <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> does not contain invalid data.
            </summary>
            <remarks>
            This method is used to remove possibly outdated values from shopping cart. 
            This can happen when the cart is fetched from the database or cache after longer period of time.
            </remarks>
            <param name="cart">Shopping cart to refresh.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartCache">
            <summary>
            Interface representing general cache able to store shopping cart info object for current visitor.
            </summary>
            <remarks>
            The cache is expected to expire after some time.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartCache.GetCart">
            <summary>
            Returns cached shopping cart of the current visitor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartCache.StoreCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Stores current visitor's <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to the cache.
            </summary>
            <param name="cart">Shopping cart to be stored.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartClientStorage">
            <summary>
            Interface for storing shopping cart GUID on the client's side.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartClientStorage.GetCartGuid">
            <summary>
            Gets the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> stored on client.
            </summary>
            <returns>Shopping cart GUID from client or <see cref="F:System.Guid.Empty"/> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartClientStorage.SetCartGuid(System.Guid)">
            <summary>
            Stores the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to the client.
            </summary>
            <remarks>
            It is recommended to save the value to the client only if the value has changed.
            </remarks>
            <param name="cartGuid">GUID of the shopping cart to be stored on the client's side.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartSession">
            <summary>
            Interface for storing shopping cart GUID in session.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartSession.GetCartGuid">
            <summary>
            Gets the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> stored in session.
            </summary>
            <returns>Shopping cart GUID from session or <see cref="F:System.Guid.Empty"/> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartSession.SetCartGuid(System.Guid)">
            <summary>
            Stores the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to the session.
            </summary>
            <remarks>
            It is recommended to save the value to the session only if the value has changed.
            </remarks>
            <param name="cartGuid">GUID of the shopping cart to be stored to the session.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartCache">
            <summary>
            Represents a shopping cart cache.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCache.#ctor(CMS.Base.Internal.IHttpContextRetriever)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShoppingCartCache"/> class.
            </summary>
            <param name="httpContextRetriever">The HTTP context retriever.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCache.GetCart">
            <summary>
            Returns cached shopping cart of the current visitor.
            </summary>
            <remarks>Returns null if session does not exist.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCache.StoreCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Stores current visitor's <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to the cache.
            </summary>
            <param name="cart">Shopping cart to be stored.</param>
            <remarks>Does not store the shopping cart if session does not exist.</remarks>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartSession">
            <summary>
            Class for storing shopping cart GUID in the session.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartSession.GetCartGuid">
            <summary>
            Gets the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> stored in session.
            </summary>
            <returns>Shopping cart GUID from session or <see cref="F:System.Guid.Empty"/> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartSession.SetCartGuid(System.Guid)">
            <summary>
            Stores the GUID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to the session.
            </summary>
            <remarks>
            It is recommended to save the value to the session only if the value has changed.
            </remarks>
            <param name="cartGuid">GUID of the shopping cart to be stored to the session.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultShoppingCartFactory">
            <summary>
            Represents a factory able to create and initialize new instances of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.
            </summary>
            <remarks>
            This is the default implementation of <see cref="T:CMS.Ecommerce.IShoppingCartFactory"/>.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartFactory.#ctor(CMS.Core.IEventLogService,CMS.Ecommerce.ICurrencyInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.DefaultShoppingCartFactory"/> class.
            </summary>
            <param name="eventLogService">The event log service.</param>
            <param name="currencyInfoProvider">Provider for <see cref="T:CMS.Ecommerce.CurrencyInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartFactory.CreateCart(CMS.DataEngine.SiteInfoIdentifier,CMS.Membership.UserInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> assigned to the user on given site.
            </summary>
            <remarks>
            Created <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> has <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartSiteID"/> initialized to value specified by <paramref name="site"/>.
            <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCurrencyID"/> is initialized with user's preferred currency. Main currency is used when user's preference is unknown.
            </remarks>
            <param name="site">ID or site codename where the cart is created.</param>
            <param name="user">User for who the cart is created.</param>
            <returns>New instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="site"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartFactory.InitCartWithUser(CMS.Ecommerce.ShoppingCartInfo,CMS.Membership.UserInfo)">
            <summary>
            Assigns the shopping cart to the user. Override this method to add extra user-related initialization.
            </summary>
            <param name="cart">The shopping cart to be assigned to the <paramref name="user"/></param>
            <param name="user">The user who is assigned with the <paramref name="cart"/></param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartFactory.PreselectCurrency(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Selects the preferred currency for the given cart. 
            </summary>
            <remarks>
            No currency is set if the site does not have main currency defined.
            </remarks>
            <param name="cart">The shopping cart object.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartFactory.PreselectPaymentOption(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Assigns payment option in given <paramref name="cart"/> based on <see cref="T:CMS.Ecommerce.CustomerInfo"/> preferences.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartFactory.PreselectShippingOption(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Assigns shipping option in given <paramref name="cart"/> based on <see cref="T:CMS.Ecommerce.CustomerInfo"/> preferences.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DefaultShoppingCartRepository">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.IShoppingCartRepository"/> encapsulating <see cref="T:CMS.Ecommerce.ShoppingCartInfoProvider"/>.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartInfoProvider"/>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemInfoProvider"/>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.#ctor(CMS.Ecommerce.IShoppingCartInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.DefaultShoppingCartRepository"/> class.
            </summary>
            <param name="shoppingCartInfoProvider">Provider for <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.GetUsersCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Finds the most recent shopping cart stored for the user on the specified site.
            </summary>
            <remarks>
            Returned shopping cart is populated with cart items.
            </remarks>
            <param name="user">The user to get the shopping cart for.</param>
            <param name="site">ID or code name of the site to look for cart.</param>
            <returns>User's most recent shopping cart or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.DeleteUsersCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Deletes user's shopping cart stored in the system for given site.
            </summary>
            <param name="user">The user to delete the shopping cart for.</param>
            <param name="site">ID or code name of the site to look for cart.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.GetCart(System.Int32)">
            <summary>
            Gets the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> by its ID.
            </summary>
            <remarks>
            Returned shopping cart is populated with cart items.
            </remarks>
            <param name="cartId">ID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</param>
            <returns>Shopping cart with requested ID or null when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.GetCart(System.Guid)">
            <summary>
            Gets <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> by its GUID.
            </summary>
            <remarks>
            Returned shopping cart is populated with cart items.
            </remarks>
            <param name="cartGuid">ID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</param>
            <returns>Shopping cart with requested GUID or null when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.SetCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets (inserts or updates) the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.
            </summary>
            <param name="cart">The shopping cart to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartRepository.DeleteCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes given <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> from the system.
            </summary>
            <param name="cart">The shopping cart to be removed.</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultShoppingCartEvaluator">
            <summary>
            Default <see cref="T:CMS.Ecommerce.IShoppingCartEvaluator"/> implementation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartEvaluator.Evaluate(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Evaluates discounts and calculates the price, shipping, taxes information on the given <paramref name="cart"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultShoppingCartEvaluator.AutoAddMultiBuyItems(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Evaluates active discounts and automatically adds items which can be for free to the shopping cart.
            </summary>
            <param name="cart">Shopping cart where items will be automatically added in case they could be given for free.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartEvaluator">
            <summary>
            Interface for shopping cart evaluation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartEvaluator.Evaluate(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Evaluates discounts and calculates the price, shipping, taxes information on the given <paramref name="cart"/>.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartCouponCodeInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartFactory">
            <summary>
            Represents a factory able to create and initialize new instances of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartFactory.CreateCart(CMS.DataEngine.SiteInfoIdentifier,CMS.Membership.UserInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> assigned to specified <paramref name="user"/> on given <paramref name="site"/>.
            </summary>
            <remarks>
            Created <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> has <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartSiteID"/> initialized to value specified by <paramref name="site"/>. 
            Also <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCurrencyID"/> property is initialized to currency which can be used on <paramref name="site"/>.
            </remarks>
            <param name="site">ID or site code name where the cart is created.</param>
            <param name="user">User for who the cart is created.</param>
            <returns>New instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="site"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartItemInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingCartRepository">
            <summary>
            Interface for basic (CRUD) operations with shopping cart info.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartRepository.GetUsersCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Finds the most recent shopping cart stored for the user on the specified site.
            </summary>
            <remarks>
            Returned shopping cart is populated with cart items.
            </remarks>
            <param name="user">The user to get the shopping cart for.</param>
            <param name="site">ID or code name of the site to look for cart.</param>
            <returns>User's most recent shopping cart or <c>null</c> when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartRepository.DeleteUsersCart(CMS.Membership.UserInfo,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Deletes user's shopping cart stored in the system for given site.
            </summary>
            <param name="user">The user to delete the shopping cart for.</param>
            <param name="site">ID or code name of the site to look for cart.</param>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartRepository.GetCart(System.Int32)">
            <summary>
            Gets the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> by its ID.
            </summary>
            <remarks>
            Returned shopping cart is populated with cart items.
            </remarks>
            <param name="cartId">ID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</param>
            <returns>Shopping cart with requested ID or null when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartRepository.GetCart(System.Guid)">
            <summary>
            Gets <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> by its GUID.
            </summary>
            <remarks>
            Returned shopping cart is populated with cart items.
            </remarks>
            <param name="cartGuid">ID of the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</param>
            <returns>Shopping cart with requested GUID or null when not found.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartRepository.SetCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets (inserts or updates) the <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.
            </summary>
            <param name="cart">The shopping cart to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingCartRepository.DeleteCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes given <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> from the system.
            </summary>
            <param name="cart">The shopping cart to be removed.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo">
            <summary>
            Data container class for <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartCouponCodeInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartCouponCodeInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartCouponCodeInfo.ShoppingCartCouponCodeID">
            <summary>
            Shopping cart coupon code ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartCouponCodeInfo.ShoppingCartID">
            <summary>
            Shopping cart ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartCouponCodeInfo.CouponCode">
            <summary>
            Shopping cart coupon code code.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instances of the <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.GetShoppingCartCouponCodes">
            <summary>
            Returns a query for all the <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.GetShoppingCartCouponCodeInfo(System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.SetShoppingCartCouponCodeInfo(CMS.Ecommerce.ShoppingCartCouponCodeInfo)">
            <summary>
            Sets (updates or inserts) specified <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.DeleteShoppingCartCouponCodeInfo(CMS.Ecommerce.ShoppingCartCouponCodeInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.DeleteShoppingCartCouponCodeInfo(System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/> ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCouponCodeInfoProvider.DeleteShoppingCartCouponCodeInfo(System.Int32,System.String)">
            <summary>
            Deletes specified <see cref="T:CMS.Ecommerce.ShoppingCartCouponCodeInfo"/>.
            </summary>
            <param name="shoppingCartID">ID of shopping cart which has the coupon code applied.</param>
            <param name="couponCode">Code of coupon to be deleted.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartFactory">
            <summary>
            Static wrapper for <see cref="T:CMS.Ecommerce.IShoppingCartFactory"/> service providing <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> objects creation.
            </summary>
            <remarks>
            The new instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> is created using current implementation of <see cref="T:CMS.Ecommerce.IShoppingCartFactory"/> service.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartFactory.CreateCart(CMS.DataEngine.SiteInfoIdentifier,CMS.Membership.UserInfo)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> assigned to the user on given site.
            </summary>
            <remarks>
            Created <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> has <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartSiteID"/> initialized to value specified by <paramref name="site"/>.
            </remarks>
            <param name="site">ID or site codename where the cart is created.</param>
            <param name="user">User for who the cart is created.</param>
            <returns>New instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="site"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartInfo">
            <summary>
            ShoppingCartInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartID">
            <summary>
            Shopping cart ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartSiteID">
            <summary>
            Shopping cart site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartShippingOptionID">
            <summary>
            Shopping cart shipping option ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartPaymentOptionID">
            <summary>
            Shopping cart payment option ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCustomerID">
            <summary>
            Shopping cart customer ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartContactID">
            <summary>
            Shopping cart contact ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartBillingAddressID">
            <summary>
            Shopping cart billing address ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartShippingAddressID">
            <summary>
            Shopping cart shipping address ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCompanyAddressID">
            <summary>
            Shopping cart company address ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCurrencyID">
            <summary>
            Shopping cart currency ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartNote">
            <summary>
            Shopping cart note.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartGUID">
            <summary>
            Shopping cart GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartLastUpdate">
            <summary>
            Date and time when the shopping cart was last updated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCustomData">
            <summary>
            Shopping cart custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.User">
            <summary>
            Owner of the shopping cart. It is null if customer is anonymous or public.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.Order">
            <summary>
            Order data. Loaded when the shopping cart is created from an existing order, otherwise it is null.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.Customer">
            <summary>
            Customer information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartBillingAddress">
            <summary>
            Gets or sets the current billing address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartShippingAddress">
            <summary>
            Gets or sets the current shipping address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCompanyAddress">
            <summary>
            Gets or sets the current company address.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShippingOption">
            <summary>
            Selected shipping option. If none is selected and there is only one available, it is selected automatically.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.Currency">
            <summary>
            Selected currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.PaymentOption">
            <summary>
            Selected payment method. If none is selected and there is only one available, it is selected automatically.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartEvaluator">
            <summary>
            Price and discount evaluator.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ContentTable">
            <summary>
            Table with the shopping cart items.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TaxSummary">
            <summary>
            DataRowCollection with the summary of the taxes, used as property for MacroDataSource.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.GrandTotal">
            <summary>
            Grand total of the shopping cart in shopping cart currency remaining to pay after other payments (e.g. gift card) have been applied.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.OtherPayments">
            <summary>
            Other payments already applied on the shopping card total price.
            </summary>
            <remarks>
            Typical example of such are gift cards.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TotalPrice">
            <summary>
            Total price of the shopping cart in shopping cart currency. All discounts except for the order discount, taxes and shipping are included.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TotalItemsPrice">
            <summary>
            Total price of all shopping cart items in shopping cart currency. Items discounts are included.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.OrderDiscount">
            <summary>
            Discount which is applied to the items total price. It is in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.OrderDiscountSummary">
            <summary>
            The summary of discounts applied to the items total price. It is in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ItemsDiscount">
            <summary>
            Discount which is applied to the items price. It is in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TotalTax">
            <summary>
            Total tax which is applied to all shopping cart items altogether. It is in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TotalShipping">
            <summary>
            Total shipping in shopping cart currency. Shipping free limit is applied.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.IsRecent">
            <summary>
            Returns false when any cart calculated value is not up to date.
            This applies to prices, discounts, taxes.
            </summary>
            <remarks>
            Call method <see cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/> to calculate recent values.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate">
            <summary>
            Evaluates the price information.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.ValidateData">
            <summary>
            Ensures that shopping cart contains valid data
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.IsInfoMissing(CMS.DataEngine.BaseInfo,System.Int32)">
            <summary>
            Returns True, if the given info object is null and the given ID is equal or greater than zero, otherwise returns False.
            </summary>
            <param name="info">Info object to check</param>
            <param name="infoId">Value of the info object ID column</param>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartUserID">
            <summary>
            Gets ID of the registered user the shopping cart belongs to.
            </summary>
            <remarks>
            Returns 0 if user is not assigned or user is public.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.CartItems">
            <summary>
            List of shopping cart items.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.CouponCodes">
            <summary>
            List of shopping cart coupon codes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.CartProducts">
            <summary>
            Subset of CartItem collection. Bundle items and product options are excluded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.CartContentItems">
            <summary>
            Subset of CartItem collection. Bundle items are excluded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.IsEmpty">
            <summary>
            Indicates that shopping cart has no items (CartItems collection is empty).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TotalUnits">
            <summary>
            Sum of all shopping cart items' units, bundle items and product options are not included.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.PaymentGatewayCustomData">
            <summary>
            Payment gateway custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.TotalItemsWeight">
            <summary>
            Total weight of shopping cart items.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.SiteName">
            <summary>
            Name of the site to which the shopping cart belongs.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.IsCreatedFromOrder">
            <summary>
            Indicates if shopping cart object is created from order.
            It is set automatically when shopping cart object is created by GetShoppingCartInfoFromOrder method.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.OrderId">
            <summary>
            ID of the order to which the shopping cart belongs or from which the shopping cart was created.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.OtherPaymentsSummary">
            <summary>
            Other payments summary.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.IsShippingNeeded">
            <summary>
            Indicates if shipping is needed for a shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.PrivateDataCleared">
            <summary>
            Indicates if private data were cleared from this shopping cart object.
            It is set automatically when shopping cart private data are cleared by ClearShoppingCartPrivateData method.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartCulture">
            <summary>
            Shopping cart order culture (or culture of the order user created using the shopping cart).
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.RegisterProperties">
            <summary>
            Register the custom properties
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.#ctor">
            <summary>
            Constructor - Creates an empty ShoppingCartInfo object.
            </summary>
            <remarks>
            To create initialized ShoppingCartInfo ready for shopping use ShoppingCartFactory.CreateCart(siteId) instead.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ShoppingCartInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.CalculateRemainingAmountForFreeShipping">
            <summary>
            Returns remaining amount for free shipping.
            Method returns 0 if the cart is null or if there is no valid discount or if free shipping is already applied.
            Call this method on an evaluated cart <see cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>.
            The remaining amount is calculated from <see cref="P:CMS.Ecommerce.ShoppingCartInfo.TotalItemsPrice"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.AddCouponCode(System.String)">
            <summary>
            Applies the specified coupon code to the shopping cart and evaluates the cart.
            </summary>
            <param name="couponCode">Coupon code to apply.</param>
            <returns>True, if the <paramref name="couponCode"/> is applied. False otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="couponCode"/> is null or empty.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.RemoveCouponCode(System.String)">
            <summary>
            Removes the specified coupon code from the shopping cart and evaluates the cart.
            </summary>
            <param name="couponCode">Coupon code to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="couponCode"/> is null or empty.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.SetShoppingCartUser(System.Int32)">
            <summary>
            Sets user in shopping cart (if registered and not anonymous).
            </summary>
            <param name="customerId">ID of a customer linked with the user.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfo.SetPreferences(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Sets preferences for given customer in shopping cart
            </summary>
            <remarks>
            Evaluation is not required because the shopping cart is modified later by adding items.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartInfoProvider">
            <summary>
            Class providing ShoppingCartInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCarts">
            <summary>
            Returns the query for all shopping carts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.Get(System.Int32)">
            <summary>
            Gets an instance of info object based on its ID.
            </summary>
            <param name="id">ID of the info object to look for.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> corresponding to <paramref name="id"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetAsync(System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its ID.
            </summary>
            <param name="id">ID of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> corresponding to <paramref name="id"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfo(System.Int32)">
            <summary>
            Returns shopping cart with specified ID.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.Get(System.Guid)">
            <summary>
            Gets an instance of info object based on its GUID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> corresponding to <paramref name="guid"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetAsync(System.Guid,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its GUID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> corresponding to <paramref name="guid"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfo(System.Guid)">
            <summary>
            Returns shopping cart with specified GUID.
            </summary>
            <param name="cartGuid">Shopping cart GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.Set(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetShoppingCartInfo(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets (updates or inserts) specified shopping cart.
            </summary>
            <param name="cart">Shopping cart to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.Delete(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartInfo(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Deletes specified shopping cart.
            </summary>
            <param name="cart">Shopping cart to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartInfo(System.Int32)">
            <summary>
            Deletes shopping cart with specified ID.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCarts(System.Int32)">
            <summary>
            Returns dataset of all shopping carts for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfo(System.Int32,System.String)">
            <summary>
            Returns shopping cart of the specified user.
            </summary>
            <param name="userId">ID of the user who is the owner of the shopping cart</param>
            <param name="siteName">Name of the site to which the shopping cart belongs</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfoFromOrder(System.Int32)">
            <summary>
            Returns ShoppingCartInfo object created from the order data.
            </summary>
            <param name="orderId">ID of the order from which the shopping cart should be created</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartInfo(System.Guid)">
            <summary>
            Deletes shopping cart with specified GUID.
            </summary>
            <param name="cartGuid">Shopping cart GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartInfo(System.Int32,System.String)">
            <summary>
            Deletes shopping cart of the specified user.
            </summary>
            <param name="userId">ID of the user who is the owner of the shopping cart</param>
            <param name="siteName">Name of the site to which the shopping cart belongs</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartItems(System.Int32)">
            <summary>
            Deletes all items of the specified shopping cart.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.EmptyShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes all items from specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetOrder(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates or updates order based on the data of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart data</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when ShoppingCartCustomerID and/or ShoppingCartCurrencyID not set,
            or when strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).
            </exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetOrder(CMS.Ecommerce.ShoppingCartInfo,System.Boolean)">
            <summary>
            Creates or updates order based on the data of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="generateInvoice">Indicates if new invoice should be generated from the new order data. It is True by default.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when ShoppingCartCustomerID and/or ShoppingCartCurrencyID not set,
            or when strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).
            </exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetOrderItems(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates or updates order items based on the items of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart data</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.ValidateShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Validates shopping cart and all its items. Returns an empty collection in case validation passes.
            </summary>
            <param name="cart">Shopping cart to validate.</param>
            <returns>Returns collection of validation errors that occurred.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.EvaluateContent(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Recalculates shopping cart content table.
            </summary>
            <param name="cart">Shopping cart</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.CalculateTotalItemsWeight(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Calculates total weight of all shopping cart items.
            </summary>
            <param name="cart">Shopping cart</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Adds the product (and its product options) specified in the <paramref name="itemParams"/> to the specified <paramref name="cart"/> object.
            If such product configuration already exists in the shopping cart,
            only the <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemUnits"/> property is increased by <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity"/>.
            The added/updated shopping cart item is returned.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="itemParams">Parameters of the shopping cart item which should be used to perform the adding or updating.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cart"/> or <paramref name="itemParams"/> are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="itemParams"/> specify a non-positive <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.SKUID"/>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,System.Int32)">
            <summary>
            Returns shopping cart item from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItemId">Shopping cart item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,System.Guid)">
            <summary>
            Returns shopping cart item from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItemGuid">Shopping cart item GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.RemoveShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,System.Int32)">
            <summary>
            Removes shopping cart item and its product options from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItemId">Shopping cart item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.RemoveShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,System.Guid)">
            <summary>
            Removes shopping cart item and its product options from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItemGuid">Shopping cart item GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.RemoveShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Removes shopping cart item, related bundle items and its product options from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="item">Shopping cart item</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.AddShoppingCartItem(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Adds new initialized item to the shopping cart items collection.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="item">Shopping cart item</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetTotalUnits(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns sum of all shopping cart items' units, bundle items and product options are not included.
            </summary>
            <param name="cart">Shopping cart data</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.UpdateShoppingCartFromOrder(CMS.Ecommerce.ShoppingCartInfo,System.Int32)">
            <summary>
            Updates shopping cart with shopping cart from order. If such product configuration already exists in the shopping cart, only  its quantity is updated.
            Returns true if all ordered items were successfully added to cart.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="orderID">ID of order which should be added to shopping cart.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.CopyShoppingCartItems(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Updates destination shopping cart with source shopping cart.
            <para>If such product configuration already exists in the shopping cart, only its quantity is updated.</para>
            </summary>
            <param name="sourceCart">Original shopping cart</param>
            <param name="destinationCart">The cart where to copy items</param>
            <returns>Returns true if all ordered items were successfully added to cart.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartResolver(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns initialized shopping cart resolver.
            </summary>
            <param name="cart">Shopping cart data</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetOrderInvoice(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns the HTML code for the order invoice.
            </summary>
            <param name="cart">Shopping cart data used for generating invoice</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfoInternal(System.Int32)">
            <summary>
            Returns shopping cart with specified ID.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfoInternal(System.Guid)">
            <summary>
            Returns shopping cart with specified GUID.
            </summary>
            <param name="cartGuid">Shopping cart GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetShoppingCartInfoInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets (updates or inserts) specified shopping cart.
            </summary>
            <param name="cartObj">Shopping cart to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartInfoInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Deletes specified shopping cart.
            </summary>
            <param name="cartObj">Shopping cart to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartsInternal(System.Int32)">
            <summary>
            Returns dataset of all shopping carts for specified site matching the specified parameters.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfoInternal(System.Int32,System.String)">
            <summary>
            Returns shopping cart of the specified user.
            </summary>
            <param name="userId">ID of the user who is the owner of the shopping cart</param>
            <param name="siteName">Name of the site to which the shopping cart belongs</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartInfoFromOrderInternal(System.Int32)">
            <summary>
            Returns ShoppingCartInfo object created from the order data.
            </summary>
            <param name="orderId">ID of the order from which the shopping cart should be created</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.DeleteShoppingCartItemsInternal(System.Int32)">
            <summary>
            Deletes items of the specified shopping cart.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.EmptyShoppingCartInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Removes all items from specified shopping cart object and from the shopping cart in database.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetOrderInternal(CMS.Ecommerce.ShoppingCartInfo,System.Boolean)">
            <summary>
            Creates or updates order based on the data of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart data</param>
            <param name="generateInvoice">Indicates if new invoice should be generated from the new order data. It is True by default.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when ShoppingCartCustomerID and/or ShoppingCartCurrencyID not set,
            or when strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).
            </exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetOrderItemsInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Creates or updates order items based on the items of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart data</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.ValidateShoppingCartInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Validates shopping cart and all its items. Returns an empty collection in case validation passes.
            </summary>
            <param name="cart">Shopping cart to validate.</param>
            <returns>Returns collection of validation errors that occurred.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.EvaluateContentInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Recalculates shopping cart content table.
            </summary>
            <param name="cart">Shopping cart</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.CalculateTotalItemsWeightInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Calculates total weight of all shopping cart items.
            </summary>
            <param name="cart">Shopping cart</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.SetShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Adds the product (and its product options) specified in the <paramref name="itemParams"/> to the specified <paramref name="cart"/> object.
            If such product configuration already exists in the shopping cart,
            only the <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemUnits"/> property is increased by <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity"/>.
            The added/updated shopping cart item is returned.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="itemParams">Parameters of the shopping cart item which should be used to perform the adding or updating.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="cart"/> or <paramref name="itemParams"/> are null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="itemParams"/> specify a non-positive <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.SKUID"/>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,System.Int32)">
            <summary>
            Returns shopping cart item from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItemId">Shopping cart item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,System.Guid)">
            <summary>
            Returns shopping cart item from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItemGuid">Shopping cart item GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.RemoveShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Removes shopping cart item, related bundle items and its product options from the specified shopping cart object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="cartItem">Shopping cart item</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.AddShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Adds new initialized item to the shopping cart items collection.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="item">Shopping cart item</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.AddShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Adds new item to the shopping cart object and returns its object.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="itemParams">Parameters from which the new shopping cart item is initialized.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.UpdateShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartItemInfo,CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Updates shopping cart item in the specified shopping cart object. By default only units of the specified shopping cart item and units of its product options are updated.
            </summary>
            <param name="item">Shopping cart item to be updated.</param>
            <param name="itemParams">Parameters of the shopping cart item which should be used to perform the update.
            By default only Quantity parameter is used.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Returns specified shopping cart item from the given shopping cart object. If such item is not found, null is returned.
            By default shopping cart item is searched according to the product SKUID and SKUIDs of its product options.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="itemParams">Parameters of the shopping cart item which should be used to perform the search.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetTotalUnitsInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns sum of all shopping cart items' units, bundle items and product options are not included.
            </summary>
            <param name="cart">Shopping cart data</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.UpdateShoppingCartFromOrderInternal(CMS.Ecommerce.ShoppingCartInfo,System.Int32)">
            <summary>
            Updates shopping cart with shopping cart from order. If such product configuration already exists in the shopping cart, only  its quantity is updated.
            Returns true if all ordered items were successfully added to cart.
            </summary>
            <param name="cart">Shopping cart</param>
            <param name="orderID">ID of order which should be added to shopping cart.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.CopyShoppingCartItemsInternal(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Updates destination shopping cart with source shopping cart.
            <para>If such product configuration already exists in the shopping cart, only its quantity is updated.</para>
            </summary>
            <param name="sourceCart">Original shopping cart</param>
            <param name="destinationCart">The cart where to copy items</param>
            <returns>Returns true if all ordered items were successfully added to cart.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartResolverInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns initialized shopping cart resolver
            </summary>
            <param name="cart">Shopping cart data to be used for resolver initialization</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetOrderInvoiceInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns the HTML code for the order invoice.
            </summary>
            <param name="cart">Shopping cart data used for generating invoice</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.CalculateRemainingAmountForFreeShipping(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Calculates remaining amount for free shipping.
            </summary>
            <param name="cart">Shopping cart</param>
            <returns>
            Returns remaining amount for free shipping.
            Method returns 0 if the cart is null, without currency or if there is no valid discount or if free shipping is already applied.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetShoppingCartResolverData(CMS.Ecommerce.ShoppingCartInfo,System.String)">
            <summary>
            Gets the data for the shopping cart resolver. (selector -> data object) of the shopping cart objects.
            </summary>
            <param name="cart">Shopping cart from which the data are loaded</param>
            <param name="resolverCulture">Culture used for macro resolving</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartInfoProvider.GetRoundingService(System.Int32)">
            <summary>
            Returns rounding service based on shopping cart site identifier.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartItemInfo">
            <summary>
            Shopping cart item data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartItemInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartItemInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemID">
            <summary>
            Shopping cart item ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemGUID">
            <summary>
            Shopping cart item unique identifier. Shopping cart item means collection of the product and its selected product options.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemParentGUID">
            <summary>
            Unique identifier of the parent shopping cart item. When set current SKU is a product option, otherwise it is a product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemBundleGUID">
            <summary>
            Unique identifier of parent shopping cart item. If set, this shopping cart item is a bundle item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemCustomData">
            <summary>
            Shopping cart item custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.ShoppingCartID">
            <summary>
            Shopping cart ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.SKUID">
            <summary>
            SKU ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemUnits">
            <summary>
            Amount of the current shopping cart item in the shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemValidTo">
            <summary>
            It is set only when cart item represents e-product and when the cart item was loaded from the existing e-product order item.
            Then it is date and time until the e-product download links are valid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemAutoAddedUnits">
            <summary>
            The number of shopping cart item units added automatically to the shopping cart for free.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemText">
            <summary>
            It is set only when cart item represents text product option.
            Then it is the text defined by the customer, e.g. custom label for a T-shirt.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.OrderItem">
            <summary>
            Order item data. Loaded when the shopping cart is created from an existing order, otherwise it is null.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitDiscountSummary">
            <summary>
            Gets or sets the summary of the discounts applied on each unit of this item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitPrice">
            <summary>
            Unit price of the shopping cart item in shopping cart currency. Catalog-level discounts are reflected.
            </summary>
            <seealso cref="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitDiscountSummary"/>
            <seealso cref="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitTotalDiscount"/>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitTotalPriceIncludingOptions">
            <summary>
            Gets the total price of one unit including options.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitTotalDiscount">
            <summary>
            Unit discount applied on the shopping cart item.
            </summary>
            <remarks>
            The value is expressed in the shopping cart currency and includes catalog-level discounts (product coupons, volume and catalog discounts).
            For summary of catalog-level discounts see <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitDiscountSummary"/>.
            </remarks>
            <seealso cref="P:CMS.Ecommerce.ShoppingCartItemInfo.TotalDiscount"/>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.TotalPriceIncludingOptions">
            <summary>
            Gets the total price including options.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.TotalPrice">
            <summary>
            Total price of the shopping cart item in shopping cart currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.TotalDiscount">
            <summary>
            Total discount applied on the shopping cart item.
            </summary>
            <remarks>
            The value is expressed in the shopping cart currency and does not include catalog-level discounts (product coupons, volume and catalog discounts).
            </remarks>
            <seealso cref="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitTotalDiscount"/>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.DiscountSummary">
            <summary>
            Gets or sets the summary of the discounts applied on this item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.UnitWeight">
            <summary>
            Unit weight of the shopping cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.TotalWeight">
            <summary>
            Total weight of the shopping cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.ShoppingCart">
            <summary>
            Data of the shopping cart to which the shopping cart item belongs.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.SKU">
            <summary>
            Data of the SKU (product) which is represented by the shopping cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.ProductOptions">
            <summary>
            List with product options of the shopping cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.IsAccessoryProduct">
            <summary>
            Gets a value indicating whether is accessory product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.IsTextAttribute">
            <summary>
            Gets a value indicating whether is text attribute.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.IsAttributeOption">
            <summary>
            Gets a value indicating whether is attribute option (e.g. product color).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.IsProductOption">
            <summary>
            Indicates if shopping cart item is representing product or product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.BundleItems">
            <summary>
            List of bundle items of the shopping cart item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.IsBundleItem">
            <summary>
            Indicates if shopping cart item is representing bundle item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.ParentProduct">
            <summary>
            Shopping cart item which represents product in which the current product option is included.
            If the current item is not product option, returns null.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.VariantParent">
            <summary>
            In case the shopping cart item is a variant, returns its parent product.
            If the current item is not variant, returns null;
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemInfo.ParentBundle">
            <summary>
            Shopping cart item which represents bundle product in which the current bundle item is included.
            If the current item is not bundle item, returns null.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.#ctor">
            <summary>
            Constructor - Creates an empty ShoppingCartItemInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ShoppingCartItemInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.LoadDefaultData">
            <summary>
            Loads the default object data
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor - Creates a new ShoppingCartItemInfo object from serialized data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartItemInfoProvider">
            <summary>
            Class providing ShoppingCartItemInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItems">
            <summary>
            Returns the query for all shopping cart items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemInfo(System.Int32)">
            <summary>
            Returns shopping cart item with specified ID.
            </summary>
            <param name="itemId">Shopping cart item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemInfo(System.Guid)">
            <summary>
            Returns shopping cart item with specified GUID.
            </summary>
            <param name="itemGuid">Shopping cart item GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.Set(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.SetShoppingCartItemInfo(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Sets (updates or inserts) specified shopping cart item.
            </summary>
            <param name="itemObj">Shopping cart item to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.Delete(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.DeleteShoppingCartItemInfo(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Deletes specified shopping cart item.
            </summary>
            <param name="itemObj">Shopping cart item to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.DeleteShoppingCartItemInfo(System.Int32)">
            <summary>
            Deletes shopping cart item with specified ID.
            </summary>
            <param name="itemId">Shopping cart item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.DeleteShoppingCartItemInfo(System.Guid)">
            <summary>
            Deletes shopping cart item with specified GUID.
            </summary>
            <param name="itemGuid">Shopping cart item GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemInfo(CMS.Ecommerce.OrderItemInfo,CMS.Ecommerce.SKUInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns shopping cart item created from the order item data.
            </summary>
            <param name="item">Order item</param>      
            <param name="sku">Current data of the product (SKU) which is associated with the order item</param>        
            <param name="shoppingCart">Shopping cart that should contain the shopping cart item</param>      
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItems(System.Int32)">
            <summary>
            Returns DataSet with all shopping cart items data of the specified cart. DataSet includes both SKU data and shopping cart item data.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.LoadShoppingCartItems(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Loads shopping cart items into the specified shopping cart. 
            If shopping cart is created from an order, cart items are loaded from the corresponding order items.
            </summary>
            <param name="cart">Shopping cart</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.ValidateShoppingCartItem(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Validates cart item.
            </summary>
            <param name="item">Item to validate.</param>
            <returns>Validator containing results of the validation.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetSKUOrderUnits(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns sum of all units of the specified SKU in the order from which the shopping cart item is loaded.
            </summary>
            <param name="item">Shopping cart item which is loaded from the order (has order data).</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetSKUShoppingCartUnits(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns sum of all units of the specified SKU in the shopping cart to which the shopping cart item belongs. 
            </summary>
            <param name="item">Shopping cart item.</param>         
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemResolver(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns initialized shopping item cart resolver.
            </summary>
            <param name="item">Shopping cart item data to be used for resolver initialization</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.UpdateShoppingCartItemUnits(CMS.Ecommerce.ShoppingCartItemInfo,System.Int32)">
            <summary>
            Updates unit count of shopping cart item, related product option unit count or bundle item count is updated as well.
            </summary>
            <param name="item">Shopping cart item to updates unit count for.</param>      
            <param name="newCount">New number of cart item units.</param>  
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.CalculateUnitWeight(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Calculates the weight of one shopping cart item unit. 'SKUWeight' field value of the corresponding SKU is returned by default.
            </summary>
            <param name="item">Shopping cart item</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.CalculateTotalWeight(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Calculates the total weight of all shopping cart item units altogether.
            </summary>
            <param name="item">Shopping cart item</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemInfoInternal(System.Int32)">
            <summary>
            Returns shopping cart item with specified ID.
            </summary>
            <param name="itemId">Shopping cart item ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemInfoInternal(System.Guid)">
            <summary>
            Returns shopping cart item with specified GUID.
            </summary>
            <param name="itemGuid">Shopping cart item GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.SetShoppingCartItemInfoInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Sets (updates or inserts) specified shopping cart item.
            </summary>
            <param name="itemObj">Shopping cart item to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.DeleteShoppingCartItemInfoInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Deletes specified shopping cart item.
            </summary>
            <param name="itemObj">Shopping cart item to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.SetInfo(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemInfoInternal(CMS.Ecommerce.OrderItemInfo,CMS.Ecommerce.SKUInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns shopping cart item created from the order item data.
            </summary>
            <param name="item">Order item</param>        
            <param name="sku">Current data of the product (SKU) which is associated with the order item</param>
            <param name="shoppingCart">Shopping cart that should contain the shopping cart item</param>    
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemsInternal(System.Int32)">
            <summary>
            Returns DataSet with all shopping cart items data of the specified cart. DataSet includes both SKU data and shopping cart item data.
            </summary>
            <param name="cartId">Shopping cart ID</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.LoadItemsFromCartInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Loads shopping cart items into the specified shopping cart. 
            Shopping cart items are loaded from standard shopping cart items data.       
            </summary>
            <param name="cart">Shopping cart</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.LoadItemsFromOrderInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Loads shopping cart items into the specified shopping cart. 
            Shopping cart items are loaded from items of the order from which the shopping cart is created.        
            </summary>
            <param name="cart">Shopping cart which is created from order data</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.ValidateShoppingCartItemInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Validates cart item.
            </summary>
            <param name="item">Item to validate.</param>
            <returns>Validator containing results of the validation.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.UpdateShoppingCartItemUnitsInternal(CMS.Ecommerce.ShoppingCartItemInfo,System.Int32)">
            <summary>
            Updates unit count of shopping cart item, related product option unit count or bundle item count is updated as well.
            </summary>
            <param name="item">Shopping cart item to updates unit count for.</param>      
            <param name="newCount">New number of cart item units.</param>  
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetSKUOrderUnitsInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns sum of all units of the specified SKU in the order from which the shopping cart item is loaded.
            </summary>
            <param name="item">Shopping cart item which is loaded from the order (has order data).</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetSKUShoppingCartUnitsInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns sum of all units of the specified SKU in the shopping cart to which the shopping cart item belongs.
            </summary>
            <param name="item">Shopping cart item.</param>    
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetCartUnitsCount(CMS.Ecommerce.ShoppingCartItemInfo,System.Boolean,System.Boolean)">
            <summary>
            Gets the cart units count for specified cart item.
            </summary>
            <param name="item">The cart item.</param>
            <param name="includeVariantsOfSameParent">if set to true variants of same parent are included to result.</param>
            <param name="orderCounts">if set to true order counts are evaluating.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.GetShoppingCartItemResolverInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Returns initialized shopping item cart resolver.
            </summary>
            <param name="item">Shopping cart item data to be used for resolver initialization</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.CalculateUnitWeightInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Calculates the weight of one shopping cart item unit. 'SKUWeight' field value of the corresponding SKU is returned by default.
            </summary>
            <param name="item">Shopping cart item</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.CalculateTotalWeightInternal(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Calculates the total weight of all shopping cart item units altogether.
            </summary>
            <param name="item">Shopping cart item</param>        
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.UpdateItemCount(CMS.Ecommerce.ShoppingCartItemInfo,System.Int32,System.Boolean)">
            <summary>
            Updates number of units in shopping cart item.
            </summary>
            <param name="item">Item which units should be updated</param>
            <param name="count">Number of units</param>
            <param name="updateInDatabase">If true, item is updated in database</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemInfoProvider.InitShoppingCartItems(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sets product options of each parent cart item and puts all cart items to the proper order (parent1-parent1 children, parent2- parent2 children,...).
            </summary>
            <param name="cart">Shopping cart</param> 
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartItemParameters">
            <summary>
            Data container of the parameters which represent configuration of the shopping cart item to be added/updated in the shopping cart object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemParameters.SKUID">
            <summary>
            Product SKU ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity">
            <summary>
            Number of product units.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemParameters.Text">
            <summary>
            Product custom text defined by the customer, e.g. custom label for a T-shirt. Makes sense only for the text product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemParameters.ProductOptions">
            <summary>
            Collection of the product options.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemParameters.CustomParameters">
            <summary>
            Collection (name - value pairs) of the shopping cart item custom parameters.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemParameters.GetShoppingCartItemParameters">
            <summary>
            Returns initialized shopping cart item parameters container from the current URL parameters.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemParameters.#ctor">
            <summary>
            Constructor - creates empty shopping cart item parameters container. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemParameters.#ctor(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Constructor - creates initialized shopping cart item parameters container.
            </summary>
            <param name="item">Shopping cart item.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemParameters.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor - creates initialized shopping cart item parameters container.
            </summary>
            <param name="skuId">Product SKU ID.</param>
            <param name="quantity">Number of product units.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemParameters.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructor - creates initialized shopping cart item parameters container.
            </summary>
            <param name="skuId">Product SKU ID.</param>
            <param name="quantity">Number of product units.</param>
            <param name="options">SKU IDs of product options.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemParameters.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{CMS.Ecommerce.ShoppingCartItemParameters})">
            <summary>
            Constructor - creates initialized shopping cart item parameters container.
            </summary>
            <param name="skuId">Product SKU ID.</param>
            <param name="quantity">Number of product units.</param>
            <param name="options">List of product options parameters.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartLine">
            <summary>
            Represents one line of the shopping cart content.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartLine.#ctor(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.ShoppingCartLine"/>.
            </summary>
            <param name="item">Cart item to create the line from.</param>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUProductType">
            <summary>
            The type of the product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUSiteID">
            <summary>
            SKU site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUParentSKUID">
            <summary>
            ID of the parent SKU.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUName">
            <summary>
            Product name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUNumber">
            <summary>
            Product number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUImagePath">
            <summary>
            Product image path.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.SKUID">
            <summary>
            SKU ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.CartItemID">
            <summary>
            Shopping cart item ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.CartItemGUID">
            <summary>
            Shopping cart item GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.CartItemParentGUID">
            <summary>
            Shopping cart parent GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.Units">
            <summary>
            Quantity of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.IsProductOption">
            <summary>
            Indicates if this item represent a product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.IsAccessoryProduct">
            <summary>
            Indicates if this item represent an accessory item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.CartItemText">
            <summary>
            Text of the text product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.UnitPrice">
            <summary>
            Unit price of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.TotalPrice">
            <summary>
            Total price of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.DiscountSummary">
            <summary>
            Summary of the discounts applied on this item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.UnitTotalDiscount">
            <summary>
            Unit total discount of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.TotalDiscount">
            <summary>
            Total discount of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.UnitWeight">
            <summary>
            Unit weight of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.TotalWeight">
            <summary>
            Total weight of the item.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.ColumnNames">
            <summary>
            Item's property names.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartLine.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartLine.GetValue(System.String)">
            <summary>
            Gets the value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartLine.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartLine.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartLine.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Ecommerce.SummaryItem">
            <summary>
            Class used for displaying order summaries (discounts, taxes, other payments) in Invoice, Email template and Shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SummaryItem.Name">
            <summary>
            Summary item name used for displaying in Invoice, Email template and Shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SummaryItem.Value">
            <summary>
            Summary item value in shopping cart currency used for displaying in Invoice, Email template and Shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SummaryItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.SummaryItem"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SummaryItem.#ctor(System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.SummaryItem"/> class with the specified <paramref name="name"/> and <paramref name="value"/>.
            </summary>
            <param name="name">Name of the summary item.</param>
            <param name="value">Value of the summary item.</param>
        </member>
        <member name="P:CMS.Ecommerce.SummaryItem.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.SummaryItem.GetValue(System.String)">
            <summary>
            Gets the value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Ecommerce.SummaryItem.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="P:CMS.Ecommerce.SummaryItem.ColumnNames">
            <summary>
            DiscountSummaryItem object property names.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SummaryItem.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Ecommerce.SummaryItem.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Ecommerce.ValuesSummary">
            <summary>
            Class representing values summary (discounts, taxes, other payments) in Invoice, Email template and Shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ValuesSummary.Count">
            <summary>
            Count of the summary list.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.#ctor(System.String)">
            <summary>
            Creates a new instance de-serialized from the <paramref name="xmlSummary"/>.
            </summary>
            <param name="xmlSummary">XML summary definition</param>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.#ctor(System.Collections.Generic.IEnumerable{CMS.Ecommerce.SummaryItem})">
            <summary>
            Creates a new instance of summary with the specified <paramref name="items"/>.
            </summary>
            <param name="items"><see cref="T:CMS.Ecommerce.SummaryItem"/> items.</param>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.#ctor">
            <summary>
            Creates a new instance of summary.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.Clear">
            <summary>
            Removes all items from the summary.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.Add(CMS.Ecommerce.SummaryItem)">
            <summary>
            Adds the new item to the summary.
            </summary>
            <param name="item"><see cref="T:CMS.Ecommerce.SummaryItem"/> item.</param>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.Sum(System.String,System.Decimal)">
            <summary>
            Sums the <paramref name="value"/> with the item specified by <paramref name="name"/>. Creates a new summary item when not found.
            </summary>
            <param name="name">Name of the summary item.</param>
            <param name="value">Value of the summary item.</param>
        </member>
        <member name="M:CMS.Ecommerce.ValuesSummary.Merge(System.Collections.Generic.IEnumerable{CMS.Ecommerce.SummaryItem})">
            <summary>
            Adds the set of <paramref name="items"/> to the summary.
            </summary>
            <param name="items">Items to be summed into the summary.</param>
        </member>
        <member name="T:CMS.Ecommerce.GiftCardApplication">
            <summary>
            Represents an application of the gift card.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardApplication.GiftCard">
            <summary>
            Gift card that the used code belonged to.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardApplication.AppliedCode">
            <summary>
            Used gift card code.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardApplication.PaymentCorrectionInMainCurrency">
            <summary>
            Value of the gift card correction in main currency.
            </summary>
            <remarks>
            If correction is positive, the coupon code remaining value will decrease upon order update.
            If correction is negative, the coupon code remaining value will increase upon order update.
            </remarks>
        </member>
        <member name="P:CMS.Ecommerce.GiftCardApplication.PaymentValueInMainCurrency">
            <summary>
            Value of the other payment in main currency.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardApplication.Apply">
            <summary>
            Logs gift card usage.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GiftCardSource">
            <summary>
            Default implementation of the <see cref="T:CMS.Ecommerce.IGiftCardSource"/> providing gift card applications for other payments calculation.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardSource.#ctor(CMS.Ecommerce.ICurrencyConverterFactory,CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.IRoundingServiceFactory,CMS.Ecommerce.IGiftCardInfoProvider,CMS.Ecommerce.IGiftCardCouponCodeInfoProvider)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.GiftCardSource"/>.
            </summary>
            <param name="converterFactory">Factory for fetching currency converters by site.</param>
            <param name="siteMainCurrencySource">Main currency source.</param>
            <param name="roundingFactory"></param>
            <param name="giftCardInfoProvider">Provider for <see cref="T:CMS.Ecommerce.GiftCardInfo"/> management.</param>
            <param name="giftCardCouponCodeInfoProvider">Provider for <see cref="T:CMS.Ecommerce.GiftCardCouponCodeInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardSource.GetGiftCards(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns the gift card collection for the specified <paramref name="data"/>.
            Applied gift cards must be running, applicable for the given <see cref="P:CMS.Ecommerce.CalculationRequest.User"/> and satisfy the gift card conditions.
            Only gift cards satisfying the minimum order amount are returned.
            </summary>
            <param name="data">Calculation data.</param>
            <param name="orderAmount">Order amount which is used to filter applicable gift cards. (specified in the calculation currency)</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardSource.CombineWithCouponCodes(System.Collections.Generic.IList{CMS.Ecommerce.GiftCardInfo},CMS.Ecommerce.CalculationRequest,System.Decimal)">
            <summary>
            Combines the specified <paramref name="giftCards"/> with <see cref="P:CMS.Ecommerce.CalculationRequest.CouponCodes"/> 
            and returns gift card applications.
            </summary>
            <param name="giftCards">Gift card collection.</param>
            <param name="request">Calculation request data.</param>
            <param name="orderPrice">Current order price in calculation currency</param>
        </member>
        <member name="M:CMS.Ecommerce.GiftCardSource.GetGiftCards(System.Int32)">
            <summary>
            Returns all enabled gift cards that are valid now or will be in the future.
            </summary>
            <param name="siteID">Site ID</param>
            <remarks>
            In contrast to <see cref="M:CMS.Ecommerce.GiftCardInfoProvider.GetRunningGiftCards(CMS.DataEngine.SiteInfoIdentifier,System.DateTime)"/>, this method also returns gift cards that are not valid yet,
            but may be valid at the time the collection is retrieved from the cache.
            </remarks>
        </member>
        <member name="T:CMS.Ecommerce.IGiftCardSource">
            <summary>
            Represents a source of gift cards.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IGiftCardSource.GetGiftCards(CMS.Ecommerce.CalculatorData,System.Decimal)">
            <summary>
            Returns the gift card collection for the specified <paramref name="data"/>.
            Applied gift cards must be running, applicable for the given <see cref="P:CMS.Ecommerce.CalculationRequest.User"/> and satisfy the gift card conditions.
            Only gift cards satisfying the minimum order amount are returned.
            </summary>
            <param name="data">Calculation data</param>
            <param name="orderAmount">Order amount which is used to filter applicable gift cards. (specified in the calculation currency)</param>
        </member>
        <member name="T:CMS.Ecommerce.OtherPaymentApplication">
            <summary>
            Represents an other payment application (e.g. a gift card)
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OtherPaymentApplication.PaymentName">
            <summary>
            Other payment name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OtherPaymentApplication.PaymentValue">
            <summary>
            Value of the other payment.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.AuthorizeNetPaymentResultInfo">
            <summary>
            Authorize.NET payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AuthorizeNetPaymentResultInfo.AuthorizationCode">
            <summary>
            Authorization code.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AuthorizeNetPaymentResultInfo.#ctor">
            <summary>
            Creates base payment result info object + add Authorize.NET payment result properties.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PaymentResultInfo">
            <summary>
            Class representing payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.RootNode">
            <summary>
            Root node of the payment result xml definition.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentDate">
            <summary>
            Payment date.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentIsCompleted">
            <summary>
            Indicates whether the payment is successfully completed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentIsFailed">
            <summary>
            Indicates whether the payment failed.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentIsAuthorized">
            <summary>
            Indicates whether the payment is already authorized and capture is possible.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentDescription">
            <summary>
            Payment result description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentTransactionID">
            <summary>
            Payment result transaction ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentAuthorizationID">
            <summary>
            Gets or sets the payment authorization ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentMethodName">
            <summary>
            Payment method name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentMethodID">
            <summary>
            Payment method ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentStatusValue">
            <summary>
            Payment status value.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentStatusName">
            <summary>
            Payment status display name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultInfo.PaymentApprovalUrl">
            <summary>
            Gets or sets the url with allowing to approve payment.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.GetPaymentResultItemInfo(System.String)">
            <summary>
            Returns payment result item object.
            </summary>
            <param name="itemName">Item name</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.SetPaymentResultItemInfo(CMS.Ecommerce.PaymentResultItemInfo)">
            <summary>
            Updates/Inserts payment result item data in/into payment result.
            </summary>
            <param name="itemObj">Payment result item data object</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.GetPaymentResultXml">
            <summary>
            Returns payment result XML string.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.GetFormattedPaymentResultString">
            <summary>
            Returns formatted payment result string which is visible to the user.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.LoadPaymentResultXml(System.String)">
            <summary>
            Loads payment result xml.
            </summary>
            <param name="xml">Payment result XML to load</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.EnsurePaymentResultItemInfo(System.String,System.String)">
            <summary>
            Tries to find specified payment result item (if it is not found it is created and initialized with item name and item header) and returns it.
            </summary>
            <param name="itemName">Payment result item name to get</param>
            <param name="itemHeader">Payment result item header text which is set to the new item when requested item is not found</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.#ctor(System.String)">
            <summary>
            Creates PaymentResultInfo object.
            </summary>
            <param name="xml">Payment result in XML format</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.#ctor">
            <summary>
            Creates base PaymentResultInfo object - following fields are created in payment result XML definition, they are not initialized: date, payment method, payment is completed, payment status, transaction id, description.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor - Creates a new PaymentResultInfo object from serialized data.
            </summary>
            <param name="info">Serialization data</param>
            <param name="context">Context</param>
        </member>
        <member name="T:CMS.Ecommerce.PaymentResultItemInfo">
            <summary>
            Class representing payment result item (= one payment result xml node).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultItemInfo.Header">
            <summary>
            Payment result item header text.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultItemInfo.Name">
            <summary>
            Payment result item code name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultItemInfo.Value">
            <summary>
            Payment result item value - inner interpretation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentResultItemInfo.Text">
            <summary>
            Payment result item value text interpretation - it is visible to user.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultItemInfo.#ctor(System.Xml.XmlNode)">
            <summary>
            Creates payment result item from Xml node.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentResultItemInfo.#ctor">
            <summary>
            Creates empty payment result item.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PayPalPaymentResultInfo">
            <summary>
            PayPal payment result.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PayPalPaymentResultInfo.PaymentDetailUrl">
            <summary>
            Gets or sets the url with payment detail.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PayPalPaymentResultInfo.PaymentId">
            <summary>
            Gets or sets the payment ID.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.GetProductService">
            <summary>
            Handles ~/getproduct/ requests and redirects them to the actual product pages.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.GetProductService.RequestStatusEnum">
            <summary>
            Gets current request URL rewriting status.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.GetProductService.GetActionResultInternal">
            <summary>
            Process the request.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ISKUInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IWishlistItemInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IWishlistItemInfoProvider.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IWishlistItemInfoProvider.GetAsync(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IWishlistItemInfoProvider.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IWishlistItemInfoProvider.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.IOptionCategoryInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.OptionCategoryInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ISKUAllowedOptionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISKUAllowedOptionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding structure.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ISKUAllowedOptionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding structure.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ISKUAllowedOptionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ISKUAllowedOptionInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.ISKUOptionCategoryInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISKUOptionCategoryInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding structure.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ISKUOptionCategoryInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding structure.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ISKUOptionCategoryInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ISKUOptionCategoryInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.IVariantOptionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IVariantOptionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding structure.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IVariantOptionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding structure.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IVariantOptionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IVariantOptionInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.OptionCategoryInfo">
            <summary>
            OptionCategoryInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryDisplayName">
            <summary>
            Category Display Name (simple text or localizable string).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryName">
            <summary>
            Category Code Name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryLiveSiteDisplayName">
            <summary>
            Category Display Name for live site (simple text or localizable string).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryTitle">
            <summary>
            Gets category live site display name when specified. Returns value of CategoryDisplayName otherwise.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryFullName">
            <summary>
            Gets informative category name consisting of category display name and category live site display name when available.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryID">
            <summary>
            Category ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategorySiteID">
            <summary>
            Category site ID. Set to 0 for global category.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryIsGlobal">
            <summary>        
            Indicates if category is global or site-specific.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryType">
            <summary>
            Type of the category
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategorySelectionType">
            <summary>
            Type of the control which is used for configuring product options of the category
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryDefaultOptions">
            <summary>
            Category default options.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryDescription">
            <summary>
            Category description (simple text or localizable string).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryDefaultRecord">
            <summary>
            Default record text (simple text or localizable string).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryEnabled">
            <summary>
            Indicates whether option category is enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryGUID">
            <summary>
            CategoryOption GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryDisplayPrice">
            <summary>
            Indicates whether the option price should be displayed with option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryTextMaxLength">
            <summary>
            Maximum length of the text product option text. It has no effect, if the category has no text product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryTextMinLength">
            <summary>
            Minimum length of the text product option text. It has no effect, if the category has no text product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.OptionCategoryInfo.CategoryOptionHasDependencies">
            <summary>
            Indicates whether option category type can be changed.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfo.CheckDependencies(System.Boolean)">
            <summary>
            Checks the object dependencies. Returns true if there is at least one dependency.
            </summary>
            <param name="reportAll">If false, only required dependencies (without default value) are checked, if true required ObjectDependency constraint is ignored</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfo.#ctor">
            <summary>
            Constructor - Creates an empty OptionCategoryInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OptionCategoryInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.OptionCategoryInfoProvider">
            <summary>
            Class providing OptionCategoryInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetOptionCategories">
            <summary>
            Returns the query for all option categories.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetOptionCategoryInfo(System.Int32)">
            <summary>
            Returns option category with specified ID.
            </summary>
            <param name="categoryId">Option category ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.Get(System.String,System.Int32)">
            <summary>
            Gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.OptionCategoryInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetAsync(System.String,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its code name and site ID.
            </summary>
            <param name="name">Code name of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> corresponding to <paramref name="name"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetOptionCategoryInfo(System.String,System.String)">
            <summary>
            Returns option category with specified name.
            </summary>
            <param name="categoryName">Option category name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.SetOptionCategoryInfo(CMS.Ecommerce.OptionCategoryInfo)">
            <summary>
            Sets (updates or inserts) specified option category.
            </summary>
            <param name="categoryObj">Option category to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.DeleteOptionCategoryInfo(CMS.Ecommerce.OptionCategoryInfo)">
            <summary>
            Deletes specified option category.
            </summary>
            <param name="categoryObj">Option category to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.DeleteOptionCategoryInfo(System.Int32)">
            <summary>
            Deletes option category with specified ID.
            </summary>
            <param name="categoryId">Option category ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetOptionCategories(System.Int32)">
            <summary>
            Returns query for all option categories for specified site.
            </summary>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetProductOptionCategories(System.Int32,System.Boolean,System.Nullable{CMS.Ecommerce.OptionCategoryTypeEnum})">
            <summary>
            Returns DataSet with all option categories which are assigned to the specified product.
            </summary>
            <param name="skuId">Product ID</param>
            <param name="onlyEnabled">True - only enabled option categories are included, False - all option categories are included</param>
            <param name="categoryType">Type of option category. Allows to filter only categories of specific type.</param>        
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.IsUserAuthorizedToModifyOptionCategory(CMS.Ecommerce.OptionCategoryInfo,System.String,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to modify specific option category. 
            For global option category: 'EcommerceGlobalModify' permission is checked. 
            For site-specific manufacturer: 'EcommerceModify' OR 'ModifyProducts' permission is checked.
            </summary>
            <param name="categoryObj">Option category to be checked</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.IsUserAuthorizedToModifyOptionCategory(System.Boolean,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to modify option categories.
            </summary>
            <param name="global">For global option categories (global = True): 'EcommerceGlobalModify' permission is checked. 
            For site-specific option categories (global = False): 'EcommerceModify' OR 'ModifyProducts' permission is checked.</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetAllowedOptionsCount(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets info about how many options are available in specific option categories for given product.
            Returns dataset with one table containing OptionCategoryID, AllowAllOptions flag, SelectedOptions count and AllOptions count.
            </summary>
            <param name="skuId">Product ID to return counts for.</param>
            <param name="categoryIds">IDs of categories to get counts for. Use null for all relevant categories.</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetOptionCategoryInfoInternal(System.String,System.String)">
            <summary>
            Returns option category with specified name.
            </summary>
            <param name="categoryName">Option category name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetOptionCategoriesInternal(System.Int32)">
            <summary>
            Returns query for all option categories for specified site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetProductOptionCategoriesInternal(System.Int32,System.Boolean,System.Nullable{CMS.Ecommerce.OptionCategoryTypeEnum})">
            <summary>
            Returns DataSet with all option categories which are assigned to the specified product.
            </summary>
            <param name="skuId">Product ID</param>
            <param name="onlyEnabled">True - only enabled option categories are included, False - all option categories are included</param>
            <param name="categoryType">Type of option category. Allows to filter only categories of specific type.</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryInfoProvider.GetAllowedOptionsCountInternal(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets info about how many options are available in specific option categories for given product.
            Returns dataset with one table containing OptionCategoryID, AllowAllOptions flag, SelectedOptions count and AllOptions count.
            </summary>
            <param name="skuId">Product ID to return counts for.</param>
            <param name="categoryIds">IDs of categories to get counts for. Use null for all relevant categories.</param>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryListInfo.#ctor">
            <summary>
            Constructor - Creates an empty OptionCategoryListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new OptionCategoryListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Ecommerce.OptionCategoryListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.OptionCategorySelectionTypeEnum">
            <summary>
            Type of control to select product options.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.Dropdownlist">
            <summary>
            DropDownList.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.RadioButtonsVertical">
            <summary>
            RadioButtons in vertical layout.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.RadioButtonsHorizontal">
            <summary>
            RadioButtons in horizontal layout.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.CheckBoxesVertical">
            <summary>
            Checkboxes in vertical layout.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.CheckBoxesHorizontal">
            <summary>
            Checkboxes in horizontal layout.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.TextBox">
            <summary>
            Text box.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategorySelectionTypeEnum.TextArea">
            <summary>
            Text area.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.OptionCategoryTypeEnum">
            <summary>
            Type of the product option category.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryTypeEnum.Products">
            <summary>
            Category of this type represents specific optional accessories of the product which is selected by the customer from the predefined list of products.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryTypeEnum.Attribute">
            <summary>
            Category of this type represents specific attribute of the product which is configured by the customer from the predefined list of values, e.g. color.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.OptionCategoryTypeEnum.Text">
            <summary>
            Category of this type represents text attribute of the product which is entered by the customer, e.g.: label for the T-shirt
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ProductAttributeSet">
            <summary>
            Product attributes set with enhanced functionality
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductAttributeSet.ProductAttributes">
            <summary>
            Gets or sets the product options.
            </summary>
            <value>
            The product options.
            </value>
        </member>
        <member name="P:CMS.Ecommerce.ProductAttributeSet.ProductAttributeIDs">
            <summary>
            Gets the product option IDs.
            </summary>
            <value>
            The product option IDs.
            </value>
        </member>
        <member name="P:CMS.Ecommerce.ProductAttributeSet.GetCompareCode">
            <summary>
            Gets the unique compare code.
            </summary>
            <value>
            The compare code.
            </value>
        </member>
        <member name="P:CMS.Ecommerce.ProductAttributeSet.Item(System.Int32)">
            <summary>
            Gets the SKUInfo with the specified position.
            </summary>
            <value>
            The SKUInfo.
            </value>
            <param name="index">The position.</param>
            <returns>SKUInfo with the specified position.</returns>
        </member>
        <member name="P:CMS.Ecommerce.ProductAttributeSet.Count">
            <summary>
            Gets the count of product options in set.
            </summary>
            <value>
            The count of product options in set.
            </value>
        </member>
        <member name="P:CMS.Ecommerce.ProductAttributeSet.CategoryIDs">
            <summary>
            Gets the category IDs for specified product options.
            </summary>
            <value>
            The category IDs.
            </value>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.#ctor(CMS.Ecommerce.SKUInfo[])">
            <summary>
            Initializes a new instance of the ProductAttributeSet class.
            </summary>
            <param name="productAttributes">The product options.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the ProductAttributeSet class.
            </summary>
            <param name="productAttributeIds">The product option IDs.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the ProductAttributeSet class.
            </summary>
            <param name="productAttributeIds">The product option IDs.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.#ctor">
            <summary>
            Initializes a new instance of the ProductAttributeSet class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.Add(CMS.Ecommerce.SKUInfo)">
            <summary>
            Adds the specified attribute product option.
            </summary>
            <param name="productAttribute">The product option.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.Add(System.Int32)">
            <summary>
            Adds the specified (via ID) product option.
            </summary>
            <param name="productAttributeId">The product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.FillProductAttributes">
            <summary>
            Fills the product options.
            </summary>        
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.IsProductAttributeAttribute(CMS.Ecommerce.SKUInfo)">
            <summary>
            Determines whether is specified product option an attribute.
            </summary>
            <param name="productAttribute">The product option.</param>
            <returns>
            True if specified product option is an attribute; otherwise, false.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.Contains(CMS.Ecommerce.SKUInfo)">
            <summary>
            Determines whether this ProductAttributeSet [contains] [the specified product option].
            </summary>
            <param name="productAttribute">The product option.</param>
            <returns>
              True if this ProductAttributeSet [contains] [the specified product option]; otherwise, false.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.Contains(System.Int32)">
            <summary>
            Determines whether this ProductAttributeSet [contains] [the specified product option].
            </summary>
            <param name="productAttributeId">The product option ID.</param>        
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.Contains(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Determines whether this ProductAttributeSet [contains] [the specified product options].
            </summary>
            <param name="productAttributeIds">The product option IDs.</param>       
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductAttributeSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>        
        </member>
        <member name="T:CMS.Ecommerce.ProductVariant">
            <summary>
            Envelope form variant-type SKU object, that provides advanced methods a features.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductVariant.Existing">
            <summary>
            Gets a value indicating whether this ProductVariant is already saved (exists) in database.
            </summary>
            <value>
              True if already saved (exists) in database; otherwise, false.
            </value>
        </member>
        <member name="P:CMS.Ecommerce.ProductVariant.Variant">
            <summary>
            Gets the product variant object.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductVariant.ParentProductID">
            <summary>
            Gets the parent product ID of variant.
            </summary>        
        </member>
        <member name="P:CMS.Ecommerce.ProductVariant.ProductAttributes">
            <summary>
            Gets the product options of this variant.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductVariant.#ctor(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Initializes a new instance of the ProductVariant class.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductVariant.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProductVariant class.
            </summary>
            <param name="variantId">The variant ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductVariant.Set">
            <summary>
            Saves this instance of product variant with specified product options to database.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductVariant.CreateVariant(System.Int32)">
            <summary>
            Creates the variant.
            </summary>
            <param name="productId">The product ID.</param>
            <exception cref="T:System.Exception">[ProductVariant.CreateVariant]: Specified product (by ID) does not exist in database.</exception>
        </member>
        <member name="T:CMS.Ecommerce.SKUAllowedOptionInfo">
            <summary>
            SKUAllowedOptionInfo data container class. Represents binding between product and product option which is suitable for given product.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUAllowedOptionInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUAllowedOptionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUAllowedOptionInfo.OptionSKUID">
            <summary>
            SKUID of the product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUAllowedOptionInfo.SKUID">
            <summary>
            SKUID of the product.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfo.#ctor">
            <summary>
            Constructor - Creates an empty SKUAllowedOptionInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SKUAllowedOptionInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUAllowedOptionInfoProvider">
            <summary>
            Class providing SKUAllowedOptionInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.GetSKUOptions">
            <summary>
            Returns the query for all relationships between products and options.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding structure.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding structure.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.GetSKUOptionInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified product and option.
            </summary>
            <param name="productId">Product ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.SetSKUOptionInfo(CMS.Ecommerce.SKUAllowedOptionInfo)">
            <summary>
            Sets relationship between specified product and option.
            </summary>
            <param name="infoObj">Product-option relationship to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.DeleteSKUOptionInfo(CMS.Ecommerce.SKUAllowedOptionInfo)">
            <summary>
            Deletes relationship between specified product and option.
            </summary>
            <param name="infoObj">Product-option relationship to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.AddOptionToProduct(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified product and option.
            </summary>	
            <param name="productId">Product ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.SKUAllowedOptionInfo"/> binding.
            </summary>
            <param name="skuId">Product ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.RemoveOptionFromProduct(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified product and option.
            </summary>
            <param name="productId">Product ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUAllowedOptionInfoProvider.GetSKUOptionInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified product and option.
            </summary>
            <param name="productId">Product ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUOptionCategoryInfo">
            <summary>
            SKUOptionCategoryInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUOptionCategoryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUOptionCategoryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUOptionCategoryInfo.SKUCategoryID">
            <summary>
            Unique identifier of the relationship between SKU and product option category.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUOptionCategoryInfo.SKUID">
            <summary>
            ID of the SKU.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUOptionCategoryInfo.CategoryID">
            <summary>
            ID of the product option category.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUOptionCategoryInfo.AllowAllOptions">
            <summary>
            Indicates if all product options from the given product option category are allowed for the given SKU. By default it is True.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUOptionCategoryInfo.SKUCategoryOrder">
            <summary>
            Option category order within the parent product.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfo.#ctor">
            <summary>
            Constructor - Creates an empty SKUOptionCategoryInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SKUOptionCategoryInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUOptionCategoryInfoProvider">
            <summary>
            Class providing SKUOptionCategoryInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.GetSKUOptionCategories">
            <summary>
            Returns the query for all relationships between categories and SKUs.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.GetSKUOptionCategoryInfo(System.Int32)">
            <summary>
            Returns specified relationship between the given category and SKU.
            </summary>
            <param name="relationshipId">Category-SKU relationship ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding structure.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding structure.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.GetSKUOptionCategoryInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified category and SKU.
            </summary>
            <param name="categoryId">Category ID</param>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.SetSKUOptionCategoryInfo(CMS.Ecommerce.SKUOptionCategoryInfo)">
            <summary>
            Sets relationship between specified category and SKU.
            </summary>
            <param name="infoObj">Category-SKU relationship to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.DeleteSKUOptionCategoryInfo(CMS.Ecommerce.SKUOptionCategoryInfo)">
            <summary>
            Deletes relationship between specified category and SKU.
            </summary>
            <param name="infoObj">Category-SKU relationship to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.AddOptionCategoryToSKU(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified category and SKU.
            </summary>  
            <param name="categoryId">Category ID</param>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.SKUOptionCategoryInfo"/> binding.
            </summary>
            <param name="optionCategoryId">Option category ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.RemoveOptionCategoryFromSKU(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified category and SKU.
            </summary>
            <param name="categoryId">Category ID</param>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.GetSKUOptionCategoryInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified category and SKU.
            </summary>
            <param name="categoryId">Category ID</param>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.SetInfo(CMS.Ecommerce.SKUOptionCategoryInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.DeleteInfo(CMS.Ecommerce.SKUOptionCategoryInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUOptionCategoryInfoProvider.GetLastStatusOrderInternal(System.Int32)">
            <summary>
            Returns SKU category of last category item for skuCategoryId.
            </summary>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="T:CMS.Ecommerce.VariantHelper">
            <summary>
            Provides advanced manipulation with product variants.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.SetProductVariant(CMS.Ecommerce.ProductVariant)">
            <summary>
            Saves this instance of product variant with specified product options to database.
            </summary>
            <param name="productVariant">The product variant.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetProductVariant(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Gets SKU object of product variant from parent product and options.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <returns>SKU object.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CreateVariant(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Creates new variant object (from product and options) without saving it.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <returns>New variant object.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.AddNewCategoriesToVariantsOfProduct(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Returns existing variants of specified product with added new categories specified with default options. Categories which are already included are ignored.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">Default product options (and their categories) to add.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.DeleteVariant(CMS.Ecommerce.ProductVariant)">
            <summary>
            Deletes the specified variant.
            </summary>
            <param name="variant">The variant.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.DeleteVariant(System.Int32)">
            <summary>
            Deletes the specified variant.
            </summary>
            <param name="productVariantId">The product variant ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.DeleteAllVariants(System.Int32,System.Action{System.Int32})">
            <summary>
            Deletes all variants one by one. If delete operation is successful for processing variant removeSucceededAction with variant ID as a parameter is launched.
            </summary>
            <param name="productId">The product ID with variants to delete.</param>
            <param name="removeSucceededAction">The remove succeeded action with variant ID as a parameter.</param>        
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetVariants(System.Int32)">
            <summary>
            Gets the variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <returns>The variants of specified product.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetProductVariantsCategories(System.Int32)">
            <summary>
            Gets the product variants categories for specified product.
            </summary>
            <param name="productId">Product ID.</param>
            <returns>Ordered product option categories, that are used in specified product variants.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetProductVariantsCategoryIDs(System.Int32)">
            <summary>
            Gets the product variants category IDs for specified product.
            </summary>
            <param name="productId">Product ID.</param>
            <returns>Ordered product option category IDs, that are used in specified product variants.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetAllPossibleVariants(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets all possible variants for specified product and all combinations (including existing variants) of options from categories.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="optionCategoriesIds">The option categories ids.</param>
            <remarks>
            Please note, that some of returned objects are already stored in database (existing variants) and some not (all non-existing variants). To ensure that variant is already stored use Variant property CMS.Ecommerce.ProductVariant.Saved.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetAllPossibleVariants(System.Collections.Generic.List{CMS.Ecommerce.ProductVariant})">
            <summary>
            Gets all possible variants for specified set (Returns provided variants plus remaining combinations).
            </summary>
            <param name="productVariants">The product variants.</param>        
            <exception cref="T:System.Exception">[VariantHelper.GetAllPossibleVariants]: Specified variants must be of the same product.</exception>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetAllPossibleVariantsCount(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets number of all variants, which can be generated including existing variants of options from categories.
            </summary>
            <param name="skuId">The product ID.</param>
            <param name="categoryIds">The option categories ids.</param>
            <returns>Number of all possible variants.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckAvailableProductAttributes(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Checks if specified product options are assigned to product and are allowed in it.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <returns>True if specified product options are assigned to product and are allowed in product; false otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckVariantCategoriesConsistency(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Checks if specified product options contains all and only categories from existing variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options to check.</param>
            <returns>True if product options contains all and only categories from existing variants; False otherwise.</returns>     
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckVariantCategoriesConsistency(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if specified categories are used all and only in variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="categoryIds">The category IDs.</param>
            <returns>True if specified categories are used all and only in variants of specified product; False otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckVariantOptions(CMS.Ecommerce.ProductVariant)">
            <summary>
            Checks if the variant options in specified variant corresponds with options determined in parent product.
            </summary>
            <param name="variant">The variant.</param>
            <returns>True if variant options in specified variant corresponds with options determined in parent product and false otherwise</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.VariantExists(System.Int32,CMS.Ecommerce.ProductAttributeSet,System.Boolean)">
            <summary>
            Determines that variant for specified product with specified options exists.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <param name="onlyEnabled">If set to true [process only enabled variants].</param>
            <returns>
            True if variant for specified product with specified options exists and false otherwise.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.AreCategoriesUsedInVariants(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if the specified categories are used in variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="optionCategoryIds">The option category IDs.</param>
            <returns>
            True if the specified categories are used in variants of specified product and false otherwise.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.RegenerateSKUNameAndNumber(CMS.Ecommerce.ProductVariant)">
            <summary>
            Regenerates the SKU name and number.
            </summary>
            <param name="productVariant">The product variant.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetUsedProductOptionCategories(System.Int32,System.Nullable{CMS.Ecommerce.OptionCategoryTypeEnum})">
            <summary>
            Gets enabled product option categories included disabled option categories used in product variants.
            </summary>
            <param name="productId">ID of product from which are option categories selected</param>
            <param name="categoryType">Type of option category which are selected</param>
            <returns>
            DataSet with enabled option categories used in product plus disabled categories already used in variants.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetEnabledOptionsWithVariantOptions(System.Int32,System.Int32)">
            <summary>
            Gets options from option category assigned to sku which are enabled or already used in variants. 
            </summary>
            <param name="skuID">ID of SKU with assigned categories</param>
            <param name="categoryId">Option category from which are options selected</param>
            <returns>Data set with enabled options plus disabled options used in variants</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.SetProductVariantInternal(CMS.Ecommerce.ProductVariant)">
            <summary>
            Saves this instance of product variant with specified product options to database.
            </summary>
            <param name="productVariant">The product variant.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetProductVariantInternal(System.Int32,CMS.Ecommerce.ProductAttributeSet,System.Boolean)">
            <summary>
            Gets SKU object of product variant from parent product and options.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <param name="onlyEnabled">if set to true [process only enabled variants].</param>
            <returns>SKU object.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetVariantsInternal(System.Int32)">
            <summary>
            Gets the variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <returns>The variants of specified product.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetProductVariantsCategoriesInternal(System.Int32)">
            <summary>
            Gets the product variants categories in the specified order for the given product.
            </summary>
            <param name="productId">Product ID.</param>
            <returns>Ordered product option categories, that are used in specified product variants.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CreateVariantInternal(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Creates new variant object (from product and options) without saving it.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <returns>New variant object.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.DeleteVariantInternal(System.Int32)">
            <summary>
            Deletes the specified variant.
            </summary>
            <param name="productVariantId">The product variant ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckAvailableProductAttributesInternal(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Checks if specified product options are assigned to product and are allowed in it.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <returns>True if specified product options are assigned to product and are allowed in product; false otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckVariantCategoriesConsistencyInternal(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Checks if specified product options contains all and only categories from existing variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options to check.</param>
            <returns>True if product options contains all and only categories from existing variants; False otherwise.</returns>       
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckVariantCategoriesConsistencyInternal(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if specified categories are used all and only in variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="categoryIds">The category IDs.</param>
            <returns>True if specified categories are used all and only in variants of specified product; False otherwise.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.CheckVariantOptionsInternal(CMS.Ecommerce.ProductVariant)">
            <summary>
            Checks if the variant options in specified variant corresponds with options determined in parent product.
            </summary>
            <param name="variant">The variant.</param>
            <returns>True if variant options in specified variant corresponds with options determined in parent product and false otherwise</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.VariantExistsInternal(System.Int32,CMS.Ecommerce.ProductAttributeSet,System.Boolean)">
            <summary>
            Determines that variant for specified product with specified options exists.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">The product options.</param>
            <param name="onlyEnabled">if set to true [process only enabled variants].</param>
            <returns>
            True if variant for specified product with specified options exists and false otherwise.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.AddNewCategoriesToVariantsOfProductInternal(System.Int32,CMS.Ecommerce.ProductAttributeSet)">
            <summary>
            Returns existing variants of specified product with added new categories specified with default options. Categories which are already included are ignored.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="productAttributes">Default product options (and their categories) to add.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.DeleteAllVariantsInternal(System.Int32,System.Action{System.Int32})">
            <summary>
            Deletes all variants one by one. If delete operation is successful for processing variant removeSucceededAction with variant ID as a parameter is launched.
            </summary>
            <param name="productId">The product ID with variants to delete.</param>
            <param name="removeSucceededAction">The remove succeeded action with variant ID as a parameter.</param>        
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetAllPossibleVariantsInternal(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets all possible variants for specified product and all combinations (including existing variants) of options from categories.
            </summary>
            <remarks> 
            Please note, that some of returned objects are already stored in database (existing variants) and some not (all non-existing variants). To ensure that variant is already stored use Variant property CMS.Ecommerce.ProductVariant.Saved.
            </remarks> 
            <param name="productId">The product ID.</param>
            <param name="optionCategoriesIds">The option categories IDs</param>        
            <returns>All possible variants for specified product and all combinations of options from categories</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetAllPossibleVariantsCountInternal(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets number of all variants, which can be generated including existing variants of options from categories.
            </summary>
            <param name="skuId">The product ID.</param>
            <param name="categoryIds">The option categories ids.</param>
            <returns>Number of all possible variants.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GenerateRemainingVariants(System.Int32,System.Collections.Generic.List{CMS.Ecommerce.ProductVariant},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns list of product variants with newly generated remaining combinations for specified product but with specified variants (listOfVariants) that doesn't need to be saved yet. 
            </summary>
            <param name="productId">The product id.</param>
            <param name="listOfVariants">The list of variants that are already created, but doesn't need to be saved yet.</param>
            <param name="optionCategoryIds">The option category ids. Must correspond with listOfVariants if specified.</param>         
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetAllPossibleVariantsInternal(System.Collections.Generic.List{CMS.Ecommerce.ProductVariant})">
            <summary>
            Gets all possible variants for specified set (Returns provided variants plus remaining combinations).
            </summary>
            <param name="productVariants">The product variants.</param>        
            <exception cref="T:System.Exception">[VariantHelper.GetAllPossibleVariants]: Specified variants must be of the same product.</exception>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.AreCategoriesUsedInVariantsInternal(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Checks if the specified categories are used in variants of specified product.
            </summary>
            <param name="productId">The product ID.</param>
            <param name="optionCategoryIds">The option category IDs.</param>
            <returns>
            True if the specified categories are used in variants of specified product and false otherwise.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.RegenerateSKUNameAndNumberInternal(CMS.Ecommerce.ProductVariant)">
            <summary>
            Regenerates the SKU name and number.
            </summary>
            <param name="productVariant">The product variant.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetUsedProductOptionCategoriesInternal(System.Int32,System.Nullable{CMS.Ecommerce.OptionCategoryTypeEnum})">
            <summary>
            Gets enabled product option categories included disabled option categories used in product variants.
            </summary>
            <param name="productId">ID of product from which are option categories selected</param>
            <param name="categoryType">Type of option category which are selected</param>
            <returns>
            DataSet with enabled option categories used in product included disabled categories already used in variants.
            </returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.GetEnabledOptionsWithVariantOptionsInternal(System.Int32,System.Int32)">
            <summary>
            Gets options from option category assigned to sku which are enabled or already used in variants. 
            </summary>
            <param name="skuID">ID of SKU with assigned categories</param>
            <param name="categoryId">Option category from which are options selected</param>
            <returns>Data set with enabled options plus disabled options used in variants</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.Cartesian(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Cartesian product of two lists.
            </summary>
            <param name="first">The first list.</param>
            <param name="second">The second list.</param>      
        </member>
        <member name="M:CMS.Ecommerce.VariantHelper.ScrambledEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares two scrambled IEnumerables.
            </summary>        
            <param name="list1">The list1.</param>
            <param name="list2">The list2.</param>        
        </member>
        <member name="T:CMS.Ecommerce.VariantOptionInfo">
            <summary>
            VariantOptionInfo data container class. Represents binding between variant of product and product option which the respective variant contains.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VariantOptionInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VariantOptionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VariantOptionInfo.VariantSKUID">
            <summary>
            SKUID of the variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.VariantOptionInfo.OptionSKUID">
            <summary>
            SKUID of the product option.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VariantOptionInfo.NewOption">
            <summary>
            Constant for newly added option in variant.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VariantOptionInfo.ExistingSelectedOption">
            <summary>
            Constant for selected and existing option in variant.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.VariantOptionInfo.ExistingUnselectedOption">
            <summary>
            Constant for unselected option in variant.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfo.#ctor">
            <summary>
            Constructor - Creates an empty VariantOptionInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new VariantOptionInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.VariantOptionInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.GetVariantOptions">
            <summary>
            Returns the query for all relationships between product variants and options.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding structure.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding structure.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.GetVariantOptionInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified product variant and option.
            </summary>
            <param name="variantId">Product variant ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.SetVariantOptionInfo(CMS.Ecommerce.VariantOptionInfo)">
            <summary>
            Sets relationship between specified product variant and option.
            </summary>
            <param name="infoObj">Product-option relationship to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.DeleteVariantOptionInfo(CMS.Ecommerce.VariantOptionInfo)">
            <summary>
            Deletes relationship between specified product variant and option.
            </summary>
            <param name="infoObj">Product-option relationship to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.AddOptionToVariant(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified product variant and option.
            </summary>	
            <param name="variantId">Product variant ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.VariantOptionInfo"/> binding.
            </summary>
            <param name="skuVariantId">Product variant ID.</param>
            <param name="skuOptionId">Product option ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.RemoveOptionFromVariant(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified product variant and option.
            </summary>
            <param name="variantId">Product variant ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="M:CMS.Ecommerce.VariantOptionInfoProvider.GetVariantOptionInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified product variant and option.
            </summary>
            <param name="variantId">Product variant ID (SKUID).</param>
            <param name="optionId">Product option ID (SKUID).</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductHelper">
            <summary>
            Provides advanced manipulation with products and product options.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.AllowAllOptions(System.Int32,System.Int32)">
            <summary>
            Makes all options from option category specified by optionCategoryId parameter allowed 
            for product given by skuId parameter.
            </summary>
            <param name="skuId">ID of the product to which options are to be allowed.</param>
            <param name="optionCategoryId">ID of the product option category which options are to be allowed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.AllowOptions(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Allows product options from option category to product. 
            Individual options are checked whether they belong to given category.
            </summary>
            <param name="skuId">ID of the product to allow options for.</param>
            <param name="optionCategoryId">ID of the option category to allow options from. Set to 0 to skip options checking.</param>
            <param name="optionIds">SKUIDs of product options from option category to be allowed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.RemoveOptions(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Remove product options from option category from product. 
            Individual options are checked whether they belong to given category.
            </summary>
            <param name="skuId">ID of the product to remove options for.</param>
            <param name="optionCategoryId">ID of the option category to remove options from. Set to 0 to skip options checking.</param>
            <param name="optionIds">SKUIDs of product options from option category to be removed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.RemoveOptionCategory(System.Int32,System.Int32)">
            <summary>
            Removes option category from product. Allowed options are removed too.
            </summary>
            <param name="skuId">ID of the product to remove option category from.</param>
            <param name="optionCategoryId">ID of the option category to be removed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.IsOptionAllowed(System.Int32,System.Int32)">
            <summary>
            Returns true if option specified by optionId is allowed for given product.
            </summary>
            <param name="productId">SKUID of product to check option for.</param>
            <param name="optionId">SKUID of option to check.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.AllowAllOptionsInternal(System.Int32,System.Int32)">
            <summary>
            Makes all options from option category specified by optionCategoryId parameter allowed 
            for product given by skuId parameter.
            </summary>
            <param name="skuId">ID of the product to which options are to be allowed.</param>
            <param name="optionCategoryId">ID of the product option category which options are to be allowed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.AllowOptionsInternal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Allows product options from option category to product. 
            Individual options are checked whether they belong to given category.
            </summary>
            <param name="skuId">ID of the product to allow options for.</param>
            <param name="optionCategoryId">ID of the option category to allow options from.</param>
            <param name="optionIds">SKUIDs of product options from option category to be allowed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.RemoveOptionsInternal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Remove product options from option category from product. 
            Individual options are checked whether they belong to given category.
            </summary>
            <param name="skuId">ID of the product to allow options for.</param>
            <param name="optionCategoryId">ID of the option category to allow options from.</param>
            <param name="optionIds">SKUIDs of product options from option category to be allowed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.RemoveAllowedOptionsInternal(System.Int32,System.Int32)">
            <summary>
            Removes all allowed options from given option category from given product.
            </summary>
            <param name="skuId">ID of the product to remove options from.</param>
            <param name="optionCategoryId">ID of the option category which options are to be removed from product.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.RemoveOptionCategoryInternal(System.Int32,System.Int32)">
            <summary>
            Removes option category from product. Allowed options are removed too.
            </summary>
            <param name="skuId">ID of the product to remove option category from.</param>
            <param name="optionCategoryId">ID of the option category to be removed.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductHelper.IsOptionAllowedInternal(System.Int32,System.Int32)">
            <summary>
            Returns true if option specified by optionId is allowed for given product.
            </summary>
            <param name="productId">SKUID of product to check option for.</param>
            <param name="optionId">SKUID of option to check.</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductListInfo">
            <summary>
            ProductListInfo virtual object.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ProductListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ProductListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductListInfo.#ctor">
            <summary>
            Constructor - Creates an empty ProductListInfo object.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IProductSectionProvider">
            <summary>
            Describes product section retrieving functionality based on product page hierarchy.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IProductSectionProvider.GetSections(System.Int32)">
            <summary>
            Returns product sections for combination of product and site.
            </summary>
            <param name="productID">Product identifier</param>
        </member>
        <member name="T:CMS.Ecommerce.ProductSectionProvider">
            <summary>
            Provides product section retrieving functionality based on product page hierarchy.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductSectionProvider.#ctor(CMS.Base.ISiteService,CMS.Ecommerce.ISettingServiceFactory,CMS.Ecommerce.ISKUInfoProvider)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.ProductSectionProvider"/>
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductSectionProvider.GetSections(System.Int32)">
            <summary>
            Returns product sections for combination of product and site.
            </summary>
            <param name="productID">Product identifier</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductSectionProvider.GetAllProductSections(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Returns NodeAliasPaths of all product sections, where the selected documents belong.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductSectionProvider.GetAllProductSectionsForPath(System.String,System.String)">
            <summary>
            Returns NodeAliasPath of each product section till the product section root for the selected NodeAliasPath. 
            Example: for path "/a/b/c/d", startingPath "/a/b", result => { "/a/b/c/d", "/a/b/c", "/a/b"}
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CatalogPriceCalculator">
            <summary>
            Represents a calculator of product catalog prices.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CatalogPriceCalculator.#ctor(CMS.Ecommerce.IProductPricingService,CMS.Ecommerce.ICatalogTaxCalculator,CMS.Ecommerce.ISKUPriceSourceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CatalogPriceCalculator"/> class with the specified product pricing service.
            </summary>
            <param name="pricingService">A product pricing service.</param>
            <param name="taxCalculator">A catalog tax calculator.</param>
            <param name="skuPriceFactory">Site specific price source factory.</param>
        </member>
        <member name="M:CMS.Ecommerce.CatalogPriceCalculator.GetPrices(CMS.Ecommerce.SKUInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.SKUInfo},CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns product prices for the specified product or variant.
            </summary>
            <param name="sku">A product or a product variant.</param>
            <param name="options">Product options of all types (accessory, attribute, text).</param>
            <param name="cart">A shopping cart providing context of calculation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sku"/> or <paramref name="cart"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CatalogPriceCalculator.GetAdjustment(CMS.Ecommerce.SKUInfo,CMS.Ecommerce.SKUInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns a price adjustment corresponding to <paramref name="option"/> when bought with a <paramref name="parent"/>.
            </summary>
            <param name="option">A product option.</param>
            <param name="parent">A product or a product variant.</param>
            <param name="cart">A shopping cart providing context of calculation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="option"/>, <paramref name="parent"/> or <paramref name="cart"/> is <c>null</c>.</exception>
        </member>
        <member name="T:CMS.Ecommerce.CatalogPriceCalculatorFactory">
            <summary>
            Represents a factory creating site specific calculators of product catalog prices.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CatalogPriceCalculatorFactory.#ctor(CMS.Ecommerce.IProductPricingService,CMS.Ecommerce.ICatalogTaxCalculatorFactory,CMS.Ecommerce.ISKUPriceSourceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CatalogPriceCalculatorFactory"/> class 
            with the specified pricing service and tax calculator factory.
            </summary>
            <param name="pricingService">A pricing service.</param>
            <param name="taxCalculatorFactory">A factory supplying tax calculators.</param>
            <param name="skuPriceFactory">Site specific price source factory.</param>
        </member>
        <member name="M:CMS.Ecommerce.CatalogPriceCalculatorFactory.GetCalculator(System.Int32)">
            <summary>
            Returns a catalog price calculator usable on the specified site.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="T:CMS.Ecommerce.CatalogTaxCalculator">
            <summary>
            Represents a calculator of product taxes.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CatalogTaxCalculator.IsTaxIncludedInPrice">
            <summary>
            Gets whether product price already include tax.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CatalogTaxCalculator.#ctor(CMS.Ecommerce.ITaxEstimationService,CMS.Ecommerce.ITaxClassService,CMS.Ecommerce.ITaxAddressService,CMS.Ecommerce.ISettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CatalogTaxCalculator"/> class with the specified tax estimator, tax class service, and address service.
            </summary>
            <param name="estimator">A tax estimation service.</param>
            <param name="taxClassService">A tax class service.</param>
            <param name="addressService">A tax address service.</param>
            <param name="settingService">A setting key service.</param>
        </member>
        <member name="M:CMS.Ecommerce.CatalogTaxCalculator.ApplyTax(CMS.Ecommerce.SKUInfo,System.Decimal,CMS.Ecommerce.TaxCalculationParameters,System.Decimal@)">
            <summary>
            Applies a tax on the specified <paramref name="price"/> using the <paramref name="parameters"/>.
            Applied tax value is returned in the <paramref name="tax"/> parameter.
            </summary>
            <param name="sku">An SKU object.</param>
            <param name="price">A taxed price.</param>
            <param name="parameters">A parameters of calculation.</param>
            <param name="tax">A resulting tax.</param>
            <returns>A price with the tax reflected.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CatalogTaxCalculatorFactory">
            <summary>
            Represents a factory creating tax calculators used in a product catalog.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CatalogTaxCalculatorFactory.#ctor(CMS.Ecommerce.ITaxEstimationService,CMS.Ecommerce.ITaxClassService,CMS.Ecommerce.ITaxAddressServiceFactory,CMS.Ecommerce.ISettingServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CatalogTaxCalculatorFactory"/> class 
            with the specified tax estimation service, tax class service, tax address service factory and setting service factory.
            </summary>
            <param name="estimator">A tax estimation service.</param>
            <param name="taxClassService">A tax class service.</param>
            <param name="addressServiceFactory">A factory supplying tax address services.</param>
            <param name="settingServiceFactory">Factory used to get instances of setting services.</param>
        </member>
        <member name="M:CMS.Ecommerce.CatalogTaxCalculatorFactory.GetCalculator(System.Int32)">
            <summary>
            Returns a catalog tax calculator usable on the site specified by <paramref name="siteId"/>.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICatalogPriceCalculator">
            <summary>
            Represents a calculator of product catalog prices.
            </summary>
            <remarks>
            An implementation of this interface is used to obtain product prices in product catalogs and product details.
            </remarks>
            <seealso cref="T:CMS.Ecommerce.ICatalogPriceCalculatorFactory"/>
        </member>
        <member name="M:CMS.Ecommerce.ICatalogPriceCalculator.GetPrices(CMS.Ecommerce.SKUInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.SKUInfo},CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns product prices for the specified product or variant.
            </summary>
            <param name="sku">A product or a product variant.</param>
            <param name="options">Product options of all types (accessory, attribute, text). Use <c>null</c> to get prices without options.</param>
            <param name="cart">A shopping cart providing context of calculation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sku"/> or <paramref name="cart"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ICatalogPriceCalculator.GetAdjustment(CMS.Ecommerce.SKUInfo,CMS.Ecommerce.SKUInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Returns a price adjustment corresponding to <paramref name="option"/> when bought with a <paramref name="parent"/>.
            </summary>
            <param name="option">A product option.</param>
            <param name="parent">A product or a product variant.</param>
            <param name="cart">A shopping cart providing context of calculation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="option"/>, <paramref name="parent"/> or <paramref name="cart"/> is <c>null</c>.</exception>
        </member>
        <member name="T:CMS.Ecommerce.ICatalogPriceCalculatorFactory">
            <summary>
            Represents a factory creating site specific calculators of product catalog prices.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICatalogPriceCalculatorFactory.GetCalculator(System.Int32)">
            <summary>
            Returns a catalog price calculator usable on the specified site.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICatalogTaxCalculator">
            <summary>
            Represents a calculator of product taxes.
            </summary>
            <remarks>
            An implementation of this interface is used to obtain product taxes in product catalogs and product details.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ICatalogTaxCalculator.ApplyTax(CMS.Ecommerce.SKUInfo,System.Decimal,CMS.Ecommerce.TaxCalculationParameters,System.Decimal@)">
            <summary>
            Applies a tax on the specified <paramref name="price"/> using the <paramref name="parameters"/>.
            Applied tax value is returned in the <paramref name="tax"/> parameter.
            </summary>
            <param name="sku">An SKU object.</param>
            <param name="price">A taxed price.</param>
            <param name="parameters">A parameters of calculation.</param>
            <param name="tax">A tax</param>
            <returns>A price with the tax reflected.</returns>
        </member>
        <member name="T:CMS.Ecommerce.ICatalogTaxCalculatorFactory">
            <summary>
            Represents a factory creating tax calculators used in a product catalog.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICatalogTaxCalculatorFactory.GetCalculator(System.Int32)">
            <summary>
            Returns a catalog tax calculator usable on the specified site.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="T:CMS.Ecommerce.IProductPricingService">
            <summary>
            Service providing product prices retrieval.
            </summary>
            <remarks>
            Prices are calculated using the <see cref="T:CMS.Ecommerce.PriceParameters"/> parameters.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.IProductPricingService.GetPrices(CMS.Ecommerce.SKUInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.SKUInfo},CMS.Ecommerce.PriceParameters)">
            <summary>
            Calculates the price of the given <paramref name="sku"/> with the specified product <paramref name="options"/> configuration.
            Returned prices are in the specified <see cref="P:CMS.Ecommerce.PriceParameters.Currency"/>.
            </summary>
            <remarks>
            <see cref="P:CMS.Ecommerce.ProductPrices.StandardPrice"/> represents base price including <paramref name="options"/> configuration.
            <see cref="P:CMS.Ecommerce.ProductPrices.Price"/> represents final price with applied discounts.
            <see cref="P:CMS.Ecommerce.ProductPrices.AppliedDiscounts"/> collection contains applied discounts with respective discount values.
            </remarks>
            <param name="sku">Main product, accessory product or product variant.</param>
            <param name="options">Attribute and text product options configuration.</param>
            <param name="priceParams"><see cref="T:CMS.Ecommerce.PriceParameters"/> parameters of the current calculation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sku"/> or <paramref name="priceParams"/> is <c>null</c>.</exception>
            <returns>Instance of <see cref="T:CMS.Ecommerce.ProductPrices"/> with calculation summary.</returns>
        </member>
        <member name="T:CMS.Ecommerce.ISKUPriceSource">
            <summary>
            Defines the members for a source of SKU price.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISKUPriceSource.GetPrice(CMS.Ecommerce.SKUInfo,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns a rounded price of the <paramref name="sku"/> in the specified <paramref name="currency"/>.
            </summary>
            <param name="sku">An SKU object.</param>
            <param name="currency">A currency.</param>
        </member>
        <member name="T:CMS.Ecommerce.ISKUPriceSourceFactory">
            <summary>
            Defines the members for a factory creating creating site specific price sources.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISKUPriceSourceFactory.GetSKUPriceSource(System.Int32)">
            <summary>
            Returns a source of SKU prices usable on the site specified by <paramref name="siteId"/>.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="M:CMS.Ecommerce.ISKUPriceSourceFactory.GetSKUListPriceSource(System.Int32)">
            <summary>
            Returns a source of SKU list prices usable on the site specified by <paramref name="siteId"/>.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="T:CMS.Ecommerce.ISKUUrlService">
            <summary>
            Defines methods to retrieve absolute live site URL of a product.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISKUUrlService.GetSKUUrl(CMS.Ecommerce.SKUInfo,System.String)">
            <summary>
            Returns absolute live site URL of a product. If <paramref name="sku"/> represents product variant, returns URL to the main product.
            </summary>
            <param name="sku">SKU</param>
            <param name="cultureCode">Culture code.</param>
            <remarks>
            Does not support global or standalone SKUs. 
            When <paramref name="sku"/> page is not translated to the specified <paramref name="cultureCode"/>, returns product URL in different culture, where the translation exists (site default culture is prioritized).
            </remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="sku"/> or <paramref name="cultureCode"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="sku"/> is global or standalone, when the product is not persisted in database, when product site is incorrect, or when the specified <paramref name="cultureCode"/> is not allowed on site.</exception>
        </member>
        <member name="T:CMS.Ecommerce.PriceParameters">
            <summary>
            Parameters used in the product price calculation.
            <seealso cref="T:CMS.Ecommerce.IProductPricingService"/>
            <seealso cref="T:CMS.Ecommerce.ProductPricingService"/>
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PriceParameters.SiteID">
            <summary>
            Site on which prices are calculated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PriceParameters.Currency">
            <summary>
            Currency of the calculation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PriceParameters.User">
            <summary>
            User for whom the prices are calculated.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PriceParameters.Customer">
            <summary>
            Customer who is buying goods or services.
            <remarks>
            Can be used in custom code to customize the price and discount calculation.
            </remarks>
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PriceParameters.Quantity">
            <summary>
            Product quantity - used to identify the volume discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PriceParameters.CalculationDate">
            <summary>
            Date and time when catalog discounts are to be valid.
            <remarks>
            For most price calculations, the value is equal to the current time. 
            When calculating prices for existing orders, the values is equal to the date and time when the order was created.
            </remarks>
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ProductCatalogPrices">
            <summary>
            Container for product catalog prices (i.e. final prices shown to the customer).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductCatalogPrices.Currency">
            <summary>
            Price currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductCatalogPrices.StandardPrice">
            <summary>
            Gets or sets the standard product catalog price. Does not contain any discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductCatalogPrices.Price">
            <summary>
            Gets or sets the product catalog price. All the discounts mentioned in the <see cref="P:CMS.Ecommerce.ProductCatalogPrices.Discounts"/> property are included.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductCatalogPrices.Tax">
            <summary>
            Gets or sets the tax calculated from the <see cref="P:CMS.Ecommerce.ProductCatalogPrices.Price"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductCatalogPrices.Discounts">
            <summary>
            Summary of catalog-level discounts included in the <see cref="P:CMS.Ecommerce.ProductCatalogPrices.Price"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductCatalogPrices.ListPrice">
            <summary>
            List price.
            </summary>
            <seealso cref="P:CMS.Ecommerce.SKUInfo.SKURetailPrice"/>
        </member>
        <member name="M:CMS.Ecommerce.ProductCatalogPrices.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Decimal,CMS.Ecommerce.CurrencyInfo,CMS.Ecommerce.ValuesSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ProductCatalogPrices"/> class with the specified <paramref name="price"/>, 
            <paramref name="standardPrice"/>, <paramref name="tax"/>, <paramref name="listPrice"/>, <paramref name="currency"/>, and <paramref name="discounts"/>.
            </summary>
            <param name="price">Product price.</param>
            <param name="standardPrice">Standard product price.</param>
            <param name="discounts">Summary of the discounts 'explaining' the difference between <paramref name="price"/> and <paramref name="standardPrice"/>.</param>
            <param name="currency">Price currency.</param>
            <param name="tax">Tax calculated from price.</param>
            <param name="listPrice">List price.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="currency"/></exception>
        </member>
        <member name="T:CMS.Ecommerce.ProductPrices">
            <summary>
            Container for product prices and applied discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductPrices.Currency">
            <summary>
            Price currency.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductPrices.StandardPrice">
            <summary>
            Standard product price. Price does not contain any discounts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductPrices.Price">
            <summary>
            Calculated product price. All discounts are included.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ProductPrices.AppliedDiscounts">
            <summary>
            Applied discounts summary. Sum of the discount is already applied in the <see cref="P:CMS.Ecommerce.ProductPrices.Price"/> property.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ProductPrices.#ctor(System.Decimal,System.Decimal,CMS.Ecommerce.CurrencyInfo,CMS.Ecommerce.ValuesSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ProductPrices"/> class with the specified <paramref name="price"/>, 
            <paramref name="standardPrice"/>, <paramref name="currency"/> and <paramref name="discounts"/>.
            </summary>
            <param name="price">Product price.</param>
            <param name="standardPrice">Standard product price.</param>
            <param name="discounts">Summary of the discounts 'explaining' the difference between <paramref name="price"/> and <paramref name="standardPrice"/>.</param>
            <param name="currency">Price currency.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="currency"/></exception>
        </member>
        <member name="T:CMS.Ecommerce.ProductPricingService">
            <summary>
            Service providing product prices retrieval.
            </summary>
            <remarks>
            Prices are calculated using the <see cref="T:CMS.Ecommerce.PriceParameters"/> parameters.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ProductPricingService.#ctor(CMS.Ecommerce.ISKUPriceSourceFactory,CMS.Ecommerce.IProductDiscountService)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Ecommerce.ProductPricingService"/>.
            </summary>
            <param name="priceSourceFactory">A factory creating SKU price sources for site.</param>
            <param name="productDiscountService">A <see cref="T:CMS.Ecommerce.IProductDiscountService"/> service for discounts calculation.</param>
        </member>
        <member name="M:CMS.Ecommerce.ProductPricingService.GetPrices(CMS.Ecommerce.SKUInfo,System.Collections.Generic.IEnumerable{CMS.Ecommerce.SKUInfo},CMS.Ecommerce.PriceParameters)">
            <summary>
            Calculates the price of the given <paramref name="sku"/> with the specified product <paramref name="options"/> configuration.
            Returned prices are in the specified <see cref="P:CMS.Ecommerce.PriceParameters.Currency"/>.
            </summary>
            <remarks>
            <see cref="P:CMS.Ecommerce.ProductPrices.StandardPrice"/> represents base price including <paramref name="options"/> configuration.
            <see cref="P:CMS.Ecommerce.ProductPrices.Price"/> represents final price with applied discounts.
            <see cref="P:CMS.Ecommerce.ProductPrices.AppliedDiscounts"/> collection contains applied discounts with respective discount values.
            </remarks>
            <param name="sku">Main product, accessory product or product variant.</param>
            <param name="options">Attribute and text product options configuration.</param>
            <param name="priceParams"><see cref="T:CMS.Ecommerce.PriceParameters"/> parameters of the current calculation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sku"/> or <paramref name="priceParams"/> is <c>null</c>.</exception>
            <returns>Instance of <see cref="T:CMS.Ecommerce.ProductPrices"/> with calculation summary.</returns>
        </member>
        <member name="T:CMS.Ecommerce.SKUPriceSource">
            <summary>
            Represents a source of sku price in different currencies.
            </summary>
            <remarks>
            This is the default implementation of <see cref="T:CMS.Ecommerce.ISKUPriceSource"/> using currency conversion.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.SKUPriceSource.#ctor(CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.ICurrencyConverter,CMS.Ecommerce.IRoundingService,System.Func{CMS.Ecommerce.SKUInfo,System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.SKUPriceSource"/> class with the specified main currency source and currency converter.
            </summary>
            <param name="mainCurrencySource">A source of main currencies.</param>
            <param name="currencyConverter">A currency converter.</param>
            <param name="roundingService">Service for price rounding.</param>
            <param name="priceExtractor">A function extracting a price from the sku. The <see cref="P:CMS.Ecommerce.SKUInfo.SKUPrice"/> is used when extractor is <c>null</c>.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUPriceSource.GetPrice(CMS.Ecommerce.SKUInfo,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns a rounded price of the <paramref name="sku"/> in the specified <paramref name="currency"/>.
            </summary>
            <param name="sku">An SKU object.</param>
            <param name="currency">A currency.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="sku"/> or <paramref name="currency"/> is <c>null</c>. </exception>
        </member>
        <member name="T:CMS.Ecommerce.SKUPriceSourceFactory">
            <summary>
            Represents a factory creating price sources supplying prices of SKUs.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ISKUPriceSource"/>
        </member>
        <member name="M:CMS.Ecommerce.SKUPriceSourceFactory.#ctor(CMS.Ecommerce.ISiteMainCurrencySource,CMS.Ecommerce.ICurrencyConverterFactory,CMS.Ecommerce.IRoundingServiceFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.SKUPriceSourceFactory"/> class with the specified source of main currencies and currency converter factory.
            </summary>
            <param name="mainCurrencySource">A source of main currencies for sites.</param>
            <param name="converterFactory">A factory used for obtaining site-specific currency converters.</param>
            <param name="roundingServiceFactory">The factory obtaining service for price rounding.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUPriceSourceFactory.GetSKUPriceSource(System.Int32)">
            <summary>
            Returns a source of SKU prices usable on the site specified by <paramref name="siteId"/>.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUPriceSourceFactory.GetSKUListPriceSource(System.Int32)">
            <summary>
            Returns a source of SKU list prices usable on the site specified by <paramref name="siteId"/>.
            </summary>
            <param name="siteId">An ID of a site.</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUUrlService">
            <summary>
            Service for retrieving absolute live site URL of a product.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUUrlService.GetSKUUrl(CMS.Ecommerce.SKUInfo,System.String)">
            <summary>
            Returns absolute live site URL of a product. If <paramref name="sku"/> represents product variant, returns URL to the main product.
            </summary>
            <param name="sku">SKU</param>
            <param name="cultureCode">Culture code.</param>
            <remarks>
            Does not support global or standalone SKUs. 
            When <paramref name="sku"/> page is not translated to the specified <paramref name="cultureCode"/>, returns product URL in different culture, where the translation exists (site default culture is prioritized).
            </remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="sku"/> or <paramref name="cultureCode"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="sku"/> is global or standalone, when the product is not persisted in database, when product site is incorrect, or when the specified <paramref name="cultureCode"/> is not allowed on site.</exception>
        </member>
        <member name="T:CMS.Ecommerce.SKUInfo">
            <summary>
            SKUInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.OBJECT_TYPE_SKU">
            <summary>
            Object type for sku
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.OBJECT_TYPE_OPTIONSKU">
            <summary>
            Object type for optionsku
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.OBJECT_TYPE_VARIANT">
            <summary>
            Object type for variant
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.TYPEINFOSKU">
            <summary>
            Type information for products.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.TYPEINFOOPTIONSKU">
            <summary>
            Type information for product options.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.TYPEINFOVARIANT">
            <summary>
            Type information for product variants.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUInfo.mSKUCustomData">
            <summary>
            SKU custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.TypeInfo">
            <summary>
            Type info.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            This method is called on cloned object prepared in memory by InsertAsClone method.
            Override if you need to do further actions before inserting actual object to DB (insert special objects, modify foreign keys, copy files, etc.).
            Calls Insert() by default.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.InsertAsClonePostprocessing(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            This method is called once the object is completely cloned (with all children, bindings, etc.).
            Performs additional
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.SetObjectOrderPostprocessing">
            <summary>
            Method which is called after the order of the object was changed. Generates staging tasks and webfarm tasks by default.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the field value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUInternalStatusID">
            <summary>
            Product internal status ID. For product variant with internal status ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUDepartmentID">
            <summary>
            Product department ID. For product variant with department ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUManufacturerID">
            <summary>
            Product manufacturer ID. For product variant with manufacturer ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUBrandID">
            <summary>
            Product brand ID. For product variant with brand ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUCollectionID">
            <summary>
            Product collection ID. For product variant with collection ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUTaxClassID">
            <summary>
            SKU tax class ID
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUDescription">
            <summary>
            Product description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUShortDescription">
            <summary>
            Short product description.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUName">
            <summary>
            Product name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUID">
            <summary>
            Product ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUNumber">
            <summary>
            Product number.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUEnabled">
            <summary>
            Product enabled.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUAvailableInDays">
            <summary>
            Product available in days.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUPublicStatusID">
            <summary>
            Product public status ID. For product variant with public status ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUSupplierID">
            <summary>
            Product supplier ID. For product variant with supplier ID not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUPrice">
            <summary>
            Product price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKURetailPrice">
            <summary>
            Product retail price.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUGUID">
            <summary>
            Product GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUSiteID">
            <summary>
            SKU site ID. Set to 0 for global SKU.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUImagePath">
            <summary>
            Product image path.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUWeight">
            <summary>
            Product weight. For product variant with weight not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUHeight">
            <summary>
            Product height. For product variant with height not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUWidth">
            <summary>
            Product width. For product variant with width not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUDepth">
            <summary>
            Product depth. For product variant with depth not set, it is returned from parent product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUTrackInventory">
            <summary>
            Track inventory mode. Value is taken from parent product in case of product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUAvailableItems">
            <summary>
            Product available items. In case of product variant value is taken from parent product if it tracks inventory 'ByProduct'.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUReorderAt">
            <summary>
            Available items quantity at which the product is to be reordered.
            In case of product variant value is taken from parent product if it tracks inventory 'ByProduct'.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable">
            <summary>
            Product sell only available. Value is taken from parent product in case of product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUCustomData">
            <summary>
            Product custom data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUOptionCategoryID">
            <summary>
            SKU option category ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUParentSKUID">
            <summary>
            ID of parent SKU.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUOrder">
            <summary>
            SKU option order within the parent option category.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKULastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUCreated">
            <summary>
            Object creation date.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUProductType">
            <summary>
            Product type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUMembershipGUID">
            <summary>
            GUID of the membership associated with SKU.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUValidity">
            <summary>
            Validity type of SKU.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUValidFor">
            <summary>
            Multiplier for period defined by SKU validity type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUValidUntil">
            <summary>
            Date until which products represented by SKU are valid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUBundleInventoryType">
            <summary>
            Indicates how bundle product is removed from inventory.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUNeedsShipping">
            <summary>
            Indicates if SKU needs to be shipped. Value is taken from parent product in case of product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUMinItemsInOrder">
            <summary>
            Minimum number of units of SKU allowed to be in one order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUMaxItemsInOrder">
            <summary>
            Maximum number of units of SKU allowed to be in one order.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUInStoreFrom">
            <summary>
            Date from which the SKU is available in store. Value is taken from parent product in case of product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SKUOptionCategory">
            <summary>
            Gets the SKUs option category.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.IsProductOption">
            <summary>
            Indicates if current SKU is representing product or product option.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.IsAccessoryProduct">
            <summary>
            Gets a value indicating whether is accessory product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.IsTextAttribute">
            <summary>
            Gets a value indicating whether is text attribute.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.IsAttributeOption">
            <summary>
            Gets a value indicating whether is attribute option (e.g. product color).
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.IsProductVariant">
            <summary>
            Indicates if current SKU is representing product variant.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.IsProduct">
            <summary>
            Indicates if current SKU is representing product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.HasVariants">
            <summary>
            Indicates whether SKU has any variants.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUInfo.SectionIDs">
            <summary>
            Gets product sections.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.#ctor">
            <summary>
            Constructor - Creates an empty SKUInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SKUInfo object from the given DataRow.
            </summary>
            <param name="dr">Source data row</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.#ctor(CMS.Base.IDataContainer)">
            <summary>
            Constructor - Creates a new SKUInfo object from the given DataContainer.
            </summary>
            <param name="data">Source data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets object data.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization inf</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.GetEffectiveIntegerValue(System.String,System.Int32)">
            <summary>
            Get effective integer value. Returns value from parent product when value in given column is not specified.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.GetEffectiveDoubleValue(System.String,System.Double)">
            <summary>
            Get effective double value. Returns value from parent product when value in given column is not specified.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.GetEffectiveDecimalValue(System.String,System.Decimal)">
            <summary>
            Get effective decimal value. Returns value from parent product when value in given column is not specified.
            </summary>
            <param name="columnName">Column name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUInfoProvider">
            <summary>
            Class providing SKUInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUs">
            <summary>
            Returns the query for all products and product option.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUInfo(System.Int32)">
            <summary>
            Returns product with specified ID.
            </summary>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUInfo(System.Guid)">
            <summary>
            Returns product with specified GUID.
            </summary>
            <param name="skuGuid">Product GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.Set(CMS.Ecommerce.SKUInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.SetSKUInfo(CMS.Ecommerce.SKUInfo)">
            <summary>
            Sets (updates or inserts) specified product.
            </summary>
            <param name="skuObj">Product to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.Delete(CMS.Ecommerce.SKUInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.DeleteSKUInfo(CMS.Ecommerce.SKUInfo)">
            <summary>
            Deletes specified product.
            </summary>
            <param name="skuObj">Product to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.DeleteSKUInfo(System.Int32)">
            <summary>
            Deletes product with specified ID.
            </summary>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUs(System.Int32)">
            <summary>
            Returns query for all SKUs for specified site.
            </summary>
            <param name="siteId">Site ID</param> 
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUOptions(System.Int32,System.Boolean)">
            <summary>
            Returns query for all product options from specified product option category.
            </summary>
            <param name="categoryId">Product option category ID</param> 
            <param name="onlyEnabled">Indicates if only enabled product options should be selected</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUOptionsForProduct(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns query for all product options from specified product option category allowed for product specified by skuId parameter.
            </summary>
            <param name="skuId">ID of the SKU for which options are to be obtained</param>
            <param name="categoryId">Product option category ID</param> 
            <param name="onlyEnabled">Indicates if only enabled product options should be selected</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetBundleItems(System.Int32)">
            <summary>
            Returns query for all bundle items for specified bundle SKU ID.
            </summary>
            <param name="bundleId">Bundle SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetWishlistProducts(System.Int32,System.Int32)">
            <summary>
            Returns dataset with the products from specified user's wishlist.
            </summary>
            <param name="userId">ID of the user the wishlist belongs to</param>  
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUUrl(System.Guid,System.String,System.String)">
            <summary>
            Returns user friendly URL of the specified product. Does not uses hash tables to crate SKU.
            </summary>
            <param name="skuGuid">Product unique identifier (GUID)</param>
            <param name="skuName">Product name</param>
            <param name="siteName">Site Name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUUrl(System.Int32,System.String,System.String)">
            <summary>
            Returns user friendly URL of the specified product. Uses hash tables.
            </summary>
            <param name="skuID">Product ID</param>
            <param name="skuName">Product name</param>
            <param name="siteName">Site Name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.UpdateInventory(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Updates products' available items according to the products' units of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart with some products</param>
            <exception cref="T:System.InvalidOperationException">When strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).</exception>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsUserAuthorizedToModifySKU(CMS.Ecommerce.SKUInfo,System.String,CMS.Base.IUserInfo)">
            <summary>
            Indicates if user is authorized to modify specific SKU. 
            For global SKU: 'EcommerceGlobalModify' permission is checked. 
            For site-specific SKU: 'EcommerceModify' OR 'ModifyProducts' permission is checked.
            </summary>
            <param name="skuObj">SKU to be checked</param>
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsUserAuthorizedToModifySKU(System.Boolean,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to modify SKUs.
            </summary>
            <param name="global">For global SKUs (global = True): 'EcommerceGlobalModify' permission is checked. 
            For site-specific SKUs (global = False): 'EcommerceModify' OR 'ModifyProducts' permission is checked.</param>        
            <param name="siteName">Site name</param>
            <param name="user">User to be checked</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.CheckDependencies(System.Int32)">
            <summary>
            Checks dependencies, returns true if dependent.
            </summary>
            <param name="skuId">Product identifier</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature</param>
            <param name="action">Action to check</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetObjectCountForLicenseCheck(System.String)">
            <summary>
            Returns the amount of objects that are limited by license conditions.
            </summary>
            <param name="domain">The site domain. If not set, the request domain will be used.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.SortProductOptionsAlphabetically(System.Int32)">
            <summary>
            Sorts product options of the specified option category alphabetically (A-Z).
            </summary>
            <param name="categoryId">ID of option category</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.HasSKUEnabledOptions(System.Int32)">
            <summary>
            Returns True if there are any options categories with some enabled product options assigned to the specified SKU, otherwise returns False.
            </summary>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsSKUNew(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates if the given SKU is new in the store. By default it is determined based on the CMSStoreProductsAreNewFor setting and SKUInStoreFrom property.
            </summary>
            <param name="sku">SKU data</param>        
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsSKUAvailableForSale(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates if the given SKU can be bought by the customer based on the SKU inventory properties.
            </summary>
            <param name="sku">SKU data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsSKUInStock(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates the real stock status of SKU based on SKU items available.
            </summary>
            <param name="sku">SKU data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetDefaultNeedsShippingFlag(CMS.Ecommerce.SKUProductTypeEnum)">
            <summary>
            Returns default value of NeedsShipping flag for given representation of product.
            </summary>
            <param name="representation">Product representation to get default value for.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUInfoInternal(System.Int32)">
            <summary>
            Returns product with specified ID.
            </summary>
            <param name="skuId">Product ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUInfoInternal(System.Guid)">
            <summary>
            Returns product with specified GUID.
            </summary>
            <param name="skuGuid">Product GUID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.SetSKUInfoInternal(CMS.Ecommerce.SKUInfo)">
            <summary>
            Sets (updates or inserts) specified product.
            </summary>
            <param name="skuObj">Product to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.DeleteSKUInfoInternal(CMS.Ecommerce.SKUInfo)">
            <summary>
            Deletes specified product.
            </summary>
            <param name="skuObj">Product to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.CleanUpProductTypeDependenciesInternal(CMS.Ecommerce.SKUInfo)">
            <summary>
            Cleans up product type dependencies like e-product files, bundle relations, Memberships etc.
            </summary>
            <param name="skuObj">The SKU.</param>        
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUsInternal(System.Int32)">
            <summary>
            Returns query for all SKUs for specified site.
            </summary>
            <param name="siteId">Site ID</param> 
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUOptionsForProductInternal(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns query for all product options from specified product option category allowed for product specified by skuId parameter.
            </summary>
            <param name="skuId">ID of the SKU for which options are to be obtained</param>
            <param name="categoryId">Product option category ID</param> 
            <param name="onlyEnabled">Indicates if only enabled product options should be selected</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetBundleItemsInternal(System.Int32)">
            <summary>
            Returns query for all bundle items for specified bundle SKU ID.
            </summary>
            <param name="bundleId">Bundle SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetWishlistProductsInternal(System.Int32,System.Int32)">
            <summary>
            Returns dataset with the products from specified user's wishlist.
            </summary>
            <param name="userId">ID of the user the wishlist belongs to</param>  
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUUrlInternal(System.Guid,System.String,System.String)">
            <summary>
            Returns user friendly URL of the specified product.
            </summary>
            <param name="skuGuid">Product unique identifier (GUID)</param>
            <param name="skuName">Product name</param>
            <param name="siteName">Site Name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetSKUUrlInternal(System.Int32,System.String,System.String)">
            <summary>
            Returns user friendly URL of the specified product. Method uses hash tables.
            </summary>
            <param name="skuID">Product ID</param>
            <param name="skuName">Product name</param>
            <param name="siteName">Site Name</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.UpdateInventoryInternal(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Updates products' available items in database according to the products' units of the specified shopping cart.
            </summary>
            <param name="cart">Shopping cart with some products</param>
            <exception cref="T:System.InvalidOperationException">When strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).</exception>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.SortProductOptionsAlphabeticallyInternal(System.Int32)">
            <summary>
            Sorts product options of the specified option category alphabetically (A-Z).
            </summary>
            <param name="categoryId">Option category ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.HasSKUEnabledOptionsInternal(System.Int32)">
            <summary>
            Returns True if there are any options categories with some enabled product options assigned to the specified SKU, otherwise returns False.
            </summary>
            <param name="skuId">SKU ID</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsSKUNewInternal(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates if the given SKU is new in the store. By default it is determined based on the CMSStoreProductsAreNewFor setting and SKUInStoreFrom property.
            </summary>
            <param name="sku">SKU data</param>        
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsSKUAvailableForSaleInternal(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates if the given SKU can be bought by the customer based on the SKU inventory settings.
            </summary>
            <param name="sku">SKU data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.IsSKUInStockInternal(CMS.Ecommerce.SKUInfo)">
            <summary>
            Indicates the real stock status of SKU based on SKU items available.
            </summary>
            <param name="sku">SKU data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetDefaultNeedsShippingFlagInternal(CMS.Ecommerce.SKUProductTypeEnum)">
            <summary>
            Returns default value of NeedsShipping flag for given representation of product.
            </summary>
            <param name="representation">Product representation to get default value for.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.GetPermanentURL(System.String,System.String,CMS.Ecommerce.SKUInfo)">
            <summary>
            Returns user friendly URL of the specified product.
            </summary>
            <param name="skuName">Product name</param>
            <param name="siteName">Site Name</param>
            <param name="sku">Product for which URL is created</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.UpdateInventory(CMS.Ecommerce.SKUInfo,System.Int32,CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Updates the inventory of specified SKU.
            </summary>
            <param name="sku">The sku.</param>
            <param name="inventoryChange">The inventory change.</param>
            <param name="cartItem">[Optional] The cart item for specified SKU. Inventory change will be added to cart item's OrderItemUnitCount, to handle multiple UpdateInventory requests.</param>
            <exception cref="T:System.InvalidOperationException">When strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).</exception>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.ExecuteUpdateInventoryDbQuery(CMS.Ecommerce.SKUInfo,System.Int32)">
            <summary>
            Executes an atomic DB query that updates the number of available items of specified <paramref name="sku"/> and returns the number of available items after this operation.
            </summary>
            <param name="sku">The sku.</param>
            <param name="inventoryChange">The inventory change.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.ClearUnusedFields(CMS.Ecommerce.SKUInfo)">
            <summary>
            Set unused fields in SKU to null (or default) value
            </summary>
            <param name="skuObj">SKU</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.UpdateSearchIndex(CMS.Ecommerce.SKUInfo)">
            <summary>
            Updates search index of depending nodes.
            </summary>
            <param name="skuObj">Product data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUInfoProvider.SetLowestPriceToParent(CMS.Ecommerce.SKUInfo,System.Boolean)">
            <summary>
            Set to the parent the price of the cheapest product variant.
            </summary>
            <param name="variantInfo">Product variant</param>
            <param name="deleting">Flag indicate if product variant is being deleted</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUListInfo">
            <summary>
            SKUListInfo virtual object.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SKUListInfo object.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUMembershipListInfo">
            <summary>
            List info for displaying products and product options belonging to membership.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUMembershipListInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUMembershipListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUMembershipListInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Ecommerce.SKUMembershipListInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUMembershipListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instances of the <see cref="T:CMS.Ecommerce.SKUMembershipListInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUMembershipListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUMembershipListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.TrackInventoryTypeEnum">
            <summary>
            Track Inventory Methods
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TrackInventoryTypeEnum.Disabled">
            <summary>
            Inventory is disabled
            </summary>        
        </member>
        <member name="F:CMS.Ecommerce.TrackInventoryTypeEnum.ByProduct">
            <summary>
            Track by product
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.TrackInventoryTypeEnum.ByVariants">
            <summary>
            Track by variants
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.BundleInfo">
            <summary>
            BundleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BundleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BundleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BundleInfo.BundleID">
            <summary>
            Bundle ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BundleInfo.SKUID">
            <summary>
            SKU ID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfo.#ctor">
            <summary>
            Constructor - Creates an empty BundleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new BundleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.BundleInfoProvider">
            <summary>
            Class providing BundleInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.GetBundles">
            <summary>
            Returns the query for all relationships between bundles and SKUs.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.BundleInfo"/> binding structure.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.BundleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.BundleInfo"/> binding structure.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.BundleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.GetBundleInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified bundle and SKU.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">SKU ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.SetBundleInfo(CMS.Ecommerce.BundleInfo)">
            <summary>
            Sets relationship between specified bundle and SKU.
            </summary>
            <param name="infoObj">Bundle-SKU relationship to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.DeleteBundleInfo(CMS.Ecommerce.BundleInfo)">
            <summary>
            Deletes relationship between specified bundle and SKU.
            </summary>
            <param name="infoObj">Bundle-SKU relationship to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.BundleInfo"/> binding.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.AddSKUToBundle(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified bundle and SKU.
            </summary>	
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">SKU ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.BundleInfo"/> binding.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.RemoveSKUFromBundle(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified bundle and SKU.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">SKU ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.BundleInfoProvider.GetBundleInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified bundle and SKU.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">SKU ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.BundleInventoryTypeEnum">
            <summary>
            Inventory removal options for bundle products.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BundleInventoryTypeEnum.RemoveBundle">
            <summary>
            Remove only bundle itself from inventory.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BundleInventoryTypeEnum.RemoveProducts">
            <summary>
            Remove only bundle items from inventory.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.BundleInventoryTypeEnum.RemoveBundleAndProducts">
            <summary>
            Remove both bundle and bundle items from inventory.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.IBundleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.BundleInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IBundleInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.BundleInfo"/> binding structure.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.BundleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IBundleInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.BundleInfo"/> binding structure.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.BundleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IBundleInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.BundleInfo"/> binding.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.IBundleInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.BundleInfo"/> binding.
            </summary>
            <param name="bundleId">Bundle ID.</param>
            <param name="skuId">Product ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.ISKUFileInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Ecommerce.SKUFileInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUFileInfo">
            <summary>
            SKUFileInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUFileInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUFileInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileType">
            <summary>
            File type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FilePath">
            <summary>
            Application root relative path to the file.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileLastModified">
            <summary>
            Date and time when the file object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileGUID">
            <summary>
            File GUID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileID">
            <summary>
            File ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileSKUID">
            <summary>
            Parent SKU ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFileInfo.FileMetaFileGUID">
            <summary>
            Associated meta file GUID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfo.#ctor">
            <summary>
            Constructor - Creates an empty SKUFileInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SKUFileInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo"><see cref="T:CMS.Base.IUserInfo"/> object</param>
            <param name="exceptionOnFailure">If <c>true</c>, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUFileInfoProvider">
            <summary>
            Class providing SKUFileInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfoProvider.GetSKUFiles">
            <summary>
            Returns the query for all SKU files.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfoProvider.GetSKUFileInfo(System.Int32)">
            <summary>
            Returns SKU file with specified ID.
            </summary>
            <param name="fileId">Sku file ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfoProvider.SetSKUFileInfo(CMS.Ecommerce.SKUFileInfo)">
            <summary>
            Sets (updates or inserts) specified SKU file.
            </summary>
            <param name="fileObj">Sku file to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfoProvider.DeleteSKUFileInfo(CMS.Ecommerce.SKUFileInfo)">
            <summary>
            Deletes specified SKU file.
            </summary>
            <param name="fileObj">Sku file to be deleted.</param>
        </member>
        <member name="M:CMS.Ecommerce.SKUFileInfoProvider.DeleteSKUFileInfo(System.Int32)">
            <summary>
            Deletes SKU file with specified ID.
            </summary>
            <param name="fileId">Sku file ID.</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUProductTypeEnum">
            <summary>
            SKU product type options.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUProductTypeEnum.Product">
            <summary>
            Standard product type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUProductTypeEnum.Membership">
            <summary>
            Membership product type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUProductTypeEnum.EProduct">
            <summary>
            E-product product type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUProductTypeEnum.Bundle">
            <summary>
            Bundle product type.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.SKUProductTypeEnum.Text">
            <summary>
            Text product type. Used for product options to which customer is able to define his custom text, e.g. custom label for a T-shirt.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.WishlistItemInfo">
            <summary>
            WishlistItemInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.WishlistItemInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.WishlistItemInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.WishlistItemInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.WishlistItemInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.WishlistItemInfo.SKUID">
            <summary>
            SKU ID.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfo.#ctor">
            <summary>
            Constructor - Creates an empty WishlistItemInfo object.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new WishlistItemInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Ecommerce.WishlistItemInfoProvider">
            <summary>
            Class providing WishlistItemInfo management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.GetWishlistItems">
            <summary>
            Returns the query for all wishlist items.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.GetAsync(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.GetWishlistItemInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns specified wishlist item. 
            </summary>
            <param name="userId">User ID</param>
            <param name="skuId">Product ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.SetWishlistItemInfo(CMS.Ecommerce.WishlistItemInfo)">
            <summary>
            Sets specified wishlist item.
            </summary>
            <param name="infoObj">Wishlist item to be set</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.DeleteWishlistItemInfo(CMS.Ecommerce.WishlistItemInfo)">
            <summary>
            Deletes specified wishlist item.
            </summary>
            <param name="infoObj">Wishlist item to be deleted</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.AddSKUToWishlist(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds product to specified wishlist.
            </summary>  
            <param name="userId">User ID</param>
            <param name="skuId">Product ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Ecommerce.WishlistItemInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="skuId">Product ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.RemoveSKUFromWishlist(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes specified wishlist item.
            </summary>
            <param name="userId">User ID</param>
            <param name="skuId">Product ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.GetWishlistItemInfoInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns specified wishlist item. 
            </summary>
            <param name="userId">User ID</param>
            <param name="skuId">Product ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.SetInfo(CMS.Ecommerce.WishlistItemInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Ecommerce.WishlistItemInfoProvider.DeleteInfo(CMS.Ecommerce.WishlistItemInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultRoundingService">
            <summary>
            Default <see cref="T:CMS.Ecommerce.IRoundingService"/> implementation.
            Round values accordingly to application setting.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DefaultRoundingService.SettingValue">
            <summary>
            Gets rounding setting value transformed to integer.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultRoundingService.#ctor(CMS.Ecommerce.ISettingService)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.DefaultRoundingService"/>.
            </summary>
            <param name="settingService">Service providing application settings</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultRoundingService.Round(System.Decimal,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns rounded price according to the specified currency.
            </summary>
            <param name="price">Price to be rounded</param>
            <param name="currency">Currency which supplies number of decimal places</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultRoundingService.Round(System.Decimal,System.Int32)">
            <summary>
            Returns rounded price to the specified number of digits.
            </summary>
            <param name="price">Price to be rounded</param>
            <param name="decimals">Number of decimal places</param>
        </member>
        <member name="T:CMS.Ecommerce.DefaultRoundingServiceFactory">
            <summary>
            Default implementation of<see cref="T:CMS.Ecommerce.IRoundingServiceFactory"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultRoundingServiceFactory.#ctor(CMS.Ecommerce.ISettingServiceFactory)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.DefaultRoundingServiceFactory"/>.
            with the specified setting service factory.
            </summary>
            <param name="settingServiceFactory">Factory used to get instances of setting services.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultRoundingServiceFactory.GetRoundingService(System.Int32)">
            <summary>
            Returns rounding service specific for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.IRoundingService">
            <summary>
            Defines interface to implement price rounding service.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IRoundingService.Round(System.Decimal,CMS.Ecommerce.CurrencyInfo)">
            <summary>
            Returns rounded price according to the specified currency.
            </summary>
            <param name="price">Price to be rounded</param>
            <param name="currency">Currency which supplies number of decimal places</param>
        </member>
        <member name="T:CMS.Ecommerce.IRoundingServiceFactory">
            <summary>
            Interface for factories providing site-specific rounding services.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IRoundingServiceFactory.GetRoundingService(System.Int32)">
            <summary>
            Returns rounding service specific for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.AbandonedShoppingCartActivityInitializer">
            <summary>
            Initializes abandoned shopping cart activity. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.AbandonedShoppingCartActivityInitializer.#ctor(System.Int32,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Initializes new instance of the <see cref="T:CMS.Ecommerce.AbandonedShoppingCartActivityInitializer"/>.
            </summary>
            <param name="siteId">Site id</param>
            <param name="cart">Shopping cart</param>
        </member>
        <member name="M:CMS.Ecommerce.AbandonedShoppingCartActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Adds information about active and original contact id, adds activity value as <see cref="P:CMS.Ecommerce.ShoppingCartInfo.ShoppingCartGUID"/>, site id and title.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Ecommerce.AbandonedShoppingCartActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AbandonedShoppingCartActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.EProductReminder">
            <summary>
            Provides an ITask interface to send notifications to users about their expiring e-product downloads.
            If started as global scheduled task, it sends notifications about expiring e-products on all sites.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EProductReminder.EmailTemplateInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.EmailEngine.EmailTemplateInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EProductReminder.OrderItemInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.OrderItemInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.EProductReminder.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the task.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Ecommerce.EProductReminder.GetNotificationEmail(CMS.Ecommerce.EProductReminder.NotificationData)">
            <summary>
            Returns notification email message according to given notification data.
            </summary>
            <param name="notificationData">Notification data</param>
        </member>
        <member name="M:CMS.Ecommerce.EProductReminder.GetNotificationEmailMacroResolver(CMS.Ecommerce.EProductReminder.NotificationData)">
            <summary>
            Get macro resolver for expiring e-products notification email.
            </summary>
            <param name="notificationData">Notification data</param>
        </member>
        <member name="T:CMS.Ecommerce.EProductReminder.NotificationData">
            <summary>
            Represents e-product expiration notification data.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EProductReminder.NotificationData.CustomerEmail">
            <summary>
            Customer e-mail where the notification is sent
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.EProductReminder.NotificationData.EproductsTable">
            <summary>
            Table with customer expiring e-products
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.MarkCartAbandoned">
            <summary>
            Provides an ITask interface to mark abandoned shopping carts.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.MarkCartAbandoned.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the publish action.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Ecommerce.MarkCartAbandoned.IsShoppingCartAbandoned(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Checks if the given shopping cart is marked as abandoned and the ShoppingCartAbandoned activity is logged.
            </summary>
            <param name="cart">Shopping cart object</param>
        </member>
        <member name="M:CMS.Ecommerce.MarkCartAbandoned.FilterAbandonedCarts(CMS.DataEngine.ObjectQuery{CMS.Ecommerce.ShoppingCartInfo})">
            <summary>
            Allows filter abandoned carts used to log the ShoppingCartAbandoned activity.
            </summary>
            <param name="abandonedCarts">All non-empty expired shopping carts</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartCleaner">
            <summary>
            Provides an ITask interface to delete old shopping carts.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartCleaner.CustomerInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.CustomerInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartCleaner.OrderInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.OrderInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCleaner.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the action deleting old shopping carts from database.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartCleaner.GetExpiredShoppingCarts(System.Int32)">
            <summary>
            Returns shopping carts that are expired on given site.
            </summary>
            <param name="siteId">ID of the site where shopping carts are examined.</param> 
        </member>
        <member name="T:CMS.Ecommerce.DefaultSettingService">
            <summary>
            Default implementation of <see cref="T:CMS.Ecommerce.ISettingService"/> interface.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultSettingService.#ctor(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Ecommerce.DefaultSettingService"/>.
            </summary>
            <param name="identifier">Site identifier.</param>
        </member>
        <member name="M:CMS.Ecommerce.DefaultSettingService.GetBooleanValue(System.String)">
            <summary>
            Returns boolean value of setting with given name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultSettingService.GetIntegerValue(System.String)">
            <summary>
            Returns integer value of setting with given name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultSettingService.GetStringValue(System.String)">
            <summary>
            Returns string value of setting with given name.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DefaultSettingServiceFactory">
            <summary>
            Represents a factory providing site-specific tax calculation service.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.DefaultSettingServiceFactory.GetSettingService(System.Int32)">
            <summary>
            Returns setting service specific for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.ISettingService">
            <summary>
            Interface for service providing setting values.
            </summary>
            <remarks>
            Interface is meant to access settings persisted via respective object type not on web.config settings.
            </remarks>
            <seealso cref="T:CMS.DataEngine.SettingsKeyInfo"/>
            <seealso cref="T:CMS.DataEngine.SettingsKeyInfoProvider"/>
        </member>
        <member name="M:CMS.Ecommerce.ISettingService.GetBooleanValue(System.String)">
            <summary>
            Returns boolean value of setting with given name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISettingService.GetIntegerValue(System.String)">
            <summary>
            Returns integer value of setting with given name.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ISettingService.GetStringValue(System.String)">
            <summary>
            Returns string value of setting with given name.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ISettingServiceFactory">
            <summary>
            Interface for factories providing site-specific setting services.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ISettingService"/>
        </member>
        <member name="M:CMS.Ecommerce.ISettingServiceFactory.GetSettingService(System.Int32)">
            <summary>
            Returns setting service specific for given site.
            </summary>
            <param name="siteId">ID of the site.</param>
        </member>
        <member name="T:CMS.Ecommerce.CustomerHelper">
            <summary>
            Helper class that helps with customer manipulation. 
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerHelper.MapToCustomer(CMS.Membership.UserInfo)">
            <summary>
            Maps given <paramref name="user"/> to new <see cref="T:CMS.Ecommerce.CustomerInfo"/>.
            </summary>
            <param name="user"><see cref="T:CMS.Membership.UserInfo"/> for mapping.</param>
            <returns><see cref="T:CMS.Ecommerce.CustomerInfo"/> mapped from <paramref name="user"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is null.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CustomerHelper.MapToCustomerInternal(CMS.Membership.UserInfo)">
            <summary>
            Maps given <paramref name="user"/> to new <see cref="T:CMS.Ecommerce.CustomerInfo"/>.
            </summary>
            <param name="user"><see cref="T:CMS.Membership.UserInfo"/> for mapping.</param>
            <returns><see cref="T:CMS.Ecommerce.CustomerInfo"/> mapped from <paramref name="user"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.CustomerShoppingService">
            <summary>
            Provides functionality for customer and user management while working with shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerShoppingService.#ctor(CMS.Ecommerce.ICustomerRegistrationRepositoryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CustomerShoppingService"/> class.
            </summary>
            <param name="customerRegistrationRepositoryFactory"></param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerShoppingService.AutoRegisterCustomer(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Creates <see cref="T:CMS.Membership.UserInfo"/> for customer, in case following conditions are met:
            1. customer does not have user account yet
            2. site requires customer to have account
            </summary>
            <param name="customer">Customer to create <see cref="T:CMS.Membership.UserInfo"/> for.</param>
        </member>
        <member name="T:CMS.Ecommerce.ICustomerShoppingService">
            <summary>
            Provides interface for customer and user management while working with shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ICustomerShoppingService.AutoRegisterCustomer(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Creates <see cref="T:CMS.Membership.UserInfo"/> for specified customer.
            </summary>
            <param name="customer">Customer to create <see cref="T:CMS.Membership.UserInfo"/> for.</param>
        </member>
        <member name="T:CMS.Ecommerce.IShoppingService">
            <summary>
            Provides interface for interaction with shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.GetCurrentShoppingCart">
            <summary>
            Gets the shopping cart used by the <see cref="T:CMS.Ecommerce.IShoppingService"/> instance.
            This member is a backing method of the <see cref="M:CMS.Ecommerce.ECommerceContext.get_CurrentShoppingCart"/> property.
            </summary>
            <returns><see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> object representing the shopping cart on the current site.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.GetCurrentCustomer">
            <summary>
            Gets the current customer.
            </summary>
            <returns><see cref="T:CMS.Ecommerce.CustomerInfo"/> object representing the current customer. Returns <c>null</c> if there is not any current customer.</returns>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.SetCustomer(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Sets the given <paramref name="customer"/> to the current shopping cart and persists changes in the database.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="customer"/> is null.</exception>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.GetCurrentCustomer"/>
            <seealso cref="M:CMS.Ecommerce.CustomerHelper.MapToCustomer(CMS.Membership.UserInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.GetBillingAddress">
            <summary>
            Returns the billing address for the current shopping cart.
            </summary>
            <remarks>
            Address has to be set and assigned in the database to the current shopping cart.
            </remarks>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.SetBillingAddress(CMS.Ecommerce.AddressInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.SetBillingAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets billing address to the current shopping cart and evaluates the cart.
            </summary>
            <param name="billingAddressInfo">Address for billing purposes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="billingAddressInfo"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="billingAddressInfo"/> is in invalid state.</exception>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.GetBillingAddress"/>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.GetShippingAddress">
            <summary>
            Returns the shipping address for the current shopping cart.
            </summary>
            <remarks>
            Address has to be set and assigned in the database to the current shopping cart.
            </remarks>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.SetShippingAddress(CMS.Ecommerce.AddressInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.SetShippingAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets shipping address to the current shopping cart and evaluates the cart.
            </summary>
            <param name="shippingAddressInfo">Address for shipping purposes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shippingAddressInfo"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="shippingAddressInfo"/> is in invalid state.</exception>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.GetShippingAddress"/>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.AddItemToCart(System.Int32,System.Int32)">
            <summary>
            Adds an item to the current shopping cart and logs the activity. Saves the shopping cart if it has not been saved yet.
            If an item in such configuration is already present in the cart, its quantity is increased by <paramref name="quantity"/>.
            Saves all product options and bundle items after adding and evaluates the cart.
            </summary>
            <param name="skuId">Id of SKU item to be added.</param>
            <param name="quantity">Quantity of the item to be added.</param>
            <returns>Returns the resulting item added/updated.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="skuId"/> specifies a product from a different site than current shopping cart belongs to.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>
            <para>The method does nothing when <paramref name="quantity"/> is less than 1 and returns null.</para>
            <para>This override is effectively the same as encapsulating given arguments in a new <see cref="T:CMS.Ecommerce.ShoppingCartItemParameters"/> object and calling <see cref="M:CMS.Ecommerce.IShoppingService.AddItemToCart(CMS.Ecommerce.ShoppingCartItemParameters)"/>.</para>
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.AddItemToCart(CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Adds an item to the current shopping cart and logs the activity. Saves the shopping cart if it has not been saved yet.
            If an item in such configuration is already present in the cart, its quantity is increased by <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity"/>.
            Saves all product options and bundle items after adding and evaluates the cart.
            </summary>
            <param name="itemParameters">Parameters specifying the item to be added.</param>
            <returns>Returns the resulting item added/updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="itemParameters"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="itemParameters"/> specify a product's <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.SKUID"/> from a different site than current shopping cart belongs to.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>
            The method does nothing when <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity"/> is less than 1 and returns null.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.RemoveItemFromCart(System.Int32)">
            <summary>
            Removes item with specified <paramref name="itemId"/> from the current shopping cart.
            Also removes all children and bundle items from the cart, logs the activity and evaluates the cart.
            </summary>
            <param name="itemId">ID of the item to be removed.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when item with the specified <paramref name="itemId"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.RemoveItemFromCart(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Removes item specified by <paramref name="shoppingCartItemInfo"/> from the current shopping cart.
            Also removes all children and bundle items from the cart, logs the activity and evaluates the cart.
            </summary>
            <param name="shoppingCartItemInfo">Item to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shoppingCartItemInfo"/> is null.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when the specified <paramref name="shoppingCartItemInfo"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.UpdateItemQuantity(System.Int32,System.Int32)">
            <summary>
            Updates the quantity of a shopping cart item specified by <paramref name="itemId"/> to <paramref name="quantity"/>.
            Logs the activity resulting from the actual amount of items added or removed and evaluates the cart.
            </summary>
            <param name="itemId">ID of the shopping cart item.</param>
            <param name="quantity">New number of the product units.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when <paramref name="quantity"/> less than zero or item with the specified <paramref name="itemId"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.UpdateItemQuantity(CMS.Ecommerce.ShoppingCartItemInfo,System.Int32)">
            <summary>
            Updates the quantity of a shopping cart item specified by <paramref name="shoppingCartItemInfo"/> to <paramref name="quantity"/>.
            Logs the activity resulting from the actual amount of items added or removed and evaluates the cart.
            </summary>
            <param name ="shoppingCartItemInfo">Item the quantity of which is to be changed.</param>
            <param name="quantity">New number of the product units.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shoppingCartItemInfo"/> is null.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when <paramref name="quantity"/> less than zero or the specified <paramref name="shoppingCartItemInfo"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.RemoveAllItemsFromCart">
            <summary>
            Removes all items from the current shopping cart.
            Also removes all children and bundle items from the cart, logs the activity and evaluates the cart.
            </summary>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.AddCouponCode(System.String)">
            <summary>
            Applies the specified coupon code to the current shopping cart and evaluates the cart.
            </summary>
            <param name="couponCode">Coupon code to apply.</param>
            <returns>True if the <paramref name="couponCode"/> is applied, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="couponCode"/> is null or empty.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.RemoveCouponCode(System.String)">
            <summary>
            Removes the specified coupon code from the current shopping cart and evaluates the cart.
            </summary>
            <param name="couponCode">Coupon code to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="couponCode"/> is null or empty.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.GetShippingOption">
            <summary>
            Returns the selected shipping option for the current shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.SetShippingOption(System.Int32)"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.SetShippingOption(System.Int32)">
            <summary>
            Sets the selected shipping option to the current shopping cart, and evaluates and saves it.
            Does nothing if <paramref name="shippingOptionId"/> is the same as the cart already has.
            </summary>
            <param name="shippingOptionId">Shipping option ID to set.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.GetShippingOption"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.ClearShippingOptionIfNotShippable">
            <summary>
            Removes the shipping option from the current shopping cart if it's not needed anymore, and evaluates and saves the cart.
            Does nothing if the cart has no shipping option or contains a shippable product.
            </summary>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.SetShippingOption(System.Int32)"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.GetPaymentOption">
            <summary>
            Returns the selected payment option for the current shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.SetPaymentOption(System.Int32)"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.SetPaymentOption(System.Int32)">
            <summary>
            Sets the selected payment option to the current shopping cart, and evaluates and saves it.
            Does nothing if <paramref name="paymentOptionId"/> is the same as the cart already has.
            </summary>
            <param name="paymentOptionId">Payment option ID to set.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.IShoppingService.GetPaymentOption"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.SaveCart">
            <summary>
            Validates and saves the shopping cart into the database.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when validation of shopping cart, its items, customer addresses, payment or shipping option fails.</exception>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.CreateOrder">
            <summary>
            Validates and creates order from current shopping cart. If order creation was successful empties shopping cart.
            If order requires an user account, handles its creation.
            Also tracks order conversion, sends order notifications and logs purchase activities.
            </summary>
            <returns>Returns the <see cref="T:CMS.Ecommerce.OrderInfo"/> of newly created order.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.CreateOrderValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.IShoppingService.CalculateShippingOptionPrice(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Returns price of the given shipping option.
            </summary>
            <param name="shippingOptionInfo">Shipping option for which the price is calculated.</param>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingService">
            <summary>
            Provides interaction with shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.#ctor(CMS.Ecommerce.IEcommerceActivityLogger,CMS.Ecommerce.ICartItemChecker,CMS.Ecommerce.ICurrentShoppingCartService,CMS.Ecommerce.ICustomerShoppingService,CMS.Ecommerce.IShoppingCartAdapterService,CMS.Ecommerce.IShippingPriceService,CMS.Ecommerce.IAddressInfoProvider,CMS.Ecommerce.ICustomerInfoProvider,CMS.Ecommerce.IPaymentOptionInfoProvider,CMS.Ecommerce.IShippingOptionInfoProvider,CMS.Ecommerce.IShoppingCartInfoProvider,CMS.Ecommerce.IShoppingCartItemInfoProvider,CMS.Ecommerce.ISKUInfoProvider,CMS.Globalization.ICountryInfoProvider,CMS.Globalization.IStateInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShoppingService"/> class with supplied activity logger.
            </summary>
            <param name="ecommerceActivityLogger">Activity logger to be used for logging E-commerce activities.</param>
            <param name="cartItemChecker">Cart item checker to be used for product being added to the cart.</param>
            <param name="currentShoppingCartService">Service to be used for current shopping cart retrieval.</param>
            <param name="customerShoppingService">Customer shopping service used for user registration.</param>
            <param name="shoppingCartAdapterService">Shopping cart adapter service used for calculating shipping price.</param>
            <param name="shippingPriceService">Shipping price service used for calculating shipping price.</param>
            <param name="addressInfoProvider">Provider for <see cref="T:CMS.Ecommerce.AddressInfo"/> management.</param>
            <param name="customerInfoProvider">Provider for <see cref="T:CMS.Ecommerce.CustomerInfo"/> management.</param>
            <param name="paymentOptionInfoProvider">Provider for <see cref="T:CMS.Ecommerce.PaymentOptionInfo"/> management.</param>
            <param name="shippingOptionInfoProvider">Provider for <see cref="T:CMS.Ecommerce.ShippingOptionInfo"/> management.</param>
            <param name="shoppingCartInfoProvider">Provider for <see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> management.</param>
            <param name="shoppingCartItemInfoProvider">Provider for <see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/> management.</param>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
            <param name="countryInfoProvider">Provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.</param>
            <param name="stateInfoProvider">Provider for <see cref="T:CMS.Globalization.StateInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetCurrentShoppingCart">
            <summary>
            Gets the shopping cart used by the <see cref="T:CMS.Ecommerce.IShoppingService"/> instance. The shopping cart is retrieved
            using the <see cref="T:CMS.Ecommerce.ICurrentShoppingCartService"/> implementation this instance was initialized with.
            This member is a backing method of the <see cref="M:CMS.Ecommerce.ECommerceContext.get_CurrentShoppingCart"/> property.
            </summary>
            <returns><see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> object representing the shopping cart on the current site.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetCurrentCustomer">
            <summary>
            Gets the current customer.
            </summary>
            <returns><see cref="T:CMS.Ecommerce.CustomerInfo"/> object representing the current customer. Returns <c>null</c> if there is not any current customer.</returns>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.SetCustomer(CMS.Ecommerce.CustomerInfo)"/>
            <seealso cref="M:CMS.Ecommerce.CustomerHelper.MapToCustomer(CMS.Membership.UserInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetCustomer(CMS.Ecommerce.CustomerInfo)">
            <summary>
            Sets the given <paramref name="customer"/> to the current shopping cart and persists changes in the database.
            </summary>
            <param name="customer">Customer to be set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="customer"/> is null.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.GetCurrentCustomer"/>
            <seealso cref="M:CMS.Ecommerce.CustomerHelper.MapToCustomer(CMS.Membership.UserInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetCustomerInternal(CMS.Ecommerce.CustomerInfo,System.Boolean)">
            <summary>
            Sets the given <paramref name="customer"/> to the current shopping cart and persists changes in the database
            if the <paramref name="persistShoppingCart" /> is true.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.AddItemToCart(System.Int32,System.Int32)">
            <summary>
            Adds an item to the current shopping cart and logs the activity. Saves the shopping cart if it has not been saved yet.
            If an item in such configuration is already present in the cart, its quantity is increased by <paramref name="quantity"/>.
            Saves all product options and bundle items after adding and evaluates the cart.
            </summary>
            <param name="skuId">Id of SKU item to be added.</param>
            <param name="quantity">Quantity of the item to be added.</param>
            <returns>Returns the resulting item added/updated.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="skuId"/> specifies a product from a different site than current shopping cart belongs to.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>
            <para>The method does nothing when <paramref name="quantity"/> is less than 1 and returns null.</para>
            <para>This override is effectively the same as encapsulating given arguments in a new <see cref="T:CMS.Ecommerce.ShoppingCartItemParameters"/> object and calling <see cref="M:CMS.Ecommerce.ShoppingService.AddItemToCart(CMS.Ecommerce.ShoppingCartItemParameters)"/>.</para>
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.AddItemToCart(CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Adds an item to the current shopping cart and logs the activity. Saves the shopping cart if it has not been saved yet.
            If an item in such configuration is already present in the cart, its quantity is increased by <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity"/>.
            Saves all product options and bundle items after adding and evaluates the cart.
            </summary>
            <param name="itemParameters">Parameters specifying the item to be added.</param>
            <returns>Returns the resulting item added/updated.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="itemParameters"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="itemParameters"/> specify a product's <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.SKUID"/> from a different site than current shopping cart belongs to.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>
            The method does nothing when <see cref="P:CMS.Ecommerce.ShoppingCartItemParameters.Quantity"/> is less than 1 and returns null.
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateAddItemToCart(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemParameters)">
            <summary>
            Validates adding an item to the shopping <paramref name="cart"/> via <see cref="M:CMS.Ecommerce.ShoppingService.AddItemToCart(CMS.Ecommerce.ShoppingCartItemParameters)"/>.
            The method validates whether an item being added belongs to the same site as current shopping cart.
            Throws an exception when validation fails.
            </summary>
            <param name="cart"><see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to add the item to.</param>
            <param name="itemParameters">Parameters specifying the item to be added.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.AddItemToCartValidator"/>
            <seealso cref="T:CMS.Ecommerce.SKUFromDifferentSiteValidationError"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetCartItem(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Sets or updates cart item, its product options and bundle items to the database.
            </summary>
            <param name="cartItem"><see cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/> to be set.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.RemoveItemFromCart(System.Int32)">
            <summary>
            Removes item with specified <paramref name="itemId"/> from the current shopping cart.
            Also removes all children and bundle items from the cart, logs the activity and evaluates the cart.
            </summary>
            <param name="itemId">ID of the item to be removed.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when item with the specified <paramref name="itemId"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.RemoveItemFromCart(CMS.Ecommerce.ShoppingCartItemInfo)">
            <summary>
            Removes item specified by <paramref name="shoppingCartItemInfo"/> from the current shopping cart.
            Also removes all children and bundle items from the cart, logs the activity and evaluates the cart.
            </summary>
            <param name="shoppingCartItemInfo">Item to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shoppingCartItemInfo"/> is null.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when the specified <paramref name="shoppingCartItemInfo"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.UpdateItemQuantity(System.Int32,System.Int32)">
            <summary>
            Updates the quantity of a shopping cart item specified by <paramref name="itemId"/> to <paramref name="quantity"/>.
            Logs the activity resulting from the actual amount of items added or removed and evaluates the cart.
            </summary>
            <param name="itemId">ID of the shopping cart item.</param>
            <param name="quantity">New number of the product units.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when <paramref name="quantity"/> less than zero or item with the specified <paramref name="itemId"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.UpdateItemQuantity(CMS.Ecommerce.ShoppingCartItemInfo,System.Int32)">
            <summary>
            Updates the quantity of a shopping cart item specified by <paramref name="shoppingCartItemInfo"/> to <paramref name="quantity"/>.
            Logs the activity resulting from the actual amount of items added or removed and evaluates the cart.
            </summary>
            <param name ="shoppingCartItemInfo">Item the quantity of which is to be changed.</param>
            <param name="quantity">New number of the product units.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shoppingCartItemInfo"/> is null.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <remarks>This method does nothing when <paramref name="quantity"/> less than zero or the specified <paramref name="shoppingCartItemInfo"/> is not in the cart.</remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.RemoveAllItemsFromCart">
            <summary>
            Removes all items from the current shopping cart.
            Also removes all children and bundle items from the cart, logs the activity and evaluates the cart.
            </summary>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.AddCouponCode(System.String)">
            <summary>
            Applies the specified coupon code to the current shopping cart and evaluates the cart.
            </summary>
            <param name="couponCode">Coupon code to apply.</param>
            <returns>True if the <paramref name="couponCode"/> is applied, false otherwise.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="couponCode"/> is null or empty.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.RemoveCouponCode(System.String)">
            <summary>
            Removes the specified coupon code from the current shopping cart and evaluates the cart.
            </summary>
            <param name="couponCode">Coupon code to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="couponCode"/> is null or empty.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetBillingAddress">
            <summary>
            Returns the billing address for the current shopping cart.
            </summary>
            <remarks>
            Address has to be set and assigned in the database to the current shopping cart.
            </remarks>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.SetBillingAddress(CMS.Ecommerce.AddressInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetBillingAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets billing address to the current shopping cart and evaluates the cart.
            </summary>
            <param name="billingAddressInfo">Address for billing purposes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="billingAddressInfo"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="billingAddressInfo"/> is in invalid state.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.GetBillingAddress"/>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetBillingAddressInternal(CMS.Ecommerce.AddressInfo,System.Boolean)">
            <summary>
            Sets billing address to the current shopping cart, evaluates the cart and persists changes in the database
            if the <paramref name="persistShoppingCart"/> is true.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateSetBillingAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Validates billing address which is to be set to the current shopping cart.
            </summary>
            <param name="billingAddressInfo">Address for billing purposes.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.CustomerAddressValidator"/>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.CreateOrder">
            <summary>
            Validates and creates order from current shopping cart. If order creation was successful empties shopping cart.
            If order requires an user account, handles its creation.
            Also tracks order conversion, sends order notifications and logs purchase activities.
            </summary>
            <returns>Returns the <see cref="T:CMS.Ecommerce.OrderInfo"/> of newly created order.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails, or when strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so or when strict inventory management is enabled and trying to update inventory below zero to an item which doesn't allow so (<see cref="P:CMS.Ecommerce.SKUInfo.SKUSellOnlyAvailable"/> is true).</exception>
            <seealso cref="T:CMS.Ecommerce.CreateOrderValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateCreateOrder(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Validates <paramref name="cart"/> for which order is being created.
            </summary>
            <param name="cart">Cart to be validated.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.CreateOrderValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetShippingAddress">
            <summary>
            Returns the shipping address for the current shopping cart.
            </summary>
            <remarks>
            Address has to be set and assigned in the database to the current shopping cart.
            </remarks>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.SetShippingAddress(CMS.Ecommerce.AddressInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetShippingAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets shipping address to the current shopping cart and evaluates the cart.
            </summary>
            <param name="shippingAddressInfo">Address for shipping purposes.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="shippingAddressInfo"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="shippingAddressInfo"/> is in invalid state.</exception>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.GetShippingAddress"/>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetShippingAddressInternal(CMS.Ecommerce.AddressInfo,System.Boolean)">
            <summary>
            Sets shipping address to the current shopping cart, evaluates the cart and persists changes in the database
            if the <paramref name="persistShoppingCart"/> is true.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateSetShippingAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Validates shipping address which is to be set to the current shopping cart.
            </summary>
            <param name="shippingAddressInfo">Address for shipping purposes.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.CustomerAddressValidator"/>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateSetPaymentOption(CMS.Ecommerce.PaymentOptionInfo)">
            <summary>
            Validates whether a payment option is assigned to the same site as the current shopping cart or the payment option is a global object.
            </summary>
            <param name="paymentOptionInfo">Payment option.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionFromDifferentSiteValidationError"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateShippingOption(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Validates whether a shipping option is assigned to the same site as the current shopping cart or the shipping option is a global object.
            </summary>
            <param name="shippingOptionInfo">Shipping option.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionFromDifferentSiteValidationError"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetAddress(CMS.Ecommerce.AddressInfo)">
            <summary>
            Sets <paramref name="address"/> to the database. Assigns <see cref="P:CMS.Ecommerce.AddressInfo.AddressCustomerID"/>/>.
            Sets <see cref="P:CMS.Ecommerce.AddressInfo.AddressName"/> to <paramref name="address"/> if not already set.
            </summary>
            <param name="address">Address to set.</param>
            <seealso cref="M:CMS.Ecommerce.AddressInfoProvider.GetAddressName(CMS.Ecommerce.AddressInfo)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetShippingOption">
            <summary>
            Returns the selected shipping option for the current shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.SetShippingOption(System.Int32)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetShippingOption(System.Int32)">
            <summary>
            Sets the selected shipping option to the current shopping cart, evaluates it and persists changes in the database.
            Does nothing if <paramref name="shippingOptionId"/> is the same as the cart already has.
            </summary>
            <param name="shippingOptionId">Shipping option ID to set.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.GetShippingOption"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetShippingOptionInternal(System.Int32,System.Boolean)">
            <summary>
            Sets the selected shipping option to the current shopping cart, evaluates it and persists changes in the database
            if the <paramref name="persistShoppingCart"/> is true.
            Does nothing if <paramref name="shippingOptionId"/> is the same as the cart already has.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ClearShippingOptionIfNotShippable">
            <summary>
            Removes the shipping option from the current shopping cart if it's not needed anymore, and evaluates and saves the cart.
            Does nothing if the cart has no shipping option or contains a shippable product.
            </summary>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.SetShippingOption(System.Int32)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ClearShippingOptionIfNotShippableInternal">
            <summary>
            Removes the shipping option from the current shopping cart if it's not needed anymore, evaluates and saves the cart.
            Does nothing if the cart has no shipping option or contains a shippable product.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.CalculateShippingOptionPrice(CMS.Ecommerce.ShippingOptionInfo)">
            <summary>
            Returns price of the given shipping option based on the current shopping cart.
            </summary>
            <param name="shippingOptionInfo">Shipping option for which the price is calculated.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetPaymentOption">
            <summary>
            Returns the selected payment option for the current shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.SetPaymentOption(System.Int32)"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetPaymentOption(System.Int32)">
            <summary>
            Sets the selected payment option to the current shopping cart, and evaluates and saves it.
            Does nothing if <paramref name="paymentOptionId"/> is the same as the cart already has.
            </summary>
            <param name="paymentOptionId">Payment option ID to set.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingCartInfo.Evaluate"/>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionInfo"/>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.GetPaymentOption"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SetPaymentOptionInternal(System.Int32,System.Boolean)">
            <summary>
            Sets the selected payment option to the current shopping cart, evaluates it and persists changes in the database
            if the <paramref name="persistShoppingCart"/> is true.
            Does nothing if <paramref name="paymentOptionId"/> is the same as the cart already has.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SaveCart">
            <summary>
            Validates and saves the shopping cart into the database.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when validation of shopping cart, its items, customer addresses, payment or shipping option fails.</exception>
            <remarks>
            It is not necessary to call this method after modifying a shopping cart through the other methods of the <see cref="T:CMS.Ecommerce.ShoppingService"/>
            (adding or removing items, setting the customer, addresses, shipping and payment options, etc.). These methods save the shopping cart automatically.
            The method is useful when you need to save a shopping cart to the database after it gets modified outside of the <see cref="T:CMS.Ecommerce.ShoppingService"/>.
            For example, call the method after validating the cart prior to checkout (e.g. this could remove cart items which are sold out).
            </remarks>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.ValidateShoppingCart(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Validates the shopping cart and its items.
            </summary>
            <param name="cart"><see cref="T:CMS.Ecommerce.ShoppingCartInfo"/> to be validated.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when validation fails.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.SendOrderNotifications(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Sends notifications about created order to administrator and customer.
            </summary>
            <param name="cart">Specifies cart to be logged</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.CreateOrder"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.TrackOrderConversion(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Tracks order conversion of the provided <paramref name="cart"/>.
            </summary>
            <param name="cart">Specifies the cart to be tracked.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.CreateOrder"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.LogPurchaseActivities(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Logs all items in <paramref name="cart"/> as purchased.
            </summary>
            <param name="cart">Specifies cart to be logged.</param>
            <seealso cref="M:CMS.Ecommerce.ShoppingService.CreateOrder"/>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.LogProductAddedToCartActivity(CMS.Ecommerce.ShoppingCartItemInfo,System.Nullable{System.Int32})">
            <summary>
            Logs the add to shopping cart activity.
            </summary>
            <param name="item">Item added into shopping cart.</param>
            <param name="quantity">Amount of items added to the shopping cart. If null, the <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemUnits"/> of <paramref name="item"/> is logged.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.LogProductRemovedFromCartActivity(CMS.Ecommerce.ShoppingCartItemInfo,System.Nullable{System.Int32})">
            <summary>
            Logs the remove from shopping cart activity.
            </summary>
            <param name="item">Item removed from shopping cart.</param>
            <param name="quantity">Amount of items removed from the shopping cart. If null, the <see cref="P:CMS.Ecommerce.ShoppingCartItemInfo.CartItemUnits"/> of <paramref name="item"/> is logged.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingService.GetCurrentContactId">
            <summary>
            Gets ID of the current contact.
            </summary>
            <returns>Current contact ID.</returns>
        </member>
        <member name="T:CMS.Ecommerce.BillingAddressDoesNotMatchCustomerValidationError">
            <summary>
            Represents a validation error caused by setting billing address from different customer.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CartAddressesValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.BillingAddressDoesNotMatchCustomerValidationError.CMS#Base#IValidationError#MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BillingAddressDoesNotMatchCustomerValidationError.CMS#Base#IValidationError#MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.BillingAddressNotSetValidationError">
            <summary>
            Represents a validation error resulting from shopping cart missing a billing address.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.BillingAddressNotSetValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.BillingAddressNotSetValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingAddressDoesNotMatchCustomerValidationError">
            <summary>
            Represents a validation error caused by setting shipping address from different customer.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CartAddressesValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.ShippingAddressDoesNotMatchCustomerValidationError.CMS#Base#IValidationError#MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingAddressDoesNotMatchCustomerValidationError.CMS#Base#IValidationError#MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CountryNotSetValidationError">
            <summary>
            Represents a validation error resulting from missing country specification.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.CountryNotSetValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CountryNotSetValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CurrencyNotSetValidationError">
            <summary>
            Represents a validation error resulting from shopping cart missing a currency.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyNotSetValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CurrencyNotSetValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CustomerNotSetValidationError">
            <summary>
            Represents a validation error resulting from shopping cart missing a customer.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.CustomerNotSetValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerNotSetValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.DisabledUserValidationError">
            <summary>
            Represents a validation error caused by user being disabled.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CreateOrderValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.DisabledUserValidationError.CMS#Base#IValidationError#MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.DisabledUserValidationError.CMS#Base#IValidationError#MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.RegisteredCustomerRequiredValidationError">
            <summary>
            Represents a validation error resulting from missing a customer where necessary.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.RegisteredCustomerRequiredValidationError.#ctor(System.Int32,System.String)">
            <summary>
            Creates instance of <see cref="T:CMS.Ecommerce.RegisteredCustomerRequiredValidationError"/>.
            </summary>
            <param name="skuId">SKU Id of the product for which validation failed.</param>
            <param name="skuName">SKU name of the product for which validation failed.</param>
        </member>
        <member name="T:CMS.Ecommerce.PaymentNotAuthorizedValidationError">
            <summary>
            Represents a validation error resulting from user not being authorized for payment.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CreateOrderValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.PaymentNotAuthorizedValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentNotAuthorizedValidationError.ErrorMessage">
            <summary>
            Error message resulting from payment authorization.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentNotAuthorizedValidationError.MessageParameters">
            <summary>
            Returns array containing error message.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentNotAuthorizedValidationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.PaymentNotAuthorizedValidationError"/> class.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionFromDifferentSiteValidationError">
            <summary>
            Represents a validation error caused by setting payment option from different site.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CreateOrderValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionFromDifferentSiteValidationError.CMS#Base#IValidationError#MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionFromDifferentSiteValidationError.CMS#Base#IValidationError#MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionNotApplicableValidationError">
            <summary>
            Represents a validation error resulting from payment option not being applicable.
            </summary>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionNotApplicableValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionNotApplicableValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionNotSetValidationError">
            <summary>
            Represents a validation error resulting from missing payment option.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionNotSetValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionNotSetValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionDisabledValidationError">
            <summary>
            Represents a validation error resulting from shipping option being disabled.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionDisabledValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionDisabledValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionFromDifferentSiteValidationError">
            <summary>
            Represents a validation error resulting from shipping option belonging to a different site.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionFromDifferentSiteValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionFromDifferentSiteValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionNotApplicableValidationError">
            <summary>
            Represents a validation error resulting from shipping option not being applicable.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionNotApplicableValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionNotApplicableValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionNotSetValidationError">
            <summary>
            Represents a validation error resulting from missing shipping option.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionNotSetValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionNotSetValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartEmptyValidationError">
            <summary>
            Represents a validation error resulting from shopping cart being empty.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartEmptyValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartEmptyValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartItemValidationError">
            <summary>
            Base class for shopping cart item related errors.
            </summary>
        </member>
        <member name="F:CMS.Ecommerce.ShoppingCartItemValidationError.mMessageKey">
            <summary>
            Key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidationError.SKUId">
            <summary>
            SKU Id of product associated with the error.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidationError.SKUName">
            <summary>
            SKU name of product associated with the error.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidationError.MessageParameters">
            <summary>
            Returns array with SKU name key.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidationError.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShoppingCartItemValidationError"/> class.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUDisabledOrExpiredValidationError">
            <summary>
            Represents a validation error resulting from having a disabled or expired item in cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.SKUDisabledOrExpiredValidationError.#ctor(System.Int32,System.String)">
            <summary>
            Creates instance of <see cref="T:CMS.Ecommerce.SKUDisabledOrExpiredValidationError"/>.
            </summary>
            <param name="skuId">SKU Id of the product for which validation failed.</param>
            <param name="skuName">SKU name of the product for which validation failed.</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUFromDifferentSiteValidationError">
            <summary>
            Represents a validation error resulting from using an SKU from a different site where not appropriate.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.SKUFromDifferentSiteValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUFromDifferentSiteValidationError.MessageParameters">
            <summary>
            Returns an empty array.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.SKUMaxUnitsExceededValidationError">
            <summary>
            Represents a validation error resulting from an excess of product units in cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.SKUMaxUnitsExceededValidationError.MaxUnits">
            <summary>
            Maximum allowed units for the product.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUMaxUnitsExceededValidationError.MessageParameters">
            <summary>
            Returns an array containing SKU name and maximum units for the SKU.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUMaxUnitsExceededValidationError.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Creates instance of <see cref="T:CMS.Ecommerce.SKUMaxUnitsExceededValidationError"/>.
            </summary>
            <param name="skuId">SKU Id of the product for which validation failed.</param>
            <param name="skuName">SKU name of the product for which validation failed.</param>
            <param name="maxUnits">Maximum number of units for the product.</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUMinUnitsNotReachedValidationError">
            <summary>
            Represents a validation error resulting from not having enough of product units in cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.SKUMinUnitsNotReachedValidationError.MinUnits">
            <summary>
            Minimum amount of units to have in cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUMinUnitsNotReachedValidationError.MessageParameters">
            <summary>
            Returns an array containing SKU name and minimum units for the SKU.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUMinUnitsNotReachedValidationError.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Creates instance of <see cref="T:CMS.Ecommerce.SKUMinUnitsNotReachedValidationError"/>.
            </summary>
            <param name="skuId">SKU Id of the product for which validation failed.</param>
            <param name="skuName">SKU name of the product for which validation failed.</param>
            <param name="minUnits">Minimum number of units for the product.</param>
        </member>
        <member name="T:CMS.Ecommerce.SKUNotInStockValidationError">
            <summary>
            Represents a validation error resulting from store not having enough units of product in stock.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
        </member>
        <member name="P:CMS.Ecommerce.SKUNotInStockValidationError.InventoryUnits">
            <summary>
            Number of units available in stock.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.SKUNotInStockValidationError.MessageParameters">
            <summary>
            Returns an array containing SKU name and units in stock for the SKU.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.SKUNotInStockValidationError.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Creates instance of <see cref="T:CMS.Ecommerce.SKUNotInStockValidationError"/>.
            </summary>
            <param name="skuId">SKU Id of the product for which validation failed.</param>
            <param name="skuName">SKU name of the product for which validation failed.</param>
            <param name="inventoryUnits">Number of units available in stock.</param>
        </member>
        <member name="T:CMS.Ecommerce.StateNotFromCountryValidationError">
            <summary>
            Represents a validation error resulting from assigning a state not belonging to a certain country.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.StateNotFromCountryValidationError.Country">
            <summary>
            Country whose state is invalid.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.StateNotFromCountryValidationError.State">
            <summary>
            State which is invalid for given <see cref="P:CMS.Ecommerce.StateNotFromCountryValidationError.Country"/>.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.StateNotFromCountryValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.StateNotFromCountryValidationError.MessageParameters">
            <summary>
            Returns an array containing country and state display names.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.StateNotFromCountryValidationError.#ctor(CMS.Globalization.CountryInfo,CMS.Globalization.StateInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/> class.
            </summary>
            <param name="country">Country whose state is invalid.</param>
            <param name="state">State which is invalid for given <paramref name="country"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="country"/> or <paramref name="state"/> is null.</exception>
        </member>
        <member name="T:CMS.Ecommerce.AddItemToCartValidator">
            <summary>
            Performs validation of an item to be added to a shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.AddItemToCartValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddItemToCartValidator.ItemParameters">
            <summary>
            Gets item parameters this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddItemToCartValidator.SKUInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.AddItemToCartValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
            <seealso cref="T:CMS.Ecommerce.SKUFromDifferentSiteValidationError"/>
        </member>
        <member name="P:CMS.Ecommerce.AddItemToCartValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.AddItemToCartValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="M:CMS.Ecommerce.AddItemToCartValidator.#ctor(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ShoppingCartItemParameters,CMS.Ecommerce.ISKUInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.AddItemToCartValidator"/> class for given <paramref name="cart"/> and <paramref name="itemParameters"/>.
            </summary>
            <param name="cart">Shopping cart for which to perform the validation.</param>
            <param name="itemParameters">Parameters representing an item to be validated against.</param>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.AddItemToCartValidator.Validate">
            <summary>
            Validates the <see cref="P:CMS.Ecommerce.AddItemToCartValidator.ItemParameters"/> specify an SKU from the same site as <see cref="P:CMS.Ecommerce.AddItemToCartValidator.Cart"/> is.
            </summary>
            <returns>Returns a value indicating whether validation succeeded.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CartAddressesValidator">
            <summary>
            Class representing validator of addresses belonging to a cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CartAddressesValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CartAddressesValidator.CountryInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CartAddressesValidator.StateInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.StateInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CartAddressesValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CartAddressesValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.CartAddressesValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CartAddressesValidator.#ctor(CMS.Ecommerce.ShoppingCartInfo,CMS.Globalization.ICountryInfoProvider,CMS.Globalization.IStateInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CartAddressesValidator"/> class for given <paramref name="cart"/>.
            </summary>
            <param name="cart">Shopping cart for which to perform the validation.</param>
            <param name="countryInfoProvider">Provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.</param>
            <param name="stateInfoProvider">Provider for <see cref="T:CMS.Globalization.StateInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.CartAddressesValidator.Validate">
            <summary>
            Validates cart addresses.
            </summary>
            <returns>Result of validation.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CartAddressesValidator.ValidateAddresses">
            <summary>
            Validates shipping and billing addresses.
            </summary>
        </member>
        <member name="T:CMS.Ecommerce.CMSPaymentAuthorizationValidator">
            <summary>
            Class represents validator for payment authorization.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentAuthorizationValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentAuthorizationValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CMSPaymentAuthorizationValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.CMSPaymentAuthorizationValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentAuthorizationValidator.#ctor(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CMSPaymentAuthorizationValidator"/> class for given <paramref name="cart"/>.
            </summary>
            <param name="cart">Shopping cart for which to perform the validation.</param>
        </member>
        <member name="M:CMS.Ecommerce.CMSPaymentAuthorizationValidator.Validate">
            <summary>
            Validates whether user is authorized for used payment method.
            </summary>
            <returns>Result of validation.</returns>
        </member>
        <member name="T:CMS.Ecommerce.CreateOrderValidator">
            <summary>
            Class representing validator for order finalization.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartValidator"/>
            <seealso cref="T:CMS.Ecommerce.CMSPaymentAuthorizationValidator"/>
            <seealso cref="T:CMS.Ecommerce.ShippingAndPaymentValidator"/>
            <seealso cref="T:CMS.Ecommerce.ShoppingService"/>
        </member>
        <member name="P:CMS.Ecommerce.CreateOrderValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreateOrderValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreateOrderValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.CreateOrderValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="P:CMS.Ecommerce.CreateOrderValidator.SKUInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreateOrderValidator.CountryInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CreateOrderValidator.StateInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.StateInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreateOrderValidator.#ctor(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ISKUInfoProvider,CMS.Globalization.ICountryInfoProvider,CMS.Globalization.IStateInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CreateOrderValidator"/> class for given <paramref name="cart"/>.
            </summary>
            <param name="cart">Shopping cart for which to perform the validation.</param>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
            <param name="countryInfoProvider">Provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.</param>
            <param name="stateInfoProvider">Provider for <see cref="T:CMS.Globalization.StateInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.CreateOrderValidator.Validate">
            <summary>
            Validates shopping cart before creating order.
            Validation includes: all required properties must be set, cart must contain at least one item, user must not be disabled, shipping and payment options, cart addresses.
            </summary>
            <returns>Returns true if validation passes, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.CreateOrderValidator.ValidateShoppingCart">
            <summary>
            Validates shopping cart and its items.
            For more details on what is validated refer to <see cref="T:CMS.Ecommerce.ShoppingCartValidator"/> and <see cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CreateOrderValidator.ValidatePaymentOption">
            <summary>
            Validates that user is authorized for selected payment option.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CMSPaymentAuthorizationValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.CreateOrderValidator.ValidateShippingAndPaymentOptions">
            <summary>
            Validates applicability of shipping and payment options on their own and with respect to each other.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingAndPaymentValidator"/>
        </member>
        <member name="M:CMS.Ecommerce.CreateOrderValidator.ValidateCartAddresses">
            <summary>
            Validates shipping and billing addresses match customer and that all cart addresses are valid.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CartAddressesValidator"/>
        </member>
        <member name="T:CMS.Ecommerce.CustomerAddressValidator">
            <summary>
            Class for customer address validation.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerAddressValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned if validation succeeded.
            </summary>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
        </member>
        <member name="P:CMS.Ecommerce.CustomerAddressValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.CustomerAddressValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="P:CMS.Ecommerce.CustomerAddressValidator.Address">
            <summary>
            Gets address this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerAddressValidator.CountryInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.CustomerAddressValidator.StateInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Globalization.StateInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.CustomerAddressValidator.#ctor(CMS.Ecommerce.AddressInfo,CMS.Globalization.ICountryInfoProvider,CMS.Globalization.IStateInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.CustomerAddressValidator"/> class.
            </summary>
            <param name="address"><see cref="T:CMS.Ecommerce.AddressInfo"/> object representing a customer address that is validated.</param>
            <param name="countryInfoProvider">Provider for <see cref="T:CMS.Globalization.CountryInfo"/> management.</param>
            <param name="stateInfoProvider">Provider for <see cref="T:CMS.Globalization.StateInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.CustomerAddressValidator.Validate">
            <summary>
            Validates the address.
            </summary>
            <returns>Returns a value indicating whether validation succeeded.</returns>
            <seealso cref="T:CMS.Ecommerce.CountryNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.StateNotFromCountryValidationError"/>
        </member>
        <member name="T:CMS.Ecommerce.PaymentOptionValidator">
            <summary>
            Performs validation of a payment option to be assigned to a shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.PaymentOptionValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionValidator.PaymentOption">
            <summary>
            Gets payment option this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.PaymentOptionValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionValidator.#ctor(CMS.Ecommerce.PaymentOptionInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.PaymentOptionValidator"/> class.
            </summary>
            <param name="paymentOption">Payment option for which to perform the validation.</param>
            <param name="shoppingCart">Shopping cart for which to perform the validation.</param>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionValidator.Validate">
            <summary>
            Validates whether a payment option can be associated with the shopping cart.
            </summary>
            <returns>Returns true if validation passed, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.PaymentOptionValidator.ValidatePaymentOption">
            <summary>
            Validates that  payment option is:
            not null,
            assigned to the same site as the shopping cart or payment option is a global object,
            applicable to the shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionNotApplicableValidationError"/>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionFromDifferentSiteValidationError"/>
        </member>
        <member name="T:CMS.Ecommerce.ShippingAndPaymentValidator">
            <summary>
            Validates that selected shipping option and payment method are valid for given cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingAndPaymentValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingAndPaymentValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingAndPaymentValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.ShippingAndPaymentValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="M:CMS.Ecommerce.ShippingAndPaymentValidator.#ctor(CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShippingAndPaymentValidator"/> class for given <paramref name="cart"/>.
            </summary>
            <param name="cart">Shopping cart for which to perform the validation.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingAndPaymentValidator.Validate">
            <summary>
            Validates shipping and payment options associated with shopping cart.
            </summary>
            <returns>Returns true if validation passed, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShippingAndPaymentValidator.ValidatePaymentAndShipping">
            <summary>
            Validates shipping and payment options associated with shopping cart.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingAndPaymentValidator.ValidatePaymentOption">
            <summary>
            Validates payment option associated with shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionNotApplicableValidationError"/>
            <seealso cref="T:CMS.Ecommerce.PaymentOptionFromDifferentSiteValidationError"/>
        </member>
        <member name="M:CMS.Ecommerce.ShippingAndPaymentValidator.ValidateShippingOption">
            <summary>
            Validates shipping option associated with shopping cart.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionDisabledValidationError"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionNotApplicableValidationError"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionFromDifferentSiteValidationError"/>
        </member>
        <member name="T:CMS.Ecommerce.ShippingOptionValidator">
            <summary>
            Performs validation of a shipping option to be assigned to a shopping cart.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.ShippingOptionValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionValidator.ShippingOptionInfo">
            <summary>
            Gets shipping option this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShippingOptionValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionValidator.#ctor(CMS.Ecommerce.ShippingOptionInfo,CMS.Ecommerce.ShoppingCartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShippingOptionValidator"/> class.
            </summary>
            <param name="shippingOption">Shipping option for which to perform the validation.</param>
            <param name="shoppingCart">Shopping cart for which to perform the validation.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionValidator.Validate">
            <summary>
            Validates whether a shipping option can be associated with the shopping cart.
            </summary>
            <returns>Returns true if validation passed, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShippingOptionValidator.ValidateShippingOption">
            <summary>
            Validates that shipping option is:
            not null,
            enabled,
            applicable to <see cref="P:CMS.Ecommerce.ShippingOptionValidator.Cart"/>,
            assigned to the same site as the <see cref="P:CMS.Ecommerce.ShippingOptionValidator.Cart"/>.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionNotSetValidationError"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionDisabledValidationError"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionNotApplicableValidationError"/>
            <seealso cref="T:CMS.Ecommerce.ShippingOptionFromDifferentSiteValidationError"/>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartItemValidator">
            <summary>
            Class representing validator used for validation of individual shopping cart items.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidator.Item">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.ShoppingCartItemValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartItemValidator.SKUInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.#ctor(CMS.Ecommerce.ShoppingCartItemInfo,CMS.Ecommerce.ISKUInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/> class for given <paramref name="item"/>.
            </summary>
            <param name="item">Shopping cart item for which to perform the validation.</param>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.Validate">
            <summary>
            Validates individual shopping cart item.
            The following conditions must hold true for each item in cart for validation to pass:
            1) All shopping cart items are enabled
            2) Max units in one order are not exceeded
            3) There is enough units in the inventory
            4) Customer is registered, if there is a membership type product in the cart
            5) Product validity is valid, if there is a membership or e-product type product in the cart.
            </summary>
            <returns>Returns true if validation passed, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.ValidateSKUIsEnabled(CMS.Ecommerce.SKUInfo)">
            <summary>
            Validates that SKU is enabled and not expired.
            </summary>
            <param name="sku">SKU to be validated.</param>
            <returns>Result of validation</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.ValidateCustomerMembership(CMS.Ecommerce.SKUInfo)">
            <summary>
            Validates that customer is either a member or membership is not required.
            </summary>
            <param name="sku">SKU to be validated.</param>
            <returns>Returns false if membership is required and customer is not a member, otherwise return true.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.ValidateMinCartUnits(CMS.Ecommerce.SKUInfo)">
            <summary>
            Validates that cart contains at least required amount of units.
            </summary>
            <param name="sku">SKU to be validated.</param>
            <returns>Result of validation</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.ValidateMaxCartUnits(CMS.Ecommerce.SKUInfo)">
            <summary>
            Validates that cart does not contain more items than allowed.
            </summary>
            <param name="sku">SKU to be validated.</param>
            <returns>Result of validation</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartItemValidator.ValidateUnitsInStock(CMS.Ecommerce.SKUInfo,System.Int32)">
            <summary>
            Validates that cart does not contain more items than are currently in stock.
            </summary>
            <param name="sku">SKU to be validated.</param>
            <param name="inventoryUnits">Units currently in inventory</param>
            <returns>Result of validation</returns>
        </member>
        <member name="T:CMS.Ecommerce.ShoppingCartValidator">
            <summary>
            Class responsible for validation of shopping cart and its items.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartInfo"/>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemInfo"/>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartValidator.Cart">
            <summary>
            Gets shopping cart this validator was initialized for.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Ecommerce.ShoppingCartValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="P:CMS.Ecommerce.ShoppingCartValidator.SKUInfoProvider">
            <summary>
            Gets the provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartValidator.#ctor(CMS.Ecommerce.ShoppingCartInfo,CMS.Ecommerce.ISKUInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Ecommerce.ShoppingCartValidator"/> class for given <paramref name="cart"/>.
            </summary>
            <param name="cart">Shopping cart for which to perform the validation.</param>
            <param name="skuInfoProvider">Provider for <see cref="T:CMS.Ecommerce.SKUInfo"/> management.</param>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartValidator.Validate">
            <summary>
            Validates shopping cart and its items.
            </summary>
            <returns>Returns true if validation passed, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Ecommerce.ShoppingCartValidator.ValidateCart">
            <summary>
            Validates shopping cart with all its items.
            If any validation error occurs, it is added into the <see cref="P:CMS.Ecommerce.ShoppingCartValidator.Errors"/> collection.
            </summary>
            <seealso cref="T:CMS.Ecommerce.ShoppingCartItemValidator"/>
        </member>
    </members>
</doc>
