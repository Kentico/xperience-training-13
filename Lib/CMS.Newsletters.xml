<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Newsletters</name>
    </assembly>
    <members>
        <member name="T:CMS.Newsletters.ABTestInfo">
            <summary>
            ABTestInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestSelectWinnerAfter">
            <summary>
            Time interval (in minutes) after a winner will be selected.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerSelected">
            <summary>
            Gets or sets the date when winner was selected.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestLastModified">
            <summary>
            Gets or sets the date and time the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerOption">
            <summary>
            Determines how to select winner.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerIssueID">
            <summary>
            Winner issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestGUID">
            <summary>
            GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestIssueID">
            <summary>
            Parent issue (in case of A/B test).
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestID">
            <summary>
            ID of A/B test.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestSizePercentage">
            <summary>
            Size of test group in percents.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestNumberPerVariantEmails">
            <summary>
            Number of e-mail addresses to send per each variant.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfo.TestWinnerScheduledTaskID">
            <summary>
            ID of scheduled task to select winner.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.#ctor">
            <summary>
            Constructor - Creates an empty ABTestInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ABTestInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="T:CMS.Newsletters.ABTestInfoProvider">
            <summary>
            Class providing ABTestInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfoProvider.mABTestInfosByIssueID">
            <summary>
            States indexed by state code.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestInfoProvider.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ABTestInfoProvider.ABTestInfosByIssueID">
            <summary>
            AB tests indexed by parent issue ID.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTests">
            <summary>
            Returns a query for all the ABTestInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfo(System.Int32)">
            <summary>
            Returns abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.SetABTestInfo(CMS.Newsletters.ABTestInfo)">
            <summary>
            Sets (updates or inserts) specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be set.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.DeleteABTestInfo(CMS.Newsletters.ABTestInfo)">
            <summary>
            Deletes specified abtest.
            </summary>
            <param name="abtestObj">Abtest to be deleted.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.DeleteABTestInfo(System.Int32)">
            <summary>
            Deletes abtest with specified ID.
            </summary>
            <param name="abtestId">Abtest ID.</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfoForIssue(System.Int32)">
            <summary>
            Returns ABTest info for the given issue (parent issue).
            </summary>
            <param name="issueId">Parent issue ID</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.SetInfo(CMS.Newsletters.ABTestInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.DeleteInfo(CMS.Newsletters.ABTestInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.GetABTestInfoForIssueInternal(System.Int32)">
            <summary>
            Returns ABTest info for the given issue (parent issue).
            </summary>
            <param name="issueId">Parent issue ID</param>        
        </member>
        <member name="M:CMS.Newsletters.ABTestInfoProvider.LoadTests">
            <summary>
            Loads tests to hashtable.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ABTestWinnerSelectionEnum">
            <summary>
            Winner option enumeration
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestWinnerSelectionEnum.OpenRate">
            <summary>
            Winner will be selected according to open rate
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestWinnerSelectionEnum.TotalUniqueClicks">
            <summary>
            Winner will be selected according to total clicks
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ABTestWinnerSelectionEnum.Manual">
            <summary>
            Winner will be selected manually
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IABTestInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.ABTestInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IWinnerIssueSender.ProcessWinner(CMS.Newsletters.IssueInfo,CMS.Newsletters.ABTestInfo)">
            <summary>
            Tries to get the winner. If the winner can't be decided postpones the winner selection for an hour.
            Winner is send to the subscribers after the selection.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IWinnerTaskPostponer.PostponeScheduledTask(CMS.Newsletters.ABTestInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Creates new scheduled task for A/B test winner selection that is going to be run one hour after the current time. The ID of a new task is set to the <see cref="T:CMS.Newsletters.ABTestInfo"/>.
            </summary>
            <remarks>
            The method does not delete any possibly existing scheduled tasks.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.WinnerIssueSender.ProcessWinner(CMS.Newsletters.IssueInfo,CMS.Newsletters.ABTestInfo)">
            <summary>
            Tries to get the winner. If the winner can't be decided postpones the winner selection for an hour.
            Winner is send to the subscribers after the selection.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.WinnerTaskPostponer.PostponeScheduledTask(CMS.Newsletters.ABTestInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Creates new scheduled task for A/B test winner selection that is going to be run one hour after the current time. The ID of a new task is set to the <see cref="T:CMS.Newsletters.ABTestInfo"/>.
            </summary>
            <remarks>
            The method does not delete any possibly existing scheduled tasks.
            </remarks>
        </member>
        <member name="T:CMS.Newsletters.INewslettersActivityLogger">
            <summary>
            Provides possibility to log newsletters activities.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.INewslettersActivityLogger.LogUnsubscribeFromSingleNewsletterActivity(CMS.Newsletters.NewsletterInfo,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Logs unsubscription from single newsletter activity.
            </summary>
            <param name="newsletter">Newsletter contact has unsubscribed from</param>
            <param name="issueID">ID of issue used for unsubscribe</param>
            <param name="contactId">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.INewslettersActivityLogger.LogNewsletterSubscribingActivity(CMS.Newsletters.NewsletterInfo,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Logs subscribtion to newsletter activity.
            </summary>
            <param name="newsletter">Newsletter subscriber subscribed to</param>
            <param name="subscriberID">Specifies ID of the subscriber the activity is logged for</param>
            <param name="contactId">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.INewslettersActivityLogger.LogNewsletterOpenedEmailActivity(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.Int32)">
            <summary>
            Logs activity for opened newsletter email.
            </summary>
            <param name="issue">Opened issue</param>
            <param name="newsletter">Newsletter to which given issue belongs</param>
            <param name="contactId">ID of contact who performed activity</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.INewslettersActivityLogger.LogUnsubscribeFromAllNewslettersActivity(CMS.Newsletters.IssueInfo,System.Int32)">
            <summary>
            Logs unsubscription from all newsletters activity.
            </summary>
            <param name="issue">Issue used to unsubscribe from all</param>
            <param name="contactId">Unsubscribed contact ID</param>
        </member>
        <member name="M:CMS.Newsletters.INewslettersActivityLogger.LogNewsletterClickThroughActivity(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.Int32)">
            <summary>
            Logs newsletter click-through activity.
            </summary>
            <param name="originalUrl">URL of the click</param>
            <param name="issue">Issue where click happened</param>
            <param name="newsletter">Newsletter to which given issue belongs</param>
            <param name="contactId">ID of contact that performed activity</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="issue"/> or <paramref name="newsletter"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.NewsletterActivityGenerator">
            <summary>
            Contains methods for generating sample activities data.
            </summary>
            <exclude />
        </member>
        <member name="M:CMS.Newsletters.NewsletterActivityGenerator.GenerateNewsletterSubscribeActivity(CMS.Newsletters.NewsletterInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates newsletter subscribe <see cref="T:CMS.Activities.IActivityInfo"/> for given <paramref name="newsletter"/>.
            </summary>
            <param name="newsletter">Newsletter the activity is logged for</param>
            <param name="subscriberId">Subscriber to generate activity for</param>
            <param name="contactId">Contact to generate activity for</param>
            <param name="siteId">Site to generate activity in</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterClickThroughActivityInitializer">
            <summary>
            Newsletter email click through activity initializer.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterClickThroughActivityInitializer.#ctor(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="originalURL">URL of the origin</param>
            <param name="issue">Issue object</param>
            <param name="newsletter">Newsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterClickThroughActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Initializes <see cref="T:CMS.Activities.IActivityInfo"/> properties.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Newsletters.NewsletterClickThroughActivityInitializer.ActivityType">
            <summary>
            Activity type
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterClickThroughActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterOpenActivityInitializer">
            <summary>
            Provides initialization for newsletter activity.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterOpenActivityInitializer.#ctor(CMS.Newsletters.IssueInfo)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.NewsletterOpenActivityInitializer"/>.
            </summary>
            <param name="issue">Opened issue</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterOpenActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Initializes <see cref="T:CMS.Activities.IActivityInfo"/> properties.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Newsletters.NewsletterOpenActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterOpenActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewslettersActivityLogger">
            <summary>
            Provides methods for logging newsletters activities.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.#ctor(CMS.Activities.IActivityLogService)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Newsletters.NewslettersActivityLogger"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="activityLogService"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.LogUnsubscribeFromSingleNewsletterActivity(CMS.Newsletters.NewsletterInfo,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Logs unsubscription from single newsletter activity.
            </summary>
            <param name="newsletter">Newsletter contact has unsubscribed from</param>
            <param name="issueID">ID of issue used for unsubscribe</param>
            <param name="contactId">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.LogNewsletterSubscribingActivity(CMS.Newsletters.NewsletterInfo,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Logs subscribtion to newsletter activity.
            </summary>
            <param name="newsletter">Newsletter subscriber subscribed to</param>
            <param name="subscriberID">Specifies ID of the subscriber the activity is logged for</param>
            <param name="contactId">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of activity</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.LogNewsletterOpenedEmailActivity(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.Int32)">
            <summary>
            Logs activity for opened newsletter email.
            </summary>
            <param name="issue">Opened issue</param>
            <param name="newsletter">Newsletter to which given issue belongs</param>
            <param name="contactId">ID of contact who performed activity</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.LogUnsubscribeFromAllNewslettersActivity(CMS.Newsletters.IssueInfo,System.Int32)">
            <summary>
            Logs unsubscription from all newsletters activity.
            </summary>
            <param name="issue">Issue used to unsubscribe from all</param>
            <param name="contactId">Unsubscribed contact ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.LogNewsletterClickThroughActivity(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,System.Int32)">
            <summary>
            Logs newsletter click-through activity.
            </summary>
            <param name="originalUrl">URL of the click</param>
            <param name="issue">Issue where click happened</param>
            <param name="newsletter">Newsletter to which given issue belongs</param>
            <param name="contactId">ID of contact that performed activity</param>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="issue"/> or <paramref name="newsletter"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.NewslettersActivityLogger.AddContactToActivityAndLogIfEnabled(CMS.Activities.IActivityInitializer,System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Adds <paramref name="contactId"/> to the <paramref name="activityInitializer"/> if the value is not <c>null</c>. Then calls <see cref="T:CMS.Activities.IActivityLogService"/> and logs the activity using the given <paramref name="activityInitializer"/>.
            </summary>
            <param name="activityInitializer">Activity initializer used to initialize logged activity</param>
            <param name="logActivity">Flag from <see cref="T:CMS.Newsletters.NewsletterInfo"/> specifying whether the logging is enabled</param>
            <param name="contactId">If set overrides <see cref="P:CMS.Activities.ActivityInfo.ActivityContactID" /> of <paramref name="activityInitializer"/></param>
            <param name="loggingDisabledInAdministration"><c>True</c> if activities should not be logged in administration</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterSubscribingActivityInitializer">
            <summary>
            Provides initialization for Newsletter subscribing activity.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSubscribingActivityInitializer.#ctor(CMS.Newsletters.NewsletterInfo,System.Nullable{System.Int32})">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.NewsletterSubscribingActivityInitializer"/>.
            </summary>
            <param name="newsletter">Newsletter subscriber subscribed to</param>
            <param name="subscriberID">Specifies ID of the subscriber the activity is initialized for</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSubscribingActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Initializes <see cref="T:CMS.Activities.IActivityInfo"/> properties.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscribingActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscribingActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterUnsubscribingActivityInitializer">
            <summary>
            Provides initialization for Unsubscription from a single email campaign activity.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterUnsubscribingActivityInitializer.#ctor(CMS.Newsletters.NewsletterInfo,System.Nullable{System.Int32})">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.NewsletterUnsubscribingActivityInitializer"/>.
            </summary>
            <param name="newsletter">Newsletter object</param>
            <param name="issueID">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterUnsubscribingActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Initializes <see cref="T:CMS.Activities.IActivityInfo"/> properties.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Newsletters.NewsletterUnsubscribingActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterUnsubscribingActivityInitializer.SettingsKeyName">
            <summary>
            Settings key name.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterUnsubscribingFromAllActivityInitializer">
            <summary>
            Activity for unsubscribe from all marketing communication (all newsletters). 
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterUnsubscribingFromAllActivityInitializer.#ctor(CMS.Newsletters.IssueInfo)">
            <summary>
            Default constructor.
            </summary>
            <param name="issue">Issue object</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterUnsubscribingFromAllActivityInitializer.Initialize(CMS.Activities.IActivityInfo)">
            <summary>
            Initializes <see cref="T:CMS.Activities.IActivityInfo"/> properties.
            </summary>
            <param name="activity">Activity info</param>
        </member>
        <member name="P:CMS.Newsletters.NewsletterUnsubscribingFromAllActivityInitializer.ActivityType">
            <summary>
            Activity type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterUnsubscribingFromAllActivityInitializer.SettingsKeyName">
            <summary>
            Activity settings key name, used to check whether activity logging is enabled.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterSubscriptionAction">
            <summary>
            Class for subscribe/unsubscribe contact to newsletter
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSubscriptionAction.ACTION_SUBSCRIBE">
            <summary>
            Subscribe to newsletter action parameter value.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSubscriptionAction.ACTION_UNSUBSCRIBE">
            <summary>
            Unsubscribe from newsletter action parameter value.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSubscriptionAction.NEWSLETTER_NAME_PARAMETER_NAME">
            <summary>
            Newsletter name parameter name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSubscriptionAction.SUBSCRIBE_ACTION_PARAMETER_NAME">
            <summary>
            Subscribe action parameter name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSubscriptionAction.INHERIT_DOUBLE_OPTIN_PARAMETER_NAME">
            <summary>
            Inherit double opt-in setting parameter name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSubscriptionAction.SITE_PARAMETER_NAME">
            <summary>
            Site parameter name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscriptionAction.NewsletterName">
            <summary>
            Newsletter identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscriptionAction.Action">
            <summary>
            Gets current action - 0 for SUBSCRIBE, 1 for UNSUBSCRIBE contact.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscriptionAction.InheritDoubleOptIn">
            <summary>
            If true, action uses subscribe settings from it's newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterSubscriptionAction.SiteName">
            <summary>
            Site name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSubscriptionAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSubscriptionAction.HasActiveSubscription(CMS.ContactManagement.ContactInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.ISubscriptionService)">
            <summary>
            Gets a value indicating whether the contact has active subscription.
            Contact can be subscribed directly or using contact group.
            Checks only active subscriptions (not approved one are omitted, unsubscriptions are reflected).
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SendNewsletterIssueAction">
            <summary>
            Class for Send newsletter issue action
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SendNewsletterIssueAction.NEWSLETTER_ISSUE_PARAMETER_NAME">
            <summary>
            Newsletter Issue parameter name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SendNewsletterIssueAction.SITE_NAME_PARAMETER_NAME">
            <summary>
            Site name parameter name.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SendNewsletterIssueAction.LAST_SENT_NEWSLETTER_ISSUE_GUID_KEY">
            <summary>
            Key for element containing GUID of last sent newsletter.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SendNewsletterIssueAction.LAST_SENT_NEWSLETTER_ISSUE_SITEID_KEY">
            <summary>
            Key for element containing Site ID of last sent newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SendNewsletterIssueAction.NewsletterIssue">
            <summary>
            Newsletter issue identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SendNewsletterIssueAction.SiteName">
            <summary>
            Site name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SendNewsletterIssueAction.Execute">
            <summary>
            Executes current action
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ContactProvider">
            <summary>
            Provides methods for retrieving and preparing <see cref="T:CMS.ContactManagement.ContactInfo" /> objects so it can be subscribed to the newsletter.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ContactProvider.GetContactForSubscribing(System.String,System.String,System.String)">
            <summary>
            Gets contact associated with <paramref name="email"/>.
            When contact doesn't exist, contact is created and inserted to database.
            </summary>
            <param name="email">Email used to get or update contact.</param>
            <param name="firstName">First name used to update contact.</param>
            <param name="lastName">Last name used to update contact.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="email"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="email" /> is not valid email address.</exception>
            <returns>Retrieved contact.</returns>
        </member>
        <member name="M:CMS.Newsletters.ContactProvider.GetContactForSubscribing(CMS.Membership.UserInfo)">
            <summary>
            Gets contact associated with <paramref name="user"/>.
            When contact doesn't exist, contact is created and inserted to database
            </summary>
            <param name="user">User used to get and update contact.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Thrown when user's email address is not valid.</exception>
            <returns>Retrieved contact.</returns>
        </member>
        <member name="M:CMS.Newsletters.ContactProvider.GetContactFromContextOrByEmail(System.String)">
            <summary>
            Get contact from context. If it's not possible (wrong license, disabled OM or current contact contains different email etc.)
            try to get contact from the DB with the specified email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ContactProvider.TryGetCurrentContact(System.String)">
            <summary>
            Get contact from context if possible (EMS license is used, OM is enabled etc.) 
            but only when this contact doesn't contain email or contains the same email as specified in <paramref name="email"/> parameter.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IContactProvider">
            <summary>
            Provides methods for retrieving and preparing <see cref="T:CMS.ContactManagement.ContactInfo" /> objects so it can be subscribed to the newsletter.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IContactProvider.GetContactForSubscribing(System.String,System.String,System.String)">
            <summary>
            Gets contact associated with <paramref name="email"/>.
            When contact doesn't exist, contact is created and inserted to database.
            </summary>
            <param name="email">Email used to get or update contact.</param>
            <param name="firstName">First name used to update contact.</param>
            <param name="lastName">Last name used to update contact.</param>
            <returns>Retrieved contact.</returns>
        </member>
        <member name="M:CMS.Newsletters.IContactProvider.GetContactForSubscribing(CMS.Membership.UserInfo)">
            <summary>
            Gets contact associated with <paramref name="user"/>.
            When contact doesn't exist, contact is created and inserted to database
            </summary>
            <param name="user">User used to get and update contact.</param>
            <returns>Retrieved contact.</returns>
        </member>
        <member name="T:CMS.Newsletters.GeneratePreviewEventArgs">
            <summary>
            Event arguments for <see cref="T:CMS.Newsletters.GeneratePreviewHandler"/> handler type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GeneratePreviewEventArgs.Subscriber">
            <summary>
            Subscriber for which the e-mail preview is being generated. Can be null if the issue is being generated for generic subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GeneratePreviewEventArgs.Issue">
            <summary>
            Issue for which the e-mail preview is being generated.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GeneratePreviewEventArgs.PreviewHtml">
            <summary>
            Final HTML, that will get shown in preview. Will not modify content if left empty.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.GeneratePreviewHandler">
            <summary>
            Handler for event <see cref="F:CMS.Newsletters.NewsletterEvents.GeneratePreview"/>. Alteration of what is being displayed as a preview e-mail for a subscriber can
            be done through 
            </summary>
        </member>
        <member name="M:CMS.Newsletters.GeneratePreviewHandler.Start(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo,System.String)">
            <summary>
            Starts the event
            </summary>
            <param name="issue">Issue for which the e-mail preview is being generated</param>
            <param name="subscriber">Subscriber for which the e-mail preview is being generated</param>
            <param name="previewHtml">Final HTML, that will get shown in preview. This parameter is readable from <see cref="P:CMS.Newsletters.GeneratePreviewEventArgs.PreviewHtml"/> property when the event is finished.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.GenerateQueueItemsEventArgs">
            <summary>
            Event arguments for <see cref="F:CMS.Newsletters.NewsletterEvents.GenerateQueueItems"/> event.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.GenerateQueueItemsEventArgs.mGeneratedEmails">
            <summary>
            Backing field for <see cref="P:CMS.Newsletters.GenerateQueueItemsEventArgs.GeneratedEmails"/> property.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.Subscriber">
            <summary>
            Subscriber to which the issue is being sent. Can be null to indicate that issue is being sent to all subscribers.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.Issue">
            <summary>
            Issue that's being sent.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.EmailAddressBlocker">
            <summary>
            Every email should be checked using this email address blocker before it is added to the email queue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GenerateQueueItemsEventArgs.GeneratedEmails">
            <summary>
            E-mail addresses that have been already added to the queue. Used to remove duplicates throughout different subscriber types.
            </summary>
            <remarks>
            Used only for <see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter"/> issue type when issue is being sent to all subscribers (<see cref="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo)"/>).
            </remarks>
        </member>
        <member name="T:CMS.Newsletters.GenerateQueueItemsHandler">
            <summary>
            Handler for <see cref="F:CMS.Newsletters.NewsletterEvents.GenerateQueueItems"/> event.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.GenerateQueueItemsHandler.Start(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo,CMS.Newsletters.IEmailAddressBlocker)">
            <summary>
            Starts event.
            </summary>
            <param name="issue">Issue which is being sent</param>
            <param name="subscriber">Subscriber to which an issue is being sent. Can be null to sent issue to all subscribers</param>
            <param name="emailAddressBlocker">Every email should be checked using this email address blocker before it is added to the email queue</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.LinksEventArgs">
            <summary>
            Event arguments for the <see cref="T:CMS.Newsletters.LinksHandler"/>
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinksEventArgs.IssueInfo">
            <summary>
            Issue containing the link.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinksEventArgs.NewsletterInfo">
            <summary>
            Newsletter the <see cref="P:CMS.Newsletters.LinksEventArgs.IssueInfo"/> is related to.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinksEventArgs.AdditionalParameters">
            <summary>
            Collection of additional parameters. Most of the parameters are obtained from the query string.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.LinksHandler">
            <summary>
            Handler raised when system link in email campaign is clicked and tracked, e.g. for logging email opening and email link tracking.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterEvents">
            <summary>
            Newsletter events.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.ResolveMacros">
            <summary>
            Fired when all newsletter text macros are being resolved. This includes:
            - resolving context-free macros for the whole issue before sending
            - resolving macros with Subscriber context for each recipient
            - resolving macros in the e-mail preview mode
            - when link tracking is enabled and tracking link is being changed to the original one, macros in original link are resolved
            - ...
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.GenerateQueueItems">
            <summary>
            Fired when issue is being sent in newsletter. If you cancel this event, e-mails won't be generated into newsletter queue (see <see cref="T:CMS.Newsletters.EmailQueueItemInfo"/>) and sent afterwards.
            You can use this event to manually add items to queue for your custom subscriber.
            </summary>
            <remarks>
            This event fires either if an issue is being sent to all subscribers (see <see cref="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo)"/>)
            or when sent to just one subscriber (<see cref="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)"/>).
            </remarks>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.GeneratePreview">
            <summary>
            Event that is called when preview is being generated for a subscriber. Altering of preview content that is being displayed is available through 
            <see cref="P:CMS.Newsletters.GeneratePreviewEventArgs.PreviewHtml"/> property.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.SubscriberUnsubscribes">
            <summary>
            Fired when email of subscriber is being unsubscribed.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.SubscriberOpensEmail">
            <summary>
            Raised when email is opened by the subscriber and tracking of email opening is enabled.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterEvents.SubscriberClicksTrackedLink">
            <summary>
            Raised when subscriber clicks any of the email link and tracking of email link is enabled.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ResolveMacrosEventArgs">
            <summary>
            Event arguments for the <see cref="T:CMS.Newsletters.ResolveMacrosHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.MacroResolver">
            <summary>
            Macro resolver which will be used to resolve macros.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.TextToResolve">
            <summary>
            Text before resolving on the Before event or already resolved text on the After event.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.Newsletter">
            <summary>
            Text which is being resolved belongs to the issue in this newsletter.
            Can be null if there is no corresponding newsletter available.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ResolveMacrosEventArgs.IssueInfo">
            <summary>
            Text which is being resolved belongs to this issue.
            Can be null if there is no corresponding issue available.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ResolveMacrosHandler">
            <summary>
            Handler for the event when macros are being resolved in the newsletter module.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ResolveMacrosHandler.StartEvent(CMS.MacroEngine.MacroResolver,System.String,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Initiates event handling.
            </summary>
            <param name="macroResolver">Macro resolver which will be used to resolve macros in the text</param>
            <param name="textToResolve">Text which will be resolved</param>
            <param name="newsletter">Text which is being resolved belongs to the issue in this newsletter</param>
            <param name="issue">Text which is being resolved belongs to this issue</param>
        </member>
        <member name="T:CMS.Newsletters.UnsubscriptionEventArgs">
            <summary>
            Event arguments for the <see cref="T:CMS.Newsletters.UnsubscriptionHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionEventArgs.Newsletter">
            <summary>
            Newsletter that subscriber is unsubscribing from.
            Can be null in case that subscriber unsubscribed from all newsletter communication.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionEventArgs.Email">
            <summary>
            Email address that is being unsubscribed.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionEventArgs.IssueID">
            <summary>
            ID of issue that subscriber used for unsubscription. Is present only when IssueID is known (is null for example when unsubscribing from administration UI or when issue was deleted).
            </summary>
        </member>
        <member name="T:CMS.Newsletters.UnsubscriptionHandler">
            <summary>
            Handler for the event when subscriber email is being unsubscribed.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for a generic dictionary.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Extensions.DictionaryExtensions.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``1})">
            <summary>
            Performs the specified action on each element of the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="action">The action</param>
        </member>
        <member name="T:CMS.Newsletters.Extensions.Pop3ClientExtensions">
            <summary>
            Contains extension methods for POP3 client to simplify message processing.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Extensions.Pop3ClientExtensions.GetSafeMessage(MailKit.Net.Pop3.Pop3Client,System.Int32)">
            <summary>
            Fetches a message from the server and parses it, consuming and logging any exceptions in the process.
            </summary>
            <param name="pop3Client">POP3 client</param>
            <param name="messageNumber">Message number on the server</param>
            <returns>Message object</returns>
        </member>
        <member name="T:CMS.Newsletters.Internal.EmailTemplateInfoExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.Newsletters.EmailTemplateInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailTemplateInfoExtensions.ContainsPreheaderMacro(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Indicates whether the template code contains preheader macro.
            </summary>
            <remarks>
            The method doesn't work correctly in certain cases such as open macros, macro in comments...
            </remarks>
        </member>
        <member name="T:CMS.Newsletters.Internal.EmailBuilderEventArgs">
            <summary>
            Event arguments for Email Builder related events.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.EmailBuilderEventArgs.NewsletterID">
            <summary>
            Newsletter ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.EmailBuilderEventArgs.IssueID">
            <summary>
            Email issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.EmailBuilderEventArgs.SelectedTabIndex">
            <summary>
            Indicates which tab should be selected after the reload.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.EmailBuilderEventArgs.FullRefresh">
            <summary>
            Indicates whether the full refresh needs to be performed when email properties are saved.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailBuilderEventArgs.#ctor">
            <summary>
            This constructor sets <see cref="P:CMS.Newsletters.Internal.EmailBuilderEventArgs.FullRefresh"/> to <c>true</c>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailBuilderEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Basic constructor with parameters for the Email builder events.
            </summary>
            <param name="newsletterId">Newsletter identifier.</param>
            <param name="issueId">Issue identifier.</param>
            <param name="tabIndex">Index of the tab which should be selected after reload.</param>
        </member>
        <member name="T:CMS.Newsletters.Internal.EmailHtmlModifier">
            <summary>
            Parses input HTML code to DOM structure and provides basic operations with it.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.EmailHtmlModifier.ParsingErrors">
            <summary>
            Errors occurred during parsing input HTML code.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. If any errors occurred while parsing input <paramref name="htmlCode"/>, they will be stored in <see cref="P:CMS.Newsletters.Internal.EmailHtmlModifier.ParsingErrors"/>.
            </summary>
            <param name="htmlCode">Input HTML code.</param>
            <param name="isFragment">Indicates if the input HTML code is just a fragment, not complete document.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="htmlCode"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.AppendElementToBody(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Appends element to body with specific attributes and inner text.
            </summary>
            <param name="elementName">HTML element name.</param>
            <param name="attributes">Attributes collection.</param>
            <param name="innerText">Inner text of element.</param>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.AppendElementToHead(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Appends element to head with specific attributes and inner text.
            </summary>
            <param name="elementName">HTML element name.</param>
            <param name="attributes">Attributes collection.</param>
            <param name="innerText">Inner text of element.</param>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.GetHtml">
            <summary>
            Renders back result HTML including all modifications.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.DisableLinks">
            <summary>
            Ensures that the <c>a</c> elements are not clickable. 
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.CreateElement(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Constructs and returns element with optional attributes defined.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHtmlModifier.ParseError(System.Object,AngleSharp.Dom.Events.Event)">
            <summary>
            Adds entry to <see cref="P:CMS.Newsletters.Internal.EmailHtmlModifier.ParsingErrors"/> collection when some HTML DOM error occurs.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Internal.IEmailHtmlModifier">
            <summary>
            Parses input HTML code to DOM structure and provides basic operations with it.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.IEmailHtmlModifier.AppendElementToBody(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Appends element to body with specific attributes and inner text.
            </summary>
            <param name="elementName">HTML element name.</param>
            <param name="attributes">Attributes collection.</param>
            <param name="innerText">Inner text of element.</param>
        </member>
        <member name="M:CMS.Newsletters.Internal.IEmailHtmlModifier.AppendElementToHead(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Appends element to head with specific attributes and inner text.
            </summary>
            <param name="elementName">HTML element name.</param>
            <param name="attributes">Attributes collection.</param>
            <param name="innerText">Inner text of element.</param>
        </member>
        <member name="M:CMS.Newsletters.Internal.IEmailHtmlModifier.DisableLinks">
            <summary>
            Ensures that the <c>a</c> elements are not clickable. 
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.IEmailHtmlModifier.GetHtml">
            <summary>
            Renders back result HTML including all modifications.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Internal.IIssueStatisticsCalculator">
            <summary>
            Defines properties containing statistics data calculated for <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <remarks>Statistics are cached after calculation and parts of calculation uses these cached values. In order to get most up-to-date results, calculate all required statistics without unnecessary delays between them.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.DeliveredEmails">
            <summary>
            Number of delivered emails.
            </summary>
            <remarks>If bounced emails are not monitored, all sent emails are considered to be also delivered.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.OpenedEmails">
            <summary>
            Number of opened emails.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.UniqueClicks">
            <summary>
            Number of clicks on email links. Multiple clicks on same link in same email are counted as a single click.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.TotalClicks">
            <summary>
            Number of clicks on email links, including multiple clicks on same link in same email.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.BounceRatio">
            <summary>
            Ratio of emails bounced back to emails being sent.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.DeliveryRatio">
            <summary>
            Ratio of <see cref="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.DeliveredEmails"/> to sent emails.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.OpenRatio">
            <summary>
            Ratio of <see cref="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.OpenedEmails"/> to <see cref="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.DeliveredEmails"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.UniqueClickRatio">
            <summary>
            Ratio of unique clicks on email links (<see cref="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.UniqueClicks"/>) to <see cref="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.DeliveredEmails"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.UnsubscriptionRatio">
            <summary>
            Ratio of unsubscriptions count to <see cref="P:CMS.Newsletters.Internal.IIssueStatisticsCalculator.DeliveredEmails"/>.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Internal.IssueStatisticsCalculator">
            <summary>
            Class providing calculation of various statistics of <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <remarks>Statistics are cached after calculation and parts of calculation uses these cached values. In order to get most up-to-date results, calculate all required statistics without unnecessary delays between them.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.DeliveredEmails">
            <summary>
            Number of delivered emails.
            </summary>
            <remarks>If bounced emails are not monitored, all sent emails are considered to be also delivered.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.OpenedEmails">
            <summary>
            Number of opened emails.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.UniqueClicks">
            <summary>
            Number of clicks on email links. Multiple clicks on same link in same email are counted as a single click.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.TotalClicks">
            <summary>
            Number of clicks on email links, including multiple clicks on same link in same email.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.BounceRatio">
            <summary>
            Ratio of emails bounced back to emails being sent.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.DeliveryRatio">
            <summary>
            Ratio of <see cref="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.DeliveredEmails"/> to sent emails.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.OpenRatio">
            <summary>
            Ratio of <see cref="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.OpenedEmails"/> to <see cref="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.DeliveredEmails"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.UniqueClickRatio">
            <summary>
            Ratio of unique clicks on email links (<see cref="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.UniqueClicks"/>) to <see cref="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.DeliveredEmails"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.UnsubscriptionRatio">
            <summary>
            Ratio of unsubscriptions count to <see cref="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.DeliveredEmails"/>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Internal.IssueStatisticsCalculator.IssueAndVariantsIDs">
            <summary>
            List of ID of <see cref="T:CMS.Newsletters.IssueInfo"/> and all its A/B test variants.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.IssueStatisticsCalculator.#ctor(CMS.Newsletters.IssueInfo)">
            <summary>
            Creates new instance of <see cref="T:CMS.Newsletters.Internal.IssueStatisticsCalculator"/> for calculating statistics of given <paramref name="issue"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is <c>null</c>.</exception>
            <param name="issue">Issue which statistics to calculate.</param>
        </member>
        <member name="T:CMS.Newsletters.Internal.SenderRetriever">
            <summary>
            Retrieves sender email and name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.SenderRetriever.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Creates an instance of the <see cref="T:CMS.Newsletters.Internal.SenderRetriever"/> class.
            </summary>
            <param name="issue">Issue to be used for retrieving sender.</param>
            <param name="newsletter">Newsletter to be used for retrieving sender.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Internal.SenderRetriever.GetFrom">
            <summary>
            Gets sender for message From value.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.SenderRetriever.GetReplyTo">
            <summary>
            Gets sender for message Reply-To value.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.SenderRetriever.GetSenderName">
            <summary>
            Gets sender name for an email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.SenderRetriever.GetSenderEmail">
            <summary>
            Gets sender email address for an email.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Internal.EmailHashService">
            <summary>
            Provides implementation of <see cref="T:CMS.Newsletters.IEmailHashValidator"/> and <see cref="T:CMS.Newsletters.IEmailHashGenerator"/> for manipulating with validation hash.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHashService.#ctor">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.Internal.EmailHashService"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHashService.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.Internal.EmailHashService"/> with provided salt. Only for test purposes.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHashService.GetEmailHash(System.String)">
            <summary>
            Gets hash for given <paramref name="emailAddress"/>.
            </summary>
            <param name="emailAddress">Email address tracked link is sent to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="emailAddress"/> is null</exception>
            <returns>Hash obtained from given input parameters</returns>
        </member>
        <member name="M:CMS.Newsletters.Internal.EmailHashService.ValidateEmailHash(System.String,System.String)">
            <summary>
            Validates given <paramref name="hash"/> against <paramref name="emailAddress"/>.
            </summary>
            <param name="hash">Hash to be validated</param>
            <param name="emailAddress">Email address tracked link is sent to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="emailAddress"/></exception>
            <returns>True, if given <paramref name="hash"/> is valid; otherwise, false</returns>
        </member>
        <member name="T:CMS.Newsletters.IssueExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.Newsletters.IssueInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueExtensions.GetVariantName(CMS.Newsletters.IssueInfo)">
            <summary>
            Returns the name of issue variant.
            </summary>
            <param name="issue">Issue variant.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueExtensions.IsOriginalVariant(CMS.Newsletters.IssueInfo)">
            <summary>
            Indicates whether the issue is a variant that represents original issue.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueExtensions.HasWidgetWithUnfilledRequiredProperty(CMS.Newsletters.IssueInfo)">
            <summary>
            Indicates whether the issue has a widget with unfilled required property.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueExtensions.HasWidgetWithMissingDefinition(CMS.Newsletters.IssueInfo)">
            <summary>
            Indicates whether the issue has a widget with missing widget definition.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.RecipientsExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.Newsletters.IssueInfo"/> which helps to retrieve an issue recipients.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.RecipientsExtensions.GetRecipientsProvider(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Returns recipients provider for given <paramref name="newsletter"/>. More information about the provider can be found here <see cref="T:CMS.Newsletters.IRecipientsProvider"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when newsletter is not type of <see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter"/></exception>
        </member>
        <member name="M:CMS.Newsletters.RecipientsExtensions.GetRecipientsProvider(CMS.Newsletters.IssueInfo)">
            <summary>
            Returns recipients provider for given <paramref name="issue"/>. More information about the provider can be found here <see cref="T:CMS.Newsletters.IRecipientsProvider"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when no matching provider has been found for given newsletter type of (<see cref="T:CMS.Newsletters.EmailCommunicationTypeEnum"/>)</exception>
        </member>
        <member name="M:CMS.Newsletters.RecipientsExtensions.WithoutUnsubscribed(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Restricts contact query (<paramref name="contacts"/>) to return only subscribed contacts, all opted out recipients are removed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.RecipientsExtensions.WithoutBounces(CMS.DataEngine.ObjectQuery{CMS.ContactManagement.ContactInfo},System.Int32)">
            <summary>
            Restricts contact query (<paramref name="contacts"/>) to return only not bounced contacts, the limit is given in <paramref name="bounceLimit" />.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.GetEmailBrowserContentService.RequestStatusEnum">
            <summary>
            Gets current request URL rewriting status.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.GetEmailBrowserContentService.GetActionResultInternal">
            <summary>
            Process the request.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.INewsletterLicenseCheckerService">
            <summary>
            Provides methods to check newsletter licence. 
            </summary>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.CheckLicense(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Checks the license for insert for a new newsletter or for edit in other cases.
            </summary>
            <param name="newsletter">Newsletter</param>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.ClearLicNewsletter(System.Boolean)">
            <summary>
            Clear license newsletter hashtable.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.IsABTestingAvailable">
            <summary>
            Checks if newsletter A/B testing is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.IsTrackingAvailable">
            <summary>
            Checks if newsletter tracking (open e-mail, click through and bounces) is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under administration interface</param>
        </member>
        <member name="M:CMS.Newsletters.INewsletterLicenseCheckerService.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="T:CMS.Newsletters.IDraftSender">
            <summary>
            Interface for sending drafts of newsletter issues (<see cref="T:CMS.Newsletters.IssueInfo"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IDraftSender.Send(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Sends the <paramref name="issue"/> as draft to given e-mail addresses (<paramref name="recipients"/>).
            </summary>
            <param name="issue">Issue to be sent as draft.</param>
            <param name="recipients">Recipients delimited by semicolon.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="recipients"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when newsletter the <paramref name="issue"/> is assigned to was not found.</exception>
        </member>
        <member name="M:CMS.Newsletters.IDraftSender.SendAsync(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Asynchronously sends the <paramref name="issue"/> as draft to given e-mail addresses (<paramref name="recipients"/>).
            </summary>
            <param name="issue">Issue to be sent as draft.</param>
            <param name="recipients">Recipients delimited by semicolon.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="recipients"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.SubscribedToNewsletter(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Checks whether contact is subscribed to the given newsletter. Check is made based on the contact's email address. If
            there is a subscriber with the contact's email subscribed to the newsletter, it means contact is subscribed.
            Performs check against the Unsubscription table to determine, whether the contact is unsubscripted from the newsletter or not.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.OpenedNewsletterIssue(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact opened the specified newsletter issue
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.ClickedLinkInNewsletterIssue(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact clicked link in the specified newsletter issue.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.UnsubscribedFromAllEmails(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact unsubscribed from all emails in the last X days.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.ClickedLinkInNewsletter(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if the contact clicked link in specified newsletter.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.ClickedLinkInNewsletter(System.Object,System.String,System.Int32)">
            <summary>
            Returns true if the contact clicked link in specified newsletter.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="newsletterName">Newsletter name</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.InteractedWithNewsletterIssue(System.Object,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Returns true if the contact opened or clicked link in the specified newsletter issue or its variant.
            </summary>
            <param name="contact">Contact that should be checked.</param>
            <param name="issueGuid">Newsletter issue GUID.</param>
            <param name="click">Indicates whether contact should have clicked the newsletter issue or just open it.</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied).</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.SubscribedToNewsletter(System.Object,System.Guid,System.Int32)">
            <summary>
            Checks whether contact is subscribed to the given newsletter. Check is made based on the contact's email address. If
            there is a subscriber with the contact's email subscribed to the newsletter, it means contact is subscribed.
            Performs check against the Unsubscription table to determine, whether the contact is unsubscripted from the newsletter or not.
            </summary>
            <param name="contact">Contact whose email should be checked</param>
            <param name="newsletterGuid">Newsletter GUID</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.Newsletters.ContactNewsletterMacroMethods.UnsubscribedFromAllEmails(System.Object,System.Int32)">
            <summary>
            Returns true if the contact unsubscribed from all emails in the last X days.
            </summary>
            <param name="contact">Contact which should be checked</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="T:CMS.Newsletters.EmailContentMacroResolver">
            <summary>
            Resolves macros for email content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailContentMacroResolver.#ctor(CMS.Newsletters.EmailContentMacroResolverSettings,CMS.Newsletters.ISubscriberEmailRetriever)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.EmailContentMacroResolver"/> class.
            </summary>
            <param name="settings">Settings for the resolver.</param>
            <param name="subscriberEmailRetriever">Service that retrieves email for all types of subscribers. When not set registered implementation is used.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailContentMacroResolver.Resolve(System.String)">
            <summary>
            Resolves the dynamic field macros, replaces the {%dynamicfieldname%} macros with the dynamic field values.
            </summary>
            <param name="text">Text containing dynamic fields to resolve.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailContentMacroResolver.GetWidgetContentMacroResolver(CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Creates child instance of current resolver with data context of given <paramref name="widget"/> configuration properties.
            </summary>
            <param name="widget">Widget configuration.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailContentMacroResolver.GetResolver">
            <summary>
            Gets initialized macro resolver.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailContentMacroResolverSettings">
            <summary>
            Configuration settings for email content macro resolver.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.Subscriber">
            <summary>
            Data context of newsletter subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.Newsletter">
            <summary>
            Data context of newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.Subscription">
            <summary>
            Data context of subscription.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.Issue">
            <summary>
            Data context of newsletter issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.Site">
            <summary>
            Data context of newsletter site.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.Name">
            <summary>
            Name of the resolver.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.IsPreview">
            <summary>
            Indicates if the macros should be resolved in context of an email preview.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.KeepUnresolvedMacros">
            <summary>
            If true, unresolved macros are kept in their original form.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.DisableContextMacros">
            <summary>
            If true, all the context macros are disabled (only base MacroResolver sources are checked).
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailContentMacroResolverSettings.UseFakeData">
            <summary>
            Indicates if resolver uses fake (dummy, not real data) objects.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IEmailContentMacroResolver">
            <summary>
            Interface for email content macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailContentMacroResolver.Resolve(System.String)">
            <summary>
            Resolves the dynamic field macros, replaces the {%dynamicfieldname%} macros with the dynamic field values.
            </summary>
            <param name="text">Text containing dynamic fields to resolve.</param>
        </member>
        <member name="M:CMS.Newsletters.IEmailContentMacroResolver.GetWidgetContentMacroResolver(CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Creates child instance of current resolver with data context of given <paramref name="widget"/> configuration properties.
            </summary>
            <param name="widget">Widget configuration.</param>
        </member>
        <member name="T:CMS.Newsletters.IssueInfoMethods">
            <summary>
            Macro methods for <see cref="T:CMS.Newsletters.IssueInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoMethods.GetAllRecipients(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns all recipients for the given issue belonging to the email campaign.
            </summary>
            <remarks>The method returns recipients only for email campaigns (<see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.EmailCampaign"/>). 
            It does not return recipients for newsletters (<see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter"/>).</remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoMethods.GetMarketableRecipientsCount(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns count of all contacts subscribed to given issue, excludes opted out contacts and bounced.
            </summary>
            <remarks>The method returns recipients only for email campaigns (<see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.EmailCampaign"/>). 
            It does not return recipients for newsletters (<see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter"/>).</remarks>
        </member>
        <member name="T:CMS.Newsletters.MacroRuleMetadataContainer">
            <summary>
            Class for registering <see cref="T:CMS.ContactManagement.MacroRuleMetadata"/> to the system.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.MacroRuleMetadataContainer.RegisterNewsletterMetadata">
            <summary>
            Registers default metadata for existing macro rules.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.CMSContactHasClickedALinkInNewsletterInTheLastXDaysInstanceTranslator">
            <summary>
            Translates CMSContactHasClickedALinkInNewsletterInTheLastXDays Macro rule.
            Contact {_perfectum} clicked a link in newsletter {item} in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasClickedALinkInNewsletterIssueInLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasClickedALinkInNewsletterIssueInLastXDays Macro rule.
            Contact {_perfectum} clicked a link in newsletter issue {issue} in the last {days} days.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasClickedALinkInNewsletterIssueInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasClickedALinkInNewsletterIssue Macro rule.
            Contact {_perfectum} clicked a link in newsletter issue {issue}
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasOpenedSpecifiedNewsletterInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactHasOpenedSpecifiedNewsletterInTheLastXDays Macro rule.
            Contact {_perfectum} opened newsletter {item} in the last {days} day(s)
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasOpenedSpecifiedNewsletterIssueInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Contact {_perfectum} opened newsletter issue {issue}.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasOpenedSpecifiedNewsletterIssueInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Contact {_perfectum} opened newsletter issue {issue} in the last {days} days
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasUnsubscribedFromAllEmailsInTheLastXDaysInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            CMSContactHasUnsubscribedFromAllEmailsInTheLastXDays
            {_perfectum}Contact.UnsubscribedFromAllEmails(ToInt({days}))
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactHasUnsubscribedFromAllEmailsInTheLastXDaysInstanceTranslator.TranslateInternal(System.Boolean,System.Int32)">
            <summary>
            CMSContactHasUnsubscribedFromAllEmailsInTheLastXDays
            {_perfectum}Contact.UnsubscribedFromAllEmails(ToInt({days}))
            </summary>
            <param name="getUnsubscribed">If true, unsubscribed contacts will be returned, otherwise not unsubscribed</param>
            <param name="lastXDays">Constraint for last X days (if zero or negative value is given, no constraint is applied)</param>
        </member>
        <member name="M:CMS.Newsletters.CMSContactIsSubscribedToSpecifiedNewsletterInstanceTranslator.TranslateInternal(CMS.Base.StringSafeDictionary{CMS.MacroEngine.MacroRuleParameter})">
            <summary>
            Translates CMSContactIsSubscribedToSpecifiedNewsletter Macro rule.
            Contact {_is} subscribed to newsletter {item}
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CMSContactIsSubscribedToSpecifiedNewsletterInstanceTranslator.GetContactIdsForSingleNewsletter(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IUnsubscriptionProvider)">
            <summary>
            Get IDs of all contacts that are subscribed to given <paramref name="newsletter"/>. Removes contacts that have unsubscription in the Unsubscription table.
            </summary>
            <param name="newsletter">Newsletter the contacts are subscribed to</param>
            <param name="unsubscriptionProvider">Service for getting emails unsubscribed from given <paramref name="newsletter"/></param>
            <returns>Object query containing all IDs of contacts subscribed to given <paramref name="newsletter"/></returns>
        </member>
        <member name="T:CMS.Newsletters.IssueActivitiesRetriever">
            <summary>
            Encapsulates methods to retrieve data of activities made on newsletter issues.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueActivitiesRetriever.GetActivitiesQuery(System.Guid,System.String)">
            <summary>
            Returns activities of given <paramref name="activityType"/> which contacts have made on a specified <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <param name="issueGuid">Issue GUID.</param>
            <param name="activityType">Activity type.</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterMacroConstants">
            <summary>
            Class containing all newsletters macro constants that can be used in templates or directly in issues.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterMacroConstants.Email">
            <summary>
            Macro that evaluates <see cref="T:CMS.Newsletters.Email"/>.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterMacroConstants.EmailFeed">
            <summary>
            Macro that evaluates <see cref="T:CMS.Newsletters.EmailFeed"/>.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterMacroConstants.Recipient">
            <summary>
            Macro that evaluates <see cref="T:CMS.Newsletters.Recipient"/>.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterMacroConstants.Advanced">
            <summary>
            Macro that evaluates <see cref="T:CMS.Newsletters.Advanced"/>.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterResolvers">
            <summary>
            Provides macro resolvers for newsletters.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterResolvers.Register">
            <summary>
            Registers newsletter resolvers to the resolvers storage to be accessible via names.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterResolvers.GetVirtualResolver(System.Boolean)">
            <summary>
            Gets resolver with fake objects used for macro editor intellisense.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.RecipientMethods">
            <summary>
            Macro methods for <see cref="T:CMS.Newsletters.Recipient"/> class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.RecipientMethods.IsInPersona(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Indicates if the recipient is assigned to a specified persona(s).
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterInfoMethods">
            <summary>
            Macro methods for class NewsletterInfo
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoMethods.GetNiceName(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Macro method for method GetNiceName
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ImportSpecialActions.InformAboutDatalossEmailTemplates(System.Object,CMS.CMSImportExport.ImportGetDataEventArgs)">
            <summary>
            Inform about dataloss when importing email templates from older versions.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterExport">
            <summary>
            Handles special actions during the Newsletter export process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterExport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Newsletters.OriginalVariantNameCleaner">
            <summary>
            Ensures that original issue variant has not set a name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OriginalVariantNameCleaner.#ctor(System.Data.DataTable)">
            <summary>
            Creates an instance of the <see cref="T:CMS.Newsletters.OriginalVariantNameCleaner"/> class.
            </summary>
            <param name="issues">Issues which need to clear the name of original variant.</param>
        </member>
        <member name="M:CMS.Newsletters.OriginalVariantNameCleaner.Clear">
            <summary>
            Clears the name for issue variant representing the original variant.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterEnums">
            <summary>
            Wrapper class to provide newsletter enumerations.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterEnums.RegisterFields">
            <summary>
            Registers the newsletter enumerations.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterHandlers">
            <summary>
            Newsletter events handlers.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterHandlers.CAMPAIGN_URL_TRACKING_PARAMETER">
            <summary>
            Query parameter name for the campaign tracking.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterHandlers.SOURCE_URL_TRACKING_PARAMETER">
            <summary>
            Query parameter name for the source tracking.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterHandlers.CONTENT_URL_TRACKING_PARAMETER">
            <summary>
            Query parameter name for the content tracking.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.Init">
            <summary>
            Initializes the events handlers.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.FindUnsubscribedContactAndMergeWithCurrent(System.Object,CMS.Newsletters.UnsubscriptionEventArgs)">
            <summary>
            Finds contact by email address. This contact represents visitor that is being unsubscribed from email marketing communication.
            Merge him with current contact if current contact is anonymous.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.ClearEmailSendingStatus(System.Object,System.EventArgs)">
            <summary>
            Clears e-mail sending status of all newsletters
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.EmailsEnabledSettingChanged(System.Object,CMS.DataEngine.SettingsKeyChangedEventArgs)">
            <summary>
            Notifies email sender that a setting affecting whether email sending is enabled has changed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.ChangeUTMInCampaignEmail(System.Object,CMS.Base.CMSEventArgs{CMS.WebAnalytics.CampaignUTMChangedData})">
            <summary>
            Updates UTM in email (and all its variants if A/B).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.SendCampaignEmailAssets(System.Object,CMS.Base.CMSEventArgs{CMS.WebAnalytics.CampaignInfo})">
            <summary>
            Sends campaign email assets.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.UpdateIssueUTMCampaignCode(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Updates <see cref="P:CMS.Newsletters.IssueInfo.IssueUTMCampaign"/> field of given <paramref name="issue"/> with <paramref name="campaignUTMCode"/>.
            If <paramref name="issue"/> is AB test parent, sets the <paramref name="campaignUTMCode"/> to its variants as well.
            </summary>
            <remarks>
            Besides <see cref="P:CMS.Newsletters.IssueInfo.IssueUTMCampaign"/> sets <see cref="P:CMS.Newsletters.IssueInfo.IssueUseUTM"/> to <c>true</c> as well,
            since this field should be always set to <c>true</c> once the <see cref="P:CMS.Newsletters.IssueInfo.IssueUTMCampaign"/> is filled.
            </remarks>
            <param name="issue"><see cref="T:CMS.Newsletters.IssueInfo"/> to be updated</param>
            <param name="campaignUTMCode">Campaign code to be set to <paramref name="issue"/></param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.ConvertToUtmNamingConvention(System.String)">
            <summary>
            Returns string that can be later used in URL and it is safe for the analytics.
            </summary>
            <remarks>Converts spaces into under underscores.</remarks>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.SubscriberClicksTrackedLink(System.Object,CMS.Newsletters.LinksEventArgs)">
            <summary>
            Logs NewsletterClickThrough activity for contact specified in <paramref name="e"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.SubscriberOpensEmail(System.Object,CMS.Newsletters.LinksEventArgs)">
            <summary>
            Logs NewsletterOpen activity for contact specified in <paramref name="e"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.LogNewsletterUnsubscribingFromAllActivity(System.Object,CMS.Newsletters.UnsubscriptionEventArgs)">
            <summary>
            Logs newsletter unsubscribing from all activity when unsubscription happened on live site.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.LogNewsletterUnsubscribingActivity(System.Object,CMS.Newsletters.UnsubscriptionEventArgs)">
            <summary>
            Logs newsletter unsubscribing activity when unsubscription happened on live site.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.SynchronizeNameAndEmailOfContactSubscriber(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Updates matching information in contact subscriber when e-mail address, firstName, middleName or lastName have changed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.RenameContactGroupSubscriber(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Renames contact group subscriber when name of contact group changes.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.ResetEmailBounces(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Reset email bounces count if e-mail address changed so that contact can receive newsletters even if he had invalid e-mail address before
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHandlers.GetContactIDFromEmail(System.String)">
            <summary>
            Gets Contact ID from given <paramref name="email"/>.
            </summary>
            <param name="email">Email of the contact</param>
            <returns>Contact ID of found <see cref="T:CMS.ContactManagement.ContactInfo"/></returns>
        </member>
        <member name="T:CMS.Newsletters.NewsletterModule">
            <summary>
            Represents the Newsletter module.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.OnInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModule.RegisterDataTypes">
            <summary>
            Registers custom data types.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ContactEmailRecord">
            <summary>
            Data structure representing contact email record.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ContactEmailRecord.Email">
            <summary>
            Contact email.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterModuleMetadata">
            <summary>
            Represents the Newsletter module metadata.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterConstants">
            <summary>
            Constants related to the newsletter module.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterConstants.SUBSCRIBERRESOLVERNAME">
            <summary>
            Name of the resolver which is used in second round for subscriber and context macros
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterConstants.NEWSLETTERISSUERESOLVERNAME">
            <summary>
            Name of the resolver which is used in first round for newsletter and issue macros
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterConstants.IssueIDField">
            <summary>
            Name of email header field for IssueID.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterConstants.SubscriberIDField">
            <summary>
            Name of email header field for SubscriberID.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterConstants.ContactIDField">
            <summary>
            Name of email header field for ContactID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterLicenseCheckerService">
            <summary>
            Provides methods to check newsletter licence. 
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterLicenseCheckerService.mLicNews">
            <summary>
            License limitation newsletter table
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterLicenseCheckerService.LicNews">
            <summary>
            License limitation newsletter table
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under administration interface</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.CheckLicense(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Checks the license for insert for a new newsletter or for edit in other cases.
            </summary>
            <param name="newsletter">Newsletter</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.ClearLicNewsletter(System.Boolean)">
            <summary>
            Clear license newsletter hashtable.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.IsTrackingAvailable">
            <summary>
            Checks if newsletter tracking (open e-mail, click through and bounces) is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterLicenseCheckerService.IsABTestingAvailable">
            <summary>
            Checks if newsletter A/B testing is available for current URL.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailCampaignEmailGenerator">
            <summary>
            Provides method for generating emails for given <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailCampaignEmailGenerator.mBatchSize">
            <summary>
            Batch-size for recipients generation process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailCampaignEmailGenerator.GenerateEmailsForIssue(System.Data.DataTable,CMS.Newsletters.IssueInfo)">
            <summary>
            Loads all <see cref="T:CMS.ContactManagement.ContactInfo"/> subscribed via <see cref="T:CMS.ContactManagement.ContactGroupInfo"/> to given <paramref name="issue"/> and fills the given <paramref name="dataTable"/>.
            </summary>
            <remarks>
            It removes email duplicities - e.g. when the <see cref="T:CMS.ContactManagement.ContactInfo"/> is subscribed via more <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </remarks>
            <param name="dataTable">Container to be filled with the generated emails</param>
            <param name="issue">Instance of <see cref="T:CMS.Newsletters.IssueInfo"/> the emails are supposed to be generated for</param>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueItemInfo">
            <summary>
            Class representing newsletter queue item.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueItemInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueItemInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailID">
            <summary>
            EmailID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailNewsletterIssueID">
            <summary>
            EmailNewsletterIssueID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailSubscriberID">
            <summary>
            EmailSubscriberID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailSiteID">
            <summary>
            E-mail site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailLastSendResult">
            <summary>
            EmailLastSendResult.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailLastSendAttempt">
            <summary>
            EmailLastSendAttempt.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailSending">
            <summary>
            EmailSending.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailGUID">
            <summary>
            E-mail GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailContactID">
            <summary>
            EmailContactID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueItemInfo.EmailAddress">
            <summary>
            EmailAddress.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailQueueItem object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailQueueItem object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueItemInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Newsletters.EmailQueueItemInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItems">
            <summary>
            Returns a query for all the EmailQueueItem objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItem(System.Int32)">
            <summary>
            Returns EmailQueueItem with specified ID.
            </summary>
            <param name="id">EmailQueueItem ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.GetEmailQueueItem(System.Guid)">
            <summary>
            Returns EmailQueueItem with specified GUID.
            </summary>
            <param name="guid">EmailQueueItem GUID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.SetEmailQueueItem(CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Sets (updates or inserts) specified EmailQueueItem.
            </summary>
            <param name="infoObj">EmailQueueItem to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItem(CMS.Newsletters.EmailQueueItemInfo)">
            <summary>
            Deletes specified EmailQueueItem.
            </summary>
            <param name="infoObj">EmailQueueItem to be deleted</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItem(CMS.DataEngine.WhereCondition)">
            <summary>
            Deletes specified EmailQueueItems.
            </summary>
            <param name="where">Condition to use for deletion.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItem(System.Int32)">
            <summary>
            Deletes EmailQueueItem with specified site ID.
            </summary>
            <param name="siteID">EmailQueueItem ID</param>
            <remarks>This method deletes successfully only if the EmailSending property has value set to false.</remarks>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.DeleteEmailQueueItemInternal(CMS.DataEngine.WhereCondition)">
            <summary>
            Deletes specified EmailQueueItems.
            </summary>
            <param name="where">Condition to use for deletion</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.BulkMoveEmailsInQueueToAnotherContact(CMS.ContactManagement.ContactInfo,CMS.ContactManagement.ContactInfo)">
            <summary>
            Moves all email is queue assigned to the given <paramref name="sourceContact"/> to the <paramref name="targetContact"/>.
            </summary>
            <remarks>
            This method should be used only in the merging process. Note that there is no consistency check on whether the contacts with given IDs exist or not (nor is the 
            foreign key check in DB). Caller of this method should perform all the neccessary checks prior to the method invocation.
            </remarks>
            <param name="sourceContact">Contact the emails in queue are moved from</param>
            <param name="targetContact">Contact the emails in queue are moved to</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.ClearSendingStatus(CMS.Newsletters.IssueInfo)">
            <summary>
            Clear sending status for the given newsletter issue <paramref name="issue" /> so the sending may start.
            </summary>
            <param name="issue">Newsletter issue</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueItemInfoProvider.BulkUpdateEmailQueueItems(CMS.DataEngine.IWhereCondition,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Updates specified items in email queue.
            </summary>
            <param name="where">Condition to use for updating</param>
            <param name="updateOptions">Update parameters.</param>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueLimitException">
            <summary>
            Represents errors that occur during the email generating once the provided license does not cover <see cref="F:CMS.DataEngine.FeatureEnum.FullContactManagement"/> and number of generated emails exceeds the limit.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueLimitException.Limit">
            <summary>
            Gets the limit that was exceeded.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueLimitException.#ctor(System.Int32)">
            <summary>
            Instatiates a new instance of the <see cref="T:CMS.Newsletters.EmailQueueLimitException" /> class.
            </summary>
            <param name="limit">Limit that was exceeded</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueLimitException.#ctor(System.Int32,System.String)">
            <summary>
            Instatiates a new instance of the <see cref="T:CMS.Newsletters.EmailQueueLimitException" /> class with a specified error message.
            </summary>
            <param name="limit">Limit that was exceeded</param>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueLimitException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Instatiates a new instance of the <see cref="T:CMS.Newsletters.EmailQueueLimitException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception..
            </summary>
            <param name="limit">Limit that was exceeded</param>
            <param name="message">The message that describes the error</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueLimitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Instatiates a new instance of the <see cref="T:CMS.Newsletters.EmailQueueLimitException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:CMS.Newsletters.EmailQueueLimitException" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:CMS.Newsletters.EmailQueueLimitException" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueManager">
            <summary>
            Manages generation and sending of EmailQueueItems (newsletter queue).
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailQueueManager.DO_NOT_SEND">
            <summary>
            Do not send constant.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailQueueManager.EncodingRegExp">
            <summary>
            Gets page encoding regular expression.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendAllEmails(System.Boolean,System.Int32)">
            <summary>
            Tries to send all e-mails from the newsletter queue.
            </summary>
            <param name="sendFailed">Indicates if failed emails should be sent.</param>
            <param name="issueId">Context of an issue for which the emails should be sent. If not provided, context is gathered from the first item in the queue.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.SendEmail(CMS.Newsletters.EmailQueueItemInfo,CMS.Newsletters.EmailParts,System.String)">
            <summary>
            Sends specified e-mail from the newsletter queue, failed e-mail is updated with ErrorMessage information.
            </summary>
            <param name="email">E-mail to be sent</param>
            <param name="emailParts">E-mail parts to be resolved and composed</param>
            <param name="siteName">Site name</param>
            <returns>Returns true if e-mail has been successfully send</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.ClearEmailsSendingStatus">
            <summary>
            Clears the sending status for the corrupted e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.ClearEmailsSendingStatusInternal">
            <summary>
            Clears the sending status for the corrupted e-mails.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchEmailsToSend(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailID smaller then or equal to 'firstEmailId' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchVariantEmailsToSend(System.Boolean,System.Guid,System.Int32,System.Int32)">
            <summary>
            Fetches the variant e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailGUID smaller then or equal to 'firstEmailGuid' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="firstEmailGuid">First e-mail GUID (all e-mails should have the same or larger GUID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.FetchEmailsToSendInternal(System.Boolean,System.Int32,System.Guid,System.Int32,System.Int32)">
            <summary>
            Fetches the e-mails which should be sent from database and marks them as being sent.
            If enabled all e-mails with status 'sending' which have EmailID smaller then or equal to 'firstEmailId' will be deleted.
            </summary>
            <param name="fetchFailed">If true, failed e-mails are fetched</param>
            <param name="firstEmailId">First e-mail ID (all e-mails should have the same or larger ID)</param>
            <param name="firstEmailGuid">First e-mail GUID (all e-mails should have the same or larger GUID)</param>
            <param name="issueId">If set, only e-mails of specified issue will be fetched</param>
            <param name="topN">Number of e-mails to fetch</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(System.Int32)">
            <summary>
            Generates emails of given issue into e-mail queue.
            </summary>
            <param name="issueID">Issue ID</param>
            <exception cref="T:System.Exception">More than 100 emails are generated with license not providing access to FullContactManagement</exception>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo)">
            <summary>
            Generates e-mails of given issue into e-mail queue.
            </summary>
            <param name="issue">Issue object</param>
            <exception cref="T:System.Exception">More than 100 emails are generated with license not providing access to FullContactManagement</exception>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateEmails(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Generates e-mails of given issue into newsletter queue.
            </summary>
            <param name="issue">Issue</param>
            <param name="subscriber">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateContactEmails(CMS.Newsletters.IssueInfo,CMS.SiteProvider.SiteInfo,System.Boolean,System.Int32,System.Collections.Generic.HashSet{System.String},CMS.Newsletters.IEmailAddressBlocker)">
            <summary>
            Generates e-mails from subscribed contact groups and contacts of given issue into e-mail queue.
            </summary>
            <param name="issue">Issue object</param>
            <param name="site">Site the emails are generated for</param>
            <param name="monitorBounces">Indicates if bounced e-mails should be monitored</param>
            <param name="bounceLimit">Limit for bounced e-mails</param>
            <param name="generatedEmails">E-mails addresses that are to be ignored (that have already been generated)</param>
            <param name="emailAddressBlocker">Every email will be checked using this email address blocker before it is added to the email queue</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GetRecipientsBatchSize">
            <summary>
            Returns batch-size for recipients generation process.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GenerateDynamicIssue(System.Int32)">
            <summary>
            Generates issue of given dynamic newsletter based on the page defined by NewsletterDynamicURL.
            </summary>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GetTitleFromHTML(System.String)">
            <summary>
            Returns title (text between 'title' tags) of given html page.
            </summary>
            <param name="htmlPage">Source code of html page</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GetPageEncoding(System.Byte[])">
            <summary>
            Extracts the encoding from the content.
            </summary>
            <param name="pageContent">HTTP response content</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueManager.GetIssueTextFromURL(System.String)">
            <summary>
            Returns source code of html page specified by newsletterDynamicURL.
            </summary>
            <param name="dynamicNewsletterUrl">Url of page to process</param>
        </member>
        <member name="T:CMS.Newsletters.EmailQueueRecipientCandidatesRetriever">
            <summary>
            Provides methods to get contacts for whom the newsletter should be send.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueRecipientCandidatesRetriever.#ctor(CMS.Newsletters.IEmailAddressBlocker,CMS.Newsletters.IssueInfo,System.Boolean,System.Int32)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.EmailQueueRecipientCandidatesRetriever"/>.
            </summary>
            <param name="emailAddressBlocker">Check if email address is not blocked.</param>
            <param name="issue">Issue for which the contacts should be retrieved.</param>
            <param name="monitorBounces">Indicates if bounces should be monitored.</param>
            <param name="bounceLimit">Bounces threshold.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueRecipientCandidatesRetriever.FillContactTable(System.Data.DataTable,System.Int32,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Fills given table with contact data from subscribed contacts and contact groups.
            </summary>
            <param name="table">Data table.</param>
            <param name="siteId">Site ID.</param>
            <param name="generatedEmails">E-mail addresses that are to be ignored. The method also fills this set with generated e-mail addresses.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailQueueRecipientCandidatesRetriever.FillContactGroupTable(System.Data.DataTable,System.Int32,System.Int32,System.Collections.Generic.HashSet{System.String},System.Boolean)">
            <summary>
            Fills given table with contact data from specified contact group.
            </summary>
            <param name="table">Data table.</param>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="subscriberId">Subscriber ID.</param>
            <param name="currentEmails">Hash table with emails that have been already added.</param>
            <param name="setSending">Indicate if new records should be set with 'sending' status.</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailCampaignEmailGenerator">
            <summary>
            Provides method for generating emails for given <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailCampaignEmailGenerator.GenerateEmailsForIssue(System.Data.DataTable,CMS.Newsletters.IssueInfo)">
            <summary>
            Loads all <see cref="T:CMS.ContactManagement.ContactInfo"/> subscribed via <see cref="T:CMS.ContactManagement.ContactGroupInfo"/> to given <paramref name="issue"/> and fills the given <paramref name="dataTable"/>.
            </summary>
            <remarks>
            It removes email duplicities - e.g. when the <see cref="T:CMS.ContactManagement.ContactInfo"/> is subscribed via more <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </remarks>
            <param name="dataTable">Container to be filled with the generated emails</param>
            <param name="issue">Instance of <see cref="T:CMS.Newsletters.IssueInfo"/> the emails are supposed to be generated for</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailQueueItemInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.EmailQueueItemInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IEmailQueueRecipientCandidatesRetriever">
            <summary>
            Provides methods to get contacts for whom the newsletter should be send.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailQueueRecipientCandidatesRetriever.FillContactTable(System.Data.DataTable,System.Int32,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Fills given table with contact data from subscribed contacts and contact groups.
            </summary>
            <param name="table">Data table.</param>
            <param name="siteId">Site ID.</param>
            <param name="generatedEmails">E-mail addresses that are to be ignored. The method also fills this set with generated e-mail addresses.</param>
        </member>
        <member name="M:CMS.Newsletters.IEmailQueueRecipientCandidatesRetriever.FillContactGroupTable(System.Data.DataTable,System.Int32,System.Int32,System.Collections.Generic.HashSet{System.String},System.Boolean)">
            <summary>
            Fills given table with contact data from specified contact group.
            </summary>
            <param name="table">Data table.</param>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="subscriberId">Subscriber ID.</param>
            <param name="currentEmails">Hash table with emails that have been already added.</param>
            <param name="setSending">Indicate if new records should be set with 'sending' status.</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailAddressBlocker">
            <summary>
            Provides methods which decide whether email to certain email address should or should not be generated to the newsletter queue.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailAddressBlocker.IsBlocked(System.String)">
            <summary>
            Checks whether emails with the specified email address as recipients should be generated to the newsletter queue.
            </summary>
            <param name="emailAddress">Email address which will be checked</param>
            <returns>False if emails shouldn't be generated, otherwise true</returns>
        </member>
        <member name="T:CMS.Newsletters.OnDemandUnsubscribedEmailsAddressBlocker">
            <summary>
            Email address blocked which is retrieving data from database for every checked email.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.PreloadedUnsubscribedEmailsAddressBlocker">
            <summary>
            Email blocker which caches all the unsubscriptions in the memory when the first email is checked. Subsequent checks do not query database.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ThreadEmailSender">
            <summary>
            Async e-mail sender. Gets e-mails from newsletter queue, prepares them and sends them to e-mail queue.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mSendFailed">
            <summary>
            Resend failed e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mIssueID">
            <summary>
            Issue ID.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mSendingThreads">
            <summary>
            Threads currently sending e-mails.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mWindowsIdentity">
            <summary>
            Windows identity.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.mEmailsEnabledSettingChanged">
            <summary>
            Used to signal that one of the settings affecting enabled state of email sending has changed.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ThreadEmailSender.threadLock">
            <summary>
            Thread lock for scheduled sending.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.SendingThreads">
            <summary>
            Number of threads that are currently sending issues.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.SendFailed">
            <summary>
            Send failed e-mails?
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ThreadEmailSender.IssueID">
            <summary>
            IssueID, optional; only specific issue is send-out if it is set.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.NotifyEmailsEnabledSettingChanged(System.Boolean)">
            <summary>
            <para>
            Notifies the sending process that one of the settings affecting whether email sending is allowed has changed.
            As a result the sending process re-evaluates whether emails can still be sent with respect to currently processed newsletter's site.
            The email sending process is driven by 'CMSEmailsEnabled' and 'CMSGenerateNewsletters' settings.
            </para>
            <para>
            A web farm task propagating the notification is optionally logged.
            </para>
            </summary>
            <seealso cref="M:CMS.EmailEngine.EmailHelper.Settings.EmailsEnabled(System.String)"/>
            <seealso cref="M:CMS.Newsletters.NewsletterHelper.GenerateEmailsEnabled(System.String)"/>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.RunAsync(System.Security.Principal.WindowsIdentity)">
            <summary>
            Runs the sender in an asynchronous thread.
            </summary>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.Run">
            <summary>
            Sends all e-mails one by one in one thread.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.RunInternalImpersonated">
            <summary>
            Sends all e-mails one by one.
            </summary>
            <remarks>
            This method should be called by <see cref="M:CMS.Base.WindowsIdentityHelper.Impersonate(System.Security.Principal.WindowsIdentity,System.Action)"/> with acquired <see cref="F:CMS.Newsletters.ThreadEmailSender.threadLock"/>.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.EmailsEnabled(System.String)">
            <summary>
            Checks if newsletter sending is enabled even if e-mail sending is disabled.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.GetIssueIDToSend(System.Boolean)">
            <summary>
            Returns IssueID of the top item in newsletter queue which is not A/B test or 0.
            </summary>
            <param name="getFailed">Indicates if failed issues can be used</param>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.GetVariantEmailsCount(CMS.Newsletters.IssueInfo)">
            <summary>
            Returns number of emails that should be sent for current variant.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.AreAllVariantsSent(System.Int32)">
            <summary>
            Checks whether all variants of a specific issue were sent at least once.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ThreadEmailSender.EnsureWinnerSelectionTask(System.Int32)">
            <summary>
            Creates or updates winner selection task for an issue.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewslettersUsageDataSource">
            <summary>
            Contains methods for retrieving statisticts of newsletter module usage.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewslettersUsageDataSource.mSettingsToLog">
            <summary>
            Settings keys which are logged.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewslettersUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetData">
            <summary>
            Get all module statistical data.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetDynamicNewslettersCount(System.Collections.Generic.IEnumerable{CMS.Newsletters.NewsletterInfo})">
            <summary>
            Returns number of dynamic newsletters.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetIssuesInNewslettersCount(System.Collections.Generic.List{CMS.Newsletters.NewsletterInfo},CMS.Newsletters.EmailCommunicationTypeEnum)">
            <summary>
            Returns number of issues per newsletter. Newsletters without issues are ignored.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetSubscribersInNewslettersCount">
            <summary>
            Returns number of subscribers within a newsletter (group subscriber counts as 1). Newsletters without subscribers are ignored.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetNewsletterEmailTemplatesCount">
            <summary>
            Returns number of email templates.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetAdditionalTemplatesInNewslettersCount">
            <summary>
            Returns number of additional templates per newsletter. Newsletters without additional templates are ignored.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetTrackOpenedEmailUsedInNewslettersCount(System.Collections.Generic.IEnumerable{CMS.Newsletters.NewsletterInfo})">
            <summary>
            Returns number of newsletters where opening of email tracking is enabled.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetTrackClickedLinksUsedInNewslettersCount(System.Collections.Generic.IEnumerable{CMS.Newsletters.NewsletterInfo})">
            <summary>
            Returns number of newsletters where links tracking is enabled.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetDoubleOptInUsedInNewslettersCount(System.Collections.Generic.IEnumerable{CMS.Newsletters.NewsletterInfo})">
            <summary>
            Returns number of newsletters where double opt-in functionality is enabled.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewslettersUsageDataSource.GetSettingsUsage(System.Boolean)">
            <summary>
            Returns how many times is specific setting used with value which is not same as default value. 
            Only settings on running sites (if <paramref name="global"/> is true), not hidden and not custom are retrieved.
            Only global settings when <paramref name="global"/> is false.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CampaignEmailRecipientsProvider.GetAllRecipients">
            <summary>
            Return all contacts which are subscribed to an issue, includes opted out contacts and bounced.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.CampaignEmailRecipientsProvider.GetMarketableRecipients">
            <summary>
            Return all contacts which are subscribed to the issue, excludes opted out contacts and bounced.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Filters.ConfirmationMessageContentFilter">
            <summary>
            Composed filter for transforming the confirmation email content right before the sending.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.ConfirmationMessageContentFilter.#ctor(CMS.Newsletters.IEmailContentMacroResolver,System.String,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.ConfirmationMessageContentFilter"/> class.
            </summary>
            <param name="resolver">Macro resover to use.</param>
            <param name="baseUrl">Base URL to use for resolving.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.ConfirmationMessageContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.EmailBuilderContentFilter">
            <summary>
            Composed filter for transforming the email parts to be displayed within email builder.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailBuilderContentFilter.#ctor(System.Int32)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.EmailBuilderContentFilter"/> class.
            </summary>
            <param name="issueIdentifier">Issue identifier.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when issue is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when newsletter is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailBuilderContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.EmailBuilderContentFilter"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailBuilderContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailBuilderContentFilter.Apply(System.String,CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Applies the filter to the given <paramref name="code"/>.
            </summary>
            <param name="code">Widget code to transform.</param>
            <param name="widget">Widget configuration.</param>
            <returns>Code with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.EmailQueueContentFilter">
            <summary>
            Composed filter for transforming the email parts when enqueued to the message queue.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailQueueContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IEmailContentMacroResolver,System.Boolean)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.EmailQueueContentFilter"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <param name="resolver">Macro resolver to use.</param>
            <param name="preview">Indicates if the filter is used in context of preview.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when newsletter site not found.</exception>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailQueueContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailQueueContentFilter.Apply(System.String,CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Applies the filter to the given <paramref name="code"/>.
            </summary>
            <param name="code">Widget code to transform.</param>
            <param name="widget">Widget configuration.</param>
            <returns>Code with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.EmailSendContentFilter">
            <summary>
            Composed filter for transforming the email content right before the sending.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailSendContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IEmailContentMacroResolver,CMS.Newsletters.SubscriberInfo,System.String,System.Boolean)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.EmailSendContentFilter"/> class.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="resolver">Macro resover to use.</param>
            <param name="subscriber">Subscriber.</param>
            <param name="issue">Newsletter issue.</param>
            <param name="baseUrl">Base URL to use for resolving.</param>
            <param name="preview">Indicates if the filter is used in context of preview.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailSendContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailSendContentFilter.Apply(System.String,CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Applies the filter to the given <paramref name="code"/>.
            </summary>
            <param name="code">Widget code to transform.</param>
            <param name="widget">Widget configuration.</param>
            <returns>Code with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.EmailViewContentFilter">
            <summary>
            Composed filter for transforming the email parts to be viewed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailViewContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.EmailViewContentFilter"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <param name="subscriber">Subscriber.</param>
            <param name="preview">Indicates if the filter is used in context of preview.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailViewContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.EmailViewContentFilter.Apply(System.String,CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Applies the filter to the given <paramref name="code"/>.
            </summary>
            <param name="code">Widget code to transform.</param>
            <param name="widget">Widget configuration.</param>
            <returns>Code with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.IEmailContentFilter">
            <summary>
            Filter to transform email content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.IEmailContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.IWidgetContentFilter">
            <summary>
            Filter able to transform widget content or email parts.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.IWidgetContentFilter.Apply(System.String,CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Applies the filter to the given <paramref name="code"/>.
            </summary>
            <param name="code">Widget code to transform.</param>
            <param name="widget">Widget configuration.</param>
            <returns>Code with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.LinksPacifierContentFilter">
            <summary>
            Filter for disabling the links in email content to not to be clickable.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.LinksPacifierContentFilter.#ctor(System.Boolean,CMS.Newsletters.Internal.IEmailHtmlModifier)">
            <param name="isFragment">Indicates if the transformed text is HTML fragment, not complete HTML document.</param>
            <param name="customModifier">Custom HTML modifier. If not provided, default <see cref="T:CMS.Newsletters.Internal.EmailHtmlModifier"/> is used.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.LinksPacifierContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.MacroReplacerContentFilter">
            <summary>
            Filter for replacing macros in text without using the macro resolver, but simple text replace to speed up macro resolving.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.MacroReplacerContentFilter.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Filters.MacroReplacerContentFilter"/> class.
            </summary>
            <param name="emailAddress">Email address to be used for the macros.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.MacroReplacerContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.MacroResolverContentFilter">
            <summary>
            Filter for resolving supported macros in email parts.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.MacroResolverContentFilter.#ctor(CMS.Newsletters.IEmailContentMacroResolver)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Filters.MacroResolverContentFilter"/> class.
            </summary>
            <param name="resolver">Macro resover to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="resolver"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Filters.MacroResolverContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.MacroResolverContentFilter.Apply(System.String,CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Applies the filter to the given <paramref name="code"/>.
            </summary>
            <param name="code">Widget code to transform.</param>
            <param name="widget">Widget configuration.</param>
            <returns>Code with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.TrackingImageInjectorContentFilter">
            <summary>
            Filter for injecting tracking image to email content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.TrackingImageInjectorContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.SiteProvider.SiteInfo,System.String)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.TrackingImageInjectorContentFilter"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="site">Issue site.</param>
            <param name="baseUrl">Base URL to use for resolving.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.TrackingImageInjectorContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.TrackingImageInjectorContentFilter.GetTrackingImageStyles">
            <summary>
            Gets string representation of styles suitable for the open email tracking image.
            Guarantees tracking image remains invisible even if there are some CSS styles present that e.g. declare image border color and width.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Filters.UrlResolverContentFilter">
            <summary>
            Filter for resolving the relative URLs in the email content to absolute.
            </summary>
            <remarks>Uses regular expression to find URLs in the email content.</remarks>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlResolverContentFilter.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Filters.UrlResolverContentFilter"/> class.
            </summary>
            <param name="baseUrl">Base URL to use for resolving.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlResolverContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.UrlTrackingCodeInjectorContentFilter">
            <summary>
            Filter for injecting tracking code to URLs within email content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlTrackingCodeInjectorContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.SiteProvider.SiteInfo,System.String)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.UrlTrackingCodeInjectorContentFilter"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <param name="site">Issue site.</param>
            <param name="emailAddress">Email address to be used for the links.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlTrackingCodeInjectorContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="T:CMS.Newsletters.Filters.UrlUtmParametersInjectorContentFilter">
            <summary>
            Filter for injecting UTM parameters to URLs within email content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlUtmParametersInjectorContentFilter.#ctor(CMS.Newsletters.IssueInfo,CMS.SiteProvider.SiteInfo,System.String)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.Filters.UrlUtmParametersInjectorContentFilter"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="site">Issue site.</param>
            <param name="baseUrl">Base URL to use for resolving.</param>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlUtmParametersInjectorContentFilter.Apply(System.String)">
            <summary>
            Applies the filter to the given <paramref name="text"/>.
            </summary>
            <param name="text">Text to transform.</param>
            <returns>Text with applied filter transformation.</returns>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlUtmParametersInjectorContentFilter.IsDomainLink(CMS.Newsletters.Link,CMS.Newsletters.Link,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Returns true if <paramref name="link" /> is domain link. Membership to the domain is determined by other parameters. 
            Relative link is considered as domain link.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Filters.UrlUtmParametersInjectorContentFilter.CreateUrlWithUtm(CMS.Newsletters.Link,System.String,System.String)">
            <summary>
            Creates link with utm_parameters in query string.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ContentFilterResolvers">
            <summary>
            Email content macro resolvers for content filters.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ContentFilterResolvers.GetQueueResolver(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets email content resolver for context of email enqueueing in the email queue.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <remarks>This resolver is used for the first wave of macro resolving in the email content and keeps the unresolved macros in the content for second wave.</remarks>
        </member>
        <member name="M:CMS.Newsletters.ContentFilterResolvers.GetSendResolver(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Gets email content resolver for context of email sending.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <param name="subscriber">Subscriber.</param>
            <param name="preview">Indicates if the resolver is used in context of preview.</param>
        </member>
        <member name="M:CMS.Newsletters.ContentFilterResolvers.GetConfirmationResolver(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
             Gets email content resolver for confirmation email sending.
            </summary>
            <param name="newsletter">Issue newsletter.</param>
            <param name="subscriber">Subscriber.</param>
            <param name="subscription">Subscription.</param>
        </member>
        <member name="T:CMS.Newsletters.ICssInlinerService">
            <summary>
            Interface for CSS inlining service. Used for moving CSS to inline style attributes.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ICssInlinerService.InlineCss(System.String,System.Uri)">
            <summary>
            Moves CSS to inline style attributes, to gain maximum E-mail client compatibility.
            </summary>
            <param name="htmlSource">Input HTML string.</param>
            <param name="baseUri">Base URL to apply to link elements with href values ending with *.css.</param>
            <returns>HTML with inlined styles.</returns>
        </member>
        <member name="T:CMS.Newsletters.PreMailerCssInliner">
            <summary>
            Inlining service.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.PreMailerCssInliner.#ctor(CMS.Core.IEventLogService)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.PreMailerCssInliner"/> class.
            </summary>
            <param name="eventLogService">The event log service.</param>
        </member>
        <member name="M:CMS.Newsletters.PreMailerCssInliner.InlineCss(System.String,System.Uri)">
            <summary>
            Moves CSS to inline style attributes, to gain maximum E-mail client compatibility.
            </summary>
            <param name="htmlSource">Input HTML string.</param>
            <param name="baseUri">Base URL to apply to link elements with href values ending with *.css.</param>
            <returns>HTML with inlined styles. Returns original <paramref name="htmlSource" /> when inline process fail.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="htmlSource"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="baseUri"/> is null.</exception>
        </member>
        <member name="T:CMS.Newsletters.WidgetZonePlaceholderHelper">
            <summary>
            Class which provides operations regarding email builder zone placeholders.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.WidgetZonePlaceholderHelper.placeholderRegEx">
            <summary>
            Regular expression that enables to locate widget zone placeholder in a template code.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.WidgetZonePlaceholderHelper.ReplacePlaceholders(System.String,System.Func{System.String,System.String})">
            <summary>
            Replaces widget zone placeholders in format <c>$$zoneIdentifier$$</c> with values provided by <paramref name="getZoneContent"/> delegate 
            which accepts zone identifier and returns appropriate replacement string.
            </summary>
            <param name="templateCode">Email template code</param>
            <param name="getZoneContent">Delegate which returns the replacement text for the given zone identifier</param>
            <returns>Email template code with replaced widget zone placeholders.</returns>
        </member>
        <member name="M:CMS.Newsletters.WidgetZonePlaceholderHelper.GetDuplicatedPlaceholders(System.String)">
            <summary>
            Returns a collection of duplicated zone placeholders in the given template code.
            </summary>
            <param name="templateCode">Email template code</param>
        </member>
        <member name="T:CMS.Newsletters.EmailCommunicationTypeEnum">
            <summary>
            Defines email communication type.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter">
            <summary>
            Newsletter type.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailCommunicationTypeEnum.EmailCampaign">
            <summary>
            Email campaign type.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailViewer">
            <summary>
            Provides email properties with resolved macros.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailViewer.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Create an instance of <see cref="T:CMS.Newsletters.EmailViewer"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue Newsletter.</param>
            <param name="subscriber">Subscriber member - marketable recipient.</param>
            <param name="preview">Indicates if the filter is used in context of preview.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailViewer.GetSubject">
            <summary>
            Gets resolved subject of an email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailViewer.GetBody">
            <summary>
            Gets resolved body of an email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailViewer.GetPreheader">
            <summary>
            Gets resolved preheader of an email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailViewer.GetFrom">
            <summary>
            Gets email sender address.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailWidgetInfo">
            <summary>
            EmailWidgetInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailWidgetInfo.OBJECT_TYPE">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailWidgetInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetID">
            <summary>
            Email widget ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetGuid">
            <summary>
            Email widget GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetLastModified">
            <summary>
            Email widget last modified timestamp.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetSiteID">
            <summary>
            Email widget site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetDisplayName">
            <summary>
            Email widget display name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetName">
            <summary>
            Email widget code name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetDescription">
            <summary>
            Email widget description.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetCode">
            <summary>
            Email widget code.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetProperties">
            <summary>
            Email widget properties.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetThumbnailGUID">
            <summary>
            Email widget thumbnail metafile GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetIconCssClass">
            <summary>
            Email widget icon CSS class defining the web part thumbnail.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfo.#ctor">
            <summary>
            Creates an empty instance of the <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> class from the given <see cref="T:System.Data.DataRow"/>.
            </summary>
            <param name="dr">DataRow with the object data.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type.</param>
            <returns>ManageTemplates permission name for managing permission type, or base permission name otherwise.</returns>
        </member>
        <member name="T:CMS.Newsletters.EmailWidgetInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.#ctor">
            <summary>
            Creates a new instances of the <see cref="T:CMS.Newsletters.EmailWidgetInfoProvider"/> class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.GetEmailWidgets">
            <summary>
            Returns a query for all the <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.GetEmailWidgetInfo(System.Int32)">
            <summary>
            Returns <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> with specified ID.
            </summary>
            <param name="id">Email widget ID.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.GetEmailWidgetInfo(System.String,System.String)">
            <summary>
            Returns <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> with specified name.
            </summary>
            <param name="name">Email widget name.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.GetEmailWidgetInfo(System.Guid,System.String)">
            <summary>
            Returns <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> with specified GUID.
            </summary>
            <param name="guid">Email widget GUID.</param>                
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.SetEmailWidgetInfo(CMS.Newsletters.EmailWidgetInfo)">
            <summary>
            Sets (updates or inserts) specified <see cref="T:CMS.Newsletters.EmailWidgetInfo"/>.
            </summary>
            <param name="infoObj">Email widget to be set.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.DeleteEmailWidgetInfo(CMS.Newsletters.EmailWidgetInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.Newsletters.EmailWidgetInfo"/>.
            </summary>
            <param name="infoObj">EmailWidgetInfo to be deleted.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetInfoProvider.DeleteEmailWidgetInfo(System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> with specified ID.
            </summary>
            <param name="id">Email widget ID.</param>
        </member>
        <member name="T:CMS.Newsletters.EmailWidgetTemplateInfo">
            <summary>
            EmailWidgetTemplateInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailWidgetTemplateInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailWidgetTemplateInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetTemplateInfo.EmailWidgetTemplateID">
            <summary>
            Email widget template ID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetTemplateInfo.EmailWidgetID">
            <summary>
            Email widget ID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailWidgetTemplateInfo.TemplateID">
            <summary>
            Template ID
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailWidgetTemplateInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailWidgetTemplateInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type.</param>
            <returns>ManageTemplates permission name for managing permission type, or base permission name otherwise.</returns>
        </member>
        <member name="T:CMS.Newsletters.EmailWidgetTemplateInfoProvider">
            <summary>
            Class providing EmailWidgetTemplateInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.GetEmailWidgetTemplates">
            <summary>
            Returns all EmailWidgetTemplateInfo bindings.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding structure.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding structure.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.GetEmailWidgetTemplateInfo(System.Int32,System.Int32)">
            <summary>
            Returns EmailWidgetTemplateInfo binding structure.
            </summary>
            <param name="emailwidgetId">Email widget ID</param>
            <param name="emailtemplateId">Email template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.Set(CMS.Newsletters.EmailWidgetTemplateInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.SetEmailWidgetTemplateInfo(CMS.Newsletters.EmailWidgetTemplateInfo)">
            <summary>
            Sets specified EmailWidgetTemplateInfo.
            </summary>
            <param name="infoObj">EmailWidgetTemplateInfo to set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.Delete(CMS.Newsletters.EmailWidgetTemplateInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.DeleteEmailWidgetTemplateInfo(CMS.Newsletters.EmailWidgetTemplateInfo)">
            <summary>
            Deletes specified EmailWidgetTemplateInfo binding.
            </summary>
            <param name="infoObj">EmailWidgetTemplateInfo object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.RemoveEmailWidgetFromEmailTemplate(System.Int32,System.Int32)">
            <summary>
            Deletes EmailWidgetTemplateInfo binding.
            </summary>
            <param name="emailwidgetId">Email widget ID</param>
            <param name="emailtemplateId">Email template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.AddEmailWidgetToEmailTemplate(System.Int32,System.Int32)">
            <summary>
            Creates EmailWidgetTemplateInfo binding. 
            </summary>
            <param name="emailwidgetId">Email widget ID</param>
            <param name="emailtemplateId">Email template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.GetEmailWidgetTemplateInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the EmailWidgetTemplateInfo structure.
            Null if binding doesn't exist.
            </summary>
            <param name="emailwidgetId">Email widget ID</param>
            <param name="emailtemplateId">Email template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.SetEmailWidgetTemplateInfoInternal(CMS.Newsletters.EmailWidgetTemplateInfo)">
            <summary>
            Sets specified EmailWidgetTemplateInfo binding.
            </summary>
            <param name="infoObj">EmailWidgetTemplateInfo object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.DeleteEmailWidgetTemplateInfoInternal(CMS.Newsletters.EmailWidgetTemplateInfo)">
            <summary>
            Deletes specified EmailWidgetTemplateInfo.
            </summary>
            <param name="infoObj">EmailWidgetTemplateInfo object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.RemoveEmailWidgetFromEmailTemplateInternal(System.Int32,System.Int32)">
            <summary>
            Deletes EmailWidgetTemplateInfo binding.
            </summary>
            <param name="emailwidgetId">Email widget ID</param>
            <param name="emailtemplateId">Email template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailWidgetTemplateInfoProvider.AddEmailWidgetToEmailTemplateInternal(System.Int32,System.Int32)">
            <summary>
            Creates EmailWidgetTemplateInfo binding. 
            </summary>
            <param name="emailwidgetId">Email widget ID</param>
            <param name="emailtemplateId">Email template ID</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailWidgetInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IEmailWidgetTemplateInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailWidgetTemplateInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding structure.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IEmailWidgetTemplateInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding structure.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IEmailWidgetTemplateInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
        </member>
        <member name="M:CMS.Newsletters.IEmailWidgetTemplateInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.EmailWidgetTemplateInfo"/> binding.
            </summary>
            <param name="emailWidgetId">Email widget ID.</param>
            <param name="emailTemplateId">Email template ID.</param>
        </member>
        <member name="T:CMS.Newsletters.FakeSubscriberService">
            <summary>
            Provides access to the fake subscriber data.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.FakeSubscriberService.GetFakeSubscriber">
            <summary>
            Returns fake subscriber.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IFakeSubscriberService">
            <summary>
            Provides access to the fake subscriber data.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.INewsletterInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IRecipientsProvider">
            <summary>
            Provides helper methods which are able to return different subset of subscribers per issue or newsletter
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IRecipientsProvider.GetAllRecipients">
            <summary>
            Return all contacts which are subscribed to an issue (or newsletter), includes opted out contacts and bounced.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IRecipientsProvider.GetMarketableRecipients">
            <summary>
            Return all contacts which are subscribed to the issue (or newsletter), excludes opted out contacts and bounced.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailABTestService">
            <summary>
            A/B testing service implementation.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailABTestService.#ctor(CMS.Newsletters.IABTestInfoProvider,CMS.Newsletters.IIssueInfoProvider,CMS.Scheduler.ITaskInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.EmailABTestService"/> class.
            </summary>
            <param name="abTestInfoProvider">Provider for <see cref="T:CMS.Newsletters.ABTestInfo"/> management.</param>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
            <param name="taskInfoProvider">Provider for <see cref="T:CMS.Scheduler.TaskInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="abTestInfoProvider"/>, <paramref name="issueInfoProvider"/> or <paramref name="taskInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.EmailABTestService.CreateVariant(System.String,System.Int32)">
            <summary>
            Creates a new A/B test issue variant.
            </summary>
            <remarks>The new variant is always created from the original issue variant.</remarks>
            <param name="name">Name of the new variant.</param>
            <param name="issueId">ID of the source issue.</param>
            <returns>Returns the newly created variant.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name"/> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the original issue for issue with ID <paramref name="issueId"/>
            cannot be found or when its state is other then <see cref="F:CMS.Newsletters.IssueStatusEnum.Idle"/>.
            </exception>
        </member>
        <member name="M:CMS.Newsletters.EmailABTestService.DeleteVariant(System.Int32)">
            <summary>
            Deletes email variant given by <paramref name="deleteIssueId"/>. If single variant remains after the variant is deleted,
            then the remaining variant and related A/B test is deleted as well.
            </summary>
            <remarks>
            In case of single remaining variant, all its data including attachments is copied to the parent email.
            </remarks>
            <param name="deleteIssueId">Email variant ID</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Argument <paramref name="deleteIssueId"/> is zero or negative number.</exception>
            <exception cref="T:System.InvalidOperationException">
            The original issue of issue with ID <paramref name="deleteIssueId"/> not found or when its state is other then <see cref="F:CMS.Newsletters.IssueStatusEnum.Idle"/>.
            </exception>
        </member>
        <member name="M:CMS.Newsletters.EmailABTestService.GetOriginalVariant(System.Int32)">
            <summary>
            Returns email variant which is considered as 'original'. Original variant is a clone of email which is A/B tested.
            </summary>
            <param name="issueId">ID of issue which A/B tested.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailABTestService.CreateScheduledTask(CMS.Newsletters.IssueInfo)">
            <summary>
            Creates new scheduled task for the given issue and newsletter.
            </summary>
            <param name="issue">Issue</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailABTestService">
            <summary>
            Interface for email A/B testing service.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailABTestService.CreateVariant(System.String,System.Int32)">
            <summary>
            Creates a new A/B test issue variant.
            </summary>
            <remarks>The new variant is always created from the original issue variant.</remarks>
            <param name="name">Name of the new variant.</param>
            <param name="issueId">ID of the source issue.</param>
            <returns>Returns the newly created variant.</returns>
        </member>
        <member name="M:CMS.Newsletters.IEmailABTestService.DeleteVariant(System.Int32)">
            <summary>
            Deletes email variant given by <paramref name="deleteIssueId"/>. If single variant remains after the variant is deleted,
            then the remaining variant and related A/B test is deleted as well.
            </summary>
            <param name="deleteIssueId">Email variant ID</param>
        </member>
        <member name="M:CMS.Newsletters.IEmailABTestService.GetOriginalVariant(System.Int32)">
            <summary>
            Returns email variant which is considered as 'original'. Original variant is a clone of email which is A/B tested.
            </summary>
            <param name="issueId">ID of an issue which is A/B tested.</param>
        </member>
        <member name="T:CMS.Newsletters.ConfirmationSender">
            <summary>
            Class for sending newsletter issues confirmation.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.#ctor(CMS.Newsletters.INewsletterInfoProvider,CMS.Newsletters.IEmailTemplateInfoProvider,CMS.Newsletters.ISubscriberInfoProvider,CMS.Newsletters.ISubscriberNewsletterInfoProvider,CMS.SiteProvider.ISiteInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.ConfirmationSender"/> class.
            </summary>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
            <param name="emailTemplateInfoProvider">Provider for <see cref="T:CMS.Newsletters.EmailTemplateInfo"/> management.</param>
            <param name="subscriberInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.</param>
            <param name="subscriberNewsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> management.</param>
            <param name="siteInfoProvider">Provider for <see cref="T:CMS.SiteProvider.SiteInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletterInfoProvider"/>, <paramref name="emailTemplateInfoProvider"/>, <paramref name="subscriberInfoProvider"/>
            or <paramref name="siteInfoProvider"/> is null.
            </exception>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.SendConfirmationEmail(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sends e-mail to confirm subscription/unsubscription of subscriber to newsletter.
            </summary>
            <param name="isSubscriptionEmail">True if the message is subscription confirmation, false if unsubscription confirmation</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.SendDoubleOptInEmail(System.Int32,System.Int32)">
            <summary>
            Sends double opt-in e-mail to confirm subscription.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.SendUnsubscriptionConfirmation(CMS.Newsletters.SubscriberInfo,System.Int32)">
            <summary>
            Sends unsubscription confirmation e-mail.
            </summary>
            <param name="subscriber">Subscriber to send email to</param>
            <param name="newsletterId">ID of newsletter to be unsubscribed from</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.SendConfirmation(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sends either double opt-in e-mail or subscription/unsubscription confirmation e-mail.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.CreateAndSendConfirmationToSubscribers(System.Collections.Generic.IEnumerable{CMS.Newsletters.SubscriberInfo},CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberNewsletterInfo,System.Boolean,System.Boolean)">
            <summary>
            Creates double opt-in e-mail or subscription/unsubscription confirmation email and sends it to subscribers.
            </summary>
            <param name="subscribers">Newsletter subscriber's members</param>
            <param name="newsletter">Newsletter to send email for</param>
            <param name="subscription">Subscription info for double-opt-in message</param>
            <param name="isOptIn">True if double-opt-in message</param>
            <param name="isSubscription">True if subscription message</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.GetEmailTemplateInfo(CMS.Newsletters.NewsletterInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a template for a specified type of confirmation e-mail message.
            </summary>
            <param name="newsletter">Newsletter to get email template for</param>
            <param name="siteName">Newsletter site</param>
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationSender.GetTemplate(System.Boolean,System.Boolean,CMS.Newsletters.NewsletterInfo,System.String)">
            <summary>
            Gets a template for a specified type of confirmation e-mail message.
            </summary>        
            <param name="isOptIn">True if double opt-in e-mail should be sent, false for subscription/unsubscription e-mails</param>
            <param name="isSubscription">True if subscription e-mail should be sent, false, false is unsubscription e-mail should be sent</param>
            <param name="newsletter">Newsletter</param>
            <param name="culture">Culture string</param>
            <returns>Confirmation e-mail template</returns>
        </member>
        <member name="T:CMS.Newsletters.DraftSender">
            <summary>
            Class for sending drafts of newsletter issues (<see cref="T:CMS.Newsletters.IssueInfo"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.DraftSender.#ctor(CMS.Newsletters.INewsletterInfoProvider)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Newsletters.DraftSender"/> class.
            </summary>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
        </member>
        <member name="M:CMS.Newsletters.DraftSender.#ctor(CMS.Newsletters.IEmailMessageBuilder,CMS.Newsletters.INewsletterInfoProvider)">
            <summary>
            Creates a new instance of the <see cref="T:CMS.Newsletters.DraftSender"/> class.
            </summary>
            <param name="customEmailMessageBuilder">Provides method for building new instance of <see cref="T:CMS.EmailEngine.EmailMessage"/> from given <see cref="T:CMS.Newsletters.IssueInfo"/></param>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
        </member>
        <member name="M:CMS.Newsletters.DraftSender.Send(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Sends the <paramref name="issue"/> as draft to given e-mail addresses (<paramref name="recipients"/>).
            </summary>
            <param name="issue">Issue to be sent as draft.</param>
            <param name="recipients">Recipients delimited by semicolon.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="recipients"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when newsletter the <paramref name="issue"/> is assigned to was not found.</exception>
        </member>
        <member name="M:CMS.Newsletters.DraftSender.SendAsync(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Asynchronously sends the <paramref name="issue"/> as draft to given e-mail addresses (<paramref name="recipients"/>).
            </summary>
            <param name="issue">Issue to be sent as draft.</param>
            <param name="recipients">Recipients delimited by semicolon.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="recipients"/> is null or empty.</exception>
        </member>
        <member name="T:CMS.Newsletters.ConfirmationMessageBuilder">
            <summary>
            Provides support for building the <see cref="T:CMS.EmailEngine.EmailMessage"/> for confirmation.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationMessageBuilder.#ctor(CMS.Newsletters.EmailTemplateInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.Filters.IEmailContentFilter,CMS.Newsletters.Filters.IEmailContentFilter,CMS.Newsletters.IEmailMessageModifier)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.ConfirmationMessageBuilder"/> class.
            </summary>
            <param name="template">Template.</param>
            <param name="newsletter">Issue newsletter.</param>
            <param name="bodyFilter">Filter applied to the email body content.</param>
            <param name="subjectFilter">Filter applied to the email subject content.</param>
            <param name="messageModifier">Email message modifier to be applied to the message.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="template"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletter"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="bodyFilter"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="subjectFilter"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationMessageBuilder.Build">
            <summary>
            Builds the email message.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailMessageBuilder">
            <summary>
            Provides support for building the <see cref="T:CMS.EmailEngine.EmailMessage"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailMessageBuilder.#ctor(CMS.Newsletters.EmailParts,CMS.Newsletters.IEmailMessageModifier,CMS.Newsletters.ISenderRetriever)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.EmailMessageBuilder"/> class.
            </summary>
            <param name="emailParts">Parts of an email to build the email message from.</param>
            <param name="messageModifier">Email message modifier to be applied to the message.</param>
            <param name="customSenderRetriever">Custom sender email and name retriever.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="emailParts"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.EmailMessageBuilder.Build">
            <summary>
            Builds the email message.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IEmailMessageBuilder">
            <summary>
            Interface for building the <see cref="T:CMS.EmailEngine.EmailMessage"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailMessageBuilder.Build">
            <summary>
            Builds the email message.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.AttachmentsMessageModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include attachments.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.AttachmentsMessageModifier.#ctor(CMS.Newsletters.IssueInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.AttachmentsMessageModifier"/> class.
            </summary>
            <param name="issue">Issue.</param>
        </member>
        <member name="M:CMS.Newsletters.AttachmentsMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.ConfirmationAttachmentsMessageModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include attachments for confirmation.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationAttachmentsMessageModifier.#ctor(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.ConfirmationAttachmentsMessageModifier"/> class.
            </summary>
            <param name="template">Email template.</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationAttachmentsMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.ConfirmationMessageModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include recipient and attachments for a confirmation message.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationMessageModifier.#ctor(CMS.Newsletters.EmailTemplateInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.ConfirmationMessageModifier"/> class.
            </summary>
            <param name="template">Email template.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.ConfirmationMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.DraftMessageModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include recipient and attachments for a draft message.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.DraftMessageModifier.#ctor(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.DraftMessageModifier"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="recipient">Email recipient.</param>
        </member>
        <member name="M:CMS.Newsletters.DraftMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.EmailMessageModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include recipient and tracking fields.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailMessageModifier.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.EmailMessageModifier"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailMessageModifier">
            <summary>
            Interface for modifying the <see cref="T:CMS.EmailEngine.EmailMessage"/> when built using the <see cref="T:CMS.Newsletters.IEmailMessageBuilder"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to be modified.</param>
        </member>
        <member name="T:CMS.Newsletters.MessageHeaderTrackingFieldModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include tracking fields in the message header.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.MessageHeaderTrackingFieldModifier.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.MessageHeaderTrackingFieldModifier"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.MessageHeaderTrackingFieldModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.RecipientsMessageModifier">
            <summary>
            Modifies the <see cref="T:CMS.EmailEngine.EmailMessage"/> to include correct recipient.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.RecipientsMessageModifier.#ctor(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.RecipientsMessageModifier"/> class.
            </summary>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.RecipientsMessageModifier.Apply(CMS.EmailEngine.EmailMessage)">
            <summary>
            Applies the modification.
            </summary>
            <param name="message">Email message to modify.</param>
        </member>
        <member name="T:CMS.Newsletters.EmailParts">
            <summary>
            Provides support for building an email from issue and newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailParts.Issue">
            <summary>
            Issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailParts.Newsletter">
            <summary>
            Issue newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailParts.BaseUrl">
            <summary>
            Newsletter base url.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.ICssInlinerService)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.EmailParts"/> class.
            </summary>
            <param name="issue">Issue.</param>
            <param name="newsletter">Issue newsletter.</param>
            <param name="customCssInlinerService">Custom CSS inlining service.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.#ctor">
            <summary>
            Private constructor to support faster object clone.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.Clone">
            <summary>
            Creates clone of the current instance of <see cref="T:CMS.Newsletters.EmailParts"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.ApplyFilters(CMS.Newsletters.Filters.IWidgetContentFilter,CMS.Newsletters.Filters.IEmailContentFilter,CMS.Newsletters.Filters.IEmailContentFilter)">
            <summary>
            Applies filters to email parts (subject, body and plain text).
            </summary>
            <param name="bodyFilter">Filter applied to the email body content.</param>
            <param name="subjectFilter">Filter applied to the email subject content.</param>
            <param name="plainTextFilter">Filter applied to the email plain text.</param>
            <remarks>This method should be called before Get methods in order to return correctly resolved values.</remarks>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.GetSubject">
            <summary>
            Gets email subject.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.GetPlainText">
            <summary>
            Gets plain text version of email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailParts.GetBody">
            <summary>
            Gets body of an email.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IConfirmationSender">
            <summary>
            Class for sending newsletter issues confirmation.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IConfirmationSender.SendConfirmationEmail(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sends e-mail to confirm subscription/unsubscription of subscriber to newsletter.
            </summary>
            <param name="isSubscriptionEmail">True if the message is subscription confirmation, false if unsubscription confirmation</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IConfirmationSender.SendDoubleOptInEmail(System.Int32,System.Int32)">
            <summary>
            Sends double opt-in e-mail to confirm subscription.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IConfirmationSender.SendUnsubscriptionConfirmation(CMS.Newsletters.SubscriberInfo,System.Int32)">
            <summary>
            Sends unsubscription confirmation e-mail.
            </summary>
            <param name="subscriber">Subscriber to send email to</param>
            <param name="newsletterId">ID of newsletter to be unsubscribed from</param>
        </member>
        <member name="T:CMS.Newsletters.IIssueInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.IssueInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IIssueScheduler">
            <summary>
            Provide method for scheduling the issue mailout.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IIssueScheduler.ScheduleIssue(CMS.Newsletters.IssueInfo,System.DateTime)">
            <summary>
            Schedules the given <paramref name="issue"/> to be sent at timed specified by <paramref name="date"/>.
            </summary>
            <param name="issue">Issue to be scheduled</param>
            <param name="date">Date the <paramref name="issue"/> should be scheduled to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.IIssueSender">
            <summary>
            Class for sending newsletter issues (<see cref="T:CMS.Newsletters.IssueInfo"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IIssueSender.Send(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sends e-mail based on the issue to the specified subscriber.
            </summary>
            <param name="issue">Issue to be sent.</param>
            <param name="subscriber">Subscriber.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null -or- <paramref name="subscriber"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.IIssueUrlService">
            <summary>
            Interface for service retrieving URLs for issue content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets the base URL for given <paramref name="newsletter"/> if defined. Otherwise it returns full application URL of newsletter site. 
            </summary>
            <param name="newsletter">Newsletter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newsletter"/> is <c>null</c></exception>
            <remarks>The result URL doesn't contain trailing slash.</remarks>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetUnsubscriptionBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets unsubscription base URL for given <paramref name="newsletter"/>.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetUnsubscriptionUrl(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Gets unsubscription URL for given <paramref name="issue"/>, <paramref name="newsletter"/>, and <paramref name="subscriber"/>.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="issue">Issue.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetActivationBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets activation base URL for the newsletter opt-in feature.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.CreateActivationUrl(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Creates activation URL for the newsletter opt-in feature.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="subscriber">Subscriber.</param>
            <param name="subscription">Subscription.</param>
            <returns>Activation URL for given <paramref name="newsletter"/> and <paramref name="subscriber"/>.</returns>
            <remarks>When the activation URL is created, the hash used for the activation URL is stored to the related <paramref name="subscription"/>.</remarks>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetViewInBrowserBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets base URL to view email content in a browser.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetViewInBrowserUrl(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Gets URL to view email content in a browser.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="issue">Issue.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.IIssueUrlService.GetDynamicNewsletterUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets resolved source URL of dynamic newsletter.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="T:CMS.Newsletters.ISenderRetriever">
            <summary>
            Interface for retrieving sender email and name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISenderRetriever.GetFrom">
            <summary>
            Gets sender for message From value.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISenderRetriever.GetReplyTo">
            <summary>
            Gets sender for message Reply-To value.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueABVariantItem">
            <summary>
            Class contains issue ID and variant name pair.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IssueID">
            <summary>
            Issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IssueVariantName">
            <summary>
            Variant name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IsWinner">
            <summary>
            Flag indicates the winner
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueABVariantItem.IssueStatus">
            <summary>
            Issue status
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueABVariantItem.#ctor(System.Int32,System.String,System.Boolean,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Constructor
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="variantName">Variant name</param>
            <param name="isWinner">Winner</param>
            <param name="issueStatus">Issue status</param>
        </member>
        <member name="T:CMS.Newsletters.IssueHelper">
            <summary>
            Issue helper class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetStatusFriendlyName(CMS.Newsletters.IssueStatusEnum,System.String)">
            <summary>
            Returns issue status friendly name.
            </summary>
            <param name="status">Issue status</param>
            <param name="resPrefix">Resource string prefix (if NULL default prefix will be used)</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.InitABTestNumbers(System.Int32)">
            <summary>
            Initializes number of e-mails that should be sent for each variant.
            </summary>
            <param name="parentId">ID of A/B test parent issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetNumberPerVariantEmails(CMS.Newsletters.ABTestInfo)">
            <summary>
            Returns number of e-mails to be sent to a variant of specified A/B test.
            </summary>
            <param name="abi">A/B test info</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetWinnerIssue(CMS.Newsletters.IssueInfo,CMS.Newsletters.ABTestInfo)">
            <summary>
            Returns A/B test winner.
            </summary>
            <param name="parentIssue">Parent issue</param>
            <param name="abi">A/B test info</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.IsWinnerSelected(CMS.Newsletters.IssueInfo)">
            <summary>
            Checks whether the A/B tested issue has the winner selected.
            </summary>
            <param name="issue">Issue or issue variant to check.</param>
            <returns><c>True</c> if the winner is selected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetIssueTotalUniqueClicks(System.Int32)">
            <summary>
            Returns number of unique clicks of all issue's links.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.CopyWinningVariantIssueProperties(CMS.Newsletters.IssueInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Copies properties of the <paramref name="winningVariantIssue"/> to the <paramref name="targetIssue"/>.
            </summary>
            <param name="winningVariantIssue">Winning variant issue</param>
            <param name="targetIssue">Target issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetIssueVariants(System.Int32,System.String)">
            <summary>
            Returns issue variants for specified issue ID if any.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="additionalWhereCondition">Additional WHERE condition</param>
            <remarks>
            The first item in the list is always the original variant.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetIssueVariants(CMS.Newsletters.IssueInfo,System.String)">
            <summary>
            Returns issue variants for specified issue if any.
            </summary>
            <param name="issue">Issue</param>
            <param name="additionalWhereCondition">Additional WHERE condition</param>
            <remarks>
            The first item in the list is always the original variant.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetBreadcrumbsData(CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Prepares JSON object to be inserted to the breadcrumbs.
            On some pages the breadcrumbs needs to be hard-coded in order to be able to access single email via link and ensure consistency of breadcrumbs.
            </summary>
            <param name="issue">Issue</param>
            <param name="newsletter">Newsletter</param>
            <returns>Serialized list of objects where every object represents single breadcrumb.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.GetRandomIssueVariant(CMS.Newsletters.IssueInfo)">
            <summary>
            Returns random variant of a newsletter issue.
            </summary>
            <param name="issue">Issue to get the random variant from.</param>
            <returns>Random issue variant.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueHelper.IsNewsletter(System.Int32)">
            <summary>
            Returns <c>true</c> if communication type of the <see cref="T:CMS.Newsletters.NewsletterInfo"/> object specified by its ID is "Newsletter".
            </summary>
            <param name="newsletterId">ID of the <see cref="T:CMS.Newsletters.NewsletterInfo"/> object</param>
        </member>
        <member name="T:CMS.Newsletters.IssueInfo">
            <summary>
            Issue data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.OBJECT_TYPE_VARIANT">
            <summary>
            Object type for variant
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueInfo.TYPEINFOVARIANT">
            <summary>
            Additional info for A/B test issue
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueDisplayName">
            <summary>
            Issue display name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueUnsubscribed">
            <summary>
            IssueUnsubscribed.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueText">
            <summary>
            IssueText.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSubject">
            <summary>
            IssueSubject.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueID">
            <summary>
            IssueID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSentEmails">
            <summary>
            IssueSentEmails.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueTemplateID">
            <summary>
            IssueTemplateID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueNewsletterID">
            <summary>
            IssueNewsletterID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSiteID">
            <summary>
            Issue site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueMailoutTime">
            <summary>
            IssueMailoutTime.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueGUID">
            <summary>
            Issue GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueOpenedEmails">
            <summary>
            Gets or sets the number of opened e-mails by subscribers with this newsletter issue.
            </summary>
            <value>The total number of opened e-mails containing this issue of newsletter. Default is 0</value>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueStatus">
            <summary>
            Gets or sets the status for this issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueForAutomation">
            <summary>
            Indicates whether the issue should be used in Marketing Automation processes.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueIsABTest">
            <summary>
            A/B test flag, set to TRUE for main A/B test issue and its variants.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueVariantOfIssueID">
            <summary>
            ID of parent issue (in case of A/B testing)
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueVariantName">
            <summary>
            Name of the A/B test variant. Use <see cref="M:CMS.Newsletters.IssueExtensions.GetVariantName(CMS.Newsletters.IssueInfo)"/> extension method instead to get variant name properly.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSenderName">
            <summary>
            Sender user-friendly name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueSenderEmail">
            <summary>
            Sender e-mail address.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueScheduledTaskID">
            <summary>
            Gets or sets ID of scheduled task for sending issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueIsVariant">
            <summary>
            Gets if the issue is variant of an A/B test issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.ABTestVariants">
            <summary>
            Collection of all A/B test variants of the main newsletter issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.SupportsVersioning">
            <summary>
            Indicates if the object versioning is supported.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueUseUTM">
            <summary>
            Enables or disabled automatic adding of UTM parameters into email links targeting current site.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueUTMSource">
            <summary>
            Gets or sets UTM source for the issue.
            UTM source is optionally added to all links targeting current site in the issue as 'utm_source' query parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueUTMCampaign">
            <summary>
            Gets or sets UTM campaign for the issue.
            UTM campaign is optionally added to all links targeting current site in the issue as 'utm_campaign' query parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssueWidgets">
            <summary>
            Gets configuration of issue widgets.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssuePreheader">
            <summary>
            Gets preheader text used as a preview text in email clients.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfo.IssuePlainText">
            <summary>
            Gets or sets plain text of the issue.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.#ctor">
            <summary>
            Constructor - Creates an empty Issue object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Issue object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>AuthorIssues permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. This method is called automatically after CheckPermissions event was fired.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="siteName">Permissions on this site will be checked</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned issues into the DB.
            If a cloned issue has ABTestVariants (it is the main issue of an AB tested issue), another issues will be cloned automatically as they are children of this issue.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueInfoProvider">
            <summary>
            Class providing Issue management.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueInfoProvider.UseLinkedCSS">
            <summary>
            Determines whether "link" tag is used instead of "style" tag.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssues">
            <summary>
            Returns a query for all the IssueInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfo(System.Int32)">
            <summary>
            Returns the issue with specified ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.Get(System.Guid,System.Int32)">
            <summary>
            Gets an instance of info object based on its GUID and site ID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.IssueInfo"/> corresponding to <paramref name="guid"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetAsync(System.Guid,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of info object based on its GUID and site ID.
            </summary>
            <param name="guid">GUID of the info object to look for.</param>
            <param name="siteId">ID of the site to which to constrain the lookup.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.IssueInfo"/> corresponding to <paramref name="guid"/> and <paramref name="siteId"/> or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfo(System.Guid,System.Int32)">
            <summary>
            Returns the issue with specified GUID.
            </summary>
            <param name="issueGuid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetOriginalIssue(System.Int32)">
            <summary>
            Returns original (parent) issue for specified issue ID.
            </summary>
            <param name="issueId">Issue ID (either variant issue or parent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueInfo(CMS.Newsletters.IssueInfo)">
            <summary>
            Sets (updates or inserts) specified issue.
            </summary>
            <param name="issue">Issue to set</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.DeleteIssueInfo(CMS.Newsletters.IssueInfo)">
            <summary>
            Deletes issue.
            </summary>
            <param name="issueObj">Issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.DeleteIssueInfo(System.Int32)">
            <summary>
            Deletes issue specified by ID.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddSentEmails(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Increases the sent emails count in the issue specified.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="emails">Number of sent emails to add</param>
            <param name="mailoutTime">Time when the e-mails were sent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.IncreaseUnsubscribeCount(System.Int32)">
            <summary>
            Increases the counter for issue unsubscriptions.
            </summary>
            <param name="issueId">ID of the issue that has been unsubscribed</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddOpenedEmails(System.Int32)">
            <summary>
            Increases the opened emails count int the issue specified.
            </summary>
            <param name="issueId">ID of the issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.InvalidateIssue(System.Int32)">
            <summary>
            Invalidates cached newsletter issue on external change.
            </summary>
            <param name="issueId">ID of the issue to invalidate</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueStatus(System.Int32,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Set specified status to the issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="newStatus">New status</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.GetIssueInfoInternal(System.Guid,System.Int32)">
            <summary>
            Returns the issue with specified GUID.
            </summary>
            <param name="issueGuid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddSentEmailsInternal(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Increases the sent emails count in the issue specified.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="emails">Number of sent emails to add</param>
            <param name="mailoutTime">Time when the e-mails were sent</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.AddOpenedEmailsInternal(System.Int32)">
            <summary>
            Increases the opened emails count in the issue specified.
            </summary>
            <param name="issueId">ID of the issue</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.IncreaseUnsubscribeCountInternal(System.Int32)">
            <summary>
            Increases the counter for issue unsubscriptions.
            </summary>
            <param name="issueId">ID of the issue that has been unsubscribed</param>
        </member>
        <member name="M:CMS.Newsletters.IssueInfoProvider.SetIssueStatusInternal(System.Int32,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Sets specified status to the issue.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="status">New status</param>
        </member>
        <member name="T:CMS.Newsletters.IssueScheduler">
            <summary>
            Provide method for scheduling the issue mailout.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueScheduler.#ctor(CMS.Core.Internal.IDateTimeNowService,CMS.Newsletters.IIssueInfoProvider)">
            <summary>
            Instantiates new instance of <see cref="T:CMS.Newsletters.IssueScheduler"/>.
            </summary>
            <param name="dateTimeNowService">Provides method for getting current <see cref="T:System.DateTime"/></param>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueScheduler.ScheduleIssue(CMS.Newsletters.IssueInfo,System.DateTime)">
            <summary>
            Schedules the given <paramref name="issue"/> to be sent at timed specified by <paramref name="date"/>.
            </summary>
            <param name="issue">Issue to be scheduled</param>
            <param name="date">Date the <paramref name="issue"/> should be scheduled to</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.IssueSender">
            <summary>
            Class for sending newsletter issues (<see cref="T:CMS.Newsletters.IssueInfo"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueSender.Send(CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sends e-mail based on the issue to the specified subscriber.
            </summary>
            <param name="issue">Issue to be sent</param>
            <param name="subscriber">Subscriber</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null -or- <paramref name="subscriber"/> is null</exception>
        </member>
        <member name="T:CMS.Newsletters.IssueStatusEnum">
            <summary>
            Issue status enumeration
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.Idle">
            <summary>
            New issue that has not been sent yet
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.ReadyForSending">
            <summary>
            Issue is ready for sending (i.e. scheduled task for sending is enabled)
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.PreparingData">
            <summary>
            Newsletter queue is being filled
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.TestPhase">
            <summary>
            For A/B test when testing is in progress
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.Sending">
            <summary>
            Issue is being sent
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueStatusEnum.Finished">
            <summary>
            Issue has been sent
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IssueUrlService">
            <summary>
            Service retrieving URLs for issue content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.#ctor(CMS.Newsletters.IIssueInfoProvider,CMS.Newsletters.ISubscriberNewsletterInfoProvider,CMS.SiteProvider.ISiteInfoProvider)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.IssueUrlService"/> class.
            </summary>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
            <param name="subscriberNewsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> management.</param>
            <param name="siteInfoProvider">Provider for <see cref="T:CMS.SiteProvider.SiteInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issueInfoProvider"/>, <paramref name="subscriberNewsletterInfoProvider"/> or <paramref name="siteInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.#ctor(CMS.Newsletters.IIssueInfoProvider,CMS.Newsletters.ISubscriberNewsletterInfoProvider,CMS.SiteProvider.ISiteInfoProvider,System.DateTime)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.IssueUrlService"/> class.
            </summary>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
            <param name="subscriberNewsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> management.</param>
            <param name="siteInfoProvider">Provider for <see cref="T:CMS.SiteProvider.SiteInfo"/> management.</param>
            <param name="time">Custom time used to evaluate activation URL hash.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issueInfoProvider"/>, <paramref name="subscriberNewsletterInfoProvider"/> or <paramref name="siteInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets the base URL for given <paramref name="newsletter"/> if defined. Otherwise it returns full application URL of newsletter site. 
            </summary>
            <param name="newsletter">Newsletter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="newsletter"/> is <c>null</c></exception>
            <remarks>The result URL doesn't contain trailing slash.</remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetUnsubscriptionBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets unsubscription base URL for given <paramref name="newsletter"/>.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetUnsubscriptionUrl(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Gets unsubscription URL for given <paramref name="newsletter"/>, <paramref name="issue"/>, and <paramref name="subscriber"/>.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="issue">Issue.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetActivationBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets activation base URL for the newsletter opt-in feature.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.CreateActivationUrl(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Creates activation URL for the newsletter opt-in feature.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="subscriber">Subscriber.</param>
            <param name="subscription">Subscription.</param>
            <returns>Activation URL for given <paramref name="newsletter"/> and <paramref name="subscriber"/>.</returns>
            <remarks>When the activation URL is created, the hash used for the activation URL is stored to the related <paramref name="subscription"/>.</remarks>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetViewInBrowserBaseUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets base URL to view email content in a browser.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetViewInBrowserUrl(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Gets URL to view email content in a browser.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <param name="issue">Issue.</param>
            <param name="subscriber">Subscriber.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueUrlService.GetDynamicNewsletterUrl(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Gets resolved source URL of dynamic newsletter.
            </summary>
            <param name="newsletter">Newsletter.</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterSendingStatusModifier">
            <summary>
            Encapsulates methods intended to reset issue/newsletter queue item status.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSendingStatusModifier.ResetAllEmailsInQueueForIssue(System.Int32)">
            <summary>
            Resets email sending status for all emails in queue for specified issue.
            </summary>
            <param name="issueId">Issue id</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSendingStatusModifier.ResetFailedEmailsInQueue">
            <summary>
            Resets email sending status for all old not send emails in queue.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSendingStatusModifier.ResendFailedVariantIssues">
            <summary>
            Schedules mailout tasks for old not send variants.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SenderFormatter">
            <summary>
            Formates the sender name and email address.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SenderFormatter.SENDER_LENGTH_LIMIT">
            <summary>
            Limit for the length of sender email in format 'name &lt;email_address&gt;'.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SenderFormatter.GetSender(System.String,System.String)">
            <summary>
            Gets the email sender string from given sender name and sender email in format 'name &lt;email_address&gt;'.
            </summary>
            <param name="senderName">Sender name.</param>
            <param name="senderEmail">Sender email.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.GuidGenerator">
            <summary>
            Generates a GUID identifier.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.GuidGenerator.Generate">
            <summary>
            Generates new GUID.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService">
            <summary>
            Interface for service managing the <see cref="P:CMS.Newsletters.IssueInfo.IssueWidgets"/> configuration.
            </summary>
            <exclude />
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.InsertWidget(System.Guid,System.String,System.Int32)">
            <summary>
            Inserts a new widget configuration to the <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <param name="widgetTypeIdentifier">Widget type identifier.</param>
            <param name="zoneIdentifier">Identifier of the zone where the widget configuration should be inserted.</param>
            <param name="index">Index within the zone where the widget configuration should be inserted.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to insert a widget into an issue which is in read-only mode.</exception>
            <returns>Returns the inserted widget.</returns>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.RemoveWidget(System.Guid)">
            <summary>
            Removes the widget from configuration based on identifier.
            </summary>
            <param name="widgetIdentifier">Widget identifier.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to remove a widget from an issue which is in read-only mode.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.MoveWidget(System.Guid,System.String,System.Int32)">
            <summary>
            Moves the existing widget configuration within the <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration which should be moved.</param>
            <param name="zoneIdentifier">Identifier of the zone where the widget configuration should be moved.</param>
            <param name="index">Index within the zone where the widget configuration should be moved.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to move a widget in an issue which is in read-only mode.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.GetWidgetContent(System.Guid,CMS.Newsletters.Filters.IWidgetContentFilter)">
            <summary>
            Gets the widget content based on identifier.
            </summary>
            <param name="widgetIdentifier">Widget identifier.</param>
            <param name="filter">Filter applied to the widget content.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.GetEmailContent(CMS.Newsletters.Filters.IWidgetContentFilter)">
            <summary>
            Gets the email content including zones and widgets.
            </summary>
            <param name="filter">Filter applied to the widget content.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.GetWidgetConfiguration(System.Guid)">
            <summary>
            Gets the widget configuration including stored properties.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.HasWidgetWithUnfilledRequiredProperty">
            <summary>
            Indicates whether some widget in current configuration has missing required property value.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.HasWidgetWithMissingDefinition">
            <summary>
            Indicates whether some widget in current configuration has missing definition.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService.StoreWidgetProperties(System.Guid,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Stores new values for widget properties.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration.</param>
            <param name="properties">Collection of widget properties to store.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to store properties of a widget in an issue which is in read-only mode.</exception>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationServiceFactory">
            <summary>
            Interface for a configuration service factory serving initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service.
            </summary>
            <exclude />
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationServiceFactory.Create(System.Int32)">
            <summary>
            Creates initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service based on given issue identifier.
            </summary>
            <param name="issueIdentifier">Identifier of the issue.</param>
            <returns>Initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service.</returns>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationServiceFactory.Create(CMS.Newsletters.IssueInfo)">
            <summary>
            Creates initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service based on given issue.
            </summary>
            <param name="issue">Issue.</param>
            <returns>Initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service.</returns>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationTransformer.Transform(CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration)">
            <summary>
            Transforms <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/>.
            </summary>
            <param name="configuration">Zones configuration.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.MissingWidgetDefinitionZoneConfigurationTransformer">
            <summary>
            Mark widgets with missing widget definition <see cref="T:CMS.Newsletters.EmailWidgetInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.MissingWidgetDefinitionZoneConfigurationTransformer.#ctor(CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Instantiate a new filter using for marking widgets without definition.
            </summary>
            <param name="site"></param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.MissingWidgetDefinitionZoneConfigurationTransformer.Transform(CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration)">
            <summary>
            Marks widgets with missing definition.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget">
            <summary>
            Represents the configuration of a widget within the <see cref="P:CMS.Newsletters.Issues.Widgets.Configuration.Zone.Widgets"/> list.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.Identifier">
            <summary>
            Identifier of the widget instance.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.TypeIdentifier">
            <summary>
            Identifier of the widget type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.HasUnfilledRequiredProperty">
            <summary>
            Indicates that widget contains at least one unfilled required property.
            </summary>
            <remarks>Property is not serialized to output XML, if the value is <c>false</c>.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.WidgetDefinitionNotFound">
            <summary>
            Indicates that widget definition was not properly loaded.
            </summary>
            <remarks>Property is not serialized to output XML.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.Properties">
            <summary>
            Widget specific properties.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.Widget.#ctor(System.Guid,System.Guid)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/> class.
            </summary>
            <param name="identifier">Widget identifier representing the instance.</param>
            <param name="typeIdentifier">Widget type identifier.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.WidgetCreator">
            <summary>
            Encapsulates creating of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/> based on the <see cref="T:CMS.Newsletters.EmailWidgetInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.WidgetCreator.#ctor(CMS.DataEngine.SiteInfoIdentifier,CMS.Newsletters.Issues.Widgets.Configuration.GuidGenerator)">
            <summary>
            Creates an instance of the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.WidgetCreator"/> class.
            </summary>
            <param name="site">Site of the issue with widgets to manage.</param>
            <param name="guidGenerator">Generator used for <see cref="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.Identifier"/> when creating a new instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="site"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="guidGenerator"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.WidgetCreator.Create(System.Guid)">
            <summary>
            Creates a <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/> with initialized <see cref="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.Properties"/> based on default values of <see cref="P:CMS.Newsletters.EmailWidgetInfo.EmailWidgetProperties"/>.
            </summary>
            <param name="widgetTypeIdentifier">Widget type identifier.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when email widget type could not be found.</exception>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.WidgetProperty">
            <summary>
            Represents single property of a <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/> within the <see cref="P:CMS.Newsletters.Issues.Widgets.Configuration.Zone.Widgets"/> list.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.WidgetProperty.Name">
            <summary>
            Name of the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/> property.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.WidgetProperty.Value">
            <summary>
            Value of the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/> property.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.WidgetProperty.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.WidgetProperty"/> class.
            </summary>
            <param name="name">Name of the widget property.</param>
            <param name="value">Value of the widget property.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.Zone">
            <summary>
            Represents the zone within the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> configuration class.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Zone.Identifier">
            <summary>
            Identifier of the zone.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.Zone.Widgets">
            <summary>
            List of widgets within the zone.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.Zone.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Zone"/> class.
            </summary>
            <param name="identifier">Zone identifier.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration">
            <summary>
            Represents configuration of widgets and zones within the <see cref="T:CMS.Newsletters.IssueInfo"/> instance.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration.Zones">
            <summary>
            List of the zones configurations contained within the <see cref="T:CMS.Newsletters.IssueInfo"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration.#ctor">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> class.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager">
            <summary>
            Manager for <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.#ctor(CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration,CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationTransformer)">
            <summary>
            Creates a new instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager"/> class.
            </summary>
            <param name="configuration">Zones configuration to manage.</param>
            <param name="transformer">Transformer for configuration enrichment.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.InsertWidget(CMS.Newsletters.Issues.Widgets.Configuration.Widget,System.String,System.Int32)">
            <summary>
            Inserts a new widget configuration to the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> object.
            </summary>
            <param name="widget">Widget configuration.</param>
            <param name="zoneIdentifier">Identifier of the zone where the widget configuration is inserted.</param>.
            <param name="index">Index within the zone where the widget configuration is inserted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="widget"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.GetWidget(System.Guid)">
            <summary>
            Gets widget configuration based on identifier.
            </summary>
            <param name="widgetIdentifier">Widget identifier.</param>
            <remarks>Returns <c>null</c> if no widget configuration with given identifier found.</remarks>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.GetConfiguration">
            <summary>
            Gets the managed <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.RemoveWidget(System.Guid)">
            <summary>
            Removes widget from the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Zone"/> in <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> object based on widget identifier.
            </summary>
            <param name="widgetIdentifier">Widget identifier of widget to remove.</param>
            <returns>Returns <c>true</c> if widget was removed.</returns>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.MoveWidget(System.Guid,System.String,System.Int32)">
            <summary>
            Moves the existing widget configuration within the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration"/> object.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration which should be moved.</param>
            <param name="zoneIdentifier">Identifier of the zone where the widget configuration should be moved.</param>
            <param name="index">Index within the zone where the widget configuration should be moved.</param>
            <returns>Returns <c>false</c> if widget does not exist, otherwise returns <c>true</c>.</returns>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationManager.SetWidgetProperties(System.Guid,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets new values for widget properties.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration which should be moved.</param>
            <param name="properties">Collection of new properties</param>
            <returns>Returns <c>false</c> if widget does not exist, otherwise returns <c>true</c>.</returns>
            <remarks>Collection of current properties is replaced by the collection of properties and values from <paramref name="properties"/>.</remarks>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService">
            <summary>
            Service for managing the <see cref="P:CMS.Newsletters.IssueInfo.IssueWidgets"/> configuration.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.#ctor(CMS.Newsletters.IssueInfo,CMS.Newsletters.Issues.Widgets.Configuration.GuidGenerator)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService"/> class.
            </summary>
            <param name="issue">Issue with widgets to manage.</param>
            <param name="guidGenerator">Custom generator used for <see cref="P:CMS.Newsletters.Issues.Widgets.Configuration.Widget.Identifier"/> when creating a new instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.Widget"/>. If not provided, default <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.GuidGenerator"/> is used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issue"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.InsertWidget(System.Guid,System.String,System.Int32)">
            <summary>
            Inserts a new widget configuration to the <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <param name="widgetTypeIdentifier">Widget type identifier.</param>
            <param name="zoneIdentifier">Identifier of the zone where the widget configuration should be inserted.</param>
            <param name="index">Index within the zone where the widget configuration should be inserted.</param>
            <returns>Returns the content of inserted widget.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to insert a widget into an issue which is in read-only mode.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.GetWidgetContent(System.Guid,CMS.Newsletters.Filters.IWidgetContentFilter)">
            <summary>
            Gets the widget content based on identifier.
            </summary>
            <param name="widgetIdentifier">Widget identifier.</param>
            <param name="filter">Filter applied to the widget content.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.GetEmailContent(CMS.Newsletters.Filters.IWidgetContentFilter)">
            <summary>
            Gets the email content of the <see cref="T:CMS.Newsletters.IssueInfo"/> including zones and widgets.
            </summary>
            <param name="filter">Filter applied to the widget content.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.RemoveWidget(System.Guid)">
            <summary>
            Removes the widget from configuration based on identifier.
            </summary>
            <param name="widgetIdentifier">Widget identifier.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to remove a widget from an issue which is in read-only mode.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.MoveWidget(System.Guid,System.String,System.Int32)">
            <summary>
            Moves the existing widget configuration within the <see cref="T:CMS.Newsletters.IssueInfo"/>.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration which should be moved.</param>
            <param name="zoneIdentifier">Identifier of the zone where the widget configuration should be moved.</param>
            <param name="index">Index within the zone where the widget configuration should be moved.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to move a widget in an issue which is in read-only mode.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.GetWidgetConfiguration(System.Guid)">
            <summary>
            Gets the widget configuration including stored properties.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.StoreWidgetProperties(System.Guid,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Stores new values for widget properties.
            </summary>
            <param name="widgetIdentifier">Identifier of the widget configuration.</param>
            <param name="properties">Collection of widget properties to store.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to store properties of a widget in an issue which is in read-only mode.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.HasWidgetWithUnfilledRequiredProperty">
            <summary>
            Indicates whether some widget in current configuration has missing required property value.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationService.HasWidgetWithMissingDefinition">
            <summary>
            Indicates whether some widget in current configuration has missing definition.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationServiceFactory">
            <summary>
            Configuration service factory serving initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationServiceFactory.#ctor(CMS.Newsletters.IIssueInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationServiceFactory"/> class.
            </summary>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="issueInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationServiceFactory.Create(System.Int32)">
            <summary>
            Creates initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service based on given issue identifier.
            </summary>
            <param name="issueIdentifier">Identifier of the issue.</param>
            <returns>Initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service.</returns>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfigurationServiceFactory.Create(CMS.Newsletters.IssueInfo)">
            <summary>
            Creates initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service based on given issue.
            </summary>
            <param name="issue">Issue.</param>
            <returns>Initialized <see cref="T:CMS.Newsletters.Issues.Widgets.Configuration.IZonesConfigurationService"/> service.</returns>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Content.EmailContent">
            <summary>
            Represents the content of an email including zones with widgets' content.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.EmailContent.Zones">
            <summary>
            Zones with widget content.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.EmailContent.#ctor">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Content.EmailContent"/> class.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Content.EmailContentProvider">
            <summary>
            Provides the content for an email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.EmailContentProvider.#ctor(CMS.Newsletters.Issues.Widgets.Configuration.ZonesConfiguration,CMS.DataEngine.SiteInfoIdentifier,CMS.Newsletters.Filters.IWidgetContentFilter)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Content.EmailContentProvider"/> class.
            </summary>
            <param name="configuration">Zones configuration containing widgets.</param>
            <param name="site">Site of the issue with widgets.</param>
            <param name="widgetContentFilter">Filter applied to the widget content.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="site"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.EmailContentProvider.GetContent">
            <summary>
            Gets the content of an email.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Content.EmailZone">
            <summary>
            Represents zone within an email content.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.EmailZone.Identifier">
            <summary>
            Zone identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.EmailZone.Widgets">
            <summary>
            Widgets within the zone.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.EmailZone.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Content.EmailZone"/> class.
            </summary>
            <param name="identifier">Zone identifier.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Content.WidgetContent">
            <summary>
            Represents the content of a widget.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.WidgetContent.Identifier">
            <summary>
            Identifier of the widget instance.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.WidgetContent.Html">
            <summary>
            Widget HTML.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.WidgetContent.HasUnfilledRequiredProperty">
            <summary>
            Indicates that widget contains at least one unfilled required property.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.Content.WidgetContent.WidgetDefinitionNotFound">
            <summary>
            Indicates that widget definition was not properly loaded.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.WidgetContent.#ctor(System.Guid,System.String,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Content.WidgetContent"/> class.
            </summary>
            <param name="identifier">Widget identifier.</param>
            <param name="html">Widget HTML.</param>
            <param name="hasUnfilledRequiredProperty">Widget contains at least one unfilled required property.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.WidgetContent.#ctor(System.Guid,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Content.WidgetContent"/> class without the HTML.
            </summary>
            <param name="identifier">Widget identifier.</param>
            <param name="widgetDefinitionNotFound">Indicates that widget definition was not properly loaded.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.Content.WidgetContentProvider">
            <summary>
            Provides the content for a widget.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.WidgetContentProvider.#ctor(CMS.DataEngine.SiteInfoIdentifier,CMS.Newsletters.Filters.IWidgetContentFilter)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.Content.WidgetContentProvider"/> class.
            </summary>
            <param name="site">Site of the issue with widgets.</param>
            <param name="widgetContentFilter">Filter applied to the widget content.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="site"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.Content.WidgetContentProvider.GetContent(CMS.Newsletters.Issues.Widgets.Configuration.Widget)">
            <summary>
            Gets the content for given widget.
            </summary>
            <param name="widget">Widget configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="widget"/> is null.</exception>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.WidgetDefinition">
            <summary>
            Provides access to <see cref="T:CMS.Newsletters.EmailWidgetInfo"/> properties.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.WidgetDefinition.Code">
            <summary>
            Gets widget definition code.
            </summary>
            <remarks>This property is <c>null</c> when email widget definition doesn't exists.</remarks>
        </member>
        <member name="P:CMS.Newsletters.Issues.Widgets.WidgetDefinition.Fields">
            <summary>
            Gets widget definition fields.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.Issues.Widgets.WidgetDefinition.WidgetDefinitionNotFound">
            <summary>
            Indicates that widget definition (<see cref="T:CMS.Newsletters.EmailWidgetInfo"/>) was not found.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.WidgetDefinition.#ctor(CMS.Newsletters.EmailWidgetInfo)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.WidgetDefinition"/> class.
            </summary>
            <param name="definition">Widget definition instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="definition"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.WidgetDefinition.#ctor(System.Guid,CMS.DataEngine.SiteInfoIdentifier)">
            <summary>
            Creates an instance of <see cref="T:CMS.Newsletters.Issues.Widgets.WidgetDefinition"/> class.
            </summary>
            <param name="widgetTypeIdentifier">Widget definition identifier.</param>
            <param name="siteIdentifier">Site identifier of the widget definition.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="siteIdentifier"/> is null.</exception>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.WidgetDefinitionExtensions">
            <summary>
            Extension methods for <see cref="T:CMS.Newsletters.Issues.Widgets.WidgetDefinition"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.WidgetDefinitionExtensions.HasRequiredPropertyWithoutDefaultValue(CMS.Newsletters.Issues.Widgets.WidgetDefinition)">
            <summary>
            Indicates that widget definition contains any required field with no value provided.
            </summary>
            <param name="definition">Email widget definition.</param>
        </member>
        <member name="T:CMS.Newsletters.Issues.Widgets.WidgetResolvers">
            <summary>
            Provides macro resolvers for widgets.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.WidgetResolvers.GetWidgetDefaultPropertiesResolver(CMS.Newsletters.Issues.Widgets.WidgetDefinition)">
            <summary>
            Gets resolver for resolving default values of widget properties.
            </summary>
            <param name="definition">Widget definition.</param>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.WidgetResolvers.Register">
            <summary>
            Registers widget resolvers to the resolvers storage to be accessible via names.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Issues.Widgets.WidgetResolvers.GetResolverName(System.Int32)">
            <summary>
            Compose name of email widget specific resolver holding properties definition.
            </summary>
            <param name="emailWidgetDefinitionID">Id of email widget definition.</param>
        </member>
        <member name="T:CMS.Newsletters.Link">
            <summary>
            Represents link in web applications. Generally content of anchor hypertext reference ("a href").
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Link.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="link">Link as string</param>
        </member>
        <member name="M:CMS.Newsletters.Link.IsRelative">
            <summary>
            Returns true if link is relative. 
            Link is relative if it contains protocol.
            </summary>
            <example>
            <code>
            var relativeLink = new Link("/path?query=string#anchor");
            var absoluteLink = new Link("http://www.example.com/path?query=string#anchor");
            
            // true
            relativeLink.IsRelative();
            
            // false
            absoluteLink.IsRelative();
            </code>
            <remarks>
            Uses <see cref="M:CMS.Helpers.URLHelper.GetProtocol(System.String)"/> internally for obtaining protocol of the <see cref="T:CMS.Newsletters.Link"/>.
            </remarks>
            </example>
        </member>
        <member name="M:CMS.Newsletters.Link.GetDomain">
            <summary>
            Creates link which contains only domain (protocol, port, application path, query string and anchor are removed). 
            </summary>
            <example>
            <code>
            var link = new Link("http://www.example.com:80/path?query=string#anchor");
            
            //www.example.com
            string linkDomain = link.GetDomain();
            </code>
            </example>
            <remarks>
            Uses <see cref="M:CMS.Helpers.URLHelper.GetDomain(System.String)"/> for extracting the domain and <see cref="M:CMS.Helpers.URLHelper.RemovePort(System.String)"/> for removing port from the link.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Link refers to a relative address, for which it is not possible to retrieve its domain</exception>
            <returns>Domain of the original<see cref="T:CMS.Newsletters.Link"/></returns>
        </member>
        <member name="M:CMS.Newsletters.Link.HasParameter(System.String)">
            <summary>
            Returns true if query string contains parameter given by name <paramref name="paramName" />.
            </summary>
            <example>
            <code>
            var link = new Link("http://www.example.com/path?query=string#anchor");
            
            // true
            bool contains = link.HasParameter("query");
            
            // false
            bool doesNotContain = link.HasParameter("anotherQuery");
            </code>
            </example>
            <remarks>
            Uses <see cref="M:CMS.Helpers.URLHelper.GetQueryValue(System.String,System.String)"/> method internally.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="paramName"/> is null</exception>
            <returns><c>true</c> if the specified <paramref name="paramName"/> is present in the query string;; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CMS.Newsletters.Link.AppendQueryString(System.String)">
            <summary>
            Creates new <see cref="T:CMS.Newsletters.Link"/> and appends given <paramref name="queryString" /> to the existing query string of current object.
            Anchor is kept in place.
            </summary>
            <example>
            <code>
            var link = new Link("http://www.example.com/path?query=string#anchor");
            
            var resultLink = link.AppendQueryString("query2=string2&amp;query3=string3");
            
            // http://www.example.com/path?query=string&amp;query2=string2&amp;query3=string3#anchor
            resultLink.ToString();
            </code>
            </example>
            <remarks>
            Uses <see cref="M:CMS.Helpers.URLHelper.AppendQuery(System.String,System.String)"/> method for the appending query logic.
            </remarks>
            <returns>New <see cref="T:CMS.Newsletters.Link"/> object with appended <paramref name="queryString"/></returns>
        </member>
        <member name="M:CMS.Newsletters.Link.RemoveAnchor">
            <summary>
            Creates link without anchor.
            </summary>
            <example>
            <code>
            var link = new Link("http://www.example.com/path?query=string#anchor");
            
            var resultLink = link.RemoveAnchor();
            
            // http://www.example.com/path?query=string
            resultLink.ToString();
            </code>
            </example>
            <returns>New <see cref="T:CMS.Newsletters.Link"/> object without the link anchor</returns>
        </member>
        <member name="M:CMS.Newsletters.Link.GetAnchor">
            <summary>
            Returns link anchor.
            </summary>
            <example>
            <code>
            var link = new Link("http://www.example.com/path?query=string#some-anchor");
            // some-anchor
            string anchor = link.GetAnchor();
            </code>
            </example>
        </member>
        <member name="M:CMS.Newsletters.Link.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:CMS.Newsletters.Link"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.Link.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/> is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified <paramref name="obj"/> is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CMS.Newsletters.Link.Equals(CMS.Newsletters.Link)">
            <summary>
            Determines whether the specified <paramref name="other"/> is equal to the current <see cref="T:CMS.Newsletters.Link"/>.
            </summary>
            <param name="other">The <see cref="T:CMS.Newsletters.Link"/> to compare with the current <see cref="T:CMS.Newsletters.Link"/>. </param>
            <returns><c>true</c> if the specified <paramref name="other"/> is equal to the current <see cref="T:CMS.Newsletters.Link"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CMS.Newsletters.Link.GetHashCode">
            <summary>
            Serves as the hash function for the <see cref="T:CMS.Newsletters.Link"/>.
            </summary>
            <remarks>
            Returns <c>0</c> if the <see cref="T:CMS.Newsletters.Link"/> was initialized with empty <see cref="T:System.String"/>.
            </remarks>
            <returns>A hash code for the current <see cref="T:CMS.Newsletters.Link"/>.</returns>
        </member>
        <member name="T:CMS.Newsletters.NewsletterContext">
            <summary>
            Newsletter context.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterContext.UnsubscriptionLinksBackwardCompatibilityMode">
            <summary>
            Indicates that backward compatibility mode is used for newsletter unsubscription links.
            In version 8.2 and previous unsubscription links contained contactId parameter. From version 9.0 email parameter is used to identify contact.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterHelper">
            <summary>
            Newsletter helper class.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action, if action is Insert limitations are not checked under administration interface</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature to check</param>
            <param name="action">Action</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.CheckLicense(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Checks the license for insert for a new newsletter or for edit in other cases.
            </summary>
            <param name="newsletter">Newsletter</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.ClearLicNewsletter(System.Boolean)">
            <summary>
            Clear license newsletter hashtable.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.IsTrackingAvailable">
            <summary>
            Checks if newsletter tracking (open e-mail, click through and bounces) is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.IsABTestingAvailable">
            <summary>
            Checks if newsletter A/B testing is available for current URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.OnlineMarketingAvailable(System.String)">
            <summary>
            Gets whether Online marketing is available and enabled for the site.
            </summary>
            <param name="siteName">Site name</param>
            <returns>TRUE if online marketing module is loaded, available and enabled for the site, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.OnlineMarketingEnabled(System.String)">
            <summary>
            Gets whether Online marketing is enabled for the site.
            </summary>
            <param name="siteName">Site name</param>
            <returns>TRUE if Open email tracking is enabled, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.UseExternalServiceForDynamicNewsletters(System.String)">
            <summary>
            Indicates if scheduled task for dynamic newsletters should run in windows service
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.MonitorBouncedEmails(System.String)">
            <summary>
            Gets whether bounced e-mails monitoring is available for the given site and current URL.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.MonitorBouncedEmailsEnabled(System.String)">
            <summary>
            Indicates if bounced e-mails monitoring is enabled for the given site.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.BouncedEmailsLimit(System.String)">
            <summary>
            Gets limit for bounced e-mails.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.BouncedEmailAddress(System.String)">
            <summary>
            Gets e-mail address where bounced back e-mails should be sent.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GenerateEmailsEnabled(System.String)">
            <summary>
            Gets if newsletter e-mail generation is enabled.
            </summary>
            <param name="siteName">Site name</param>
            <returns>true, if newsletter e-mail generation is enabled, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GetEmailAddressCount(CMS.Newsletters.IssueInfo)">
            <summary>
            Returns number of recipients subscribed for specified newsletter. Takes unsubscription and bounces into account (see <see cref="M:CMS.Newsletters.IRecipientsProvider.GetMarketableRecipients"/>).
            </summary>
            <param name="issue">Count is calculated for this issue</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="issue"/> is null</exception>
            <returns>Total amount of emails subscribed to the given <paramref name="issue"/> without the unsubscribed ones.</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GetContactInfo(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Returns contact related with subscriber. If there is no known relation between contact and subscriber, 
            returns contact with the same email. In this case, if there is more contacts with the same email, selects the one with last logged activity.
            </summary>
            <param name="subscriber">Subscriber info</param>
            <returns>Contact info related to subscriber</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscriber"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.GetNewsletterMarketableRecipientsCount(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Returns number of recipients subscribed for specified newsletter. Takes unsubscription table in account.
            </summary>
            <param name="newsletter">Newsletter.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown when parameter <paramref name="newsletter"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Is thrown when parameter <paramref name="newsletter"/> is not type of <see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter"/>.</exception>
            <remarks>The method counts recipients only for <see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter">newsletters</see>.</remarks>
        </member>
        <member name="M:CMS.Newsletters.NewsletterHelper.ToContactSubscriber(CMS.ContactManagement.ContactInfo)">
            <summary>
            Creates a subscriber from a contact.
            </summary>
            <param name="contact">Contact to create subscriber from.</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterInfo">
            <summary>
            Newsletter data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDynamicScheduledTaskID">
            <summary>
            Gets or sets the newsletter dynamic scheduled task ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSource">
            <summary>
            Gets or sets the newsletter source.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterType">
            <summary>
            Gets or sets the email communication type.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSiteID">
            <summary>
            Gets or sets the newsletter site ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterName">
            <summary>
            Gets or sets the newsletter name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSubscriptionTemplateID">
            <summary>
            Gets or sets the newsletter subscription template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDynamicSubject">
            <summary>
            Gets or sets the subject of a dynamic newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterID">
            <summary>
            Gets or sets the newsletter ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDisplayName">
            <summary>
            Gets or sets the newsletter display name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSenderName">
            <summary>
            Gets or sets the newsletter sender name.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDynamicURL">
            <summary>
            Gets or sets the URL of a dynamic newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSenderEmail">
            <summary>
            Gets or sets the e-mail address of a newsletter sender.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterUnsubscriptionTemplateID">
            <summary>
            Gets or sets the newsletter unsubscription template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterUnsubscribeUrl">
            <summary>
            Gets or sets the newsletter unsubscription URL.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterBaseUrl">
            <summary>
            Gets or sets the newsletter base URL.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterGUID">
            <summary>
            Gets or sets the newsletter unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterLastModified">
            <summary>
            Gets or sets the date and time the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterEnableOptIn">
            <summary>
            Gets or sets whether the newsletter should use double opt-in.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterOptInTemplateID">
            <summary>
            Gets or sets the ID of the template which will be used for double opt-in confirmation.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterSendOptInConfirmation">
            <summary>
            Gets or sets whether subscription confirmation should be sent after double opt-in e-mail.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterOptInApprovalURL">
            <summary>
            Gets or sets the URL of the double opt-in page.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterTrackOpenEmails">
            <summary>
            Gets or sets whether tracking of opened emails carrying newsletter issues is enabled.
            </summary>
            <value>A flag that determines if tracking is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterTrackClickedLinks">
            <summary>
            Gets or sets whether tracking of clicked links in newsletter issues is enabled.
            </summary>
            <value>A flag that determines if tracking is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterLogActivity">
            <summary>
            Gets or sets whether activities logging is enabled for this particular newsletter.
            </summary>
            <value>A flag that determines if activities logging is turned on for this newsletter. Default is false.</value>
        </member>
        <member name="P:CMS.Newsletters.NewsletterInfo.NewsletterDraftEmails">
            <summary>
            Gets or sets the email addresses where draft emails are sent.
            </summary>
            <value>Semicolon separated list of email addresses.</value>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.GetNiceName">
            <summary>
            Gets the nice name of the newsletter based on its type
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty Newsletter object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Newsletter object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>Configure permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. This method is called automatically after CheckPermissions event was fired.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="siteName">Permissions on this site will be checked</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterInfoProvider">
            <summary>
            Class providing Newsletter management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletters">
            <summary>
            Returns a query for all the NewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfo(System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfo(System.String,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterName">NewsletterName</param>
            <param name="siteId">Site identifier</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewsletterInfo(System.Guid,System.Int32)">
            <summary>
            Returns the Newsletter structure for the specified newsletter.
            </summary>
            <param name="newsletterGuid">GUID of newsletter</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.SetNewsletterInfo(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified newsletter.
            </summary>
            <param name="newsletter">Newsletter to set</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.DeleteNewsletterInfo(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterObj">Newsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.DeleteNewsletterInfo(System.Int32)">
            <summary>
            Deletes specified newsletter.
            </summary>
            <param name="newsletterId">Newsletter id</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewslettersForSite(System.Int32)">
            <summary>
            Returns object query with all newsletters of given site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.SetInfo(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.DeleteInfo(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterInfoProvider.GetNewslettersForSiteInternal(System.Int32)">
            <summary>
            Returns object query with all newsletters of given site.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterRecipientsProvider.#ctor(CMS.Newsletters.NewsletterInfo)">
            <summary>
            Creates an instance of the <see cref="T:CMS.Newsletters.NewsletterRecipientsProvider"/> class.
            </summary>
            <param name="newsletter">Newsletter recipients are assigned to.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown when parameter <paramref name="newsletter"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Is thrown when parameter <paramref name="newsletter"/> is not type of <see cref="F:CMS.Newsletters.EmailCommunicationTypeEnum.Newsletter"/>.</exception>
        </member>
        <member name="M:CMS.Newsletters.NewsletterRecipientsProvider.GetAllRecipients">
            <summary>
            Return all contacts which are subscribed to an newsletter, includes opted out contacts and bounced.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterRecipientsProvider.GetMarketableRecipients">
            <summary>
            Returns query for marketable recipients subscribed for a specified newsletter.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.NewsletterSource">
            <summary>
            Newsletter source constants.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSource.TemplateBased">
            <summary>
            Template-based (or static) newsletter type.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.NewsletterSource.Dynamic">
            <summary>
            Dynamic newsletter type.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateInfo">
            <summary>
            EmailTemplate data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateID">
            <summary>
            TemplateID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateType">
            <summary>
            TemplateType.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateCode">
            <summary>
            Template code.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateName">
            <summary>
            TemplateName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateDisplayName">
            <summary>
            TemplateDisplayName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateSiteID">
            <summary>
            TemplateSiteID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateGUID">
            <summary>
            Template GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateSubject">
            <summary>
            Template subject.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateThumbnailGUID">
            <summary>
            Thumbnail from metafiles (GUID).
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateDescription">
            <summary>
            Template description.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateIconClass">
            <summary>
            Template font icon css class.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateInfo.TemplateInlineCSS">
            <summary>
            Indicates whether styles withing the &lt;style&gt; tags will be inlined into the email markup prior sending the email.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailTemplate object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailTemplate object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>ManageTemplates permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateInfoProvider">
            <summary>
            Class providing EmailTemplate management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplates">
            <summary>
            Returns a query for all the EmailTemplateInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplateInfo(System.Int32)">
            <summary>
            Gets the e-mail template.
            </summary>
            <param name="templateId">Template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetEmailTemplateInfo(System.String,System.Int32)">
            <summary>
            Gets the e-mail template.
            </summary>
            <param name="templateName">Template code name</param>
            <param name="siteId">Template site ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.SetEmailTemplateInfo(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Sets (updates or inserts) specified e-mail template.
            </summary>
            <param name="emailTemplate">Template object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.DeleteEmailTemplateInfo(CMS.Newsletters.EmailTemplateInfo)">
            <summary>
            Deletes specified e-mail template.
            </summary>
            <param name="emailTemplate">Template object</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.DeleteEmailTemplateInfo(System.Int32)">
            <summary>
            Deletes specified e-mail template.
            </summary>
            <param name="emailTemplateId">Template ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllSubscriptionTemplates(System.Int32)">
            <summary>
            Returns dataset with all subscription templates.
            </summary>
            <param name="siteId">Site ID</param>
            <seealso cref="T:CMS.Newsletters.EmailTemplateTypeEnum"/>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllUnsubscriptionTemplates(System.Int32)">
            <summary>
            Returns dataset with all unsubscription templates.
            </summary>
            <param name="siteId">Site ID</param>
            <seealso cref="T:CMS.Newsletters.EmailTemplateTypeEnum"/>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllDoubleOptInTemplates(System.Int32)">
            <summary>
            Returns dataset with all double opt-in templates.
            </summary>
            <param name="siteId">ID of a site</param>
            <returns>DataSet with double opt-in templates</returns>
            <seealso cref="T:CMS.Newsletters.EmailTemplateTypeEnum"/>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateInfoProvider.GetAllIssueTemplates(System.Int32)">
            <summary>
            Returns dataset with all e-mail templates.
            </summary>
            <param name="siteId">Site ID</param>
            <seealso cref="T:CMS.Newsletters.EmailTemplateTypeEnum"/>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateNewsletterInfo">
            <summary>
            EmailTemplateNewsletterInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateNewsletterInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateNewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateNewsletterInfo.TemplateID">
            <summary>
            Newsletter e-mail template ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.EmailTemplateNewsletterInfo.NewsletterID">
            <summary>
            Newsletter ID.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty EmailTemplateNewsletterInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new EmailTemplateNewsletterInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateNewsletterInfoProvider">
            <summary>
            Class providing EmailTemplateNewsletterInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.#ctor">
            <summary>
            Creates a new instance of EmailTemplateNewsletterInfo.
            </summary>        
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletters">
            <summary>
            Returns a query for all the EmailTemplateNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding structure.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding structure.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified template and newsletter.
            </summary>
            <param name="templateId">Template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.SetEmailTemplateNewsletterInfo(CMS.Newsletters.EmailTemplateNewsletterInfo)">
            <summary>
            Sets relationship between specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.AddNewsletterToTemplate(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified server and site.
            </summary>	
            <param name="templateId">Template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.DeleteEmailTemplateNewsletterInfo(CMS.Newsletters.EmailTemplateNewsletterInfo)">
            <summary>
            Deletes relationship specified template and newsletter.
            </summary>
            <param name="tempNewsInfo">Template-newsletter relationship to be set</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.RemoveNewsletterFromTemplate(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified template and specified newsletter.
            </summary>
            <param name="templateId">Email template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTemplateNewsletterInfoProvider.GetEmailTemplateNewsletterInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified template and newsletter.
            </summary>
            <param name="templateId">E-mail template ID</param>
            <param name="newsletterId">Newsletter ID</param>
        </member>
        <member name="T:CMS.Newsletters.EmailTemplateTypeEnum">
            <summary>
            Email template type enumeration.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateTypeEnum.Issue">
            <summary>
            Newsletter issue template.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateTypeEnum.Subscription">
            <summary>
            Newsletter subscription template.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateTypeEnum.Unsubscription">
            <summary>
            Newsletter unsubscription template.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTemplateTypeEnum.DoubleOptIn">
            <summary>
            Double opt-in activation template.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IEmailTemplateInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.EmailTemplateInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IEmailTemplateNewsletterInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailTemplateNewsletterInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding structure.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IEmailTemplateNewsletterInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding structure.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IEmailTemplateNewsletterInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
        </member>
        <member name="M:CMS.Newsletters.IEmailTemplateNewsletterInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.EmailTemplateNewsletterInfo"/> binding.
            </summary>
            <param name="emailTemplateId">Email marketing template ID.</param>
            <param name="newsletterId">Email feed ID.</param>
        </member>
        <member name="T:CMS.Newsletters.ISubscriberEmailRetriever">
            <summary>
            Class for retrieving subscriber email address.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberEmailRetriever.GetSubscriberEmail(System.Int32)">
            <summary>
            Returns email address for given subscriber.
            Does work with user and contact subscribers.
            Returns null for group subscriber -> role, contact group and persona.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberEmailRetriever.GetEmailForContact(System.Int32)">
            <summary>
            Get email for group subscriber (Contact group or Persona).
            </summary>
            <param name="contactID">ID of contact that email is retrieved for</param>
            <returns>Null when contact was not found</returns>
        </member>
        <member name="T:CMS.Newsletters.ISubscriberFullNameFormater">
            <summary>
            Provides methods for building full name of subscribers of all existing types.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetUserSubscriberName(System.String)">
            <summary>
            Returns name for user subscriber.
            </summary>
            <param name="fullName">Full name of user subscriber</param>
            <returns>Name of user subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetRoleSubscriberName(System.String)">
            <summary>
            Returns name for role subscriber.
            </summary>
            <param name="roleName">Name of role</param>
            <returns>Name of role subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetContactSubscriberName(System.String,System.String,System.String)">
            <summary>
            Returns name of contact subscriber. Adds spaces where necessary.
            </summary>
            <param name="firstName">First name of contact</param>
            <param name="middleName">Middle name of contact</param>
            <param name="lastName">Last name of contact</param>
            <returns>Name of contact subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetContactGroupSubscriberName(System.String)">
            <summary>
            Returns name for contact group subscriber.
            </summary>
            <param name="contactGroupName">Name of contact group</param>
            <returns>Name of contact group subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberFullNameFormater.GetPersonaSubscriberName(System.String)">
            <summary>
            Returns name for persona subscriber.
            </summary>
            <param name="personaName">Name of persona</param>
            <returns>Name of persona subscriber</returns>
        </member>
        <member name="T:CMS.Newsletters.ISubscriberInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberEmailRetriever">
            <summary>
            Class for retrieving subscriber email address.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberEmailRetriever.#ctor(CMS.ContactManagement.IContactInfoProvider,CMS.Newsletters.ISubscriberInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.SubscriberEmailRetriever"/> class.
            </summary>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <param name="subscriberInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactInfoProvider"/> or <paramref name="subscriberInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberEmailRetriever.GetSubscriberEmail(System.Int32)">
            <summary>
            Returns email address for given contact subscriber.
            Returns null for contact group subscriber.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberEmailRetriever.GetEmailForContact(System.Int32)">
            <summary>
            Get email for contact.
            </summary>
            <param name="contactID">ID of contact that email is retrieved for</param>
            <returns>Null when contact was not found</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberEmailRetriever.IsContactSubscriber(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Returns true if subscriber is contact.
            </summary>
            <param name="subscriber">Subscriber</param>
        </member>
        <member name="T:CMS.Newsletters.SubscriberFullNameFormater">
            <summary>
            Class builds full name of subscribers of all existing types.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetUserSubscriberName(System.String)">
            <summary>
            Returns name for user subscriber.
            </summary>
            <param name="fullName">Full name of user subscriber</param>
            <returns>Name of user subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetRoleSubscriberName(System.String)">
            <summary>
            Returns name for role subscriber.
            </summary>
            <param name="roleName">Name of role</param>
            <returns>Name of role subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetContactSubscriberName(System.String,System.String,System.String)">
            <summary>
            Returns name of contact subscriber. Adds spaces where necessary.
            </summary>
            <param name="firstName">First name of contact</param>
            <param name="middleName">Middle name of contact</param>
            <param name="lastName">Last name of contact</param>
            <returns>Name of contact subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetContactGroupSubscriberName(System.String)">
            <summary>
            Returns name for contact group subscriber.
            </summary>
            <param name="contactGroupName">Name of contact group</param>
            <returns>Name of contact group subscriber</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberFullNameFormater.GetPersonaSubscriberName(System.String)">
            <summary>
            Returns name for persona subscriber.
            </summary>
            <param name="personaName">Name of persona</param>
            <returns>Name of persona subscriber</returns>
        </member>
        <member name="T:CMS.Newsletters.SubscriberInfo">
            <summary>
            Subscriber data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_CONTACTGROUP">
            <summary>
            Object type for contact group
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.OBJECT_TYPE_CONTACT">
            <summary>
            Object type for contact
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.mSubscriberCustomData">
            <summary>
            Subscriber custom data.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOCONTACTGROUP">
            <summary>
            Type information for contact group subscriber.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfo.TYPEINFOCONTACT">
            <summary>
            Type information for contact subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberID">
            <summary>
            SubscriberID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberEmail">
            <summary>
            SubscriberEmail.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberFirstName">
            <summary>
            SubscriberFirstName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberLastName">
            <summary>
            SubscriberLastName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberFullName">
            <summary>
            SubscriberFullName.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberSiteID">
            <summary>
            SubscriberSiteID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberType">
            <summary>
            SubscriberType.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberRelatedID">
            <summary>
            SubscriberRelatedID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberCustomData">
            <summary>
            Subscriber custom data.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberGUID">
            <summary>
            Subscriber GUID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberBounces">
            <summary>
            Gets or sets the number of bounced e-mails for this subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberRelated">
            <summary>
            Subscriber related object (contact, contact group).
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.SubscriberIsFake">
            <summary>
            Indicates fake subscriber. <see cref="T:CMS.Newsletters.IFakeSubscriberService"/>
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfo.TypeInfo">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.RegisterProperties">
            <summary>
            Register the custom properties.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.#ctor">
            <summary>
            Constructor - Creates an empty Subscriber object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.#ctor(CMS.Newsletters.SubscriberInfo,System.Boolean)">
            <summary>
            Creates a new Subscriber object from the existing Subscriber object.
            Copy constructor.
            </summary>
            <param name="info">Original object to copy</param>
            <param name="keepSourceData">If true, the copy is shallow, otherwise a deep copy is created (all object's data is cloned)</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Subscriber object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>ManageSubscribers permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="T:CMS.Newsletters.SubscriberInfoProvider">
            <summary>
            Class providing Subscriber management.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberInfoProvider.mLicSubscribers">
            <summary>
            License limitation subscriber table
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberInfoProvider.LicSubscribers">
            <summary>
            License limitation subscriber table
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:CMS.Newsletters.SubscriberInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <returns>Subscriber specified by his ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.Guid,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber GUID</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his GUID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfo(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberType">Subscriber type</param>
            <param name="subscriberRelatedId">Subscriber's related ID</param>
            <param name="siteId">ID of the site this subscriber belongs to</param>
            <returns>Subscriber specified by his type, related ID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberByEmail(System.String,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="email">Subscriber e-mail</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber specified by his email and site ID</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Set(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SetSubscriberInfo(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sets (updates or inserts) specified subscriber.
            </summary>
            <param name="subscriber">Subscriber to set</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.Delete(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfo(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberObj">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes subscription from the newsletter.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="newsletterId">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates if unsubscription email should be send</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribers(CMS.Newsletters.SubscriberInfo,System.Int32)">
            <summary>
            Gets the list of subscriber's members.
            Subscriber member has SubscriberID=0.
            </summary>
            <param name="subscriber">Subscriber definition</param>
            <param name="topN">Number of members that should be returned (all are returned if 0)</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscribers">
            <summary>
            Returns a query for all the SubscriberInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SynchronizeSubscriberInfomation(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Renames subscriber specified by subscriberRealtedId on all sites.
            Optional parameters are saved to subscriber only when not set to null.
            </summary>
            <param name="subscriberType">Type of subscriber</param>
            <param name="subscriberRelatedId">ID of related subscriber</param>
            <param name="fullName">Subscriber's full name</param>
            <param name="firstName">(Optional) Subscriber's first name</param>
            <param name="lastName">(Optional) Subscriber's last name</param>
            <param name="email">(Optional) Subscriber's e-mail address when needed</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetFirstSubscriberWithSpecifiedEmail(System.Int32,System.String)">
            <summary>
            Gets first subscriber member with matching email address of given newsletter.
            </summary>
            <param name="newsletterId">ID of newsletter to get subscribers from</param>
            <param name="email">Email to find</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.CreateSubscriberFromContact(System.Int32,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates subscriber object using contact info and source subscriber data.
            </summary>
            <param name="contactId">Contact ID</param>
            <param name="original">Source subscriber</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.ClearLicSubscribers">
            <summary>
            Clear hashtable.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.GetSubscriberInfoInternal(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the Subscriber object for the specified subscriber.
            </summary>
            <param name="subscriberType">Subscriber type</param>
            <param name="subscriberRelatedId">Subscriber's related ID</param>
            <param name="siteId">ID of the site this subscriber belongs to</param>
            <returns>Subscriber specified by his type, related ID and site</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.SetSubscriberInfoInternal(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Sets (updates or inserts) specified subscriber.
            </summary>
            <param name="subscriber">Subscriber to set</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.DeleteSubscriberInfoInternal(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Deletes specified subscriber.
            </summary>
            <param name="subscriberObj">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.UpdateDataInternal(CMS.DataEngine.WhereCondition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Updates the data in the database based on the given where condition.
            </summary>
            <param name="where">Where condition.</param>
            <param name="values">New values for the data. Dictionary of [columnName] => [value].</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberInfoProvider.BulkDeleteInternal(CMS.DataEngine.IWhereCondition)">
            <summary>
            Bulk deletes info objects based on the given condition.
            </summary>
            <param name="where">Where condition for the objects which should be deleted.</param>
        </member>
        <member name="T:CMS.Newsletters.ApprovalResult">
            <summary>
            Subscription approval result.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ApprovalResult.Success">
            <summary>
            Represents that subscription was found and successfully approved.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ApprovalResult.Failed">
            <summary>
            Represents that subscription has failed.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ApprovalResult.NotFound">
            <summary>
            Represents that subscription wasn't found.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ApprovalResult.TimeExceeded">
            <summary>
            Represents that subscription interval for approving request has exceeded.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ApprovalResult.AlreadyApproved">
            <summary>
            Represents that subscription is already approved.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.BounceDetection">
            <summary>
            Detects bounced subscriber.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.BounceDetection.#ctor(CMS.ContactManagement.IContactInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.BounceDetection"/> class.
            </summary>
            <param name="contactInfoProvider">Provider for <see cref="T:CMS.ContactManagement.ContactInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="contactInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.BounceDetection.IsBounced(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Returns true if given <paramref name="subscriber"/> is bounced.
            </summary>
            <param name="subscriber">Subscriber to check.</param>
        </member>
        <member name="T:CMS.Newsletters.DoubleOptInExtensionDefinition">
            <summary>
            Describes configuration for double opt-in extension.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.DoubleOptInExtensionDefinition.GetQueryParameters">
            <summary>
            This function is invoked when double opt-in URL is generated.
            </summary>
            <remarks>Return query parameters which are used to extend double opt-in URL.</remarks>
        </member>
        <member name="P:CMS.Newsletters.DoubleOptInExtensionDefinition.ApprovalAction">
            <summary>
            This action is invoked when the subscription is approved via double opt-in URL.
            </summary>
            <remarks>Gets a copy of collection of HTTP query-string values as parameter.</remarks>
        </member>
        <member name="M:CMS.Newsletters.DoubleOptInExtensionDefinition.#ctor(System.Func{System.Collections.Specialized.NameValueCollection},System.Action{System.Collections.Specialized.NameValueCollection})">
            <summary>
            Initializes a new instance of <see cref="T:CMS.Newsletters.DoubleOptInExtensionDefinition"/>.
            </summary>
            <param name="getQueryParameters">Function which is invoked when double opt-in URL is generated</param>
            <param name="approvalAction">Action which is invoked when the subscription is approved via double opt-in URL</param>
        </member>
        <member name="T:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister">
            <summary>
            Register for actions extending double opt-in feature.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister.Instance">
            <summary>
            Gets the <see cref="T:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister"/> instance.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister.Items">
            <summary>
            Gets all registered instances of <see cref="T:CMS.Newsletters.DoubleOptInExtensionDefinition"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister.#ctor">
            <summary>
            Creates a new instance of <see cref="T:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister"/>.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.DoubleOptInExtensionDefinitionRegister.Register(CMS.Newsletters.DoubleOptInExtensionDefinition)">
            <summary>
            Registers given <paramref name="definition"/> to the system.
            </summary>
            <param name="definition">Instance of <see cref="T:CMS.Newsletters.DoubleOptInExtensionDefinition"/> to be registered.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when null <paramref name="definition"/> is provided.</exception>
        </member>
        <member name="T:CMS.Newsletters.HashValidationResult">
            <summary>
            Hash validation result.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.HashValidationResult.Success">
            <summary>
            Represents that hash was successfully approved.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.HashValidationResult.Failed">
            <summary>
            Hash did not pass security validation.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.HashValidationResult.NotFound">
            <summary>
            Subscription wasn't found.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.HashValidationResult.TimeExceeded">
            <summary>
            Interval for hash validation has exceeded.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IBounceDetection">
            <summary>
            Defines method to detect bounced subscriber.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IBounceDetection.IsBounced(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Returns true if given <paramref name="subscriber"/> is bounced.
            </summary>
            <param name="subscriber">Subscriber to check.</param>
        </member>
        <member name="T:CMS.Newsletters.IIssueContactGroupInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IIssueContactGroupInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding structure.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IIssueContactGroupInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding structure.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IIssueContactGroupInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
        </member>
        <member name="M:CMS.Newsletters.IIssueContactGroupInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
        </member>
        <member name="T:CMS.Newsletters.IssueContactGroupInfo">
            <summary>
            IssueContactGroupInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueContactGroupInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.IssueContactGroupInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueContactGroupInfo.IssueContactGroupID">
            <summary>
            Issue contact group ID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueContactGroupInfo.IssueID">
            <summary>
            Issue ID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.IssueContactGroupInfo.ContactGroupID">
            <summary>
            Contact group ID
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfo.#ctor">
            <summary>
            Constructor - Creates an empty IssueContactGroupInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new IssueContactGroupInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Overrides permission name for managing the object info.
            </summary>
            <param name="permission">Permission type</param>
            <returns>Configure permission name for managing permission type, or base permission name otherwise</returns>
        </member>
        <member name="T:CMS.Newsletters.IssueContactGroupInfoProvider">
            <summary>
            Class providing IssueContactGroupInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.GetIssueContactGroups">
            <summary>
            Returns a query for all the IssueContactGroupInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding structure.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding structure.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.GetIssueContactGroupInfo(System.Int32,System.Int32)">
            <summary>
            Returns IssueContactGroupInfo for given <see cref="T:CMS.Newsletters.IssueInfo"/> and <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </summary>
            <param name="issueID">IssueInfo ID</param>
            <param name="contactGroupID">ContactGroupInfo ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.SetIssueContactGroupInfo(CMS.Newsletters.IssueContactGroupInfo)">
            <summary>
            Sets (updates or inserts) specified IssueContactGroupInfo.
            </summary>
            <param name="infoObj">IssueContactGroupInfo to be set</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.DeleteIssueContactGroupInfo(CMS.Newsletters.IssueContactGroupInfo)">
            <summary>
            Deletes specified IssueContactGroupInfo.
            </summary>
            <param name="infoObj">IssueContactGroupInfo to be deleted</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.DeleteIssueContactGroupInfo(System.Int32,System.Int32)">
            <summary>
            Deletes IssueContactGroupInfo for given <see cref="T:CMS.Newsletters.IssueInfo"/> and <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </summary>
            <param name="issueID">IssueInfo ID</param>
            <param name="contactGroupID">ContactGroupInfo ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.IssueContactGroupInfo"/> binding.
            </summary>
            <param name="issueId">Email ID.</param>
            <param name="contactGroupId">Contact group ID.</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.GetIssueContactGroupInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns IssueContactGroupInfo for given <see cref="T:CMS.Newsletters.IssueInfo"/> and <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </summary>
            <param name="issueID">IssueInfo ID</param>
            <param name="contactGroupID">ContactGroupInfo ID</param>
        </member>
        <member name="M:CMS.Newsletters.IssueContactGroupInfoProvider.DeleteIssueContactGroupInfoInternal(System.Int32,System.Int32)">
            <summary>
            Deletes IssueContactGroupInfo for given <see cref="T:CMS.Newsletters.IssueInfo"/> and <see cref="T:CMS.ContactManagement.ContactGroupInfo"/>.
            </summary>
            <param name="issueID">IssueInfo ID</param>
            <param name="contactGroupID">ContactGroupInfo ID</param>
        </member>
        <member name="T:CMS.Newsletters.ISubscriberNewsletterInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberNewsletterInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding structure.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberNewsletterInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding structure.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberNewsletterInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
        </member>
        <member name="M:CMS.Newsletters.ISubscriberNewsletterInfoProvider.Add(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <param name="when">Indication when subscription was created.</param>
            <param name="approved">A value indicating whether subscription is approved.</param>
        </member>
        <member name="T:CMS.Newsletters.ISubscriptionApprovalService">
            <summary>
            Approves subscription by provided hash.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionApprovalService.ApproveSubscription(System.String,System.Boolean,System.String,System.DateTime)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation e-mail may be sent optionally.
            </summary>
            <remarks>
            If the subscription is approved, peforms logging of the subscription logging activity.
            </remarks>
            <param name="subscriptionHash">Hash parameter representing specific subscription</param>
            <param name="sendConfirmationEmail">Indicates if confirmation e-mail should be sent. Confirmation e-mail may also be sent if newsletter settings requires so</param>
            <param name="siteName">Site name</param>
            <param name="datetime">Date and time of request.</param>
        </member>
        <member name="T:CMS.Newsletters.ISubscriptionHashValidator">
            <summary>
            Validates subscription hash.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionHashValidator.Validate(System.String,System.String,System.DateTime)">
            <summary>
            Validates the subscription and unsubscription hash.
            </summary>
            <param name="requestHash">Hash to validate</param>
            <param name="siteName">Site name</param>
            <param name="datetime">Date time</param>
        </member>
        <member name="T:CMS.Newsletters.ISubscriptionHelper">
            <summary>
            Handles all work with subscriptions.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionHelper.SubscriptionExists(System.Int32,System.Int32)">
            <summary>
            Checks existence of a subscription for the subscriber and
            newsletter. No advanced checks (like 
            if subscription is approved etc.) are performed. 
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <returns>Returns <c>true</c> if subscriber is subscribed to newsletter.</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionHelper.IsExceeded(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Returns <c>true</c> if subscription exceeded OPT-IN interval.
            </summary>
            <param name="subscription">Subscription.</param>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionHelper.Subscribe(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Subscribes the subscriber to the newsletter.
            Sets the subscription approve column. If false, double opt-in email must be send after this method.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="isApproved">Sets the subscription approve column. If false, double opt-in email must be send after this method.</param>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionHelper.CreateSubscriber(CMS.ContactManagement.ContactInfo,System.Int32,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates subscriber from contact object and saves to the database.
            </summary>
            <param name="contact">ContactInfo object</param>
            <param name="siteId">Site ID</param>
            <param name="sourceSubscriber">Subscriber info with initial data used for subscriber creation.</param>
            <returns>Subscriber object</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionHelper.CreateSubscriber(CMS.ContactManagement.ContactGroupInfo,System.Int32)">
            <summary>
            Creates subscriber from contact group object and saves to the database.
            </summary>
            <param name="contactGroup">ContactGroupInfo object</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber object</returns>
        </member>
        <member name="T:CMS.Newsletters.ISubscriptionService">
            <summary>
            Handles all work with subscriptions and unsubscriptions.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.IsMarketable(System.Int32,System.Int32)">
            <summary>
            Returns <c>true</c> if subscriber receives marketing emails.
            </summary>
            <param name="subscriberID">Subscriber ID.</param>
            <param name="newsletterID">Newsletter ID.</param>
            <exception cref="T:System.ArgumentException">Subscriber or newsletter does not exist</exception>
            <remarks>If subscriber represents contact group, method only checks the contact 
            group is subscribed (does not check particular contacts).</remarks>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.IsMarketable(CMS.ContactManagement.ContactInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Returns <c>true</c> if given <paramref name="contact"/> receives marketing emails of the given <paramref name="newsletter"/>.
            </summary>
            <param name="contact">Contact.</param>
            <param name="newsletter">Newsletter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contact"/> or <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.GetAllActiveSubscriptions(System.Int32)">
            <summary>
            Method returns all subscriptions for given contact. Contact can be subscribed directly or using contact group.
            Only active subscriptions are retrieved (not approved one are omitted, unsubscriptions are reflected).
            Does not filter out subscriptions blocked using bounces.
            </summary>
            <example>
            Example shows how to get all newsletters the current contact is subscribed to
            <code>
            var newsletterIds = Service&lt;ISubscriptionService&gt;.Entry().GetAllActiveSubscriptions(currentContact);
                                                                     .Column("NewsletterID")
                                                                     .Distinct()
            </code>
            </example>
            <param name="contactId">ContactId that subscriptions are returned for</param>
            <returns>Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with all <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> objects that are valid for the given contact</returns>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.IsUnsubscribed(System.String,System.Int32)">
            <summary>
            Returns true if specified email address is unsubscribed from newsletter.
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">Email is not specified</exception>
            <remarks>Takes global unsubscription into account.</remarks>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.UnsubscribeFromSingleNewsletter(System.String,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Unsubscribes the email from newsletter. <see cref="F:CMS.Newsletters.NewsletterEvents.SubscriberUnsubscribes"/> event is invoked after unsubscribing.
            Binding in the newsletter-subscription table will stay. 
            Email will be added into the unsubscription list.
            Optionally, you can decide whether to send confirmation email.
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter to unsubscribe email from</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known. When issue ID is present, number of unsubscriptions for this issue is increased</param>
            <param name="sendConfirmationEmail">If true, confirmation email will be send after successful unsubscription</param>
            <exception cref="T:System.ArgumentException">Newsletter does not exist or email is not specified</exception>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.UnsubscribeFromAllNewsletters(System.String,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes the email from all newsletters. <see cref="F:CMS.Newsletters.NewsletterEvents.SubscriberUnsubscribes"/> event is invoked after unsubscribing.
            Binding in the newsletter-subscription table will stay.
            Email will be added into the unsubscription list.
            </summary>
            <param name="email">Email address</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
            <exception cref="T:System.ArgumentException">Email is not specified</exception>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.Subscribe(System.Int32,System.Int32,CMS.Newsletters.SubscribeSettings)">
            <summary>
            Subscribes subscriber to given newsletter.
            </summary>
            <remarks>      
            If the subscription is approved, performs logging of the subscription logging activity.
            Whether or not email is removed from newsletter unsubscription or "unsubscribe from all" list can be specified in <paramref name="subscribeSettings"/> parameter.
            </remarks>
            <param name="subscriberID">Subscriber ID.</param>
            <param name="newsletterID">Newsletter ID.</param>
            <param name="subscribeSettings">Options defining additional behavior of this method. Cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeSettings"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Newsletter does not exist or email is not specified.</exception>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.Subscribe(CMS.ContactManagement.ContactInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscribeSettings)">
            <summary>
            Subscribes contact to given newsletter.
            </summary>
            <remarks>
            If the subscription is approved, performs logging of the subscription logging activity.
            Whether or not email is removed from newsletter unsubscription or "unsubscribe from all" list can be specified in <paramref name="subscribeSettings"/> parameter.
            </remarks>
            <param name="contact"><see cref="T:CMS.ContactManagement.ContactInfo"/> object.</param>
            <param name="newsletter"><see cref="T:CMS.Newsletters.NewsletterInfo"/> object.</param>
            <param name="subscribeSettings">Options defining additional behavior of this method. Cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="contact"/>, <paramref name="newsletter"/>, or <paramref name="subscribeSettings"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.Subscribe(CMS.ContactManagement.ContactGroupInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Subscribes contact group to given newsletter.
            </summary>
            <param name="contactGroup">ContactGroupInfo object</param>
            <param name="newsletter">NewsletterInfo object</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="contactGroup"/> or <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.ISubscriptionService.RemoveSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Unsubscribe the subscriber from the newsletter.
            Removes the binding from newsletter subscriber table.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates whether to send confirmation email or not</param>
            <exception cref="T:System.ArgumentException">Newsletter or subscriber does not exist or subscription does not exist.</exception>
        </member>
        <member name="T:CMS.Newsletters.SubscriberNewsletterInfo">
            <summary>
            SubscriberNewsletterInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscribedWhen">
            <summary>
            Indicates when subscriber was subscribed to the newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.NewsletterID">
            <summary>
            ID of the newsletter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriberID">
            <summary>
            ID of the Subscriber.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionApproved">
            <summary>
            Indicates if subscription is allowed.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionApprovedWhen">
            <summary>
            Gets or sets when subscription was approved.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriptionApprovalHash">
            <summary>
            Hash of subscription approval.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscriberNewsletterInfo.SubscriberNewsletterID">
            <summary>
            Subscriber newsletter ID.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberNewsletterInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberNewsletterInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriberNewsletterInfoProvider">
            <summary>
            Class providing SubscriberNewsletterInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletters">
            <summary>
            Returns a query for all the SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetApprovedSubscriberNewsletters">
            <summary>
            Returns a query for all approved SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding structure.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding structure.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscriberID and newsletterID.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfo(System.String)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscription hash.
            </summary>
            <param name="subscriptionHash">Subscription hash</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.SetSubscriberNewsletterInfo(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Sets (updates or inserts) specified SubscriberNewsletterInfo.
            </summary>
            <param name="infoObj">SubscriberNewsletterInfo to be set</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObj"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfo(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Deletes specified SubscriberNewsletterInfo.
            </summary>
            <param name="infoObj">SubscriberNewsletterInfo to be deleted</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="infoObj"/> is null</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfo(System.Int32,System.Int32)">
            <summary>
            Deletes SubscriberNewsletterInfo specified by subscriberID and newsletterID.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfos(System.String)">
            <summary>
            Deletes SubscriberNewsletterInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition. Deletes all subscribers when where condition is set to null</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetNewsletterSubscribersIds(System.Int32)">
            <summary>
            Returns subscribers IDs for a specified newsletter.
            </summary>
            <param name="newsletterId">Id of newsletter</param>
            <returns>IDs of subscribers for given newsletter</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriptions(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns all existing subscriptions along with detailed information about the subscriber.
            </summary>
            <param name="where">WHERE parameter</param>
            <param name="orderBy">ORDER BY parameter</param>
            <param name="topN">TOP N parameter</param>
            <param name="columns">Selected columns</param>
            <returns>DataSet with subscriptions and their respective subscriber information</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RemoveSubscriberFromNewsletter(System.String)">
            <summary>
            Removes specified subscriber from newsletter.
            </summary>
            <param name="subscriptionApprovalHash">Subscription approval hash.</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriptionApprovalHash</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.ApproveSubscription(System.Int32,System.Int32)">
            <summary>
            Approve subscription.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RejectSubscription(System.Int32,System.Int32)">
            <summary>
            Reject subscription.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.SetApprovalStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set status of subscriber approval.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="status">Status of subscriber</param>
            <exception cref="T:System.ArgumentException">No subscriber was found for provided subscriberID and newsletterID</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.Add(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> binding.
            </summary>
            <param name="subscriberId">Email campaign subscriber ID.</param>
            <param name="newsletterId">Email feed ID.</param>
            <param name="when">Indication when subscription was created.</param>
            <param name="approved">A value indicating whether subscription is approved.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletter(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Indication when subscription was created</param>
            <param name="approved">Subscription is approved</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriptionsByType(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with subscribers by type for specified issue(newsletter).
            </summary>
            <param name="subscriberType">Type of the subscriber</param>
            <param name="newsletterID">Newsletter ID representing</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N </param>
            <param name="columns">Columns</param>
            <returns>Returns DataSet.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetApprovedSubscriberNewslettersInternal">
            <summary>
            Returns a query for all approved SubscriberNewsletterInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns SubscriberNewsletterInfo with specified ID.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.DeleteSubscriberNewsletterInfosInternal(System.String)">
            <summary>
            Deletes SubscriberNewsletterInfo objects based on specified where condition.
            </summary>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriberNewsletterInfoInternal(System.String)">
            <summary>
            Returns the SubscriberNewsletterInfo structure for the specified subscriptionHash.
            </summary>
            <param name="subscriptionHash">Subscription hash.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.ApproveSubscriptionInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Approves subscription.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.RejectSubscriptionInternal(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Rejects subscription.
            </summary>
            <param name="infoObj">SubscriberNewsletter object</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.AddSubscriberToNewsletterInternal(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Adds specified subscriber to the newsletter.
            </summary>
            <param name="subscriberId">SubscriberID</param>
            <param name="newsletterId">NewsletterID</param>
            <param name="when">Indication when subscription was created</param>
            <param name="approved">Subscription is approved</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscriptionsByTypeInternal(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Returns DataSet with subscribers by type for specified issue(newsletter).
            </summary>
            <param name="subscriberType">Type of the subscriber</param>
            <param name="newsletterID">Newsletter ID representing</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N </param>
            <param name="columns">Columns</param>
            <returns>Returns DataSet.</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.GetSubscribersIdsFromViewInternal(System.Int32)">
            <summary>
            Returns subscribers IDs for a specified newsletter.
            </summary>
            <param name="newsletterId">Id of newsletter</param>
            <returns>DataQuery containing all IDs of subscribers with a given newsletter</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterInfoProvider.UpdateDataInternal(CMS.DataEngine.WhereCondition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Updates the data in the database based on the given where condition.
            </summary>
            <param name="where">Where condition.</param>
            <param name="values">New values for the data. Dictionary of [columnName] => [value].</param>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.SubscriberNewsletterListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.#ctor">
            <summary>
            Constructor - Creates an empty SubscriberNewsletterListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new SubscriberNewsletterListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriberNewsletterListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscribeSettings">
            <summary>
            Settings defining how exactly will ISubscriptionService.Subscribe method behave.
            </summary>
            <seealso cref="M:CMS.Newsletters.ISubscriptionService.Subscribe(CMS.ContactManagement.ContactInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscribeSettings)"/>
            <seealso cref="M:CMS.Newsletters.ISubscriptionService.Subscribe(System.Int32,System.Int32,CMS.Newsletters.SubscribeSettings)"/>
        </member>
        <member name="P:CMS.Newsletters.SubscribeSettings.SendConfirmationEmail">
            <summary>
            If <c>true</c>, confirmation email will be send after successful subscription.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscribeSettings.AllowOptIn">
            <summary>
            If <c>true</c> and double opt-in is enabled for given newsletter, subscription will be created as unapproved and double opt-in email will be sent.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.SubscribeSettings.RemoveAlsoUnsubscriptionFromAllNewsletters">
            <summary>
            If <c>true</c>, email is also removed from "unsubscribe all" list so it receives newsletters again.
            Default is <c>false</c>.
            </summary>
            <remarks>When set to <c>true</c>, the option <see cref="P:CMS.Newsletters.SubscribeSettings.RemoveUnsubscriptionFromNewsletter"/> is ignored.</remarks>
        </member>
        <member name="P:CMS.Newsletters.SubscribeSettings.RemoveUnsubscriptionFromNewsletter">
            <summary>
            If <c>true</c>, unsubscription is removed for specified email and newsletter.
            Default is <c>false</c>.
            </summary>
            <remarks>If the option <see cref="P:CMS.Newsletters.SubscribeSettings.RemoveAlsoUnsubscriptionFromAllNewsletters"/> is set to <c>true</c>, both unsubscription types 
            are deleted for specified email address regardless the option <see cref="P:CMS.Newsletters.SubscribeSettings.RemoveUnsubscriptionFromNewsletter"/>.
            </remarks>
        </member>
        <member name="P:CMS.Newsletters.SubscribeSettings.SourceSubscriber">
            <summary>
            <see cref="T:CMS.Newsletters.SubscriberInfo"/> object with initial data used for subscriber creation.  
            </summary>
        </member>
        <member name="T:CMS.Newsletters.SubscriptionApprovalService">
            <summary>
            Approves subscription by provided hash.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionApprovalService.#ctor(CMS.Newsletters.IUnsubscriptionProvider,CMS.Newsletters.ISubscriptionHashValidator,CMS.Newsletters.ISubscriberEmailRetriever,CMS.Newsletters.IConfirmationSender,CMS.Newsletters.INewslettersActivityLogger,CMS.Newsletters.INewsletterInfoProvider,CMS.Newsletters.ISubscriberInfoProvider)">
            <summary>
            Constructor.
            </summary>
            <param name="unsubscriptionProvider">Implementation of <see cref="T:CMS.Newsletters.IUnsubscriptionProvider"/> interface.</param>
            <param name="subscriptionHashValidator">Implementation of <see cref="T:CMS.Newsletters.ISubscriptionHashValidator"/> interface.</param>
            <param name="subscriberEmailRetriever">Implementation of <see cref="T:CMS.Newsletters.ISubscriberEmailRetriever"/> interface.</param>
            <param name="confirmationSender">Implementation of <see cref="T:CMS.Newsletters.IConfirmationSender"/> interface.</param>
            <param name="newslettersActivityLogger">Implementation of <see cref="T:CMS.Newsletters.INewslettersActivityLogger"/> interface.</param>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
            <param name="subscriberInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionApprovalService.ApproveSubscription(System.String,System.Boolean,System.String,System.DateTime)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation email may be sent optionally.
            </summary>
            <remarks>
            If the subscription is approved, performs logging of the subscription logging activity.
            </remarks>
            <param name="subscriptionHash">Hash parameter representing specific subscription</param>
            <param name="sendConfirmationEmail">Indicates if confirmation email should be sent. Confirmation email may also be sent if newsletter settings requires so.</param>
            <param name="siteName">Site name</param>
            <param name="datetime">Date and time of request</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionApprovalService.ApproveSubscription(CMS.Newsletters.SubscriberNewsletterInfo,System.Boolean)">
            <summary>
            Approves existing subscription - sets SubscriptionApproved to true and SubscriptionApprovedWhen to current time. 
            Checks if subscription wasn't already approved. Confirmation email may be sent optionally.
            When email of subscriber is blocked for all newsletters or for newsletter that is being approved, this email is deleted from blacklist when approval is successful.
            </summary>
            <param name="subscription">SubscriberNewsletterInfo object</param>
            <param name="sendConfirmationEmail">Indicates if confirmation email should be sent. Confirmation email may also be sent if newsletter settings requires so</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionApprovalService.InvokeApprovalAction(CMS.Newsletters.DoubleOptInExtensionDefinition)">
            <summary>
            Invokes the approval action from double opt-in definition. 
            Passes query string from the current HttpContext as parameter for the action. 
            The values of the query string internal representation are first passed into a dictionary.
            </summary>
            <param name="definition">The definition containing the approval action.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionApprovalService.TryToLogSubscribingActivity(CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscriberInfo,System.String)">
            <summary>
            Tries to log <see cref="F:CMS.Activities.PredefinedActivityType.NEWSLETTER_SUBSCRIBING"/> activity for the currently approved subscription.
            </summary>
            <param name="newsletter">Newsletter the subscription was approved for</param>
            <param name="subscriber">Subscriber the subscription was approved for</param>
            <param name="email">Email the subscription was approved for</param>
        </member>
        <member name="T:CMS.Newsletters.SubscriptionHashValidator">
            <summary>
            Validates subscription hash.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHashValidator.#ctor(CMS.Newsletters.INewsletterInfoProvider,CMS.Newsletters.ISubscriberInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.SubscriptionHashValidator"/> class.
            </summary>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
            <param name="subscriberInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="newsletterInfoProvider"/> or <paramref name="subscriberInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHashValidator.Validate(System.String,System.String,System.DateTime)">
            <summary>
            Validates the subscription and unsubscription hash.
            </summary>
            <param name="requestHash">Hash to validate</param>
            <param name="siteName">Site name</param>
            <param name="datetime">Date time</param>
        </member>
        <member name="T:CMS.Newsletters.SubscriptionHelper">
            <summary>
            Handles all work with subscriptions.
            Works with newsletter subscriber binding table.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHelper.#ctor(CMS.Newsletters.ISubscriberInfoProvider,CMS.Newsletters.ISubscriberNewsletterInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Newsletters.SubscriptionHelper"/> class.
            </summary>
            <param name="subscriberInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.</param>
            <param name="subscriberNewsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="subscriberInfoProvider"/> or <paramref name="subscriberNewsletterInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHelper.SubscriptionExists(System.Int32,System.Int32)">
            <summary>
            Returns true if subscriber is subscribed to newsletter.
            Looks only in the binding table.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHelper.IsExceeded(CMS.Newsletters.SubscriberNewsletterInfo)">
            <summary>
            Returns true if given subscription exceeded the opt-in interval (Interval is defined in settings).
            </summary>
            <param name="subscription">Subscription</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHelper.Subscribe(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Subscribes the subscriber to the newsletter.
            Sets the subscription approve column. If false, double opt-in email must be send after this method.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="isApproved">Sets the subscription approve column. If false, double opt-in email must be send after this method.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHelper.CreateSubscriber(CMS.ContactManagement.ContactInfo,System.Int32,CMS.Newsletters.SubscriberInfo)">
            <summary>
            Creates subscriber from contact object and saves to the database.
            </summary>
            <param name="contact">ContactInfo object</param>
            <param name="siteId">Site ID</param>
            <param name="sourceSubscriber">Subscriber info with initial data used for subscriber creation.</param>
            <returns>Subscriber object</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionHelper.CreateSubscriber(CMS.ContactManagement.ContactGroupInfo,System.Int32)">
            <summary>
            Creates subscriber from contact group object and saves to the database.
            </summary>
            <param name="contactGroup">ContactGroupInfo object</param>
            <param name="siteId">Site ID</param>
            <returns>Subscriber object</returns>
        </member>
        <member name="T:CMS.Newsletters.SubscriptionService">
            <summary>
            Handles all work with subscriptions and unsubscriptions.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.#ctor(CMS.Newsletters.ISubscriptionHelper,CMS.Newsletters.IUnsubscriptionProvider,CMS.Newsletters.ISubscriberEmailRetriever,CMS.Newsletters.IConfirmationSender,CMS.Newsletters.INewslettersActivityLogger,CMS.Newsletters.IBounceDetection,CMS.Newsletters.INewsletterInfoProvider,CMS.Newsletters.ISubscriberInfoProvider,CMS.Newsletters.ISubscriberNewsletterInfoProvider,CMS.Newsletters.IUnsubscriptionInfoProvider,CMS.Base.Internal.IHttpContextRetriever)">
            <summary>
            Constructor.
            </summary>
            <param name="subscriptionHelper">Implementation of <see cref="T:CMS.Newsletters.ISubscriptionHelper"/>.</param>
            <param name="unsubscriptionProvider">Implementation of <see cref="T:CMS.Newsletters.IUnsubscriptionProvider"/>.</param>
            <param name="subscriberEmailRetriever">Implementation of <see cref="T:CMS.Newsletters.ISubscriberEmailRetriever"/>.</param>
            <param name="confirmationSender">Implementation of <see cref="T:CMS.Newsletters.IConfirmationSender"/>.</param>
            <param name="newslettersActivityLogger">Implementation of <see cref="T:CMS.Newsletters.INewslettersActivityLogger"/>.</param>
            <param name="bounceDetection">Implementation of <see cref="T:CMS.Newsletters.IBounceDetection"/>.</param>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
            <param name="subscriberInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberInfo"/> management.</param>
            <param name="subscriberNewsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> management.</param>
            <param name="unsubscriptionInfoProvider">Provider for <see cref="T:CMS.Newsletters.UnsubscriptionInfo"/> management.</param>
            <param name="httpContextRetriever">Implementation of <see cref="T:CMS.Base.Internal.IHttpContextRetriever"/>.</param>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.IsMarketable(System.Int32,System.Int32)">
            <summary>
            Returns <c>true</c> if subscriber receives marketing emails.
            </summary>
            <param name="subscriberID">Subscriber ID.</param>
            <param name="newsletterID">Newsletter ID.</param>
            <exception cref="T:System.ArgumentException">Subscriber -or- newsletter does not exist</exception>
            <remarks>If subscriber represents contact group, method only checks the contact 
            group is subscribed (does not check particular contacts).</remarks>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.IsMarketable(CMS.ContactManagement.ContactInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Returns <c>true</c> if given <paramref name="contact"/> receives marketing emails of the given <paramref name="newsletter"/>.
            </summary>
            <param name="contact">Contact.</param>
            <param name="newsletter">Newsletter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="contact"/> or <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.GetAllActiveSubscriptions(System.Int32)">
            <summary>
            Method returns all subscriptions for given contact. Contact can be subscribed directly or using contact group.
            Only active subscriptions are retrieved (not approved ones are omitted, unsubscriptions are reflected).
            Does not filter out subscriptions blocked using bounces.
            </summary>
            <example>
            Example shows how to get all newsletters the current contact is subscribed to
            <code>
            var newsletterIds = Service&lt;ISubscriptionService&gt;.Entry().GetAllActiveSubscriptions(currentContact);
                                                                     .Column("NewsletterID")
                                                                     .Distinct()
            </code>
            </example>
            <param name="contactId">ContactId that subscriptions are returned for</param>
            <returns>Returns <see cref="T:CMS.DataEngine.ObjectQuery"/> with all <see cref="T:CMS.Newsletters.SubscriberNewsletterInfo"/> objects that are valid for the given contact</returns>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.IsUnsubscribed(System.String,System.Int32)">
            <summary>
            Returns true if specified email address is unsubscribed from newsletter.
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter ID</param>
            <exception cref="T:System.ArgumentException">Email is not specified</exception>
            <remarks>Takes global unsubscription into account.</remarks>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.UnsubscribeFromSingleNewsletter(System.String,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Unsubscribes the email from newsletter. <see cref="F:CMS.Newsletters.NewsletterEvents.SubscriberUnsubscribes"/> event is invoked after unsubscribing.
            Binding in the newsletter-subscription table will stay. 
            Email will be added into the unsubscription list.
            Optionally, you can decide whether to send confirmation email.
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter to unsubscribe email from</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known. When issue ID is present, number of unsubscriptions for this issue is increased</param>
            <param name="sendConfirmationEmail">If true, confirmation email will be sent after successful unsubscription</param>
            <exception cref="T:System.ArgumentException">Newsletter does not exist or email is not specified</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="email"/> is already unsubscribed for given <paramref name="newsletterID"/>.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.UnsubscribeFromAllNewsletters(System.String,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes the email from all newsletters. <see cref="F:CMS.Newsletters.NewsletterEvents.SubscriberUnsubscribes"/> event is invoked after unsubscribing.
            Binding in the newsletter-subscription table will stay.
            Email will be added into the unsubscription list.
            </summary>
            <param name="email">Email address</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="email"/> is already unsubscribed.</exception>
            <exception cref="T:System.ArgumentException">Email is not specified</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.Subscribe(System.Int32,System.Int32,CMS.Newsletters.SubscribeSettings)">
            <summary>
            Subscribes subscriber to given newsletter.       
            </summary>
            <remarks>
            If the subscription is approved, performs logging of the subscription logging activity.
            Whether or not email is removed from newsletter unsubscription or "unsubscribe from all" list can be specified in <paramref name="subscribeSettings"/> parameter.
            </remarks>
            <param name="subscriberID">Subscriber ID.</param>
            <param name="newsletterID">Newsletter ID.</param>
            <param name="subscribeSettings">Options defining additional behavior of this method. Cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="subscribeSettings"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Newsletter does not exist or email is not specified.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.Subscribe(CMS.ContactManagement.ContactInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscribeSettings)">
            <summary>
            Subscribes contact to given newsletter.       
            </summary>
            <remarks>
            If the subscription is approved, performs logging of the subscription logging activity.
            Whether or not email is removed from newsletter unsubscription or "unsubscribe from all" list can be specified in <paramref name="subscribeSettings"/> parameter.        
            </remarks>
            <param name="contact"><see cref="T:CMS.ContactManagement.ContactInfo"/> object.</param>
            <param name="newsletter"><see cref="T:CMS.Newsletters.NewsletterInfo"/> object.</param>
            <param name="subscribeSettings">Options defining additional behavior of this method. Cannot be <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="contact"/>, <paramref name="newsletter"/>, or <paramref name="subscribeSettings"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.Subscribe(CMS.ContactManagement.ContactGroupInfo,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Subscribes contact group to given newsletter.
            </summary>
            <param name="contactGroup">ContactGroupInfo object</param>
            <param name="newsletter">NewsletterInfo object</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="contactGroup"/> or <paramref name="newsletter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.RemoveSubscription(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Unsubscribe the subscriber from the newsletter.
            Removes the binding from newsletter subscriber table.
            </summary>
            <param name="subscriberID">Subscriber ID</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="sendConfirmationEmail">Indicates whether to send confirmation email or not</param>
            <exception cref="T:System.ArgumentException">Newsletter or subscriber does not exist or subscription does not exist.</exception>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.ProcessSubscriptions(CMS.Newsletters.SubscribeSettings,System.Int32,CMS.Newsletters.NewsletterInfo)">
            <summary>
            Processes given combination of subscription and newsletter accordingly to given settings
            If email address can be retrieved, this email is removed from unsubscription
            </summary>
        </member>
        <member name="M:CMS.Newsletters.SubscriptionService.Subscribe(CMS.Newsletters.SubscriberInfo,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.SubscribeSettings)">
            <summary>
            Subscribes subscriber to the given newsletter.
            Whether or not email is removed from newsletter unsubscription or "unsubscribe from all" list can be specified in <paramref name="subscribeSettings"/> parameter.
            <paramref name="subscribeSettings"/> parameter specifies whether confirmation email will be send and if subscription should be approved immediately.
            </summary>
            <remarks>
            If the subscription is approved, performs logging of the subscription logging activity.
            </remarks>
            <param name="subscriber">SubscriberInfo object</param>
            <param name="newsletter">NewsletterInfo object</param>
            <param name="subscribeSettings">Options defining additional behavior of this method. Cannot be null.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="subscriber"/>, <paramref name="newsletter"/>, or <paramref name="subscribeSettings"/> is null.</exception>
        </member>
        <member name="T:CMS.Newsletters.BounceChecker">
            <summary>
            Task for checking bounced newsletter e-mails.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.BounceChecker.FallbackDecoderHandler">
            <summary>
            Occurs when a character set name could not be mapped to the encoding.
            </summary>
            <param name="characterSet">Character set name</param>
        </member>
        <member name="E:CMS.Newsletters.BounceChecker.OnFallbackDecoderEvent">
            <summary>
            Occurs when a character set from email content type header could not be mapped to the encoding.
            This allows to map given character set name to the encoding manually.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.IssueIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an issue ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.SubscriberIdRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an subscriber ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.BounceChecker.ContactIDRegex">
            <summary>
            Gets a regex that can be used to parse email header fields to search for an contact ID.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the task given in a task info.
            </summary>
            <param name="task">Container with task information</param>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.ProcessAllEmails">
            <summary>
            Connects to the predefined mailbox, retrieves and checks all messages.
            </summary>
            <returns>Textual description of task run's failure if any.</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.ProcessEmail(MimeKit.MimeMessage)">
            <summary>
            Checks a given e-mail message for known header fields.
            If the message is recognized as bounced e-mail, then it is processed and counted.
            </summary>
            <param name="message">E-mail message</param>
            <returns>true, if message is a recognized bounced e-mail, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.TryGetHeaderValue(System.String,MimeKit.HeaderList)">
            <summary>
            Attempts to find a known field in unknown header collection.
            </summary>
            <param name="headerField">Field code</param>
            <param name="headers">Header collection</param>
            <returns>Integer value from specified header or 0 if not found</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.TryParseField(System.Text.RegularExpressions.Regex,System.String,System.Int32@)">
            <summary>
            Attempts to find a known field using regex using try-parse pattern.
            </summary>
            <param name="regex">Regular expression used to look for the field</param>
            <param name="input">Input text</param>
            <param name="fieldID">Extracted ID from the field on success</param>
            <returns>true, if parsing was successful, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddBouncedEmail(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a bounce to all respective bounced email counters.
            </summary>
            <param name="issueId">Issue ID</param>
            <param name="subscriberId">Subscriber ID</param>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.RetrieveBouncedAddress(System.Int32,System.Int32)">
            <summary>
            Retrieves a bounced address of an intended recipient of the newsletter e-mail.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
            <param name="contactId">Contact ID</param>
            <returns>E-mail address where the newsletter could not be delivered</returns>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddEmailBounceGlobal(System.String)">
            <summary>
            Increments the number of bounces for every subscriber with a specified e-mail address across all sites.
            </summary>
            <param name="email">E-mail address to filter by</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddContactsBounces(System.String)">
            <summary>
            Adds bounce to all contacts with specified e-mail across all sites.
            </summary>
            <param name="email">E-mail of contacts to add bounce to</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddIssueBounce(System.Int32)">
            <summary>
            Increments number of bounces for the specified issue by one.
            </summary>
            <param name="issueId">Issue ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddSubscriberBounce(System.Int32)">
            <summary>
            Increments number of bounces for the specified subscriber by one.
            </summary>
            <param name="subscriberId">Subscriber ID</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddSubscriberBounce(CMS.Newsletters.SubscriberInfo)">
            <summary>
            Increments number of bounces for the specified subscriber by one.
            </summary>
            <param name="subscriber">Subscriber object</param>
        </member>
        <member name="M:CMS.Newsletters.BounceChecker.AddContactBounce(System.Int32)">
            <summary>
            Increments number of bounces by one for specified contact.
            </summary>
            <param name="contactId">Contact ID</param>
        </member>
        <member name="T:CMS.Newsletters.DynamicNewsletterSender">
            <summary>
            Class used by scheduler to execute the dynamic newsletter mailout.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.DynamicNewsletterSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Generates issue of dynamic newsletter, then generates emails of that issue into queue and send all emails in queue to subscribers.
            </summary>
            <param name="task">Task data</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterSender">
            <summary>
            Task for re-sending remaining newsletters in newsletter queue
            after main thread sender exit unexpectedly.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
             Sends all emails in newsletter queue.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="T:CMS.Newsletters.NewsletterTasksManager">
            <summary>
            Class for managing scheduled tasks that relate to newsletters (<see cref="T:CMS.Newsletters.QueueSender"/>).
            </summary>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.EnsureMailoutTask(CMS.Newsletters.IssueInfo,System.DateTime,System.Boolean)">
            <summary>
            Returns scheduled mail-out task for the given issue or creates new one.
            </summary>
            <param name="issue">Issue</param>
            <param name="when">Indicates when to run scheduled task</param>
            <param name="taskEnabled">Determines whether the newly created task will be enabled</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.CreateMailoutTask(CMS.Newsletters.IssueInfo,System.DateTime,System.Boolean)">
            <summary>
            Prepares scheduler TaskInfo object for an issue mail-out.
            </summary>
            <param name="issue">Issue</param>
            <param name="when">Date and time when the task should be executed</param>
            <param name="taskEnabled">Creates enabled/disabled task</param>
            <returns>A scheduler task that represents an issue mail-out</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.CreateOrUpdateDynamicNewsletterTask(CMS.Newsletters.NewsletterInfo,CMS.Scheduler.TaskInterval,CMS.Scheduler.TaskInfo)">
            <summary>
            Creates or updates scheduler TaskInfo object for the dynamic newsletter.
            If the <paramref name="taskToUpdate"/> is specified, task is updated according <paramref name="taskInterval"/> and <paramref name="newsletter"/>.
            Otherwise new <see cref="T:CMS.Scheduler.TaskInfo"/> is used.
            </summary>
            <param name="newsletter">Dynamic newsletter</param>
            <param name="taskInterval">Task interval object</param>
            <param name="taskToUpdate">Task to be updated according current <paramref name="taskInterval"/></param>
            <seealso cref="M:CMS.Scheduler.SchedulingHelper.EncodeInterval(CMS.Scheduler.TaskInterval)"/>
            <seealso cref="M:CMS.Scheduler.SchedulingHelper.DecodeInterval(System.String)"/>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.DeleteMailoutTask(System.Guid,System.Int32)">
            <summary>
            Removes scheduled mail-out task for specified issue.
            </summary>
            <param name="guid">Issue GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.DeleteWinnerSelectionTask(CMS.Newsletters.ABTestInfo)">
            <summary>
            Removes scheduled winner selection task.
            </summary>
            <param name="abTest">AB test object holding the winner selection scheduled task ID.</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.EnsureWinnerSelectionTask(CMS.Newsletters.ABTestInfo,CMS.Newsletters.IssueInfo,System.Boolean,System.DateTime)">
            <summary>
            Ensures that the winner selection task is created or updated (or deleted) according to A/B test info.
            Start time of winner selection task is calculated according to A/B test setting and highest mail-out time of the variant.
            </summary>
            <param name="abi">A/B test info</param>
            <param name="parentIssue">Parent issue (optional)</param>
            <param name="enableTask">Enable scheduled task</param>
            <param name="highestMailoutTime">Highest mail-out time (mail-out time of the last variant)</param>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.CreateWinnerSelectionTask(CMS.Newsletters.ABTestInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Creates a new task for selecting the winner.
            </summary>
            <param name="abi">AB test</param>
            <param name="parentIssue">Parent issue</param>
            <returns>A scheduler task that represents an winner selection</returns>
        </member>
        <member name="M:CMS.Newsletters.NewsletterTasksManager.EnableVariantScheduledTasks(CMS.Newsletters.IssueInfo)">
            <summary>
            Enables all scheduled tasks associated to all variants of parent issue.
            </summary>
            <param name="issue">Parent (original) issue</param>
        </member>
        <member name="T:CMS.Newsletters.QueueSender">
            <summary>
            Scheduled task for newsletter issue mailout.
            </summary>    
        </member>
        <member name="F:CMS.Newsletters.QueueSender.generateLock">
            <summary>
            Lock object for issue variant generation to newsletter queue
            </summary>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Generates e-mails of given issue (GUID or ID of an issue is specified in taskData property of task parameter) and send all emails in queue to subscribers.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.AllowGenerateQueue(System.Int32)">
            <summary>
            Returns if data can be generated into newsletter queue when a variant of A/B test is being sent.
            </summary>
            <param name="issueId">ID of parent issue</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.IsQueueGenerated(System.Int32)">
            <summary>
            Returns if data are prepared in newsletter queue when a variant of A/B test is being sent.
            </summary>
            <param name="issueId">ID of parent issue</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.CheckStatus(System.Int32,CMS.Newsletters.IssueStatusEnum)">
            <summary>
            Check if parent issue is in specified status.
            </summary>
            <param name="issueId">ID of parent issue</param>
            <param name="status">Status to be checked</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.PostponeScheduledTask(CMS.Newsletters.IssueInfo)">
            <summary>
            Postpones scheduled task for given <paramref name="issue"/> for a minute.
            </summary>
            <param name="issue">Issue to be sent</param>
        </member>
        <member name="M:CMS.Newsletters.QueueSender.FinishWinnerVariant(System.Int32)">
            <summary>
            Ensures that winner variant's status is 'Finished'.
            </summary>
            <param name="issueId">ID of main issue</param>
        </member>
        <member name="T:CMS.Newsletters.WinnerSelection">
            <summary>
            Scheduled task - selects the best issue variant and sends it to subscribers.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.WinnerSelection.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Selects the best issue variant and sends it to subscribers.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="T:CMS.Newsletters.ActivityTrackingHelper">
            <summary>
            Helper methods for logging activities for opened e-mails and link tracking.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ActivityTrackingHelper.RespondToPingResult(System.Int32)">
            <summary>
            Responds to ping request by sending <paramref name="ping"/> value to the client.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ActivityTrackingHelper.RespondToPingResultInternal(System.Int32)">
            <summary>
            Responds to ping request by sending <paramref name="ping"/> value to the client.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ClickedLinkInfo">
            <summary>
            ClickedLinkInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ClickedLinkInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.ClickedLinkInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ClickedLinkInfo.ClickedLinkID">
            <summary>
            Clicked link ID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ClickedLinkInfo.ClickedLinkGuid">
            <summary>
            Clicked link guid
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ClickedLinkInfo.ClickedLinkEmail">
            <summary>
            Clicked link email
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ClickedLinkInfo.ClickedLinkNewsletterLinkID">
            <summary>
            Clicked link newsletter link ID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.ClickedLinkInfo.ClickedLinkTime">
            <summary>
            Clicked link time
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfo.#ctor">
            <summary>
            Constructor - Creates an empty ClickedLinkInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ClickedLinkInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Newsletters.ClickedLinkInfoProvider">
            <summary>
            Class providing ClickedLinkInfo management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.GetClickedLinks">
            <summary>
            Returns a query for all the ClickedLinkInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.GetClickedLinkInfo(System.Int32)">
            <summary>
            Returns ClickedLinkInfo with specified ID.
            </summary>
            <param name="id">ClickedLinkInfo ID</param>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.GetClickedLinkInfo(System.Guid)">
            <summary>
            Returns ClickedLinkInfo with specified GUID.
            </summary>
            <param name="guid">ClickedLinkInfo GUID</param>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.SetClickedLinkInfo(CMS.Newsletters.ClickedLinkInfo)">
            <summary>
            Sets (updates or inserts) specified ClickedLinkInfo.
            </summary>
            <param name="infoObj">ClickedLinkInfo to be set</param>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.DeleteClickedLinkInfo(CMS.Newsletters.ClickedLinkInfo)">
            <summary>
            Deletes specified ClickedLinkInfo.
            </summary>
            <param name="infoObj">ClickedLinkInfo to be deleted</param>
        </member>
        <member name="M:CMS.Newsletters.ClickedLinkInfoProvider.DeleteClickedLinkInfo(System.Int32)">
            <summary>
            Deletes ClickedLinkInfo with specified ID.
            </summary>
            <param name="id">ClickedLinkInfo ID</param>
        </member>
        <member name="T:CMS.Newsletters.EmailTrackingLinkHelper">
            <summary>
            Provides links for email tracking.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTrackingLinkHelper.DEFAULT_OPENED_EMAIL_TRACKING_ROUTE_HANDLER_URL">
            <summary>
            Default route for tracking opened emails.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.EmailTrackingLinkHelper.DEFAULT_LINKS_TRACKING_ROUTE_HANDLER_URL">
            <summary>
            Default route to track clicked links in emails.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailTrackingLinkHelper.GetOpenedEmailTrackingPage(CMS.SiteProvider.SiteInfo)">
            <summary>
            Returns URL dedicated to track opened emails for given site.
            </summary>
            <param name="site">Site for which tracking page URL is returned</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTrackingLinkHelper.GetClickedLinkTrackingPageUrl(CMS.SiteProvider.SiteInfo)">
            <summary>
            Returns URL dedicated to track clicked links in emails for given site.
            </summary>
            <param name="site">Site for which clicked links in emails tracking page url is returned</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTrackingLinkHelper.CreateOpenedEmailTrackingLink(System.String,CMS.SiteProvider.SiteInfo)">
            <summary>
            Creates a tracking link used for open-email tracking.
            </summary>
            <param name="baseUrl">Base URL</param>
            <param name="site">Site to generate link for</param>
            <returns>Absolute URL to tracking page</returns>
        </member>
        <member name="M:CMS.Newsletters.EmailTrackingLinkHelper.GetOpenedEmailTrackingPageInternal(CMS.SiteProvider.SiteInfo)">
            <summary>
            Returns URL dedicated to track opened emails for given site.
            </summary>
            <param name="site">Site for which tracking page URL is returned</param>
        </member>
        <member name="M:CMS.Newsletters.EmailTrackingLinkHelper.GetClickedLinkTrackingPageUrlInternal(CMS.SiteProvider.SiteInfo)">
            <summary>
            Returns URL dedicated to track clicked links in emails for given site.
            </summary>
            <param name="site">Site for which clicked links in emails tracking page URL is returned</param>
        </member>
        <member name="T:CMS.Newsletters.IEmailHashGenerator">
            <summary>
            Provides method for generating hash from given email address.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailHashGenerator.GetEmailHash(System.String)">
            <summary>
            Gets hash for given <paramref name="emailAddress"/>.
            </summary>
            <param name="emailAddress">Email address tracked link is sent to</param>
            <returns>Hash obtained from given input parameters</returns>
        </member>
        <member name="T:CMS.Newsletters.IEmailHashValidator">
            <summary>
            Provides method for validating hash generated from given email address.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IEmailHashValidator.ValidateEmailHash(System.String,System.String)">
            <summary>
            Validates given <paramref name="hash"/> against <paramref name="emailAddress"/>.
            </summary>
            <param name="hash">Hash to be validated</param>
            <param name="emailAddress">Email address tracked link is sent to</param>
            <returns>True, if given <paramref name="hash"/> is valid; otherwise, false</returns>
        </member>
        <member name="T:CMS.Newsletters.IClickedLinkInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.ClickedLinkInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.ILinkInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.LinkInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IOpenedEmailInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.OpenedEmailInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.LinkConverter">
            <summary>
            Converts links in newsletter issue text.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkConverter.TRACKING_ATTRIBUTE">
            <summary>
            Name of the HTML anchor's attribute that determines whether tracking is enabled or not.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ReplaceLinkUrls(System.String,System.String,System.String)">
            <summary>
            Replaces <paramref name="oldValue"/> with <paramref name="newValue"/> in all link URLs in the <paramref name="input"/> string.
            </summary>
            <param name="input">Text containing links</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace all occurrences of oldValue</param>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ConvertToAbsolute(System.String,System.String)">
            <summary>
            Converts links from relative to absolute.
            </summary>
            <param name="input">Text containing links with relative URLs</param>
            <param name="baseUrl">Base URL to use when resolving links</param>
            <returns>Text with all links converted to absolute form</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ConvertUrlToAbsolute(System.String,System.String)">
            <summary>
            Creates an absolute URL for use in newsletter.
            </summary>
            <param name="url">URL</param>
            <param name="baseUrl">Base URL</param>
            <returns>Absolute URL</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ConvertToTracking(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.SiteProvider.SiteInfo,System.String)">
            <summary>
            Converts links to tracking links.
            </summary>
            <param name="input">Text containing links with relative URLs</param>
            <param name="issue">Newsletter issue that contains the text to resolve</param>
            <param name="newsletter">Newsletter</param>
            <param name="site">Site for which clicked links are tracked</param>
            <param name="emailAddress">Email address to be used for the links.</param>
            <returns>Text with all links converted to tracking links</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.FormatLink(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Creates a link from the regular expression match and link URL.
            </summary>
            <param name="match">Regex match result</param>
            <param name="url">Link after resolution</param>
            <returns>Full hyperlink with attributes, URL and text</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.CreateTrackingLink(System.Text.RegularExpressions.Match,CMS.Newsletters.IssueInfo,System.String,System.String,System.String[])">
            <summary>
            Creates a tracking hyperlink link from a given regex match.
            </summary>
            <param name="match">Regular expression matching result</param>
            <param name="issue">Newsletter issue</param>
            <param name="trackingLink">Tracking link without query parameters</param>
            <param name="emailAddress">Email address to be used for the links.</param>
            <param name="systemLinks">Set of system links which should not be tracked</param>
            <returns>A tracking hyperlink</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.IsTrackable(System.Text.RegularExpressions.Match,System.String,System.String)">
            <summary>
            Checks whether given URL can and should be tracked.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <param name="url">URL to check</param>
            <param name="trackingLink">Path the link will be transformed to after tracking (../Redirect.ashx by default)</param>
            <returns>true if specified URL can be tracked, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.IsSupportedUriScheme(System.String)">
            <summary>
            Determines whether the URI is of a supported scheme.
            </summary>
            <param name="url">The URL</param>
            <returns><c>true</c> if URI scheme is supported, otherwise, <c>false</c></returns>
            <remarks>Currently, only HTTP/HTTPS is supported because of the need to use redirects.</remarks>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.GetDescription(System.Text.RegularExpressions.Match)">
            <summary>
            Gets a description for tracked link either from title attribute or anchor's element text.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <returns>Link's description</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.FormatHyperlink(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Creates a tracking link from the regular expression match and link URL.
            </summary>
            <param name="match">Regex match result for a hyperlink</param>
            <param name="url">Link after resolution</param>
            <returns>Full tracking hyperlink with attributes, URL and text</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.RemoveTagAttribute(System.String,System.String)">
            <summary>
            Removes an attribute of a specified name inside an HTML element.
            </summary>
            <param name="input">Element's outer HTML</param>
            <param name="attributeName">Name of the attribute to replace</param>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.GetAttributeValue(System.String,System.String)">
            <summary>
            Gets the value of the HTML element's attribute.
            </summary>
            <param name="input">Element's outer HTML</param>
            <param name="attributeName">Name of the attribute</param>
            <returns>Value of the element's attribute</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkConverter.ContainsProtocol(System.String)">
            <summary>
            Checks if URL contains protocol, including pseudo-protocol.
            </summary>
            <param name="url">URL</param>
            <returns>true, if URL contains protocol, otherwise false</returns>
        </member>
        <member name="T:CMS.Newsletters.LinkFullNameWhereConditionBuilder">
            <summary>
            Builds where condition to get link based on its full name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkFullNameWhereConditionBuilder.#ctor(System.String)">
            <summary>
            Creates instance of <see cref="T:CMS.Newsletters.LinkFullNameWhereConditionBuilder"/> class.
            </summary>
            <param name="fullName">Full name to use for building the where condition.</param>
        </member>
        <member name="M:CMS.Newsletters.LinkFullNameWhereConditionBuilder.Build">
            <summary>
            Builds the full name where condition for the given full name of the link.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.LinkInfo">
            <summary>
            LinkInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.LinkInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkID">
            <summary>
            Gets or sets the ID of this LinkInfo object.
            </summary>
            <value>
            ID of this LinkInfo object or 0 if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkIssueID">
            <summary>
            Gets or sets ID of the newsletter's issue.
            </summary>
            <value>
            Newsletter issue's ID, or 0 if not found.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkGUID">
            <summary>
            Gets or sets the unique identifier of this link.
            </summary>
            <value>
            Link's unique identifier or empty unique identifier if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkTarget">
            <summary>
            Gets or sets the original link URL.
            </summary>
            <value>
            The original URL of the link, or empty string if not present.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.LinkDescription">
            <summary>
            Gets or sets the description of this link.
            </summary>
            <value>
            The description contains text from <em>title</em> parameter of the link.
            </value>
        </member>
        <member name="P:CMS.Newsletters.LinkInfo.ObjectFullName">
            <summary>
            Object full name if defined
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.#ctor">
            <summary>
            Creates a new LinkInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new LinkInfo object from the specified DataRow.
            </summary>
            <param name="linkInfoRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.DeleteObject">
            <summary>
            Deletes this LinkInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfo.SetObject">
            <summary>
            Updates this LinkInfo the object using appropriate provider.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.LinkInfoProvider">
            <summary>
            Class providing LinkInfoProvider management.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.#ctor">
            <summary>
            Creates a new instance of LinkInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfo(System.Int32)">
            <summary>
            Gets a LinkInfo object with specified ID.
            </summary>
            <param name="linkId">ID of the link</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfo(System.Guid)">
            <summary>
            Gets a LinkInfo object with specified GUID.
            </summary>
            <param name="linkGuid">GUID of the link</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinkInfo(System.String)">
            <summary>
            Gets a LinkInfo object with specified full name.
            </summary>
            <param name="linkFullName">Full name of the link</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetLinks">
            <summary>
            Gets an object query with all LinkInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.SetLinkInfo(CMS.Newsletters.LinkInfo)">
            <summary>
            Sets (updates or inserts) a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to set</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.DeleteLinkInfo(CMS.Newsletters.LinkInfo)">
            <summary>
            Deletes a specified LinkInfo object.
            </summary>
            <param name="linkObj">LinkInfo object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.DeleteLinkInfo(System.Int32)">
            <summary>
            Deletes a LinkInfo object specified by ID.
            </summary>
            <param name="linkId">ID of the LinkInfo object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.LogClick(System.Int32,System.String)">
            <summary>
            Logs that a link was clicked by visitor with specified email.
            </summary>
            <param name="linkId">ID of the link</param>
            <param name="email">Email of visitor that clicked the link.</param>        
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetFullNameDictionary">
            <summary>
            Creates a new dictionary for caching the transformations by the full name.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the transformation based on the given full name.
            </summary>
            <param name="fullName">Transformation full name</param>
        </member>
        <member name="M:CMS.Newsletters.LinkInfoProvider.LogClickInternal(System.Int32,System.String)">
            <summary>
            Logs that a link was clicked by visitor with specified email.
            </summary>
            <param name="linkId">ID of the link</param>        
            <param name="email">Email of visitor that clicked the link.</param>        
        </member>
        <member name="T:CMS.Newsletters.LinkTrackerService">
            <summary>
            Tracks subscribers who clicked on a link in a newsletter issue.
            </summary>
            <remarks>
            Handles all modified links that were converted to the tracking ones via <see cref="M:CMS.Newsletters.LinkConverter.ConvertToTracking(System.String,CMS.Newsletters.IssueInfo,CMS.Newsletters.NewsletterInfo,CMS.SiteProvider.SiteInfo,System.String)"/>.
            Besides guids related to the email, every link has subscriber's email and its salted hash, which is used to validate the link.
            Emails sent prior to version 9 won't be logging contact activities, nor set up Online marketing context.
            A redirect to the original URL is sent in the response.
            </remarks>
        </member>
        <member name="F:CMS.Newsletters.LinkTrackerService.lockObj">
            <summary>
            Object for locking.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkTrackerService.CMS#Base#Routing#IActionResultService#IsReusable">
            <summary>
            Gets whether this handler can be reused for other request; always returns true.
            </summary>
            <value>Always true</value>
        </member>
        <member name="P:CMS.Newsletters.LinkTrackerService.RequestStatusEnum">
            <summary>
            Gets current request URL rewriting status.
            </summary>
            <value>Always <see cref="F:CMS.Helpers.RequestStatusEnum.CustomHandler"/>.</value>
        </member>
        <member name="P:CMS.Newsletters.LinkTrackerService.Email">
            <summary>
            Gets email from query string parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkTrackerService.Hash">
            <summary>
             Gets hash from query string parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkTrackerService.LinkGuid">
            <summary>
            Gets link GUID from query string parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.LinkTrackerService.Ping">
            <summary>
            Gets ping from query string parameter.
            </summary>
            <remarks>
            The ping parameter serves for endpoint availability checking.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.LinkTrackerService.#ctor(CMS.Newsletters.IEmailHashValidator,CMS.Core.IEventLogService,CMS.Newsletters.IIssueInfoProvider,CMS.Newsletters.INewsletterInfoProvider,CMS.Newsletters.ILinkInfoProvider)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.LinkTrackerService"/>.
            </summary>
            <param name="emailHashValidator">The <see cref="T:CMS.Newsletters.IEmailHashValidator"/> implementation.</param>
            <param name="eventLogService">The <see cref="T:CMS.Core.IEventLogService"/> implementation.</param>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
            <param name="linkInfoProvider">Provider for <see cref="T:CMS.Newsletters.LinkInfo"/> management.</param>
        </member>
        <member name="M:CMS.Newsletters.LinkTrackerService.GetActionResultInternal">
            <summary>
            Processes the tracking data and redirects request to original URL.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.LinkTrackerService.GetLinkUrl">
            <summary>
            Retrieves the original URL given the arguments and logs the request.
            </summary>
            <returns>Original URL or null if not found</returns>
        </member>
        <member name="M:CMS.Newsletters.LinkTrackerService.ResolveUrl(System.String,System.String,CMS.Newsletters.NewsletterInfo,CMS.Newsletters.IssueInfo)">
            <summary>
            Resolves subscriber macros in the specified URL.
            </summary>
            <param name="url">URL containing subscriber macros</param>
            <param name="email">Subscriber's email</param>
            <param name="newsletter">Text which is being resolved belongs to the issue in this newsletter</param>
            <param name="issue">Text which is being resolved belongs to this issue</param>
            <returns>Resolved URL</returns>
        </member>
        <member name="T:CMS.Newsletters.OpenedEmailInfo">
            <summary>
            OpenedEmail data container class.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.OpenedEmailInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.OpenedEmailInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedEmailID">
            <summary>
            OpenedEmail ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedEmailEmail">
            <summary>
            OpenedEmail Email.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedEmailGuid">
            <summary>
            OpenedEmail GUID
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedEmailTime">
            <summary>
            Gets or sets the timestamp when the issue of the newsletter was opened by subscriber.
            </summary>
            <value>
            Timestamp or CMS.Helpers.DateTimeHelper.ZERO_TIME if the issue was not read by the specified subscriber yet.
            </value>
        </member>
        <member name="P:CMS.Newsletters.OpenedEmailInfo.OpenedEmailIssueID">
            <summary>
            Gets or sets ID of the newsletter's issue.
            </summary>
            <value>
            Newsletter issue's ID, or 0 if not found.
            </value>        
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.#ctor">
            <summary>
            Creates a new OpenedEmailInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.#ctor(System.Data.DataRow)">
            <summary>
            Creates a new OpenedEmailInfo object from the specified DataRow.
            </summary>
            <param name="openedEmailRow">Raw values from DB table that represent this object</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.DeleteObject">
            <summary>
            Deletes this OpenedEmailInfo object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfo.SetObject">
            <summary>
            Updates this OpenedEmailInfo object using appropriate provider.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.OpenedEmailInfoProvider">
            <summary>
            Class providing OpenedEmailInfoProvider management.
            </summary>
            <remarks>
            Handles basic CRUD functionality over OpenedEmailInfo objects.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.#ctor">
            <summary>
            Creates a new instance of OpenedEmailInfoProvider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmails">
            <summary>
            Returns a query for all the OpenedEmailInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmails(System.Int32,System.String)">
            <summary>
            Retrieves the OpenedEmailInfo object for newsletter issue and subscriber identified by email.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberEmail">Email of the subscriber</param>
            <returns><see cref="T:CMS.Newsletters.OpenedEmailInfo" /> object</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetSubscribersOpenedEmails(System.String)">
            <summary>
            Gets a dataset with OpenedEmailInfo records of a specified subscriber.
            </summary>
            <param name="subscriberEmail">Subscriber's email</param>        
            <returns>A DataSet containing the OpenedEmailInfo records</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetIssueOpeners(System.Int32)">
            <summary>
            Gets a dataset with OpenedEmailInfo records of a specified issue.
            </summary>
            <param name="issueId">Id of the issue</param>
            <returns>A DataSet containing the OpenedEmailInfo records</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.SetOpenedEmailInfo(CMS.Newsletters.OpenedEmailInfo)">
            <summary>
            Saves the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to save</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.DeleteOpenedEmailInfo(CMS.Newsletters.OpenedEmailInfo)">
            <summary>
            Deletes the OpenedEmailInfo object.
            </summary>
            <param name="infoObj">An object to delete</param>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.LogOpenedEmail(System.String,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="email">Subscriber's email</param>
            <param name="issueId">Newsletter issue ID</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.LogOpenedEmail(System.Guid,System.Guid,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberGuid">Subscriber's GUID</param>
            <param name="issueGuid">GUID of the newsletter issue</param>
            <param name="siteId">ID of the site that owns the newsletter</param>
            <returns>ID of the opened newsletter issue, 0 if not affected</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.GetOpenedEmailsInternal(System.Int32,System.String)">
            <summary>
            Retrieves the OpenedEmailInfo object for newsletter issue and subscriber identified by email.
            </summary>
            <param name="issueId">ID of the newsletter issue</param>
            <param name="subscriberEmail">Email of the subscriber</param>
            <returns>OpenedEmailInfo object</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenedEmailInfoProvider.LogOpenedEmailInternal(System.String,System.Int32)">
            <summary>
            Logs e-mail with newsletter issue as opened by specified subscriber.
            </summary>
            <param name="subscriberEmail">Subscriber's email</param>
            <param name="issueId">Newsletter issue ID</param>
            <returns>ID of the opened newsletter issue if it is a unique open, 0 if it is not a unique open.</returns>
        </member>
        <member name="T:CMS.Newsletters.OpenEmailTrackerService">
            <summary>
            Tracks subscribers who opened a newsletter issues sent by e-mail.
            </summary>
            <remarks>
            An e-mail containing a newsletter issue contains a link to image.
            This link contains a subscriber's guid and the guid of the newsletter issue.
            The image is sent in response and the request is logged.
            </remarks>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.CMS#Base#Routing#IActionResultService#IsReusable">
            <summary>
            Gets whether this handler can be reused for other request; always returns true.
            </summary>
            <value>Always true</value>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.RequestStatusEnum">
            <summary>
            Gets current request URL rewriting status.
            </summary>
            <value>Always <see cref="F:CMS.Helpers.RequestStatusEnum.CustomHandler"/>.</value>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.Image">
            <summary>
            The tracking image that is sent in response.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.Email">
            <summary>
            Gets email from query string parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.Hash">
            <summary>
             Gets hash from query string parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.IssueGuid">
            <summary>
            Gets issue GUID from query string parameter.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.OpenEmailTrackerService.Ping">
            <summary>
            Gets ping from query string parameter.
            </summary>
            <remarks>
            The ping parameter serves for endpoint availability checking.
            </remarks>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTrackerService.#ctor(CMS.Newsletters.IEmailHashValidator,CMS.Newsletters.IIssueInfoProvider,CMS.Newsletters.INewsletterInfoProvider)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Newsletters.OpenEmailTrackerService"/>.
            </summary>
            <param name="emailHashValidator">The <see cref="T:CMS.Newsletters.IEmailHashValidator"/> implementation.</param>
            <param name="issueInfoProvider">Provider for <see cref="T:CMS.Newsletters.IssueInfo"/> management.</param>
            <param name="newsletterInfoProvider">Provider for <see cref="T:CMS.Newsletters.NewsletterInfo"/> management.</param>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTrackerService.GetActionResultInternal">
            <summary>
            Processes the tracking data and serves a dummy image in response.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTrackerService.UseCached">
            <summary>
            Checks if the same request for this image hasn't arrived in last 24 hours.
            </summary>
            <returns>true if the same request was already received in last 24 hours, otherwise false</returns>
        </member>
        <member name="M:CMS.Newsletters.OpenEmailTrackerService.Log">
            <summary>
            Logs a request - extracts the subscriber and issue and counts the e-mail as opened.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IUnsubscriptionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Newsletters.UnsubscriptionInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.IUnsubscriptionProvider">
            <summary>
            Handles unsubscriptions.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.GetUnsubscriptionsFromSingleNewsletter(System.Int32)">
            <summary>
            Returns query of all unsubscribed email addresses that won't receive given newsletter.
            </summary>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.GetUnsubscriptionsFromAllNewsletters">
            <summary>
            Returns query of all unsubscribed email addresses that won't receive any newsletter.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.IsUnsubscribedFromSingleNewsletter(System.String,System.Int32)">
            <summary>
            Returns true if specified email address won't receive given newsletter. 
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.IsUnsubscribedFromAllNewsletters(System.String)">
            <summary>
            Returns true if specified email address is unsubscribed from the all newsletter.
            </summary>
            <param name="email">Email address</param>
            <exception cref="T:System.ArgumentException"><paramref name="email"/> is not specified</exception>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.UnsubscribeFromSingleNewsletter(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes email address from given newsletter. Does nothing if specified email is already unsubscribed.
            </summary>
            <param name="email">Email to unsubscribe</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.UnsubscribeFromAllNewsletters(System.String,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes email address from all newsletters. Does nothing if specified email is already unsubscribed.
            </summary>
            <param name="email">Email to unsubscribe</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.RemoveUnsubscriptionFromSingleNewsletter(System.String,System.Int32)">
            <summary>
            Deletes all unsubscription records that blocks email from getting issues sent from given newsletter.
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.IUnsubscriptionProvider.RemoveUnsubscriptionsFromAllNewsletters(System.String)">
            <summary>
            Deletes all "unsubscription from all" records for the given <paramref name="email"/>.
            </summary>
            <param name="email">Email address</param>
            <exception cref="T:System.ArgumentException"><paramref name="email"/> has to be specified</exception>
        </member>
        <member name="T:CMS.Newsletters.UnsubscriptionInfo">
            <summary>
            Container for unsubscription data.
            Contains email unsubscribed from newsletter.
            If false, having null in the newsletter ID column means unsubscribed from all newsletters.
            </summary>
        </member>
        <member name="F:CMS.Newsletters.UnsubscriptionInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Newsletters.UnsubscriptionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionInfo.UnsubscriptionID">
            <summary>
            Unsubscription ID.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionInfo.UnsubscriptionEmail">
            <summary>
            Unsubscribed email address. Must be lowercase.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionInfo.UnsubscriptionCreated">
            <summary>
            Time when unsubscription was created.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionInfo.UnsubscriptionNewsletterID">
            <summary>
            Unsubscribed from specific newsletter.
            If null, unsubscribed from all newsletters.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionInfo.UnsubscriptionFromIssueID">
            <summary>
            Issue id from where was unsubscription created.
            If null, unsubscriptions were not made from the issue.
            </summary>
        </member>
        <member name="P:CMS.Newsletters.UnsubscriptionInfo.UnsubscriptionGUID">
            <summary>
            Unsubscription GUID.
            For unique identification.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfo.#ctor">
            <summary>
            Constructor - Creates an empty UnsubscriptionInfo object.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UnsubscriptionInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Newsletters.UnsubscriptionInfoProvider">
            <summary>
            Class providing access to unsubscriptions.
            If false, having null in the newsletter ID column means unsubscribed from all newsletters.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.GetUnsubscriptions">
            <summary>
            Returns a query for all the UnsubscriptionInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.GetUnsubscriptionInfo(System.Int32)">
            <summary>
            Returns UnsubscriptionInfo with specified ID.
            </summary>
            <param name="id">UnsubscriptionInfo ID</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.GetUnsubscriptionInfo(System.Guid)">
            <summary>
            Returns UnsubscriptionInfo with specified GUID.
            </summary>
            <param name="guid">UnsubscriptionInfo GUID</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.SetUnsubscriptionInfo(CMS.Newsletters.UnsubscriptionInfo)">
            <summary>
            Sets (updates or inserts) specified UnsubscriptionInfo.
            </summary>
            <param name="infoObj">UnsubscriptionInfo to be set</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.DeleteUnsubscriptionInfo(CMS.Newsletters.UnsubscriptionInfo)">
            <summary>
            Deletes specified UnsubscriptionInfo.
            </summary>
            <param name="infoObj">UnsubscriptionInfo to be deleted</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.DeleteUnsubscriptionInfo(System.Int32)">
            <summary>
            Deletes UnsubscriptionInfo with specified ID.
            </summary>
            <param name="id">UnsubscriptionInfo ID</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionInfoProvider.SetInfo(CMS.Newsletters.UnsubscriptionInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="T:CMS.Newsletters.UnsubscriptionProvider">
            <summary>
            Class that handles unsubscriptions.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.#ctor(CMS.Newsletters.IUnsubscriptionInfoProvider)">
            <summary>
            Initializes a new instance of the <paramref name="unsubscriptionInfoProvider"/> class.
            </summary>
            <param name="unsubscriptionInfoProvider">Provider for <see cref="T:CMS.Newsletters.UnsubscriptionInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="unsubscriptionInfoProvider"/> is null.</exception>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.GetUnsubscriptionsFromSingleNewsletter(System.Int32)">
            <summary>
            Returns query of all unsubscribed email addresses that won't receive given newsletter.
            </summary>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.GetUnsubscriptionsFromAllNewsletters">
            <summary>
            Returns query of all unsubscribed email addresses that won't receive any newsletter.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.IsUnsubscribedFromSingleNewsletter(System.String,System.Int32)">
            <summary>
            Returns <c>true</c> if specified email address won't receive given newsletter. 
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.IsUnsubscribedFromAllNewsletters(System.String)">
            <summary>
            Returns <c>true</c> if specified email address is unsubscribed from the all newsletters.
            </summary>
            <param name="email">Email address</param>
            <exception cref="T:System.ArgumentException"><paramref name="email"/> is not specified</exception>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.UnsubscribeFromSingleNewsletter(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes email address from given newsletter. Does nothing if specified email is already unsubscribed.
            </summary>
            <param name="email">Email to unsubscribe</param>
            <param name="newsletterID">Newsletter ID</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.UnsubscribeFromAllNewsletters(System.String,System.Nullable{System.Int32})">
            <summary>
            Unsubscribes email address from all newsletters. Does nothing if specified email is already unsubscribed.
            </summary>
            <param name="email">Email to unsubscribe</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.RemoveUnsubscriptionFromSingleNewsletter(System.String,System.Int32)">
            <summary>
            Deletes all unsubscription records that blocks email from getting issues sent from given newsletter.
            </summary>
            <param name="email">Email address</param>
            <param name="newsletterID">Newsletter ID</param>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.RemoveUnsubscriptionsFromAllNewsletters(System.String)">
            <summary>
            Deletes all "unsubscription from all" records for the given <paramref name="email"/>.
            </summary>
            <param name="email">Email address</param>
            <exception cref="T:System.ArgumentException"><paramref name="email"/> has to be specified</exception>
        </member>
        <member name="M:CMS.Newsletters.UnsubscriptionProvider.Unsubscribe(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Unsubscribes email address from given newsletter. Does nothing if specified email is already unsubscribed.
            When newsletter is not specified, contact is unsubscribed from all newsletters.
            </summary>
            <param name="email">Email to unsubscribe</param>
            <param name="newsletterID">Specifies newsletter that email is unsubscribed from. Null means that contact is unsubscribed from all newsletters.</param>
            <param name="issueID">ID of issue that visitor used for unsubscription. Use only when issue ID is known.</param>
        </member>
        <member name="T:CMS.Newsletters.ClearLicenseLimitationCacheWebFarmTask">
            <summary>
            Web farm task used to clear newsletter license limitation tables.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.Newsletters.ClearLicenseLimitationCacheWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.Newsletters.INewsletterLicenseCheckerService.ClearLicNewsletter(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.Newsletters.EmailsEnabledSettingChangedWebFarmTask">
            <summary>
            Web farm task used to notify that one of the settings affecting whether email sending is allowed has changed.
            </summary>
        </member>
        <member name="M:CMS.Newsletters.EmailsEnabledSettingChangedWebFarmTask.ExecuteTask">
            <summary>
            Notifies that one of the settings affecting whether email sending is allowed has changed.
            </summary>
        </member>
    </members>
</doc>
