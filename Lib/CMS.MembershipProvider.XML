<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.MembershipProvider</name>
    </assembly>
    <members>
        <member name="T:CMS.MembershipProvider.CMSADMembershipProvider">
            <summary>
            Active directory membership provider.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the membership provider.
            </summary>
            <param name="name">Provider name</param>
            <param name="config">Configuration</param>
        </member>
        <member name="T:CMS.MembershipProvider.CMSADRoleProvider">
            <summary>
            Active directory role provider.
            </summary>
        </member>
        <member name="F:CMS.MembershipProvider.CMSADRoleProvider.DOMAIN_SAM_FORMAT">
            <summary>
            Role name format Domain - SAM
            </summary>
        </member>
        <member name="F:CMS.MembershipProvider.CMSADRoleProvider.SAM_FORMAT">
            <summary>
            Role name format SAM
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSADRoleProvider.AttributeMapUsername">
            <summary>
            Attribute to map username.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSADRoleProvider.ApplicationName">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSADRoleProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSADRoleProvider.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSADRoleProvider.RoleImportFormat">
            <summary>
            Format of imported roles. This applies for both display name and code name.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSADRoleProvider.RoleNameImporter">
            <summary>
            Import user Ad role according to CMSRoleImportFormat.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">Name</param>
            <param name="config">Configuration</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Returns true if the user is in specific role.
            </summary>
            <param name="username">User name</param>
            <param name="roleName">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Get roles for specified user
            </summary>
            <param name="username">User name</param>
            <returns>Roles for specified user</returns>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.GetRolesForUserInDefaultFormat(System.String)">
            <summary>
            Gets the roles for specified user.
            </summary>
            <param name="username">User name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.GetRolesForUserInDomainSamFormat(System.String)">
            <summary>
            Get roles for specified user in NetbiosDomainName\SamAccountName format.
            </summary>
            <param name="username">User name</param>
            <returns>Roles for specified user</returns>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.GetRolesForUserInSamFormat(System.String)">
            <summary>
            Get roles for specified user in SamAccountName format.
            </summary>
            <param name="username">User name</param>
            <returns>Roles for specified user</returns>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds user to role.
            </summary>
            <param name="usernames">User names</param>
            <param name="roleNames">Role names</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.CreateRole(System.String)">
            <summary>
            Creates role.
            </summary>
            <param name="roleName">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleName">Role name</param>
            <param name="throwOnPopulatedRole">Throw exception on role which is populated</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Find all user in specified role.
            </summary>
            <param name="roleName">Role name</param>
            <param name="usernameToMatch">User name to match</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.GetAllRoles">
            <summary>
            Returns all roles.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Returns all user in specified role.
            </summary>
            <param name="roleName">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes user from role.
            </summary>
            <param name="usernames">User name</param>
            <param name="roleNames">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.RoleExists(System.String)">
            <summary>
            Determines whether specified role exists.
            </summary>
            <param name="roleName">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSADRoleProvider.ThrowNotSupported(System.String)">
            <summary>
            Throws not supported exception.
            </summary>
            <param name="method">Method name</param>
        </member>
        <member name="T:CMS.MembershipProvider.CMSMembershipHelper">
            <summary>
            Membership helper.
            </summary>
            <exclude />
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipHelper.ADDefaultMapUserNameInternal">
            <summary>
            Returns the field name used for user name mapping.
            </summary>
            <remarks>
            If not set the "sAMAccountName" is used.
            </remarks>
        </member>
        <member name="T:CMS.MembershipProvider.CMSMembershipProvider">
            <summary>
            Class providing membership management.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.ApplicationName">
            <summary>
            Applicaton name.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.EnablePasswordReset">
            <summary>
            Enable password reset.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.EnablePasswordRetrieval">
            <summary>
            Enable password retrieval.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Maximum invalid password attempts.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Minimum required nonalphanumeric characters.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.MinRequiredPasswordLength">
            <summary>
            Minimum required password length.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.PasswordAttemptWindow">
            <summary>
            Password attempt window.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.PasswordFormat">
            <summary>
            Password format.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Password strength regular expression.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Required question and aswer.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipProvider.RequiresUniqueEmail">
            <summary>
            Requires unique email.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes Password of user specified by username.
            </summary>
            <param name="username">User name</param>
            <param name="oldPassword">Old password</param>
            <param name="newPassword">New password</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            As password questions and answers are not implemented in UserInfo, this metod returns true.
            </summary>
            <param name="username">Not used</param>
            <param name="password">Not used</param>
            <param name="newPasswordQuestion">Not used</param>
            <param name="newPasswordAnswer">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Creates new user.
            </summary>
            <param name="username">User name</param>
            <param name="password">Password</param>
            <param name="email">E-mail</param>
            <param name="passwordQuestion">Not used</param>
            <param name="passwordAnswer">Not used</param>
            <param name="isApproved">'isApproved' parameter is considered as 'Enabled' property in UserInfo;</param>
            <param name="providerUserKey">Not used</param>
            <param name="status">If UserInfoProvider's SetUserInfo method throws exception then status is set to 'ProviderError', else it is set to 'Success'</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Deletes user specified by username.
            </summary>
            <param name="username">User name</param>
            <param name="deleteAllRelatedData">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">User e-mail</param>
            <param name="pageIndex">Not used</param>
            <param name="pageSize">Not used</param>
            <param name="totalRecords">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">User name</param>
            <param name="pageIndex">Not used</param>
            <param name="pageSize">Not used</param>
            <param name="totalRecords">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of all the users in DB.
            </summary>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="totalRecords">Total number of users</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Returns number of online users. Monitor online users feature must be enabled.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Gets password of user specified by username.
            </summary>
            <param name="username">User name</param>
            <param name="answer">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Returns MembershipUser object containing data of user specified by providerUserKey.
            </summary>
            <param name="providerUserKey">User key</param>
            <param name="userIsOnline">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Returns MembershipUser object containing data of user specified by his name.
            </summary>
            <param name="username">User name</param>
            <param name="userIsOnline">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetUser(CMS.Membership.UserInfo)">
            <summary>
            Returns MembershipUser object containing data of user specified by his name.
            </summary>
            <param name="ui">User info</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets user name of user with given email.
            </summary>
            <param name="email">User e-mail</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Sets password of user specified by user name to empty string.
            </summary>
            <param name="username">User name</param>
            <param name="answer">Not used</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.UnlockUser(System.String)">
            <summary>
            Sets 'Enabled' property of user specified by user name to 'True'.
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates data of specified user.
            </summary>
            <param name="user">User to update</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.MFValidatePasscode(System.String,System.String)">
            <summary>
            Validates entered passcode for user. Partial validation is checked.
            This method should be used when validating passcode in multi-step scenario.
            </summary>
            <param name="username">User name.</param>
            <param name="passcode">Passcode.</param>
            <returns>True if passcode is valid. False otherwise.</returns>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.MFValidatePasscode(CMS.Membership.UserInfo,System.String,System.Boolean)">
            <summary>
            Validates entered passcode for user. Checks passcode only.
            </summary>
            <param name="user">User.</param>
            <param name="passcode">Passcode.</param>
            <param name="finalize">Finalization of authentication process will NOT be performed if set to false.</param>
            <returns>True if passcode is valid. False otherwise.</returns>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.MFValidateCredentials(System.String,System.String)">
            <summary>
            Checks if user can be authenticated.
            </summary>
            <param name="username">User name.</param>
            <param name="password">Password.</param>
            <returns>True if user can be authenticated. False otherwise.</returns>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Checks whether given password matches the password of user specified by username.
            </summary>
            <param name="username">User name</param>
            <param name="password">Password</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="strName">Name used to refer to the provider</param>
            <param name="config">Ignored</param>
        </member>
        <member name="T:CMS.MembershipProvider.CMSMembershipUser">
            <summary>
            User membership.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.UserInfoMembership">
            <summary>
            User info.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.UserName">
            <summary>
            User name (reflects the UserName field).
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.Email">
            <summary>
            Email (reflects the Email field).
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.IsApproved">
            <summary>
            Is approved (reflects the Enabled field).
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.CreationDate">
            <summary>
            Creation date (reflects the UserCreated field).
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.IsLockedOut">
            <summary>
            Is locked out (reflects the UserEnabled and UserAccountLockReason fields).
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSMembershipUser.LastActivityDate">
            <summary>
            Last activity date (reflects the LastLogon field).
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSMembershipUser.#ctor(CMS.Membership.UserInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="userInfoObj">UserInfo object</param>
        </member>
        <member name="T:CMS.MembershipProvider.CMSRoleProvider">
            <summary>
            Class providing role management.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSRoleProvider.ApplicationName">
            <summary>
            Application name.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSRoleProvider.Description">
            <summary>
            Description.
            </summary>
        </member>
        <member name="P:CMS.MembershipProvider.CMSRoleProvider.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initialization.
            </summary>
            <param name="name">Name</param>
            <param name="config">Config</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds user to role.
            </summary>
            <param name="usernames">User names</param>
            <param name="roleNames">Role names</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.CreateRole(System.String)">
            <summary>
            Creates current site role.
            </summary>
            <param name="roleName">Role name to create</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleName">Role name</param>
            <param name="throwOnPopulatedRole">Throw exception on role which is populated</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Find all user in specified role.
            </summary>
            <param name="roleName">Role name</param>
            <param name="usernameToMatch">User name to match</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.GetAllRoles">
            <summary>
            Returns all roles.
            </summary>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Returns CMS roles, or Windows roles for specified user.
            </summary>
            <remarks>If user doesn't exists in the CMS, returns Windows roles.</remarks>
            <param name="username">User name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Returns all user in specified role.
            </summary>
            <param name="roleName">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Returns true if the user is a member of the role in context of the current site.
            </summary>
            <remarks>The check also accounts for membership roles and global roles.</remarks>
            <param name="username">User name</param>
            <param name="roleName">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes user from role.
            </summary>
            <param name="usernames">User name</param>
            <param name="roleNames">Role name</param>
        </member>
        <member name="M:CMS.MembershipProvider.CMSRoleProvider.RoleExists(System.String)">
            <summary>
            Determines whether specified role exists.
            </summary>
            <param name="roleName">Role name</param>
        </member>
    </members>
</doc>
