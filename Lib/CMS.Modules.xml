<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Modules</name>
    </assembly>
    <members>
        <member name="T:CMS.ModuleLicenses.IModuleLicenseKeyInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ModuleLicenses.ModuleLicenseKeyInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ModuleLicenses.ModuleLicenseKeyInfo">
            <summary>
            ModuleLicenseKeyInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.ModuleLicenses.ModuleLicenseKeyInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ModuleLicenses.ModuleLicenseKeyInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicenseKeyInfo.ModuleLicenseKeyID">
            <summary>
            Module license key ID
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicenseKeyInfo.ModuleLicenseKeyGuid">
            <summary>
            Module license key guid
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicenseKeyInfo.ModuleLicenseKeyLastModified">
            <summary>
            Module license key last modified
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicenseKeyInfo.ModuleLicenseKeyLicense">
            <summary>
            Module license key data
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicenseKeyInfo.ModuleLicenseKeyResourceID">
            <summary>
            Module license key resource ID
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfo.#ctor">
            <summary>
            Constructor - Creates an empty ModuleLicenseKeyInfo object.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ModuleLicenseKeyInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider">
            <summary>
            Class providing ModuleLicenseKeyInfo management.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.GetModuleLicenseKeys">
            <summary>
            Returns a query for all the ModuleLicenseKeyInfo objects.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.GetModuleLicenseKeyInfo(System.Int32)">
            <summary>
            Returns ModuleLicenseKeyInfo with specified ID.
            </summary>
            <param name="id">ModuleLicenseKeyInfo ID</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.GetModuleLicenseKeyInfo(System.Guid)">
            <summary>
            Returns ModuleLicenseKeyInfo with specified GUID.
            </summary>
            <param name="guid">ModuleLicenseKeyInfo GUID</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.GetResourceModuleLicenseKeyInfos(System.Int32)">
            <summary>
            Returns a query for all module license keys of ModuleLicenseKeyInfo objects of given resource.
            </summary>
            <param name="resourceId">ID of a resource</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.SetModuleLicenseKeyInfo(CMS.ModuleLicenses.ModuleLicenseKeyInfo)">
            <summary>
            Sets (updates or inserts) specified ModuleLicenseKeyInfo.
            </summary>
            <param name="infoObj">ModuleLicenseKeyInfo to be set</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.DeleteModuleLicenseKeyInfo(CMS.ModuleLicenses.ModuleLicenseKeyInfo)">
            <summary>
            Deletes specified ModuleLicenseKeyInfo.
            </summary>
            <param name="infoObj">ModuleLicenseKeyInfo to be deleted</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.DeleteModuleLicenseKeyInfo(System.Int32)">
            <summary>
            Deletes ModuleLicenseKeyInfo with specified ID.
            </summary>
            <param name="id">ModuleLicenseKeyInfo ID</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.Clear(System.Boolean)">
            <summary>
            Clears hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.SetInfo(CMS.ModuleLicenses.ModuleLicenseKeyInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.DeleteInfo(CMS.ModuleLicenses.ModuleLicenseKeyInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicenseKeyInfoProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clears the object's hashtables and special cache for module licenses.
            </summary>
            <param name="logTasks">whether to log webfarm tasks</param>
        </member>
        <member name="T:CMS.ModuleLicenses.ModuleLicensesHelper">
            <summary>
            Helper class providing API for managing module licenses.
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicensesHelper.LicensesDataCache">
            <summary>
            Cache for valid module licenses data.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesHelper.GenerateKeyPair(System.String@,System.String@)">
            <summary>
            Creates new private and public key pair for generating and validating module licenses. Created keys are encoded to Base64.
            </summary>
            <param name="privateKey">Created private key for generating module licenses</param>
            <param name="publicKey">Created public key for verifying module licenses</param>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesHelper.CreateModuleLicense(System.String,System.String)">
            <summary>
            Creates a module license containing given module license data and signature based on given private key.
            </summary>
            <param name="licenseData">Data to be stored in module license</param>
            <param name="privateKey">Private key, generated by <see cref="M:CMS.ModuleLicenses.ModuleLicensesHelper.GenerateKeyPair(System.String@,System.String@)"/> used for signing module license data</param>
            <returns>Module license containing given module license data and signature</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="licenseData"/> or <paramref name="privateKey"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="privateKey"/> has invalid format of private key encoded in Base64</exception>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesHelper.GetValidModuleLicenses(System.String,System.String)">
            <summary>
            Returns collection of valid module license data for given module.
            </summary>
            <param name="moduleName">Code name of module which licenses to get</param>
            <param name="publicKey">Public key, generated by <see cref="M:CMS.ModuleLicenses.ModuleLicensesHelper.GenerateKeyPair(System.String@,System.String@)"/> for validating licenses of given module</param>
            <returns>Collection of valid module license data for given module</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="moduleName"/> or <paramref name="publicKey"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="moduleName"/>is not valid name of existing module or <paramref name="publicKey"/> has invalid format of public key encoded in Base64</exception>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesHelper.IsModuleLicenseValid(System.String,System.String,System.String)">
            <summary>
            Validates module license data and it's signature with given public key.
            </summary>
            <param name="licenseData">License data to validate</param>
            <param name="signature">License signature to validate</param>
            <param name="publicKey">Public key, generated by <see cref="M:CMS.ModuleLicenses.ModuleLicensesHelper.GenerateKeyPair(System.String@,System.String@)"/> for validation</param>
            <returns>True whether license data and signature is valid, otherwise false</returns>
            <exception cref="T:System.ArgumentException"><paramref name="publicKey"/> has invalid format of public key encoded in Base64</exception>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesHelper.ParseModuleLicense(System.String,System.String@,System.String@)">
            <summary>
            Parse given module license to license data and it's signature.
            </summary>
            <param name="license">Module license to parse</param>
            <param name="licenseData">Parsed data of module license</param>
            <param name="signature">Parsed signature of module license</param>
            <returns>True whether module license has been parsed successfully, otherwise false</returns>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesHelper.ClearCache">
            <summary>
            Clears cache for storing valid module license data.
            </summary>
        </member>
        <member name="T:CMS.ModuleLicenses.ModuleLicensesUsageDataSource">
            <summary>
            Data source for providing statistical information about Module licenses.
            </summary>
        </member>
        <member name="P:CMS.ModuleLicenses.ModuleLicensesUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.ModuleLicenses.ModuleLicensesUsageDataSource.GetData">
            <summary>
            Returns data collection with count of licensed modules and count of all module license keys of all modules.
            </summary>
            <returns>Collected data</returns>
        </member>
        <member name="T:CMS.Modules.IResourceInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.ResourceInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Modules.IResourceSiteInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.ResourceSiteInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Modules.IResourceSiteInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding structure.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.ResourceSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IResourceSiteInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding structure.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.ResourceSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IResourceSiteInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Modules.IResourceSiteInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="T:CMS.Modules.ResourceInfo">
            <summary>
            Resource info data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceID">
            <summary>
            Gets or sets the resource ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.PermissionNames">
            <summary>
            List of permission names for current module
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceDisplayName">
            <summary>
            Gets or sets the resource display name.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceName">
            <summary>
            Gets or sets the resource name.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceDescription">
            <summary>
            Gets or sets the resource description. Required if you want to create an installation package.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceHasFiles">
            <summary>
            Gets or sets a value indicating whether this module has associated files or assemblies.
            </summary>
            <remarks>
            Modules with associated files or assemblies are considered available only when these files are present.
            Associated files and files are detected by convention. The application checks whether there is a {ResourceName} subfolder in the CMSModules folder or there is a registered module entry with the same name.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ShowInDevelopment">
            <summary>
            Gets or sets the value saying if the resource is shown in Development.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceUrl">
            <summary>
            Gets or sets the resource url.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceGUID">
            <summary>
            Resource GUID.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceVersion">
            <summary>
            Version of the module for the purpose of installation package creation. Required if you want to create an installation package.
            Valid module version is in a format like "1.2.3".
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceAuthor">
            <summary>
            Author or comma-separated list of authors of the module for the purpose of installation package creation. Required if you want to create an installation package.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceInstallationState">
            <summary>
            State of the module. Applies to installed modules only.
            </summary>
            <seealso cref="T:CMS.Modules.ModuleInstallationState"/>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceInstalledVersion">
            <summary>
            Currently installed version of the module. Applies to installed modules only.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.ResourceIsInDevelopment">
            <summary>
            Indicates if resource is in development. Custom system module is always considered as developed and cannot be set to false
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceInfo.IsEditable">
            <summary>
            Indicates if resource is editable (resource is in development or development mode is enabled).
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfo.#ctor">
            <summary>
            Constructor, creates an empty ResourceInfo structure.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates an empty ResourceInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="T:CMS.Modules.ResourceInfoProvider">
            <summary>
            Provides access to information about resources.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.GetResources">
            <summary>
            Returns all resources.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.GetResourceInfo(System.Int32)">
            <summary>
            Returns the ResourceInfo structure for the specified resource.
            </summary>
            <param name="resourceId">Id of the resource to retrieve</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.GetResourceInfo(System.String)">
            <summary>
            Returns the ResourceInfo structure for the specified resource.
            </summary>
            <param name="resourceName">Resource name to use for retrieving the resource data</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.SetResourceInfo(CMS.Modules.ResourceInfo)">
            <summary>
            Sets the specified resource data.
            </summary>
            <param name="resourceObj">Resource data object</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.DeleteResourceInfo(CMS.Modules.ResourceInfo)">
            <summary>
            Delete specified resource.
            </summary>
            <param name="resourceObj">Resource object</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.DeleteResourceInfo(System.Int32)">
            <summary>
            Delete specified resource.
            </summary>
            <param name="resourceId">Resource ID</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.GetResources(System.Int32)">
            <summary>
            Gets resources for specified site.
            </summary>
            <param name="siteId">Site ID</param>        
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.IsResourceAvailable(System.Int32)">
            <summary>
            Returns a value indicating whether the specified resource (module) is available.
            </summary>
            <remarks>
            A resource is available only if a database record exists and a module with the same is installed.
            A resource is also available if a negative identifier value is specified.
            </remarks>
            <param name="resourceId">A resource (module) identifier.</param>
            <returns>True, if the specified resource exists; otherwise, false.</returns>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.IsSystemResource(System.String)">
            <summary>
            Returns true if resource(specified by resource name) is considered as system
            </summary>
            <param name="resourceName">Resource code name</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.SetInfo(CMS.Modules.ResourceInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.DeleteInfo(CMS.Modules.ResourceInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Modules.ResourceInfoProvider.GetResourcesInternal(System.Int32)">
            <summary>
            Gets resources for specified site based on the give parameters.
            </summary>
            <param name="siteId">Site ID</param>
        </member>
        <member name="T:CMS.Modules.ResourceSiteInfo">
            <summary>
            ResourceSiteInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceSiteInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceSiteInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceSiteInfo.ResourceID">
            <summary>
            Resource ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceSiteInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfo.#ctor">
            <summary>
            Constructor - Creates an empty ResourceSiteInfo object.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ResourceSiteInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Modules.ResourceSiteInfoProvider">
            <summary>
            Class providing ResourceSiteInfo management.
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceSiteInfoProvider.mSiteResources">
            <summary>
            Table of the resources assigned to site [siteName] -> [resourceName -> true]
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceSiteInfoProvider.SiteResources">
            <summary>
            Table of the resources assigned to site [siteName] -> [resourceName -> true]
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.GetResourceSites">
            <summary>
            Returns all bindings between modules(resources) and sites.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding structure.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.ResourceSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding structure.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.ResourceSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.GetResourceSiteInfo(System.Int32,System.Int32)">
            <summary>
            Returns the ResourceSiteInfo structure for the specified resourceSite.
            </summary>
            <param name="resourceId">ResourceID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.SetResourceSiteInfo(CMS.Modules.ResourceSiteInfo)">
            <summary>
            Sets (updates or inserts) specified resourceSite.
            </summary>
            <param name="resourceSite">ResourceSite to set</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.DeleteResourceSiteInfo(CMS.Modules.ResourceSiteInfo)">
            <summary>
            Removes specified resource from site.
            </summary>
            <param name="infoObj">ResourceSite object</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.RemoveResourceFromSite(System.Int32,System.Int32)">
            <summary>
            Removes specified resource from site.
            </summary>
            <param name="resourceId">ResourceID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.ResourceSiteInfo"/> binding.
            </summary>
            <param name="resourceId">Module ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.AddResourceToSite(System.Int32,System.Int32)">
            <summary>
            Adds specified resource to the site.
            </summary>
            <param name="resourceId">ResourceID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.IsResourceOnSite(System.String,System.String)">
            <summary>
            Returns if the resource is available for specified site.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="siteName">Name of the site</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.ClearHashtables(System.Boolean)">
            <summary>
            Clear hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.GetResourceSiteInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the ResourceSiteInfo structure for the specified resourceSite.
            </summary>
            <param name="resourceId">ResourceID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.SetInfo(CMS.Modules.ResourceSiteInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.DeleteInfo(CMS.Modules.ResourceSiteInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.IsResourceOnSiteInternal(System.String,System.String)">
            <summary>
            Returns if the resource is available for specified site.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="siteName">Name of the site</param>
        </member>
        <member name="M:CMS.Modules.ResourceSiteInfoProvider.GetRelatedDocumentTypeIDs(System.Int32)">
            <summary>
            Returns IDs of document types that are related to the module with given id.
            </summary>
            <param name="resourceID">Module ID</param>
        </member>
        <member name="T:CMS.Modules.ExportSpecialActions">
            <summary>
            Handles special actions during the export process.
            </summary>
        </member>
        <member name="M:CMS.Modules.ExportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="M:CMS.Modules.ExportSpecialActions.SealModules(System.Data.DataTable)">
            <summary>
            Seals the exported modules.
            </summary>
            <param name="modules">Table with modules.</param>
        </member>
        <member name="M:CMS.Modules.ExportSpecialActions.SealUIElements(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Seals exported UI elements based on module's 'is in development' flag.
            </summary>
            <param name="uiElements">Table with UI elements.</param>
            <param name="modules">Table with modules.</param>
        </member>
        <member name="T:CMS.Modules.ImportSpecialActions">
            <summary>
            Handles special actions during the import/export process.
            </summary>
        </member>
        <member name="M:CMS.Modules.ImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Modules.ModuleExport">
            <summary>
            Handles special actions during the Module export process.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleExport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Modules.ModuleImport">
            <summary>
            Handles special actions during the Module import process.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleImport.Init">
            <summary>
            Initializes import handlers
            </summary>
        </member>
        <member name="T:CMS.Modules.InstallableModulesInformationService">
            <summary>
            Provides information about installable modules.
            </summary>
            <remarks>
            The <see cref="T:CMS.Core.Internal.IInstallableModulesInformationService"/> could be implemented directly by <see cref="T:CMS.Modules.InstallableModulesManager"/>,
            but it is a singleton and it is not possible to register interface implementation while providing your own singleton instance (new singleton instance
            would be created).
            </remarks>
        </member>
        <member name="M:CMS.Modules.InstallableModulesInformationService.GetModuleNamesOmittedFromInitialization">
            <summary>
            Gets set of module names which are not installed and therefore omitted from initialization.
            </summary>
            <returns>Set of module names omitted from initialization. Returns null if all installable modules are omitted from initialization.</returns>
        </member>
        <member name="T:CMS.Modules.InstallableModulesManager">
            <summary>
            Manages installable modules.
            </summary>
        </member>
        <member name="F:CMS.Modules.InstallableModulesManager.MODULE_DESCRIPTION_PATTERN">
            <summary>
            Pattern for module description with module's name and version.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="F:CMS.Modules.InstallableModulesManager.MODULE_DESCRIPTION_META_FILE_NAME_PATTERN">
            <summary>
            File name pattern for module description meta file.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="P:CMS.Modules.InstallableModulesManager.NugetModulesMetaFilesPath">
            <summary>
            Relative path to directory containing module descriptions managed by NuGet (with trailing slash).
            Each description file is expected to be named accordingly to <see cref="F:CMS.Modules.InstallableModulesManager.MODULE_DESCRIPTION_META_FILE_NAME_PATTERN"/>.
            </summary>
        </member>
        <member name="P:CMS.Modules.InstallableModulesManager.InstalledNugetModulesMetaFilesPath">
            <summary>
            Relative path to directory containing meta files of installed modules (with trailing slash).
            </summary>
            <remarks>
            The folder denoted by this path contains uninstallation tokens (a token is a meta file). Such tokens allow the instance to uninstall a module
            for which it has a token.
            </remarks>
        </member>
        <member name="P:CMS.Modules.InstallableModulesManager.Current">
            <summary>
            Gets current instance.
            </summary>
        </member>
        <member name="P:CMS.Modules.InstallableModulesManager.RootPath">
            <summary>
            Root path for resolving relative paths.
            </summary>
        </member>
        <member name="P:CMS.Modules.InstallableModulesManager.NuGetModulesMetaFilesPath">
            <summary>
            Rooted path to directory containing module descriptions managed by NuGet (with trailing slash).
            Each description file is expected to be named accordingly to <see cref="F:CMS.Modules.InstallableModulesManager.MODULE_DESCRIPTION_META_FILE_NAME_PATTERN"/>.
            </summary>
        </member>
        <member name="P:CMS.Modules.InstallableModulesManager.InstalledNuGetModulesMetaFilesPath">
            <summary>
            Rooted path to directory containing meta files of installed modules (with trailing slash).
            </summary>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.#ctor">
            <summary>
            Prepares the only instance of installable module manager.
            </summary>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetCurrentState">
            <summary>
            Gets current state of installable modules.
            </summary>
            <returns>Object representing current state of installable modules.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetUninstallationTokens">
            <summary>
            Gets list of basic module meta data for which the instance has an uninstallation token.
            </summary>
            <returns>List of uninstallation tokens.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetModuleNamesOmittedFromInitialization">
            <summary>
            Gets set of module names which are not installed in the system in the same version as their corresponding NuGet package meta file has
            and are omitted from initialization.
            </summary>
            <returns>Set of module names omitted from initialization.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetModulesToBeInstalled(CMS.Modules.InstallableModulesState)">
            <summary>
            Gets enumeration of modules which have NuGet package meta file but are not installed in the system.
            Only modules which were not processed by installation process on this instance are returned.
            </summary>
            <param name="state">State of installable modules from which the result is determined.</param>
            <returns>Enumeration of modules for installation.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetModulesToBeUpdated(CMS.Modules.InstallableModulesState)">
            <summary>
            <para>
            Gets enumeration of module pairs which have NuGet package meta file in newer version than the version installed in the system.
            Only modules which were processed by installation process on this instance are returned.
            </para>
            <para>
            Each pair consists of older version meta data and newer version meta data.
            </para>
            </summary>
            <param name="state">State of installable modules from which the result is determined.</param>
            <returns>Enumeration of module pairs for update.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetModulesToBeUninstalled(CMS.Modules.InstallableModulesState)">
            <summary>
            Gets enumeration of modules which are installed in the system, but their NuGet package meta file is gone.
            Only modules which were processed by installation process on this instance are returned.
            </summary>
            <param name="state">State of installable modules from which the result is determined.</param>
            <returns>Enumeration of modules for uninstallation.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetInstalledModulesWithoutUninstallationToken(CMS.Modules.InstallableModulesState)">
            <summary>
            Gets enumeration of modules which are installed in the system, but their uninstallation token is not present.
            </summary>
            <param name="state">State of installable modules from which the result is determined.</param>
            <returns>Enumeration of installed modules without token.</returns>
            <remarks>
            Missing token for installed modules is usually the result of module installation in an environment where multiple instances
            share one database.
            </remarks>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetUninstalledModulesWithUninstallationToken(CMS.Modules.InstallableModulesState)">
            <summary>
            Gets enumeration of modules which were uninstalled from the system, but their uninstallation token is still present.
            </summary>
            <param name="state">State of installable modules from which the result is determined.</param>
            <returns>Enumeration of uninstalled modules which have redundant token.</returns>
            <remarks>
            Redundant token for a module is usually the result of module uninstallation in an environment where multiple instances
            share one database.
            </remarks>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.MarkModuleAsInstalled(CMS.Core.BasicModuleInstallationMetaData,System.Boolean)">
            <summary>
            Marks given module as installed, or installed but in need of a restart.
            </summary>
            <param name="moduleInstallationMetaData">Basic module installation meta data.</param>
            <param name="restartPending">Whether module needs a restart to be ready.</param>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.RestartPerformed">
            <summary>
            Notifies the manager about performed restart.
            </summary>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.EnsureModuleUninstallationToken(CMS.Core.BasicModuleInstallationMetaData)">
            <summary>
            Ensures uninstallation token for given <paramref name="moduleInstallationMetaData"/>.
            </summary>
            <param name="moduleInstallationMetaData">Basic module installation meta data.</param>
            <remarks>
            <para>
            Module uninstallation token allows for module uninstallation. Module uninstallation can be performed only
            on an instance which has the token. This prevents unintended uninstallation of module whose code base
            has not been distributed to all application servers yet.
            </para>
            <para>
            Moreover once an instance has the token, it will not reinstall the module. This prevents unintended reinstallation
            of module which has been uninstalled on one instance and the code base has not been synchronized yet.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.RemoveModuleUninstallationToken(CMS.Core.BasicModuleInstallationMetaData)">
            <summary>
            Removes uninstallation token for given <paramref name="moduleInstallationMetaData"/>.
            Does nothing when the token does not exist.
            </summary>
            <param name="moduleInstallationMetaData">Basic module installation meta data.</param>
            <remarks>
            <para>
            Module uninstallation token allows for module uninstallation. Module uninstallation can be performed only
            on an instance which has the token. This prevents unintended uninstallation of module whose code base
            has not been distributed to all application servers yet.
            </para>
            <para>
            Moreover once an instance has the token, it will not reinstall the module. This prevents unintended reinstallation
            of module which has been uninstalled on one instance and the code base has not been synchronized yet.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.SetModuleInstallationState(CMS.Core.BasicModuleInstallationMetaData,System.String)">
            <summary>
            Sets state of installable module to desired state.
            </summary>
            <param name="moduleInstallationMetaData">Basic module installation meta data.</param>
            <param name="state">Installation state.</param>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetInitializableModules">
            <summary>
            Gets modules which are initializable.
            </summary>
            <returns>Object query for initializable modules</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetModulesByInstallationState(System.String)">
            <summary>
            Gets modules in given installation state.
            </summary>
            <param name="installationState">Module's installation state.</param>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetInstalledModules">
            <summary>
            Gets list of modules installed in the database.
            </summary>
            <returns>List of installed modules.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetTokenMetaFileName(CMS.Core.BasicModuleInstallationMetaData)">
            <summary>
            Gets token meta file name for module meta data.
            </summary>
            <param name="moduleInstallationMetaData">Basic module installation meta data.</param>
            <returns>Token meta file name.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetNuGetModules">
            <summary>
            Loads description of modules installed by NuGet.
            </summary>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.ParseBasicModuleDescriptionFileName(System.String,System.String@,System.String@)">
            <summary>
            Parses module name and version from basic module description meta file name.
            The file name has to follow the <see cref="F:CMS.Modules.InstallableModulesManager.MODULE_DESCRIPTION_META_FILE_NAME_PATTERN"/> format.
            </summary>
            <param name="descriptionFileName">Basic module description meta file name.</param>
            <param name="name">Module name parsed from file name.</param>
            <param name="version">Module version parsed from file name.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown when file name has not the expected format.</exception>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetNuGetModuleDescriptionFileNames">
            <summary>
            Gets enumeration of meta file names (managed by NuGet) containing description of modules.
            </summary>
            <returns>Enumeration of meta file names.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.GetUninstallationTokenFileNames">
            <summary>
            Gets enumeration of uninstallation tokens (meta files).
            </summary>
            <returns>Enumeration of meta file names.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesManager.TryEnsureMetaFilesPath(System.String,System.String)">
            <summary>
            Tries to ensure meta files path.
            </summary>
            <param name="metaFilesPath">Meta files path.</param>
            <param name="startingPath">Starting path.</param>
        </member>
        <member name="T:CMS.Modules.InstallableModulesState">
            <summary>
            State object containing information regarding installable modules.
            </summary>
        </member>
        <member name="F:CMS.Modules.InstallableModulesState.mNuGetInstalledModules">
            <summary>
            List with basic module installation meta data from the <see cref="P:CMS.Modules.InstallableModulesManager.NugetModulesMetaFilesPath"/> folder.
            </summary>
        </member>
        <member name="F:CMS.Modules.InstallableModulesState.mUninstallationTokens">
            <summary>
            List with module uninstallation tokens from the <see cref="P:CMS.Modules.InstallableModulesManager.InstalledNugetModulesMetaFilesPath"/> folder.
            </summary>
        </member>
        <member name="F:CMS.Modules.InstallableModulesState.mDatabaseInstalledModules">
            <summary>
            List of modules installed in the database.
            </summary>
        </member>
        <member name="F:CMS.Modules.InstallableModulesState.mNuGetInstalledModuleVersions">
            <summary>
            Dictionary with module name and version pairs. Contains the same entries as <see cref="F:CMS.Modules.InstallableModulesState.mNuGetInstalledModules"/>.
            </summary>
        </member>
        <member name="F:CMS.Modules.InstallableModulesState.mUninstallationTokenVersions">
            <summary>
            Dictionary with uninstallation tokens for modules - set of versions for given name. Contains the same entries as <see cref="F:CMS.Modules.InstallableModulesState.mUninstallationTokens"/>.
            </summary>
            <remarks>
            Token for certain module can be present in more than one version when upgrading.
            </remarks>
        </member>
        <member name="F:CMS.Modules.InstallableModulesState.mDatabaseInstalledModuleVersions">
            <summary>
            Dictionary with modules in the database - name and version pairs. Contains the same entries as <see cref="F:CMS.Modules.InstallableModulesState.mDatabaseInstalledModules"/>.
            </summary>
        </member>
        <member name="P:CMS.Modules.InstallableModulesState.NuGetInstalledModules">
            <summary>
            List with basic module installation meta data from the <see cref="P:CMS.Modules.InstallableModulesManager.NugetModulesMetaFilesPath"/> folder.
            </summary>
            <seealso cref="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresent(System.String)"/>
        </member>
        <member name="P:CMS.Modules.InstallableModulesState.UninstallationTokens">
            <summary>
            List with module uninstallation tokens from the <see cref="P:CMS.Modules.InstallableModulesManager.InstalledNugetModulesMetaFilesPath"/> folder.
            </summary>
            <seealso cref="M:CMS.Modules.InstallableModulesState.IsUninstallationTokenPresent(System.String,System.String)"/>
        </member>
        <member name="P:CMS.Modules.InstallableModulesState.DatabaseInstalledModules">
            <summary>
            List of modules installed in the database.
            </summary>
            <seealso cref="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresent(System.String)"/>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.IsNuGetModulePresent(System.String)">
            <summary>
            Tells you whether module of given <paramref name="name"/> is present in any version.
            </summary>
            <param name="name">Module name.</param>
            <returns>True if the module is present, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.IsNuGetModulePresent(System.String,System.String)">
            <summary>
            Tells you whether module of given <paramref name="name"/> is present in specified <paramref name="version"/>.
            </summary>
            <param name="name">Module name.</param>
            <param name="version">Module version.</param>
            <returns>True if the module is present, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.IsUninstallationTokenPresent(System.String,System.String)">
            <summary>
            Tells you whether uninstallation token for module of given <paramref name="name"/> is present in specified <paramref name="version"/>.
            </summary>
            <param name="name">Module name.</param>
            <param name="version">Module version.</param>
            <returns>True if uninstallation token is present, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresent(System.String)">
            <summary>
            Tells you whether module of given <paramref name="name"/> is present in any version in the database.
            </summary>
            <param name="name">Module name.</param>
            <returns>True if the module is present, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresent(System.String,System.String)">
            <summary>
            Tells you whether module of given <paramref name="name"/> is present in specified <paramref name="version"/> in the database.
            </summary>
            <param name="name">Module name.</param>
            <param name="version">Module version.</param>
            <returns>True if the module is present, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresentInLowerVersion(System.String,System.String)">
            <summary>
            Tells you whether module of given <paramref name="name"/> is present in version which is less than <paramref name="newVersion"/>.
            </summary>
            <param name="name">Module name.</param>
            <param name="newVersion">Module version.</param>
            <returns>True if the module is present, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.GetDatabaseModule(System.String)">
            <summary>
            Gets module of given <paramref name="name"/> from <see cref="P:CMS.Modules.InstallableModulesState.DatabaseInstalledModules"/>.
            </summary>
            <param name="name">Module name.</param>
            <returns>Module of given <paramref name="name"/>.</returns>
            <remarks>
            Use <see cref="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresent(System.String)"/>, <see cref="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresent(System.String,System.String)"/> or <see cref="M:CMS.Modules.InstallableModulesState.IsDatabaseModulePresentInLowerVersion(System.String,System.String)"/> to determine whether module
            of name <paramref name="name"/> exists in the database.
            </remarks>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.VersionsMatch(System.String,System.String)">
            <summary>
            Tells you whether two version strings represent the same version or not.
            </summary>
            <param name="version1">Version string.</param>
            <param name="version2">Version string.</param>
            <returns>True if <paramref name="version1"/> represents the same version as <paramref name="version2"/>.</returns>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.FillDictionaries">
            <summary>
            Prepares lookup dictionaries.
            </summary>
        </member>
        <member name="M:CMS.Modules.InstallableModulesState.#ctor(System.Collections.Generic.List{CMS.Core.BasicModuleInstallationMetaData},System.Collections.Generic.List{CMS.Core.BasicModuleInstallationMetaData},System.Collections.Generic.List{CMS.Modules.ResourceInfo})">
            <summary>
            Creates a new installable modules state.
            </summary>
            <param name="installedNuGetModules">List of modules installed by NuGet.</param>
            <param name="uninstallationTokens">List of uninstallation tokens.</param>
            <param name="installedDatabaseModules">List of modules installed in the database.</param>
        </member>
        <member name="T:CMS.Modules.ModuleInstallationException">
            <summary>
            Thrown when module installation operation fails.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationException.ModuleName">
            <summary>
            Gets name of the module that caused the exception.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationException.ModuleVersion">
            <summary>
            Gets version of the module that caused the exception.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationException.Operation">
            <summary>
            Gets the name of installation operation that caused the exception.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationException.#ctor">
            <summary>
            Creates a new instance of ModuleInstallationException.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of ModuleInstallationException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="moduleName">Name of the module that caused the exception.</param>
            <param name="operation">Name of the operation that caused the exception.</param>
            <param name="moduleVersion">Version of the module that caused the exception.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of ModuleInstallationException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="moduleName">Name of the module that caused the exception.</param>
            <param name="operation">Name of the operation that caused the exception.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationException.#ctor(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of ModuleInstallationException.
            </summary>
            <param name="message">Exception's message.</param>
            <param name="moduleName">Name of the module that caused the exception.</param>
            <param name="operation">Name of the operation that caused the exception.</param>
            <param name="moduleVersion">Version of the module that caused the exception.</param>
            <param name="inner">Inner exception.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of ModuleInstallationException.
            </summary>
            <param name="info">SerializationInfo.</param>
            <param name="context">StreamingContext.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data. </param>
            <param name="context">The destination (see StreamingContext) for this serialization. </param>
        </member>
        <member name="T:CMS.Modules.ModuleInstallationState">
            <summary>
            Contains installation well-known states of modules.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleInstallationState.INSTALLED">
            <summary>
            State of a module which is installed in the DB (ready to use).
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleInstallationState.INSTALLED_PENDING_RESTART">
            <summary>
            State of a module which is installed in the DB, but needs a restart to be fully operable.
            </summary>
        </member>
        <member name="T:CMS.Modules.ModuleInstaller">
            <summary>
            Class responsible for modules installation from the high level perspective.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstaller.Current">
            <summary>
            Gets current instance.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstaller.RestartRequired">
            <summary>
            Tells you whether module installer has processed any module requiring application restart.
            Once set to true the flag is not cleared until application is restarted.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstaller.RootPath">
            <summary>
            Path to application root.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.ProcessInstallation">
            <summary>
            Processes installation changes in modules.
            </summary>
            <returns>Returns true if the installation changes finished successfully, false otherwise.</returns>
            <remarks>
            The installation changes stop on first failing module.
            </remarks>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.ResetUninstallationTokens">
            <summary>
            <para>
            Cleans out uninstallation tokens for all modules, including associated data (i.e. module uninstallation files).
            This allows for module re-installation when the database has been lost, but the modules are still present
            in code base (e.g. after dropping the database and installing a new one using the wizard).
            </para>
            <para>
            This method must be called after application pre-initialization phase has finished (to reflect changes in custom path mapping).
            When called after the instance has already been initialized (and module installation processed), the module re-installation will occur upon next startup.
            </para>
            </summary>
            <remarks>
            <para>
            Reset of module uninstallation tokens allows for re-installation of modules which had already been processed by this instance,
            but have not been uninstalled (i.e. have not been removed from the code base). It is designed for situations when you want need
            to install all modules again (e.g. after database has been recreated to its initial state).
            If you need to allow for re-installation of some particular module, you should simply uninstall it (i.e. remove from code base) and then install again.
            </para>
            <para>
            If you reset uninstallation tokens when modules are installed (i.e. they are present in the database and code base), you prevent them from being uninstalled by this instance.
            However, the instance will recover the missing tokens (and associated data) for installed modules upon its next startup.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.InstallModule(CMS.Core.BasicModuleInstallationMetaData,CMS.Base.IUserInfo)">
            <summary>
            Installs a new module to the system.
            </summary>
            <param name="basicModuleInstallationMetaData">Basic module installation meta data.</param>
            <param name="userInfo">User info to be used for module installation.</param>
            <exception cref="T:CMS.Modules.ModuleInstallationException">Thrown when installation fails.</exception>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.UpdateModule(CMS.Core.BasicModuleInstallationMetaData,CMS.Core.BasicModuleInstallationMetaData,CMS.Base.IUserInfo)">
            <summary>
            Updates a module installed in the system.
            </summary>
            <param name="installedModuleVersion">Basic module installation meta data of currently installed module version.</param>
            <param name="updatedModuleVersion">Basic module installation meta data of newer module version.</param>
            <param name="userInfo">User info to be used for module update.</param>
            <exception cref="T:CMS.Modules.ModuleInstallationException">Thrown when module update fails.</exception>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.UninstallModule(CMS.Core.BasicModuleInstallationMetaData)">
            <summary>
            Uninstall a module from the system.
            </summary>
            <param name="basicModuleInstallationMetaData">Basic module installation meta data.</param>
            <exception cref="T:CMS.Modules.ModuleInstallationException">Thrown when uninstallation fails.</exception>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.FinishModuleInstallation(CMS.Core.BasicModuleInstallationMetaData,CMS.Modules.ModuleInstallationFileResolver)">
            <summary>
            Performs finish actions after module installation. Writes to event log in case of failure.
            Failure to perform the actions has no impact on module functionality. However, such module
            can not be uninstalled until finish actions are successfully performed.
            </summary>
            <param name="basicModuleInstallationMetaData">Basic module installation meta data.</param>
            <param name="fileResolver">Resolver for module paths.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.FinishModuleUninstallation(CMS.Core.BasicModuleInstallationMetaData,CMS.Modules.ModuleInstallationFileResolver)">
            <summary>
            Performs finish actions after module uninstallation. Writes to event log in case of failure.
            Failure to perform the actions has not direct impact on module uninstallation. However, such module
            can not be installed again until finish actions are successfully performed.
            </summary>
            <param name="basicModuleInstallationMetaData">Basic module installation meta data.</param>
            <param name="fileResolver">Resolver for module paths.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.FinishModuleUninstallationInternal(CMS.Core.BasicModuleInstallationMetaData,CMS.Modules.ModuleInstallationFileResolver)">
            <summary>
            Performs finish actions after module uninstallation. Does not handle exceptions.
            Failure to perform the actions has not direct impact on module uninstallation. However, such module
            can not be installed again until finish actions are successfully performed.
            </summary>
            <param name="basicModuleInstallationMetaData">Basic module installation meta data.</param>
            <param name="fileResolver">Resolver for module paths.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.CopyUninstallationFiles(CMS.Modules.ModuleInstallationFileResolver)">
            <summary>
            Copies module files, which are necessary for uninstallation, to repository.
            </summary>
            <param name="fileResolver">Resolver for module paths.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.CopyUninstallationFile(System.String,System.String)">
            <summary>
            Copies uninstallation file if it exists. Ensures the <paramref name="targetFilePath"/> existence before copying.
            Overwrites existing file.
            </summary>
            <param name="sourceFilePath">Source path.</param>
            <param name="targetFilePath">Target path.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.SetRestartFlag(System.Boolean)">
            <summary>
            Sets restart flag if <paramref name="restartNeeded"/> is true.
            Otherwise does nothing.
            </summary>
            <param name="restartNeeded">True if restart is needed, false otherwise.</param>
            <remarks>
            Modules having a DLL are omitted from the initialization and therefore
            are not fully ready until application is restarted.
            </remarks>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.IsRestartNeeded(CMS.Core.BasicModuleInstallationMetaData)">
            <summary>
            Tells you whether module needs restart after making installation changes.
            </summary>
            <param name="basicModuleInstallationMetaData">Basic module installation meta data.</param>
            <returns>True if module needs restart, false otherwise.</returns>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.ExecuteSqlScript(System.String,CMS.DataEngine.QueryDataParameters)">
            <summary>
            Executes SQL script from a file.
            </summary>
            <param name="sqlScriptFilePath">SQL script file path.</param>
            <param name="parameters">Query parameters.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.RemoveInstalledModuleRepository(CMS.Modules.ModuleInstallationFileResolver)">
            <summary>
            Removes all installed module meta data.
            </summary>
            <param name="fileResolver">File resolver used for resolving module meta file paths.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.RemoveInstalledModuleData(System.String)">
            <summary>
            Removes all module's data from the database.
            </summary>
            <param name="moduleName">Module code name.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstaller.#ctor">
            <summary>
            Prepares the only instance of module installer.
            </summary>
        </member>
        <member name="T:CMS.Modules.Internal.ModuleInstallerConfiguration">
            <summary>
            Holds configuration information for module installation.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.Modules.Internal.ModuleInstallerConfiguration.ModuleInstallerUserProvider">
            <summary>
            Gets or sets function providing user for the purpose of module installation.
            </summary>
            <remarks>
            The provided user is used in the process of macro signing.
            </remarks>
        </member>
        <member name="M:CMS.Modules.Internal.ModuleInstallerConfiguration.GetInstallationUser">
            <summary>
            Gets user to be used in module installation.
            </summary>
        </member>
        <member name="T:CMS.Modules.ModulesModule">
            <summary>
            Represents the Modules module.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulesModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulesModule.OnInit">
            <summary>
            Init module
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulesModule.ProcessInstallableModuleChanges(System.Object,System.EventArgs)">
            <summary>
            Processes changes in installable modules.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulesModule.ResetUninstallationTokensOfInstallableModules">
            <summary>
            <para>
            Cleans out uninstallation tokens for all modules, including associated data (i.e. module uninstallation files).
            This allows for module re-installation when the database has been lost, but the modules are still present
            in code base (e.g. after dropping the database and installing a new one using the wizard).
            </para>
            <para>
            This method must be called after application pre-initialization phase has finished (to reflect changes in custom path mapping).
            When called after the instance has already been initialized (and module installation processed), the module re-installation will occur upon next startup.
            </para>
            </summary>
            <remarks>
            <para>
            Reset of module uninstallation tokens allows for re-installation of modules which had already been processed by this instance,
            but have not been uninstalled (i.e. have not been removed from the code base). It is designed for situations when you want need
            to install all modules again (e.g. after database has been recreated to its initial state).
            If you need to allow for re-installation of some particular module, you should simply uninstall it (i.e. remove from code base) and then install again.
            </para>
            <para>
            If you reset uninstallation tokens when modules are installed (i.e. they are present in the database and code base), you prevent them from being uninstalled by this instance.
            However, the instance will recover the missing tokens (and associated data) for installed modules upon its next startup.
            </para>
            </remarks>
        </member>
        <member name="T:CMS.Modules.ModulesModuleMetadata">
            <summary>
            Represents the Modules module metadata.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulesModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Modules.BuildNuSpecManifestEventArgs">
            <summary>
            Arguments of event represented by <see cref="T:CMS.Modules.BuildNuSpecManifestHandler"/>.
            </summary>
        </member>
        <member name="M:CMS.Modules.BuildNuSpecManifestEventArgs.#ctor">
            <summary>
            Initializes event arguments for event raised during packaging of a module.
            </summary>
        </member>
        <member name="M:CMS.Modules.BuildNuSpecManifestEventArgs.#ctor(System.String)">
            <summary>
            Initializes event arguments for event raised during packaging of a module with given <paramref name="resourceName"/>.
            </summary>
        </member>
        <member name="P:CMS.Modules.BuildNuSpecManifestEventArgs.ResourceName">
            <summary>
            Name of the module being packaged.
            </summary>
            <seealso cref="M:CMS.Modules.ModulePackageBuilder.#ctor(CMS.Modules.ResourceInfo)"/>
            <seealso cref="M:CMS.Modules.ModulePackageBuilder.BuildPackage(System.String)"/>
            <seealso cref="M:CMS.Modules.ModulePackageBuilder.BuildPackage(System.IO.Stream)"/>
        </member>
        <member name="P:CMS.Modules.BuildNuSpecManifestEventArgs.NuSpecBuilder">
            <summary>
            Builder class for NuSpec manifest. Use the builder to adjust the resulting manifest during the before phase of the event.
            </summary>
        </member>
        <member name="P:CMS.Modules.BuildNuSpecManifestEventArgs.Manifest">
            <summary>
            NuSpec manifest created by <see cref="P:CMS.Modules.BuildNuSpecManifestEventArgs.NuSpecBuilder"/>. The manifest is available during the after phase of the event.
            </summary>
        </member>
        <member name="T:CMS.Modules.BuildNuSpecManifestHandler">
            <summary>
            Handler for event raised when NuSpec manifest for an installable module NuGet package is being built.
            </summary>
            <seealso cref="T:CMS.Modules.NuSpecBuilder"/>
        </member>
        <member name="T:CMS.Modules.ModuleDataProvider">
            <summary>
            Provides module objects of supported types from database.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleDataProvider.mSupportedObjectTypes">
            <summary>
            Contains object types of supported module database objects.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleDataProvider.SupportedObjectTypes">
            <summary>
            Enumerates object types which are considered as module's objects.
            The module object type itself ("cms.resource") is not present in the enumeration.
            </summary>
            <returns>Enumeration of object types.</returns>
            <seealso cref="M:CMS.Modules.ModuleDataProvider.GetModuleObjects(System.String)"/>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleObjects(System.String)">
            <summary>
            Gets object query for module objects of given type.
            <paramref name="objectType"/> must be one of those enumerated in <see cref="P:CMS.Modules.ModuleDataProvider.SupportedObjectTypes"/>, otherwise returns null.
            </summary>
            <param name="objectType">Type of object to return object query for.</param>
            <returns>Object query for given object type, or null.</returns>
            <seealso cref="P:CMS.Modules.ModuleDataProvider.SupportedObjectTypes"/>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModulePageTypes">
            <summary>
            Gets object query for page types (contained in module) to be included in the export package.
            </summary>
            <returns>Page types of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleWebParts">
            <summary>
            Gets object query for web parts (contained in module) to be included in the export package.
            </summary>
            <returns>Web parts of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleWebPartCategories">
            <summary>
            Gets object query for web part categories (contained in module) to be included in the export package.
            </summary>
            <returns>Web part categories of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleFormControls">
            <summary>
            Gets object query for form controls (contained in module) to be included in the export package.
            </summary>
            <returns>Form controls of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleSettingsKeys">
            <summary>
            Gets object query for settings keys (contained in module) to be included in the export package.
            </summary>
            <returns>Settings keys of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleSettingsCategories">
            <summary>
            Gets object query for settings categories (contained in module) to be included in the export package.
            </summary>
            <returns>Settings categories of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.GetModuleSystemTables">
            <summary>
            Gets object query for system tables (contained in module) to be included in the export package.
            </summary>
            <returns>System tables of module</returns>
        </member>
        <member name="M:CMS.Modules.ModuleDataProvider.#ctor(CMS.Modules.ResourceInfo)">
            <summary>
            Creates a new module database objects provider.
            </summary>
            <param name="module">Module for which the objects are retrieved.</param>
        </member>
        <member name="T:CMS.Modules.ModuleExportPackageBuilder">
            <summary>
            Allows you to create export package to be bundled with NuGet package.
            The package contains some useful DB objects supported by import/export.
            The package does not contain any files (those are handled by NuGet itself).
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleExportPackageBuilder.IncludedObjectTypes">
            <summary>
            The export package contains module objects of types enumerated by this property.
            The module object type itself ("cms.resource") is not present in the enumeration.
            </summary>
            <returns>Enumeration of object types</returns>
            <seealso cref="M:CMS.Modules.ModuleExportPackageBuilder.GetModuleObjects(System.String)"/>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.BuildExportPackage(System.String,System.String,System.String)">
            <summary>
            Builds a new export package using the import/export.
            The resulting zip will be placed in folder determined by <paramref name="targetFolderPath"/> parameter
            and named accordingly to <paramref name="targetFileName"/>.
            </summary>
            <remarks>
            <para>
            In the process of export package creation a temporary folder is necessary.
            The folder is determined by <paramref name="tempFolderPath"/> parameter.
            Any contents of such folder are likely to be deleted before and after the package creation, thus do not use it for storing
            any useful data.
            </para>
            <para>
            All necessary folders are created before the export starts, if they do not exist already.
            </para>
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Can be thrown when creating necessary folder structure.</exception>
            <exception cref="T:System.IO.IOException">Can be thrown when creating necessary folder structure.</exception>
            <param name="targetFolderPath">The resulting zip will be placed in folder determined by this parameter.</param>
            <param name="targetFileName">The resulting zip will be named accordingly to this parameter.</param>
            <param name="tempFolderPath">In the process of export package creation a temporary folder is necessary. 
            This parameter specifies path to the temp folder that will be used.</param>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.GetModuleObjects(System.String)">
            <summary>
            Gets object query for module objects of given type which are included in the export package.
            <paramref name="objectType"/> must be one of those enumerated in <see cref="P:CMS.Modules.ModuleExportPackageBuilder.IncludedObjectTypes"/>, otherwise returns null.
            </summary>
            <param name="objectType">Type of object to return object query for</param>
            <returns>Object query for given object type, or null.</returns>
            <seealso cref="P:CMS.Modules.ModuleExportPackageBuilder.IncludedObjectTypes"/>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.EnsureFolders(CMS.CMSImportExport.SiteExportSettings)">
            <summary>
            Makes sure that folders necessary for the export process are ready (they exist and are accessible).
            </summary>
            <param name="exportSettings">Determines the target path and temporary files path.</param>
            <exception cref="T:System.UnauthorizedAccessException">Can be thrown when creating necessary folder structure.</exception>
            <exception cref="T:System.IO.IOException">Can be thrown when creating necessary folder structure.</exception>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.AddModule(CMS.CMSImportExport.SiteExportSettings)">
            <summary>
            Adds module itself to the export settings.
            </summary>
            <param name="exportSettings">Export settings</param>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.AddModuleObjects(CMS.CMSImportExport.SiteExportSettings)">
            <summary>
            Adds module objects to the export settings.
            </summary>
            <param name="exportSettings">Export settings</param>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.CreateNewSettings(System.String,System.String,System.String)">
            <summary>
            Creates new settings object for export and sets its basic properties
            </summary>
            <param name="targetFolderPath">The resulting zip will be placed in folder determined by this parameter.</param>
            <param name="targetFileName">The resulting zip will be named accordingly to this parameter.</param>
            <param name="tempFolderPath">In the process of export package creation a temporary folder is necessary. 
            This parameter specifies path to the temp folder that will be used.</param>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageBuilder.#ctor(CMS.Modules.ResourceInfo,CMS.Base.IUserInfo)">
            <summary>
            Creates a new builder handling export package creation.
            </summary>
            <param name="module">Module for which the export package will be created</param>
            <param name="userInfo">Current user</param>
        </member>
        <member name="T:CMS.Modules.ModuleExportPackageImporter">
            <summary>
            Class responsible for import of export package shipped with installable module.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageImporter.Import(System.String)">
            <summary>
            Imports package residing in <paramref name="exportPackagePath"/>.
            </summary>
            <param name="exportPackagePath">Path to export package.</param>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageImporter.CreateImportSettings(System.String)">
            <summary>
            Creates new settings object for import and sets its basic properties.
            </summary>
            <param name="sourceFilePath">Path to the zip for importing.</param>
            <returns>Import settings.</returns>
        </member>
        <member name="M:CMS.Modules.ModuleExportPackageImporter.#ctor(CMS.Base.IUserInfo)">
            <summary>
            Creates a new instance of module package importer.
            </summary>
            <param name="userInfo">User info to be used in the import process.</param>
        </member>
        <member name="T:CMS.Modules.ModuleFile">
            <summary>
            Specifies module file that will be included in the module package.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFile.SourceRelativePath">
            <summary>
            Gets file's path (relative to root). 
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFile.TargetRelativePath">
            <summary>
            Gets path (relative to root) where the file specified by <see cref="P:CMS.Modules.ModuleFile.SourceRelativePath"/> is installed.
            File is copied to an application's root folder when no target path is specified.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFile.#ctor(System.String,System.String)">
            <summary>
            Creates new ModuleFile.
            </summary>
            <param name="sourceRelativePath">File's path (relative to root).</param>
            <param name="targetRelativePath">Path (relative to root) where file specified by <paramref name="sourceRelativePath"/> is installed.</param>
        </member>
        <member name="T:CMS.Modules.ModuleFilePathRule">
            <summary>
            Specifies path where module files are located and where they are installed.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath">
            <summary>
            Gets path (relative to application root) to module's file or directory (directory's path ends with '\'). 
            File (or directory's content) is included to the module's package.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFilePathRule.TargetRelativePath">
            <summary>
            Gets path (relative to application root) where files specified by <see cref="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath"/> are installed.
            If <see cref="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath"/> is directory, all its subdirectories are copied to target path. 
            ResolvedFiles are copied to an application's root folder when no target path is specified.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFilePathRule.Exclude">
            <summary>
            Gets list of file (or directory) paths that are excluded from <see cref="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath"/>.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFilePathRule.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new ModuleFilePath.
            </summary>
            <param name="sourceRelativePath">Path to module file or directory (relative to application root). <see cref="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath"/></param>
            <param name="targetRelativePath">Path (relative to application root) where files specified by <see cref="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath"/> are installed. <see cref="P:CMS.Modules.ModuleFilePathRule.TargetRelativePath"/></param>
            <param name="exclude">List of file (or directory) paths that are excluded from <see cref="P:CMS.Modules.ModuleFilePathRule.SourceRelativePath"/>.</param>
        </member>
        <member name="T:CMS.Modules.ModuleFileResolver">
            <summary>
            Provides paths to all module files and folders which are needed during installation package creation.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleFileResolver.mInstanceGuid">
            <summary>
            GUID to be used in paths so that each instance has its own temp folders.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.TemporaryFolderPathPattern">
            <summary>
            Path pattern to folder for temporary files. All temporary paths
            must be created from this path so that all temporary
            data can be deleted at once.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ExportPackageFolderPathPattern">
            <summary>
            Path pattern to folder where export package is to be stored.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ExportPackagePathPattern">
            <summary>
            Path pattern to file where export package is to be stored.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ExportPackageTempFolderPathPattern">
            <summary>
            Path pattern to folder where export package temporary data are to be stored.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.InstallationMetaDataTempFolderPathPattern">
            <summary>
            Path pattern to folder where installation meta data are to be stored.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ContentPathRules">
            <summary>
            Specifies all paths where module files can be located. 
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="F:CMS.Modules.ModuleFileResolver.mExcludedContentFileExtensions">
            <summary>
            Specifies all content files extensions that are excluded from the package.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleFileResolver.mLibraryPathRules">
            <summary>
            Specifies all paths where module assemblies can be located.
            Module can reference additional libraries that are specified by <see cref="T:CMS.Modules.ResourceLibraryInfo"/>.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.InstallationMetaDataPathRules">
            <summary>
            Specifies all paths where module installation meta data files can be located.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ExportPackageFolderPhysicalPath">
            <summary>
            Gets the physical path of the folder where the export package with module's data is located.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ExportPackageFileName">
            <summary>
            Gets the name of file containing exported module's data.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.ExportPackageTempFolderPhysicalPath">
            <summary>
            Gets the physical path of the folder that is used as temporary storage while creating the package with module's data.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.InstallationMetaDataTempFolderPhysicalPath">
            <summary>
            Gets the physical path of the folder that is used as temporary storage for installation meta data.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.InstallationMetaDataModuleDescriptionFileName">
            <summary>
            Gets the name of file containing installation module description.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolver.TemporaryFilesPath">
            <summary>
            Gets the physical path of the folder that is used as temporary storage during package creation.
            All temporary paths are subfolders of this path so deleting this folder safely removes all
            temporary data.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolver.#ctor(CMS.Modules.ResourceInfo,System.String)">
            <summary>
            Creates new ModuleFileResolver.
            </summary>
            <param name="module">Resource info specifying module for which paths are created.</param>
            <param name="rootPath">Root physical path. All paths are relative to this path.</param>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolver.GetMetaDataFiles">
            <summary>
            Gets source and target paths of all module's installation meta data files.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolver.GetContentFiles">
            <summary>
            Gets source and target paths of all module's files.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolver.GetContentFilesByModuleName(System.String)">
            <summary>
            Gets source and target paths of all module's files that match given module name.
            </summary>
            <param name="moduleName">Module name that is used for replacing substitutions in paths.</param>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolver.GetLibraryFiles">
            <summary>
            Gets source and target paths of all module's libraries.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolver.ResolvePath(System.String)">
            <summary>
            Resolves given path replacing the substitutions in it.
            </summary>
            <param name="path">Path that can contain substitutions.</param>
            <returns>Resolved path.</returns>
        </member>
        <member name="T:CMS.Modules.ModuleFileResolverBase">
            <summary>
            Base class for resolving paths to all module files and folders related to installation packages.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleFileResolverBase.EXPORT_PACKAGE_FILE_NAME_PATTERN">
            <summary>
            File name pattern for import/export package.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolverBase.InstallationDirectoryPathPattern">
            <summary>
            Path pattern for module installation directory.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolverBase.UpdateDirectoryPathPattern">
            <summary>
            Path pattern for module update directory.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleFileResolverBase.UninstallationDirectoryPathPattern">
            <summary>
            Path pattern for module uninstallation directory.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            </remarks>
        </member>
        <member name="F:CMS.Modules.ModuleFileResolverBase.SQL_BEFORE_FILE_NAME">
            <summary>
            Name of SQL script executed before data import.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModuleFileResolverBase.SQL_AFTER_FILE_NAME">
            <summary>
            Name of SQL script executed after data import.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleFileResolverBase.SubstitutePath(System.String,System.String,System.String)">
            <summary>
            Performs substitution in path pattern.
            </summary>
            <param name="path">Path in which to perform the substitution.</param>
            <param name="codename">Module name.</param>
            <param name="version">Module version.</param>
            <returns>Substituted path.</returns>
        </member>
        <member name="T:CMS.Modules.ModuleInstallationFileResolver">
            <summary>
            Provides paths to all module files and folders which are needed during package installation.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.InstalledNugetModulesRepository">
            <summary>
            Relative path to directory containing all meta files of installed modules (with trailing slash).
            The directory serves as a repository. Once the module is removed via NuGet, the meta files have to be still available.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.InstalledNugetModulesUninstallationFilesRepository">
            <summary>
            Relative path to directory containing files of installed modules which are necessary for proper uninstallation (with trailing slash).
            The directory serves as a repository. Once the module is removed via NuGet, the uninstallation files have to be still available.
            </summary>
            <remarks>
            Substitution '{0}' is replaced by the module codename.
            Substitution '{1}' is replaced by the module version.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.InstallationExportPackagePath">
            <summary>
            Path to module import/export package.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.InstallationBeforeSqlPath">
            <summary>
            Path to SQL script to be executed before module package import.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.InstallationAfterSqlPath">
            <summary>
            Path to SQL script to be executed after module package import.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.UninstallationBeforeSqlPath">
            <summary>
            Path to SQL script to be executed before module DB data uninstallation.
            </summary>
            <remarks>
            Path points to NuGet package, but the script is backed-up in local repository
            since after module is removed via NuGet, the file would be inaccessible.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.UninstallationAfterSqlPath">
            <summary>
            Path to SQL script to be executed after module DB data uninstallation.
            </summary>
            <remarks>
            Path points to NuGet package, but the script is backed-up in local repository
            since after module is removed via NuGet, the file would be inaccessible.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.UpdateBeforeSqlPath">
            <summary>
            Path to SQL script to be executed before module DB data update.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.UpdateAfterSqlPath">
            <summary>
            Path to SQL script to be executed after module DB data update.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.UninstallationBeforeSqlRepositoryPath">
            <summary>
            Path to SQL script to be executed before module DB data uninstallation.
            </summary>
            <remarks>
            Path points to repository which is available even after module is removed via NuGet.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.UninstallationAfterSqlRepositoryPath">
            <summary>
            Path to SQL script to be executed after module DB data uninstallation.
            </summary>
            <remarks>
            Path points to repository which is available even after module is removed via NuGet.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.RepositoryPath">
            <summary>
            Rooted path to module meta data repository folder.
            </summary>
            <remarks>
            Path points to repository which is available even after module is removed via NuGet.
            </remarks>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.RootedInstallationPath">
            <summary>
            Rooted path to module installation folder with performed substitutions.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.RootedUpdatePath">
            <summary>
            Rooted path to module update folder with performed substitutions.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.RootedUninstallationPath">
            <summary>
            Rooted path to module uninstallation folder with performed substitutions.
            </summary>
            <remarks>
            Path points to NuGet package, but the path content is backed-up in local repository
            since after module is removed via NuGet, the file would be inaccessible.
            </remarks>
            <seealso cref="P:CMS.Modules.ModuleInstallationFileResolver.RootedUninstallationRepositoryPath"/>
        </member>
        <member name="P:CMS.Modules.ModuleInstallationFileResolver.RootedUninstallationRepositoryPath">
            <summary>
            Rooted path to module uninstallation repository folder.
            </summary>
            <remarks>
            Path points to repository which is available even after module is removed via NuGet.
            </remarks>
            <seealso cref="P:CMS.Modules.ModuleInstallationFileResolver.RootedUninstallationPath"/>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationFileResolver.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new file path resolver for installation/update/uninstallation of modules.
            </summary>
            <param name="rootPath">Root physical path. All paths are relative to this path.</param>
            <param name="moduleName">Name of module for which paths are created.</param>
            <param name="moduleVersion">Version of module for which paths are created.</param>
        </member>
        <member name="T:CMS.Modules.ModuleInstallationMetaDataBuilder">
            <summary>
            Builds meta data needed on target instance for module
            installation/uninstallation.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationMetaDataBuilder.BuildModuleDescription(System.String,System.String)">
            <summary>
            Builds a new module description meta file.
            </summary>
            <param name="targetFolderPath">Target folder where to build the meta file.</param>
            <param name="targetFileName">Name of the built meta file.</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationMetaDataBuilder.#ctor(CMS.Modules.ResourceInfo)">
            <summary>
            Creates a new builder handling installation meta files creation.
            </summary>
            <param name="module">Module for which the meta files will be created</param>
        </member>
        <member name="M:CMS.Modules.ModuleInstallationMetaDataBuilder.Save(System.String,CMS.Core.ModuleInstallationMetaData)">
            <summary>
            Saves meta data to file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="metaData">Meta data to be serialized to file.</param>
        </member>
        <member name="T:CMS.Modules.ModulePackageBuilder">
            <summary>
            Allows for creating a NuGet package containing all installable module files.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePackageBuilder.IncludedObjectTypes">
            <summary>
            The installation package contains module objects of types enumerated by this property.
            The module object type itself ("cms.resource") is not present in the enumeration.
            </summary>
            <returns>Enumeration of object types</returns>
            <seealso cref="M:CMS.Modules.ModulePackageBuilder.GetModuleObjects(System.String)"/>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.#ctor(CMS.Modules.ResourceInfo)">
            <summary>
            Creates new ModulePackageBuilder for given ResourceInfo (module).
            Builder can be created only for modules which are in development (<see cref="P:CMS.Modules.ResourceInfo.ResourceIsInDevelopment"/> is set to true).
            Builder can not be created for <see cref="F:CMS.Core.ModuleName.CUSTOMSYSTEM"/>.
            </summary>
            <param name="module">Resource info specifying module for which the package is created.</param>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.BuildPackage(System.IO.Stream)">
            <summary>
            Builds the module installation package to the given stream.
            </summary>
            <param name="stream">Stream to be used.</param>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.BuildPackage(System.String)">
            <summary>
            Builds the module installation package to the file specified by given path.
            </summary>
            <param name="filePath">Path to installation package.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when necessary permissions are missing for the given path.</exception>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.GetModuleObjects(System.String)">
            <summary>
            Gets object query for module objects of given type which are included in the installation package.
            <paramref name="objectType"/> must be one of those enumerated in <see cref="P:CMS.Modules.ModulePackageBuilder.IncludedObjectTypes"/>, otherwise returns null.
            </summary>
            <param name="objectType">Type of object to return object query for</param>
            <returns>Object query for given object type, or null.</returns>
            <seealso cref="P:CMS.Modules.ModulePackageBuilder.IncludedObjectTypes"/>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.GetModuleFiles">
            <summary>
            Gets List of relative paths to files that will be included in the installation package.
            </summary>
            <returns>List of relative paths to files that will be included in the installation package.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.GetModuleMetadata">
            <summary>
            Gets module's package metadata.
            </summary>
            <returns>Module's package metadata.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.CreateNuSpecBuilder">
            <summary>
            Creates and initializes NuSpecBuilder accordingly to the exported module.
            </summary>
            <returns>Initializes NuSpecBuilder instance.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.AddModuleFiles(CMS.Modules.NuSpecBuilder)">
            <summary>
            Adds all module files to the NuSpec manifest.
            </summary>
            <param name="nuSpecBuilder">NuSpec manifest builder that is used.</param>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.AddMetaFiles(CMS.Modules.NuSpecBuilder)">
            <summary>
            Adds module meta data files to the NuSpec manifest.
            </summary>
            <param name="nuSpecBuilder">NuSpec manifest builder that is used.</param>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.AddPackageTools(CMS.Modules.NuSpecBuilder)">
            <summary>
            Adds package tools to the NuSpec manifest.
            </summary>
            <param name="nuSpecBuilder">NuSpec manifest builder that is used.</param>
        </member>
        <member name="M:CMS.Modules.ModulePackageBuilder.CleanupTempFiles">
            <summary>
            Cleans up all possible temporary files after building a module package.
            </summary>
        </member>
        <member name="T:CMS.Modules.NuGetPackages.ModulePackageMetadata">
            <summary>
            Provides module's metadata.
            </summary>
        </member>
        <member name="P:CMS.Modules.NuGetPackages.ModulePackageMetadata.Id">
            <summary>
            Gets or sets identifier of the package.
            </summary>
        </member>
        <member name="P:CMS.Modules.NuGetPackages.ModulePackageMetadata.Title">
            <summary>
            Gets or sets title of the package.
            </summary>
        </member>
        <member name="P:CMS.Modules.NuGetPackages.ModulePackageMetadata.Version">
            <summary>
            Gets or sets version of the package. Format like "1.1.1"
            </summary>
        </member>
        <member name="P:CMS.Modules.NuGetPackages.ModulePackageMetadata.Authors">
            <summary>
            Gets or sets authors of the package, comma-separated.
            </summary>
        </member>
        <member name="P:CMS.Modules.NuGetPackages.ModulePackageMetadata.Description">
            <summary>
            Gets or sets description of the package.
            </summary>
        </member>
        <member name="T:CMS.Modules.ModulePackagingEvents">
            <summary>
            Events for installable module package creation process. Allows for customization of the process.
            </summary>
            <seealso cref="T:CMS.Modules.ModulePackageBuilder"/>
            <seealso cref="T:CMS.Modules.NuSpecBuilder"/>
        </member>
        <member name="P:CMS.Modules.ModulePackagingEvents.Instance">
            <summary>
            Gets the <see cref="T:CMS.Modules.ModulePackagingEvents"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulePackagingEvents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Modules.ModulePackagingEvents"/> class.
            </summary>
        </member>
        <member name="F:CMS.Modules.ModulePackagingEvents.BuildNuSpecManifest">
            <summary>
            An event raised upon building NuSpec manifest. The before phase allows for modification of <see cref="P:CMS.Modules.BuildNuSpecManifestEventArgs.NuSpecBuilder"/>,
            the after phase allows for modification of resulting <see cref="P:CMS.Modules.BuildNuSpecManifestEventArgs.Manifest"/>.
            </summary>
            <seealso cref="M:CMS.Modules.NuSpecBuilder.BuildToStream(System.IO.Stream)"/>
        </member>
        <member name="T:CMS.Modules.ModulePathRuleResolver">
            <summary>
            Allows you to resolve module path rule.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePathRuleResolver.PathRule">
            <summary>
            Gets path rule that is being resolved.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePathRuleResolver.ResolvedFiles">
            <summary>
            List of files that match the <see cref="P:CMS.Modules.ModulePathRuleResolver.PathRule"/>.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolver.#ctor(CMS.Modules.ModuleFilePathRule,CMS.Modules.ModulePathRuleResolverContext)">
            <summary>
            Creates new ModulePathRuleResolver for the given path rule.
            </summary>
            <param name="pathRule">Path rule that is being resolved.</param>
            <param name="context">Resolver's context.</param>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolver.GetResolvedFiles">
            <summary>
            Gets list of files that match the ModuleFilePathRule.
            </summary>
            <returns>List of files that match the ModuleFilePathRule.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolver.ResolveTargetPath(System.String)">
            <summary>
            Resolves target path of the given file according to the file's source path, physical path and target path.
            </summary>
            <param name="file">File's physical path.</param>
            <returns>File's target path.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolver.ResolvePath(System.String)">
            <summary>
            Resolves given path replacing the substitutions in it.
            </summary>
            <param name="path">Path that can contain substitutions.</param>
            <returns>Resolved path.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolver.GetDirectoryFiles(System.String)">
            <summary>
            Gets list of all files in directory and its subdirectories.
            </summary>
            <param name="path">Directory path.</param>
            <returns>List of all files in directory and its subdirectories.</returns>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolver.FileExists(System.String)">
            <summary>
            Checks if file with given path exists.
            </summary>
            <param name="path">Physical file path.</param>
            <returns>True if file exists, false otherwise.</returns>
        </member>
        <member name="T:CMS.Modules.ModulePathRuleResolverContext">
            <summary>
            Specifies module path rule resolver's context.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePathRuleResolverContext.RootPath">
            <summary>
            Gets root physical path. All paths are relative to this path.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePathRuleResolverContext.ModuleName">
            <summary>
            Gets module name that is used for replacing substitutions in paths. This overrides the original module's name.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePathRuleResolverContext.Module">
            <summary>
            Gets the module in whose context the path rule is resolved.
            </summary>
        </member>
        <member name="P:CMS.Modules.ModulePathRuleResolverContext.ExcludedFileExtensions">
            <summary>
            Gets list of file extensions that are excluded when resolving path rule in format '.ext'.
            </summary>
        </member>
        <member name="M:CMS.Modules.ModulePathRuleResolverContext.#ctor(System.String,CMS.Modules.ResourceInfo,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new ModulePathRuleResolverContext.
            </summary>
            <param name="rootPath">Root physical path. All paths are relative to this path.</param>
            <param name="module">The module in whose context the path rule is resolved.</param>
            <param name="moduleName">Module name that is used for replacing substitutions in paths. This overrides the original module's name.</param>
            <param name="excludedFileExtensions">List of file extensions that are excluded when resolving path rule in format '.ext'.</param>
        </member>
        <member name="T:CMS.Modules.NuGetPackageBuilder">
            <summary>
            Allows you to create a NuGet package based on NuSpec manifest.
            </summary>
            <remarks>
            If you want to get familiar with how to use <see cref="N:NuGet.Packaging"/>, see the NuGet source.
            </remarks>
            <seealso cref="T:CMS.Modules.NuSpecBuilder"/>
        </member>
        <member name="M:CMS.Modules.NuGetPackageBuilder.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new NuGet package builder.
            </summary>
            <param name="nuSpecStream">Stream with NuSpec manifest.</param>
            <param name="basePath">Base path used for package creation (see <see cref="N:NuGet.Packaging"/> constructor, where it is being used).</param>
        </member>
        <member name="M:CMS.Modules.NuGetPackageBuilder.BuildToStream(System.IO.Stream)">
            <summary>
            Builds NuGet package to given stream.
            </summary>
            <param name="stream">Stream to be used.</param>
        </member>
        <member name="T:CMS.Modules.NuSpecBuilder">
            <summary>
            Builder class for a NuSpec manifest. Allows for configuration of a NuSpec manifest which can be used for NuGet package creation.
            </summary>
            <remarks>http://docs.nuget.org/docs/reference/nuspec-reference</remarks>
        </member>
        <member name="P:CMS.Modules.NuSpecBuilder.ReadmeFilePath">
            <summary>
            Gets or sets a relative path to the package's readme file
            If null, no readme is included
            </summary>
        </member>
        <member name="P:CMS.Modules.NuSpecBuilder.MinimumManifestVersion">
            <summary>
            Gets or sets the minimum NuSpec manifest version. The actual version is determined
            at the time of build.
            Default version is 1.
            </summary>
        </member>
        <member name="P:CMS.Modules.NuSpecBuilder.MinimumClientVersion">
            <summary>
            Gets or sets the minimum version of NuGet required when installing the package. Optional.
            </summary>
        </member>
        <member name="P:CMS.Modules.NuSpecBuilder.ModulePackageMetadata">
            <summary>
            Gets module's metadata.
            </summary>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.#ctor(CMS.Modules.NuGetPackages.ModulePackageMetadata)">
            <summary>
            Initializes new NuSpecBuilder.
            </summary>
            <param name="modulePackageMetadata">Module's metadata.</param>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.AddLibrary(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a library to the manifest.
            The library can be either framework specific, or not.
            </summary>
            <param name="src">Source path to the library, folder with libraries, or pattern.</param>
            <param name="dst">Relative destination path of the library within the package's lib folder. Null or empty string means root.</param>
            <param name="exclude">Excluded files from src (when src is not a single library)</param>
            <param name="targetFramework">Target framework for the library (i.e. "net40", "net45").</param>
            <remarks>http://docs.nuget.org/docs/reference/nuspec-reference#Set_Of_DLLs</remarks>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.AddContent(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a content to the manifest.
            </summary>
            <param name="src">Source path to the content file, folder with content files, or pattern.</param>
            <param name="dst">Relative destination path of the content within the package's content folder. Null or empty string means root.</param>
            <param name="exclude">Excluded files from src (when src is not a single file)</param>
            <param name="targetFramework">Target framework for the content (i.e. "net40", "net45"). Supported in NuGet version 2.0 and above.</param>
            <remarks>http://docs.nuget.org/docs/reference/nuspec-reference#Content_Files</remarks>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.AddTools(System.String,System.String,System.String,System.String)">
            <summary>
            Adds tools to the manifest.
            </summary>
            <param name="src">Source path to the tool file, folder with tool files, or pattern.</param>
            <param name="dst">Relative destination path of the files within the package's tools folder. Null or empty string means root.</param>
            <param name="exclude">Excluded files from src (when src is not a single file)</param>
            <param name="targetFramework">Target framework for the content (i.e. "net40", "net45"). Supported in NuGet version 2.0 and above.</param>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.BuildToStream(System.IO.Stream)">
            <summary>
            Builds NuSpec manifest to <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream for writing a NuSpec manifest.</param>
            <seealso cref="F:CMS.Modules.ModulePackagingEvents.BuildNuSpecManifest"/>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.BuildManifest">
            <summary>
            Builds the manifest (metadata, files).
            </summary>
            <returns>Manifest built from current properties.</returns>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.AddManifestFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds file or files to the manifest.
            </summary>
            <param name="src">Source path to the file, folder with tool files, or pattern.</param>
            <param name="dst">Relative destination path of the files within the package's folder specified by <paramref name="packageFolder"/>. Null or empty string means root.</param>
            <param name="packageFolder">Name of the package folder. <paramref name="dst"/> is relative to specified folder.</param>
            <param name="exclude">Excluded files from src (when src is not a single file)</param>
            <param name="targetFramework">Target framework for the content (i.e. "net40", "net45"). Supported in NuGet version 2.0 and above.</param>
        </member>
        <member name="M:CMS.Modules.NuSpecBuilder.BuildTargetPath(System.String,System.String,System.String)">
            <summary>
            Builds target path based on folder ("lib", "content", etc.), destination and target framework (optional).
            </summary>
            <param name="folder">Folder within the package.</param>
            <param name="dst">Relative destination path within folder (or target framework folder).</param>
            <param name="targetFramework">Target framework (optional).</param>
            <returns>Target path built from given arguments.</returns>
        </member>
        <member name="T:CMS.Modules.IPermissionNameInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.PermissionNameInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Modules.IRolePermissionInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.RolePermissionInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Modules.IRolePermissionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.RolePermissionInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.RolePermissionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IRolePermissionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.RolePermissionInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.RolePermissionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IRolePermissionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.RolePermissionInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
        </member>
        <member name="M:CMS.Modules.IRolePermissionInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.RolePermissionInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
        </member>
        <member name="T:CMS.Modules.PermissionNameInfo">
            <summary>
            Permission info data container.
            </summary>
        </member>
        <member name="F:CMS.Modules.PermissionNameInfo.OBJECT_TYPE_RESOURCE">
            <summary>
            Object type for resource
            </summary>
        </member>
        <member name="F:CMS.Modules.PermissionNameInfo.OBJECT_TYPE_CLASS">
            <summary>
            Object type for class
            </summary>
        </member>
        <member name="F:CMS.Modules.PermissionNameInfo.TYPEINFORESOURCE">
            <summary>
            Resource type information.
            </summary>
        </member>
        <member name="F:CMS.Modules.PermissionNameInfo.TYPEINFOCLASS">
            <summary>
            Class type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionId">
            <summary>
            Gets or sets the permission ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionDisplayName">
            <summary>
            Gets or sets the permission display name.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionName">
            <summary>
            Gets or sets the permission name.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.ClassId">
            <summary>
            Gets or sets the class ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.ResourceId">
            <summary>
            Gets or sets the resource ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionGUID">
            <summary>
            Permission GUID.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionDescription">
            <summary>
            The Permission Description.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionDisplayInMatrix">
            <summary>
            Indicates whether the permission should be displayed in the permission matrix as well.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionOrder">
            <summary>
            Gets or sets permission order.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.PermissionEditableByGlobalAdmin">
            <summary>
            Indicates whether the permission can be assigned only by global administrators.
            </summary>
        </member>
        <member name="P:CMS.Modules.PermissionNameInfo.TypeInfo">
            <summary>
            Type info.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfo.#ctor">
            <summary>
            Constructor, creates an empty PermissionNameInfo structure.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates an empty PermissionNameInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="T:CMS.Modules.PermissionNameInfoProvider">
            <summary>
            Permission info data container class.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNames">
            <summary>
            Returns all permission names.
            </summary>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfoByGUID(System.Guid)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfoForResource(System.String,System.String,System.String)">
            <summary>
            Returns the permission name info object for the resource.
            </summary>
            <param name="resourceName">Name of the resource which permission depends to</param>
            <param name="permissionName">Name of the permission to retrieve</param>
            <param name="siteName">Site which the permission depends to</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfoForClass(System.String,System.String,System.String)">
            <summary>
            Returns the permission name info object for the class.
            </summary>
            <param name="className">Name of the class which permission depends to</param>
            <param name="permissionName">Name of the permission to retrieve</param>
            <param name="siteName">Site which the permission depends to</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfo(System.String,System.String,System.String)">
            <summary>
            Returns the PermissionNameInfo object by the given parameters.
            </summary>
            <param name="permissionName">Permission name to retrieve</param>
            <param name="resourceName">Resource name (null when Class permission)</param>
            <param name="className">Class name (null when Resource permission)</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfo(System.Int32)">
            <summary>
            Returns the permission name info object.
            </summary>
            <param name="permissionId">Id of the permission to retrieve</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.SetPermissionInfo(CMS.Modules.PermissionNameInfo)">
            <summary>
            Sets the specified permission data.
            </summary>
            <param name="permissionObj">New permission info data</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.DeletePermissionInfo(CMS.Modules.PermissionNameInfo)">
            <summary>
            Deletes the specified permission.
            </summary>
            <param name="pni">Permission object</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.DeletePermissionInfo(System.Int32)">
            <summary>
            Deletes the specified permission.
            </summary>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetResourcePermissions(System.Int32)">
            <summary>
            Gets the DataSet of the resource permissions.
            </summary>
            <param name="resourceId">Resource ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetClassPermissions(System.Int32)">
            <summary>
            Gets the DataSet of the class permissions.
            </summary>
            <param name="classId">Class ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissions(System.Int32,System.Int32)">
            <summary>
            Gets the DataSet of the permissions for specific resource and role.
            </summary>
            <param name="resourceId">ID of the resource the permissions are included in</param>
            <param name="roleId">ID of the role which is granted with requested permissions</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionsWhereCondition(System.Int32,System.Int32)">
            <summary>
            Gets the where condition to limit permissions for specific resource and role.
            </summary>
            <param name="resourceId">ID of the resource the permissions are included in</param>
            <param name="roleId">ID of the role which is granted with requested permissions</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetParentWhereCondition(System.Int32)">
            <summary>
            Gets the where condition to limit the objects to specific parent.
            </summary>
            <param name="objectParentId">Object parent ID to filter by</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetBindingWhereCondition(System.String,System.Object[])">
            <summary>
            Gets the where condition to limit the objects to specific binding dependencies. Use this method for 3 and more-keys bindings.
            </summary>
            <param name="bindingType">Binding object type name</param>
            <param name="dependencies">Pairs of binding dependencies to filter by (first variable in each pair - dependency object type, second variable in each pair - dependency value)</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetBindingWhereCondition(System.String,System.Int32)">
            <summary>
            Gets the where condition to limit the objects to specific binding dependency. Use this method only for 2-keys bindings.
            </summary>
            <param name="bindingType">Binding object type name</param>
            <param name="bindingDependencyId">Binding dependency ID to filter by</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.CreateDefaultClassPermissions(System.Int32)">
            <summary>
            Creates the default.
            </summary>
            <param name="classId">Class ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.CreateDefaultCustomTablePermissions(System.Int32)">
            <summary>
            Creates the default custom table permissions.
            </summary>
            <param name="classId">Class ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.CreateClassPermission(System.Int32,System.String,System.String)">
            <summary>
            Sets default permission for the new class.
            </summary>
            <param name="classId">Class Id</param>
            <param name="permissionName">Permission name</param>
            <param name="permissionDisplayName">Permission display name</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.CreateClassPermission(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Sets default permission for the new class.
            </summary>
            <param name="classId">Class Id</param>
            <param name="permissionName">Permission name</param>
            <param name="permissionDisplayName">Permission display name</param>
            <param name="permissionOrder">Permission order</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.CreateClassPermission(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Sets default permission for the new class.
            </summary>
            <param name="classId">Class Id</param>
            <param name="permissionName">Permission name</param>
            <param name="permissionDisplayName">Permission display name</param>
            <param name="permissionOrder">Permission order</param>
            <param name="permissionDescription">Permission description</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.DeleteResoucePermissions(System.Int32)">
            <summary>
            Deletes all resource permissions.
            </summary>
            <param name="resourceId">Resource ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.DeleteClassPermissions(System.Int32)">
            <summary>
            Deletes all class permissions.
            </summary>
            <param name="classId">Class ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.MovePermissionUp(System.Int32)">
            <summary>
            Moves specified permission up.
            </summary>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.MovePermissionDown(System.Int32)">
            <summary>
            Moves specified permission down.
            </summary>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetLastPermissionOrder(System.Int32,System.Int32)">
            <summary>
            Returns order of the last permission.
            </summary>
            <param name="classId">ID of the class to get last permission order for</param>
            <param name="resourceId">ID of the resource to get last permission order for</param>
            <returns>Number representing the last permission order for the class or resource.</returns>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfoForResourceInternal(System.String,System.String,System.String)">
            <summary>
            Returns the permission name info object for the resource.
            </summary>
            <param name="resourceName">Name of the resource which permission depends to</param>
            <param name="permissionName">Name of the permission to retrieve</param>
            <param name="siteName">Site which the permission depends to</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfoForClassInternal(System.String,System.String,System.String)">
            <summary>
            Returns the permission name info object for the class.
            </summary>
            <param name="className">Name of the class which permission depends to</param>
            <param name="permissionName">Name of the permission to retrieve</param>
            <param name="siteName">Site which the permission depends to</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionNameInfoInternal(System.String,System.String,System.String)">
            <summary>
            Returns the PermissionNameInfo object by the given parameters.
            </summary>
            <param name="permissionName">Permission name to retrieve</param>
            <param name="resourceName">Resource name (null when Class permission)</param>
            <param name="className">Class name (null when Resource permission)</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.SetInfo(CMS.Modules.PermissionNameInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.DeleteInfo(CMS.Modules.PermissionNameInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetResourcePermissionsInternal(System.Int32)">
            <summary>
            Gets the DataSet of the resource permissions.
            </summary>
            <param name="resourceId">Resource ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetClassPermissionsInternal(System.Int32)">
            <summary>
            Gets the DataSet of the class permissions.
            </summary>
            <param name="classId">Class ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.GetPermissionsInternal(System.Int32,System.Int32)">
            <summary>
            Gets the DataSet of the permissions for specific resource and role.
            </summary>
            <param name="resourceId">ID of the resource the permissions are included in</param>
            <param name="roleId">ID of the role which is granted with requested permissions</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.MovePermissionUpInternal(System.Int32)">
            <summary>
            Moves specified permission up.
            </summary>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.MovePermissionDownInternal(System.Int32)">
            <summary>
            Moves specified permission down.
            </summary>
            <param name="permissionId">Permission ID</param>
        </member>
        <member name="M:CMS.Modules.PermissionNameInfoProvider.EnsureClassPermissionOrder(CMS.Modules.PermissionNameInfo)">
            <summary>
            Method to ensure correct class default perrmissions order
            </summary>
            <param name="permission">Permission which order should be ensured</param>
        </member>
        <member name="T:CMS.Modules.RolePermissionInfo">
            <summary>
            RolePermissionInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.RolePermissionInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.RolePermissionInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.RolePermissionInfo.PermissionID">
            <summary>
            Permission ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.RolePermissionInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfo.#ctor">
            <summary>
            Constructor - Creates an empty RolePermissionInfo object.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new RolePermissionInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfo.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Converts PermissionEnum to permission codename which will be checked when CheckPermission() is called. 
            </summary>
            <param name="permission">Permission to convert to string</param>
        </member>
        <member name="T:CMS.Modules.RolePermissionInfoProvider">
            <summary>
            Class providing RolePermissionInfo management.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.GetRolePermissions">
            <summary>
            Returns all role permissions.
            </summary>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.RolePermissionInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.RolePermissionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.RolePermissionInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.RolePermissionInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.GetRolePermissionInfo(System.Int32,System.Int32)">
            <summary>
            Returns the RolePermissionInfo structure for the specified rolePermission.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.SetRolePermissionInfo(CMS.Modules.RolePermissionInfo)">
            <summary>
            Sets (updates or inserts) specified rolePermission.
            </summary>
            <param name="rolePermission">RolePermission to set</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.RolePermissionInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.SetRolePermissionInfo(System.Int32,System.Int32)">
            <summary>
            Sets (updates or inserts) specified rolePermission.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.DeleteRolePermissionInfo(CMS.Modules.RolePermissionInfo)">
            <summary>
            Deletes specified rolePermission.
            </summary>
            <param name="infoObj">RolePermission object</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.RolePermissionInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="permissionId">Permission ID.</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.DeleteRolePermissionInfo(System.Int32,System.Int32)">
            <summary>
            Deletes specified rolePermission.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="M:CMS.Modules.RolePermissionInfoProvider.GetRolePermissionInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the RolePermissionInfo structure for the specified rolePermission.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="permissionId">PermissionID</param>
        </member>
        <member name="T:CMS.Modules.IResourceLibraryInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.ResourceLibraryInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Modules.ResourceLibraryInfo">
            <summary>
            ResourceLibraryInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceLibraryInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.ResourceLibraryInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceLibraryInfo.ResourceLibraryID">
            <summary>
            Resource library ID
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceLibraryInfo.ResourceLibraryResourceID">
            <summary>
            Resource library resource ID
            </summary>
        </member>
        <member name="P:CMS.Modules.ResourceLibraryInfo.ResourceLibraryPath">
            <summary>
            Gets or sets the physical path to a dll library within the application directory. 
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfo.#ctor">
            <summary>
            Constructor - Creates an empty ResourceLibraryInfo object.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ResourceLibraryInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Modules.ResourceLibraryInfoProvider">
            <summary>
            Class providing ResourceLibraryInfo management.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.GetResourceLibraries">
            <summary>
            Returns a query for all the ResourceLibraryInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.GetResourceLibraryInfo(System.Int32)">
            <summary>
            Returns ResourceLibraryInfo with specified ID.
            </summary>
            <param name="id">ResourceLibraryInfo ID</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.SetResourceLibraryInfo(CMS.Modules.ResourceLibraryInfo)">
            <summary>
            Sets (updates or inserts) specified ResourceLibraryInfo after verifying it is valid.
            </summary>
            <param name="infoObj">ResourceLibraryInfo to be set</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.DeleteResourceLibraryInfo(CMS.Modules.ResourceLibraryInfo)">
            <summary>
            Deletes specified ResourceLibraryInfo.
            </summary>
            <param name="infoObj">ResourceLibraryInfo to be deleted</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.DeleteResourceLibraryInfo(System.Int32)">
            <summary>
            Deletes ResourceLibraryInfo with specified ID.
            </summary>
            <param name="id">ResourceLibraryInfo ID</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.ValidateLibraryUniqueness(System.Int32,System.String)">
            <summary>
            Returns true when there is no <see cref="T:CMS.Modules.ResourceLibraryInfo"/> with given <paramref name="pathToLibrary"/> 
            referenced by <see cref="T:CMS.Modules.ResourceInfo"/> with <paramref name="resourceId"/>.
            </summary>
            <remarks>
            The <paramref name="pathToLibrary"/> is internally normalized with <see cref="M:CMS.Helpers.URLHelper.UnMapPath(System.String)"/> 
            method to the form of relative path.
            </remarks>
            <param name="resourceId"><see cref="T:CMS.Modules.ResourceInfo"/> id.</param>
            <param name="pathToLibrary">Relative path to library.</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.SetInfo(CMS.Modules.ResourceLibraryInfo)">
            <summary>
            Saves given info object to Database after verifying it is valid.
            </summary>
            <param name="info">Info object to be saved to DB</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.IsImplicitlyIncludedLibrary(CMS.Modules.ResourceLibraryInfo,CMS.Modules.ResourceInfo)">
            <summary>
            Returns true, if the <paramref name="libraryInfo"/> is implicitly included in <paramref name="resourceInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.ValidateLibraryUniquenessInternal(System.Int32,System.String,System.Int32)">
            <summary>
            Returns true when there is no <see cref="T:CMS.Modules.ResourceLibraryInfo"/> with different <paramref name="resourceLibraryId"/> with given <paramref name="pathToLibrary"/> 
            referenced by <see cref="T:CMS.Modules.ResourceInfo"/> with given <paramref name="resourceId"/>.
            </summary>
            <remarks>
            The <paramref name="pathToLibrary"/> is internally normalized with <see cref="M:CMS.Helpers.URLHelper.UnMapPath(System.String)"/> 
            method to the form of relative path.
            </remarks>
            <param name="resourceId"><see cref="T:CMS.Modules.ResourceInfo"/> id.</param>
            <param name="pathToLibrary">Relative path to library.</param>
            <param name="resourceLibraryId"><see cref="T:CMS.Modules.ResourceLibraryInfo"/> id.</param>
        </member>
        <member name="M:CMS.Modules.ResourceLibraryInfoProvider.NormalizeResourceLibraryPath(System.String)">
            <summary>
            Normalizes path to relative form.
            </summary>
            <param name="path">Path to normalize.</param>
        </member>
        <member name="T:CMS.Modules.ApplicationUrlHelper">
            <summary>
            Provides functionality for working with application URL.
            </summary>
        </member>
        <member name="F:CMS.Modules.ApplicationUrlHelper.DEFAULT_UI_PAGE_PATH">
            <summary>
            Basic UI Element Page path
            </summary>
        </member>
        <member name="F:CMS.Modules.ApplicationUrlHelper.DEFAULT_UI_CONTROL_PAGE_PATH">
            <summary>
            Blank page path for controls
            </summary>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetPageEditLink(System.Int32)">
            <summary>
            Get the direct link for page identified by given node ID.
            </summary>
            <param name="nodeId">Node ID.</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetPageEditLink(System.Int32,System.String)">
            <summary>
            Get the direct link for page identified by given node ID.
            </summary>
            <param name="nodeId">Node ID.</param>
            <param name="culture">Culture name.</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetApplicationUrl(System.String,System.String,System.String)">
            <summary>
            Returns application URL for application specified by module name and element name
            </summary>
            <param name="moduleName">Module name</param>
            <param name="elementName">Element name</param>
            <param name="customQueryString">Custom querystring value</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetApplicationUrl(CMS.Modules.UIElementInfo,System.String)">
            <summary>
            Returns application URL for application specified by UI element object
            </summary>
            <param name="ui">UI element info</param>
            <param name="customQueryString">Custom querystring value</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetApplicationHash(System.String,System.String)">
            <summary>
            Gets the application hash (starting with #)
            </summary>
            <param name="moduleName">Module name</param>
            <param name="elementName">Element name</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetApplicationHash(CMS.Modules.UIElementInfo)">
            <summary>
            Gets the application hash (starting with #)
            </summary>
            <param name="ui">UI element info</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementDialogUrl(CMS.Modules.UIElementInfo,System.Int32,System.String)">
            <summary>
            Returns dialog UI element URL, appends automatically Dialog and Hash parameters.
            </summary>
            <param name="ui">Target element</param>
            <param name="objectId">Object ID to append to query</param>
            <param name="additionalQuery">Additional query for URL</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.AppendDialogHash(System.String)">
            <summary>
            Appends hash to URL. Used in selectors (no need for dialog mode).
            </summary>
            <param name="url">URL to hash is added</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementUrl">
            <summary>
            Returns basic UIPage with no parameters. Use only in special cases, in most cases use GetElementUrl with parameters.
            </summary>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.ResolveUIUrl(System.String,System.String)">
            <summary>
            Resolves the UI URL. Keeps the URL in case the user is authenticated, uses the secured /cms/ prefix to ensure the authentication for already authenticated user.
            </summary>
            <param name="url">URL to resolve, it must start with ~/</param>
            <param name="prefix">URL prefix</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.ResolveUIUrl(System.String)">
            <summary>
            Resolves the UI URL. Keeps the URL in case the user is authenticated, uses the secured /cms/ prefix to ensure the authentication for already authenticated user.
            </summary>
            <param name="url">URL to resolve, it must start with ~/</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.ResolveDialogUrl(System.String)">
            <summary>
            Resolves the dialog URL. Keeps the URL in case the user is authenticated, uses the secured /cms/dialogs/ prefix to ensure the authentication for already authenticated user.
            </summary>
            <param name="url">URL to resolve, it must start with ~/</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementDialogUrl(System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns dialog UI element URL, appends automatically Dialog and Hash parameters.
            </summary>
            <param name="moduleName">Element's module name</param>
            <param name="elementName">Element's name</param>
            <param name="objectId">Object ID to append to query</param>
            <param name="additionalQuery">Additional query for URL</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetResourceName(System.Int32)">
            <summary>
            Returns resource name for given resource ID.
            </summary>
            <param name="resourceID">Resource ID</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementUrl(CMS.Modules.UIElementInfo)">
            <summary>
            Returns element's URL based on elements type
            </summary>
            <param name="ui">UI element info object</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementUrl(System.String,System.String)">
            <summary>
            Returns element's URL based on element's type
            </summary>
            <param name="moduleName">Element's module</param>
            <param name="elementName">Element's name</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementUrl(CMS.Modules.UIElementInfo,System.Boolean,System.Int32,System.String)">
            <summary>
            Returns element's URL
            </summary>
            <param name="ui">UI element info.</param>
            <param name="displayTitle">Indicates whether append display title to result URL.</param>
            <param name="objectId">Indicates whether append object ID to URL.</param>
            <param name="additionalQuery">Additional query to append to URL</param>
        </member>
        <member name="M:CMS.Modules.ApplicationUrlHelper.GetElementUrl(System.String,System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Returns element's URL
            </summary>
            <param name="moduleName">Module name</param>
            <param name="elementName">Element name</param>
            <param name="displayTitle">Indicates whether append display title to result URL.</param>
            <param name="objectId">Indicates whether append object ID to URL.</param>
            <param name="additionalQuery">Additional query to append to URL</param>
        </member>
        <member name="F:CMS.Modules.ApplicationUrlHelper.COLLAPSIBLE_EMPTY_PARENT_ELEMENT_URL">
            <summary>
            Represents <see cref="P:CMS.Modules.UIElementInfo.ElementTargetURL"/> of a dummy <see cref="T:CMS.Modules.UIElementInfo"/> of type <see cref="F:CMS.Modules.UIElementTypeEnum.Url"/>.
            This kind of element is used as parent node in collapsible tree without any content.
            It's used for grouping <see cref="T:CMS.Modules.UIElementInfo"/>s in a tree.
            </summary>
        </member>
        <member name="T:CMS.Modules.ElementAccessCheckResult">
            <summary>
            Encapsulates the result of <see cref="P:CMS.Modules.ElementAccessCheckResult.UIElementInfo"/> access check.
            </summary>
        </member>
        <member name="P:CMS.Modules.ElementAccessCheckResult.ElementAccessCheckStatus">
            <summary>
            Element access check status.
            </summary>
        </member>
        <member name="P:CMS.Modules.ElementAccessCheckResult.UIElementInfo">
            <summary>
            <see cref="P:CMS.Modules.ElementAccessCheckResult.UIElementInfo"/> for which access check was made.
            </summary>
        </member>
        <member name="M:CMS.Modules.ElementAccessCheckResult.#ctor(CMS.Modules.ElementAccessCheckStatus,CMS.Modules.UIElementInfo)">
            <summary>
            Creates access check result for given <see cref="P:CMS.Modules.ElementAccessCheckResult.UIElementInfo"/>.
            </summary>
            <param name="elementAccessCheckStatus">Status of element access check</param>
            <param name="uiElementInfo"><see cref="P:CMS.Modules.ElementAccessCheckResult.UIElementInfo"/> for which access check was made</param>
        </member>
        <member name="T:CMS.Modules.ElementAccessCheckStatus">
            <summary>
            Element access check status.
            </summary>
        </member>
        <member name="F:CMS.Modules.ElementAccessCheckStatus.NoRestrictions">
            <summary>
            No restrictions
            </summary>
        </member>
        <member name="F:CMS.Modules.ElementAccessCheckStatus.AccessConditionFailed">
            <summary>
            Element access condition failed
            </summary>
        </member>
        <member name="F:CMS.Modules.ElementAccessCheckStatus.ReadPermissionFailed">
            <summary>
            Automatic read permission check failed
            </summary>
        </member>
        <member name="F:CMS.Modules.ElementAccessCheckStatus.UIElementAccessFailed">
            <summary>
            UI element permission failed
            </summary>
        </member>
        <member name="F:CMS.Modules.ElementAccessCheckStatus.GlobalApplicationAccessFailed">
            <summary>
            Global application check failed
            </summary>
        </member>
        <member name="T:CMS.Modules.HelpTopicInfo">
            <summary>
            HelpTopicInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.HelpTopicInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.HelpTopicInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicID">
            <summary>
            Help topic ID
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicUIElementID">
            <summary>
            Help topic UI element ID
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicName">
            <summary>
            Help topic name
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicLink">
            <summary>
            Help topic link
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicVisibilityCondition">
            <summary>
            Sets a macro condition that must be fulfilled for the help topic to be visible in the system's user interface..
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicOrder">
            <summary>
            Help topic order.
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicGUID">
            <summary>
            Help topic GUID.
            </summary>
        </member>
        <member name="P:CMS.Modules.HelpTopicInfo.HelpTopicLastModified">
            <summary>
            Help topic last modified
            </summary>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfo.#ctor">
            <summary>
            Constructor - Creates an empty HelpTopicInfo object.
            </summary>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new HelpTopicInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Modules.HelpTopicInfoProvider">
            <summary>
            Class providing HelpTopicInfo management.
            </summary>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfoProvider.GetHelpTopics">
            <summary>
            Returns a query for all the HelpTopicInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfoProvider.GetHelpTopicInfo(System.Int32)">
            <summary>
            Returns HelpTopicInfo with specified ID.
            </summary>
            <param name="id">HelpTopicInfo ID</param>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfoProvider.SetHelpTopicInfo(CMS.Modules.HelpTopicInfo)">
            <summary>
            Sets (updates or inserts) specified HelpTopicInfo.
            </summary>
            <param name="infoObj">HelpTopicInfo to be set</param>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfoProvider.DeleteHelpTopicInfo(CMS.Modules.HelpTopicInfo)">
            <summary>
            Deletes specified HelpTopicInfo.
            </summary>
            <param name="infoObj">HelpTopicInfo to be deleted</param>
        </member>
        <member name="M:CMS.Modules.HelpTopicInfoProvider.DeleteHelpTopicInfo(System.Int32)">
            <summary>
            Deletes HelpTopicInfo with specified ID.
            </summary>
            <param name="id">HelpTopicInfo ID</param>
        </member>
        <member name="T:CMS.Modules.IHelpTopicInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.HelpTopicInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Modules.IRoleApplicationInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.RoleApplicationInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Modules.IRoleApplicationInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.RoleApplicationInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IRoleApplicationInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.RoleApplicationInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IRoleApplicationInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="M:CMS.Modules.IRoleApplicationInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="T:CMS.Modules.IRoleUIElementInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.RoleUIElementInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Modules.IRoleUIElementInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.RoleUIElementInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IRoleUIElementInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.RoleUIElementInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.IRoleUIElementInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="M:CMS.Modules.IRoleUIElementInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="T:CMS.Modules.IUIElementInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Modules.UIElementInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Modules.RoleApplicationInfo">
            <summary>
            RoleApplicationInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.RoleApplicationInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.RoleApplicationInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.RoleApplicationInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.Modules.RoleApplicationInfo.ElementID">
            <summary>
            Element ID.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfo.#ctor">
            <summary>
            Constructor - Creates an empty RoleApplicationInfo object.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new RoleApplicationInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Modules.RoleApplicationInfoProvider">
            <summary>
            Class providing RoleApplicationInfo management.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.GetRoleApplications">
            <summary>
            Returns all RoleApplicationInfo bindings.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.RoleApplicationInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.RoleApplicationInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.GetRoleApplicationInfo(System.Int32,System.Int32)">
            <summary>
            Returns RoleApplicationInfo binding structure.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="uielementId">UI element ID</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.SetRoleApplicationInfo(CMS.Modules.RoleApplicationInfo)">
            <summary>
            Sets specified RoleApplicationInfo.
            </summary>
            <param name="infoObj">RoleApplicationInfo to set</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.DeleteRoleApplicationInfo(CMS.Modules.RoleApplicationInfo)">
            <summary>
            Deletes specified RoleApplicationInfo binding.
            </summary>
            <param name="infoObj">RoleApplicationInfo object</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.RemoveRoleFromUIelement(System.Int32,System.Int32)">
            <summary>
            Deletes RoleApplicationInfo binding.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="uielementId">UI element ID</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.RoleApplicationInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.AddRoleToUIelement(System.Int32,System.Int32)">
            <summary>
            Creates RoleApplicationInfo binding. 
            </summary>
            <param name="roleId">Role ID</param>
            <param name="uielementId">UI element ID</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.GetRoleApplicationInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the RoleApplicationInfo structure.
            Null if binding doesn't exist.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="uielementId">UI element ID</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.RemoveRoleFromUIelementInternal(System.Int32,System.Int32)">
            <summary>
            Deletes RoleApplicationInfo binding.
            </summary>
            <param name="roleId">Role ID</param>
            <param name="uielementId">UI element ID</param>
        </member>
        <member name="M:CMS.Modules.RoleApplicationInfoProvider.AddRoleToUIelementInternal(System.Int32,System.Int32)">
            <summary>
            Creates RoleApplicationInfo binding. 
            </summary>
            <param name="roleId">Role ID</param>
            <param name="uielementId">UI element ID</param>
        </member>
        <member name="T:CMS.Modules.RoleUIElementInfo">
            <summary>
            RoleUIElementInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.RoleUIElementInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.RoleUIElementInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Modules.RoleUIElementInfo.ElementID">
            <summary>
            ID of the UIElement.
            </summary>
        </member>
        <member name="P:CMS.Modules.RoleUIElementInfo.RoleID">
            <summary>
            ID of the role.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfo.#ctor">
            <summary>
            Constructor - Creates an empty RoleUIElementInfo object.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new RoleUIElementInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Modules.RoleUIElementInfoProvider">
            <summary>
            Class providing RoleUIElementInfo management.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.GetRoleUIElements">
            <summary>
            Returns all role UI elements.
            </summary>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Modules.RoleUIElementInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding structure.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Modules.RoleUIElementInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.GetRoleUIElementInfo(System.Int32,System.Int32)">
            <summary>
            Returns the RoleUIElementInfo structure for the specified role UI element.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="elementId">ElementID</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.SetRoleUIElementInfo(CMS.Modules.RoleUIElementInfo)">
            <summary>
            Sets (updates or inserts) specified role UI element.
            </summary>
            <param name="infoObj">RoleUIElement to set</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.DeleteRoleUIElementInfo(CMS.Modules.RoleUIElementInfo)">
            <summary>
            Deletes specified role UI element.
            </summary>
            <param name="infoObj">RoleUIElement object</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.DeleteRoleUIElementInfo(System.Int32,System.Int32)">
            <summary>
            Deletes specified role UI Element.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="elementId">ElementID</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Modules.RoleUIElementInfo"/> binding.
            </summary>
            <param name="roleId">Role ID.</param>
            <param name="uiElementId">UI element ID.</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.AddRoleUIElementInfo(System.Int32,System.Int32)">
            <summary>
            Add specified role UI Element.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="elementId">ElementID</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.GetRoleUIElementInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the RoleUIElementInfo structure for the specified role UI element.
            </summary>
            <param name="roleId">RoleID</param>
            <param name="elementId">ElementID</param>
        </member>
        <member name="M:CMS.Modules.RoleUIElementInfoProvider.DeleteInfo(CMS.Modules.RoleUIElementInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="T:CMS.Modules.UIElementCachingHelper">
            <summary>
            Provides support for caching <see cref="T:CMS.Modules.UIElementInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementCachingHelper.GetElements(System.String,System.String,System.Func{CMS.DataEngine.InfoDataSet{CMS.Modules.UIElementInfo}},System.Int32)">
            <summary>
            Returns set of children UI elements.
            </summary>
            <param name="resourceName">Name of the resource (module)</param>
            <param name="elementName">CodeName of the UIElement</param>
            <param name="loadMethod">Method for element loading</param>
            <param name="cacheDurationInMinutes">Cache durability in minutes</param>
        </member>
        <member name="T:CMS.Modules.UIElementInfo">
            <summary>
            Permission info data container.
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementInfo.UIELEMENT_ADMINISTRATION_CODENAME">
            <summary>
            Code name of CMS Desk in UIElements tree
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementDescription">
            <summary>
            Description of the UI Element (used for example in the UI Guide).
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementRequiresGlobalAdminPriviligeLevel">
            <summary>
            Defines if UI Element can be accessed only by global administrator.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementProperties">
            <summary>
            UI element's properties
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementWebparts">
            <summary>
            UI element's webparts XML definition
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementVisibilityCondition">
            <summary>
            Gets or sets a macro condition that must be fulfilled for the UI element to be visible in the system's user interface.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementFeature">
            <summary>
            Element's feature.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementSize">
            <summary>
            Size of the UI Element when it is element of UIToolbar.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementPageTemplateID">
            <summary>
            Element's page template ID
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementType">
            <summary>
            Element's type (url, control, template, javascript,..)
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementIsCustom">
            <summary>
            Indicates if UI element is custom or system.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementName">
            <summary>
            UI Element code name (unique within the parent resource).
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementTargetURL">
            <summary>
            URL of the page which is displayed when UI element (menu item / tab) is clicked. 
            If element does not represent menu item / tab it is empty.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementFullName">
            <summary>
            Element full name.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementID">
            <summary>
            ID of the UIElement.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementGUID">
            <summary>
            Unique identifier of the UI element.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementIDPath">
            <summary>
            Path representing the tree path of the UI element.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementLevel">
            <summary>
            UI element level within the tree of all UI elements of the resource.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementLastModified">
            <summary>
            Data and time the element was last modified.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementDisplayName">
            <summary>
            UI Element display name.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementParentID">
            <summary>
            ID of the parent UI element.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementChildCount">
            <summary>
            Number of child UI elements.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementResourceID">
            <summary>
            ID of the resource the UI element belongs to.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementOrder">
            <summary>
            Order within the parent UI element.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementIconPath">
            <summary>
            Relative path to the UI element icon.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementIconClass">
            <summary>
            Element's font icon class name
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementCaption">
            <summary>
            UI element caption. If set, UI element represents menu item / tab.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementAccessCondition">
            <summary>
            Gets or sets a macro condition that must be fulfilled to view the UI element's content. 
            If the condition is false, the element displays an access denied error instead of the content. 
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementFromVersion">
            <summary>
            Version from which is UI element present in CMS.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementIsGlobalApplication">
            <summary>
            Indicates whether the element is available without an operating site.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ElementCheckModuleReadPermission">
            <summary>
            Indicates if the system should check the "read" permission for the module to which the current UI element is assigned.
            When the "read" permission doesn't exist for the current module, this setting has no effect.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.RepresentsNew">
            <summary>
            Returns true if the UI element represents a new object element
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.RepresentsEdit">
            <summary>
            Returns true if the UI element represents the edit object element
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ChildElements">
            <summary>
            Direct child elements of object
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.HelpTopics">
            <summary>
            Help topics related to UI element.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.ObjectFullName">
            <summary>
            Element's full name
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.Application">
            <summary>
            Application this UIElement belongs to, or null.
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.IsInAdministrationScope">
            <summary>
            Gets the value that indicates whether element is in administration scope (anywhere under the administration element)
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfo.IsApplication">
            <summary>
            Tells you whether UIElement is application or not.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.#ctor">
            <summary>
            Constructor, creates an empty UIElementInfo structure.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor, creates an empty UIElementInfo object from the given DataRow data.
            </summary>
            <param name="dr">Datarow with the class info data</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.BuildObjectPath(System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Builds the path from the given column.
            </summary>
            <param name="parentColumName">Column of the parent ID</param>
            <param name="pathColumnName">Column name to build the path from</param>
            <param name="levelColumnName">Column name of the level</param>
            <param name="level">Level of the object within the tree hierarchy</param>
            <param name="pathPartColumn">Name of the column which creates the path (IDColumn for IDPath, CodeNameColumn for name path)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.RegisterProperties">
            <summary>
            Registers properties of the object
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.GetSiblingsWhereCondition">
            <summary>
            Creates where condition according to Parent, Group and Site settings.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.GetNewElement">
            <summary>
            Finds first element from children collection starting with prefix 'new'
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.GetEditElement">
            <summary>
            Finds first element from children collection starting with prefix 'edit'
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.GetParentElements">
            <summary>
            Return element's parent objects
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.GetApplicationNavigationString(System.String)">
            <summary>
            Returns navigation string that describes a route to the application represented by UI element.
            </summary>
            <param name="cultureCode">Culture code</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfo.LoadDefaultData">
            <summary>
            Loads the default data to the object.
            </summary>
        </member>
        <member name="T:CMS.Modules.UIElementInfoProvider">
            <summary>
            UIElement info data container class.
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementInfoProvider.APPLICATION_LEVEL">
            <summary>
            Defines application root level.
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementInfoProvider.MAX_ELEMENT_LEVEL">
            <summary>
            Maximum nesting level of UI element.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.#ctor">
            <summary>
            Constructor. Init hashtables for ID and Fullname (ResourceName|ElementName)
            </summary>
        </member>
        <member name="P:CMS.Modules.UIElementInfoProvider.AllowEditOnlyCurrentModule">
            <summary>
            Indicates whether allow editing only current selected module
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetElementCaption(CMS.Modules.UIElementInfo,System.Boolean)">
            <summary>
            Gets the element caption. If caption is not set the display name is used.
            </summary>
            <param name="uiElement">UI element instance</param>
            <param name="localize">Indicates whether output string shout be localized</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElements">
            <summary>
            Returns all UI elements.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElementInfo(System.Guid)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElementInfo(System.Int32)">
            <summary>
            Returns the UIElement info object.
            </summary>
            <param name="elementId">ID of the UIElement to retrieve</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRootUIElementInfo(System.Int32)">
            <summary>
            Returns the root UIElement info object for Resource.
            </summary>
            <param name="resourceId">ID of resource (module)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElementInfo(System.String,System.String)">
            <summary>
            Returns the UIElement info object.
            </summary>
            <param name="elementName">Codename of the UIElement to retrieve</param>
            <param name="resourceName">Name of the resource (module)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElementInfo(System.Int32,System.String)">
            <summary>
            Returns the UIElement info object.
            </summary>
            <param name="elementName">Codename of the UIElement to retrieve</param>
            <param name="resourceId">ID of the resource (module)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.SetUIElementInfo(CMS.Modules.UIElementInfo)">
            <summary>
            Sets the specified UIElement data.
            </summary>
            <param name="infoObj">UIElement info data</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.DeleteUIElementInfo(CMS.Modules.UIElementInfo)">
            <summary>
            Deletes the specified UIElement.
            </summary>
            <param name="infoObj">UIElement object</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.DeleteUIElementInfo(System.Int32)">
            <summary>
            Deletes the specified UIElement.
            </summary>
            <param name="elementId">Element ID</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetChildUIElements(System.String,System.String)">
            <summary>
            Returns DataSet with child elements of the specified element ordered by ElementOrder.
            Only elements with not empty ElementCaption will be returned because it says that such elements represent menu items.
            </summary>
            <param name="resourceName">Name of the resource (module)</param>
            <param name="elementName">CodeName of the UIElement</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetChildUIElements(System.Int32)">
            <summary>
            Returns DataSet with child elements of the specified parent element.
            </summary>
            <param name="parentElementId">ID of the parent UIElement</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.MoveUIElementUp(System.Int32)">
            <summary>
            Moves specified UI element up within the parent UI element.
            </summary>
            <param name="elementId">ID of the UI element</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.MoveUIElementDown(System.Int32)">
            <summary>
            Moves specified UI element down within the parent UI element.
            </summary>
            <param name="elementId">ID of the UI element</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.SetUIElementChildCount(System.Int32)">
            <summary>
            Sets correct ElementChildCount to the specified UIElement.
            </summary>
            <param name="elementId">ID of the UIElement</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRolesUIElements(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Returns all UIElements for which the roles have permission.
            </summary>
            <param name="rolesIds">Role IDs</param>
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRootUIElementInfo(System.String)">
            <summary>
            Returns root UIElement for the specified module.
            </summary>
            <param name="resourceName">Name of the module</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRootChildUIElements(System.String)">
            <summary>
            Returns child UIElements for the specified module.
            </summary>
            <param name="resourceName">Name of the module</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetLastElementOrder(System.Int32)">
            <summary>
            Returns last element order for specified parent element.
            </summary>
            <param name="parentElementId">Parent element id</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.RefreshDataCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetModuleTopUIElement(System.Int32)">
            <summary>
            Gets top module's element (element with lowest element level)
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetApplicationNavigationString(System.String,System.String,System.String)">
            <summary>
            Returns navigation string that describes a route to the application given by UI element.
            </summary>
            <param name="moduleName">Module name</param>
            <param name="elementName">Element name</param>
            <param name="cultureCode">Culture code</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.RefreshObjectsCounts">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetModuleTopUIElementInternal(System.Int32)">
            <summary>
            Gets top module's element (element with lowest element level)
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElementInfoInternal(System.String,System.String)">
            <summary>
            Returns the UIElement info object.
            </summary>
            <param name="elementName">Codename of the UIElement to retrieve</param>
            <param name="resourceName">Name of the resource (module)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetUIElementInfoInternal(System.Int32,System.String)">
            <summary>
            Returns the UIElement info object.
            </summary>
            <param name="elementName">Codename of the UIElement to retrieve</param>
            <param name="resourceId">ID of the resource (module)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.SetInfo(CMS.Modules.UIElementInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.DeleteInfo(CMS.Modules.UIElementInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetChildUIElementsInternal(System.String,System.String)">
            <summary>
            Returns DataSet with child elements of the specified element ordered by ElementOrder.
            Only elements with not empty ElementCaption will be returned because it says that such elements represent menu items.
            </summary>
            <param name="resourceName">Name of the resource (module)</param>
            <param name="elementName">CodeName of the UIElement</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetChildUIElementsInternal(System.Int32,System.String)">
            <summary>
            Returns DataSet with child elements of the specified parent element.
            </summary>
            <param name="parentElementId">ID of the parent UIElement</param>
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.MoveUIElementUpInternal(System.Int32)">
            <summary>
            Moves specified UI element up within the parent UI element.
            </summary>
            <param name="elementId">ID of the UI element</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.MoveUIElementDownInternal(System.Int32)">
            <summary>
            Moves specified UI element down within the parent UI element.
            </summary>
            <param name="elementId">ID of the UI element</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.SetUIElementChildCountInternal(System.Int32)">
            <summary>
            Sets correct ElementChildCount to the specified UIElement.
            </summary>
            <param name="elementId">ID of the UIElement</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRolesUIElementsInternal(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Returns all UIElements for which the given roles have permission.
            </summary>
            <param name="roleIds">Roles IDs</param>
            <param name="columns">Data columns to return</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRootUIElementInfoInternal(System.Int32)">
            <summary>
            Returns the root UIElement info object for Resource.
            </summary>
            <param name="resourceId">ID of resource (module)</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRootUIElementInfoInternal(System.String)">
            <summary>
            Returns root UIElement for the specified module.
            </summary>
            <param name="resourceName">Name of the module</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetRootChildUIElementsInternal(System.String)">
            <summary>
            Returns child UIElements for the specified module.
            </summary>
            <param name="resourceName">Name of the module</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetLastElementOrderInternal(System.Int32)">
            <summary>
            Returns last order for specified parent element.
            </summary>
            <param name="parentElementId">Parent element id</param>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.RefreshDataCountsInternal">
            <summary>
            Updates all counts for all sub-objects.
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetFullNameDictionary">
            <summary>
            Creates new dictionary for caching the objects by full name
            </summary>
        </member>
        <member name="M:CMS.Modules.UIElementInfoProvider.GetFullNameWhereCondition(System.String)">
            <summary>
            Gets the where condition that searches the object based on the given full name
            </summary>
            <param name="fullName">Object full name</param>
        </member>
        <member name="T:CMS.Modules.UIElementSizeEnum">
            <summary>
            Size of the UI Element when used in UI Toolbar.
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementSizeEnum.Large">
            <summary>
            Large.
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementSizeEnum.Regular">
            <summary>
            Regular.
            </summary>
        </member>
        <member name="T:CMS.Modules.UIElementTypeEnum">
            <summary>
            UI element type 
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementTypeEnum.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementTypeEnum.PageTemplate">
            <summary>
            Page template
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementTypeEnum.UserControl">
            <summary>
            User control
            </summary>
        </member>
        <member name="F:CMS.Modules.UIElementTypeEnum.Javascript">
            <summary>
            Javascript
            </summary>
        </member>
        <member name="T:CMS.Modules.VirtualModuleManager">
            <summary>
            Provides a registration of virtual modules.
            </summary>
            <remarks>
            Virtual modules are represented only by a folder in the CMSModules folder, there is no corresponding class derived from the Module class.
            </remarks>
        </member>
        <member name="M:CMS.Modules.VirtualModuleManager.RegisterVirtualModules">
            <summary>
            Registers virtual modules.
            </summary>
            <remarks>
            Virtual modules are registered only if the application is a web application.
            </remarks>
        </member>
        <member name="M:CMS.Modules.VirtualModuleManager.RegisterVirtualModule(System.String,System.String)">
            <summary>
            Registers a virtual module with the specified properties.
            </summary>
            <param name="name">A module name.</param>
            <param name="rootPath">A relative path to the module folder (for example "~/CMSModules/ModuleName").</param>
        </member>
    </members>
</doc>
