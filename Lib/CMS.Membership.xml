<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Membership</name>
    </assembly>
    <members>
        <member name="T:CMS.Membership.AuthenticationHelper">
            <summary>
            Contains method connected with user authentication
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.PASSWORD_EXPIRATION_LOCK">
            <summary>
            Setting value for locking user account to user with expired password
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationHelper.DEFAULT_LOGON_PAGE">
            <summary>
            URL to default logon page.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.UpdateLastLogonForExternalUsers">
            <summary>
            Gets the value that indicates whether last logon information should be updated for external users
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.RenewSessionAuthChange">
            <summary>
            Returns whether new session ID is generated after user log in/out.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.UseSessionCookies">
            <summary>
            If true, the session cookies will be used for the authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.GlobalPublicUser">
            <summary>
            Global public user object.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.HttpContext">
            <summary>
            Gets the HTTP context.
            </summary>
            <value>
            The HTTP context.
            </value>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.PrincipalContext">
            <summary>
            Encapsulates the server or domain against which all operations are performed.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.NetBiosDomainName">
            <summary>
            Get domain name in NetBios format
            </summary>
            <returns>NetBiosDomainName</returns>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ImportExternalRoles">
            <summary>
            If true, the system imports the external user roles.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ImportExternalUsers">
            <summary>
            If true, the system imports the external users.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ADConnectionStringName">
            <summary>
            Name of connection string used by AD membership provider.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ADUsername">
            <summary>
            Name of user used to authenticate against AD by membership provider.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ADPassword">
            <summary>
            Password of user used to authenticate against AD by membership provider.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.SynchronizeUserGUIDs">
            <summary>
            Indicates whether to synchronize user's guid during import from Active Directory.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.ImportWindowsRoles">
            <summary>
            Gets or sets whether roles are imported during the Windows/Active directory authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationHelper.FederationAuthentication">
            <summary>
            Gets or sets whether federation authentication is used.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.IsAuthenticated">
            <summary>
            Returns true if the current user is authenticated.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetCurrentUser">
            <summary>
            Gets the current user.
            </summary>
            <remarks>Do not call this method before <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> event is executed because result won't be valid</remarks>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOutPublicUser(CMS.Membership.UserInfo@)">
            <summary>
            Sign out public user.
            </summary>
            <param name="user">User info</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOut(System.String)">
            <summary>
            Signs the user out.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOut(System.String@)">
            <summary>
            Signs the user out.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ImpersonateUser(CMS.Membership.UserInfo,System.String,System.Boolean)">
            <summary>
            Impersonates current user.
            </summary>
            <param name="impersonatedUser">User to which impersonate the current user</param>
            <param name="redirectionUrl">Custom redirection relative URL</param>
            <param name="forceRedirect">Indicates if redirect should be forced even if no redirect URL is specified</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.CancelImpersonation">
            <summary>
            Signs out the impersonated user and switches to the original user.
            </summary>
            <returns>Original user if impersonation was used, otherwise returns null</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SetImpersonatedUser(CMS.Membership.UserInfo)">
            <summary>
            Sets given user as impersonated one, current user is set as original one.
            </summary>
            <param name="impersonatedUser">impersonated user</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.LogImpersonationEvent(CMS.Base.IUserInfo,System.String,System.String)">
            <summary>
            Logs impersonation event
            </summary>
            <param name="user">event source user</param>
            <param name="message">event message</param>
            <param name="eventCode">event code</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUser(System.String,System.Boolean,System.Boolean)">
            <summary>
            Authenticate given user.
            </summary>
            <param name="userName">User name</param>
            <param name="createPersistentCookie">Indicates if persistent cookie should be created</param>
            <param name="loadCultures">If true, the preferred cultures of the user are loaded</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUser(System.String,System.String,System.String,System.Boolean,AuthenticationSourceEnum)">
            <summary>
            Authenticates user against the database.
            </summary>
            <param name="userName">User name to authenticate</param>
            <param name="password">Password to authenticate</param>
            <param name="siteName">Site name</param>
            <param name="login">Indicates if methods is called during user login</param>
            <param name="source">Source of calling</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.FinalizeAuthenticationProcess(CMS.Membership.UserInfo,System.Int32)">
            <summary>
            Finalizes the authentication process. Does all the actions that are needed
            after successful authentication.
            </summary>
            <param name="user">User info.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ExtendAuthenticationCookieExpiration">
            <summary>
            Sets the authentication cookie expiration
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUserAD(System.String,System.String,System.String,System.Web.Security.MembershipProvider,System.Web.Security.RoleProvider)">
            <summary>
            Authenticates user against the database.
            </summary>
            <param name="username">User name to authenticate</param>
            <param name="password">Password to authenticate</param>
            <param name="siteName">Site name</param>
            <param name="membershipProvider">Instance of the <see cref="T:System.Web.Security.MembershipProvider"/> to use. If not specified the membership provider specified in .config file is used</param>
            <param name="roleProvider">Instance of <see cref="T:System.Web.Security.RoleProvider" /> to use. If not specified the role provider specified in .config file is used.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.AuthenticateUserWindows(System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Authenticates the external user with Windows authentication.
            </summary>
            <param name="user">User to authenticate</param>
            <param name="siteName">Site name for authentication</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SetWindowsUserCultures(System.String)">
            <summary>
            Sets preferred cultures for a windows user
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserAuthenticationUrl(CMS.Membership.UserInfo,System.String,System.String)">
            <summary>
            Gets authentication URL for automatic sign-in.
            </summary>
            <param name="user">UserInfo of particular user.</param>
            <param name="targetUrl">Target URL.</param>
            <param name="targetSiteDomain">Target site domain.</param>
            <returns>Authentication URL with the token and expiration stamp.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SignOutUser">
            <summary>
            Signs out user and removes their session.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SetAuthCookieWithUserData(System.String,System.Boolean,System.Int32,System.String[])">
            <summary>
            Creates authentication cookie of user with specified custom data.
            </summary>
            <param name="username">User name</param>
            <param name="isPersistent">Persistency of cookie</param>
            <param name="timeOut">Cookie timeout</param>
            <param name="userData">Array of user data</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserDataFromAuthCookie">
            <summary>
            Returns an array with userdata from authentication cookie.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.EnsureADUser(System.String,System.Security.Principal.SecurityIdentifier,System.String,System.String[])">
            <summary>
            Creates or updates user with given SID.
            Rises authentication event when user is ready to update/insert.
            </summary>
            <param name="userName">User to authenticate</param>
            <param name="sid">User's Active Directory SID</param>
            <param name="siteName">Site name for authentication</param>
            <param name="roles">User roles</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetDomainSamAccountName(System.DirectoryServices.AccountManagement.Principal)">
            <summary>
            Get domain name in NetBiosDomainName\SamAccountName
            </summary>
            <param name="principal">Principal object (User or Group)</param>
            <returns>Domain name in format </returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.IsAuthenticationRedirect">
            <summary>
            Checks whether request is being redirected to a logon page.
            </summary>
            <seealso cref="F:CMS.Membership.SecurityEvents.AuthenticationRequested"/>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.EnsureExternalUser(CMS.Membership.UserInfo)">
            <summary>
            Ensures that the external user record is present in the database.
            </summary>
            <param name="uInfo">User info object with the user data</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserWindowsRoles(System.String)">
            <summary>
            Gets the user roles.
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserADRoles(System.String,System.Web.Security.RoleProvider)">
            <summary>
            Gets the user roles from AD.
            </summary>
            <param name="userName">User name</param>
            <param name="roleProvider">Instance of <see cref="T:System.Web.Security.RoleProvider" /> to use. If not specified the role provider specified in .config file is used.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.RemoveSessionID">
            <summary>
            Removes cookie with session ID which enforces ASP.NET to generate new session ID if RenewSessionAuthChange property is set to true.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.UpdateLastLogonInformation(CMS.Membership.UserInfo)">
            <summary>
            Updates last logon information of user = last logon time, IP address and agent.
            Doesn't call SetUserInfo!!
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.RegenerateAuthenticationGuid(CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Invalidates JSON Web Token by regenerating <see cref="P:CMS.Base.IUserInfo.UserAuthenticationGUID" /> value.
            </summary>
            <param name="userInfo">User info object.</param>
            <param name="saveObject">Specifies whether object is saved into database.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUserADGuid(System.String,System.Security.Principal.SecurityIdentifier)">
            <summary>
            Tries to retrieve GUID from Active Directory.
            </summary>
            <param name="userName">SAM account name</param>
            <param name="sid">Security identifier</param>
            <returns>GUID of </returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SearchADForGuid(System.DirectoryServices.DirectorySearcher)">
            <summary>
            Retrieves GUID of a user specified by filter of given directory searcher.
            </summary>
            <param name="ds">Initialized directory searcher</param>
            <returns>GUID of AD user or Guid.Empty</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.FindUsersByEmail(System.String)">
            <summary>
            Finds enabled users specified by the <paramref name="userEmail"/>.
            </summary>
            <param name="userEmail">Email assigned to the user.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetResetPasswordUrl(System.String)">
            <summary>
            Returns URL of page where user can reset his password.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetUnlockAccountUrl(System.String)">
            <summary>
            Returns URL of page where user can unlock her account.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.MaximumInvalidPasswordAttemps(System.String)">
            <summary>
            Gets limit of invalid password attempts before user account is locked
            </summary>
            <param name="siteName">Site name for which the check is made</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.DisplayAccountLockInformation(System.String)">
            <summary>
            Indicates if additional info about account lock should be displayed
            </summary>
            <param name="siteName">Site name for which the check is made</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.IsPasswordExpirationEnabled(System.String,System.Int32@)">
            <summary>
            Indicates if password expiration is enabled
            </summary>
            <param name="siteName">Site to check</param>
            <param name="expDays">Number of days before password expiration</param>
            <returns>True if password expiration is enabled, False otherwise</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.GetPolicyViolationMessage(System.String)">
            <summary>
            Returns a message that the entered password doesn't meet the defined password policy.
            </summary>
            <param name="siteName">Code name of the site that has the password policy defined.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.CheckPasswordExpiration(CMS.Membership.UserInfo,System.String,System.Boolean,System.String)">
            <summary>
            Check if user password is expired and optionally according to settings lock expired password account.
            </summary>
            <param name="ui">User account to check</param>
            <param name="siteName">Site name</param>
            <param name="lockAccount">Indicates if account should be locked if maximum invalid logon attempts was reached</param>
            <returns>Returns true if user password expired, false otherwise</returns>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.CheckInvalidPasswordAttempts(CMS.Membership.UserInfo,System.String,System.String)">
            <summary>
            Check if logging invalid password attempts is enabled and if so, invalid attempt counter is incremented and
            if user exceeded maximal number of invalid attempts, her account is locked
            </summary>
            <param name="user">User to log invalid password attempt</param>
            <param name="siteName">Site name to check invalid password attempts functionality</param>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendUnlockAccountRequest(CMS.Membership.UserInfo,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String)">
            <summary>
            Sends e-mail to user to inform her about her account was locked due to reaching maximum invalid logon attempts.
            </summary>
            <param name="user">User</param>
            <param name="siteName">Site name</param>
            <param name="source">Source of calling, will be used for log event</param>
            <param name="sendEmailFrom">Email address of the sender</param>
            <param name="resolver">Macro resolver</param>
            <param name="returnUrl">URL using which user can log on to system, after password change</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.UnlockUserAccount(CMS.Membership.UserInfo)">
            <summary>
            Unlock specified user account
            </summary>
            <param name="user">User account to be unlocked</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.HandleAdminEmergencyReset">
            <summary>
            Handles admin emergency reset
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ForgottenEmailRequest(System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String,System.String)">
            <summary>
            Tries to find user based on email address and if it finds the user, a password reset link is sent.
            </summary>
            <param name="email">Email address of user requesting a new password.</param>
            <param name="siteName">Site name used to process e-mail templates.</param>
            <param name="source">Source of the request, used for logging.</param>
            <param name="sendEmailFrom">Email address of the sender.</param>
            <param name="resolver">Macro resolver used to resolve values in e-mail template.</param>
            <param name="requestUrl">URL which will be send to user to finish the password reset process.</param>
            <param name="returnUrl">URL to which the user will be redirected after finishing the password reset process.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendPasswordRequest(CMS.Membership.UserInfo,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String,System.String)">
            <summary>
            Sends e-mail to user for approval request of new password.
            </summary>
            <param name="user">User who should receive the password request.</param>
            <param name="siteName">Site name used to process e-mail templates.</param>
            <param name="source">Source of the request, used for logging.</param>
            <param name="sendEmailFrom">Email address of the sender.</param>
            <param name="emailTemplateName">Email template name to be used for the email.</param>
            <param name="resolver">Macro resolver used to resolve values in e-mail template.</param>
            <param name="requestUrl">URL which will be send to user to finish the password reset process.</param>
            <param name="returnUrl">URL to which the user will be redirected after finishing the password reset process.</param>
            <returns>Message with result description.</returns>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ResetPassword(System.String,System.String,System.Int32,System.Double,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver,System.Boolean@,System.String,System.String)">
            <summary>
            Resets password for user based on his request.
            </summary>
            <param name="hash">Request hash (identifier).</param>
            <param name="requestTime">Request time.</param>
            <param name="userID">User id.</param>
            <param name="interval">Interval in which user can reset her password.</param>
            <param name="newPassword">New password.</param>
            <param name="siteName">Site name.</param>
            <param name="sendEmailFrom">Email address of the sender.</param>
            <param name="resolver">Macro resolver used to resolve values in confirmation e-mail template.</param>
            <param name="source">Source of the request, used for logging.</param>
            <param name="success">Returns whether sending of request was successful.</param>
            <param name="exceededTimeText">Text returned by this method if time request is exceeded.</param>
            <param name="invalidRequestText">Text returned by this method if request is invalid.</param>
            <returns>Message with result description.</returns>
            <remarks>In case the CMSSendPasswordResetConfirmation setting key is set to true, a confirmation email is sent to the user after successful password reset.</remarks>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.SendPasswordResetConfirmation(CMS.Membership.UserInfo,System.String,System.String,System.String,System.String,CMS.MacroEngine.MacroResolver)">
            <summary>
            Sends a confirmation e-mail informing the user about a recent password change.
            </summary>
            <param name="ui">The user to be informed.</param>
            <param name="siteName">Current site name.</param>
            <param name="source">Context where the password change was initiated.</param>
            <param name="emailTemplateName">E-mail template that should be used.</param>
            <param name="sendEmailFrom">E-mail address of the sender. If not specified, the CMSSendPasswordEmailsFrom setting value is used.</param>
            <param name="resolver">Optional macro resolver used to resolve macros in the specified template.</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.ValidateResetPassword(CMS.Membership.UserInfo,System.String,System.String,System.Double,System.String)">
            <summary>
            Validates request of password reset.
            </summary>
            <param name="ui">User info object.</param>
            <param name="hash">Request hash (identifier).</param>
            <param name="requestTime">Request time.</param>
            <param name="interval">Interval in which user can reset her password.</param>
            <param name="source">Source of calling, will be used for log event</param>
        </member>
        <member name="M:CMS.Membership.AuthenticationHelper.HandleAutomaticSignIn">
            <summary>
            Check URL query string for authentication token and authenticate user.
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationService">
            <summary>
            Authentication service
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationService.#ctor(CMS.Membership.IUserInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Membership.AuthenticationService"/> class.
            </summary>
            <param name="userInfoProvider">Provider for <see cref="T:CMS.Membership.UserInfo"/> management.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userInfoProvider"/> is null.</exception>
        </member>
        <member name="P:CMS.Membership.AuthenticationService.CurrentUser">
            <summary>
            Currently authenticated user
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationService.GetUser(System.String)">
            <summary>
            Get user info of given user.
            </summary>
            <param name="userName">name of given user</param>
            <returns>user info of given user</returns>
        </member>
        <member name="T:CMS.Membership.CurrentUserFields">
            <summary>
            Wrapper class to provide fields from System.Math namespace in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserFields.RegisterFields">
            <summary>
            Registers the math fields.
            </summary>
        </member>
        <member name="T:CMS.Membership.CurrentUserInfo">
            <summary>
            Class to hold current user information. Extends UserInfo with context specific information.
            </summary>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.PreferredUICultureCode">
            <summary>
            User preferred UI Culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.CurrentUserInfo.UserSettingsInternal">
            <summary>
            Gets the UserSettings info object for the user.
            </summary>
            <remarks>
            Ensures that user settings will be loaded to the source cached instance.
            </remarks>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.#ctor(CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="sourceInfo">Source user info</param>
            <param name="keepSourceData">If true, source data are kept</param>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.LoadDefaultData">
            <summary>
            Sets the object default values
            </summary>
        </member>
        <member name="M:CMS.Membership.CurrentUserInfo.UpdatePreferredCultures">
            <summary>
            Updates the preferred cultures of the user
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationResultEnum">
            <summary>
            Authentication result enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationResultEnum.OK">
            <summary>Provided credentials are valid. The user can log on.</summary>
        </member>
        <member name="F:CMS.Membership.AuthenticationResultEnum.WrongUserNameOrPassword">
            <summary>Provided credentials are invalid. The user cannot log on.</summary>
        </member>
        <member name="T:CMS.Membership.ResetPasswordResultEnum">
            <summary>
            Reset password enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.ResetPasswordResultEnum.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:CMS.Membership.ResetPasswordResultEnum.TimeExceeded">
            <summary>
            Time exceeded.
            </summary>
        </member>
        <member name="F:CMS.Membership.ResetPasswordResultEnum.ValidationFailed">
            <summary>
            Validation failed.
            </summary>
        </member>
        <member name="T:CMS.Membership.Internal.AutomaticSignInConfiguration">
            <summary>
            Represents security token configuration for automatic sign-in.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.AutomaticSignInConfiguration.Issuer">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.AutomaticSignInConfiguration.Audience">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.AutomaticSignInConfiguration.TokenEncryption">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.AutomaticSignInConfiguration.Validity">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Membership.Internal.AutomaticSignInConfiguration.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.Internal.AutomaticSignInConfiguration"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.Internal.AutomaticSignInConfiguration.#ctor(System.String)">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.Internal.AutomaticSignInConfiguration"/>.
            </summary>
            <param name="targetDomain">The site domain which the token will be issued for.</param>
        </member>
        <member name="T:CMS.Membership.Internal.DebugAuthenticationConfiguration">
            <summary>
            Represents security token configuration for authentication in WebAPI for accessing live site debug logs.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.DebugAuthenticationConfiguration.Issuer">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.DebugAuthenticationConfiguration.Audience">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.DebugAuthenticationConfiguration.TokenEncryption">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.DebugAuthenticationConfiguration.Validity">
            <inheritdoc/>
        </member>
        <member name="T:CMS.Membership.Internal.ITokenConfiguration">
            <summary>
            Represents security token configuration.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.ITokenConfiguration.Issuer">
            <summary>
            Issuer of the JWT token.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.ITokenConfiguration.Audience">
            <summary>
            Audience of the JWT token.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.ITokenConfiguration.TokenEncryption">
            <summary>
            Indicates if token will be encrypted.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.ITokenConfiguration.Validity">
            <summary>
            Token validity.
            </summary>
        </member>
        <member name="T:CMS.Membership.Internal.VirtualContextAuthenticationConfiguration">
            <summary>
            Represents security token configuration for authentication in virtual context.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextAuthenticationConfiguration.Issuer">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextAuthenticationConfiguration.Audience">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextAuthenticationConfiguration.TokenEncryption">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextAuthenticationConfiguration.Validity">
            <inheritdoc/>
        </member>
        <member name="T:CMS.Membership.Internal.VirtualContextSignInConfiguration">
            <summary>
            Represents security token configuration for sign in for virtual context.
            </summary>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextSignInConfiguration.Issuer">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextSignInConfiguration.Audience">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextSignInConfiguration.TokenEncryption">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.Internal.VirtualContextSignInConfiguration.Validity">
            <inheritdoc/>
        </member>
        <member name="T:CMS.Membership.Internal.ISecurityTokenManager`1">
            <summary>
            Provides methods for managing JWT security tokens.
            </summary>
            <typeparam name="T">Security token configuration</typeparam>
        </member>
        <member name="M:CMS.Membership.Internal.ISecurityTokenManager`1.GetToken(CMS.Base.IUserInfo)">
            <summary>
            Gets JWT token for current user.
            </summary>
            <param name="user">User info which should be serialized into the token.</param>
            <returns>Serialized the JWT token.</returns>
            <exception cref="T:System.ArgumentException">
            Throws when <paramref name="user"/> has missing <see cref="P:CMS.Base.IUserInfo.UserAuthenticationGUID"/>
            or <see cref="P:CMS.Base.IUserInfo.UserName"/>.
            </exception>
        </member>
        <member name="M:CMS.Membership.Internal.ISecurityTokenManager`1.GetUserFromToken(System.String)">
            <summary>
            Validates JWT token, checks <see cref="P:CMS.Base.IUserInfo.UserAuthenticationGUID"/> integrity and returns claims-based identity.
            </summary>
            <param name="token">Serialized the JWT token.</param>
            <returns>Claims-based identity</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="token"/> is null or whitespace.</exception>
        </member>
        <member name="T:CMS.Membership.Internal.SecurityTokenManager`1">
            <summary>
            Provides methods for managing JWT security tokens.
            </summary>
            <typeparam name="T">Security token configuration</typeparam>
        </member>
        <member name="M:CMS.Membership.Internal.SecurityTokenManager`1.#ctor(`0)">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.Internal.SecurityTokenManager`1"/>.
            </summary>
            <param name="tokenConfiguration">Security token configuration.</param>
            <exception cref="T:System.ArgumentException">Throws when <typeparamref name="T"/> is not valid.</exception>
        </member>
        <member name="M:CMS.Membership.Internal.SecurityTokenManager`1.GetToken(CMS.Base.IUserInfo)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Membership.Internal.SecurityTokenManager`1.GetUserFromToken(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:CMS.Membership.JwtTokenService">
            <summary>
            Service responsible for issuing, validation and parsing 'JSON Web Token' (JWT).
            </summary>
        </member>
        <member name="P:CMS.Membership.JwtTokenService.SigningCredentials">
            <summary>
            Defines the security key, algorithm and digest for digital token signature.
            </summary>
        </member>
        <member name="P:CMS.Membership.JwtTokenService.EncryptingCredentials">
            <summary>
            Defines the security key, key wrap algorithm and data encryption algorithm for token encryption.
            </summary>
        </member>
        <member name="P:CMS.Membership.JwtTokenService.Issuer">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.JwtTokenService.Audience">
            <inheritdoc/>
        </member>
        <member name="P:CMS.Membership.JwtTokenService.TokenEncryption">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Membership.JwtTokenService.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.JwtTokenService"/>.
            </summary>
            <param name="issuer">Issuer of the JWT token.</param>
            <param name="audience">Audience of the JWT token.</param>
            <param name="tokenEncryption">Indicates if token will be encrypted.</param>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="issuer"/> is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="audience"/> is null or whitespace.</exception>
        </member>
        <member name="M:CMS.Membership.JwtTokenService.IssueToken(System.String,System.DateTime,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime})">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Membership.JwtTokenService.TryParseToken(System.String,System.Security.Claims.ClaimsPrincipal@,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="T:CMS.Membership.JwtTokenServiceFactory">
            <summary>
            Represents a factory for <see cref="T:CMS.Base.Internal.IJwtTokenService"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.JwtTokenServiceFactory.GetJwtTokenService(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Membership.Base32.Encode(System.Byte[])">
            <summary>
            Returns <see paramref="data"/> in base32 encoding without padding. 
            </summary>
        </member>
        <member name="T:CMS.Membership.HmacFactories">
            <summary>
            Provides keyed hash algorithms as per RFC 6238.
            </summary>
        </member>
        <member name="F:CMS.Membership.HmacFactories.HMACSHA1">
            <summary>
            Creates an instance of System.Security.Cryptography.HMACSHA1.
            </summary>
        </member>
        <member name="F:CMS.Membership.HmacFactories.HMACSHA256">
            <summary>
            Creates an instance of System.Security.Cryptography.HMACSHA256.
            </summary>
        </member>
        <member name="F:CMS.Membership.HmacFactories.HMACSHA512">
            <summary>
            Creates an instance of System.Security.Cryptography.HMACSHA512.
            </summary>
        </member>
        <member name="T:CMS.Membership.MFAuthenticationHelper">
            <summary>
            Helper for multi-factor authentication 
            </summary>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.IsMultiFactorAuthRequired">
            <summary>
            Indicates whether MFA is forced. 
            </summary>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.IsMultiFactorAuthEnabled">
            <summary>
            Indicates whether MFA is enabled.
            </summary>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.DisplaySetupCode">
            <summary>
            Indicates whether the setup code is showed to the user after enabling MFA.
            </summary>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.ClockDriftTolerance">
            <summary>
            Tolerated clock drift between client and server. 
            </summary>
            <remarks>The default value is 5 minutes.</remarks>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.PasscodeLength">
            <summary>
            Length of the passcode.
            </summary>
            <remarks>The default value is 6.</remarks>
        </member>
        <member name="P:CMS.Membership.MFAuthenticationHelper.HashAlgorithm">
            <summary>
            Underlying hash algorithm used by the passcode generator.
            </summary>
            <remarks>
            Default algorithm used is <see cref="T:System.Security.Cryptography.HMACSHA1"/>.
            As per RFC 6238 <see cref="T:System.Security.Cryptography.HMACSHA256"/> and <see cref="T:System.Security.Cryptography.HMACSHA512"/> may be used.
            </remarks>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.ResetSecretForUser(CMS.Membership.UserInfo)">
            <summary>
            Resets the user's current MFA information. 
            </summary>
            <remarks>The user's authenticator has to be resynchronized when logging in again.</remarks>
            <param name="user">UserInfo whose MFA secret will be reset.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IsPasscodeValid(CMS.Membership.UserInfo,System.String)">
            <summary>
            Checks whether the entered passcode is valid.
            </summary>
            <param name="user">User who is being authenticated.</param>
            <param name="passcode">Passcode entered by the user.</param>
            <returns>True if passcode is valid. False otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IssuePasscode(System.String)">
            <summary>
            Fires the <see cref="F:CMS.Membership.SecurityEvents.MultiFactorAuthenticate"/> event.
            Generates a new secret in case the user has none. 
            </summary>
            <param name="username">User who is being authenticated.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GetSetupCodeForUser(System.String)">
            <summary>
            Returns the setup code that should be used to synchronize with the user's authenticator.
            </summary>
            <param name="username">Username of user who is being authenticated.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IsMultiFactorRequiredForUser(System.String)">
            <summary>
            Indicates whether MFA is required for the given user.
            </summary>
            <param name="username">Username of user to check.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.ResetSecretForUserInternal(CMS.Membership.UserInfo)">
            <summary>
            Resets the user's current MFA information. 
            </summary>
            <remarks>The user's authenticator has to be resynchronized when logging in again.</remarks>
            <param name="user">UserInfo whose MFA secret will be reset.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IsPasscodeValidInternal(CMS.Membership.UserInfo,System.String)">
            <summary>
            Checks whether the entered passcode is valid.
            </summary>
            <param name="user">User who is being authenticated.</param>
            <param name="passcode">Passcode entered by the user.</param>
            <returns>True if passcode is valid. False otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IssuePasscodeInternal(System.String)">
            <summary>
            Fires the <see cref="F:CMS.Membership.SecurityEvents.MultiFactorAuthenticate"/> event.
            Generates a new secret in case the user has none. 
            </summary>
            <param name="username">User who is being authenticated.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GetSetupCodeForUserInternal(System.String)">
            <summary>
            Returns the setup code that should be used to synchronize with the user's authenticator.
            </summary>
            <param name="username">Username of user who is being authenticated.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.IsMultiFactorRequiredForUserInternal(System.String)">
            <summary>
            Indicates whether MFA is required for the given user.
            </summary>
            <param name="username">Username of user to check.</param>
        </member>
        <member name="M:CMS.Membership.MFAuthenticationHelper.GenerateSecret">
            <summary>
            Generates a secret to use in passcode generation. 
            </summary>
        </member>
        <member name="T:CMS.Membership.Totp">
            <summary>
            TOTP implementation providing setup codes, OTP verification and OTP generation.
            </summary>
            <remarks>
            Setup codes are encoded using base32 without padding. 
            Time to start counting time steps is 0 (Unix epoch) and the time step is 30 seconds. 
            </remarks>
        </member>
        <member name="M:CMS.Membership.Totp.GetSetupCode(System.Byte[])">
            <summary>
            Returns a manual setup code for the user. This code is used to synchronize the second factor (Google Authenticator, Authy, ...) with the web application instance.
            </summary>
            <param name="accountSecretKey">The secret used in TOTP generation.</param>
        </member>
        <member name="M:CMS.Membership.Totp.ValidateOtp(System.Byte[],System.String,System.TimeSpan,System.Int64@,System.Func{System.Security.Cryptography.HMAC},System.Int32)">
            <summary>
            Checks whether the given OTP is valid for the given secret and time tolerance. 
            </summary>
            <param name="accountSecretKey">The secret used in TOTP generation.</param>
            <param name="twoFactorCodeFromClient">The code that should be validated.</param>
            <param name="timeTolerance">Defines a time interval to address clock drift issues.</param>
            <param name="hmac">Authenticated hash function used in TOTP generation.</param>
            <param name="digits">Length of the TOTP.</param>
            <param name="timeStep">Time step of valid OTP. Can be used to prevent OTP reuse.</param>
        </member>
        <member name="M:CMS.Membership.Totp.GetCurrentOtp(System.Byte[],System.Func{System.Security.Cryptography.HMAC},System.Int32)">
            <summary>
            Returns the current OTP for the current time and the given secret. 
            </summary>
            <param name="accountSecretKey">The secret used in TOTP generation.</param>
            <param name="hmac">Authenticated hash function used in TOTP generation.</param>
            <param name="digits">Length of the TOTP.</param>
        </member>
        <member name="M:CMS.Membership.Totp.FindMatchingOtpTimeStep(System.Byte[],System.String,System.TimeSpan,System.Func{System.Security.Cryptography.HMAC},System.Int32)">
            <summary>
            Finds a time step of an OTP matching given <paramref name="twoFactorCodeFromClient"/> with respect to <paramref name="timeTolerance"/>.
            </summary>
            <returns>Returns the time step of matching OTP if found. Returns -1 otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.Totp.GenerateHashedCode(System.Byte[],System.Int64,System.Func{System.Security.Cryptography.HMAC},System.Int32)">
            <summary>
            Generates a OTP according to RFC4226.
            </summary>
        </member>
        <member name="T:CMS.Membership.TotpStepCounter">
            <summary>
            Computes step numbers in time based on epoch and step length.
            </summary>
        </member>
        <member name="P:CMS.Membership.TotpStepCounter.Epoch">
            <summary>
            Gets time in which a step number calculation begins.
            </summary>
        </member>
        <member name="P:CMS.Membership.TotpStepCounter.StepLengthSeconds">
            <summary>
            Gets step length in seconds.
            </summary>
        </member>
        <member name="M:CMS.Membership.TotpStepCounter.#ctor">
            <summary>
            Initializes a new instance of the TOTP step counter class with epoch set to UNIX epoch and time step of length of 30 seconds.
            </summary>
        </member>
        <member name="M:CMS.Membership.TotpStepCounter.#ctor(System.DateTime,System.Int32)">
            <summary>
            Initializes a new instance of the TOTP step counter class with specified epoch and step length.
            </summary>
            <param name="epoch">Time in which a step number calculation begins.</param>
            <param name="stepLengthSeconds">Step length in seconds.</param>
        </member>
        <member name="M:CMS.Membership.TotpStepCounter.GetUtcNowStepNumber">
            <summary>
            Gets step number for current UTC time (<see cref="P:System.DateTime.UtcNow"/>).
            </summary>
            <returns>Current step number.</returns>
        </member>
        <member name="M:CMS.Membership.TotpStepCounter.GetStepNumber(System.DateTime)">
            <summary>
            Gets step number for given date and time.
            </summary>
            <returns>Step number for date and time specified by <paramref name="when"/>.</returns>
        </member>
        <member name="M:CMS.Membership.IWindowsTokenRoleService.GetRolesForUser(System.String)">
            <summary>Gets a list of the Windows groups that a user is in.</summary>
            <returns>A string array containing the names of all the Windows groups that the specified user is in.</returns>
            <param name="userName">The user to return the list of Windows groups for in the form DOMAIN\userName. </param>
            <exception cref="T:System.Configuration.Provider.ProviderException">
            The currently executing user does not have an authenticated <see cref="T:System.Security.Principal.WindowsIdentity" /> attached to <see cref="P:System.Web.UI.Page.User" />. 
            For non-HTTP scenarios, the currently executing user does not have an authenticated <see cref="T:System.Security.Principal.WindowsIdentity" /> attached to <see cref="P:System.Threading.Thread.CurrentPrincipal" />.
            -or-
            <paramref name="userName" /> does not match the <see cref="P:System.Security.Principal.WindowsIdentity.Name" /> of the current <see cref="T:System.Security.Principal.WindowsIdentity" />.
            -or-
            A failure occurred while retrieving the user's Windows group information.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName" /> is null.</exception>
            <exception cref="T:System.Web.HttpException">The trust level is less than <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" />.</exception>
        </member>
        <member name="M:CMS.Membership.WindowsTokenRoleService.GetRolesForUser(System.String)">
            <summary>Gets a list of the Windows groups that a user is in.</summary>
            <returns>A string array containing the names of all the Windows groups that the specified user is in.</returns>
            <param name="userName">The user to return the list of Windows groups for in the form DOMAIN\userName. </param>
            <exception cref="T:System.Configuration.Provider.ProviderException">
            The currently executing user does not have an authenticated <see cref="T:System.Security.Principal.WindowsIdentity" /> attached to <see cref="P:System.Web.UI.Page.User" />. 
            For non-HTTP scenarios, the currently executing user does not have an authenticated <see cref="T:System.Security.Principal.WindowsIdentity" /> attached to <see cref="P:System.Threading.Thread.CurrentPrincipal" />.
            -or-
            <paramref name="userName" /> does not match the <see cref="P:System.Security.Principal.WindowsIdentity.Name" /> of the current <see cref="T:System.Security.Principal.WindowsIdentity" />.
            -or-
            A failure occurred while retrieving the user's Windows group information.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="userName" /> is null.</exception>
            <exception cref="T:System.Web.HttpException">The trust level is less than <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" />.</exception>
        </member>
        <member name="T:CMS.Membership.WindowsUserCookieHelper">
            <summary>
            Provides support for storing Windows user information in cookies.
            </summary>
        </member>
        <member name="F:CMS.Membership.WindowsUserCookieHelper.WINDOWS_USER_KEY">
            <summary>
            Cookie key for authenticated Windows user
            </summary>
        </member>
        <member name="F:CMS.Membership.WindowsUserCookieHelper.PURPOSE">
            <summary>
            MachineKey protection purpose
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarInfo">
            <summary>
            AvatarInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.mInputStreamData">
            <summary>
            Input stream avatar data.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfo.mStreamProcessed">
            <summary>
            Indicates whether the data from input stream were processed.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarLastModified">
            <summary>
            Avatar last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.BinaryDataChecksum">
            <summary>
            Binary data checksum.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarBinary">
            <summary>
            Avatar binary data.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarFileName">
            <summary>
            Avatar file name.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarID">
            <summary>
            Avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarName">
            <summary>
            Avatar name.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarGUID">
            <summary>
            Avatar GUID.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarType">
            <summary>
            Avatar type - All,User or Group.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarFileExtension">
            <summary>
            Avatar file extension.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarMimeType">
            <summary>
            Avatar MIME type specification.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarFileSize">
            <summary>
            Avatar file size detail.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarImageHeight">
            <summary>
            Avatar image height.
            </summary>
        </member>
        <member name="P:CMS.Membership.AvatarInfo.AvatarImageWidth">
            <summary>
            Avatar image height.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.GetCacheDependencies">
            <summary>
            Gets collection of dependency keys to be touched when modifying the current object.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor">
            <summary>
            Constructor - Creates an empty AvatarInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new AvatarInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(System.Web.HttpPostedFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor - Creates a new AvatarInfo object based on the file posted through the upload control.
            </summary>
            <param name="postedFile">Posted file</param>
            <param name="maxWidth">Maximal image width</param>
            <param name="maxHeight">Maximal image height</param>
            <param name="maxSideSize">Maximal side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(CMS.Base.IUploadedFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor - Creates a new AvatarInfo object based on the file posted through the upload control.
            </summary>
            <param name="uploadedFile">Uploaded file</param>
            <param name="maxWidth">Maximal image width</param>
            <param name="maxHeight">Maximal image height</param>
            <param name="maxSideSize">Maximal side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.#ctor(System.String)">
            <summary>
            Creates a new AvatarInfo object based on the file specified by given path.
            </summary>
            <param name="filePath">File path</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.GetBinaryData">
            <summary>
            Ensures the binary data - loads the binary data from file stream if present.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfo.EnsureBinaryData">
            <summary>
            Ensures the binary data - loads the binary data from file stream if present.
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarInfoProvider">
            <summary>
            Class providing AvatarInfo management.
            </summary>
        </member>
        <member name="F:CMS.Membership.AvatarInfoProvider.ensureFileLock">
            <summary>
            Lock object for ensuring of the physical files.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatars">
            <summary>
            Returns the query for all avatars.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfo(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfo(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfo(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinary(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinary(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">GUID of the avatar to return</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinary(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Name of the avatar to return</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.Set(CMS.Membership.AvatarInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.SetAvatarInfo(CMS.Membership.AvatarInfo)">
            <summary>
            Sets (updates or inserts) specified avatar.
            </summary>
            <param name="avatar">Avatar to set</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.Delete(CMS.Membership.AvatarInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarInfo(CMS.Membership.AvatarInfo)">
            <summary>
            Deletes specified avatar.
            </summary>
            <param name="infoObj">Avatar object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarInfo(System.Int32)">
            <summary>
            Deletes specified avatar.
            </summary>
            <param name="avatarId">ID of the avatar object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Delete avatar file stored in the file system.
            </summary>
            <param name="avatarGuid">Guid file to delete</param>
            <param name="fileExtension">Extension of the avatar file</param>
            <param name="deleteDirectory">Determines whether delete specified directory or not</param>
            <param name="synchronization">Indicates whether the method is called due to synchronization</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarFile(System.Guid)">
            <summary>
            Returns the avatar file from disk or (if not available on the disk) from database.
            </summary>
            <param name="guid">Guid of the avatar file to get</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarFile(CMS.Membership.AvatarInfo)">
            <summary>
            Returns the file from disk or (if not available on the disk) from database.
            </summary>
            <param name="avatarInfo">Avatar info object</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarFileBinary(System.Guid)">
            <summary>
            Returns the file binary from database and save it in file system
            </summary>
            <param name="guid">Avatar guid</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.UpdatePhysicalFileLastWriteTime(System.String,System.String)">
            <summary>
            Update file last modified attribute, so it's evaluated us up to date.
            </summary>
            <param name="fileName">File name</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetImageThumbnail(CMS.Membership.AvatarInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns image thumbnail (from the disk - if already exists, or create new one and save it to disk - if doesn't exist).
            </summary>
            <param name="avatarInfo">Avatar info</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.EnsureThumbnailFile(CMS.Membership.AvatarInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures the thumbnail avatar.
            </summary>
            <param name="avatarInfo">Avatar info</param>
            <param name="width">File width</param>
            <param name="height">File height</param>
            <param name="maxSideSize">Maximum side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.EnsureAvatarPhysicalFile(CMS.Membership.AvatarInfo)">
            <summary>
            Ensures the avatar file in the file system and returns the path to the file.
            </summary>
            <param name="avatarInfo">Avatar info</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetFileFolder(System.String)">
            <summary>
            Returns physical path to the avatar file folder (avatars files folder path + subfolder).
            </summary>
            <param name="guid">Avatar file GUID</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetFilePhysicalPath(System.String,System.String,System.String)">
            <summary>
            Returns physical path to the file.
            </summary>
            <param name="siteName">Site name</param>
            <param name="guid">File GUID</param>
            <param name="extension">File extension</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetFilesFolderPath">
            <summary>
            Returns physical path to folder with avatar files which are associated with the specified site.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.SaveAvatarFileToDisk(System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean)">
            <summary>
            Saves avatar file to the disk.
            </summary>
            <param name="guid">File GUID</param>
            <param name="fileName">File name</param>
            <param name="fileExtension">File extension</param>
            <param name="fileData">File data (byte[] or Stream)</param>
            <param name="synchronization">Indicates if this function is called from "ProcessTask"</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.CanResizeImage(CMS.Membership.AvatarInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks whether the image should be processed (resized) by the Image manager (if the destination size is smaller).
            </summary>
            <param name="avatarInfo">Avatar file info to check</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <param name="maxSideSize">Max side size</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GenerateThumbnails">
            <summary>
            Returns the current settings whether the thumbnails should be generated.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.UploadAvatar(CMS.Membership.AvatarInfo,System.Web.HttpPostedFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Uploads and resizes (if needed) avatar to specified AvatarInfo and sets its properties.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.UploadAvatar(CMS.Membership.AvatarInfo,CMS.Base.IUploadedFile,System.Int32,System.Int32,System.Int32)">
            <summary>
            Uploads and resizes (if needed) avatar to specified AvatarInfo and sets its properties.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetUniqueAvatarName(System.String)">
            <summary>
            Returns unique name for avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoInternal(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinaryInternal(System.Int32)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarId">Avatar id</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinaryInternal(System.Guid)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="guid">GUID of the avatar to return</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.GetAvatarInfoWithoutBinaryInternal(System.String)">
            <summary>
            Returns the AvatarInfo structure for the specified avatar.
            </summary>
            <param name="avatarName">Avatar name</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.SetAvatarInfoInternal(CMS.Membership.AvatarInfo)">
            <summary>
            Sets (updates or inserts) specified avatar.
            </summary>
            <param name="avatar">Avatar to set</param>
        </member>
        <member name="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarInfoInternal(CMS.Membership.AvatarInfo)">
            <summary>
            Deletes specified avatar.
            </summary>
            <param name="infoObj">Avatar object</param>
        </member>
        <member name="T:CMS.Membership.AvatarService">
            <summary>
            Service with avatar helper methods.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarService.#ctor(CMS.Core.IEventLogService,CMS.Membership.IAvatarInfoProvider,CMS.Membership.IUserInfoProvider)">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.AvatarService"/>
            </summary>
            <param name="eventLogService">Event log service</param>
            <param name="avatarInfoProvider">Provider for <see cref="T:CMS.Membership.AvatarInfo"/> management.</param>
            <param name="userInfoProvider">Provider for <see cref="T:CMS.Membership.UserInfo"/> management.</param>
        </member>
        <member name="M:CMS.Membership.AvatarService.UpdateAvatar(CMS.Base.IUploadedFile,System.Int32,System.String)">
            <summary>
            Sets or updates existing avatar for specified user.
            </summary>
            <param name="uploadedFile">Uploaded file</param>
            <param name="userId">User id</param>
            <param name="siteName">Site name</param>
            <returns><c>true</c> when avatar was successfully uploaded; otherwise <c>false</c>. Avatar is not uploaded when not detected as image or user is public.</returns>
        </member>
        <member name="M:CMS.Membership.AvatarService.GetAvatarUrl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns URL for avatar image specified by <paramref name="avatarId"/>.
            </summary>
            <param name="avatarId">Avatar id</param>
            <param name="maxSideSize">Maximal side size value</param>
            <param name="width">Maximal width</param>
            <param name="height">Maximal height</param>
        </member>
        <member name="M:CMS.Membership.AvatarService.DeleteAvatar(System.Int32)">
            <summary>
            Removes avatar for specific user.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="T:CMS.Membership.CMSOutputAvatar">
            <summary>
            Summary description for CMSOutputAvatar.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Avatar">
            <summary>
            Avatar file info without AvatarBinary.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.OutputData">
            <summary>
            Output file data.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.LastModified">
            <summary>
            Time when the avatar file was last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Width">
            <summary>
            Requested output width.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Height">
            <summary>
            Requested output Height.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.MaxSideSize">
            <summary>
            Requested output MaxSideSize.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.RedirectTo">
            <summary>
            If set, file should be redirected to the file system.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.DataLoaded">
            <summary>
            Returns true if the data is loaded to the object.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.MimeType">
            <summary>
            Mime type.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.PhysicalFile">
            <summary>
            Physical file path to the data.
            </summary>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Resized">
            <summary>
            If true, the file is resized version of the file.
            </summary>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.#ctor(CMS.Membership.AvatarInfo,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="ai">Avatar info</param>
            <param name="data">Output file data</param>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.EnsureData(System.Byte[])">
            <summary>
            Ensures that the object contains the output data.
            </summary>
            <param name="defaultData">Default data which should be loaded if data required</param>
            <returns>Returns true if new data has been loaded</returns>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.LoadData(System.Byte[])">
            <summary>
            Loads the data to the object.
            </summary>
            <param name="data">New data</param>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.Membership.CMSOutputAvatar.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.Membership.CMSOutputAvatar.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Membership.IAvatarInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.AvatarInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Membership.IAvatarService">
            <summary>
            Service with avatar helper methods.
            </summary>
        </member>
        <member name="M:CMS.Membership.IAvatarService.UpdateAvatar(CMS.Base.IUploadedFile,System.Int32,System.String)">
            <summary>
            Sets or updates existing avatar for specified user.
            </summary>
            <param name="uploadedFile">Uploaded file</param>
            <param name="userId">User id</param>
            <param name="siteName">Site name</param>
            <returns><c>true</c> when avatar was successfully uploaded; otherwise <c>false</c>. Avatar is not uploaded when not detected as image or user is public.</returns>
        </member>
        <member name="M:CMS.Membership.IAvatarService.GetAvatarUrl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns unresolved URL (starting with ~/) for avatar image specified by <paramref name="avatarId"/>.
            </summary>
            <param name="avatarId">Avatar id</param>
            <param name="maxSideSize">Maximal side size value</param>
            <param name="width">Maximal width</param>
            <param name="height">Maximal height</param>
        </member>
        <member name="M:CMS.Membership.IAvatarService.DeleteAvatar(System.Int32)">
            <summary>
            Removes avatar for specified user.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="T:CMS.Membership.AuthenticationEventArgs">
            <summary>
            Authentication event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.User">
            <summary>
            Authenticated user.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.Password">
            <summary>
            Password.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.Passcode">
            <summary>
            Passcdoe for multifactor authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationEventArgs.SiteName">
            <summary>
            Name of the site to which the user tries to autenticate.
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationHandler">
            <summary>
            Authentication handler
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationHandler.StartEvent(CMS.Membership.UserInfo@,System.String,System.String,System.String,System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">Current info of the authenticated user (through regular authentication)</param>
            <param name="username">Username to authenticate</param>
            <param name="password">Password to authenticate</param>
            <param name="passcode">Passcode to authenticate</param>
            <param name="siteName">Name of the site to which the user tries to autenticate. If the parameter is not set, current site name from context is used</param>
        </member>
        <member name="T:CMS.Membership.AuthenticationRequestEventArgs">
            <summary>
            Authentication request event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthenticationRequestEventArgs.RequestedUrl">
            <summary>
            Url that was requested when the event was raised
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthenticationRequestHandler">
            <summary>
            Authentication request handler.
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthenticationRequestHandler.StartEvent(System.String)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="requestedUrl">Url that was requested when the event was raised</param>
        </member>
        <member name="T:CMS.Membership.SignOutEventArgs">
            <summary>
            SignOut event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.SignOutEventArgs.User">
            <summary>
            Authenticated user
            </summary>
        </member>
        <member name="P:CMS.Membership.SignOutEventArgs.SignOutUrl">
            <summary>
            Gets or sets the SignOut URL
            </summary>
        </member>
        <member name="T:CMS.Membership.SignOutHandler">
            <summary>
            SignOut handler
            </summary>
        </member>
        <member name="M:CMS.Membership.SignOutHandler.StartEvent(CMS.Membership.UserInfo,System.String@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">Current info of the authenticated user</param>
            <param name="signOutUrl">Sign out URL</param>
        </member>
        <member name="T:CMS.Membership.AuthorizationEventArgs">
            <summary>
            Authorization event arguments
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.User">
            <summary>
            User to check
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.ResourceName">
            <summary>
            Resource name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.PermissionName">
            <summary>
            Permission name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.ElementName">
            <summary>
            UI element name
            </summary>
        </member>
        <member name="P:CMS.Membership.AuthorizationEventArgs.Authorized">
            <summary>
            Authorization result
            </summary>
        </member>
        <member name="T:CMS.Membership.AuthorizationHandler">
            <summary>
            Authorization handler
            </summary>
        </member>
        <member name="M:CMS.Membership.AuthorizationHandler.StartResourceEvent(CMS.Membership.UserInfo,System.String,System.String,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">User info object</param>
            <param name="resourceName">Resource name to authorize</param>
            <param name="permissionName">Permission name</param>
            <param name="authorized">Current (system) authorization status</param>
        </member>
        <member name="M:CMS.Membership.AuthorizationHandler.StartClassEvent(CMS.Membership.UserInfo,System.String,System.String,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">User info object</param>
            <param name="className">Class name to authorize</param>
            <param name="permissionName">Permission name</param>
            <param name="authorized">Current (system) authorization status</param>
        </member>
        <member name="M:CMS.Membership.AuthorizationHandler.StartUIElementEvent(CMS.Membership.UserInfo,System.String,System.String,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="userInfo">User info object</param>
            <param name="resourceName">Resource name to authorize</param>
            <param name="elementName">UI element name</param>
            <param name="authorized">Current (system) authorization status</param>
        </member>
        <member name="T:CMS.Membership.SecurityEvents">
            <summary>
            Security events
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.SignOut">
            <summary>
            Fires when sign out of the user is performed
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthenticationRequested">
            <summary>
            Fires when current request is redirected to the secured area.
            </summary>
            <seealso cref="M:CMS.Membership.AuthenticationHelper.IsAuthenticationRedirect"/>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.Authenticate">
            <summary>
            Fires when authentication of the user is performed, allows to connect the authentication process to the external authentication provider
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.MultiFactorAuthenticate">
            <summary>
            Fires when multi-factor authentication of the user is performed, allows to customize way of sending passcode
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthorizeResource">
            <summary>
            Fires when resource permission authorization is requested
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthorizeClass">
            <summary>
            Fires when class permission authorization is requested
            </summary>
        </member>
        <member name="F:CMS.Membership.SecurityEvents.AuthorizeUIElement">
            <summary>
            Fires when UI element authorization is requested
            </summary>
        </member>
        <member name="T:CMS.Membership.ImpersonationCookieData">
            <summary>
            Simple object to persist user informations in cookies
            </summary>
        </member>
        <member name="P:CMS.Membership.ImpersonationCookieData.OriginalUserId">
            <summary>
            Gets or sets original user GUID
            </summary>
        </member>
        <member name="P:CMS.Membership.ImpersonationCookieData.ImpersonatedUserId">
            <summary>
            Gets or sets impersonated user GUID
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationCookieData.IsValid">
            <summary>
            Checks if Impersonation cookie data are valid,
            i.e. <see cref="P:CMS.Membership.ImpersonationCookieData.OriginalUserId"/> and <see cref="P:CMS.Membership.ImpersonationCookieData.ImpersonatedUserId"/> are not empty GUIDs.
            </summary>
            <returns>True, if both <see cref="P:CMS.Membership.ImpersonationCookieData.OriginalUserId"/> and <see cref="P:CMS.Membership.ImpersonationCookieData.ImpersonatedUserId"/> are set to any non-zero value.</returns>
        </member>
        <member name="M:CMS.Membership.ImpersonationCookieData.#ctor(System.Guid,System.Guid)">
            <summary>
            Creates object with given user GUIDs
            </summary>
        </member>
        <member name="T:CMS.Membership.ImpersonationHelper">
            <summary>
            Provides support for safely storing and restoring user information in cookies
            </summary>
        </member>
        <member name="F:CMS.Membership.ImpersonationHelper.IMPERSONATION_KEY">
            <summary>
            Cookie key for impersonated user
            </summary>
        </member>
        <member name="F:CMS.Membership.ImpersonationHelper.PURPOSE">
            <summary>
            MachineKey protection purpose
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.GetDataFromCookie">
            <summary>
            Returns data object from cookie with given name
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.EncodeData(CMS.Membership.ImpersonationCookieData)">
            <summary>
            Encodes given data object to string representation
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.DecodeData(System.String)">
            <summary>
            Decodes data object from string representation
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.Serialize(CMS.Membership.ImpersonationCookieData)">
            <summary>
            Serializes <see cref="P:CMS.Membership.ImpersonationCookieData.ImpersonatedUserId"/> and <see cref="P:CMS.Membership.ImpersonationCookieData.OriginalUserId"/> of <paramref name="data"/> to byte array.
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.Deserialize(System.Byte[])">
            <summary>
            De-serializes <see cref="P:CMS.Membership.ImpersonationCookieData.ImpersonatedUserId"/> and <see cref="P:CMS.Membership.ImpersonationCookieData.OriginalUserId"/> from <paramref name="bytes"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.GetCookie">
            <summary>
            Returns impersonation cookie
            </summary>
            <returns></returns>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.SetCookie(CMS.Base.IUserInfo,CMS.Base.IUserInfo)">
            <summary>
            Sets impersonation cookie data for given users
            </summary>
        </member>
        <member name="M:CMS.Membership.ImpersonationHelper.RemoveCookie">
            <summary>
            Removes impersonation cookie data
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipMethods">
            <summary>
            Membership methods - wrapping methods for macro resolver.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.GetAvatarUrl(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns avatar image URL, if avatar is not defined returns empty string.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsAuthorizedPerResource(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if given user is granted with specified permission
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsAuthorizedPerUIElement(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if current user is granted with permission to given UI element.
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.CheckPrivilegeLevel(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns true if user fulfils the required privilege level (the higher level contains all children: GlobalAdmin -> Admin -> Editor -> None).
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.IsInRole(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user is in role
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.HasAnyMembership(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user has any membership
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.HasMembership(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Tests whether user has membership
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="M:CMS.Membership.MembershipMethods.GetFormattedUserName(CMS.MacroEngine.EvaluationContext,System.Object[])">
            <summary>
            Returns formatted username in format: full name (nickname) if nickname specified otherwise full name (username).
            Allows you to customize how the usernames will look like throughout the admin UI. 
            </summary>
            <param name="context">Evaluation context with child resolver</param>
            <param name="parameters">Method parameters</param>
        </member>
        <member name="T:CMS.Membership.IMembershipInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.MembershipInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Membership.IMembershipRoleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.MembershipRoleInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Membership.IMembershipRoleInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.MembershipRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IMembershipRoleInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.MembershipRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IMembershipRoleInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
        </member>
        <member name="M:CMS.Membership.IMembershipRoleInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
        </member>
        <member name="T:CMS.Membership.IMembershipUserInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.MembershipUserInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Membership.IMembershipUserInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.MembershipUserInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.MembershipUserInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IMembershipUserInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.MembershipUserInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.MembershipUserInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IMembershipUserInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.MembershipUserInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
        </member>
        <member name="M:CMS.Membership.IMembershipUserInfoProvider.Add(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Membership.MembershipUserInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <param name="validTo">Date to which membership is valid for user</param>
            <param name="sendNotification">Indicates, if notification will be sent to user when membership expires</param>
        </member>
        <member name="T:CMS.Membership.MembershipInfo">
            <summary>
            Membership data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipID">
            <summary>
            Membership object ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipLastModified">
            <summary>
            Date and time when the membership object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipDescription">
            <summary>
            Membership object description.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipDisplayName">
            <summary>
            Membership object display name.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipSiteID">
            <summary>
            Membership object site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipGUID">
            <summary>
            Membership object unique identifier.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipInfo.MembershipName">
            <summary>
            Membership object code name.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.#ctor">
            <summary>
            Constructor - Creates an empty Membership object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new Membership object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Membership.MembershipInfoProvider">
            <summary>
            Class providing Membership management.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.MembershipInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMemberships">
            <summary>
            Returns the query for all memberships.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetUserMemberships(System.Int32)">
            <summary>
            Returns dataset of all valid memberships for given user
            </summary>
            <param name="userID">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfo(System.Int32)">
            <summary>
            Returns membership with specified ID.
            </summary>
            <param name="membershipId">Membership ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfo(System.Guid,System.Int32)">
            <summary>
            Returns membership with specified GUID.
            </summary>
            <param name="membershipGuid">Membership GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetMembershipInfo(System.String,System.String)">
            <summary>
            Returns membership with specified name.
            </summary>
            <param name="membershipName">Membership name</param>                
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.SetMembershipInfo(CMS.Membership.MembershipInfo)">
            <summary>
            Sets (updates or inserts) specified membership.
            </summary>
            <param name="membershipObj">Membership to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.DeleteMembershipInfo(CMS.Membership.MembershipInfo)">
            <summary>
            Deletes specified membership.
            </summary>
            <param name="membershipObj">Membership to be deleted</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.DeleteMembershipInfo(System.Int32)">
            <summary>
            Deletes membership with specified ID.
            </summary>
            <param name="membershipId">Membership ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetUserMembershipsInternal(System.Int32)">
            <summary>
            Returns collection with valid memberships associated to user
            </summary>
            <param name="userID">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetInfoByCodeName(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetInfoByCodeNameAsync(System.String,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the given code name.
            </summary>
            <param name="codeName">Code name</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetInfoByGuid(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
        </member>
        <member name="M:CMS.Membership.MembershipInfoProvider.GetInfoByGuidAsync(System.Guid,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets an instance of info object based on the GUID.
            </summary>
            <param name="guid">GUID of the object</param>
            <param name="siteId">Site ID</param>
            <param name="useHashtable">If true, the object is taken through the hashtable</param>
            <param name="cancellationToken">The cancellation instruction.</param>
        </member>
        <member name="F:CMS.Membership.MembershipListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipListInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.MembershipListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipRoleInfo">
            <summary>
            MembershipRoleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipRoleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipRoleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipRoleInfo.RoleID">
            <summary>
            ID of role object.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipRoleInfo.MembershipID">
            <summary>
            ID of membership object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipRoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipRoleInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks the permissions of the object.
            </summary>
            <param name="permission">Permission type</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="T:CMS.Membership.MembershipRoleInfoProvider">
            <summary>
            Class providing MembershipRoleInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetMembershipRoles">
            <summary>
            Returns the query for all relationships between memberships and roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.MembershipRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.MembershipRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetMembershipRoleInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and role.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.SetMembershipRoleInfo(CMS.Membership.MembershipRoleInfo)">
            <summary>
            Sets relationship between specified membership and role.
            </summary>
            <param name="infoObj">Membership-role relationship to be set</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.DeleteMembershipRoleInfo(CMS.Membership.MembershipRoleInfo)">
            <summary>
            Deletes relationship between specified membership and role.
            </summary>
            <param name="infoObj">Membership-role relationship to be deleted</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.AddMembershipToRole(System.Int32,System.Int32)">
            <summary>
            Sets relationship between specified membership and role.
            </summary>	
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.MembershipRoleInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="roleId">Role ID.</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.RemoveMembershipFromRole(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified membership and role.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipRoleInfoProvider.GetMembershipRoleInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and role.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="T:CMS.Membership.MembershipUserInfo">
            <summary>
            MembershipUserInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipUserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipUserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.MembershipUserID">
            <summary>
            Membership user ID
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.UserID">
            <summary>
            ID of User object.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.MembershipID">
            <summary>
            ID of membership object.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.ValidTo">
            <summary>
            Date to membership is valid for given user.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUserInfo.SendNotification">
            <summary>
            Indicates if given user is to be notified in advance about expiration of his membership.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipUserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipUserInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Membership.MembershipUserInfoProvider">
            <summary>
            Class providing MembershipUserInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetMembershipUsers">
            <summary>
            Returns the query for all relationships between memberships and users.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.MembershipUserInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.MembershipUserInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.MembershipUserInfo"/> binding structure.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.MembershipUserInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetMembershipUserInfo(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and User.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.SetMembershipUserInfo(CMS.Membership.MembershipUserInfo)">
            <summary>
            Sets relationship between specified membership and User.
            </summary>
            <param name="infoObj">Membership-User relationship to be set</param>
            <remarks>
            Calling this method does not invalidate the user whose membership binding is being set. Consider using <see cref="M:CMS.Membership.MembershipUserInfoProvider.AddMembershipToUser(System.Int32,System.Int32,System.DateTime,System.Boolean)"/>
            or invalidating the <see cref="T:CMS.Membership.UserInfo"/> explicitly.
            </remarks>
            <seealso cref="M:CMS.Membership.UserInfoProvider.InvalidateUser(System.Int32)"/>
            <seealso cref="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Invalidate(System.Boolean)"/>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.DeleteMembershipUserInfo(CMS.Membership.MembershipUserInfo)">
            <summary>
            Deletes relationship between specified membership and user.
            </summary>
            <param name="infoObj">Membership-user relationship to be deleted</param>
            <remarks>
            Calling this method does not invalidate the user the membership binding is being removed from. Consider using <see cref="M:CMS.Membership.MembershipUserInfoProvider.RemoveMembershipFromUser(System.Int32,System.Int32)"/>
            or invalidating the <see cref="T:CMS.Membership.UserInfo"/> explicitly.
            </remarks>
            <seealso cref="M:CMS.Membership.UserInfoProvider.InvalidateUser(System.Int32)"/>
            <seealso cref="M:CMS.DataEngine.BaseInfo.GeneralizedInfoWrapper.Invalidate(System.Boolean)"/>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.Add(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Creates <see cref="T:CMS.Membership.MembershipUserInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <param name="validTo">Date to which membership is valid for user.</param>
            <param name="sendNotification">Indicates, if notification will be sent to user when membership expires.</param>
            <remarks>
            Invalidates the <see cref="T:CMS.Membership.UserInfo"/> object of the user whose membership is being modified.
            </remarks>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.AddMembershipToUser(System.Int32,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Sets relationship between specified membership and user.
            </summary>	
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
            <param name="validTo">Date to which membership is valid for user</param>
            <param name="sendNotification">Indicates, if notification will be sent to user when membership expires</param>
            <remarks>
            Invalidates the <see cref="T:CMS.Membership.UserInfo"/> object of the user whose membership is being modified.
            </remarks>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.MembershipUserInfo"/> binding.
            </summary>
            <param name="membershipId">Membership ID.</param>
            <param name="userId">User ID.</param>
            <remarks>
            Invalidates the <see cref="T:CMS.Membership.UserInfo"/> object of the user whose membership is being modified.
            </remarks>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.RemoveMembershipFromUser(System.Int32,System.Int32)">
            <summary>
            Deletes relationship between specified membership and user.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
            <remarks>
            Invalidates the <see cref="T:CMS.Membership.UserInfo"/> object of the user whose membership is being modified.
            </remarks>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetExpiringMemberships(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns dataset of all expiring memberships matching given parameters along with relevant user and membership information.
            </summary>
            <param name="days">Number of days in which the memberships will expire.</param>
            <param name="siteId">Site ID. Set to 0 for global expiring memberships.</param>
            <param name="where">Additional where condition</param>
            <param name="onlyWithSendNotification">Get only memberships with send notification flag set to true.</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetMembershipUserInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns relationship between specified membership and user.
            </summary>
            <param name="membershipId">Membership ID</param>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.MembershipUserInfoProvider.GetExpiringMembershipsInternal(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns dataset of all expiring memberships matching given parameters along with relevant user and membership information.
            </summary>
            <param name="days">Number of days in which the memberships will expire.</param>
            <param name="siteId">Site ID</param>
            <param name="where">Additional where condition</param>
            <param name="onlyWithSendNotification">Get only memberships with send notification flag set to true.</param>
        </member>
        <member name="T:CMS.Membership.MembershipUsageDataSource">
            <summary>
            Module usage data for membership.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipUsageDataSource.Name">
            <summary>
            Membership usage data source name.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipUsageDataSource.GetData">
            <summary>
            Get membership usage data.
            </summary>
        </member>
        <member name="T:CMS.Membership.EventLogDataHandler">
            <summary>
            Handler user related data in event log.
            </summary>
        </member>
        <member name="P:CMS.Membership.EventLogDataHandler.SkipOriginalUserName">
            <summary>
            Indicates whether original user name should be added to event.
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarExport">
            <summary>
            Handles special actions during the Avatar export process.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarExport.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.AvatarImport">
            <summary>
            Handles special actions during the Avatar import process.
            </summary>
        </member>
        <member name="M:CMS.Membership.AvatarImport.Init">
            <summary>
            Initializes import handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.ExportSpecialActions">
            <summary>
            Handles special actions during the export process.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.ImportSpecialActions">
            <summary>
            Handles special actions during the import process.
            </summary>
        </member>
        <member name="M:CMS.Membership.ImportSpecialActions.Init">
            <summary>
            Initializes export handlers
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipContext">
            <summary>
            Membership related context methods and variables.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipContext.MF_AUTHENICATION_INFO">
            <summary>
            Session key used for information about partially authentication.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.CurrentUserProfile">
            <summary>
            Current user info object according the URL parameter of the current request.
            It is available when the request contains parameters "userid", "username" or "userguid" with valid value of the user.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.ImpersonatedUserName">
            <summary>
            Gets user name of impersonated user.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.OriginalUserName">
            <summary>
            Gets original user name in case that current user is impersonated.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.AuthenticatedUser">
            <summary>
            Returns current authenticated user.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.LogUnsupportedUsageForCurrentRequestStage">
            <summary>
            Logs error to the eventlog when property called prior <see cref="F:CMS.Base.RequestEvents.Authenticate"/> event.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.IsBeforeAuthenticateRequest">
            <summary>
            Indicates whether application stage is before authentication request.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserAccountLockedDueToInvalidLogonAttempts">
            <summary>
            Indicates if user reached maximal allowed number of invalid logon attempts.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserAccountLockedDueToPasswordExpiration">
            <summary>
            Indicates if user account was locked because its password expired.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.MFAuthenticationTokenNotInitialized">
            <summary>
            Indicates if multi-factor token ID was initialized.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserAuthenticationFailedDueToInvalidPasscode">
            <summary>
            Indicates if login failed due to invalid passcode.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.UserIsPartiallyAuthenticated">
            <summary>
            Indicates if user is partially authenticated. Previously inserted username and password were correct.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipContext.SignOutPending">
            <summary>
            If true, SignOut method was called in this method and user is figuratively signed out.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.CurrentUserIsImpersonated">
            <summary>
            Indicates whether currently authenticated user is impersonated.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.GetCurrentUserProfile">
            <summary>
            Returns information on the current user according user ID/ user name specified as an URL parameter of the current request
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.GetImpersonatingUser">
            <summary>
            Gets impersonating user if the current <see cref="P:CMS.Membership.MembershipContext.AuthenticatedUser"/> is impersonated, otherwise null.
            </summary>
            <exception cref="T:System.Security.SecurityException">Data from impersonation cookie are invalid.</exception>
        </member>
        <member name="M:CMS.Membership.MembershipContext.CreatePartialAuthenticationInfo(System.DateTime)">
            <summary>
            Get hash stamp which represents valid period for user.
            </summary>
            <param name="time">DateTime.</param>
        </member>
        <member name="M:CMS.Membership.MembershipContext.SetUserPartialAuthentication">
            <summary>
            Partially authenticates the user.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.SetUserPartialAuthentication(System.DateTime)">
            <summary>
            Partially authenticates the user.
            </summary>
            <param name="dateTime">Datetime.</param>
        </member>
        <member name="M:CMS.Membership.MembershipContext.ClearUserPartialAuthentication">
            <summary>
            Clear authentication info.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.IsUserPartiallyAuthenticated">
            <summary>
            Checks if user is partially authenticated.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipContext.IsUserPartiallyAuthenticated(System.DateTime)">
            <summary>
            Checks if user is partially authenticated.
            </summary>
            <param name="dateTime">Datetime.</param>
        </member>
        <member name="M:CMS.Membership.MembershipContext.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipHandlers">
            <summary>
            Membership handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.Init">
            <summary>
            Initializes the membership handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.HandleAdminEmergencyReset(System.Object,System.EventArgs)">
            <summary>
            Handles admin emergency reset 
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.HandleAuthenticationRedirect(System.Object,System.EventArgs)">
            <summary>
            Handles the authentication redirect within current request
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.HandleAutomaticSignIn(System.Object,System.EventArgs)">
            <summary>
            Handles automatic sign-in for single sign-on
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipHandlers.DeleteUserCultures(System.Object,CMS.DataEngine.ObjectEventArgs)">
            <summary>
            Deletes the user-culture bindings when the site-culture binding is deleted
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipModule">
            <summary>
            Represents the Membership module.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.PASSWORD_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for password.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.REGISTRATION_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for registration.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.REGISTRATION_APPROVAL_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for registration approval.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.MEMBERSHIP_REGISTRATION_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for membership registration.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.MEMBERSHIP_EXPIRATION_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for membership expiration.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.MEMBERSHIP_CHANGE_PASSWORD_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for membership change password.
            </summary>
        </member>
        <member name="F:CMS.Membership.MembershipModule.MEMBERSHIP_UNLOCK_ACCOUNT_EMAIL_TEMPLATE_TYPE_NAME">
            <summary>
            Name of email template type for membership unlock account.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.OnInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.InitImportExport">
            <summary>
            Initializes import/export handlers
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.InitMacros">
            <summary>
            Initializes the Membership macros
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.RegisterTaskAliases">
            <summary>
            Registers tasks aliases for the membership scheduled tasks
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.Membership.MembershipModuleMetadata">
            <summary>
            Represents the Membership module metadata.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipResolvers">
            <summary>
            Resolvers used in e-mail templates and other macro visual components.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetMembershipResolverBase(CMS.Membership.UserInfo,CMS.MacroEngine.MacroResolver,System.Boolean,System.Boolean)">
            <summary>
            Returns the basic membership resolver.
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <param name="addUserFields">If true, FirstName, UserFullName, LastName, Email and UserName are registered to resolver</param>
            <param name="setCulture">If true, newly created resolver has culture set to preferred culture of <paramref name="user"/></param>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetMembershipChangePasswordResolver(CMS.Membership.UserInfo,System.String,System.String,CMS.MacroEngine.MacroResolver,System.String)">
            <summary>
            Builds and returns a resolver for email templates of type 'Membership change password'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="resetPasswordUrl">The URL used to reset the password</param>
            <param name="cancelUrl">URL allowing user to cancel the request</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <param name="ipAddress">The IP address where the password reset request came from</param>
            <remarks>If <paramref name="buildFrom"/> is null then newly created resolver has culture set to the preferred culture of <paramref name="user"/></remarks>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetMembershipPasswordResetConfirmationResolver(CMS.Membership.UserInfo,CMS.MacroEngine.MacroResolver)">
            <summary>
            Builds and returns a resolver for email templates of type 'Membership password reset confirmation'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <remarks>If <paramref name="buildFrom"/> is null then newly created resolver has culture set to the preferred culture of <paramref name="user"/></remarks>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetPasswordResolver(CMS.Membership.UserInfo,System.String,CMS.MacroEngine.MacroResolver)">
            <summary>
            Builds and returns a resolver for email templates of type 'Password'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="password">User's password</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <remarks>If <paramref name="buildFrom"/> is null then newly created resolver has culture set to the preferred culture of <paramref name="user"/></remarks>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetRegistrationResolver(CMS.Membership.UserInfo,CMS.MacroEngine.MacroResolver)">
            <summary>
            Builds and returns a resolver for email templates of type 'Registration'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="buildFrom">Resolver to build the result from</param>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetRegistrationApprovalResolver(CMS.Membership.UserInfo,CMS.MacroEngine.MacroResolver)">
            <summary>
            Builds and returns a resolver for email templates of type 'Registration approval'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <remarks>If <paramref name="buildFrom"/> is null then newly created resolver has culture set to the preferred culture of <paramref name="user"/></remarks>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetMembershipExpirationResolver(CMS.Membership.UserInfo,System.Data.DataTable,CMS.MacroEngine.MacroResolver)">
            <summary>
            Builds and returns a resolver for email templates of type 'Membership expiration'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="membershipTable">Table of user's memberships</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <remarks>If <paramref name="buildFrom"/> is null then newly created resolver has culture set to the preferred culture of <paramref name="user"/></remarks>
        </member>
        <member name="M:CMS.Membership.MembershipResolvers.GetMembershipUnlockAccountResolver(CMS.Membership.UserInfo,System.String,System.String,CMS.MacroEngine.MacroResolver)">
            <summary>
            Builds and returns a resolver for email templates of type 'Account unlock'
            </summary>
            <param name="user">User to be used as a data source</param>
            <param name="resetPasswordUrl">URL to reset password page</param>
            <param name="unlockAccountUrl">URL to unlock account page</param>
            <param name="buildFrom">Resolver to build the result from</param>
            <remarks>If <paramref name="buildFrom"/> is null then newly created resolver has culture set to the preferred culture of <paramref name="user"/></remarks>
        </member>
        <member name="T:CMS.Membership.UserSearchIndexer">
            <summary>
            Search indexer for users index
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.IsTaskProcessingAllowed(CMS.Search.SearchTaskInfo)">
            <summary>
            Indicates if task processing is allowed for given task.
            </summary>
            <param name="sti">Search task to process.</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.ExecuteProcessTask(CMS.Search.SearchTaskInfo)">
            <summary>
            Processes the index task
            </summary>
            <param name="sti">Search task</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.Rebuild(CMS.Search.SearchIndexInfo)">
            <summary>
            Rebuilds the user index
            </summary>
            <remarks>This method needs to be run in a thread safe way such as smart search task queue.</remarks>
            <param name="indexInfo">Search index</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.CheckResultPermissions(CMS.Search.SearchResults,CMS.Search.ILuceneSearchDocument,System.Int32)">
            <summary>
            Checks the permissions for the given result document
            </summary>
            <param name="settings">Check permission settings</param>
            <param name="currentDoc">Current result document</param>
            <param name="index">Current document index</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.LoadResults(System.Collections.Generic.IEnumerable{CMS.Search.ILuceneSearchDocument},CMS.Base.SafeDictionary{System.String,System.Data.DataRow})">
            <summary>
            Loads the results to the given result collection
            </summary>
            <param name="results">Collection of results to load</param>
            <param name="result">Dictionary of the loaded results indexed by their key</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.GetDataClassInfo(CMS.Search.ILuceneSearchDocument)">
            <summary>
            Returns the data class info for the given search document
            </summary>
            <param name="obj">Document object</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.FillSearchResult(CMS.Search.SearchResultItem,System.Data.DataRow,CMS.Search.ILuceneSearchDocument)">
            <summary>
            Fills the data to the search result data row
            </summary>
            <param name="resultItem">Result item to be filled with postprocessed results</param>
            <param name="resultDr">Source data row with raw search results</param>
            <param name="doc">Found search document</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.GetSearchImageUrl(CMS.Search.SearchResultItem)">
            <summary>
            Returns URL to given search result item.
            </summary>
            <param name="resultItem">Search result item for which to return an URL.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="resultItem"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.GetSearchFields(CMS.Search.SearchIndexInfo,CMS.DataEngine.ISearchFields)">
            <summary>
            Gets the collection of search fields. When no SearchFields collection is provided, new is created.
            </summary>
            <param name="index">Search index</param>
            <param name="searchFields">Search fields collection</param>
        </member>
        <member name="M:CMS.Membership.UserSearchIndexer.IsClassNameRelevantToIndex(System.String,CMS.DataEngine.SearchIndexSettings)">
            <summary>
            Checks if given <paramref name="className"/> is related to search index settings from <paramref name="indexSettings"/>.
            </summary>
            <param name="className">Class name</param>
            <param name="indexSettings">Search index settings</param>
        </member>
        <member name="T:CMS.Membership.DeleteAvatarWebFarmTask">
            <summary>
            Web farm task used to delete membership avatars.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.Membership.DeleteAvatarWebFarmTask.FileExtension">
            <summary>
            Gets or sets extension of the file to be deleted.
            </summary>
        </member>
        <member name="P:CMS.Membership.DeleteAvatarWebFarmTask.FileGuid">
            <summary>
            Gets or sets identifier of the file to be deleted.
            </summary>
        </member>
        <member name="P:CMS.Membership.DeleteAvatarWebFarmTask.DeleteDirectory">
            <summary>
            Gets or sets a value that indicates whether directory will be deleted.
            </summary>
        </member>
        <member name="M:CMS.Membership.DeleteAvatarWebFarmTask.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CMS.Membership.DeleteAvatarWebFarmTask"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.DeleteAvatarWebFarmTask.ConditionMethod">
            <summary>
            Returns true if the synchronization of the deletion of the BizForm files is allowed
            </summary>
        </member>
        <member name="M:CMS.Membership.DeleteAvatarWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.Membership.AvatarInfoProvider.DeleteAvatarFile(System.String,System.String,System.Boolean,System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.Membership.MembershipSynchronization">
            <summary>
            Web farm synchronization for membership
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipSynchronization.SynchronizeAvatars">
            <summary>
            Gets or sets value that indicates whether file synchronization for avatars is enabled.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipSynchronization.Init">
            <summary>
            Initializes the tasks for media files synchronization
            </summary>
        </member>
        <member name="T:CMS.Membership.UpdateAvatarWebFarmTask">
            <summary>
            Web farm task used to update membership avatars.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="P:CMS.Membership.UpdateAvatarWebFarmTask.SynchronizeAvatars">
            <summary>
            Gets or sets value that indicates whether file synchronization for avatars is enabled.
            </summary>
        </member>
        <member name="P:CMS.Membership.UpdateAvatarWebFarmTask.FileExtension">
            <summary>
            Gets or sets extension of the file to be updated.
            </summary>
        </member>
        <member name="P:CMS.Membership.UpdateAvatarWebFarmTask.FileGuid">
            <summary>
            Gets or sets identifier of the file to be updated.
            </summary>
        </member>
        <member name="P:CMS.Membership.UpdateAvatarWebFarmTask.FileName">
            <summary>
            Gets or sets name of the file to be updated.
            </summary>
        </member>
        <member name="M:CMS.Membership.UpdateAvatarWebFarmTask.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:CMS.Membership.UpdateAvatarWebFarmTask"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.UpdateAvatarWebFarmTask.ConditionMethod">
            <summary>
            Returns true if the synchronization of the BizForm files is allowed
            </summary>
        </member>
        <member name="M:CMS.Membership.UpdateAvatarWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.Membership.AvatarInfoProvider.SaveAvatarFileToDisk(System.String,System.String,System.String,CMS.Core.BinaryData,System.Boolean)"/> method while passing it current class' properties as its parameters.
            </summary>
        </member>
        <member name="T:CMS.Membership.IRoleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.RoleInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Membership.IUserRoleInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.UserRoleInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Membership.IUserRoleInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.UserRoleInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.UserRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IUserRoleInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.UserRoleInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.UserRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IUserRoleInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.UserRoleInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
        </member>
        <member name="M:CMS.Membership.IUserRoleInfoProvider.Add(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Creates <see cref="T:CMS.Membership.UserRoleInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
            <param name="validTo">Date till user role connection is valid, or null.</param>
        </member>
        <member name="T:CMS.Membership.RoleInfo">
            <summary>
            Role info data container.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleInfo.OBJECT_TYPE">
            <summary>
            Role object type
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleInfo.TYPEINFO">
            <summary>
            Type information for standard role.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleDisplayName">
            <summary>
            Role Display Name.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleDescription">
            <summary>
            Role Description.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleName">
            <summary>
            Role Name.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleGUID">
            <summary>
            Role GUID.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.RoleInfo.RoleIsDomain">
            <summary>
            Indicates whether role is domain role.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty RoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new RoleInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Membership.RoleInfoProvider">
            <summary>
            Provides access to information about roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:CMS.Membership.RoleInfoProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoByGUID(System.Guid,System.Int32)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.String,System.Int32)">
            <summary>
            Returns the role info object with specified ID.
            </summary>
            <param name="roleName">Name of role to retrieve</param>
            <param name="siteId">Site ID which the role depends to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetExistingRoleInfo(System.String,System.Int32)">
            <summary>
            Returns info object of role.
            </summary>
            <param name="roleName">Role code name</param>
            <param name="siteID">Role site ID - if zero all roles are picked</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.String,System.String,System.Boolean)">
            <summary>
            Returns the role info object with specified role name.
            </summary>
            <param name="roleName">Role name to find. Role name with dots is considered as global.</param>
            <param name="siteName">Role's site name.</param>
            <param name="globalIfNoSite">If true, global role is returned, if no site role is found </param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.String,System.String)">
            <summary>
            Returns the role info object with specified role name.
            </summary>
            <param name="roleName">Name of role to retrieve. Role name with dots is considered as global. </param>
            <param name="siteName">Site which the role depends to. If empty global role is returned.</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfo(System.Int32)">
            <summary>
            Returns the RoleInfo structure for the specified role.
            </summary>
            <param name="roleId">RoleID to use for retrieving the role data</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.SetRoleInfo(CMS.Membership.RoleInfo)">
            <summary>
            Sets (updates or inserts) specified role.
            </summary>
            <param name="roleInfoObj">Role to set</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRoleInfo(CMS.Membership.RoleInfo)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleObj">Role object</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRoleInfo(System.Int32)">
            <summary>
            Deletes specified role.
            </summary>
            <param name="roleId">Role id</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoles">
            <summary>
            Returns the query for all roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetAllRoles(System.Int32)">
            <summary>
            Returns DataSet with roles of given site (if siteId > 0) or with all roles.
            </summary>
            <param name="siteId">SiteID of site which roles we want to return</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetAllRoles(System.Int32,System.Boolean)">
            <summary>
            Returns DataSet with roles of given site (if siteId > 0) with option to display GroupRoles.
            </summary>
            <param name="siteId">SiteID of site which roles we want to return</param>
            <param name="includingGeneric">If set to true then Generic roles are also returned in DataSet</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.RoleExists(System.String,System.String)">
            <summary>
            Returns true if role of given name exists.
            </summary>
            <param name="roleName">Name of role</param>
            <param name="siteName">Site that the role belongs to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleUsers(System.Int32)">
            <summary>
            Returns the table of the role users or null.
            </summary>
            <param name="roleId">Role ID for retrieving the table of users</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.DeleteRole(System.String,System.String)">
            <summary>
            Deletes the specified Role.
            </summary>
            <param name="roleName">Role to delete</param>
            <param name="siteName">Site that role to delete depends to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetGenericRoles">
            <summary>
            Returns list of generic roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredClassRoles(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified class permission.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredResourceRoles(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoInternal(System.String,System.Int32)">
            <summary>
            Returns the role info object with specified ID.
            </summary>
            <param name="roleName">Name of role to retrieve</param>
            <param name="siteId">Site ID which the role depends to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetExistingRoleInfoInternal(System.String,System.Int32)">
            <summary>
            Returns role object depending on site.
            </summary>
            <param name="roleName">Role code name</param>
            <param name="siteID">Site ID - if zero all roles are picked</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleInfoInternal(System.String,System.String,System.Boolean)">
            <summary>
            Returns the role info object with specified role name.
            </summary>
            <param name="roleName">Role name to find</param>
            <param name="siteName">Role's site name.</param>
            <param name="globalIfNoSite">If true, global role with the same codename is returned, when no site role is found</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.RoleExistsInternal(System.String,System.String)">
            <summary>
            Returns true if role of given name exists.
            </summary>
            <param name="roleName">Name of role</param>
            <param name="siteName">Site that the role belongs to</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRoleUsersInternal(System.Int32)">
            <summary>
            Returns the table of the role users or null.
            </summary>
            <param name="roleId">Role ID for retrieving the table of users</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredClassRolesInternal(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified class permission.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.GetRequiredResourceRolesInternal(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required roles for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.RoleInfoProvider.ValidateCodeName(CMS.Membership.RoleInfo)">
            <summary>
            Validates the role name. Returns <c>true</c> if the role name follows rules defined by <see cref="M:CMS.Helpers.ValidationHelper.IsCodeName(System.Object,System.Boolean)"/>
            </summary>
            <remarks>
            Since domain role name can be retrieved from different services with different rules for role name,
            validation for domain role names can be turned off using <c>CMSEnsureSafeRoleNames</c> key in web.config.
            </remarks>
            <param name="info">Role info object to check</param>
        </member>
        <member name="T:CMS.Membership.RoleName">
            <summary>
            Constants for system role names
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleName.EVERYONE">
            <summary>
            Special role which automatically covers all users.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleName.AUTHENTICATED">
            <summary>
            Special role which automatically covers all authenticated users.
            </summary>
        </member>
        <member name="F:CMS.Membership.RoleName.NOTAUTHENTICATED">
            <summary>
            Special role which automatically covers all not authenticated users.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserRoleInfo">
            <summary>
            UserRoleInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserRoleInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserRoleInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserRoleInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserRoleInfo.RoleID">
            <summary>
            Role ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserRoleInfo.ValidTo">
            <summary>
            Date to membership is valid for given user.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Clones user-role binding.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Result of the cloning - messages in this object will be altered by processing this method</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserRoleInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserRoleInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserRoleInfoProvider">
            <summary>
            Class providing UserRoleInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.UserRoleInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.UserRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.UserRoleInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.UserRoleInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetUserRoleInfo(System.Int32,System.Int32)">
            <summary>
            Returns the UserRoleInfo structure for the specified userRole.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetUserRoles">
            <summary>
            Returns the query for all relationships between users and roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.SetUserRoleInfo(CMS.Membership.UserRoleInfo)">
            <summary>
            Sets (updates or inserts) specified userRole.
            </summary>
            <param name="userRole">UserRole to set</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.Delete(CMS.Membership.UserRoleInfo)">
            <summary>
            Deletes the <paramref name="info"/> object from the underlying data store.
            </summary>
            <param name="info">Info object to be deleted.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.DeleteUserRoleInfo(CMS.Membership.UserRoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="infoObj">UserRole object</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.UserRoleInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.DeleteUserRoleInfo(CMS.Membership.UserInfo,CMS.Membership.RoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="userInfo">User which will be removed from role</param>
            <param name="roleInfo">Role from which will be the user removed</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.Add(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Creates <see cref="T:CMS.Membership.UserRoleInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="roleId">Role ID.</param>
            <param name="validTo">Date till user role connection is valid, or null.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="userId"/> or <paramref name="roleId"/> does not identify an existing user or role respectively.</exception>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Adds specified user to the role.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
            <param name="dt">Date till user role connection is valid</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(System.Int32,System.Int32)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(CMS.Membership.UserInfo,CMS.Membership.RoleInfo)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="ui">UserInfo</param>
            <param name="ri">RoleInfo</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.AddUserToRole(CMS.Membership.UserInfo,CMS.Membership.RoleInfo,System.DateTime)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="ui">UserInfo</param>
            <param name="ri">RoleInfo</param>
            <param name="dt">Date till user role connection is valid</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.IsUserInRole(System.Int32,System.Int32)">
            <summary>
            Returns true if the user is member of specified role.
            </summary>
            <param name="userId">User ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.GetUserRoleInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the UserRoleInfo structure for the specified userRole.
            </summary>
            <param name="userId">UserID</param>
            <param name="roleId">RoleID</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.DeleteUserRoleInfoInternal(CMS.Membership.UserRoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="infoObj">UserRole object</param>
        </member>
        <member name="M:CMS.Membership.UserRoleInfoProvider.DeleteUserRoleInfoInternal(CMS.Membership.UserRoleInfo,CMS.Membership.UserInfo,CMS.Membership.RoleInfo)">
            <summary>
            Deletes specified userRole.
            </summary>
            <param name="infoObj">UserRole object</param>
            <param name="userInfo">User which will be removed from role</param>
            <param name="roleInfo">Role from which will be the user removed</param>
        </member>
        <member name="F:CMS.Membership.UserRoleListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserRoleListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleListInfo.#ctor">
            <summary>
            Constructor - Creates an empty MembershipUserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserRoleListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new MembershipUserInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.UserRoleListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.Security.Password">
            <summary>
            Provides methods for password generation.
            </summary>
        </member>
        <member name="M:CMS.Membership.Security.Password.Generate(System.Int32,System.Int32)">
            <summary>
            Generates a random password of the specified length.
            </summary>
            <param name="length">
            The number of characters in the generated password.
            The length must be between 1 and 128 characters.
            </param>
            <param name="numberOfNonAlphanumericCharacters">
            The minimum number of non-alphanumeric characters
            (such as @, #, !, %, &amp;, and so on) in the generated password.
            </param>
            <returns>A random password of the specified length.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when
            <paramref name="length"/> is less than 1 or greater than 128
            -or-
            <paramref name="numberOfNonAlphanumericCharacters"/> is less than 0 or
            greater than <paramref name="length"/>.
            </exception>
        </member>
        <member name="M:CMS.Membership.Security.Password.IsDangerousString(System.String)">
            <summary>
            Returns <see langword="true"/> when <paramref name="str"/> potentially contains
            sequence of characters resembling HTML tag or encoded symbol.
            </summary>
        </member>
        <member name="M:CMS.Membership.Security.Password.IsAtoZ(System.Char)">
            <summary>
            Returns <see langword="true"/> when <paramref name="c"/> is English letter character from A to Z ignoring case.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSecurityHelper">
            <summary>
            Helper class to check the user security
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,CMS.DataEngine.BaseInfo,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given object with given permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="obj">Object to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerMetaFile(CMS.DataEngine.PermissionsEnum,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized per meta file for given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerResource(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given resource name and permission, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsReadOnlyPermission(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Returns true if the given permission is a read-only permission
            </summary>
            <param name="permission">Permission</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsReadOnlyPermission(System.String)">
            <summary>
            Returns true if the given permission is a read-only permission
            </summary>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerUIElement(System.String,System.String,System.Boolean,System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>        
            <param name="siteName">Site code name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerUIElement(System.String,System.String[],System.String,CMS.Membership.UserInfo)">
            <summary>
            Checks whether the user is authorized for given resource name and UIElements, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="elementNames">UIElement names to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.IsAuthorizedPerClassName(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User to check</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserSecurityHelper.GetPermissionName(CMS.DataEngine.PermissionsEnum)">
            <summary>
            Returns name of the permission specified by the enumeration value.
            </summary>
            <param name="permission">Enumeration value of the permission</param>
        </member>
        <member name="T:CMS.Membership.DeleteNonActivatedUser">
            <summary>
            Class contains definition of delete non activated users task.
            </summary>
        </member>
        <member name="M:CMS.Membership.DeleteNonActivatedUser.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Task execution method.
            </summary>
            <param name="task">Task to execute</param>        
        </member>
        <member name="T:CMS.Membership.MembershipReminder">
            <summary>
            Provides an ITask interface to send notifications to users about their expiring memberships.
            </summary>
        </member>
        <member name="M:CMS.Membership.MembershipReminder.Execute(CMS.Scheduler.TaskInfo)">
            <summary>
            Executes the task.
            </summary>
            <param name="task">Task to process</param>
        </member>
        <member name="M:CMS.Membership.MembershipReminder.GetNotificationEmail(CMS.Membership.MembershipReminder.NotificationData)">
            <summary>
            Returns notification email message according to given notification data.
            </summary>
            <param name="notification">Notification data</param>
        </member>
        <member name="T:CMS.Membership.MembershipReminder.NotificationData">
            <summary>
            Represents membership expiration notification data.
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipReminder.NotificationData.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipReminder.NotificationData.UserEmail">
            <summary>
            User e-mail
            </summary>
        </member>
        <member name="P:CMS.Membership.MembershipReminder.NotificationData.MembershipsTable">
            <summary>
            Table with user expiring memberhips.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserAccountLockEnum">
            <summary>
            Enum describing reason for locking user account
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockEnum.DisabledManually">
            <summary>
            User account was disabled manually.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockEnum.PasswordExpired">
            <summary>
            User account was disabled because his password expired.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockEnum.MaximumInvalidLogonAttemptsReached">
            <summary>
            User account was disabled because user reach maximum invalid logon attempts.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserAccountLockCode">
            <summary>
            Page mode code.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockCode.DisabledManually">
            <summary>
            User account was disabled manually.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockCode.PasswordExpired">
            <summary>
            User account was disabled because his password expired.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserAccountLockCode.MaximumInvalidLogonAttemptsReached">
            <summary>
            User account was disabled because user reach maximum invalid logon attempts.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserAccountLockCode.GetLockEnumFromString(System.String)">
            <summary>
            Gets the user account lock enumeration from the string value.
            </summary>
            <param name="userAccountLock">User account lock string</param>
        </member>
        <member name="M:CMS.Membership.UserAccountLockCode.ToEnum(System.Int32)">
            <summary>
            Returns the enumeration representation of the user account lock code.
            </summary>
            <param name="code">User account lock code</param>
        </member>
        <member name="M:CMS.Membership.UserAccountLockCode.FromEnum(CMS.Membership.UserAccountLockEnum)">
            <summary>
            Returns the user account lock code from the enumeration value.
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="T:CMS.Membership.UserGenderEnum">
            <summary>
            User gender enumeration.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserGenderEnum.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserGenderEnum.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserGenderEnum.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="T:CMS.Membership.ExternalLoginInfo">
            <summary>
            ExternalLoginInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.ExternalLoginInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.ExternalLoginInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.ExternalLoginInfo.ExternalLoginID">
            <summary>
            External login ID
            </summary>
        </member>
        <member name="P:CMS.Membership.ExternalLoginInfo.UserID">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:CMS.Membership.ExternalLoginInfo.LoginProvider">
            <summary>
            Login provider
            </summary>
        </member>
        <member name="P:CMS.Membership.ExternalLoginInfo.IdentityKey">
            <summary>
            Identity key
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfo.#ctor">
            <summary>
            Constructor - Creates an empty ExternalLoginInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new ExternalLoginInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="T:CMS.Membership.ExternalLoginInfoProvider">
            <summary>
            Class providing ExternalLoginInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfoProvider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfoProvider.GetExternalLogins">
            <summary>
            Returns a query for all the ExternalLoginInfo objects.
            </summary>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfoProvider.SetExternalLoginInfo(CMS.Membership.ExternalLoginInfo)">
            <summary>
            Sets (updates or inserts) specified ExternalLoginInfo.
            </summary>
            <param name="infoObj">ExternalLoginInfo to be set</param>
        </member>
        <member name="M:CMS.Membership.ExternalLoginInfoProvider.DeleteExternalLoginInfo(CMS.Membership.ExternalLoginInfo)">
            <summary>
            Deletes specified ExternalLoginInfo.
            </summary>
            <param name="infoObj">ExternalLoginInfo to be deleted</param>
        </member>
        <member name="T:CMS.Membership.IExternalLoginInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.ExternalLoginInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Membership.IUserInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.UserInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Membership.IUserSettingsInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.UserSettingsInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSettingsInfo">
            <summary>
            UserSettingsInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserCustomData">
            <summary>
            User custom data.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserRegistrationInfo">
            <summary>
            Contains information of user registration.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsInfo.mUserDialogsConfiguration">
            <summary>
            Contains information about user dialogs settings.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDialogsConfiguration">
            <summary>
            Gets or sets the XmlData object with information about user dialogs settings.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSettingsUserGUID">
            <summary>
            User guid.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSettingsID">
            <summary>
            User settings ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSettingsUserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserCampaign">
            <summary>
            User campaign.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserWaitingForApproval">
            <summary>
            Indicates whether user is waiting for approval.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserLogActivities">
            <summary>
            Indicates whether logging activities is enabled for this user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserActivationDate">
            <summary>
            Date of user's activation.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSignature">
            <summary>
            User signature.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserAvatarID">
            <summary>
            User avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserNickName">
            <summary>
            User nick name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserActivatedByUserID">
            <summary>
            User Activated by user ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserCustomData">
            <summary>
            User custom data storage.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserRegistrationInfo">
            <summary>
            User registration info.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserTimeZoneID">
            <summary>
            User time zone ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserURLReferrer">
            <summary>
            URL Referrer of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserShowIntroductionTile">
            <summary>
            Indicates whether the introduction tile should be displayed in dashboard.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserGender">
            <summary>
            User gender.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDateOfBirth">
            <summary>
            User date of birth.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPosition">
            <summary>
            User position.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserSkype">
            <summary>
            Skype account.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPhone">
            <summary>
            Phone number.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserIM">
            <summary>
            IM account.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDescription">
            <summary>
            Description of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPasswordRequestHash">
            <summary>
            Gets or sets user password change request hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserInvalidLogOnAttempts">
            <summary>
            Gets or sets number of user invalid logon attempts
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserInvalidLogOnAttemptsHash">
            <summary>
            Gets or sets user invalid logon attempts hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserPasswordLastChanged">
            <summary>
            Gets or sets time of last password change
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserAccountLockReason">
            <summary>
            Gets or sets number representing reason for user account lock
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDashboardApplications">
            <summary>
            Gets or sets list of serialized applications guids saved for the current user. 
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfo.UserDismissedSmartTips">
            <summary>
            Gets or sets list of serialized identifiers of smart tips that wont be shown to the user.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserSettingsInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserSettingsInfo object from the given DataRow.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.LoadDefaultData">
            <summary>
            Loads the object default data
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSettingsInfoProvider">
            <summary>
            Class providing UserSettingsInfo management.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSettingsInfoProvider.DeleteCustomAvatars">
            <summary>
            Defines whether to delete custom avatar along with user settings object (if exists).
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfoByUser(System.Int32)">
            <summary>
            Returns UserSettings info for specified user.
            </summary>
            <param name="userId">User whose Settings info is to be returned</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfo(System.Int32)">
            <summary>
            Returns the UserSettingsInfo structure for the specified userSettings.
            </summary>
            <param name="userSettingsId">UserSettings id</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettings">
            <summary>
            Returns the query for all user settings.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.SetUserSettingsInfo(CMS.Membership.UserSettingsInfo)">
            <summary>
            Sets (updates or inserts) specified userSettings.
            </summary>
            <param name="userSettings">UserSettings to set</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.DeleteUserSettingsInfo(CMS.Membership.UserSettingsInfo)">
            <summary>
            Deletes specified userSettings.
            </summary>
            <param name="infoObj">UserSettings object</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.DeleteUserSettingsInfo(System.Int32)">
            <summary>
            Deletes specified userSettings.
            </summary>
            <param name="userSettingsId">UserSettings id</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.GetUserSettingsInfoByUserInternal(System.Int32)">
            <summary>
            Returns UserSettings info for specified user.
            </summary>
            <param name="userId">User whose Settings info is to be returned</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.SetInfo(CMS.Membership.UserSettingsInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsInfoProvider.DeleteInfo(CMS.Membership.UserSettingsInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="F:CMS.Membership.UserSettingsRoleListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSettingsRoleListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserSettingsRoleListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserSettingsRoleListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSettingsRoleListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.IUserCultureInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.UserCultureInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Membership.IUserCultureInfoProvider.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.UserCultureInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.UserCultureInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IUserCultureInfoProvider.GetAsync(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.UserCultureInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.UserCultureInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IUserCultureInfoProvider.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.UserCultureInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Membership.IUserCultureInfoProvider.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Membership.UserCultureInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the culture specified is not allowed on the site.</exception>
        </member>
        <member name="T:CMS.Membership.UserCultureInfo">
            <summary>
            UserCultureInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserCultureInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserCultureInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserCultureInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserCultureInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserCultureInfo.CultureID">
            <summary>
            Culture ID.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserCultureInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserCultureInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserCultureInfoProvider">
            <summary>
            Class providing UserCultureInfo managment.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultures">
            <summary>
            Returns the query for all relationships between users and cultures.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.Get(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.UserCultureInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.UserCultureInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetAsync(System.Int32,System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.UserCultureInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.UserCultureInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultureInfo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the UserCultureInfo structure for the specified userCulture.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromAllCultures(System.Int32)">
            <summary>
            Deletes allowed cultures on all sites for given user.
            </summary>
            <param name="userId">ID of user</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromSite(System.Int32,System.Int32)">
            <summary>
            Removes user's allowed cultures for given site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.Set(CMS.Membership.UserCultureInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.SetUserCultureInfo(CMS.Membership.UserCultureInfo)">
            <summary>
            Sets (updates or inserts) specified userCulture.
            </summary>
            <param name="userCulture">UserCulture to set</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.DeleteUserCultureInfo(CMS.Membership.UserCultureInfo)">
            <summary>
            Deletes specified UserCulture.
            </summary>
            <param name="infoObj">UserCulture object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.Remove(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.UserCultureInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromCulture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes user from given culture of the given site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromCulture(CMS.Membership.UserInfo,CMS.Localization.CultureInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Removes user from given culture of the given site.
            </summary>
            <param name="user">User info object</param>
            <param name="culture">Culture info object</param>
            <param name="site">Site info object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Membership.UserCultureInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="cultureId">Culture ID.</param>
            <param name="siteId">Site ID.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the culture specified is not allowed on the site.</exception>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.AddUserToCulture(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds user to allowed culture of the site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.AddUserToCulture(CMS.Membership.UserInfo,CMS.Localization.CultureInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Adds user to allowed culture of the site.
            </summary>
            <param name="user">User info object</param>
            <param name="culture">Culture info object</param>
            <param name="site">Site info object</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultures(System.Int32,System.Int32)">
            <summary>
            Gets all allowed cultures for given user and site filtered by where condition and ordered by orderBy expression.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site</param>
            <returns>User's allowed cultures.</returns>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCultureInfoInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the UserCultureInfo structure for the specified userCulture.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromAllCulturesInternal(System.Int32)">
            <summary>
            Deletes allowed cultures on all sites for given user.
            </summary>
            <param name="userId">ID of user</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.RemoveUserFromSiteInternal(System.Int32,System.Int32)">
            <summary>
            Removes user's allowed cultures for given site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.SetUserCultureInfoInternal(CMS.Membership.UserCultureInfo)">
            <summary>
            Sets (updates or inserts) specified userCulture.
            </summary>
            <param name="userCulture">UserCulture to set</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.DeleteInfo(CMS.Membership.UserCultureInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.GetUserCulturesInternal(System.Int32,System.Int32)">
            <summary>
            Gets all allowed cultures for given user and site filtered by where condition and ordered by orderBy expression.
            </summary>
            <param name="userId">ID of user</param>
            <param name="siteId">ID of site, 0 for all sites</param>
            <returns>User's allowed cultures.</returns>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.DeleteSiteAllowedCultureInternal(System.Int32,System.Int32)">
            <summary>
            Deletes allowed culture for all users on given site.
            </summary>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="M:CMS.Membership.UserCultureInfoProvider.AddUserToCultureInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds user to allowed culture of the site.
            </summary>
            <param name="userId">ID of user</param>
            <param name="cultureId">ID of culture</param>
            <param name="siteId">ID of site</param>
        </member>
        <member name="T:CMS.Membership.UserInfo">
            <summary>
            UserInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfo.GLOBAL_ROLES_KEY">
            <summary>
            Constant for global roles in siteroles collection.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSecurityStamp">
            <summary>
            A unique value used for tracking changes to the user profile.
            Used for security purposes.
            </summary>
            <remarks>
            Currently this field is used only in our MVC UserStore implementation.
            Changing this field's value will invalidate any tokens generated within the Identity/OWIN implementation, e.g.:
            email confirmation tokens, authentication cookies, etc.
            </remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserMFSecret">
            <summary>
            Secret used in MFA.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserMFTimestep">
            <summary>
            Timestep of the last valid passcode used by the user to authenticate.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SitesRoles">
            <summary>
            Returns collection of the user Sites and roles.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.MembershipsInternal">
            <summary>
            Returns collection of user's membership
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SiteCulturesInternal">
            <summary>
            Returns the user's allowed cultures.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.ResourceUIElementsInternal">
            <summary>
            Returns UI elements within each module across all sites the user can see.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsHidden">
            <summary>
            Indicates whether user is hidden.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.FullName">
            <summary>
            Full name of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.LastLogon">
            <summary>
            Last logon of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PreferredCultureCode">
            <summary>
            Preferred culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.MiddleName">
            <summary>
            Middle name of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PreferredUICultureCode">
            <summary>
            Preferred UI culture code.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsExternal">
            <summary>
            Indicated whether user is external.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserEnabled">
            <summary>
            Indicates whether user is enabled.
            </summary>
            <remarks>
            <para>
            Property is identical to <see cref="P:CMS.Membership.UserInfo.Enabled"/> property, which should preferably be used.
            </para>
            <para>
            When toggling the enabled state of a user, a new <see cref="P:CMS.Membership.UserInfo.UserSecurityStamp"/> should be generated. Use <see cref="M:CMS.Membership.UserInfoProvider.SetEnabled(CMS.Membership.UserInfo,System.Boolean)"/>
            to generate a new stamp automatically.
            </para>
            </remarks>
            <seealso cref="M:CMS.Membership.UserInfoProvider.SetEnabled(CMS.Membership.UserInfo,System.Boolean)"/>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserMFRequired">
            <summary>
            Multi-factor authentication is required for user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.FirstName">
            <summary>
            First name of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserCreated">
            <summary>
            When was user created.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordFormat">
            <summary>
            Format of user's password.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Email">
            <summary>
            E-mail address.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Enabled">
            <summary>
            Indicates whether the user is enabled.
            </summary>
            <remarks>
            When toggling the enabled state of a user, a new <see cref="P:CMS.Membership.UserInfo.UserSecurityStamp"/> should be generated. Use <see cref="M:CMS.Membership.UserInfoProvider.SetEnabled(CMS.Membership.UserInfo,System.Boolean)"/>
            to generate a new stamp automatically.
            </remarks>
            <seealso cref="M:CMS.Membership.UserInfoProvider.SetEnabled(CMS.Membership.UserInfo,System.Boolean)"/>
        </member>
        <member name="P:CMS.Membership.UserInfo.PasswordFormat">
            <summary>
            Format of the stored user password.
            </summary>
            <remarks>
            <para>
            For generating password use <see cref="M:CMS.Membership.UserInfoProvider.SetPassword(System.String,System.String)"/>.
            </para>
            <para>
            For password verification use <see cref="M:CMS.Membership.UserInfoProvider.IsUserPasswordDifferent(CMS.Membership.UserInfo,System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserStartingAliasPath">
            <summary>
             Starting alias path of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserHasAllowedCultures">
            <summary>
            If user has allowed more than one culture.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserLastModified">
            <summary>
            Object last modified.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsDomain">
            <summary>
            Determines whether user is domain user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserAuthenticationGUID">
            <summary>
            Represents a secret for invalidating JSON Web Tokens.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SiteIndependentPrivilegeLevel">
            <summary>
            Indicates privilege level of user.
            </summary>
            <remarks>Use <see cref="M:CMS.Membership.UserInfo.CheckPrivilegeLevel(CMS.Base.UserPrivilegeLevelEnum,System.String)"/> for security check since this property is not suitable.</remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserAvatarID">
            <summary>
            User avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSignature">
            <summary>
            User signature.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserDescription">
            <summary>
            User description.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserNickName">
            <summary>
            User nick name.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserURLReferrer">
            <summary>
            URL Referrer of user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserCampaign">
            <summary>
            User campaign.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserTimeZoneID">
            <summary>
            User time zone ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordRequestHash">
            <summary>
            User password change request hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserCustomData">
            <summary>
            User custom data.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserInvalidLogOnAttempts">
            <summary>
            Gets or sets number of user invalid logon attempts.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserInvalidLogOnAttemptsHash">
            <summary>
            User password change request hash.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordLastChanged">
            <summary>
            Gets or sets time of last password change
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserAccountLockReason">
            <summary>
            Gets or sets number representing reason for user account lock
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSalt">
            <summary>
            User password salt.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserLastLogonInfo">
            <summary>
             User last logon info.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSettings">
            <summary>
            Gets the UserSettings info object for the user.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSettingsLoaded">
            <summary>
            Indicates whether user settings are loaded within current instance.
            </summary>
            <remarks>
            This property can be used only in <see cref="T:CMS.Membership.CurrentUserInfo"/> class.
            </remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserSettingsInternal">
            <summary>
            Gets the UserSettings info object for the user.
            </summary>
            <remarks>
            This property can be used and overridden only in <see cref="T:CMS.Membership.CurrentUserInfo"/> class.
            </remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.TimeZoneInfo">
            <summary>
            Gets the user's time zone information.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserIsDisabledManually">
            <summary>
            Indicates if user was disabled manually by admin.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.UserPasswordExpiration">
            <summary>
            Return number of days before user password expiration, null value means that password will never expire,
            positive values indicates number of days before which the password expires, 0 means that password is already expired
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.ObjectDisplayName">
            <summary>
            Gets or sets the display name of the user. The display name is read from and written to the <see cref="P:CMS.Membership.UserInfo.FullName"/> property.
            Gets the formatted user name inferred from <see cref="P:CMS.Membership.UserInfo.UserName"/>, if user has no full name specified.
            </summary>
            <seealso cref="M:CMS.Membership.UserInfoProvider.GetFormattedUserName(System.String,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="P:CMS.Membership.UserInfo.IsExternal">
            <summary>
            True if the user is external.
            </summary>
            <remarks>This property has the same meaning as UserIsExternal property.</remarks>
        </member>
        <member name="P:CMS.Membership.UserInfo.Orders">
            <summary>
            Collection or users orders made on current site.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.PurchasedProducts">
            <summary>
            Collection of all products purchased by user at all sites.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.Wishlist">
            <summary>
            Collection of all users wishlist items from all sites.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.StoreSettings">
            <summary>
            Stores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.RestoreSettings">
            <summary>
            Restores local settings for object instance.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.Invalidate(System.Boolean)">
            <summary>
            Invalidates the object in the object table.
            </summary>
            <param name="keepThisInstanceValid">If true, this object is marked as updated to behave as valid</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.RegisterProperties">
            <summary>
            Registers properties of the object
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetDefaultObject">
            <summary>
            Returns default user set in the settings or Global Administrator if setting is not defined or user not found.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor(CMS.Membership.UserInfo,System.Boolean,System.Boolean)">
            <summary>
            Constructor - Creates a new UserInfo object from the given DataClass.
            </summary>
            <param name="ui">Source user info</param>
            <param name="keepSourceData">If true, source data are kept</param>
            <param name="useCachedData">Indicates if cached data like user memberships, roles, cultures, etc. should be used from source user object</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserInfo object from the given DataRow.
            </summary>
            <param name="dr">Data row with the user data</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.LoadDefaultData">
            <summary>
            Sets the object default values
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckPrivilegeLevel(CMS.Base.UserPrivilegeLevelEnum,System.String)">
            <summary>
            Returns <c>true</c> if user fulfills the required privilege level (the higher level contains all children: GlobalAdmin -> Admin -> Editor -> None)
            </summary>
            <param name="privilegeLevel">Required privilege level</param>
            <param name="siteName">Site name for editor assignment. If not set current site name is used</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetPrivilegeLevelForSite(System.String)">
            <summary>
            Returns highest privilege level of user.
            </summary>
            <param name="siteName">Site name for editor assignment. If not set current site name is used</param>
            <remarks>Method is internal only for test purposes.</remarks>
        </member>
        <member name="M:CMS.Membership.UserInfo.RemoveObjectDependencies(System.Boolean,System.Boolean)">
            <summary>
            Removes object dependencies.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains given column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetObjectTypeForColumn(System.String)">
            <summary>
            Gets the object type for the given column or null if the object type is not found or unknown.
            </summary>
            <param name="columnName">Column name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.SetValue(System.String,System.Object)">
            <summary>
            Sets the field value (first look into CMS_User if the field is not found, set into CMS_UserSettings).
            </summary>
            <param name="columnName">Filed name</param>
            <param name="value">Value to be saved</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.FilterSearchResults(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean@)">
            <summary>
            Filters the user search results
            </summary>
            <param name="inRoles">List of roles in which the user should be</param>
            <param name="notInRoles">List of roles in which the user should not be</param>
            <param name="addToIndex">Flag if the results should be added to the index</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsPublic">
            <summary>
            Returns true if the user is public user record.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.ConvertUserDateTime(System.DateTime)">
            <summary>
            Returns current user date time in dependence on user time zone.
            </summary>
            <param name="dateTime">Date time</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.ConvertServerDateTime(System.DateTime)">
            <summary>
            Returns server date time in dependence on server time zone.
            </summary>
            <param name="dateTime">Date time</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetFormattedUserName(System.Boolean)">
            <summary>
            Returns formatted username in format: full name (nickname) if nickname specified otherwise full name (username).
            Allows you to customize how the usernames will look like throughout the admin UI.
            </summary>
            <param name="isLiveSite">Indicates if returned username should be displayed on live site</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.Clone(System.Boolean)">
            <summary>
            Creates a clone of the object
            </summary>
            <param name="clear">If true, the object is cleared to be able to create new object</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.Clone">
            <summary>
            Creates a clone of the object
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.InsertAsCloneInternal(CMS.DataEngine.CloneSettings,CMS.DataEngine.CloneResult,CMS.DataEngine.BaseInfo)">
            <summary>
            Inserts cloned object to DB.
            </summary>
            <param name="settings">Cloning settings</param>
            <param name="result">Cloning result</param>
            <param name="originalObject">Original source BaseInfo (object being cloned)</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.UpdateUserSettings(CMS.Membership.UserSettingsInfo)">
            <summary>
            Updates user settings.
            </summary>
            <param name="settings">User settings</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetDefaultDataWhereCondition(System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the where condition to filter out the default installation data
            </summary>
            <param name="recursive">Indicates whether where condition should contain further dependency conditions.</param>
            <param name="globalOnly">Indicates whether only objects with null in their site ID column should be included.</param>
            <param name="excludedNames">Objects with display names and code names starting with these expressions are filtered out.</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.ChangedColumns">
            <summary>
            Returns list of column names which values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.CopyCachedDataTo(CMS.Membership.UserInfo)">
            <summary>
            Copies the cached data to another UserInfo object
            </summary>
            <param name="userInfo">Target user info</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.ClearCachedData">
            <summary>
            Clears the cached data of this object
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateNewRolesDictionary">
            <summary>
            Creates a new empty dictionary for storing roles
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.SecurityCollectionsLoadedByInheritedClass(CMS.Membership.UserSecurityCollections@)">
            <remarks>This method can be used in <see cref="T:CMS.Membership.CurrentUserInfo"/> only.</remarks>
        </member>
        <member name="M:CMS.Membership.UserInfo.CopySecurityCollections(CMS.Membership.UserInfo)">
            <remarks>This method can be used in <see cref="T:CMS.Membership.CurrentUserInfo"/> only.</remarks>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInRole(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns true if the user is member of the specified role on the specified site (or on global role if check global is true).
            </summary>
            <param name="roleName">Role name to check</param>
            <param name="siteName">Site name to check</param>
            <param name="checkGlobal">If true, global roles are checked</param>
            <param name="checkMembership">If true, membership roles are checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckRole(System.String,CMS.Base.SafeDictionary{System.String,CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}},System.String,System.Boolean)">
            <summary>
            Returns true if role name is found in collection.
            </summary>
            <param name="roleName">Name of wanted role</param>
            <param name="roleTable">Collection with roles to search in</param>
            <param name="roleValidityTable">Collection with roles validity</param>
            <param name="siteName">Site name</param>
            <param name="checkGlobal">If true, global roles are checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInRole(System.String,System.String)">
            <summary>
            Returns true if the user is a member of the role in context of the specified site.
            </summary>
            <remarks>The check also accounts for membership roles and global roles.</remarks>
            <param name="roleName">Role name to check</param>
            <param name="siteName">Site name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInMembership(System.String,System.String)">
            <summary>
            Check whether current user is in membership
            </summary>
            <param name="membership">Membership name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInMembership(System.String,System.String,System.Boolean)">
            <summary>
            Check whether current user is in membership
            </summary>
            <param name="membershipName">Membership name</param>
            <param name="siteName">Site name</param>
            <param name="checkGlobal">If true global memberships are checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsCultureAllowed(System.String,System.String)">
            <summary>
            Determines whether culture is allowed for given user on given site.
            </summary>
            <param name="cultureCode">Code of culture</param>
            <param name="siteName">Name of site</param>
            <returns>True if user can edit culture on site.</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsInSite(System.String)">
            <summary>
            Returns true, if the user is member of the specified site (registered on it).
            </summary>
            <param name="siteName">Sitename to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetGenericRoles">
            <summary>
            Gets user generic roles.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateSiteCulturesTable(System.Collections.Generic.IEnumerable{CMS.SiteProvider.SiteInfo},System.Data.DataTable)">
            <summary>
            Initializes the user site cultures collection by given data.
            </summary>
            <param name="userSites">Site data</param>
            <param name="userCultures">Culture data</param>
            <returns>Initialized collection</returns>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetRoleIdList(System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets all roles for current user.
            </summary>
            <param name="includeGlobal">If true global roles are included</param>
            <param name="includeMembership">If true membership roles are included</param>
            <param name="siteName">Current site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.GetRoleIdListInternal(CMS.Membership.UserSecurityCollections,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns roles for user included in given collection.
            </summary>
            <param name="securityCollections">Collection with user security collections </param>
            <param name="siteName">Site name</param>
            <param name="includeGlobal">If true global roles are included</param>
            <param name="membershipRoles">Indicates whether membership roles should be checked instead of site roles</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CreateSiteUIElementsTable">
            <summary>
            Creates collection for UIElements.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfo.SearchType">
            <summary>
            Gets the type of current object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerResource(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerClassName(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerResource(System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given resource name and permission, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerResource(System.String,System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given resource name and permission, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.Int32,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceID">Resource ID</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteName">Site code name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Checks whether the user is authorized for given UI element of the specified resource, returns true if so.
            </summary>
            <param name="resourceName">Resource code name</param>
            <param name="elementName">UI element code name</param>
            <param name="siteAvailabilityRequired">Indicates if site availability of the corresponding resource (resource with name in format "cms.[ElementName]") is required. Takes effect only when corresponding resource exists</param>
            <param name="siteName">Site code name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerUIElement(System.String,System.String[],System.String)">
            <summary>
            Checks whether the user is authorized for given resource name and UIElements, returns true if so.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="elementNames">UIElement names to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerClassName(System.String,System.String)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,System.String,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="obj">Object to check</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerObject(CMS.DataEngine.PermissionsEnum,CMS.DataEngine.BaseInfo,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized per object with given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="obj">Object to check</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsAuthorizedPerMetaFile(CMS.DataEngine.PermissionsEnum,System.String,System.String)">
            <summary>
            Checks whether the user is authorized per meta file for given object type and permission.
            </summary>
            <param name="permission">Permission to check</param>
            <param name="objectType">Object type</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckPermissionsInternal(CMS.DataEngine.PermissionsEnum,System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Checks whether the specified user has permissions for this object. This method is called automatically after CheckPermissions event was fired.
            </summary>
            <param name="permission">Permission to perform this operation will be checked</param>
            <param name="siteName">Permissions on this site will be checked</param>
            <param name="userInfo">Permissions of this user will be checked</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform specified operation on the this object; otherwise false</returns>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.AuthorizeSetUserInfo(System.String,CMS.Base.IUserInfo,System.Boolean,System.Boolean)">
            <summary>
            Performs authorization check for set info operation.
            </summary>
            <param name="currentSiteName">Current site name for permissions evaluation.</param>
            <param name="userInfo">Authorization of this user will be evaluated.</param>
            <param name="isCreate">Whether create or modify operation should be evaluated.</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> or <see cref="T:System.Security.SecurityException"/> is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform set info operation on the this object; otherwise false</returns>
            <exception cref="T:System.Security.SecurityException">Thrown when permission check fail and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when user is about to delete themselves and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.AuthorizeDeleteUserInfo(System.String,CMS.Base.IUserInfo,System.Boolean)">
            <summary>
            Performs authorization check for delete info operation.
            </summary>
            <param name="currentSiteName">Current site name for permissions evaluation.</param>
            <param name="userInfo">Authorization of this user will be evaluated.</param>
            <param name="exceptionOnFailure">If true, <see cref="T:CMS.DataEngine.PermissionCheckException"/> or <see cref="T:System.Security.SecurityException"/> is thrown whenever a permission check fails</param>
            <returns>True if user is allowed to perform delete info operation on the this object; otherwise false</returns>
            <exception cref="T:System.Security.SecurityException">Thrown when user does not have permissions for deleting and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when user is about to delete themselves and exception is allowed by <paramref name="exceptionOnFailure"/> parameter.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfo.SecurityCheckFailure(System.String,System.Boolean)">
            <summary>
            Handles security check failure - either throws an exception, or returns false.
            </summary>
            <param name="failureMessage">Reason for the failure.</param>
            <param name="exceptionOnFailure">Whether to throw exception, or just return false.</param>
            <returns>If this method returns, it returns false.</returns>
            <exception cref="T:System.Security.SecurityException">Thrown when <paramref name="exceptionOnFailure"/> is true.</exception>
            <remarks>
            A <see cref="T:System.Security.SecurityException"/> is thrown since the failure is not strictly permission related
            (e.g. insufficient privilege level).
            </remarks>
        </member>
        <member name="M:CMS.Membership.UserInfo.IsSufficientPrivilegeLevel(CMS.Base.UserPrivilegeLevelEnum,CMS.Base.UserPrivilegeLevelEnum)">
            <summary>
            Validates whether <paramref name="actual"/> has at least <see paramref="required"/> privilege level.
            (Order of privilege levels from the highest is: GlobalAdmin -> Admin -> Editor -> None)
            </summary>
            <param name="required">Required privilege level</param>
            <param name="actual">Privilege level to validate</param>
        </member>
        <member name="M:CMS.Membership.UserInfo.CheckOriginalPrivilegeLevel(CMS.Base.UserPrivilegeLevelEnum)">
            <summary>
            Returns <c>true</c> if user originally fulfilled the required privilege level.
            (Order of privilege levels from the highest is: GlobalAdmin -> Admin -> Editor -> None)
            </summary>
            <param name="privilegeLevel">Required privilege level</param>
        </member>
        <member name="T:CMS.Membership.UserInfoProvider">
            <summary>
            Class providing UserInfo management.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.USER_ENABLED_WHERE_CONDITION">
            <summary>
            Where condition indicating that user is enabled
            </summary>
        </member>
        <member name="F:CMS.Membership.UserInfoProvider.DEFAULT_ADMIN_USERNAME">
            <summary>
            Administrator user name
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.#ctor">
            <summary>
            Creates new instance of <see cref="T:CMS.Membership.UserInfoProvider"/>.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserInfoProvider.FormattedUserNameEventHandler">
            <summary>
            Delegate used for formatting user name
            </summary>
            <param name="username">Source user name</param>
            <param name="fullname">Source full name</param>
            <param name="nickname">Source nick name</param>
            <param name="isLiveSite">Indicates if returned username should be displayed on live site</param>
        </member>
        <member name="E:CMS.Membership.UserInfoProvider.OnFormattedUserName">
            <summary>
            Event for formatting user name
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.DateTimeNow">
            <summary>
            Represents <see cref="P:System.DateTime.Now"/> value.
            </summary>
            <remarks>This property should is used for testability purposes only.</remarks>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LicGlobalAdmins">
            <summary>
            License limitations for global admins
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LicSiteMembers">
            <summary>
            License limitations for site members
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LicEditors">
            <summary>
            License limitations for editors
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.LogUserCounts">
            <summary>
            Gets or sets the value that indicates whether user counts settings should be checked.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.PasswordSalt">
            <summary>
            Gets or sets password salt.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UserCountsEnabled">
            <summary>
            Gets the value that indicates whether user counts are enabled.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.NewPasswordFormat">
            <summary>
            Returns password format to be used while hashing new passwords.
            </summary>
            <remarks>
            <para>
            For generating password use <see cref="M:CMS.Membership.UserInfoProvider.SetPassword(System.String,System.String)"/>.
            </para>
            <para>
            For password verification use <see cref="M:CMS.Membership.UserInfoProvider.IsUserPasswordDifferent(CMS.Membership.UserInfo,System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UseSafeUserName">
            <summary>
            Indicates whether to use safe or normal user names.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UseSafeRoleName">
            <summary>
            Indicates whether to use safe or normal role names.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.AdministratorUser">
            <summary>
            Gets the default system administrator user in the listed order of preferences:
            1) User defined by settings key CMSDefaultUserID
            2) User with username 'administrator'
            3) Any other global admin
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.AdministratorUserName">
            <summary>
            Gets the default system administrator user name in the listed order of preferences:
            1) User defined by settings key CMSDefaultUserID
            2) User with username 'administrator'
            3) Any other global admin
            4) Defaults to 'administrator' if no global admin is found
            </summary>
        </member>
        <member name="P:CMS.Membership.UserInfoProvider.UserEnabledWhereCondition">
            <summary>
            Where condition indicating that user is enabled
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRolesForUser(System.String,System.String)">
            <summary>
            Returns all roles for specified user.
            </summary>
            <param name="userName">User name.</param>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsUserInRole(System.String,System.String,System.String)">
            <summary>
            Returns true if the user is a member of the role in context of the specified site.
            </summary>
            <remarks>The check also accounts for membership roles and global roles.</remarks>
            <param name="userName">User name</param>
            <param name="roleName">Role name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetAdministratorUser">
            <summary>
            Gets the default system user with global administrator privilege level in the listed order of preferences:
            1) User defined by settings key CMSDefaultUserID
            2) User with username 'administrator'
            3) Any other global admin
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.InvalidateUser(System.Int32)">
            <summary>
            Invalidates the specified user
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetSearchWhereCondition(CMS.Search.SearchIndexInfo)">
            <summary>
            Returns smart search where condition for indexing.
            </summary>
            <param name="srchInfo">Index info</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullName(System.String,System.String,System.String)">
            <summary>
            Returns user's full name
            </summary>
            <param name="firstName">User's first name</param>
            <param name="middleName">User's middle name</param>
            <param name="lastName">User's last name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetSearchDocuments(CMS.Search.SearchIndexInfo,System.String,System.Int32)">
            <summary>
            Returns top 15 search documents for current scope.
            </summary>
            <param name="indexInfo">Search index info</param>
            <param name="whereCondition">Additional where condition</param>
            <param name="lastUserId">Last record user id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserName">
            <summary>
            Gets currently logged user name. The user name is safe if the UseSafeUserName is enabled.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserName(System.String)">
            <summary>
            Gets currently logged user name. The user name is safe if the UseSafeUserName is enabled.
            </summary>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsEmailUnique(System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if email doesn't exist in users table.
            Depends on 'Unique e-mails' and 'Shared user accounts' settings
            </summary>
            <param name="email">E-mail</param>
            <param name="user">Current user which should be checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsEmailUnique(System.String,System.String,System.Int32)">
            <summary>
            Returns true if email doesn't exist in users table.
            Depends on 'Unique e-mails' and 'Shared user accounts' settings
            </summary>
            <param name="email">E-mail</param>
            <param name="siteName">One or more site names separated by semicolon</param>
            <param name="currentUserId">Current user id, if is 0 => new user</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsEmailUnique(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Returns true if email doesn't exist in users table.
            Depends on 'Unique e-mails' and 'Shared user accounts' settings
            </summary>
            <param name="email">E-mail</param>
            <param name="siteNames">One or more site name</param>
            <param name="currentUserId">Current user id, if is 0 => new user</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfoByGUID(System.Guid)">
            <summary>
            Returns object with specified GUID.
            </summary>
            <param name="guid">Object GUID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum,System.Boolean)">
            <summary>
            License version check.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature</param>
            <param name="action">Action</param>
            <param name="currentStatus">License status</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfo(System.Int32)">
            <summary>
            Returns the UserInfo structure for the specified user.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserInfo(System.String)">
            <summary>
            Returns the UserInfo structure for the specified user.
            </summary>
            <param name="userName">UserName</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.Set(CMS.Membership.UserInfo)">
            <summary>
            Inserts or updates the <paramref name="info"/> object in the underlying data store.
            </summary>
            <param name="info">Info object to be inserted or updated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetUserInfo(CMS.Membership.UserInfo)">
            <summary>
            Sets (updates or inserts) specified user.
            </summary>
            <param name="user">User to set</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUser(CMS.Membership.UserInfo)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userObj">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUser(System.Int32)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteUser(System.String)">
            <summary>
            Deletes specified user.
            </summary>
            <param name="userName">User name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRoles(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Get top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRoles(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N records</param>
            <param name="columns">Columns to get</param>
            <param name="includeMembership">If true, membership roles are added</param>
            <param name="includeGlobal">If true, global roles are added</param>
            <param name="checkValidity">If true, only valid roles are selected</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserMembershipRoles(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user roles given by membership connection.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="whereCondition">Where condition</param>
            <param name="orderBy">Order by expression</param>
            <param name="topN">Get top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRoles(CMS.Membership.UserInfo)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserSites(System.Int32)">
            <summary>
            Returns the table of the user sites.
            </summary>
            <param name="userId">User ID for site table</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserNameById(System.Int32)">
            <summary>
            Returns the UserName by the specified user ID.
            </summary>
            <param name="id">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerClass(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if user is granted with specified permission for particular class (document type).
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name for which check the permissions</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerClass(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if user is granted with specified permission for particular class (document type).
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name for which check the permissions</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRequiredResourceUsers(System.String,System.String,System.String)">
            <summary>
            Gets the DataSet of the required users for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRequiredResourceUsers(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets the DataSet of the required users for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Top N items</param>
            <param name="columns">List of columns to return</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUsers">
            <summary>
            Returns the query for all users.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullUserInfo(System.Int32)">
            <summary>
            Returns the UserInfo structure for the specified user also with UserSettings.
            </summary>
            <param name="userId">User id</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFullUserInfo(System.String)">
            <summary>
            Returns the UserInfo structure for the specified user also with UserSettings.
            </summary>
            <param name="userName">UserName</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ClearLicenseValues(System.Boolean)">
            <summary>
            Clear license values.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckUserBelongsToSite(CMS.Membership.UserInfo,System.String)">
            <summary>
            Check if user belongs to specified site, considering settings key CMSSiteSharedAccounts.
            </summary>
            <param name="user">UserInfo</param>
            <param name="siteName">SiteName</param>
            <returns>Returns same UserInfo if user belongs to site(if shared accounts disabled) or null if not</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPreferredCultures(CMS.Membership.UserInfo)">
            <summary>
            Sets the preferred culture codes from given user object.
            </summary>
            <param name="user">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureRolesAndSitesForWindowsAuthentication(CMS.Membership.UserInfo)">
            <summary>
            Ensures that roles and sites for the given user are present within the database. Used in case of Windows authentication.
            </summary>
            <param name="uInfo">Source user info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureRolesAndSites(CMS.Membership.UserInfo)">
            <summary>
            Ensures that roles and sites for the given user are present within the database.
            </summary>
            <param name="uInfo">Source user info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.AddUserToRole(System.String,System.String,System.String)">
            <summary>
            Adds the specified user to the role of site.
            </summary>
            <param name="userName">User name to add to role</param>
            <param name="roleName">Role name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.AddUserToRole(System.Int32,System.Int32)">
            <summary>
            Adds the specified user to the role of site.
            </summary>
            <param name="userId">User ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromRole(System.String,System.String,System.String)">
            <summary>
            Removes specified user from the role.
            </summary>
            <param name="userName">User name to remove</param>
            <param name="roleName">Role name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
            Removes specified user from the role.
            </summary>
            <param name="userId">User ID</param>
            <param name="roleId">Role ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.AddUserToSite(System.String,System.String)">
            <summary>
            Adds the specified user to the site.
            </summary>
            <param name="userName">User name to add</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromSite(System.Int32,System.Int32)">
            <summary>
            Removes the user from the specified site.
            </summary>
            <param name="userId">User ID</param>
            <param name="siteId">Site ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.RemoveUserFromSite(System.String,System.String)">
            <summary>
            Removes the user from the specified site.
            </summary>
            <param name="userName">User name to remove</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerResource(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerResource(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
            <exception cref="T:CMS.DataEngine.PermissionCheckException">Thrown when user is not authorized per resource and <paramref name="exceptionOnFailure"/> is enabled</exception>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckRequiredResourceRole(CMS.Membership.UserInfo,System.String,System.String,System.String)">
            <summary>
            Returns true if user is assigned to the role with permission under specified resource
            </summary>
            <param name="userInfo">User info to check</param>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ChangeResourceNameToDesignForGlobalResourceAndSqlOrCodePermission(System.String@,System.String)">
            <summary>
            Changes resource name to "CMS.Design" for global permission resource with SQL or Code edit permission
            </summary>
            <remarks>
            This change is necessary due to backward compatibility with legacy part of the system with exploitable inputs but with no
            specific permission e.g Form layouts
            </remarks>
            <param name="resourceName">Reference to permission value</param>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsSqlOrCodePermission(System.String@,System.String)">
            <summary>
            Returns true if permission name under the resource is known as SQL/ASCX code permission allowed for exploitable action
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.String,System.String,CMS.Membership.UserInfo)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementName">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,CMS.Membership.UserInfo)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementNames">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementNames">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="checkElementsOnly">Indicates if only UI elements will be checked, not settings or special role membership</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElement(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,CMS.Membership.UserInfo,System.Boolean,System.Boolean)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="resourceName">Name of the resource</param>
            <param name="elementNames">Name of the UIElement</param>
            <param name="siteName">Name of the site</param>
            <param name="userInfo">UserInfo object</param>
            <param name="checkElementsOnly">Indicates if only UI elements will be checked, not settings or special role membership</param>
            <param name="checkGlobalRoles">Indicates if global roles should be checked</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerUIElementInternal(CMS.Base.SafeDictionary{System.String,System.Nullable{System.DateTime}},System.Collections.Generic.IEnumerable{System.String},CMS.Membership.UserInfo,System.String)">
            <summary>
            Indicates if user is authorized to see the specified UI element.
            </summary>
            <param name="elements">Collection with elements rights and validity</param>
            <param name="elementNames">Names of elements</param>
            <param name="userInfo">User info</param>
            <param name="resourceName">Name of resource</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsUIPersonalizationEnabled(System.String)">
            <summary>
            Determines whether UI personalization is enabled for the specified site.
            </summary>
            <param name="siteName">Code name of the site to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerMetaFile(System.String,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(CMS.DataEngine.BaseInfo,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="info">InfoObject to check</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(CMS.DataEngine.BaseInfo,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="info">InfoObject to check</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(System.String,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(System.String,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerObject(System.String,System.Int32,CMS.DataEngine.PermissionsEnum,System.String,CMS.Membership.UserInfo)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="objectType">Object type</param>
            <param name="objectId">Object ID</param>
            <param name="permission">Permission</param>
            <param name="siteName">Site name</param>
            <param name="userInfo">User info object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckLicense(CMS.Base.UserPrivilegeLevelEnum,CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the license.
            </summary>
            <param name="privilegeLevel">Privilege level of user to be checked</param>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, current domain name is used</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUsersDataWithSettings">
            <summary>
            Returns object query for users with settings data
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserResourcePermissions(CMS.Membership.UserInfo,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns the DataSet with user permissions for specified resource.
            </summary>
            <param name="user">User info object</param>
            <param name="siteId">Site ID</param>
            <param name="resourceId">ID of the resource</param>
            <param name="displayedOnly">Indicates if only visible permissions should be get</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserDataClassPermissions(CMS.Membership.UserInfo,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns the DataSet with user permissions for specified class.
            </summary>
            <param name="user">User info object</param>
            <param name="siteId">Site ID</param>
            <param name="classId">ID of the class</param>
            <param name="displayedOnly">Indicates if only visible permissions should be get</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetGenericRoles(CMS.Membership.UserInfo)">
            <summary>
            Gets user generic roles in format "'role1', 'role2'"
            </summary>
            <param name="userInfo">User info</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetEnabled(CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Sets the enabled state for the specified user.
            Toggling a user from enabled state to disabled also generates a new <see cref="P:CMS.Membership.UserInfo.UserSecurityStamp"/> for the user.
            </summary>
            <param name="userInfo">User whose enabled state is to be set.</param>
            <param name="enabled">Enabled state to be set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userInfo"/> is null.</exception>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(CMS.Membership.UserInfo,System.String)">
            <summary>
            Sets the password for the specified user object, saves the user object.
            </summary>
            <param name="ui">User info</param>
            <param name="userPassword">User password</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(CMS.Membership.UserInfo,System.String,System.Boolean)">
            <summary>
            Sets the password for the specified user object.
            </summary>
            <param name="ui">User info</param>
            <param name="userPassword">User password</param>
            <param name="saveObject">Specifies whether object is saved into database.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckUserForHashGeneration(CMS.Membership.UserInfo)">
            <summary>
            Checks if password hash can be generated properly.
            </summary>
            <param name="ui">User info.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateSecurityStamp">
            <summary>
            Generates a new security stamp.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(System.String,System.String)">
            <summary>
            Sets the password for the specified user. Saves object to database.
            </summary>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetPassword(System.String,System.String,System.Boolean)">
            <summary>
            Sets the password for the specified user.
            </summary>
            <param name="userName">User name</param>
            <param name="userPassword">User password</param>
            <param name="saveObject">Specifies whether object is saved into database.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetPasswordHash(System.String,System.String,System.String)">
            <summary>
            Returns the hashed password representation (is hashing on).
            </summary>
            <param name="password">Password to hash</param>
            <param name="passwordFormat">Format of the password</param>
            <param name="salt">Password salt</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsUserPasswordDifferent(CMS.Membership.UserInfo,System.String)">
            <summary>
            Indicates if user password differs from specified password
            </summary>
            <param name="ui">User to check password difference</param>
            <param name="password">Password to check</param>
            <returns>True if specified password differs from user password, False if the passwords are the same</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ValidateUserPassword(CMS.Membership.UserInfo,System.String)">
            <summary>
            Compares hash of given password with user's hash stored in database.
            </summary>
            <param name="ui">User whose password hash should be checked</param>
            <param name="password">Password to check</param>
            <returns>True if the given password's hash and user's password hash are the same, false otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ValidateUserPasswordHash(CMS.Membership.UserInfo,System.String,System.String)">
            <summary>
            Compares hash of given password with provided hash based on user's password format and salt.
            </summary>
            <param name="ui">User whose password format and salt should be used.</param>
            <param name="userhash">The hashed password provided for comparison.</param>
            <param name="password">Password provided for comparison.</param>
            <returns></returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateNewPassword(System.String)">
            <summary>
            Returns new password according to password policy.
            Generates password with 8 characters (at least one special character) if no password policy is configured.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ValidateCodeName(CMS.Membership.UserInfo)">
            <summary>
            Validates the user name. Returns true if the user name is valid and follows rules defined by <see cref="P:CMS.Helpers.ValidationHelper.UsernameRegExp"/>.
            </summary>
            <remarks>
            User names of external users are only checked for emptiness as they can have any user name since different services have different rules.
            </remarks>
            <param name="info">User info object to check</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetFormattedUserName(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns formatted username in format: fullname (nickname) if nicname specified otherwise fullname (username).
            Allows you to customize how the usernames will look like throughout the admin UI.
            </summary>
            <param name="username">Source user name</param>
            <param name="fullname">Source full name</param>
            <param name="nickname">Source user nick name</param>
            <param name="isLiveSite">Indicates if returned username should be displayed on live site</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckLicenseLimitation(CMS.Membership.UserInfo,System.String@)">
            <summary>
            Checks license limitation for provider UserInfo. Checks limitations for global administrator, editor and site members.
            </summary>
            <param name="ui">UserInfo to be checked</param>
            <param name="error">Will contain error message if license check failed</param>
            <returns>Returns TRUE if limitation check is passed. Returns FALSE otherwise.</returns>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.CheckInstanceBeforeSet(CMS.Membership.UserInfo)">
            <summary>
            Checks given <paramref name="user"/> for type and logs an event if instance is type of <see cref="T:CMS.Membership.CurrentUserInfo"/>.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.SetUserInfoInternal(CMS.Membership.UserInfo)">
            <summary>
            Sets (updates or inserts) specified user.
            </summary>
            <param name="user">User to set</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.DeleteInfo(CMS.Membership.UserInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.ProcessWebFarmTaskInternal(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom task data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserMembershipRolesInternal(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String)">
            <summary>
            Returns the table of the user roles given by membership connection.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N records</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserRolesInternal(CMS.Membership.UserInfo,System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the table of the user roles.
            </summary>
            <param name="userInfo">User info for retrieving the role table</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by</param>
            <param name="topN">Top N records</param>
            <param name="columns">Columns to get</param>
            <param name="includeMembership">If true, membership roles are added</param>
            <param name="includeGlobal">If true, global roles are added</param>
            <param name="checkValidity">If true, only valid roles are selected</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserSitesInternal(System.Int32)">
            <summary>
            Returns the table of the user sites.
            </summary>
            <param name="userId">User ID for site table</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserNameByIdInternal(System.Int32)">
            <summary>
            Returns the UserName by the specified user ID.
            </summary>
            <param name="id">User ID</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.IsAuthorizedPerClassInternal(System.String,System.String,System.String,CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Returns true if user is granted with specified permission for particular class.
            </summary>
            <param name="className">Class name in format application.class</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name for which check the permissions</param>
            <param name="userInfo">User info object</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetRequiredResourceUsersInternal(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Gets the DataSet of the required users for the specified resource permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="where">Where condition</param>
            <param name="orderBy">Order by clause</param>
            <param name="topN">Top N items</param>
            <param name="columns">List of columns to return</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetUserPermissions(CMS.Membership.UserInfo,System.Int32,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Returns the DataSet of user permissions for permission type specified by ID.
            </summary>
            <param name="user">User info object</param>
            <param name="siteId">Site ID</param>
            <param name="permissionTypeId">ID identifying the permission</param>
            <param name="permissionType">Type of the permission(class or resource)</param>
            <param name="displayedOnly">Indicates if only visible permissions should be get</param>
            <param name="columns">Columns to get</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GetPasswordHashInternal(System.String,System.String,System.String)">
            <summary>
            Returns the hashed password representation (is hashing on).
            </summary>
            <param name="password">Password to hash</param>
            <param name="passwordFormat">Format of the password</param>
            <param name="salt">Password salt</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.GenerateNewPasswordInternal(System.String)">
            <summary>
            Returns new password according to password policy.
            </summary>
            <param name="siteName">Site name.</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.UpdateUserInHashtablesInternal(CMS.Membership.UserInfo)">
            <summary>
            Updates user object in hashtables
            </summary>
            <param name="user">User object</param>
        </member>
        <member name="M:CMS.Membership.UserInfoProvider.EnsureRolesAndSitesInternal(CMS.Membership.UserInfo,System.Boolean)">
            <summary>
            Ensures that roles and sites for the given user are present within the database.
            </summary>
            <param name="user">Source user info object</param>
            <param name="isWindowsAuth">Indicates if ensuring Windows authentication roles.</param>
        </member>
        <member name="F:CMS.Membership.UserListInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserListInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserListInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserListInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserListInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserListInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.Membership.UserListInfo.GetColumnNames">
            <summary>
            Gets the default list of column names for this class
            </summary>
        </member>
        <member name="M:CMS.Membership.UserListInfo.GetDataQueryInternal">
            <summary>
            Gets the data query for this object type
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSecurityCollections">
            <summary>
            Holds collection used and created for security check within membership libraries
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSecurityCollections.GetSecurityCollectionsForUser(CMS.Membership.UserInfo)">
            <summary>
            Returns <see cref="T:CMS.Membership.UserSecurityCollections"/> object with loaded data for specified user.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSecurityCollections.CreateMembershipsTable(System.Int32,System.Collections.Generic.IEnumerable{CMS.SiteProvider.SiteInfo},CMS.Base.SafeDictionary{System.String,CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}})">
            <summary>
            Creates collection for users's memberships
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSecurityCollections.CreateRolesTable(System.Data.DataTable,System.Collections.Generic.IEnumerable{CMS.SiteProvider.SiteInfo},System.Data.DataTable,CMS.Base.SafeDictionary{System.String,CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}}},CMS.Base.SafeDictionary{System.String,CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}})">
            <summary>
            Initializes the user sites roles collection by given data.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSecurityCollections.AddRoleRowToHashTable(System.Collections.Generic.IEnumerable{System.Data.DataRow},CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}},CMS.Base.SafeDictionary{System.Int32,System.Boolean},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}})">
            <summary>
            Add records to target collection given in rows collection.
            </summary>
            <param name="rows">Rows with data</param>
            <param name="targetHashTable">Collection with data</param>
            <param name="unlimitedRoles">Collection with rows with no limit datetime</param>
            <param name="rolesValidity">Collection with rows with non permanent roles</param>
            <param name="membershipsValidity">Collection with membership validity</param>
            <param name="membershipRoleValidity">Collection with roles and validity available thru membership</param>
        </member>
        <member name="M:CMS.Membership.UserSecurityCollections.AddMembershipsToHashTable(System.Collections.Generic.IEnumerable{System.Data.DataRow},CMS.Base.SafeDictionary{System.String,System.Nullable{System.Int32}},CMS.Base.SafeDictionary{System.Int32,System.Nullable{System.DateTime}})">
            <summary>
            Add records to target collection given in rows collection.
            </summary>
            <param name="rows">Rows with data</param>
            <param name="targetHashTable">Hash table with data</param>
            <param name="membershipValidity">Collection with rows with validity data for memberships</param>
        </member>
        <member name="T:CMS.Membership.IUserSiteInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.Membership.UserSiteInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.Membership.IUserSiteInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.UserSiteInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.UserSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IUserSiteInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.UserSiteInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.UserSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.IUserSiteInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.UserSiteInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Membership.IUserSiteInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Membership.UserSiteInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="T:CMS.Membership.UserSiteInfo">
            <summary>
            UserSiteInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSiteInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.Membership.UserSiteInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserSiteID">
            <summary>
            Record's site ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Membership.UserSiteInfo.SiteID">
            <summary>
            Site ID.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.GetExisting">
            <summary>
            Returns the existing object based on current object data.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.#ctor">
            <summary>
            Constructor - Creates an empty UserSiteInfo object.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new UserSiteInfo object from the given DataRow.
            </summary>
        </member>
        <member name="T:CMS.Membership.UserSiteInfoProvider">
            <summary>
            Class providing UserSiteInfo management.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.Get(System.Int32,System.Int32)">
            <summary>
            Gets an instance of the <see cref="T:CMS.Membership.UserSiteInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
            <returns>Returns an instance of <see cref="T:CMS.Membership.UserSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Asynchronously gets an instance of the <see cref="T:CMS.Membership.UserSiteInfo"/> binding structure.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
            <param name="cancellationToken">The cancellation instruction.</param>
            <returns>Returns a task returning either an instance of <see cref="T:CMS.Membership.UserSiteInfo"/> corresponding to given identifiers or null.</returns>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetUserSiteInfo(System.Int32,System.Int32)">
            <summary>
            Returns the UserSiteInfo structure for the specified userSite.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.SetUserSiteInfo(CMS.Membership.UserSiteInfo)">
            <summary>
            Sets (updates or inserts) specified userSite.
            </summary>
            <param name="userSite">UserSite to set</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.DeleteUserSiteInfo(CMS.Membership.UserSiteInfo)">
            <summary>
            Deletes specified userSite.
            </summary>
            <param name="infoObj">UserSite object</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.Remove(System.Int32,System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.Membership.UserSiteInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.RemoveUserFromSite(System.Int32,System.Int32)">
            <summary>
            Deletes specified userSite.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.Add(System.Int32,System.Int32)">
            <summary>
            Creates <see cref="T:CMS.Membership.UserSiteInfo"/> binding.
            </summary>
            <param name="userId">User ID.</param>
            <param name="siteId">Site ID.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="userId"/> or <paramref name="siteId"/> does not identify an existing user or site respectively.</exception>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.AddUserToSite(System.Int32,System.Int32)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.AddUserToSite(CMS.Membership.UserInfo,CMS.SiteProvider.SiteInfo)">
            <summary>
            Adds specified user to the site.
            </summary>
            <param name="ui">User info</param>
            <param name="si">Site info</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetUserSites">
            <summary>
            Returns the query for all relationships between users and sites.
            </summary>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.GetUserSiteInfoInternal(System.Int32,System.Int32)">
            <summary>
            Returns the UserSiteInfo structure for the specified userSite.
            </summary>
            <param name="userId">UserID</param>
            <param name="siteId">SiteID</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.SetInfo(CMS.Membership.UserSiteInfo)">
            <summary>
            Inserts or Updates the object to the database.
            </summary>
            <param name="info">Object to insert / update</param>
        </member>
        <member name="M:CMS.Membership.UserSiteInfoProvider.DeleteInfo(CMS.Membership.UserSiteInfo)">
            <summary>
            Deletes the object to the database.
            </summary>
            <param name="info">Object to delete</param>
        </member>
        <member name="T:AuthenticationSourceEnum">
            <summary>
            Enumeration describing source of user authentication
            </summary>
        </member>
        <member name="F:AuthenticationSourceEnum.Standard">
            <summary>
            Standard authentication using UI
            </summary>
        </member>
        <member name="F:AuthenticationSourceEnum.ExternalOrAPI">
            <summary>
            Authentication using external system or API
            </summary>
        </member>
    </members>
</doc>
