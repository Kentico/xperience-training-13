<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.ContinuousIntegration</name>
    </assembly>
    <members>
        <member name="T:CMS.ContinuousIntegration.ContinuousIntegrationHelper">
            <summary>
            Continuous integration helper.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.ContinuousIntegrationHelper.IsObjectSerializationEnabled">
            <summary>
            Indicates if object serialization is enabled.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.ContinuousIntegrationHelper.IsObjectSerializationEnabledInternal">
            <summary>
            Indicates if object serialization is enabled.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.ContinuousIntegrationHelper.RestoreAllEnabled">
            <summary>
            Indicates whether restore all operation is enabled.
            </summary>
            <remarks>
            This property returns true, unless explicitly set to false by the web.config key <c>CMSContinuousIntegrationRestoreAllEnabled</c>
            The key is for internal development only (to prevent unintended RestoreAll operation execution).
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.CheckLicense">
            <summary>
            Indicates whether license requirements are met. 
            </summary>
            <returns>True if license requirements are met.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.IsSupportedForObjectType(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Indicates whether object serialization is enabled and specified object type supports it.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.ProcessDependentObjects(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.ICollection{CMS.DataEngine.WhereCondition}}},System.Action{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.ICollection{CMS.DataEngine.BaseInfo}})">
            <summary>
            Iterates through collection of dependent object types and where conditions and select all objects that satisfy at least one condition. Executes passed action on all objects. 
            Selected objects are passed to <paramref name="infoAction"/> grouped by their type. 
            </summary>
            <remarks>
            <paramref name="infoAction"/> may be executed multiple times even with objects of the same type. When number of where conditions for given type exceeds internal limit, 
            then conditions are split into multiple queries. That means that objects of the same type are not always served altogether in one action call.
            </remarks>
            <param name="depWhereConditions">Collection of object types and where conditions that selects dependent objects.</param>
            <param name="infoAction">Action that is executed for all objects that satisfy the where condition. Objects are grouped by type in one action call.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.GetDependentObjectsWhereConditions(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets conditions selecting objects that depend on dependency objects specified by passed where condition.
            </summary>
            <param name="typeInfo">Type info of dependency object</param>
            <param name="dependencyWhere">Where condition selecting dependency objects</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.IsSupportedForObjectTypeInternal(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Indicates whether object serialization is enabled and specified object type supports it.
            </summary>
            <param name="typeInfo">Object type information</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.ProcessDependentObjectsInternal(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.ICollection{CMS.DataEngine.WhereCondition}}},System.Action{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.ICollection{CMS.DataEngine.BaseInfo}})">
            <summary>
            Iterates through collection of dependent object types and where conditions and select all objects that satisfy at least one condition. Executes passed action on all objects. 
            Selected objects are passed to <paramref name="infoAction"/> grouped by their type. 
            </summary>
            <remarks>
            <paramref name="infoAction"/> may be executed multiple times even with objects of the same type. When number of where conditions for given type exceeds internal limit, 
            then conditions are split into multiple queries. That means that objects of the same type are not always served altogether in one action call.
            </remarks>
            <param name="depWhereConditions">Collection of object types and where conditions that selects dependent objects.</param>
            <param name="infoAction">Action that is executed for all objects that satisfy the where condition. Objects are grouped by type in one action call.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.GetDependentObjectsWhereConditionsInternal(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets conditions selecting objects that depend on dependency objects specified by passed where condition.
            </summary>
            <param name="typeInfo">Type info of dependency object</param>
            <param name="dependencyWhere">Where condition selecting dependency objects</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHelper.CheckLicenseInternal">
            <summary>
            Indicates whether license requirements are met. 
            </summary>
            <returns>True if license requirements are met.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor">
            <summary>
            Provides methods for working with bindings in the file system repository.
            Files are cached and written to the file system at processor disposal. This allows to aggregate writes to the shared binding files.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.mDocumentsCache">
            <summary>
            Cache for binding documents indexed by file paths.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.#ctor(CMS.DataEngine.TranslationHelper,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.IFileSystemWriter)">
            <summary>
            Constructor with required <paramref name="translationHelper"/> and <paramref name="writer"/> parameter.
            </summary>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/>Object that is used to optimize database calls when translating IDs to <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>.</param>
            <param name="configuration">Object containing repository configuration.</param>
            <param name="writer">Object for writing to file system and storing hash of written file in hash manager.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="translationHelper"/> or <paramref name="writer"/> not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.LoadDocumentFromFile(System.String)">
            <summary>
            Loads <paramref name="relativePath"/>'s content into a new XmlDocument.
            </summary>
            <param name="relativePath">Path to an existing file containing an XML document to be loaded.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.PrepareNewDocument(System.String,CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Creates a new document with binding elements structure, stores it in the document cache and returns it.
            </summary>
            <param name="relativePath">Relative path to a file within the repository where the bindings should be stored.</param>
            <param name="parent">Parent common for all bindings stored within the document (including currently processed only right now).</param>
            <param name="rootElementName">Name of binding's object type (serving as root element of the document).</param>
            <returns>New element for currently processed binding.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.AppendBindingInternal(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Appends binding to the document retrieved from provided <paramref name="relativePath"/>.
            If binding record already exists within the file, it is rewritten in the resulting document.
            If the file does not exist, completely new document is created with single <paramref name="binding"/> (the provided one) inside.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the file in the repository that holds all bindings for the <paramref name="binding"/>'s parent.</param>
            <returns>
            An <see cref="T:System.Xml.XmlDocument"/> that contains all already written bindings and the new/edited one
            or <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> when there was an error in the document loaded from <paramref name="relativePath"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When no <paramref name="binding"/> provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.RemoveBindingInternal(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Removes the <paramref name="binding"/> from the document retrieved from provided <paramref name="relativePath"/>.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the file in the repository that holds all bindings for the <paramref name="binding"/>'s parent.</param>
            <returns>
            Document loaded from <paramref name="relativePath"/> without provided <paramref name="binding"/>'s record.
            <para>If binding record does not exist within the file, unchanged document is returned.</para>
            <para>If no binding record exist within the file after the <paramref name="binding"/> removal, <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> is returned.</para>
            <para>If the file does not exist, <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> is returned.</para>
            </returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.WriteBindingsInternal(System.String,System.Xml.XmlDocument)">
            <summary>
            Does nothing since the documents are cached until this object is disposed.
            </summary>
            <param name="relativePath">Target file path</param>
            <param name="document">XML document containing bindings.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.Dispose(System.Boolean)">
            <summary>
            Writes all cached documents, that have been modified since the initial read, to the file system.
            </summary>
            <param name="disposing">Indicates whether the disposal has already started.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor.Dispose">
            <summary>
            Writes all cached documents to the file system.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemBindingsProcessor">
            <summary>
            Provides methods for working with bindings in the file system repository.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS">
            <summary>
            Constant indicating that no bindings are present in the returned document.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.FileSystemBindingsProcessor.CheckBindingExistanceBeforeAddition">
            <summary>
            If true (default), before a binding is added into existing file, the content is checked if a binding with same child reference is already present in the 
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.#ctor(CMS.DataEngine.TranslationHelper,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.IFileSystemWriter)">
            <summary>
            Constructor with required <paramref name="translationHelper"/>, <paramref name="configuration"/> and <paramref name="writer"/> parameter.
            </summary>
            <param name="translationHelper"><see cref="T:CMS.DataEngine.TranslationHelper"/>Object that is used to optimize database calls when translating IDs to <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/>.</param>
            <param name="configuration">Object containing repository configuration.</param>
            <param name="writer">Object for writing to file system and storing hash of written file in hash manager.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="translationHelper"/> or <paramref name="configuration"/> or <paramref name="writer"/> not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.AppendBinding(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Appends binding to the document retrieved from provided <paramref name="relativePath"/>.
            If binding record already exists within the file, it is rewritten in the resulting document.
            If the file does not exist, completely new document is created with single <paramref name="binding"/> (the provided one) inside.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the file in the repository that holds all bindings for the <paramref name="binding"/>'s parent.</param>
            <returns>
            An <see cref="T:System.Xml.XmlDocument"/> that contains all already written bindings and the new/edited one
            or <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> when there was an error in the document loaded from <paramref name="relativePath"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When no <paramref name="binding"/> provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.ReadBindings(System.Xml.XmlDocument,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Reads all bindings within the provided <paramref name="document"/>. Bindings are supposed to be of <paramref name="typeInfo"/> type.
            </summary>
            <remarks>
            If there is a problem with XML structure (e.g. bindings collection is missing or there is no root element), empty collection is returned,
            otherwise, a collection of <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/> is returned where each binding needs to be examined for its potential deserialization problems.
            </remarks>
            <param name="document"><see cref="T:System.Xml.XmlDocument"/> read containing representation of all bindings of <paramref name="typeInfo"/> type with single parent.</param>
            <param name="typeInfo"><see cref="T:CMS.DataEngine.ObjectTypeInfo"/> of the bindings that are stored within the <paramref name="document"/>.</param>
            <returns>Collection of <see cref="T:CMS.DataEngine.Serialization.DeserializationResult"/>s that were read from provided <paramref name="document"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When either <paramref name="document"/> or <paramref name="typeInfo"/> is not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.ContainsBinding(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Returns true if given binding is serialized in a file on given path.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the bindings serialized within the repository.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.RemoveBinding(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Removes the <paramref name="binding"/> from the document retrieved from provided <paramref name="relativePath"/>.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the file in the repository that holds all bindings for the <paramref name="binding"/>'s parent.</param>
            <returns>
            Document loaded from <paramref name="relativePath"/> without provided <paramref name="binding"/>'s record.
            <para>If binding record does not exist within the file, unchanged document is returned.</para>
            <para>If no binding record exist within the file after the <paramref name="binding"/> removal, <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> is returned.</para>
            <para>If the file does not exist, <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> is returned.</para>
            </returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.WriteBindings(System.String,System.Xml.XmlDocument)">
            <summary>
            Writes bindings contained in <paramref name="document" /> to a file on <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Target file path</param>
            <param name="document">XML document containing bindings.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.AppendBindingInternal(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Appends binding to the document retrieved from provided <paramref name="relativePath"/>.
            If binding record already exists within the file, it is rewritten in the resulting document.
            If the file does not exist, completely new document is created with single <paramref name="binding"/> (the provided one) inside.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the file in the repository that holds all bindings for the <paramref name="binding"/>'s parent.</param>
            <returns>
            An <see cref="T:System.Xml.XmlDocument"/> that contains all already written bindings and the new/edited one
            or <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> when there was an error in the document loaded from <paramref name="relativePath"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">When no <paramref name="binding"/> provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.RemoveBindingInternal(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Removes the <paramref name="binding"/> from the document retrieved from provided <paramref name="relativePath"/>.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object representing a binding (its object type has <see cref="P:CMS.DataEngine.ObjectTypeInfo.IsBinding"/> set).</param>
            <param name="relativePath">Relative path to the file in the repository that holds all bindings for the <paramref name="binding"/>'s parent.</param>
            <returns>
            Document loaded from <paramref name="relativePath"/> without provided <paramref name="binding"/>'s record.
            <para>If binding record does not exist within the file, unchanged document is returned.</para>
            <para>If no binding record exist within the file after the <paramref name="binding"/> removal, <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> is returned.</para>
            <para>If the file does not exist, <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.NO_BINDINGS"/> is returned.</para>
            </returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.WriteBindingsInternal(System.String,System.Xml.XmlDocument)">
            <summary>
            Writes bindings contained in <paramref name="document" /> to a file on <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Target file path</param>
            <param name="document">XML document containing bindings.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.PrepareNewDocument(System.String,CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Creates a new document with binding elements structure and returns it.
            </summary>
            <param name="relativePath">Path to a file where the bindings should be stored.</param>
            <param name="parent">Parent common for all bindings stored within the document (including currently processed only right now).</param>
            <param name="rootElementName">Name of binding's object type (serving as root element of the document).</param>
            <returns>New element for currently processed binding.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.FindOrCreateElement(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Finds existing element within the document or creates new element in the existing structure of the document.
            </summary>
            <remarks>
            Returns null when root element is wrong or there is no <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.BINDINGS_COLLECTION_ELEMENT"/> present under the root.
            </remarks>
            <param name="document">Document to work with.</param>
            <param name="rootElementName">Name of object type that is expected to occur as root element name.</param>
            <param name="bindingIdentifier">Unique binding identifier (see <see cref="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.GetBindingIdentifier(CMS.DataEngine.BaseInfo)"/>).</param>
            <returns>Existing or new element for currently processed binding.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.LoadDocumentFromFile(System.String)">
            <summary>
            Loads <paramref name="relativePath"/>'s content into a new XmlDocument.
            </summary>
            <param name="relativePath">Relative path to a file existing within the repository containing an XML document to be loaded.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.GetBindingIdentifier(CMS.DataEngine.BaseInfo)">
            <summary>
            Creates unique identifier for given <paramref name="binding"/>, so it can be distinguish within the file more easily.
            </summary>
            <param name="binding"><see cref="T:CMS.DataEngine.BaseInfo"/> object to create identifier of.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.IsRootElementValid(System.Xml.XmlNode,System.String)">
            <summary>
            Returns true provided root element is not null and its name matches the <paramref name="expectedRootElementName"/>.
            </summary>
            <remarks>XML elements are case sensitive, so is the check.</remarks>
            <param name="rootElement">Root element to check.</param>
            <param name="expectedRootElementName">Expected name of the root element. If null, no check performed.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.SelectBindingsCollection(System.Xml.XmlNode)">
            <summary>
            If exists, loads binding collection from provided root element, returns null otherwise.
            The collection should contain individual bindings without parent (that they have in common and that is present on the same level as the collection,
            under <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.BINDING_PARENT_ELEMENT"/>).
            </summary>
            <param name="rootElement">Root element the bindings collection is supposed to be in.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.GetBindingElementXPath(System.String)">
            <summary>
            Returns string containing XPath identifying binding element(s) with specific <paramref name="bindingId"/> within <see cref="F:CMS.ContinuousIntegration.FileSystemBindingsProcessor.BINDINGS_COLLECTION_ELEMENT"/>.
            </summary>
            <param name="bindingId">Unique identifier of a binding that marks its individual data section in XML.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.SelectBindingElement(System.Xml.XmlNode,System.String)">
            <summary>
            Returns single binding element with given <paramref name="bindingIdentifier"/>.
            </summary>
            <param name="bindingCollection">Collection of bindings (see <see cref="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.SelectBindingsCollection(System.Xml.XmlNode)"/>).</param>
            <param name="bindingIdentifier">Unique identifier of a binding that marks its individual data section in XML.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.SelectBindingElements(System.Xml.XmlNode,System.String)">
            <summary>
            Returns all binding element with given  <paramref name="bindingIdentifier"/>.
            </summary>
            <param name="bindingCollection">Collection of bindings (see <see cref="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.SelectBindingsCollection(System.Xml.XmlNode)"/>).</param>
            <param name="bindingIdentifier">Unique identifier of a binding that marks its individual data section in XML.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.CreateParentElement(System.Xml.XmlNode,CMS.DataEngine.BaseInfo)">
            <summary>
            Creates parent element right under the <paramref name="rootElement"/> filling it with parent's reference obtained from <paramref name="parent"/> object.
            </summary>
            <param name="rootElement">Root element of resulting XML.</param>
            <param name="parent">Parent object of a binding in question.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.CreateBindingsCollection(System.Xml.XmlNode)">
            <summary>
            Creates collection of bindings right under the <paramref name="rootElement"/>, so each binding with given parent can be nested within the collection.
            </summary>
            <param name="rootElement">Root element of resulting XML.</param>
            <returns><see cref="T:System.Xml.XmlNode"/> that represents the bindings collection (the root of all individual bindings).</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.CreateBindingElement(System.Xml.XmlNode,System.String)">
            <summary>
            Creates data-less element for a single binding object right under the binding collection element (see <seealso cref="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.CreateBindingsCollection(System.Xml.XmlNode)"/>).
            </summary>
            <param name="bindingsCollection">Collection of individual bindings within a document (see <seealso cref="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.CreateBindingsCollection(System.Xml.XmlNode)"/>).</param>
            <param name="bindingIdentifier">Binding's unique identifier within a document (see <seealso cref="M:CMS.ContinuousIntegration.FileSystemBindingsProcessor.GetBindingIdentifier(CMS.DataEngine.BaseInfo)"/>).</param>
            <returns><see cref="T:System.Xml.XmlNode"/> that represents a single binding object.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.MemoryCache`1">
            <summary>
            Provides in-memory cache for storing <typeparamref name="TItem"/> objects based on a <see cref="T:System.String"/> key.
            </summary>
            <typeparam name="TItem">Type of objects that will be stored in the cache.</typeparam>
        </member>
        <member name="T:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1">
            <summary>
            Internal class holding cached data and their status.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1.IsDirty">
            <summary>
            Indicates the item has changed (externally set flag).
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1.Data">
            <summary>
            Content stored in cache under specific key.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1.#ctor(`1)">
            <summary>
            Creates new instance of the <see cref="T:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.MemoryCache`1.CachedItems">
            <summary>
            Dictionary of cached items (index by their string keys).
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.MarkDirty(System.String)">
            <summary>
            Marks cached document for given <paramref name="key"/> with a flag that it has been modified specially processed eventually.
            </summary>
            <param name="key"><see cref="T:System.String"/> key identifying the cached data.</param>
            <remarks>Non-existing keys are silently skipped.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.SetItem(System.String,`0,System.Boolean)">
            <summary>
            Stores given <paramref name="item"/> in the cache under provided <paramref name="key"/>.
            Eventually sets <paramref name="item"/>'s <see cref="P:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1.IsDirty"/> flag.
            </summary>
            <param name="key"><see cref="T:System.String"/> key identifying the cached data.</param>
            <param name="item">Data to cache.</param>
            <param name="markAsDirty">Data purity flag</param>
            <remarks>If <paramref name="item"/> resents <see langword="null"/>, <see langword="null"/> is cached for the <paramref name="key"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.FetchItem(System.String,System.Func{`0},System.Boolean)">
            <summary>
            Reads data cached under the provided <paramref name="key"/> (if present)
            or executes provided <paramref name="loadFunction"/>, caching its result and returning obtained value.
            In addition, method eventually sets <paramref name="key"/>'s <see cref="P:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1.IsDirty"/> flag for newly cached data.
            </summary>
            <param name="key"><see cref="T:System.String"/> key identifying the cached data.</param>
            <param name="loadFunction">Delegate executed if cache item is not hit.</param>
            <param name="markLoadedItemDirty">Newly loaded data purity flag</param>
            <remarks>If <paramref name="loadFunction"/> returns <see langword="null"/>, <see langword="null"/> is cached for the <paramref name="key"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.GetItems(System.Boolean)">
            <summary>
            Returns collection of keys and data stored in the cached.
            </summary>
            <param name="dirtyOnly">If <see langword="true"/>, only items marked as <see cref="P:CMS.ContinuousIntegration.MemoryCache`1.CacheItem`1.IsDirty"/> are returned, all items are returned otherwise.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.RemoveItem(System.String)">
            <summary>
            Removes cached data stored under <paramref name="key"/>.
            </summary>
            <param name="key"><see cref="T:System.String"/> key identifying the cached data.</param>
            <returns>Stored data or default value of <typeparamref name="TItem"/> (e.g. null) if no item stored under the <paramref name="key"/>.</returns>
            <remarks>Stored data might equal to default value of <typeparamref name="TItem"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.Clear">
            <summary>
            Clears whole cache.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.MemoryCache`1.CheckKey(System.String)">
            <summary>
            Throws an exception if provided <paramref name="key"/> is not suitable cache key.
            </summary>
            <param name="key"><see cref="T:System.String"/> key identifying the cached data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.CodenameFilter">
            <summary>
            Class representing codename filter for continuous integration.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.CodenameFilter.WhereCondition">
            <summary>
            Gets a Where condition which filters objects by codename.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CodenameFilter.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Creates new instance of Codename filter.
            </summary>
            <param name="filterColumn">Column name, which is filtered by codename.</param>
            <param name="prefixes">Prefixes of filtered codenames.</param>
            <param name="suffixes">Suffixes of filtered codenames.</param>
            <param name="codenames">Filtered codenames.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CodenameFilter.IsObjectIncluded(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true, if object meets the codename filter.
            </summary>
            <param name="baseInfo">Base info.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CodenameFilter.CreateWhereCondition">
            <summary>
            Creates a Where condition, which represents this filter.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ExcludedObjectTypeCodeNames">
            <summary>
            Class represents excluded code names for an object type.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.ExcludedObjectTypeCodeNames.ObjectType">
            <summary>
            Object type for which the excluded code names are specified.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.ExcludedObjectTypeCodeNames.CodeNames">
            <summary>
            Collection of code names that will be excluded.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ExcludedObjectTypeCodeNames.GetSchema">
            <summary>
            Implementation of IXmlSerializable.GetSchema().
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ExcludedObjectTypeCodeNames.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserialize object from XML.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ExcludedObjectTypeCodeNames.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serialize object to XML.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration">
            <summary>
            Configuration of a file system repository.
            Use <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/> to create a new configuration.
            </summary>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath">
            <summary>
            Gets root path to file system repository (with trailing backslash).
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypes">
            <summary>
            Gets the set of object types to be stored in the repository.
            </summary>
            <remarks>
            The set includes root types and their child types.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.MainObjectTypes">
            <summary>
            Gets the set of main object types to be stored in the repository. Main object type is type without a parent type.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypesFilterConditions">
            <summary>
            Gets the dictionary of object types filter conditions [ObjectType] -> [WhereCondition]. Only objects meeting these conditions will be stored.
            </summary>
            <remarks>
            <para>
            Values in this dictionary have <see cref="P:CMS.ContinuousIntegration.Internal.CodenameFilter.WhereCondition"/> merged in for given object type (key). 
            </para>
            <para>
            For object filtering in memory during the restoration process, use <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypesCodenameFilter"/>.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypesCodenameFilter">
            <summary>
            Gets the dictionary of object types codename filter [ObjectType] -> [CodenameFilter]. Only objects meeting these conditions will be restored.
            </summary>
            <remarks>
            <para>
            This filter is used when object are filtered in memory by codename during the restore process.
            </para>
            <para>
            When filtering objects from database, use <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypesFilterConditions"/>, where <see cref="P:CMS.ContinuousIntegration.Internal.CodenameFilter.WhereCondition"/> is merged in.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.#ctor">
            <summary>
            Internal constructor. Use <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/> to create a new configuration.
            </summary>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IDictionary{System.String,CMS.DataEngine.IWhereCondition},System.Collections.Generic.IDictionary{System.String,CMS.ContinuousIntegration.Internal.CodenameFilter},System.Func{System.String[]})">
            <summary>
            Internal constructor. Use <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/> to create a new configuration.
            </summary>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.GetAbsolutePath(System.String)">
            <summary>
            Combines given <paramref name="relativePath"/> with <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/> to produce an absolute path.
            </summary>
            <param name="relativePath">Relative path within the repository.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ReloadCustomTableObjectTypes">
            <summary>
            Reloads custom table object types and adds them to current <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypes"/> of this configuration.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder">
            <summary>
            Builder for file system repository configuration.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.ConfigurationBuilder">
            <summary>
            Creates initial configuration or loads the configuration from physical file.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.ObjectTypes">
            <summary>
            Set of object types to be stored in the repository. When this set is empty, repository configuration file is loaded and used.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.RepositoryRootPath">
            <summary>
            Gets the file system repository root path (with trailing backslash).
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.ObjectTypesFilterConditions">
            <summary>
            Gets the collection of filter conditions ([object type] -> [filter condition])
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.#ctor(System.String,System.Boolean,CMS.ContinuousIntegration.ICustomTableTypeProvider,CMS.ContinuousIntegration.IMainObjectTypeProvider)">
            <summary>
            Creates builder with all configuration properties set to default values.
            </summary>
            <param name="repositoryRootPath">Relative path to repository root in the main application. Default repository path (<see cref="F:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.DEFAULT_REPOSITORY_ROOT_PATH"/>) is used if not provided.</param>
            <param name="ensureConfigurationFile">Determines whether initial configuration file is created when the repository contains none.</param>
            <param name="customTableTypeProvider">Provider implementation for obtaining dynamic object types.</param>
            <param name="mainObjectTypeProvider">Provider implementation for obtaining mnain object types.</param>
            <remarks>
            The initial configuration file is ensured when it is accessed. This typically occurs upon the <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.Build"/> method call.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.Build">
            <summary>
            Builds file system repository configuration.
            </summary>
            <returns>File system repository configuration.</returns>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails or <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.ObjectTypes"/> property is misconfigured.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.GetRepositoryRootPath(System.String,System.String)">
            <summary>
            Returns path to the file system repository root.
            Value from "CMSCIRepositoryPath" application key has the highest priority. If not specified, the path is combined from provided or default values.
            If the application key specifies a relative path, the path is combined from <paramref name="applicationPath"/> or its default value.
            </summary>
            <param name="applicationPath">Path to the file system application root. <see cref="P:CMS.Base.SystemContext.WebApplicationPhysicalPath"/> is used if not provided.</param>
            <param name="relativeRepositoryPath">Relative path to repository root in the main application. Default repository path (<see cref="F:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.DEFAULT_REPOSITORY_ROOT_PATH"/>) is used if not provided.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.LoadConfigurationFromObjectTypes">
            <summary>
            Loads configuration from <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.ObjectTypes"/> collection set to the instance.
            </summary>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.LoadConfigurationFromFileOrInfos">
            <summary>
            Loads configuration from file or uses default configuration if configuration file doesn't exist.
            </summary>
            <remarks>
            Creates an initial configuration file, if the repository root contains none
            and <see cref="F:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.mEnsureConfigurationFile"/> is set to true.
            </remarks>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.GetMainTypeInfos(CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile)">
            <summary>
            Returns main object types specified in loaded configuration with fall-back to configuration in individual object type infos
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.GetObjectTypes(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo},CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile)">
            <summary>
            Returns object types derived from the main object types specified in the loaded configuration <seealso cref="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.GetMainTypeInfos(CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile)"/>
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.GetCustomTableObjectTypes(CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile)">
            <summary>
            Returns custom table object types according to given configuration
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.IsCustomTableObjectType(System.String)">
            <summary>
            Returns <c>true</c>, if given <paramref name="objectType"/> is a custom table object type.
            </summary>
            <param name="objectType">Object type name.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.LoadDefaultFilterConditions(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns default filtering where conditions for object types specified by <paramref name="objectTypes"/>.
            The conditions are loaded from <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.FilterCondition"/>.
            </summary>
            <param name="objectTypes">Object types filter conditions should be loaded for</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.MergeFilterConditions(System.Collections.Generic.IDictionary{System.String,CMS.DataEngine.IWhereCondition},System.Collections.Generic.IDictionary{System.String,CMS.DataEngine.IWhereCondition})">
            <summary>
            Merges where conditions from two collections.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.LoadCodeNameFilterFromConfigFile(CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile)">
            <summary>
            Creates <see cref="T:CMS.ContinuousIntegration.Internal.CodenameFilter"/> for object filtering based on configuration file.
            </summary>
            <param name="configurationFile">Repository configuration file</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.ExpandGlobalExcludedCodeNameFilter(CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Expands global setting for excluded code names into specified object types.
            Existing excluded code name configurations are not overwritten by global settings.
            </summary>
            <param name="configurationFile">Repository configuration file.</param>
            <param name="objectTypes">List of object types which supports continuous integration.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.LoadConfigurationFile">
            <summary>
            Loads configuration file.
            </summary>
            <remarks>
            Creates an initial configuration file, if the repository root contains none
            and <see cref="F:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder.mEnsureConfigurationFile"/> is set to true.
            </remarks>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
            <returns>Loaded configuration file or new instance of <see cref="T:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile"/> if configuration file doesn't exist in repository.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions">
            <summary>
            Class provides fluent extension for <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/> and is meant for this single purpose.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectTypesWithContinuousIntegrationSupport(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Selects only such <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>s that DO support continuous integration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectTypesWithoutContinuousIntegrationSupport(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Selects only such <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>s that DO NOT support continuous integration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectTypeInfos(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Converts given collection of <paramref name="objectTypes"/> to a collection of their <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>.
            </summary>
            <param name="objectTypes">Collection of names of object types.</param>
            <param name="throwExceptionIfNotFound">If <see langword="true"/> and object type could not be retrieved for given object type, exception is thrown, <see langword="null"/> is yielded otherwise.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectManyDistinctSubTypes(CMS.DataEngine.ObjectTypeInfo,System.Func{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Calls <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectManyObjectTypesAndSubtypes(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})"/> on all <paramref name="typeInfo"/>'s subtypes (selected by <paramref name="subTypesSelector"/>).
            </summary>
            <param name="typeInfo"><see cref="T:CMS.DataEngine.ObjectTypeInfo"/> to process sub types of.</param>
            <param name="subTypesSelector">Declares what object subtypes of <paramref name="typeInfo"/> should be processed (i.e. children or bindings or other bindings).</param>
            <remarks>Object type of <paramref name="typeInfo"/> is excluded from object types selected by <paramref name="subTypesSelector"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectManyBindingObjectTypeInfos(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Returns all <paramref name="typeInfos"/> provided and all <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>s they wrap.
            </summary>
            <param name="typeInfos">Object types to process</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.ValidateContinuousIntegrationSupport(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Validates whether all <paramref name="objectTypes"/> are among supported.
            </summary>
            <param name="objectTypes">Object types to be supported.</param>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when one or more object types are not supported.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectObjectType(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Selects object type names of give <paramref name="typeInfos"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.ToContinuousIntegrationSupportingTypeInfos(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts given collection of <paramref name="objectTypes"/> to a collection of their <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>,
            validates whether all <paramref name="objectTypes"/> are among supported in continuous integration.
            </summary>
            <param name="objectTypes">Collection of names of object types.</param>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when one or more object types are not supported.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectManyObjectTypesAndSubtypes(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Returns object types of all provided <paramref name="typeInfos"/>, infos they wraps and all their children recursively. Only types that support continuous integration.
            </summary>
            <param name="typeInfos">Collection of <see cref="T:CMS.DataEngine.ObjectTypeInfo"/>s to start depth-first search algorithm for related types supporting continuous integration on.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.SelectMainObjectTypes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Selects main object types of given <paramref name="objectTypes"/> collection.
            </summary>
            <param name="objectTypes">Base set of object types.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilderExtensions.ValidateContinuousIntegrationSupport(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Validates whether all <paramref name="objectTypes"/> are among supported.
            </summary>
            <param name="objectTypes">Object types to be supported.</param>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when one or more object types are not supported.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.IFileSystemRepositoryConfigurationBuilder">
            <summary>
            Builder for file system repository configuration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.IFileSystemRepositoryConfigurationBuilder.Build">
            <summary>
            Builds file system repository configuration.
            </summary>
            <returns>File system repository configuration.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.IRepositoryConfigurationEvaluator">
            <summary>
            Defines methods for evaluating repository configuration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.IRepositoryConfigurationEvaluator.IsObjectIncluded(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns true if object is to be included in the repository based on repository configuration.
            </summary>
            <param name="info">Info object to be processed</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <remarks>
            Returns true if root parent of given <paramref name="info"/> object is to be included.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ObjectTypeInfoExtensions">
            <summary>
            Class provides Continuous integration extensions for <see cref="T:CMS.DataEngine.ObjectTypeInfo"/> and is meant for this single purpose.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ObjectTypeInfoExtensions.SupportsContinuousIntegration(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns true if given <paramref name="typeInfo"/> supports continuous integration.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator">
            <summary>
            Class responsible for evaluating <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.AddIsObjectTypeIncludedCondition(System.Func{System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,System.Boolean})">
            <summary>
            Registers a new condition which evaluates whether an object type is to be included in the repository based on repository configuration.
            </summary>
            <param name="condition">Condition to be registered.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.AddObjectTypeTransformation(System.String,System.Func{System.String,System.String})">
            <summary>
            Registers a new transformation function which processes given object type string into another string that will be used in repository configuration evaluations instead of the original one.
            </summary>
            <param name="prefix">Transformation function will be executed only on object type strings that match this prefix.</param>
            <param name="transformation">Transformation function to be registered.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectTypeIncluded(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Indicates whether specified object type should be included in the repository based on repository configuration.
            </summary>
            <param name="objectType">Object type.</param>
            <param name="configuration">File system repository configuration.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.GetRepositoryObjectType(System.String)">
            <summary>
            Returns object type string that should be used instead of passed <paramref name="objectType"/> in repository configuration evaluations.
            </summary>
            <param name="objectType">Object type to be converted to repository object type.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="objectType"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectTypeIncludedDefaultCondition(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Default condition which checks whether an object type is explicitly named in
            the <paramref name="configuration"/>'s <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.ObjectTypes"/> set.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncluded(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns true if object is to be included in the repository based on repository configuration.
            </summary>
            <param name="info">Info object to be processed</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <remarks>
            Returns true if root parent of given <paramref name="info"/> object is to be included.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedInternal(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns true if object is to be included in the repository based on repository configuration.
            </summary>
            <param name="info">Info object to be processed</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <remarks>
            Returns true if root parent of given <paramref name="info"/> object is to be included.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsNewObject(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns true if given object is a new object to be inserted to database, i.e. its ID is equal to zero.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByRelatedObjects(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper,System.Boolean)">
            <summary>
            Returns true if the given object is not filtered out by any of its related objects (parent, category, ...).
            The method does not check binding dependencies.
            </summary>
            <param name="info">Info object to be processed</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <param name="includeIfParentObjectTypeExcluded">If true, excluded parent object type does not exclude the info object</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsBindingIncluded(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns true if <paramref name="info"/> object type is binding and no dependency is filtered out.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByReference(System.String,System.Int32,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper,System.Boolean)">
            <summary>
            Returns true if given reference does not filter out its dependent object.
            </summary>
            <param name="referenceObjectType">Referenced object's type</param>
            <param name="referenceId">Referenced object's ID</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <param name="includeIfExcludedObjectType">Indicates if dependent object is included even if reference object type is excluded</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByReference(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.TranslationHelper,System.Boolean)">
            <summary>
            Returns true if given reference does not filter out its dependent object.
            </summary>
            <param name="reference">Reference to check</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <param name="includeIfExcludedObjectType">Indicates if dependent object is included even if reference object type is excluded</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByFilterDependencies(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns true if the given object is not filtered out by its dependencies defined in <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.FilterDependencies"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsIncludedByObject(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.TranslationHelper,System.Boolean)">
            <summary>
            Returns true if the given object does not restrict its children.
            </summary>
            <param name="checkedObject">Translation reference of checked object</param>
            <param name="configuration">File system repository configuration</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
            <param name="includeIfParentObjectTypeExcluded">If true, excluded parent object type does not exclude the object</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsIncludedByFilterDependencies(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.TranslationHelper)">
            <summary>
             Returns true if the given object is not restricted by its filter dependencies.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsSuperiorObjectTypeIncluded(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Returns true if <paramref name="parentObjectType"/> is included in provided <paramref name="configuration"/> or
            it is a component object type and its composite object type is included in the <paramref name="configuration"/>.
            </summary>
            <remarks>
            This method only makes sense for types participating in an type relation as the master objects
            (either parent object types or object type other depend on in any way), hence the name.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByCodenameFilter(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Checks if object's codename meets the codename filter specified by repository configuration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByFilterCondition(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Checks if object meets the object type filter condition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.IsObjectIncludedByFilterCondition(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.TranslationHelper)">
            <summary>
            Checks if the object represented by the given translation reference meets filter condition.
            Returns true if the object can be stored.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.GetObjectTypeForFiltering(System.String)">
            <summary>
            Returns object type that should be used for filtering. The method takes into account composite object types.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.GetObjectId(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns ID of info object if set, otherwise it returns ID loaded through translation helper.
            This method ensures that correct object ID is used, because i.e. object inserted by bulk insert doesn't have set ID and must be reloaded to get the real ID. 
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationEvaluator.GetObjectTypeFilterCondition(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Returns filter condition of given object type.
            </summary>
            <param name="objectType">Object type which condition will be returned</param>
            <param name="configuration">Repository configuration</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile">
            <summary>
            Represents a configuration file of the repository. The configuration specifies which main object types are to be included in the repository.
            </summary>
            <remarks>
            This class is public for the purpose of serialization only. It is not intended for public use.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile.IncludedObjectTypes">
            <summary>
            Set of main object types to be included in the repository. Empty set means all main object types.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile.ExcludedObjectTypes">
            <summary>
            Set of main object types to be excluded from the repository. Empty set means no main object types.
            </summary>
            <remarks>
            When an object type belongs to both <see cref="P:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile.IncludedObjectTypes"/> and <see cref="P:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile.ExcludedObjectTypes"/>,
            it is excluded from the repository.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile.ExcludedCodeNames">
            <summary>
            Set of excluded code names for each object type.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile.#ctor">
            <summary>
            Initializes a new instance of repository configuration file.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.CustomProcessorBase">
            <summary>
            Provides <see cref="P:CMS.ContinuousIntegration.Internal.CustomProcessorBase.TranslationHelper"/> object from a job the processor will be run from to ease
            customization of <see cref="T:System.Xml.XmlDocument"/> after it is processed by <see cref="T:CMS.DataEngine.Serialization.InfoSerializer"/>
            and before it is process by <see cref="T:CMS.DataEngine.Serialization.InfoDeserializer"/>.
            </summary>
            <remarks>This class is intended for internal usage only.</remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.CustomProcessorBase.TranslationHelper">
            <summary>
            Translation helper object used to optimize database calls.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.CustomProcessorBase.TranslationReferenceLoader">
            <summary>
            Gets a loader object used to instantiate <see cref="T:CMS.DataEngine.Serialization.TranslationReference"/> from various sources.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorBase.#ctor(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob)">
            <summary>
            Creates new instance of the <see cref="T:CMS.ContinuousIntegration.Internal.CustomProcessorBase"/> class.
            </summary>
            <param name="job">Job the processor will be run from.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorBase.PreprocessDeserializedDocument(CMS.ContinuousIntegration.Internal.CustomProcessorResult,System.Xml.XmlDocument,CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Amends <paramref name="document"/> loaded from file system before it is processed by <see cref="T:CMS.DataEngine.Serialization.InfoDeserializer"/>.
            </summary>
            <param name="processorResult">Object carrying information of ongoing deserialization.</param>
            <param name="document">XML file loaded from the file system.</param>
            <param name="structuredLocation">Location of object's main file and its additional parts in repository.</param>
            <remarks>
            In case the <paramref name="document"/> is in invalid state, <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/>
            and/or <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings"/> should be updated in order to stop object from being
            set into DB in invalid state. 
            <para>The method should never throw an exception.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorBase.PostprocessSerializedObject(CMS.DataEngine.BaseInfo,System.String,System.Xml.XmlElement)">
            <summary>
            Amends <paramref name="serializedObject"/> after it was processed by <see cref="T:CMS.DataEngine.Serialization.InfoSerializer"/>.
            </summary>
            <param name="infoObject">Object that was serialized into <paramref name="serializedObject"/>.</param>
            <param name="infoRelativePath">(Main) Path the <paramref name="serializedObject"/> will be stored in.</param>
            <param name="serializedObject">Serialization form of the <paramref name="infoObject"/>.</param>
            <remarks>The method should never throw an exception.</remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.CustomProcessorFactory">
            <summary>
            Factory allowing <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/> registration.
            </summary>
            <remarks>
            This class is intended for internal usage only.
            <para>By default, (only) separated fields are processed for each object type.</para>
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.Instance">
            <summary>
            The only instance of the class.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.RegisterProcessor``1(System.String)">
            <summary>
            Registers custom processor with parameterless constructor to <paramref name="objectType"/>.
            Processor will be instantiated by the parameterless constructor's call.
            </summary>
            <typeparam name="TCustomProcessor">A parameterless implementation of <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>.</typeparam>
            <param name="objectType">Object type to associate the <typeparamref name="TCustomProcessor"/> with.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.RegisterProcessor(System.String,System.Func{CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.ContinuousIntegration.Internal.ICustomProcessor})">
            <summary>
            Registers given <paramref name="processorMethod"/> to <paramref name="objectType"/>.
            Processor will be instantiated by calling the  <paramref name="processorMethod"/>.
            </summary>
            <param name="objectType">Object type to associate the <paramref name="processorMethod"/> with.</param>
            <param name="processorMethod">Method returning implementation of the <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/> interface that should handle given <paramref name="objectType"/>.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetSerializationProcessors(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns collection of all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s associated with provided <paramref name="typeInfo"/> 
            and (eventually) its <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/>. Also default processor(s) are yielded.
            </summary>
            <param name="job">Instance of <see cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob"/> that requests the processors.</param>
            <param name="typeInfo">Type of object the processors should be gathered for.</param>
            <returns>Collection ordered for serialization – default are last, most specialized first (opposite to <see cref="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetDeserilizationProcessors(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)"/>).</returns>
            <remarks><see cref="T:CMS.ContinuousIntegration.SeparatedFieldProcessor"/> is returned as the very last one.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetDeserilizationProcessors(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns collection of all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s associated with provided <paramref name="typeInfo"/> 
            and (eventually) its <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/>. Also default processor(s) are yielded.
            </summary>
            <param name="job">Instance of <see cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob"/> that requests the processors.</param>
            <param name="typeInfo">Type of object the processors should be gathered for.</param>
            <returns>Collection ordered for deserialization – default are first, most specialized last (opposite to <see cref="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetSerializationProcessors(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)"/>.</returns>
            <remarks><see cref="T:CMS.ContinuousIntegration.SeparatedFieldProcessor"/> is returned as the very first one.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.RegisterProcessorInternal(System.String,System.Func{CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.ContinuousIntegration.Internal.ICustomProcessor})">
            <summary>
            Registers given <paramref name="processorMethod"/> to <paramref name="objectType"/>.
            Processor will be instantiated by calling the  <paramref name="processorMethod"/>.
            </summary>
            <param name="objectType">Object type to associate the <paramref name="processorMethod"/> with.</param>
            <param name="processorMethod">Method returning implementation of the <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/> interface that should handle given <paramref name="objectType"/>.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetSerializationProcessorsInternal(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns collection of all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s associated with provided <paramref name="typeInfo"/> 
            and (eventually) its <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/>. Also default processor(s) are yielded.
            </summary>
            <param name="job">Instance of <see cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob"/> that requests the processors.</param>
            <param name="typeInfo">Type of object the processors should be gathered for.</param>
            <returns>Collection ordered for serialization – default are last, most specialized first (opposite to <see cref="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetDeserilizationProcessors(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)"/>).</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetDeserializationProcessorsInternal(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns collection of all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s associated with provided <paramref name="typeInfo"/> 
            and (eventually) its <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/>. Also default processor(s) are yielded.
            </summary>
            <param name="job">Instance of <see cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob"/> that requests the processors.</param>
            <param name="typeInfo">Type of object the processors should be gathered for.</param>
            <returns>Collection ordered for deserialization – default are first, most specialized last (opposite to <see cref="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.GetSerializationProcessors(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)"/>.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.CheckArguments(CMS.ContinuousIntegration.Internal.AbstractFileSystemJob,CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Validates given arguments for not-being <see langword="null"/>.
            </summary>
            <param name="job">Job instance the processor(s) are called from.</param>
            <param name="typeInfo">Type of object the processors should be gathered for.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="job"/> or <paramref name="typeInfo"/> is not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorFactory.#ctor">
            <summary>
            Initializes a new job factory with default factory method.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.CustomProcessorResult">
            <summary>
            Provides information on custom process result.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.CustomProcessorResult.TypeInfo">
            <summary>
            Type info the processor processes.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.CustomProcessorResult.#ctor(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Creates new instance of <see cref="T:CMS.ContinuousIntegration.Internal.CustomProcessorResult"/>
            </summary>
            <param name="typeInfo">Type info the process processes.</param>
            <exception cref="T:System.NullReferenceException">Thrown when <paramref name="typeInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ICustomProcessor">
            <summary>
            Provides interface for customization of <see cref="T:System.Xml.XmlDocument"/> after it is processed by <see cref="T:CMS.DataEngine.Serialization.InfoSerializer"/>
            and before it is process by <see cref="T:CMS.DataEngine.Serialization.InfoDeserializer"/>.
            </summary>
            <remarks>This class is intended for internal usage only.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ICustomProcessor.PreprocessDeserializedDocument(CMS.ContinuousIntegration.Internal.CustomProcessorResult,System.Xml.XmlDocument,CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Amends <paramref name="document"/> loaded from file system before it is processed by <see cref="T:CMS.DataEngine.Serialization.InfoDeserializer"/>.
            </summary>
            <param name="processorResult">Object carrying information of ongoing deserialization.</param>
            <param name="document">XML file loaded from the file system.</param>
            <param name="structuredLocation">Location of object's main file and its additional parts in repository.</param>
            <remarks>
            In case the <paramref name="document"/> is in invalid state, <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedFields"/>
            and/or <see cref="P:CMS.DataEngine.Serialization.DeserializationResultBase.FailedMappings"/> should be updated in order to stop object from being
            set into DB in invalid state. 
            <para>The method should never throw an exception.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ICustomProcessor.PostprocessSerializedObject(CMS.DataEngine.BaseInfo,System.String,System.Xml.XmlElement)">
            <summary>
            Amends <paramref name="serializedObject"/> after it was processed by <see cref="T:CMS.DataEngine.Serialization.InfoSerializer"/>.
            </summary>
            <param name="infoObject">Object that was serialized into <paramref name="serializedObject"/>.</param>
            <param name="infoRelativePath">(Main) Path the <paramref name="serializedObject"/> will be stored in.</param>
            <param name="serializedObject">Serialization form of the <paramref name="infoObject"/>.</param>
            <remarks>The method should never throw an exception.</remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteJobFactory">
            <summary>
            Factory for file system repository delete jobs.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJobFactory.#ctor">
            <summary>
            Initializes delete job factory with default job set to <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob"/>.
            </summary>
            <remarks>
            The constructor is public for the purpose of the class instantiation by the abstract predecessor of the class. There is no need
            to instantiate it in your custom code.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJobFactory">
            <summary>
            Factory for file system repository restore objects by type jobs.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJobFactory.#ctor">
            <summary>
            Initializes delete objects by type job factory with default job set to <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/>.
            </summary>
            <remarks>
            The constructor is public for the purpose of the class instantiation by the abstract predecessor of the class. There is no need
            to instantiate it in your custom code.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2">
            <summary>
            Factory for file system repository jobs.
            </summary>
            <typeparam name="TJobFactory">Type of the factory inherited from this abstract class.</typeparam>
            <typeparam name="TJob">Type of job to be instantiated by the factory.</typeparam>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.CreateJob">
            <summary>
            Factory method creating a new job from given configuration.
            </summary>
            <param name="configuration">Repository manager configuration for the job to be created.</param>
            <returns>New instance of job.</returns>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.instance">
            <summary>
            The only instance of the class.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.RegisterJob(System.String,CMS.ContinuousIntegration.Internal.FileSystemJobFactory{`0,`1}.CreateJob)">
            <summary>
            Registers a new job for given object type by providing a factory method for the job.
            </summary>
            <param name="objectType">Object type for which the job is to be used.</param>
            <param name="factoryMethod">Method which creates a new instance of the job.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="objectType"/> or <paramref name="factoryMethod"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.GetJob(CMS.DataEngine.ObjectTypeInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Gets a new instance of <typeparamref name="TJob"/> job suitable for <paramref name="typeInfo"/>. The instance is determined as follows.
            If specific job is available for object type of type info, it is used.
            If specific job is available for original object type of type info, it is used.
            Otherwise the default job is used.
            </summary>
            <param name="typeInfo">Type info for which to instantiate a <typeparamref name="TJob"/> based on object type (or original object type).</param>
            <param name="configuration">Configuration to be used when creating an instance of the job.</param>
            <returns>An instance of <typeparamref name="TJob"/>.</returns>
            <exception cref="T:CMS.DataEngine.BaseInfo">Thrown when <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.RegisterJobInternal(System.String,CMS.ContinuousIntegration.Internal.FileSystemJobFactory{`0,`1}.CreateJob)">
            <summary>
            Registers a new job for given object type by providing a factory method for the job.
            </summary>
            <param name="objectType">Object type for which the job is to be used.</param>
            <param name="factoryMethod">Method which creates a new instance of the job.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="objectType"/> or <paramref name="factoryMethod"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.GetJobInternal(CMS.DataEngine.ObjectTypeInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Gets a new instance of <typeparamref name="TJob"/> job suitable for <paramref name="typeInfo"/>. The instance is determined as follows.
            If specific job is available for object type of type info, it is used.
            If specific job is available for original object type of type info, it is used.
            Otherwise the default job is used.
            </summary>
            <param name="typeInfo">Type info for which to instantiate a <typeparamref name="TJob"/> based on object type (or original object type).</param>
            <param name="configuration">Configuration to be used when creating an instance of the job.</param>
            <returns>An instance of <typeparamref name="TJob"/>.</returns>
            <exception cref="T:CMS.DataEngine.BaseInfo">Thrown when <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2.#ctor(CMS.ContinuousIntegration.Internal.FileSystemJobFactory{`0,`1}.CreateJob)">
            <summary>
            Initializes a new job factory with default factory method.
            </summary>
            <param name="defaultJobFactoryMethod">Method which creates a new instance of the job.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJobFactory">
            <summary>
            Factory for file system repository store jobs.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJobFactory.#ctor">
            <summary>
            Initializes store job factory with default job set to <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJob"/>.
            </summary>
            <remarks>
            The constructor is public for the purpose of the class instantiation by the abstract predecessor of the class. There is no need
            to instantiate it in your custom code.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJobFactory">
            <summary>
            Factory for file system repository restore objects by type jobs.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJobFactory.#ctor">
            <summary>
            Initializes insert and update objects by type job factory with default job set to <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/>.
            </summary>
            <remarks>
            The constructor is public for the purpose of the class instantiation by the abstract predecessor of the class. There is no need
            to instantiate it in your custom code.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob">
            <summary>
            Abstract class incorporating usual properties and basic methods for inter-job usage.
            </summary>
            <remarks>This class is not intended for inheritance. Non-abstract jobs are supposed to be used for behavioral amendments.</remarks>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob"/>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.TranslationHelper">
            <summary>
            Provides object translation. Used in serialization to optimize database calls.
            </summary>
            <remarks>
            The <see cref="P:CMS.DataEngine.TranslationHelper.TranslationTable"/> property contains data records that correspond with the database.        
            For translation records identified using partially correct parameters (either the code name or GUID is different than the value in the database), 
            the actual values are loaded from the database for all fields.        
            An index key referencing the correct data is then created from the partial parameters. The index key is used to obtain the record in future calls.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.RepositoryConfiguration">
            <summary>
            Gets the current instance of repository configuration
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.BindingsProcessor">
            <summary>
            Object for working with bindings in the file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.SeparatedFieldProcessor">
            <summary>
            Object for working with separated fields in file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.FileSystemWriter">
            <summary>
            Object for writing to file system and storing hash of written file in hash manager.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.FileSystemReader">
            <summary>
            Object for reading file system and storing hash of read file in its own hash manager.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.RepositoryPathHelper">
            <summary>
            Object for working with file paths in file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.ContentStagingTaskCollection">
            <summary>
            Object for collecting content staging tasks during CI restore.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.UseFileMetadata">
            <summary>
            Indicates whether objects' file meta-data are used or not (see <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/>).
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.SkipLicenseChecking">
            <summary>
            Indicates whether license should be checked when a job is run
            (property is used within <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.CheckContinuousIntegrationLicense"/> method).
            </summary>
            <remarks>
            This property is supposed to be <see langword="true"/> if and only if
            the job is initialized from another job (that checked the license already).
            <para>This property is present to prevent unnecessary license checks.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Constructor required for creation of a new instance of derived class.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.InitializeWithInternal(CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration)">
            <summary>
            Initializes job by injecting instances of provided object properties into respective properties.
            </summary>
            <param name="fileSystemJobConfiguration">Configuration for the file system job.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.CheckContinuousIntegrationLicense">
            <summary>
            Check license requirement for Continuous Integration and throws <see cref="T:CMS.DataEngine.LicenseException"/> if they are not met.
            </summary>
            <exception cref="T:CMS.DataEngine.LicenseException">Thrown when license requirements for continuous integration are not met.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.RegisterTranslationRecord(CMS.DataEngine.BaseInfo)">
            <summary>
            Registers a new translation record into <see cref="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.TranslationHelper"/>.
            </summary>
            <param name="baseInfo">Base info to register.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.GetNewJobWithSharedResources``1(System.Func{CMS.DataEngine.ObjectTypeInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,``0},CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets new job of <typeparamref name="TJob"/> using <paramref name="factoryJobGetter"/> and initializes it with all properties used in
            <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.InitializeWith``1(``0,CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration)"/>
            of the job calling this method.
            </summary>
            <typeparam name="TJob">Type of job that will be created.</typeparam>
            <param name="factoryJobGetter"><see cref="T:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2"/> method creating a new job.</param>
            <param name="typeInfo"><see cref="T:CMS.DataEngine.ObjectTypeInfo"/> to get the job's factory job for.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.GetNewJobWithSharedResources``1(System.Func{CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,``0})">
            <summary>
            Creates new job using provided <paramref name="jobCreator"/> and initializes it with all properties used in
            <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.InitializeWith``1(``0,CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration)"/>
            of the job calling this method.
            </summary>
            <typeparam name="TJob">Type of job that will be created.</typeparam>
            <param name="jobCreator">Method creating new job from provided configuration.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.InitializeCancellationToken(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            If provided <paramref name="cancellationToken"/> is not null, the token is used;
            otherwise, new <see cref="T:System.Threading.CancellationToken"/> is created so as the derived <see langword="class"/>
            does not need to <see langword="null"/>-checked each token's use.
            </summary>
            <param name="cancellationToken">(Null-able) token provided by the class user.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.CancellableForEach``1(System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates through <paramref name="collection"/> checking <paramref name="cancellationToken"/>
            before each iteration and performing <paramref name="action"/> on each item in the collection.
            </summary> 
            <typeparam name="T">Type of items in the <paramref name="collection"/>.</typeparam>
            <param name="cancellationToken">Token providing cancellation functionality.</param>
            <param name="collection">Collection of items the <paramref name="action"/> should be performed on.</param>
            <param name="action">Action that should be performed on each item of <paramref name="collection"/>.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when <paramref name="cancellationToken"/> enters canceled state.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemJob.CancellableForEach``1(System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Enumerates through <paramref name="collection"/> checking <paramref name="cancellationToken"/>
            before each iteration and performing <paramref name="action"/> on each item in the collection.
            </summary> 
            <typeparam name="T">Type of items in the <paramref name="collection"/>.</typeparam>
            <param name="cancellationToken">Token providing cancellation functionality.</param>
            <param name="collection">Collection of items the <paramref name="action"/> should be performed on.</param>
            <param name="action">Action that should be performed on each item of <paramref name="collection"/>.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when <paramref name="cancellationToken"/> enters canceled state.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob">
            <summary>
            Abstract class incorporating behavior same for all all-jobs.
            </summary>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob"/>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.OperationCancelledMessage">
            <summary>
            Returns message that is logged when operation was canceled using <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Constructor required for creation of a new instance of derived class.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.Run(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks license, number of usage and initializes cancellation token.
            <para>
            Tries execute <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.RunInternal(System.Threading.CancellationToken)"/>, while logging any exception to <see cref="N:CMS.EventLog"/>
            (including <see name="OperationCanceledException"/> potentially raised by the <see cref="T:System.Threading.CancellationToken"/>).
            </para>
            </summary>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>
            This operation can be canceled using given <paramref name="cancellationToken"/> at any time.
            <para>This method can be called only once in a lifetime of the class' instance.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when this method has already been called.</exception>
            <exception cref="T:CMS.DataEngine.LicenseException">Thrown when license requirements for continuous integration are not met.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.RunInternal(System.Threading.CancellationToken)">
            <summary>
            Action performing specified all-job itself.
            </summary>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>
            This operation can be canceled using given <paramref name="cancellationToken"/> at any time.
            <para>This method's operation terminates as soon as cancellation request is detected.</para>
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob">
            <summary>
            Restores all objects specified by constructor parameters to the database.
            </summary>
            <remarks>
            Instances of this class do not support reusing (i.e. <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.Run(System.Nullable{System.Threading.CancellationToken})"/> can be called at most once in a lifetime of the class' instance.).
            <para>Instance operation (job) can be canceled using given <see cref="T:System.Threading.CancellationToken"/> provided to the <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.Run(System.Nullable{System.Threading.CancellationToken})"/> at any time.
            <para>Instance operation (job) terminates as soon as cancellation request is detected.</para>
            </para>
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.RestoreObjectsByTypeInternalJobs">
            <summary>
            Cache containing jobs for individual object types that are first processed for
            insert/update and later on processed in opposite order for deletion.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.OperationCancelledMessage">
            <summary>
            Returns message that is logged when operation was canceled using <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Creates a new instance of FileSystemRestoreAllJob that restores all objects of given object types to the database.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.RunInternal(System.Threading.CancellationToken)">
            <summary>
            Restores all objects specified by constructor parameters to the database.
            </summary>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
            <remarks>
            Target location on the file system will be cleaned up before serialization.
            <para>This operation can be canceled using given <paramref name="cancellationToken"/> at any time.</para>
            <para>This method's operation terminates as soon as cancellation request is detected.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.GetOrderedObjectTypes">
            <summary>
            Returns sequence of object types ordered by their dependencies.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.GetAvailableObjectTypes">
            <summary>
            Returns all available object types including possible dynamic ones
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.CreateAndUpsertObjects(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.CreateAndUpsert(System.String,System.Threading.CancellationToken)"/> for each object type in given <paramref name="orderedObjectTypes"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.CreateAndUpsertNewCustomTableItemObjects(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.CreateAndUpsert(System.String,System.Threading.CancellationToken)"/> for new custom table items which type is new in this restore operation
            and was not already processed as part of <paramref name="processedObjectTypes"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.DeleteAndDisposeObjects(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.DeleteAndDispose(System.String,System.Threading.CancellationToken)"/> for each object type in given <paramref name="orderedObjectTypes"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.LogRestoreOperationRun">
            <summary>
            Logs restore operation run to module usage tracking counter
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.UpdateFilesMetadata">
            <summary>
            Updates FileMetadataInfos in the DB based on data collected in <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.CreateNewRestoreInternalJob(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates new instance of a <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/> job dedicated to specified <paramref name="objectType"/>.
            </summary>
            <remarks>
            Job is provided with <paramref name="cancellationToken"/> that is owned by the <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob"/>.
            <para>New job is also provided with all resources and handlers the current job posses, but for <see cref="T:CMS.ContinuousIntegration.FileSystemBindingsProcessor"/>.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.CreateAndUpsert(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/> job dedicated to specified <paramref name="objectType"/>
            and executes its <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.RunUpsertObjectsByTypeJob"/> method.
            </summary>
            <remarks>Job is provided with <paramref name="cancellationToken"/> that is owned by the <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.DeleteAndDispose(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets instance of <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/> job dedicated to specified <paramref name="objectType"/>
            from <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.RestoreObjectsByTypeInternalJobs"/> and executes its  <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.DeleteObjectsByTypeJob"/> method.
            The job is then disposed in order to dispose its <see cref="T:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor"/>; job is also removed from the cache.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob.TryRun(System.Action{System.String,System.Threading.CancellationToken},System.String,System.Threading.CancellationToken,System.String)">
            <summary>
            Tries run provided <paramref name="method"/>. Method is given both <paramref name="objectType"/> and <paramref name="cancellationToken"/> parameters.
            <para>
            If method throws <see cref="T:System.OperationCanceledException"/>, it is re-thrown;
            any other exception is wrapped into new <see cref="T:CMS.ContinuousIntegration.ObjectTypeSerializationException"/> provided with <paramref name="exceptionMessageFormat"/>.
            </para>
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob">
            <summary>
            Stores all objects specified by constructor parameters to the file system.
            </summary>
            <remarks>
            Instances of this class do not support reusing (i.e. <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.Run(System.Nullable{System.Threading.CancellationToken})"/> can be called at most once in a lifetime of the class' instance.).
            <para>Instance operation (job) can be canceled using given <see cref="T:System.Threading.CancellationToken"/> provided to the <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob.Run(System.Nullable{System.Threading.CancellationToken})"/> at any time.
            <para>Instance operation (job) terminates as soon as cancellation request is detected.</para>
            </para>
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.OperationCancelledMessage">
            <summary>
            Returns message that is logged when operation was canceled using <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Creates a new instance of FileSystemStoreAllJob that stores all objects of given object types to the file system.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.RunInternal(System.Threading.CancellationToken)">
            <summary>
            Stores all objects specified by constructor parameters to the file system. This method can be called only once
            in a lifetime of the class' instance.
            </summary>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
            <remarks>
            Target location on the file system will be cleaned up before serialization.
            <para>This operation can be canceled using given <paramref name="cancellationToken"/> at any time.</para>
            <para>This method's operation terminates as soon as cancellation request is detected.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.StoreObjects">
            <summary>
            Stores all objects specified by its object type(s) to the file system. 
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.StoreAllObjectTypeObjects(System.String,System.Int32,System.Int32)">
            <summary>
            Stores all objects of given <paramref name="objectType"/> to the repository.
            <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJob"/> registered for the type is retrieved from <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJobFactory"/>.
            </summary>
            <remarks>Not-mentioned parameters are present for logging purposes.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.StoreSingleObjectTypeObject(CMS.ContinuousIntegration.Internal.FileSystemStoreJob,CMS.DataEngine.ObjectTypeInfo,System.String,CMS.DataEngine.BaseInfo,System.Int32,System.Int32)">
            <summary>
            Stores given <paramref name="info"/> to the repository using provided <paramref name="storeJob"/>.
            </summary>
            <remarks>Not-mentioned parameters are present for logging purposes.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.GetObjectsForStoring(System.String)">
            <summary>
            Gets enumeration of objects for given <paramref name="objectType"/>.
            </summary>
            <param name="objectType">Object type to enumerate.</param>
            <returns>Enumeration of objects of given object type.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.SaveFileHashes">
            <summary>
            Saves hashes of serialization files.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.ClearFileHashes">
            <summary>
            Deletes all hashes of serialization files.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreAllJob.DeleteRepositoryContent">
            <summary>
            Deletes all files from the repository directory, except files stored directly in the root.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration">
            <summary>
            Configuration for File System Job
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.RepositoryPathHelper">
            <summary>
            Object for working with repository's file paths.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.TranslationHelper">
            <summary>
            Translation helper that is used for deserialization.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.BindingsProcessor">
            <summary>
            Object for working with bindings in the file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.FileSystemWriter">
            <summary>
            Object for writing to file system and storing hash of written file in hash manager.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.FileSystemReader">
            <summary>
            Object for reading file system and storing hash of read file in its own hash manager.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.SeparatedFieldProcessor">
            <summary>
            Object for working with separated fields in file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.ContentStagingTaskCollection">
            <summary>
            Object for collecting content staging tasks during CI restore.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.UseFileMetadata">
            <summary>
            Indicates whether objects' file meta-data are used or not.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration.SkipLicenseChecking">
            <summary>
            Indicates whether license checking should be omitted in this instance of a job.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions">
            <summary>
            Extension methods for file system jobs.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.InitializeWith``1(``0,CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration)">
            <summary>
            Fluently initializes job by injecting instances of provided object properties into respective properties.
            </summary>
            <param name="fileSystemJob">File system job to initialize.</param>
            <param name="fileSystemJobConfiguration">Configuration for the file system job.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.SetLogProgressHandler``1(``0,System.EventHandler{CMS.ContinuousIntegration.Internal.LogProgressEventArgs})">
            <summary>
            Fluently sets log progress handler of the <paramref name="fileSystemJob"/> job.
            </summary>
            <param name="fileSystemJob">File system job to assign action to.</param>
            <param name="logProgressAction">Action that should be performed when <see cref="E:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.LogProgress"/> is triggered.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="logProgressAction"/> is not provided.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob">
            <summary>
            Abstract class incorporating behavior same for all single-object-processing jobs.
            </summary>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob"/>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Constructor required for creation of a new instance of derived class.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.Run(CMS.DataEngine.BaseInfo)">
            <summary>
            Checks license and provided <paramref name="baseInfo"/>.
            <para>Tries execute <see cref="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.RunInternal(CMS.DataEngine.BaseInfo)"/>, wrapping any exception to <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/></para>
            </summary>
            <param name="baseInfo">Base info which will be processed by the job.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="baseInfo"/> is null.</exception>
            <exception cref="T:CMS.DataEngine.LicenseException">Thrown when license requirements for continuous integration are not met.</exception>
            <exception cref="T:CMS.ContinuousIntegration.ObjectSerializationException">Thrown when storing of the object to the repository failed.</exception>
            <remarks>
            This method does not check if <paramref name="baseInfo"/> is of supported object type.
            <para>This method does not ensure repository access synchronization.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.RunInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Executes the operation performed on provided <paramref name="baseInfo"/> itself.
            </summary>
            This method does not check if <paramref name="baseInfo"/> is of supported object type.
            <remarks>Provided <paramref name="baseInfo"/> is never <see langword="null"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.ObjectSerializationExceptionMessage(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns text that is shown in <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> thrown when execution of <see cref="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.RunInternal(CMS.DataEngine.BaseInfo)"/> fails with an exception.
            </summary>
            <param name="baseInfo">Object that was passed to the <see cref="M:CMS.ContinuousIntegration.Internal.AbstractSingleObjectJob.RunInternal(CMS.DataEngine.BaseInfo)"/> method.</param>
            <remarks>Provided <paramref name="baseInfo"/> is never <see langword="null"/>.</remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob">
            <summary>
            Class designated for removal of serialized BaseInfo objects from the file system.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Creates a new file system delete job with given repository configuration.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.RunInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes given <paramref name="baseInfo"/> from the repository.
            </summary>
            <param name="baseInfo">Base info which will be deleted.</param>
            <remarks>Provided <paramref name="baseInfo"/> is never <see langword="null"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.ObjectSerializationExceptionMessage(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns text that is shown in <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> thrown when execution of <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.RunInternal(CMS.DataEngine.BaseInfo)"/> fails with an exception.
            </summary>
            <param name="baseInfo">Object that was passed to the <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.RunInternal(CMS.DataEngine.BaseInfo)"/> method.</param>
            <remarks>Provided <paramref name="baseInfo"/> is never <see langword="null"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.SelectFilesToDelete(CMS.DataEngine.BaseInfo)">
            <summary>
            Selects files to be deleted in order to delete given <paramref name="baseInfo"/> from the repository.
            </summary>
            <param name="baseInfo">Base info which will be deleted.</param>
            <returns>Collection of file paths to deleted.</returns>
            <remarks>Passed <paramref name="baseInfo"/> is never null.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob.DeleteFile(System.String)">
            <summary>
            Deletes the file specified by its relative path within the repository from the file system.
            </summary>
            <param name="relativePath">Relative path to the file which will be deleted.</param>
            <exception cref="T:CMS.ContinuousIntegration.ObjectSerializationException">Thrown when deleting the file failed</exception>
            <returns>Returns relative path if deletion succeeded, <see cref="F:System.String.Empty"/> if file already did not exist.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJob">
            <summary>
            Class designated for serialization of BaseInfo objects to the file system.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Creates a new file system store job with given repository configuration.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.ObjectSerializationExceptionMessage(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns text that is shown in <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> thrown when execution of <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.RunInternal(CMS.DataEngine.BaseInfo)"/> fails with an exception.
            </summary>
            <param name="baseInfo">Object that was passed to the <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.RunInternal(CMS.DataEngine.BaseInfo)"/> method.</param>
            <remarks>Provided <paramref name="baseInfo"/> is never <see langword="null"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.RunInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Stores given <paramref name="baseInfo"/> to the repository by serializing it to proper repository location.
            </summary>
            <param name="baseInfo">Base info which will be stored.</param>
            <remarks>Provided <paramref name="baseInfo"/> is never <see langword="null"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.StoreBaseInfo(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Stores given <paramref name="baseInfo"/> to a repository.
            </summary>
            <param name="baseInfo">Base info which will be stored.</param>
            <param name="relativePath">Relative path where the base info will be stored</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.GetPartialDocumentStoringSeparatedFieldsSideways(CMS.DataEngine.BaseInfo,System.String)">
            <summary>
            Stores content of separated fields to extra files and removes them from serialized object's XML,
            also executes all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s registered for object type of given <paramref name="baseInfo"/>.
            </summary>
            <param name="baseInfo">Base info which will be stored.</param>
            <param name="relativePath">Relative path to file in which the given base info is to be stored.</param>
            <returns>Document the content of serialized object's XML is stored in.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.ExecuteCustomProcessors(CMS.DataEngine.BaseInfo,System.String,System.Xml.XmlElement)">
            <summary>
            Instantiates and executes all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s registered for given <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/>
            or its <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/> (if any), along with <see cref="T:CMS.ContinuousIntegration.SeparatedFieldProcessor"/>.
            </summary>
            <param name="baseInfo">Object that was serialized into <paramref name="serializedObject"/>.</param>
            <param name="relativePath">(Main) Path the <paramref name="serializedObject"/> will be stored in.</param>
            <param name="serializedObject">Serialization form of the <paramref name="baseInfo"/>.</param>
            <remarks>Execution's order is given and reverse to the order in <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemStoreJob.EnsureCompleteInfo(CMS.DataEngine.IInfo)">
            <summary>
            Ensures that given info object has all data loaded.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob">
            <summary>
            Abstract class incorporating behavior same for all objects of a given type jobs.
            </summary>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Constructor required for creation of a new instance of derived class.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob.Run(System.String,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Checks license, <paramref name="objectType"/> and <paramref name="fileLocations"/>.
            Then initializes cancellation token and tries execute <see cref="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob.RunInternal(System.String,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.Threading.CancellationToken)"/>.
            </summary>
            <param name="objectType">Name of object type to process.</param>
            <param name="fileLocations">Set of all locations' of objects stored in the repository that are of given <paramref name="objectType"/>.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>This operation can be canceled using given <paramref name="cancellationToken"/> at any time.</remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="objectType"/> is either <see langword="null"/> or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="fileLocations"/> is not provided.</exception>
            <exception cref="T:CMS.DataEngine.LicenseException">Thrown when license requirements for continuous integration are not met.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob.RunInternal(System.String,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.Threading.CancellationToken)">
            <summary>
            Executes the operation performed on all objects of provided <paramref name="objectType"/> itself.
            </summary>
            <param name="objectType">Name of object type to process.</param>
            <param name="fileLocations">Set of all locations' of objects stored in the repository that are of given <paramref name="objectType"/>.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>Provided <paramref name="objectType"/> or <paramref name="fileLocations"/> are never <see langword="null"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob.GetObjectInfoMessageFormat(System.String)">
            <summary>
            Gets format of message informing about object's action.
            </summary>
            <param name="objectType">Object type.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob.CancellablyProcessQueue``1(System.Threading.CancellationToken,System.Collections.Generic.Queue{``0},System.Func{``0,``0})">
            <summary>
            Process queue of objects using given function for processing every object in the queue. If the function returns null, object is considered as successfully processed.
            If function returns object, then the returned object is enqueued. Queue is iterated again while at least one object was successfully processed.
            </summary>
            <typeparam name="T">Type of objects in the queue.</typeparam>
            <param name="queue">Queue to process.</param>
            <param name="function">Function used for processing every object in the queue. If the function returns null, object is considered as successfully processed. If function returns object, then the returned object is enqueued.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled using the <paramref name="cancellationToken"/>.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob">
            <summary>
            Deletes objects of given object type missing in the repository but present in the database.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.NotDeletedObject">
            <summary>
            Class represents the object that could not be deleted because another object depends on it.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.NotDeletedObject.Object">
            <summary>
            Object that could not be deleted.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.NotDeletedObject.RepositoryLocations">
            <summary>
            Object's file locations in the repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.NotDeletedObject.ErrorMessage">
            <summary>
            Error message (contains information why the object could not be deleted).
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.NotDeletedObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/> that deletes all objects of given object type missing in the file system repository from the database.
            </summary>
            <param name="configuration">Repository configuration.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.ProcessDeletedObjects(System.String,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.Threading.CancellationToken)">
            <summary>
            Process all deleted objects of given object type.
            </summary>
            <param name="objectType">Processed object type.</param>
            <param name="repositoryLocations">Set of given object type's repository locations.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <para>
            This member is internal for the purpose of testing only.
            </para>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.RunInternal(System.String,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.Threading.CancellationToken)">
            <summary>
            Deletes all objects of given object type that are not present in the file system repository from the database. 
            </summary>
            <param name="objectType">Objects of given object type will be restored.</param>
            <param name="fileLocations">Set of all locations' of objects stored in the repository that are of given <paramref name="objectType"/>.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>
            <para>
            This operation can be canceled using given <paramref name="cancellationToken"/> at any time.
            This method's operations throws <see cref="T:System.OperationCanceledException"/> as soon as cancellation request is detected.
            </para>
            </remarks>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.GetObjectsInDatabase(System.String)">
            <summary>
            Gets enumeration of all objects of given type. Only objects that are covered by continuous integration solution are returned.
            </summary>
            <param name="objectType">Returned objects' type.</param>
            <returns>Enumeration of all objects of given type.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.DeleteMissingObject(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes object that is missing in the repository from the database.
            </summary>
            <param name="obj">Object to delete.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.GetObjectFilePaths(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets collection of all file locations that are used for serialization of given object.
            </summary>
            <param name="obj">File locations will be returned for given object.</param>
            <returns>Collection of all file locations that are used for serialization of given object.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.ProcessNotDeletedObjectsQueue(System.Collections.Generic.Queue{CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.NotDeletedObject},System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.String,System.Threading.CancellationToken)">
            <summary>
            Process queue of not deleted objects.
            </summary>
            <param name="queue">Processed queue of not deleted objects.</param>
            <param name="repositoryLocations">Set of processed object type's repository locations.</param>
            <param name="logMessageFormat">Message format to be logged for each object.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob.DeleteObject(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.String)">
            <summary>
            Deletes given object from the database.
            </summary>
            <param name="obj">Object to delete.</param>
            <param name="objectLocations">Repository locations of given object.</param>
            <param name="repositoryLocations">Set of processed object type's repository locations.</param>
            <param name="logMessageFormat">Message format to be logged.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob">
            <summary>
            Job provides ability to restore all objects of given object type present in the
            repository to the database, while reading each file in the repository at most once. 
            </summary>
            <remarks>
            Objects that are missing in the repository but can be found in the database are removed.
            <para>
            Job is internally using <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/> and
            <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/> jobs to perform each part of restore action.
            </para>
            <para>
            Job has no Run method as it is used in <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreAllJob"/> that performs
            other actions between <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.RunUpsertObjectsByTypeJob"/> and <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.RunDeleteObjectsByTypeJob"/> calls.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.FileLocations">
            <summary>
            File locations collection of all objects serialized in repository that is shared between delete and upsert jobs.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.ObjectType">
            <summary>
            Object type the <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/> is dedicated to.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.TypeInfo">
            <summary>
            <see cref="T:CMS.DataEngine.ObjectTypeInfo"/> of <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.ObjectType"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.CancellationToken">
            <summary>
            Cancellation token that was provided to the <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/> and will be shard between delete and upsert jobs.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.UpsertObjectsByTypeJob">
            <summary>
            <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/> that is dedicated to the <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.ObjectType"/> and cares about insertion or update of objects serialized in repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.DeleteObjectsByTypeJob">
            <summary>
            <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/> that is dedicated to the <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.ObjectType"/> and cares about deletion of objects not-serialized in repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.BindingsProcessor">
            <summary>
            Cached binding processor that is shared by <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.UpsertObjectsByTypeJob"/> and <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.DeleteObjectsByTypeJob"/>. Processor is disposed with this job.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Creates new instance of the <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/>.
            </summary>
            <param name="configuration">File system repository configuration provided by executing job.</param>
            <param name="objectType">Object type the new job will be dedicated to (so as incorporated <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/> and <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/>).</param>
            <param name="cancellationToken">Token providing ability to cancel the job (so as incorporated <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/> and <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/>).</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.RunUpsertObjectsByTypeJob">
            <summary>
            Inserts all objects of given <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.ObjectType"/> present in repository to the database. If object already exists, it is updated. 
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.RunDeleteObjectsByTypeJob">
            <summary>
            Deletes objects of given <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.ObjectType"/>  type missing in the repository but present in the database.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.GetRepositoryLocations(System.String)">
            <summary>
            Gets set of all repository locations grouped by serialized object.
            </summary>
            <param name="objectType">Locations of given object type are returned.</param>
            <returns>Set of all repository locations grouped by serialized object.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. <see cref="T:CMS.ContinuousIntegration.CachedFileSystemBindingsProcessor"/> in this case.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob">
            <summary>
            Inserts all objects of given object type present in repository to the database. If object already exists, it is updated. 
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject">
            <summary>
            Class represents result of object deserialization.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject.Result">
            <summary>
            Deserialization result.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject.RepositoryLocations">
            <summary>
            Locations of files used for object deserialization.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Creates a new instance of <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/> that restores all objects of given object type to the database.
            </summary>
            <param name="configuration">Repository configuration.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.IRepositoryConfigurationEvaluator)">
            <summary>
            Creates a new instance of <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/> that restores all objects of given object type to the database.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <param name="evaluator">Repository configuration evaluator.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.RunInternal(System.String,System.Collections.Generic.ISet{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection},System.Threading.CancellationToken)">
            <summary>
            Inserts all objects of given object type that are present in the file system repository to the database. If object already exists, it is updated.
            </summary>
            <param name="objectType">Objects of given object type will be restored.</param>
            <param name="fileLocations">Set of all locations' of objects stored in the repository that are of given <paramref name="objectType"/>.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>
            <para>
            This operation can be canceled using given <paramref name="cancellationToken"/> at any time.
            This method's operations throws <see cref="T:System.OperationCanceledException"/> as soon as cancellation request is detected.
            </para>
            </remarks>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetDeserializedMainObjects(CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection)">
            <summary>
            Returns deserialized object(s) in its final form that might be composed of multiple partial sub-objects.
            All object part's file locations are provided in <paramref name="fileLocations"/>.
            </summary>
            <remarks>
            This method can handle single location. For multiple location must be registered custom job.
            <para>For binding object types, single file location is provided, yet all binding objects with same parent are returned.</para>
            </remarks>
            <param name="fileLocations">Serialized object locations in repository.</param>
            <returns>Collection of deserialized main objects.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetMainObjectsWrapped(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{CMS.DataEngine.Serialization.DeserializationResult}})">
            <summary>
            Gets main objects directly or composes multiple partial sub-objects into one or more main objects
            while encapsulating uncaught exceptions to allow for easier repository state debugging.
            </summary>
            <param name="deserializedObjects">Deserialized objects indexed by their location.</param>
            <returns>Main object or objects.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetMainObjects(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{CMS.DataEngine.Serialization.DeserializationResult}})">
            <summary>
            Gets main objects directly or composes multiple partial sub-objects into one or more main objects.
            </summary>
            <param name="deserializedObjects">Deserialized objects indexed by their location.</param>
            <returns>Main object or objects.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.SetChangedObject(CMS.DataEngine.BaseInfo)">
            <summary>
            Sets changed object to the database.
            </summary>
            <param name="baseInfo">Changed object</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializeObjectFromFiles(CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Deserializes object(s) from files' content based on <paramref name="structuredLocation"/>.
            <para>Files' content is eventually composed from separated fields stored in separated files.</para>
            <para>If file's content belongs to a bindings object type, all binding objects within the file (i.e. objects with same parent) are returned.</para>
            </summary>
            <param name="structuredLocation">Location of object's main file and its additional parts in repository.</param>
            <returns>Collection of deserialized objects.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ProcessChangedObjects(System.String,System.Collections.Generic.IEnumerable{CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject},System.Threading.CancellationToken)">
            <summary>
            Process all changed objects.
            </summary>
            <param name="objectType">Processed object type.</param>
            <param name="objects">Enumeration of changed objects to be processed.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <returns>FileMetadataInfo enumeration of objects inserted to the database.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ProcessChangedObject(CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject,System.String)">
            <summary>
            Process changed object and returns its FileMetadata info.
            </summary>
            <param name="deserializedObject">Deserialized object to be processed.</param>
            <param name="logMessageFormat">Message format to be logged after inserting object to the database.</param>
            <returns>FileMetadataInfo of processed object.</returns>
            <exception cref="T:CMS.ContinuousIntegration.ObjectTypeSerializationException">Thrown when operation fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ProcessInvalidObjectsQueue(System.Collections.Generic.Queue{CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject},System.String,System.Threading.CancellationToken)">
            <summary>
            Process invalid deserialized objects queue. All objects that can be restored are inserted in to the database.
            </summary>
            <param name="queue">Processed queue of invalid objects.</param>
            <param name="logMessageFormat">Message format to be logged for each object.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ProcessObjectsWithNotRequiredMappings(System.Collections.Generic.Queue{CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject},System.String,System.Threading.CancellationToken)">
            <summary>
            Process invalid deserialized objects queue. All objects with failed mappings that are not required can be restored and are inserted in to the database and removed from the queue.
            </summary>
            <param name="queue">Processed queue of invalid objects.</param>
            <param name="logMessageFormat">Message format to be logged for each object.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when operation was canceled.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ChangedObjectSelector(CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection)">
            <summary>
            Gets deserialized object if its file was changed.
            </summary>
            <param name="fileLocations">Serialized object locations in repository.</param>
            <returns>Deserialized object if its file was changed in repository, null otherwise.</returns>
            <remarks>
            Provided <paramref name="fileLocations"/> contains all location single (serialized info) object is stored in
            (typically single location is present in the collection).
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetInvalidObjectFieldMessage(CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject)">
            <summary>
            Returns text message containing all failed fields.
            </summary>
            <param name="invalidObject">Object that has failed field(s).</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetInvalidObjectMappingMessage(CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Returns text message containing all failed mappings.
            </summary>
            <param name="invalidObject">Object that has failed mapping(s).</param>
            <param name="repositoryConfiguration">Configuration of a file system repository</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetInvalidObjectMessage(CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Returns single message for all failed fields and all failed mappings.
            </summary>
            <param name="invalidObject">Object that has failed field(s) and/or failed mapping(s).</param>
            <param name="repositoryConfiguration">Configuration of a file system repository</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.GetIncompleteObjectRestoredMessage(CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Returns message informing about incomplete object restore and its failed mappings.
            </summary>
            <param name="incompleteObject">Object that has failed mapping(s).</param>
            <param name="repositoryConfiguration">Configuration of a file system repository</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.LogInvalidObjects(System.Collections.Generic.IEnumerable{CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.DeserializedObject},System.String)">
            <summary>
            Logs failed objects to progress log.
            </summary>
            <param name="invalidObjects">Enumeration of failed objects.</param>
            <param name="logMessageFormat">Message format.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ExecuteCustomProcessors(CMS.DataEngine.ObjectTypeInfo,System.Xml.XmlDocument,CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Instantiates and executes all <see cref="T:CMS.ContinuousIntegration.Internal.ICustomProcessor"/>s registered for given <see cref="P:CMS.DataEngine.BaseInfo.TypeInfo"/>
            or its <see cref="P:CMS.DataEngine.ObjectTypeInfo.OriginalObjectType"/> (if any), along with <see cref="T:CMS.ContinuousIntegration.SeparatedFieldProcessor"/>.
            </summary>
            <param name="typeInfo">Type info of object that is stored in <paramref name="serializedInfo"/>.</param>
            <param name="serializedInfo">XML file loaded from the file system.</param>
            <param name="structuredLocation">Location of object's main file and its additional parts in repository.</param>
            <returns>Collections that all processors could written in if they were unable to process the <paramref name="serializedInfo"/>.</returns>
            <remarks>Execution's order is given and reverse to the order in <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJob"/>.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob.ReplaceTranslationRecord(CMS.DataEngine.BaseInfo)">
            <summary>
            Registers record for given <paramref name="info"/> into <see cref="T:CMS.DataEngine.TranslationHelper"/>.
            </summary>
            <remarks>
            Deletes old record of same object when found.
            Required only by objects with tree hierarchy, yet without any order (e.g documents).
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection">
            <summary>
            Class represents collection of file locations in the repository that are all used for deserialization of one object.
            </summary>
            <remarks>
            Serialization of common info object results in single location stored in the collection (path to its XML file).
            Collection might contain multiple <see cref="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.MainLocations"/> if the serialized object is wrapper (e.g. document).
            Once an object defines non-empty <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.SeparatedFields"/>, single main location will
            contain multiple locations for these separated will. Separated fields of a serialized info object can be found in
            <see cref="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.StructuredLocations"/> collection.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.StructuredLocations">
            <summary>
            Collection of <see cref="T:CMS.ContinuousIntegration.Internal.StructuredLocation"/>s with main location of an object and
            set of all additional file locations, where other parts of the (main) object are stored.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.MainLocations">
            <summary>
            Usually there is only one main location in this collection, unless stored object is
            a wrapper for multiple (wrapped) objects that exists separately.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.#ctor">
            <summary>
            Creates a new instance of file locations collection.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.#ctor(System.String)">
            <summary>
            Creates a new instance of file locations collection with single <paramref name="location"/> within.
            </summary>
            <param name="location">File location.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of file locations collection with given <paramref name="locations"/> within.
            </summary>
            <param name="locations">Enumeration of file locations.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Add(System.String,System.String)">
            <summary>
            Adds location to the collection.
            <para>If <paramref name="mainLocation"/> or <paramref name="additionalLocation"/> already exists, it is not added for second time.</para>
            <para>Single <paramref name="mainLocation"/> can have multiple different <paramref name="additionalLocation"/>s.</para>
            </summary>
            <param name="mainLocation">Location to add.</param>
            <param name="additionalLocation">Main <paramref name="mainLocation"/> can have additional files (for example separated field location is additional file to main object location).</param>
            <remarks>It is possible to add multiple different <paramref name="additionalLocation"/> by calling the <see cref="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Add(System.String,System.String)"/> method with same <paramref name="mainLocation"/> parameter multiple times.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Clone(System.Func{System.String,System.String})">
            <summary>
            Creates a new object that is a copy of the current instance using <paramref name="locationTransform"/> function.
            </summary>
            <param name="locationTransform">Transformation function for location.</param>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <example>
            This code shows how to transform relative locations into absolute using <see cref="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Clone(System.Func{System.String,System.String})"/> method.
            <code>
            // Obtain repository configuration
            FileSystemRepositoryConfiguration configuration = FileSystemRepositoryConfigurationBuilder.Build();
            
            // Store relative paths for objects
            RepositoryLocationsCollection relativeLocations = new RepositoryLocationsCollection();
            /*...*/
            
            // Obtain absolute paths from the relative ones
            RepositoryLocationsCollection absoluteLocations = relativeLocations.Close(relativePath => Path.Combine(configuration.RepositoryRootPath, relativePath));
            </code>
            </example>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Equals(CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of individual, unstructured (see <see cref="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.StructuredLocations"/>) locations.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of individual, unstructured (see <see cref="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection.StructuredLocations"/>) locations.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollectionDebugView">
            <summary>
            Debug view for <see cref="T:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollectionDebugView.Items">
            <summary>
            Items of the collection (paths).
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollectionDebugView.StructuredItems">
            <summary>
            Structured items of the collection (paths per objects).
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollectionDebugView.#ctor(CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection)">
            <summary>
            Initializes a new instance of debug view for <see cref="T:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection"/>.
            </summary>
            <param name="collection">Repository location collection for which to initialize the debug view.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryPathHelper">
            <summary>
            Provides methods for working with file paths in file system repository.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_FILE_NAME_LENGTH">
            <summary>
            Maximum length of regular file name (without extension).
            </summary>
            <seealso cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.FILE_NAME_HASH_LENGTH"/>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_GROUP_FOLDER_SUFFIX_LENGTH">
            <summary>
            Maximum length of group folder suffix.
            </summary>
            <seealso cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_FOLDER_SUFFIX_HASH_LENGTH"/>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_GROUP_FILE_NAME_LENGTH">
            <summary>
            Maximum length of group file name (without extension).
            </summary>
            <seealso cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_FILE_NAME_HASH_LENGTH"/>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.FILE_NAME_HASH_LENGTH">
            <summary>
            Length of hash used when appending regular file name with a hash. The file name's length is truncated to (<see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_FILE_NAME_LENGTH"/> - <see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.FILE_NAME_HASH_LENGTH"/> - 1).
            One character is needed for delimiter. It is assumed that portion of hash is unique enough to avoid collisions.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_FOLDER_SUFFIX_HASH_LENGTH">
            <summary>
            Length of hash used when appending group folder suffix with a hash. The suffix's length is truncated to (<see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_GROUP_FOLDER_SUFFIX_LENGTH"/> - <see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_FOLDER_SUFFIX_HASH_LENGTH"/> - 1).
            One character is needed for delimiter. It is assumed that portion of hash is unique enough to avoid collisions.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_FILE_NAME_HASH_LENGTH">
            <summary>
            Length of hash used when appending group file name with a hash. The file name's length is truncated to (<see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_GROUP_FILE_NAME_LENGTH"/> - <see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_FILE_NAME_HASH_LENGTH"/> - 1).
            One character is needed for delimiter. It is assumed that portion of hash is unique enough to avoid collisions.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_SUFFIX_DELIMITER">
            <summary>
            Delimiter between hashed name and group suffix (used when creating name of folder for grouped files).
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GLOBAL_OBJECTS_FOLDER">
            <summary>
            Name of the folder for global objects.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.FILE_EXTENSION">
            <summary>
            File extension used for serialized objects.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.mTranslationHelper">
            <summary>
            Translation helper object. Used in serialization to optimize database calls.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.mRepositoryConfiguration">
            <summary>
            Configuration of a file system repository.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.IdentifierPair">
            <summary>
            Holds a pair of default identifier for file system name and custom one.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Constructor
            </summary>
            <param name="repositoryConfiguration">Configuration of a file system repository.</param>
            <param name="translationHelper">Translation helper object. Used to optimize database calls when asked for the same information multiple times.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetFilePath(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets relative path to file where serialized <paramref name="baseInfo"/> is to be stored (within the file system repository).
            </summary>
            <param name="baseInfo">BaseInfo of the object to be stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="baseInfo"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="baseInfo"/> is a binding object.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetFilePath(CMS.DataEngine.BaseInfo,System.String,System.String,System.Boolean)">
            <summary>
            Gets relative path to group file where serialized data are to be stored (within the file system repository). A group of files
            is used when serializing one base info to multiple files.
            </summary>
            <param name="baseInfo">BaseInfo of the object to be stored.</param>
            <param name="groupName">Name of the group. The name is converted to file system safe characters.</param>
            <param name="desiredGroupFileName">Name of file within the group. The name is converted to file system safe characters.</param>
            <param name="withExtension">Indicates whether file name should have the extension appended.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetSeparatedFieldPath(CMS.DataEngine.BaseInfo,System.String,CMS.DataEngine.SeparatedField)">
            <summary>
            Gets relative path of separate field's file.
            </summary>
            <param name="baseInfo">Base info to be stored.</param>
            <param name="infoRelativePath">Relative path to file in which the given base info is to be stored.</param>
            <param name="separatedField">Separated field whose path is returned.</param>
            <returns>Relative path to given separated field's path.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetSeparatedFieldPath(System.String,System.String)">
            <summary>
            Gets relative path without extension to separated field file where field's data are to be stored (within the file system repository).
            </summary>
            <param name="baseInfoPath">Relative path to file in which the given base info is to be stored.</param>
            <param name="fieldFileName">Name of separated field's file without extension.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetPathWithoutExtension(System.String)">
            <summary>
            Gets path without the file extension.
            </summary>
            <param name="path">Path to be processed.</param>
            <returns>Path without file extension.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetFileName(CMS.DataEngine.BaseInfo,System.Boolean)">
            <summary>
            Gets name of the file where serialized <paramref name="baseInfo"/> will be stored.
            </summary>
            <param name="baseInfo">BaseInfo of the object to be stored.</param>
            <param name="withExtension">Indicates whether file name should have the extension appended.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="baseInfo"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="baseInfo"/> is a binding object.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetGroupFileName(System.String,System.Boolean)">
            <summary>
            Gets name of the group file from <paramref name="desiredGroupFileName"/>. Group file name is transformed
            in order to contain file system safe characters. The group file name is at most <see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_GROUP_FILE_NAME_LENGTH"/> characters in length.
            </summary>
            <param name="desiredGroupFileName">Group file name used when creating the resulting file name.</param>
            <param name="withExtension">Indicates whether file name should have the extension appended.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="desiredGroupFileName"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetExistingSerializationFiles(System.String)">
            <summary>
            Gets relative paths to the serialization files of given <paramref name="objectType"/> stored in repository.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetExistingSerializationFiles(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets relative paths to the serialization files of given <paramref name="baseInfo"/> stored in repository.
            </summary>
            <param name="baseInfo">Base info for which to list the serialization files.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="baseInfo"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetGroupFolderSuffix(System.String)">
            <summary>
            Gets file system safe representation of group suffix (without the <see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GROUP_SUFFIX_DELIMITER"/>).
            The group folder suffix is at most <see cref="F:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.MAX_GROUP_FOLDER_SUFFIX_LENGTH"/> long.
            </summary>
            <param name="groupName">Group name to be transformed to file system safe representation.</param>
            <returns>Group name to be used as suffix in file system name representation.</returns>
            <remarks>
            Files which logically belong together can be grouped on the file system level. The group is distinguished by adding
            a suffix to the original file name.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetRelativeFolderPath(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets relative path to folder where serialized <paramref name="baseInfo"/> is to be stored.
            </summary>
            <param name="baseInfo">BaseInfo of the object to be stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="baseInfo"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="baseInfo"/> is a binding object.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetSerializationFileExtension(System.String)">
            <summary>
            Gets file extension (including the '.' character) of a file in repository identified by its relative path without extension.
            </summary>
            <param name="extensionlessRelativePath">Relative path within the repository identifying the file.</param>
            <returns>Extension of the file, or null if no file matching <paramref name="extensionlessRelativePath"/> is found.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="extensionlessRelativePath"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetExistingSerializationFiles(System.String,System.String)">
            <summary>
            Gets absolute paths to the serialization files of objects of given object type. The <paramref name="path"/> specified
            either a global or site folder in which to search for the object type's files.
            </summary>
            <param name="objectType">Object type</param>
            <param name="path">The path to the directory to search (global or site specific folder).</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetGroupedSerializationFiles(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets serialization files contained in <paramref name="directoryPath"/> together with their grouped files.
            </summary>
            <param name="directoryPath">Absolute path to directory where the serialization files reside.</param>
            <param name="groupDirectories">Optional enumeration of group directories contained within <paramref name="directoryPath"/> (absolute paths) - if available from previous directory enumeration.</param>
            <returns>Absolute paths of grouped serialization files.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetFilesFromDirectory(System.String)">
            <summary>
            Gets collection of files in given directory. Each item contains file paths of one object. Items are indexed by main file name without extension.
            </summary>
            <param name="directoryPath">Directory to be processed.</param>
            <returns>Collection of files in given directory.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetGroupFilesCollection(System.String,CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection)">
            <summary>
            Gets collection of files in given group directory. Group's files can be combined with object's main files if <paramref name="mainFileCollection"/> is given.
            </summary>
            <param name="groupDirectoryPath">Group directory path.</param>
            <param name="mainFileCollection">Collection of object's main files.</param>
            <returns>Collection of files in given group directory (optionally combined with <paramref name="mainFileCollection"/>). Returns null if group directory is empty.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetRelativeRepositoryPaths(System.Collections.Generic.IEnumerable{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection})">
            <summary>
            Trims absolute repository paths to paths relative to repository root.
            </summary>
            <param name="repositoryPaths">Enumeration of <see cref="T:CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection"/> to be processed</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetObjectName(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets object's name. Name is retrieved from object's fields specified in <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectFileNameFields"/> or default object name is used.
            Object's GUID is used if object has no code name column defined, otherwise object's code name is returned for default name.
            </summary>
            <param name="baseInfo">Object for which to get the name.</param>
            <returns>Given object's name.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetObjectDefaultName(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets default object's name. Object's GUID is used if object has no code name column defined, otherwise object's code name is returned.
            </summary>
            <param name="baseInfo">Object for which to get the name.</param>
            <returns>Given object's name.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetFolder(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets relative path to location where serialized <paramref name="baseInfo"/> is to be stored.
            </summary>
            <param name="baseInfo">BaseInfo of the object to be stored.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.GetDirectoriesIfExists(System.String,System.String)">
            <summary>
            Gets directories in <paramref name="path"/>, if it exists. Otherwise returns empty enumeration.
            </summary>
            <param name="path">Path to directory.</param>
            <param name="searchPattern">Search pattern.</param>
            <returns>Directories in <paramref name="path"/>, or empty enumeration.</returns>
            <remarks>
            The implementation is optimistic (assumes the directory exists).
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryPathHelper.OrderPathsIfNeeded(System.String,System.Collections.Generic.IEnumerable{CMS.ContinuousIntegration.Internal.RepositoryLocationsCollection}@)">
            <summary>
            Orders given <paramref name="paths"/> when order is needed for given <paramref name="objectType"/>.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.StructuredLocaltionDebugView">
            <summary>
            Debug view for <see cref="T:CMS.ContinuousIntegration.Internal.StructuredLocation"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.StructuredLocaltionDebugView.MainLocation">
            <summary>
            Path to the main location of an object.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.StructuredLocaltionDebugView.AdditionalLocations">
            <summary>
            Collection of paths of the additional locations of an object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StructuredLocaltionDebugView.#ctor(CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Initializes a new instance of debug view for <see cref="T:CMS.ContinuousIntegration.Internal.StructuredLocaltionDebugView"/>.
            </summary>
            <param name="location">Structured location collection for which to initialize the debug view.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.StructuredLocation">
            <summary>
            Collection of additional locations associated with object stored in <see cref="P:CMS.ContinuousIntegration.Internal.StructuredLocation.MainLocation"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.StructuredLocation.MainLocation">
            <summary>
            Path to the XML where the majority of an object is stored.
            This paths identifies to what object additional locations belong to.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StructuredLocation.#ctor(System.String)">
            <summary>
            Creates empty new instance of <see cref="T:CMS.ContinuousIntegration.Internal.StructuredLocation"/> for provided <paramref name="mainLocation"/>.
            </summary>
            <param name="mainLocation">Paths that identifies to what object additional locations belong to.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StructuredLocation.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates new instance of <see cref="T:CMS.ContinuousIntegration.Internal.StructuredLocation"/> for provided <paramref name="mainLocation"/>
            and fills it with additional locations from provided <paramref name="additionalLocations"/>.
            </summary>
            <param name="mainLocation">Paths that identifies to what object additional locations belong to.</param>
            <param name="additionalLocations">Collection of paths to additional parts of the object stored in the <paramref name="mainLocation"/>.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StructuredLocation.Equals(CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StructuredLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            <see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
            <param name="obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StructuredLocation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob">
            <summary>
            Abstract class incorporating logging of job's progress.
            </summary>
            <remarks>This class is not intended for inheritance. Non-abstract jobs are supposed to be used for behavioral amendments.</remarks>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemAllJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.AbstractFileSystemTypeWideJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemRestoreObjectsByTypeInternalJob"/>
        </member>
        <member name="E:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.LogProgress">
            <summary>
            Raised for each reported log message.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Constructor required for creation of a new instance of derived class.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.GetLogObjectName(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets display name or code name or GUID or ID of provided <paramref name="info"/>.
            </summary>
            <param name="info">Information of the object that the name of should be retrieved.</param>
            <remarks>Maximal length of the name is limited to about 50 characters, longer names are trimmed.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.GetLogObjectName(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.BaseInfo)">
            <summary>
            Gets display name or code name or GUID or ID of provided <paramref name="info"/>.
            </summary>
            <param name="typeInfo">Information of the <paramref name="info"/> object's type.</param>
            <param name="info">Information of the object that the name of should be retrieved.</param>
            <remarks>Maximal length of the name is limited to about 50 characters, longer names are trimmed.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.RaiseLogProgress(System.String,CMS.ContinuousIntegration.LogItemTypeEnum,CMS.ContinuousIntegration.LogItemActionTypeEnum)">
            <summary>
            Logs message to progress log.
            </summary>
            <param name="message">Text of the message.</param>
            <param name="messageType">Message type.</param>
            <param name="actionType">Action type</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.RaiseLogProgress(CMS.ContinuousIntegration.LogItem)">
            <summary>
            Logs message to progress log.
            </summary>
            <param name="logItem">Log item</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.SetLogProgressHandlerInternal(System.EventHandler{CMS.ContinuousIntegration.Internal.LogProgressEventArgs})">
            <summary>
            Sets log progress handler of the job.
            </summary>
            <param name="logProgressAction">Action that should be performed when <see cref="E:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.LogProgress"/> is triggered.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="logProgressAction"/> is not provided.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.GetNewJobWithSharedResourcesAndHandlers``1(System.Func{CMS.DataEngine.ObjectTypeInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,``0},CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets new job of <typeparamref name="TJob"/> using <paramref name="factoryJobGetter"/> and initializes it with all properties used in
            <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.InitializeWith``1(``0,CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration)"/>
            and registers all handlers using <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.SetLogProgressHandler``1(``0,System.EventHandler{CMS.ContinuousIntegration.Internal.LogProgressEventArgs})"/>
            of the job calling this method.
            </summary>
            <typeparam name="TJob">Type of job that will be created.</typeparam>
            <param name="factoryJobGetter"><see cref="T:CMS.ContinuousIntegration.Internal.FileSystemJobFactory`2"/> method creating a new job.</param>
            <param name="typeInfo"><see cref="T:CMS.DataEngine.ObjectTypeInfo"/> to get the job's factory job for.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.GetNewJobWithSharedResourcesAndHandlers``1(System.Func{CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,``0})">
            <summary>
            Creates new job using provided <paramref name="jobCreator"/> and initializes it with all properties used in
            <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.InitializeWith``1(``0,CMS.ContinuousIntegration.Internal.FileSystemJobConfiguration)"/>
            and registers all handlers using <see cref="M:CMS.ContinuousIntegration.Internal.FileSystemJobExtesions.SetLogProgressHandler``1(``0,System.EventHandler{CMS.ContinuousIntegration.Internal.LogProgressEventArgs})"/>
            of the job calling this method.
            </summary>
            <typeparam name="TJob">Type of job that will be created.</typeparam>
            <param name="jobCreator">Method creating new job from provided configuration.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.LogProgressEventArgs">
            <summary>
            Event arguments used for <see cref="E:CMS.ContinuousIntegration.Internal.AbstractFileSystemProgressLoggingJob.LogProgress"/> event.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.LogProgressEventArgs.#ctor(CMS.ContinuousIntegration.LogItem)">
            <summary>
            Creates new <see cref="T:CMS.ContinuousIntegration.Internal.LogProgressEventArgs"/>.
            </summary>
            <param name="logItem">Log item object.</param>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.LogProgressEventArgs.LogItem">
            <summary>
            Log item object.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo">
            <summary>
            Contains metadata for a file used in objects serialization.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.FileMetadataInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.FileMetadataInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileMetadataInfo.FileMetadataID">
            <summary>
            File metadata ID
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileMetadataInfo.FileLocation">
            <summary>
            Location of the file.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.FileMetadataInfo.FileHash">
            <summary>
            Hash of the file content.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.GetExistingWhereCondition">
            <summary>
            Gets a where condition to find an existing object based on current object. Existing object is primarily identified by its ID
            column value. If not set, the file location is used.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for de-serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.#ctor">
            <summary>
            Constructor - Creates an empty FileMetadataInfo object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates a new FileMetadataInfo object from the given DataRow.
            </summary>
            <param name="dr">DataRow with the object data</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfo.CheckLicense(CMS.DataEngine.ObjectActionEnum,System.String)">
            <summary>
            Checks the object license. Returns true if the licensing conditions for this object were matched.
            </summary>
            <param name="action">Object action</param>
            <param name="domainName">Domain name, if not set, uses current domain</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider">
            <summary>
            Class providing <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> management.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.#ctor">
            <summary>
            Creates new instance of the <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider"/>
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.GetFileMetadataInfos">
            <summary>
            Returns a query for all the <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.GetFileMetadataInfo(System.Int32)">
            <summary>
            Returns <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> ID</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.GetFileMetadataInfo(System.String)">
            <summary>
            Returns <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> with specified location.
            </summary>
            <param name="location"><see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> location</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.SetFileMetadataInfo(CMS.ContinuousIntegration.Internal.FileMetadataInfo)">
            <summary>
            Sets (updates or inserts) specified <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> to be set</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.BulkInsertFileMetadataInfos(System.Collections.Generic.IEnumerable{CMS.ContinuousIntegration.Internal.FileMetadataInfo})">
            <summary>
            Bulk inserts the given list of <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects
            </summary>
            <param name="objects">List of <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.DeleteFileMetadataInfo(CMS.ContinuousIntegration.Internal.FileMetadataInfo)">
            <summary>
            Deletes specified <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/>.
            </summary>
            <param name="infoObj"><see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> to be deleted</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.DeleteAllFileMetadataInfos">
            <summary>
            Deletes all <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.DeleteFileMetadataInfo(System.Int32)">
            <summary>
            Deletes <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> with specified ID.
            </summary>
            <param name="id"><see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> ID</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.GetFileMetadataInfoInternal(System.String)">
            <summary>
            Returns <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> with specified location.
            </summary>
            <param name="location"><see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> location</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.BulkInsertFileMetadataInfosInternal(System.Collections.Generic.IEnumerable{CMS.ContinuousIntegration.Internal.FileMetadataInfo})">
            <summary>
            Bulk inserts the given list of <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects.
            </summary>
            <param name="objects">List of <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider.DeleteAllFileMetadataInfosInternal">
            <summary>
            Deletes all <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> objects.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.IFileMetadataInfoProvider">
            <summary>
            Declares members for <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/> management.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper">
            <summary>
            Custom translation helper which ensures that <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectFileNameFields"/> are retrieved
            along with other translation data (to improve performance of file system names creation).
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper.filterConditionCache">
            <summary>
            Cache of filter conditions organized by object type and where condition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper.GetAdditionalFieldNames(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets collection of names of additional fields that will be retrieved along with translation record.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper.GetAdditionalFieldsData(CMS.DataEngine.BaseInfo)">
            <summary>
            Gets dictionary with data of additional fields [fieldName -> value].
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper.CMS#ContinuousIntegration#IFilterConditionCache#TryGet(System.String,System.String,System.Boolean@)">
            <summary>
            Tries to get a value indicating whether object type and its where condition meet filter condition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper.CMS#ContinuousIntegration#IFilterConditionCache#Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new cache entry indicating, whether object type and its where condition meet filter condition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper.Clear">
            <summary>
            Clears the whole cache.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference">
            <summary>
            Translation reference carrying data from additional fields.
            </summary>
            <remarks>
            This class is not to be instantiated in your custom code. It supports the framework
            API for customizations.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.TypeInfo">
            <summary>
            Type info of object represented by this translation reference.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.AdditionalFields">
            <summary>
            Dictionary containing pairs [Field name] -> [Value].
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedSite">
            <summary>
            Extended translation reference of object's site.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedParent">
            <summary>
            Extended translation reference of object's parent.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedGroup">
            <summary>
            Extended translation reference of object's group.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedCategory">
            <summary>
            Extended translation reference of object's category.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedFilterDependencies">
            <summary>
            Extended translation references of object's filter dependencies specified by <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.FilterDependencies"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.TranslationHelper">
            <summary>
            Translation helper used to initialize this translation reference.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.#ctor">
            <summary>
            Initializer preventing instantiation in custom code.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider">
            <summary>
            Provides methods for registering custom functions to be used when object identifier or parent identifier is needed.
            Such identifier is used when deriving file or folder names for file system repository.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.RegisterGetObjectIdentifier(System.String,System.Func{CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String,System.String})">
            <summary>
            Registers a function to be called when an object identifier for object of type <paramref name="objectType"/> is needed. Based on returned object identifier
            a file or folder name is derived.
            </summary>
            <param name="objectType">Object type for which the function provides object identifier.</param>
            <param name="getObjectIdentifier">Function deriving object identifier from translation reference and/or default object identifier.</param>
            <remarks>
            <para>
            When an object is being stored in the repository, a folder or file name is generated based on its object type and/or fields contained in translation reference.
            However, when the default object identifier is not suitable, it can be customized by registering a custom function.
            </para>
            <para>
            The <see cref="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.AdditionalFields"/> contains fields defined in <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectFileNameFields"/> of given <paramref name="objectType"/>.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.RegisterGetParentIdentifier(System.String,System.Func{System.String,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String,System.String})">
            <summary>
            Registers a function to be called when a parent object identifier for object of type <paramref name="objectType"/> is needed. Based on returned parent identifier
            a file or folder name is derived.
            </summary>
            <param name="objectType">Object type for which the function provides parent identifier.</param>
            <param name="getParentIdentifier">Function deriving parent identifier from child object type, translation reference and/or default parent identifier.</param>
            <remarks>
            <para>
            When an object is being stored in the repository, a parent folder or file name is generated based on its object type and/or fields contained in translation reference.
            However, when the default parent identifier is not suitable, it can be customized by registering a custom function.
            </para>
            <para>
            The <see cref="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.AdditionalFields"/> contains fields defined in <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectFileNameFields"/> of given <paramref name="objectType"/>.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetObjectIdentifier(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String)">
            <summary>
            Gets object identifier based on type info, translation reference and/or default object identifier.
            </summary>
            <param name="translationReference">Translation reference of object for which the object identifier is requested.</param>
            <param name="defaultIdentifier">Default object identifier generated by the system.</param>
            <returns>Returns object identifier to be used when deriving file or folder name.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetParentIdentifier(System.String,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String)">
            <summary>
            Gets parent object identifier based on type info, translation reference and/or default parent identifier.
            </summary>
            <param name="childObjectType">Object type of child object that needs its parent identifier.</param>
            <param name="translationReference">Translation reference of object for which the parent identifier is requested.</param>
            <param name="defaultIdentifier">Default parent identifier generated by the system.</param>
            <returns>Returns parent identifier to be used when deriving parent file or folder name.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetDefaultObjectIdentifier(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String)">
            <summary>
            Default system method providing object identifier when no specific function is registered.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetDefaultParentIdentifier(System.String,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String)">
            <summary>
            Default system method providing parent identifier when no specific function is registered.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.RegisterGetObjectIdentifierInternal(System.String,System.Func{CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String,System.String})">
            <summary>
            Registers object identifier resolution function for given object type.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.RegisterGetParentIdentifierInternal(System.String,System.Func{System.String,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String,System.String})">
            <summary>
            Registers parent identifier resolution function for given object type.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetObjectIdentifierInternal(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String)">
            <summary>
            Gets an object identifier by invoking registered function. The function for resolving object identifier is determined as follows.
            If specific function is available for object type of type info, it is used.
            If specific function is available for original object type of type info, it is used.
            Otherwise the default function is used.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetParentIdentifierInternal(System.String,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String)">
            <summary>
            Gets an parent identifier by invoking registered function. The function for resolving parent identifier is determined as follows.
            If specific function is available for object type of type info, it is used.
            If specific function is available for original object type of type info, it is used.
            Otherwise the default function is used.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.GetObjectNameFromFields(CMS.ContinuousIntegration.Internal.ExtendedTranslationReference)">
            <summary>
            Gets object's name. Name is retrieved from object's fields specified in <see cref="P:CMS.DataEngine.ContinuousIntegrationSettings.ObjectFileNameFields"/>.
            </summary>
            <param name="translationReference">Translation reference of object for which to get the name.</param>
            <returns>Given object's name.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.FileSystemRepositoryNamingProvider.#ctor">
            <summary>
            Initializer enforcing singleton.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.TranslationReferenceLoaderExtensions">
            <summary>
            <see cref="T:CMS.DataEngine.TranslationReferenceLoader"/> extensions allowing to create <see cref="T:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.TranslationReferenceLoaderExtensions.LoadExtendedFromInfoObject(CMS.DataEngine.TranslationReferenceLoader,CMS.DataEngine.BaseInfo)">
            <summary>
            Creates translation reference from given base info object.
            </summary>
            <param name="loader"><see cref="T:CMS.DataEngine.TranslationReferenceLoader"/> instance</param>
            <param name="info">Base info object</param>
            <exception cref="T:System.ArgumentNullException">Throw when <paramref name="loader"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:CMS.DataEngine.TranslationHelper.UseAdditionalFields"/> of current <see cref="T:CMS.DataEngine.TranslationHelper"/> returns false.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.TranslationReferenceLoaderExtensions.LoadExtendedFromDatabase(CMS.DataEngine.TranslationReferenceLoader,System.String,System.Int32)">
            <summary>
            Loads translation reference for requested object. The translation reference is accompanied with data from additional fields
            as specified by <see cref="M:CMS.DataEngine.TranslationHelper.GetAdditionalFieldNames(CMS.DataEngine.ObjectTypeInfo)"/>.
            </summary>
            <param name="loader"><see cref="T:CMS.DataEngine.TranslationReferenceLoader"/> instance</param>
            <param name="objectType">Type of object</param>
            <param name="objectId">Database identifier of object</param>
            <exception cref="T:System.ArgumentNullException">Throw when <paramref name="loader"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="P:CMS.DataEngine.TranslationHelper.UseAdditionalFields"/> of current <see cref="T:CMS.DataEngine.TranslationHelper"/> returns false.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.TranslationReferenceLoaderExtensions.LoadExtendedCategory(CMS.DataEngine.TranslationReferenceLoader,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference)">
            <summary>
            Loads object's category translation reference.
            </summary>
            <param name="loader"><see cref="T:CMS.DataEngine.TranslationReferenceLoader"/> instance</param>
            <param name="translationReference"><see cref="T:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference"/> which <see cref="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedCategory"/> will be loaded</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.TranslationReferenceLoaderExtensions.LoadExtendedDependencies(CMS.DataEngine.TranslationReferenceLoader,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference)">
            <summary>
            Loads object's additional filter dependencies translation references.
            </summary>
            <param name="loader"><see cref="T:CMS.DataEngine.TranslationReferenceLoader"/> instance</param>
            <param name="translationReference"><see cref="T:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference"/> which <see cref="P:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference.ExtendedFilterDependencies"/> will be loaded</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.TranslationReferenceLoaderExtensions.GetDependentObjectReference(CMS.DataEngine.TranslationReferenceLoader,CMS.ContinuousIntegration.Internal.ExtendedTranslationReference,System.String,System.String)">
            <summary>
            Gets translation reference for dependent object specified by parameters.
            </summary>
            <param name="loader"><see cref="T:CMS.DataEngine.TranslationReferenceLoader"/> instance</param>
            <param name="translationReference"><see cref="T:CMS.ContinuousIntegration.Internal.ExtendedTranslationReference"/> with dependent objects' IDs</param>
            <param name="objectType">Object type of loaded object</param>
            <param name="columnName">Name of the column holding the loaded object's ID</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory">
            <summary>
            Factory providing enumerator of objects in database covered by continuous integration.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.CreateEnumerator">
            <summary>
            Factory method creating a new object enumerator for given object type.
            </summary>
            <param name="objectType">Object type for which the enumerator is to be created.</param>
            <param name="where">Where condition</param>
            <returns>New instance of object enumerator.</returns>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.instance">
            <summary>
            The only instance of the class.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.RegisterObjectEnumerator(System.String,CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.CreateEnumerator)">
            <summary>
            Registers a new object enumerator for given object type by providing a factory method for the enumerator.
            </summary>
            <param name="objectType">Object type for which the enumerator is to be used.</param>
            <param name="factoryMethod">Method which creates a new instance of the object enumerator.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.GetObjectEnumerator(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets a new instance of object enumerator suitable for <paramref name="objectType"/>. The instance is determined as follows.
            If specific object enumerator is available for object type, it is used.
            Otherwise the default object enumerator is used.
            </summary>
            <param name="objectType">Object type for which to instantiate an enumerator.</param>
            <param name="repositoryConfiguration">Configuration of file system repository.</param>
            <param name="where">Where condition</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.RegisterObjectRegisterEnumeratorInternal(System.String,CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.CreateEnumerator)">
            <summary>
            Registers a new object enumerator for given object type by providing a factory method for the enumerator.
            </summary>
            <param name="objectType">Object type for which the enumerator is to be used.</param>
            <param name="factoryMethod">Method which creates a new instance of the object enumerator.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.GetObjectEnumeratorInternal(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets a new instance of object enumerator suitable for <paramref name="objectType"/>. The instance is determined as follows.
            If specific object enumerator is available for object type, it is used.
            Otherwise the default object enumerator is used.
            </summary>
            <param name="objectType">Object type for which to instantiate an enumerator.</param>
            <param name="repositoryConfiguration">Configuration of file system repository.</param>
            <param name="where">Where condition</param>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.GetFullWhereCondition(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.DataEngine.IWhereCondition)">
            <summary>
            Gets the full where condition. Combines the given where condition with the default where condition provided by filters.
            </summary>
            <param name="objectType">Object type</param>
            <param name="repositoryConfiguration">Configuration of file system repository.</param>
            <param name="where">Where condition</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.GetDefaultTypeWhereCondition(System.String,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration)">
            <summary>
            Gets a default where condition 
            </summary>
            <param name="objectType">Object type</param>
            <param name="repositoryConfiguration">Configuration of file system repository.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.GetDefaultFilterCondition(System.String)">
            <summary>
            Gets default filter condition for given object type from its type info
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.DatabaseObjectsEnumeratorFactory.#ctor">
            <summary>
            Initializes a new object enumerator factory with default factory method.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.GlobalSettingsRepositoryConfigurationEvaluator">
            <summary>
            Evaluator including global setting objects.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.GlobalSettingsRepositoryConfigurationEvaluator.IsObjectIncluded(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns <c>true</c> when given <paramref name="info"/> is global setting, returns <c>false</c> otherwise.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="info"/> is not instance of <see cref="T:CMS.DataEngine.SettingsKeyInfo"/></exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.SettingDataClassRepositoryConfigurationEvaluator">
            <summary>
            Evaluator for <see cref="T:CMS.DataEngine.DataClassInfo"/> related to setting objects.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.SettingDataClassRepositoryConfigurationEvaluator.IsObjectIncluded(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Returns <c>true</c> when given <paramref name="info"/> is related to <see cref="T:CMS.DataEngine.SettingsKeyInfo"/> or <see cref="T:CMS.DataEngine.SettingsCategoryInfo"/>, returns <c>false</c> otherwise.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when <paramref name="info"/> is not instance of <see cref="T:CMS.DataEngine.DataClassInfo"/></exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling">
            <summary>
            Handles object change events for the purpose of CI.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.FORM_DEFINITION_COLUMN_NAME">
            <summary>
            Column name containing form definition
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.BaseInfoInsertAfter(CMS.DataEngine.BaseInfo)">
            <summary>
            Handles necessary actions after inserting a <see cref="T:CMS.DataEngine.BaseInfo"/>.
            </summary>
            <param name="baseInfo">Object being inserted.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.BaseInfoUpdateBefore(CMS.DataEngine.BaseInfo,CMS.Base.CMSEventArgs)">
            <summary>
            Handles necessary actions before updating a <see cref="T:CMS.DataEngine.BaseInfo"/>.
            </summary>
            <param name="baseInfo">Object being updated.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.BaseInfoDeleteAfter(CMS.DataEngine.BaseInfo)">
            <summary>
            Handles necessary actions after deleting a <see cref="T:CMS.DataEngine.BaseInfo"/>.
            </summary>
            <param name="baseInfo">Object being deleted.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.BulkUpdateBefore(CMS.DataEngine.BulkUpdateEventArgs)">
            <summary>
            Handles necessary actions before bulk update, see <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.UpdateData(System.String,CMS.DataEngine.QueryDataParameters,System.String)"/>
            and <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.UpdateData(CMS.DataEngine.IWhereCondition,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Boolean)"/>.
            </summary>
            <param name="eventArgs">Bulk update event arguments.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.BulkDeleteBefore(CMS.DataEngine.BulkDeleteEventArgs)">
            <summary>
            Handles necessary actions before bulk delete, see <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.BulkDelete(CMS.DataEngine.IWhereCondition,CMS.DataEngine.BulkDeleteSettings)"/>
            </summary>
            <param name="eventArgs">Bulk delete event arguments.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.BulkInsertAfter(CMS.DataEngine.BulkInsertEventArgs)">
            <summary>
            Handles necessary actions after bulk insert, see <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.BulkInsertInfos(System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})"/> or
             <see cref="M:CMS.DataEngine.AbstractInfoProvider`3.BulkInsertInfos(System.Collections.Generic.IEnumerable{`0},CMS.DataEngine.BulkInsertSettings)"/>"/>.
            </summary>
            <param name="eventArgs">Bulk insert event arguments.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.RemoveBindingsWithOptimalization(CMS.DataEngine.BaseInfo)">
            <summary>
            Removes dependent bindings as single operation for given <see cref="T:CMS.DataEngine.BaseInfo"/> object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.RebuildConfiguration(System.Boolean)">
            <summary>
            Rebuilds CI configuration and optionally logs a web farm task to propagate the change.
            </summary>
            <param name="logTask">A value indicating whether to log a web farm task.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.StoreBaseInfo(CMS.DataEngine.BaseInfo)">
            <summary>
            Stores info object to CI repository if configuration allows it.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.StoreBaseInfoObjects(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.ICollection{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Stores info objects to CI repository if configuration allows it.
            </summary>
            <param name="typeInfo">Type info object describing objects in <paramref name="infoObjects"/> collection.</param>
            <param name="infoObjects">Collection of info objects to store.</param>
            <param name="translationHelper">Translation helper objects that caches translation data between multiple method calls.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.DeleteBaseInfo(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes info object from CI repository if configuration allows it.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.DeleteBaseInfoObjects(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Deletes info objects from CI repository if configuration allows it.
            </summary>
            <param name="typeInfo">Type info object describing objects in <paramref name="infoObjects"/> collection.</param>
            <param name="infoObjects">Collection of info objects to delete.</param>
            <param name="translationHelper">Translation helper objects that caches translation data between multiple method calls.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.DependencyChanged(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true when passed object has changed an important column, that is used in CI translations of object references.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.GetDependencyColumns(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Returns the collection of all dependency columns of given type info.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.GetTypeInfoForSerialization(CMS.DataEngine.ObjectTypeInfo)">
            <summary>
            Gets the correct type info which should handle the object serialization
            </summary>
            <param name="ti">Current object type info</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.HasObjectSignificantlyChanged(CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true when passed object has changed any column that affects stored file.
            </summary>
            <remarks>
            Method returns true also if <see cref="M:CMS.DataEngine.BaseInfo.ChangedColumns"/> returns empty collection (to ensure that the object
            is stored in case that <see cref="M:CMS.DataEngine.BaseInfo.ChangedColumns"/> does not track changes)
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.HasObjectFormDefinitionChanged(CMS.Base.IAdvancedDataContainer)">
            <summary>
            Returns true when passed object has changed any column containing form definition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.RequiresFormDefinitionChangeRepositoryRefresh(CMS.Base.IAdvancedDataContainer)">
            <summary>
            Returns true when form definition change in passed object requires CI repository refresh.
            This includes: addition or removal of a field, field's name or data type change.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.HasDataClassFormFieldRemoved(CMS.DataEngine.DataClassInfo)">
            <summary>
            Returns true when passed object <see cref="F:CMS.DataEngine.DataClassInfo.OBJECT_TYPE"/> and also has changed column containing form definition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContinuousIntegrationEventHandling.HasObjectCodeNameChanged(CMS.DataEngine.IInfo)">
            <summary>
            Returns true when passed object has changed column containing code name.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.RepositoryBulkOperations">
            <summary>
            Contains methods allowing caller to perform bulk operation on CI repository.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryBulkOperations.DeleteObjects(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition,System.Boolean)">
            <summary>
            Deletes all objects of the given type matching the where condition from CI repository.
            </summary>
            <remarks>Also processes and deletes all objects that depend on objects specified by passed where condition.</remarks>
            <param name="typeInfo">Type info of the object type to delete from CI repository</param>
            <param name="where">Where condition selecting objects to delete</param>
            <param name="deleteDependentObjects">Indicates whether to delete all dependent objects of actually deleted objects</param>
            <returns>IDs collection of deleted objects</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryBulkOperations.StoreObjects(CMS.DataEngine.ObjectTypeInfo,CMS.DataEngine.IWhereCondition,System.Boolean,System.Boolean)">
            <summary>
            Stores all objects of the given type matching the where condition to CI repository.
            </summary>
            <remarks>Also processes and stores all objects that depend on objects specified by passed where condition.</remarks>
            <param name="typeInfo">Type info of the object type to store</param>
            <param name="where">Where condition selecting objects to store</param>
            <param name="storeDependentObjects">Indicates whether to store all dependent objects of actually stored objects</param>
            <param name="rebuildConfiguration">
            Indicates whether current CI configuration should be rebuilt prior the store operation.
            Pass true value only when any change of <see cref="T:CMS.DataEngine.DataClassInfo"/> leads to store operation.
            </param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryBulkOperations.StoreObjects(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo})">
            <summary>
            Stores given objects to CI repository.
            </summary>
            <remarks>The method does not process objects that depend on given objects.</remarks>
            <param name="typeInfo">Type info object that describes objects in <paramref name="objects"/> collection.</param>
            <param name="objects">Objects to store. All objects must be of same type as <paramref name="typeInfo"/>.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryBulkOperations.ObjectsCanBeStored">
            <summary>
            Determines whether objects can be to the CI repository.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.RepositoryBulkOperations.StoreObjectsInternal(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Stores given objects to the CI repository.
            </summary>
            <param name="typeInfo">Type info object that describes objects in <paramref name="objects"/> collection.</param>
            <param name="objects">Objects to store. All objects must be of same type as <paramref name="typeInfo"/>.</param>
            <param name="translationHelper">Translation helper objects that caches translation data between multiple method calls.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection">
            <summary>
            Holds content related objects with <see cref="T:CMS.DataEngine.TaskTypeEnum"/> actions based on changes during continuous integration restore operation.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection.TasksCollected">
            <summary>
            Event raised when Continuous Integration restore action is done 
            and any task was collected in the collection to be processed.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection.Add(CMS.DataEngine.BaseInfo,CMS.DataEngine.TaskTypeEnum)">
            <summary>
            Adds staging task of type <paramref name="taskType"/> for given <paramref name="baseInfo"/>.
            If the baseInfo has <see cref="F:CMS.DataEngine.SynchronizationTypeEnum.LogSynchronization"/> set, or Content staging is disabled,
            staging task for the baseInfo is NOT added into the collection.
            </summary>
            <param name="baseInfo">Info object.</param>
            <param name="taskType">Task type.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection.RaiseTasksCollected">
            <summary>
            Raises the <see cref="F:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection.TasksCollected"/> event, if there are any tasks to log.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollectionExtensions.AddTaskForChangeObject(CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection,CMS.DataEngine.BaseInfo)">
            <summary>
            Adds <see cref="F:CMS.DataEngine.TaskTypeEnum.CreateObject"/> or <see cref="F:CMS.DataEngine.TaskTypeEnum.UpdateObject"/> task 
            for the changed <paramref name="baseInfo"/> into the collection.
            </summary>
            <param name="stagingTaskCollection">Staging task collection.</param>
            <param name="baseInfo">Info object.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollectionExtensions.AddTaskForDeleteObject(CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection,CMS.DataEngine.BaseInfo)">
            <summary>
            Adds <see cref="F:CMS.DataEngine.TaskTypeEnum.DeleteObject"/> task for the <paramref name="baseInfo"/> into the collection.
            </summary>
            <param name="stagingTaskCollection">Staging task collection.</param>
            <param name="baseInfo">Info object.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.StagingTask">
            <summary>
            Staging task to be performed for given info object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.Internal.StagingTask.#ctor(CMS.DataEngine.BaseInfo,CMS.DataEngine.TaskTypeEnum)">
            <summary>
            Creates instance of staging task DTO.
            </summary>
            <param name="baseInfo">Base info.</param>
            <param name="taskType">Type of the staging </param>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.StagingTask.TaskType">
            <summary>
            Type of the staging task to be performed.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.StagingTask.Object">
            <summary>
            Object data.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.Internal.TasksCollectedEventArgs">
            <summary>
            Event argument wrapper object for <see cref="F:CMS.ContinuousIntegration.Internal.ContentStagingTaskCollection.TasksCollected"/> event.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.Internal.TasksCollectedEventArgs.Tasks">
            <summary>
            Staging tasks.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator">
            <summary>
            Class provides functionality to create default Continuous Integration repository configuration stored in file system.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator.DefaultExcludedObjectTypes">
            <summary>
            Contains object types excluded from repository by default
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator.StoreInitial(CMS.ContinuousIntegration.IMainObjectTypeProvider,System.String)">
            <summary>
            Stores initial configuration file for the repository.
            </summary>
            <param name="mainObjectTypeProvider">Main object types provider.</param>
            <param name="path">Path to the configuration file.</param>
            <remarks>
            The initial configuration does not limit storing of object types except for types explicitly mentioned in <see cref="F:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator.DefaultExcludedObjectTypes"/>.
            <para>The file contains comments with hints for configuration.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="mainObjectTypeProvider"/></exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator.GetInitialConfigurationXml(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets sample configuration XML <paramref name="supportedMainObjectTypes"/> for reference in a comment.
            </summary>
            <param name="supportedMainObjectTypes">Enumeration of supported main object types to be included as a reference in an XML comment.</param>
            <returns>Sample configuration XML.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator.GetSupportedMainObjectTypesString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns part of the configuration file with all supported object types
            </summary>
            <param name="supportedMainObjectTypes">Enumeration of supported main object types to be included as a reference in an XML comment.</param>
            <returns>Configuration part with supported object types as a string</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.DefaultRepositoryConfigurationFileCreator.GetDefaultExcludedTypesString">
            <summary>
            Returns part of the configuration file with excluded object types
            </summary>
            <returns>Configuration part with excluded object types as a string</returns>
        </member>
        <member name="P:CMS.ContinuousIntegration.EncodingConfiguration.DefaultEncoding">
            <summary>
            Gets encoding to be used when no <see cref="P:CMS.ContinuousIntegration.EncodingConfiguration.EncodingName"/> is provided.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.EncodingConfiguration.EncodingName">
            <summary>
            Gets encoding name specified in the application's configuration, if provided.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.EncodingConfiguration.Encoding">
            <summary>
            Gets encoding to be used for repository files content.
            </summary>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when <see cref="P:CMS.ContinuousIntegration.EncodingConfiguration.EncodingName"/> is specified, but does not represent a valid encoding name.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.EncodingConfiguration.CreateEncoding(System.String)">
            <summary>
            Gets encoding according to <paramref name="encodingName"/>.
            </summary>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when <paramref name="encodingName"/> does not represent a valid encoding name.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.IRepositoryConfigurationLoader">
            <summary>
            Loader for Continuous Integration repository configuration file.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IRepositoryConfigurationLoader.Load(System.String)">
            <summary>
            Loads configuration file for the repository.
            </summary>
            <param name="path">Path to the configuration file.</param>
            <returns>Configuration file loaded from given <paramref name="path"/> or new instance of <see cref="T:CMS.ContinuousIntegration.Internal.RepositoryConfigurationFile"/> if configuration is not defined.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.RepositoryConfigurationException">
            <summary>
            Thrown when repository configuration is invalid.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException"/> class with default values.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.RepositoryConfigurationFileLoader">
            <summary>
            Loads the repository configuration stored in physical file location.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryConfigurationFileLoader.Load(System.String)">
            <summary>
            Loads configuration file for the repository.
            </summary>
            <param name="path">Path to the configuration file.</param>
            <returns>Configuration file loaded from given <paramref name="path"/>, null if given path does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="path"/> is null.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.CustomTableTypeProvider">
            <summary>
            Default dynamic type provider
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.ICustomTableTypeProvider">
            <summary>
            Provides access to dynamic object types
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ICustomTableTypeProvider.GetTypes">
            <summary>
            Returns all available dynamic types
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.SeparatedFieldProcessor">
            <summary>
            Provides methods for working with separated fields in the file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.SeparatedFieldProcessor.RepositoryPathHelper">
            <summary>
            Object for working with file paths in file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.SeparatedFieldProcessor.FileSystemReader">
            <summary>
            Object for reading content from the file system.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.SeparatedFieldProcessor.FileSystemWriter">
            <summary>
            Object for writing content to the file system.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.#ctor(CMS.ContinuousIntegration.Internal.RepositoryPathHelper,CMS.ContinuousIntegration.IFileSystemReader,CMS.ContinuousIntegration.IFileSystemWriter)">
            <summary>
            Creates new instance of the <see cref="T:CMS.ContinuousIntegration.SeparatedFieldProcessor"/>.
            </summary>
            <param name="repositoryPathHelper">Object for working with file paths in file system repository.</param>
            <param name="fileSystemReader">Object for reading content from the file system.</param>
            <param name="fileSystemWriter">Object for writing content to the file system.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.PreprocessDeserializedDocument(CMS.ContinuousIntegration.Internal.CustomProcessorResult,System.Xml.XmlDocument,CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Merges separated non-binary fields back into the XML document (<paramref name="serializedInfo"/>).
            </summary>
            <param name="processorResult">Operation result, containing object's type info.</param>
            <param name="serializedInfo">Original serialized info. Separated fields are added as new elements to this XML document.</param>
            <param name="structuredLocation">Location of object's main file and its additional parts in repository.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.PostprocessDeserializedDocument(CMS.DataEngine.BaseInfo,CMS.ContinuousIntegration.Internal.StructuredLocation)">
            <summary>
            Merges separated binary fields' data back into the <paramref name="deserializedInfo"/>.
            </summary>
            <param name="deserializedInfo">Deserialized info.</param>
            <param name="structuredLocation">Location of object's main file and its additional parts in repository.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.PostprocessSerializedObject(CMS.DataEngine.BaseInfo,System.String,System.Xml.XmlElement)">
            <summary>
            Stores content of separated fields to additional files and removes the fields from serialized object's XML.
            </summary>
            <param name="baseInfo">Base info which will be stored.</param>
            <param name="infoRelativePath">Relative path to file in which the given base info is to be stored.</param>
            <param name="serializedObject">Serialized <paramref name="baseInfo"/>.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.GetFieldFileName(CMS.ContinuousIntegration.Internal.StructuredLocation,System.String)">
            <summary>
            Returns file name with extension that belongs to the <paramref name="fieldName"/>.
            If location of the <paramref name="fieldName"/> cannot be found within the <see cref="T:CMS.ContinuousIntegration.Internal.StructuredLocation"/>,
            <see langword="null"/> is returned.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.RemoveSeparatedFieldFromSerializedObject(CMS.DataEngine.SeparatedField,System.Xml.XmlElement)">
            <summary>
            Removes separated field's content from given serialized object. Removed content is returned.
            </summary>
            <param name="separatedField">Separated field to remove.</param>
            <param name="serializedObject">Serialized object.</param>
            <returns>Returns removed separated field's content or null if given field is missing in serialized object.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.HasSeparatedFieldVaryingExtension(CMS.DataEngine.SeparatedField)">
            <summary>
            Returns <paramref langword="true"/> if <paramref name="separatedField"/> is set to be stored in a file whose extension is determined dynamically (can differ).
            </summary>
            <param name="separatedField">Separated field for which to examine the extension.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.DeleteSeparatedFieldFileWithDifferentExtension(System.String)">
            <summary>
            Deletes separated field file, if <paramref name="newRelativePath"/> of the field within repository
            differs from the existing one (i.e. the <paramref name="newRelativePath"/> has different extension than
            the existing one).
            </summary>
            <param name="newRelativePath">Relative repository path of the new separated field file.</param>
            <returns>True if file with different extension existed and had to be deleted, false otherwise.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.StoreFieldContent(System.String,System.String)">
            <summary>
            Stores content of separated field to file.
            </summary>
            <param name="fieldContent">Content to be stored.</param>
            <param name="relativePath">Relative path of the file.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.SeparatedFieldProcessor.StoreBinaryData(CMS.DataEngine.BaseInfo,System.String,System.String)">
            <summary>
            Stores binary content of separated field to file.
            </summary>
            <param name="baseInfo">Info object the <paramref name="fieldName"/> of should be stored to the <paramref name="relativePath"/>.</param>
            <param name="fieldName">Binary data to be stored.</param>
            <param name="relativePath">Relative path of the file.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemRepositoryHelper">
            <summary>
            Contains methods necessary to define and validate the behavior of file system repository. 
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryHelper.HASH_DELIMITER">
            <summary>
            Delimiter between name and hash.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryHelper.SHORTENED_FILENAME_PART_DELIMITER">
            <summary>
            Delimiter between parts of shortened file name.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryHelper.HashAlgorithm">
            <summary>
            Hash algorithm, does not need to be cryptographically safe, but collision resistance is desired.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryHelper.HashAlgorithmLock">
            <summary>
            Lock object for synchronization of hash computation (non-static members of <see cref="F:CMS.ContinuousIntegration.FileSystemRepositoryHelper.HashAlgorithm"/> are not guaranteed to be thread safe).
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.GetFileSystemName(System.String,System.Int32,System.Int32)">
            <summary>
            Gets file system safe representation of <paramref name="name"/>. The resulting name does not exceed <paramref name="maxNameLength"/> characters in length.
            <paramref name="maxNameLength"/> must accommodate <paramref name="hashLength"/> and delimiting character.
            </summary>
            <param name="name">Name to be transformed to file system safe representation.</param>
            <param name="maxNameLength">Max length of the resulting name.</param>
            <param name="hashLength">Number of hash characters to be included in the resulting name, if hashing is needed.</param>
            <returns>Name in file system safe representation.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="hashLength"/> is not a positive integer or <paramref name="maxNameLength"/>is not greater than (hash length + 1) - the extra character is for hash delimiter.</exception>
            <remarks>
            The <paramref name="name"/> processing is similar to code name processing. Diacritics in Latin characters is removed,
            illegal characters are replaced by '_' (underscore), multiple '.' (dot) are grouped to single '.',
            leading and trailing '.' and '_' are trimmed.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.GetFileSystemName(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets file system safe representation of <paramref name="name"/>. The resulting name does not exceed <paramref name="maxNameLength"/> characters in length.
            <paramref name="maxNameLength"/> must accommodate <paramref name="hashLength"/> and delimiting character.
            </summary>
            <param name="name">Name to be transformed to file system safe representation.</param>
            <param name="fullName">Full name for given <paramref name="name"/>. The full name is used for the purpose of hash computation. Null means the full name is the same as <paramref name="name"/>.</param>
            <param name="maxNameLength">Max length of the resulting name.</param>
            <param name="hashLength">Number of hash characters to be included in the resulting name, if hashing is needed.</param>
            <returns>Name in file system safe representation.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name"/> is null or empty or <paramref name="fullName"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="hashLength"/> is not a positive integer or <paramref name="maxNameLength"/>is not greater than (hash length + 1) - the extra character is for hash delimiter.</exception>
            <remarks>
            <para>
            The <paramref name="name"/> processing is similar to code name processing. Diacritics in Latin characters is removed,
            illegal characters are replaced by '_' (underscore), multiple '.' (dot) are grouped to single '.',
            leading and trailing '.' and '_' are trimmed.
            </para>
            <para>
            Specify the <paramref name="fullName"/> parameter to avoid file system name collisions when <paramref name="name"/> is some shortcut or human-readable form of <paramref name="fullName"/>.
            </para>
            </remarks>
            <example>
            The following code creates 2 file system names, which differ in their hash only
            <code>
            string articleFileSystemName1 = FileSystemRepositoryHelper.GetFileSystemName("Article", "/Path/To/Some/Document/Named/Article", 50, 10);
            string articleFileSystemName2 = FileSystemRepositoryHelper.GetFileSystemName("Article", "/Path/To/Different/Document/Named/Article", 50, 10);
            
            // Produces result similar to:
            //   article@1234567890
            //   article@0987654321
            </code>
            The following code shows how to create a human-readable file name from a name, which would otherwise result in hash only (due to special characters processing)
            <code>
            string defaultFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("/", 50, 10);
            string customFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("root", "/", 50, 10);
            
            // Produces result similar to:
            //   @1234567890
            //   root@1234567890
            </code>
            The following code demonstrates the difference between providing a name and full name pair for obtaining a human-readable name and why the same can not be achieved with name only.
            Let's assume we have an object representing a root of a tree (named "/") and we want a human-readable file system name to store such object
            <code>
            string customFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("root", "/", 50, 10);
            string wrongCustomFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("root", 50, 10); // This is wrong. If another object named "root" would exist, its name would collide with the custom name for "/"
            
            // Produces result similar to:
            //   root@1234567890           The hash value is computed from "/"
            //   root
            </code>
            </example>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory specified by <paramref name="directoryPath"/>.
            </summary>
            <remarks>
            If the delete method throws an <see cref="T:System.IO.IOException"/> with <see cref="P:System.Exception.HResult"/> 0x80070091 (ERROR_DIR_NOT_EMPTY), it is ignored.
            </remarks>
            <param name="directoryPath">Absolute path to the directory.</param>
            <param name="recursive">True to remove directories, subdirectories, and files in path, otherwise false.</param>
            <returns>False if the delete method throws an <see cref="T:System.IO.IOException"/> with <see cref="P:System.Exception.HResult"/> 0x80070091 (ERROR_DIR_NOT_EMPTY), otherwise true.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.DeleteRepositoryDirectoryIfEmpty(System.String,System.String)">
            <summary>
            Deletes repository directory identified by <paramref name="relativeDirectoryPath"/>. Does nothing when directory is not empty
            or relative path is null or empty string (to prevent unintended deletion of repository root).
            </summary>
            <param name="relativeDirectoryPath">Path within repository identifying the directory to be deleted.</param>
            <param name="repositoryRootPath">Root path of the repository.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="repositoryRootPath"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.IsRepositoryInitialized(System.String)">
            <summary>
            Checks whether repository is initialized, by testing the presence of the configuration file.
            </summary>
            <param name="applicationRootPath">Path to the root of the application.</param>
            <returns>True if repository is initialized, otherwise false.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.GetFileSystemNameInternal(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets file system safe representation of <paramref name="name"/>. The resulting name does not exceed <paramref name="maxNameLength"/> characters in length.
            <paramref name="maxNameLength"/> must accommodate <paramref name="hashLength"/> and delimiting character.
            </summary>
            <param name="name">Name to be transformed to file system safe representation.</param>
            <param name="fullName">Full name for given <paramref name="name"/>. The full name is used for the purpose of hash computation. Null means the full name is the same as <paramref name="name"/>.</param>
            <param name="maxNameLength">Max length of the resulting name.</param>
            <param name="hashLength">Number of hash characters to be included in the resulting name, if hashing is needed.</param>
            <returns>Name in file system safe representation.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="name"/> is null or empty or <paramref name="fullName"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="hashLength"/> is not a positive integer or <paramref name="maxNameLength"/>is not greater than (hash length + 1) - the extra character is for hash delimiter.</exception>
            <remarks>
            <para>
            The <paramref name="name"/> processing is similar to code name processing. Diacritics in Latin characters is removed,
            illegal characters are replaced by '_' (underscore), multiple '.' (dot) are grouped to single '.',
            leading and trailing '.' and '_' are trimmed.
            </para>
            <para>
            Specify the <paramref name="fullName"/> parameter to avoid file system name collisions when <paramref name="name"/> is some shortcut or human-readable form of <paramref name="fullName"/>.
            </para>
            </remarks>
            <example>
            The following code creates 2 file system names, which differ in their hash only
            <code>
            string articleFileSystemName1 = FileSystemRepositoryHelper.GetFileSystemName("Article", "/Path/To/Some/Document/Named/Article", 50, 10);
            string articleFileSystemName2 = FileSystemRepositoryHelper.GetFileSystemName("Article", "/Path/To/Different/Document/Named/Article", 50, 10);
            
            // Produces result similar to:
            //   article@1234567890
            //   article@0987654321
            </code>
            The following code shows how to create a human-readable file name from a name, which would otherwise result in hash only (due to special characters processing)
            <code>
            string defaultFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("/", 50, 10);
            string customFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("root", "/", 50, 10);
            
            // Produces result similar to:
            //   @1234567890
            //   root@1234567890
            </code>
            The following code demonstrates the difference between providing a name and full name pair for obtaining a human-readable name and why the same can not be achieved with name only.
            Let's assume we have an object representing a root of a tree (named "/") and we want a human-readable file system name to store such object
            <code>
            string customFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("root", "/", 50, 10);
            string wrongCustomFileSystemName = FileSystemRepositoryHelper.GetFileSystemName("root", 50, 10); // This is wrong. If another object named "root" would exist, its name would collide with the custom name for "/"
            
            // Produces result similar to:
            //   root@1234567890           The hash value is computed from "/"
            //   root
            </code>
            </example>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.DeleteDirectoryInternal(System.String,System.Boolean)">
            <summary>
            Deletes a directory specified by <paramref name="directoryPath"/>. If the delete method
            throws an <see cref="T:System.IO.IOException"/> with <see cref="P:System.Exception.HResult"/> 0x80070091 (ERROR_DIR_NOT_EMPTY), it is ignored.
            </summary>
            <param name="directoryPath">Absolute path to the directory.</param>
            <param name="recursive">True to remove directories, subdirectories, and files in path, otherwise false.</param>
            <returns>False if the delete method throws an <see cref="T:System.IO.IOException"/> with <see cref="P:System.Exception.HResult"/> 0x80070091 (ERROR_DIR_NOT_EMPTY), otherwise true.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.DeleteRepositoryDirectoryIfEmptyInternal(System.String,System.String)">
            <summary>
            Deletes repository directory identified by <paramref name="relativeDirectoryPath"/>. Does nothing when directory is not empty
            or relative path is null or empty string (to prevent unintended deletion of repository root).
            </summary>
            <param name="relativeDirectoryPath">Path within repository identifying the directory to be deleted.</param>
            <param name="repositoryRootPath">Root path of the repository.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="repositoryRootPath"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.IsRepositoryInitializedInternal(System.String)">
            <summary>
            Checks whether repository is initialized, by testing the presence of the configuration file.
            </summary>
            <param name="applicationRootPath">Path to the root of the application.</param>
            <returns>True if repository is initialized, otherwise false.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.GetFileSystemNameUnchecked(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets file system safe representation of <paramref name="name"/>. The resulting name does not exceed <paramref name="maxNameLength"/> characters in length.
            The method does not check the length parameters for validity. <paramref name="maxNameLength"/> must accommodate <paramref name="hashLength"/> and delimiting character.
            </summary>
            <param name="name">Name to be transformed to file system safe representation.</param>
            <param name="fullName">Full name for given <paramref name="name"/>. The full name is used for the purpose of hash computation.</param>
            <param name="maxNameLength">Max length of the resulting name.</param>
            <param name="hashLength">Number of hash characters to be included in the resulting name, if hashing is needed.</param>
            <returns>Name in file system safe representation.</returns>
            <remarks>
            <para>
            The <paramref name="name"/> processing is similar to code name processing. Diacritics in Latin characters is removed,
            illegal characters are replaced by '_' (underscore), multiple '.' (dot) are grouped to single '.',
            leading and trailing '.' and '_' are trimmed.
            </para>
            <para>
            Specify the <paramref name="fullName"/> parameter to avoid file system name collisions when <paramref name="name"/> is some shortcut or human-readable form of <paramref name="fullName"/>.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.ReplaceReservedPrefix(System.String)">
            <summary>
            Searches for occurrence of one of <see cref="F:CMS.Helpers.ValidationHelper.RESERVED_FILE_SYSTEM_NAMES"/> as a prefix in <paramref name="name"/>, delimited by a '.' (dot) character.
            If such prefix is found, the delimiter is replaced by '-' (dash) (e.g. 'com1.something' is replaced by 'com1-something).
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.ReplaceAt(System.String,System.Int32,System.Char)">
            <summary>
            Replaces character at position specified by <paramref name="index"/> in a string. No boundary check is performed.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.ComputeFileNameHash(System.String,System.Int32)">
            <summary>
            Computes hash from <paramref name="value"/> and truncates it to meet <paramref name="hashLength"/>.
            No boundary check is performed.
            </summary>
            <param name="value">Value to be hashed.</param>
            <param name="hashLength">Length of resulting hash.</param>
            <returns>Hexadecimal representation of hash for given <paramref name="value"/>, truncated to required length.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.ComputeHashSynchronized(System.Byte[])">
            <summary>
            Synchronization wrapper for <see cref="F:CMS.ContinuousIntegration.FileSystemRepositoryHelper.HashAlgorithm"/>.
            </summary>
            <param name="data">Byte array for which to compute the hash.</param>
            <returns>Hash bytes compute from given byte array.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryHelper.ReplaceUnsafeFileSystemCharacters(System.String)">
            <summary>
            Transforms <paramref name="name"/> to a string which does not contain any illegal or possibly problematic file system characters while maintaining human readability.
            </summary>
            <param name="name">Name for which to create file system safe name.</param>
            <returns>File system safe name.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemRepositoryManager">
            <summary>
            Manages file system repository for continuous integration - stores and restores supported objects to and from the repository. Ensures mutual exclusion
            of the repository access across processes.
            </summary>
            <remarks>
            <para>
            This class is responsible for the synchronization of objects de/serialization to the repository.
            </para>
            <para>
            Members of this class are thread-safe.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.currentInstance">
            <summary>
            Singleton instance of <see cref="T:CMS.ContinuousIntegration.FileSystemRepositoryManager"/>.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.instanceLock">
            <summary>
            Lock over initialization of the singleton ensures that only one instance of <see cref="T:CMS.ContinuousIntegration.FileSystemRepositoryManager"/> will be created.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.serializeMutex">
            <summary>
            Global mutex over the re/storing of objects process that prevents running multiple object serialization or deserialization at one time (in any process).
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.storeAllMutex">
            <summary>
            Global mutex over the storing of all objects process. The storing of all objects is considered a long running operation.
            The mutual exclusion is ensured across processes.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.restoreAllMutex">
            <summary>
            Global mutex over the restoring of all objects process. The restoring of all objects is considered a long running operation.
            The mutual exclusion is ensured across processes.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.storeAllJob">
            <summary>
            Store all job for internal use. Serves for all objects storing. Each run of all objects storing creates
            a new instance. Overlapping is not possible.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.restoreAllJob">
            <summary>
            Restore job for internal use. Serves for all objects restoring. Each run of all objects restoring creates
            a new instance. Overlapping is not possible.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.FileSystemRepositoryManager.CachedConfiguration">
            <summary>
            Gets the cached instance of file system repository configuration.
            </summary>
            <remarks>
            This configuration object can be different than the actually saved. Use <see cref="P:CMS.ContinuousIntegration.FileSystemRepositoryManager.CurrentConfiguration"/> to get the latest configuration.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.FileSystemRepositoryManager.CurrentConfiguration">
            <summary>
            Gets the current instance of file system repository configuration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.GetInstance">
            <summary>
            Returns instance of <see cref="T:CMS.ContinuousIntegration.FileSystemRepositoryManager"/>.
            </summary>
            <remarks>
            This class is a singleton. Although it is disposable, there is no need
            for explicit disposal.
            </remarks>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAll(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Restores all supported objects from the file system repository. 
            </summary>
            <param name="messageHandler">Handler with messages from restore process.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <returns>Returns result object of the restoring process. Successful restoring is indicating by <see cref="P:CMS.ContinuousIntegration.RepositoryActionResult.Success"/> flag.</returns>
            <remarks>
            Storing of all and storing of individual objects (<see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Store(CMS.DataEngine.BaseInfo)"/>, <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Delete(CMS.DataEngine.BaseInfo)"/>) is disabled when restoring of all objects is running.
            </remarks>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Restores all supported objects from the file system repository. 
            </summary>
            <param name="messageHandler">Handler with messages from restore process.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <returns>Returns result object of the restoring process. Successful restoring is indicating by <see cref="P:CMS.ContinuousIntegration.RepositoryActionResult.Success"/> flag.</returns>
            <remarks>
            Storing of all and storing of individual objects (<see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Store(CMS.DataEngine.BaseInfo)"/>, <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Delete(CMS.DataEngine.BaseInfo)"/>) is disabled when restoring of all objects is running.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.StoreAll(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Stores all supported objects to the file system repository. 
            </summary>
            <param name="messageHandler">Handler with messages from store process.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <returns>Returns result object of the restoring process. Successful restoring is indicating by <see cref="P:CMS.ContinuousIntegration.RepositoryActionResult.Success"/> flag.</returns>
            <remarks>
            <para>
            Target location on the file system will be cleaned up before storing.
            </para>
            <para>
            Restoring of all is disabled when storing of all objects is running.
            </para>
            </remarks>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.StoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Stores all supported objects to the file system repository. 
            </summary>
            <param name="messageHandler">Handler with messages from store process.</param>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <returns>Returns result object of the restoring process. Successful restoring is indicating by <see cref="P:CMS.ContinuousIntegration.RepositoryActionResult.Success"/> flag.</returns>
            <remarks>
            <para>
            Target location on the file system will be cleaned up before storing.
            </para>
            <para>
            Restoring of all is disabled when storing of all objects is running.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Store(CMS.DataEngine.BaseInfo)">
            <summary>
            Stores given object to the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <returns>Returns true if the object has been stored, false otherwise (i.e. object type is not to be included in the repository).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAll(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Store(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Stores given objects to the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <param name="typeInfo">Type info object that describes objects in <paramref name="infoObjects"/> collection.</param>
            <param name="infoObjects">Objects to store. All objects must be of same type as <paramref name="typeInfo"/>.</param>
            <param name="translationHelper">Translation helper objects that caches translation data between multiple method calls.</param>
            <returns>Returns true if the object has been stored, false otherwise (i.e. object type is not to be included in the repository or collection was empty).</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAll(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.StoreInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Stores given object to the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <returns>Returns true if the object has been stored, false otherwise (i.e. object type is not to be included in the repository).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Delete(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes given object from the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <returns>Returns true if the object has been removed from the repository, false otherwise (i.e. object type is not to be included in the repository).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Delete(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Deletes given objects from the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <param name="typeInfo">Type info object that describes objects in <paramref name="infoObjects"/> collection.</param>
            <param name="infoObjects">Objects to store. All objects must be of same type as <paramref name="typeInfo"/>.</param>
            <param name="translationHelper">Translation helper objects that caches translation data between multiple method calls.</param>
            <returns>Returns true if the object has been removed from the repository, false otherwise (i.e. object type is not to be included in the repository or collection was empty).</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.DeleteInternal(CMS.DataEngine.BaseInfo)">
            <summary>
            Deletes given object from the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <returns>Returns true if the object has been removed from the repository, false otherwise (i.e. object type is not to be included in the repository).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="info"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.SerializeInternal(System.Action{CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper},CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Serializes given objects to/from the file system repository, if this object's serialization is enabled by the repository configuration.
            </summary>
            <param name="serializeAction">Serialization action to be called</param>
            <param name="typeInfo">Type info object that describes objects in <paramref name="infoObjects"/> collection.</param>
            <param name="infoObjects">Objects to store. All objects must be of same type as <paramref name="typeInfo"/>.</param>
            <param name="translationHelper">Translation helper objects that caches translation data between multiple method calls.</param>
            <returns>Returns true if the object has been serialized to/from the repository, false otherwise (i.e. object type is not to be included in the repository or collection was empty).</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RestoreAllInternal(System.Action{CMS.ContinuousIntegration.LogItem},System.Nullable{System.Threading.CancellationToken})"/> is running (in current or any other process), thus preventing the repository access.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RebuildConfiguration">
            <summary>
            Rebuilds CI configuration based on <see cref="T:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfigurationBuilder"/>.
            Should be called immediately after any <see cref="T:CMS.DataEngine.DataClassInfo"/> is changed.
            </summary>
            <remarks>
            Method is called automatically after any <see cref="T:CMS.DataEngine.DataClassInfo"/> is inserted or deleted.
            Method is called automatically when any Custom Table field definition, namespace or code name is changed.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RunStoreAllJob(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Stores all supported objects to the file system repository. 
            </summary>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>
            <para>
            Target location on the file system will be cleaned up before storing.
            </para>
            <para>
            This method is called from synchronized context. Overrides to this method do not need to synchronize against this class' public member calls.
            </para>
            <para>
            This member is virtual for the purpose of testing only.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RunRestoreAllJob(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Restores all supported objects from the file system repository.
            </summary>
            <param name="cancellationToken">Operation can be canceled at any time using given cancellation token. This method's operation terminates as soon as cancellation request is detected.</param>
            <remarks>
            <para>
            This method is called from synchronized context. Overrides to this method do not need to synchronize against this class' public member calls.
            </para>
            <para>
            This member is virtual for the purpose of testing only.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RunStoreJob(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Stores given objects to the file system repository.
            </summary>
            <remarks>
            <para>
            This method is called from synchronized context. Overrides to this method do not need to synchronize against this class' public member calls.
            </para>
            <para>
            This member is virtual for the purpose of testing only.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RunDeleteJob(CMS.DataEngine.ObjectTypeInfo,System.Collections.Generic.IEnumerable{CMS.DataEngine.BaseInfo},CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.Internal.ContinuousIntegrationTranslationHelper)">
            <summary>
            Deletes serialization files from the repository.
            </summary>
            <remarks>
            <para>
            This method is called from synchronized context. Overrides to this method do not need to synchronize against this class' public member calls.
            </para>
            <para>
            This member is virtual for the purpose of testing only.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="infoObjects"/> contains objects with different object types.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.RepositoryTypesEquals(System.String,CMS.DataEngine.BaseInfo)">
            <summary>
            Returns true when info is matching the repository object type.
            </summary>
            <param name="objectType">Repository object type</param>
            <param name="info">Info object</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.GetRepositoryMutexName(System.String,System.String)">
            <summary>
            Gets name for global mutex based on repository root path and type.
            </summary>
            <param name="type">Type of the mutex.</param>
            <param name="repositoryRootPath">Repository root path</param>
            <returns>Global mutex name (including the 'Global\' prefix).</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.IsStoreAllRunningGlobally(System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            <para>
            Indicates whether the storing of all objects is running or not. The method tries to speculatively acquire
            the global mutex <see cref="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.storeAllMutex"/> to determine whether storing is running and releases it immediately unless <paramref name="wait"/>
            is true.
            </para>
            <para>
            This method modifies the mutex state by speculatively acquiring it.
            </para>
            </summary>
            <returns>True if storing of all objects is running, false otherwise.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.IsRestoreAllRunningGlobally(System.Boolean,System.Boolean@)">
            <summary>
            <para>
            Indicates whether the restoring of all objects is running or not. The method tries to speculatively acquire
            the global mutex <see cref="F:CMS.ContinuousIntegration.FileSystemRepositoryManager.restoreAllMutex"/> to determine whether restoring is running and releases it immediately unless <paramref name="keepMutex"/>
            is true.
            </para>
            <para>
            This method modifies the mutex state by speculatively acquiring it.
            </para>
            </summary>
            <returns>True if storing of all objects is running, false otherwise.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.DisposeIfNotNull(System.IDisposable)">
            <summary>
            Disposes <paramref name="disposedObject"/> if it is not null.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.ThrowIfRestoreAllDisabled">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> when restore all operation is not enabled.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.#ctor">
            <summary>
            Private constructor ensures uniqueness of singleton class.
            </summary>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.#ctor(CMS.ContinuousIntegration.Internal.IFileSystemRepositoryConfigurationBuilder)">
            <summary>
            Private constructor ensures uniqueness of singleton class.
            </summary>
            <remarks>
            Do not use this constructor directly for other than testing purposes.
            </remarks>
            <param name="configurationBuilder">Configuration builder that should be used to create repository configuration when needed.</param>
            <exception cref="T:CMS.ContinuousIntegration.RepositoryConfigurationException">Thrown when loading of repository configuration fails.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:CMS.ContinuousIntegration.FileSystemRepositoryManager"/> class.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositoryManager.Dispose(System.Boolean)">
            <summary>
            When overridden in a derived class, releases the unmanaged resources used by the <see cref="T:CMS.ContinuousIntegration.FileSystemRepositoryManager"/>, and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <remarks>
            The <see cref="T:CMS.ContinuousIntegration.FileSystemRepositoryManager"/> uses only managed resources. If unmanaged resources are used in inherited class, make sure its destructor contains call to <c>Dispose(false)</c>
            (i.e. this class does not have any destructor implemented).
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemRepositorySynchronizationHelper">
            <summary>
            Contains methods necessary for file system repository access synchronization.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositorySynchronizationHelper.GetMutexSecurity">
            <summary>
            Gets <see cref="T:System.Security.AccessControl.MutexSecurity"/> to be used when creating named mutexes for synchronization of file system repository operations.
            The returned security object must be usable in the <see cref="T:System.Threading.Mutex"/> constructor call.
            </summary>
            <returns>Mutex security object to be used for file system repository synchronization mutexes.</returns>
            <remarks>
            The default implementation returns security object containing single access rule which grants <see cref="F:System.Security.AccessControl.MutexRights.FullControl"/> to everyone.
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemRepositorySynchronizationHelper.GetMutexSecurityInternal">
            <summary>
            Gets <see cref="T:System.Security.AccessControl.MutexSecurity"/> to be used when creating named mutexes for synchronization of file system repository operations.
            The returned security object must be usable in the <see cref="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)"/> constructor call.
            </summary>
            <returns>Mutex security object to be used for file system repository synchronization mutexes.</returns>
            <remarks>
            The default implementation returns security object containing single access rule which grants <see cref="F:System.Security.AccessControl.MutexRights.FullControl"/> to everyone.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.IMainObjectTypeProvider">
            <summary>
            Provides access to main object types.
            Main object type is type without a parent type.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IMainObjectTypeProvider.GetObjectTypes">
            <summary>
            Returns set of supported main object types.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.MainObjectTypeProvider">
            <summary>
            Default implementation od <see cref="T:CMS.ContinuousIntegration.IMainObjectTypeProvider"/>.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.MainObjectTypeProvider.#ctor(System.Collections.Generic.IEnumerable{CMS.DataEngine.ObjectTypeInfo})">
            <summary>
            Creates a new instance of <see cref="T:CMS.ContinuousIntegration.MainObjectTypeProvider"/>.
            </summary>
            <param name="objectTypeInfos">Available object type infos, these are filtered in GetObjectTypes() method.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.MainObjectTypeProvider.GetObjectTypes">
            <summary>
            Returns set of supported main object types.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.RepositoryHashManager">
            <summary>
            Collection of repository locations and hashes of the content of all parts of serialization of all objects the manager was provided to.
            If hash value is null, the file in the corresponding location has been removed (typically occurs when base info uses separated fields
            with dynamic extension and the extension has changed, resulting in new file being created).
            </summary>
            <remarks>
            Repository location is a relative path starting from the repository root.
            </remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash">
            <summary>
            Internal class that handles <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/> and its <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Hash"/>. Class is intended for local use only.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath">
            <summary>
            Path of a file, relative against <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/>.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Hash">
            <summary>
            Hash of the <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/> file's content.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Changed">
            <summary>
            If true, the <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Hash"/> and <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/> are either changed or new (against the data stored in DB) and an action needs to be performed.
            <para>If false, the <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Hash"/> and <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/> are same as the one in the DB and no action needs to be performed.</para>
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.FromDb">
            <summary>
            If true, the <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Hash"/> and <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/> was loaded from or merged with DB version (identified by <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/>).
            <para>If false, the <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.Hash"/> and <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash.RelativePath"/> was added manually and/or no merge with DB was performed.</para>
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryHashManager.RepositoryLocationsHashes">
            <summary>
            Stores collection of relative (file) paths, files' hashes and their state against DB, indexed by relative path.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.SaveHash(System.Security.Cryptography.HashAlgorithm,System.String)">
            <summary>
            Saves hash of the file on given location.
            </summary>
            <param name="hashAlgorithm">Hash algorithm.</param>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when either <paramref name="relativePath"/> is null or hash retrieved from <paramref name="hashAlgorithm"/> was invalid.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.SaveHash(System.String,System.String)">
            <summary>
            Saves hash of the file on given location.
            </summary>
            <param name="hash">Hash itself.</param>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when either <paramref name="relativePath"/> or <paramref name="hash"/> is null or empty string.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.RemoveHash(System.String)">
            <summary>
            Removes hash of the file on given location.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.HasHashChanged(System.String,System.String)">
            <summary>
            Returns true, if <paramref name="hash"/> differs from hash stored within the <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>
            under the <paramref name="relativePath"/> key or if the key is not present, false otherwise.
            </summary>
            <param name="hash">Hash to check.</param>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when either <paramref name="relativePath"/> or <paramref name="hash"/> is null or empty string.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.GetHash(System.String)">
            <summary>
            Returns hash of the file on given location.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.Clear">
            <summary>
            Clears all stored hashes, effectively reseting the object.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.GetStoredHashes">
            <summary>
            Returns collection of relative location of files and their hashes.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.LoadFilesMetadataFromDatabase(System.Boolean,System.Boolean)">
            <summary>
            Loads <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfo"/>s from DB and stores retrieved hashes within <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            <para>Hashes of file paths that are not stored in the DB are preserved.</para>
            <para>Hashes of file paths that are not stored in the <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/> are appended.</para>
            <para>
            Hashes of file paths stored in the DB overwrite the ones that eventually exist within <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>
            provided <paramref name="overwriteExistingHashes"/> is set to true (otherwise original hash is preserved and record is marked for update).
            </para>
            </summary>
            <param name="overwriteExistingHashes">If true, existing hashes are overwritten by data loaded from DB, otherwise, the distinct hashes are preserved and marked for update.</param>
            <param name="loadOnlyStoredMetadata">If true, only hashes of file paths that are stored in the <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/> are loaded from DB, otherwise all hashes are loaded.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.UpdateFilesMetadataInDatabase(System.Boolean)">
            <summary>
            Stores relative file locations and the files' hashes in the database using <see cref="T:CMS.ContinuousIntegration.Internal.FileMetadataInfoProvider"/>.
            <para>New hashes are added to the DB. Removed hashes are deleted from the DB. Amended hashes are updated in the DB.</para>
            </summary>
            <param name="updateOnlyStoredMetadata">If true, only metadata that are stored in the <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/> are updated,
             otherwise all hashes are processed. Use true for update after single object operation, false for mass operation (Store all, Restore all)</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.IsNewRelativePath(System.String)">
            <summary>
            Returns true if <paramref name="relativePath"/> does not exist within <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.RepositoryLocationsHashes"/>.
            </summary>
            <param name="relativePath">Path of a file, relative against <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/>.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.IsSameHashAsExisting(System.String,System.String)">
            <summary>
            Returns true if <paramref name="newHash"/> does not match the hash already stored under <paramref name="relativePath"/> within <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.RepositoryLocationsHashes"/>.
            </summary>
            <param name="newHash">Hash of the (amended) <paramref name="relativePath"/> file's content.</param>
            <param name="relativePath">Path of a file, relative against <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/>.</param>
            <remarks>Method expects the <paramref name="relativePath"/> to be valid and present key within the <see cref="P:CMS.ContinuousIntegration.RepositoryHashManager.RepositoryLocationsHashes"/> (with not-null value assigned).</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.CheckRelativePath(System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if the provided <paramref name="relativePath"/> is null or empty (or white spaced).
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.SelectChangableHashMergedWithMetadata(CMS.ContinuousIntegration.Internal.FileMetadataInfo,System.Boolean)">
            <summary>
            Returns a record that is result of merge between <paramref name="metadataInfo"/> loaded from DB
            and (potentially) existing <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager.ChangeablePathHash"/> record already present within <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            <para>The way the merge is performed depends on value of <paramref name="overwriteExistingHashes"/>.</para>
            </summary>
            <param name="metadataInfo">File meta-data info loaded from DB.</param>
            <param name="overwriteExistingHashes">If true, existing hash is overwritten by data loaded from DB, otherwise, the original hash is preserved and marked for update.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.RemoveMarkedHashes">
            <summary>
            Removes (marked) location hashes from DB.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.UpdateExistingHashes">
            <summary>
            Updates amended hashes in DB.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryHashManager.BulkInsertNewHashes">
            <summary>
            Inserts new hashes into DB - file meta-data will be inserted in single bulk operation.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.IFilterConditionCache">
            <summary>
            Contains cached filter condition results organized by object types and their where conditions.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFilterConditionCache.TryGet(System.String,System.String,System.Boolean@)">
            <summary>
            Tries to get a value indicating whether object type and its where condition meet filter condition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFilterConditionCache.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new cache entry indicating, whether object type and its where condition meet filter condition.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFilterConditionCache.Clear">
            <summary>
            Clears the whole cache.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.RepositoryActionResult">
            <summary>
            Result object for Store/Restore operation.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryActionResult.#ctor">
            <summary>
            Creates new object.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryActionResult.Success">
            <summary>
            Indicates whether action was successful.
            </summary>
            <remarks>Details for unsuccessful action are accessible in <see cref="P:CMS.ContinuousIntegration.RepositoryActionResult.Errors"/>.</remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryActionResult.Errors">
            <summary>
            List of errors for unsuccessful action.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryActionResult.Warnings">
            <summary>
            List of warnings for action.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryActionResult.LogError(System.String,CMS.ContinuousIntegration.LogItemActionTypeEnum)">
            <summary>
            Logs the error to the list of errors and causes that action will be unsuccessful.
            </summary>
            <param name="errorText">Error text.</param>
            <param name="actionType">Action type.</param>
            <returns>Returns current instance of <see cref="T:CMS.ContinuousIntegration.RepositoryActionResult"/>.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryActionResult.Log(CMS.ContinuousIntegration.LogItem)">
            <summary>
            Logs all warnings and errors to the action result. Logged error causes that action will be unsuccessful. 
            </summary>
            <param name="logItem">Item to log.</param>
            <returns>Returns current instance of <see cref="T:CMS.ContinuousIntegration.RepositoryActionResult"/>.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.GlobalSettingsRestoreHelper">
            <summary>
            Helper for restoring global setting objects needed just before restore all operation
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.GlobalSettingsRestoreHelper.RestoreSettings(CMS.ContinuousIntegration.Internal.RepositoryPathHelper,System.String)">
            <summary>
            Ensures that all global settings are restored.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.CachedFileSystemReader">
            <summary>
            Class designed to handle repetitive reading of data from a file and storing the file hash in provided <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <remarks>Relative paths are relative to <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/> provided in class constructor.</remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.CachedFileSystemReader.CachedBytes">
            <summary>
            Provides content bytes of files that were already read.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.CachedFileSystemReader.CachedContents">
            <summary>
            Provides content strings of files that were already read.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemReader.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.RepositoryHashManager)">
            <summary>
            Creates new instance of the <see cref="T:CMS.ContinuousIntegration.CachedFileSystemReader"/>.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <param name="hashManager">Hash manager.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> or <paramref name="hashManager"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemReader.ReadBytes(System.String)">
            <summary>
            Read content bytes of <paramref name="relativePath"/> from internal caches
            or file system repository and computes its hash.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <returns>Array of bytes representing file's content.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemReader.ReadString(System.String)">
            <summary>
            Read content string of <paramref name="relativePath"/> from internal caches
            or file system repository and computes its hash.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <returns>Unicode string representing file's content.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemReader.GetFileHash(System.String)">
            <summary>
            Returns hash of file stored under <paramref name="relativePath"/>
            in the <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.CachedFileSystemReader.RemoveFromCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes cached content of each path in <paramref name="relativePaths"/> collection
            from internal caches and also from <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <param name="relativePaths">Collection of relative path of the file.</param>
            <remarks>Only non-empty and not-null paths are processed.</remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemReader">
            <summary>
            Class designed to handle reading of data from a file and storing the file hash in provided <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <remarks>Relative paths are relative to <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/> provided in class constructor.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemReader.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.RepositoryHashManager)">
            <summary>
            Creates a new file system writer with given repository configuration and hash manager.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <param name="hashManager">Hash manager.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> or <paramref name="hashManager"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemReader.ReadBytes(System.String)">
            <summary>
            Reads given file from the repository and computes its hash.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <returns>Array of bytes representing file's content.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemReader.ReadString(System.String)">
            <summary>
            Reads given file from the repository and computes its hash.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <returns>Unicode string representing file's content.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemReader.RemoveFromCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes cached content of each path in <paramref name="relativePaths"/> collection
            from internal caches and also from <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <param name="relativePaths">Collection of relative path of the file.</param>
            <remarks>Only non-empty and not-null paths are processed.</remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemStorageOperationsBase">
            <summary>
            Base class to handle reading/writing of data to/from a file and storing the file hash in provided <see cref="P:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.RepositoryHashManager"/>.
            </summary>
            <remarks>Relative paths are relative to <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/> provided in class constructor.</remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.RepositoryConfiguration">
            <summary>
            Configuration of a file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.RepositoryHashManager">
            <summary>
            Collection of repository locations and hashes of the content of all parts of the object serialized or amended by a inheriting class method call.
            If hash value is null, the file in the corresponding location has been removed (typically occurs when base info uses separated fields
            with dynamic extension and the extension has changed, resulting in new file being created).
            </summary>
            <remarks>
            Repository location is a relative path starting from the repository root.
            <para>Repository is incremental (i.e. repeated invokes of jobs supporting multiple executions potentially results in growing
            of number of locations and hashes stored within the manager.</para>
            </remarks>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemStoreJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemUpsertObjectsByTypeJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.Internal.FileSystemDeleteObjectsByTypeJob"/>
            <seealso cref="T:CMS.ContinuousIntegration.FileSystemBindingsProcessor"/>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.RepositoryHashManager)">
            <summary>
            Creates new instance of <see cref="T:CMS.ContinuousIntegration.FileSystemStorageOperationsBase"/>.
            </summary>
            <param name="repositoryConfiguration">Repository configuration.</param>
            <param name="repositoryHashManager">Collection of repository locations and hashes of the content of all parts of the object serialized or amended by a inheriting class method call.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="repositoryConfiguration"/> or <paramref name="repositoryHashManager"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.GetFileHash(System.String)">
            <summary>
            Returns hash of file stored under <paramref name="relativePath"/> in the <see cref="P:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.RepositoryHashManager"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemStorageOperationsBase.CheckRelativePath(System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if the provided <paramref name="relativePath"/> is null or empty (or white spaced).
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.FileSystemWriter">
            <summary>
            Class designed to handle writing of data to a file and storing the resulting file hash in provided <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <remarks>Relative paths are relative to <see cref="P:CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration.RepositoryRootPath"/> provided in class constructor.</remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.#ctor(CMS.ContinuousIntegration.Internal.FileSystemRepositoryConfiguration,CMS.ContinuousIntegration.RepositoryHashManager)">
            <summary>
            Creates a new file system writer with given repository configuration and hash manager.
            </summary>
            <param name="configuration">Repository configuration.</param>
            <param name="hashManager">Hash manager.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration"/> or <paramref name="hashManager"/> is null.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.WriteToFile(System.String,System.Byte[])">
            <summary>
            Stores binary data to a repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="binaryData">Binary data to be stored.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.WriteToFile(System.String,System.String)">
            <summary>
            Stores text data to a repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="textData">Content to be stored.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.WriteToFile(System.String,System.Xml.XmlDocument)">
            <summary>
            Stores given document to a repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="document">Document to be stored.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.DeleteFile(System.String,System.Boolean)">
            <summary>
            Deletes repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path to the file within repository.</param>
            <param name="checkFileExistance">Indicates whether file's existence is checked before deleting it (to prevent <see cref="T:System.IO.DirectoryNotFoundException"/> from being thrown).</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.StoreToFile(System.String,System.Action{System.IO.Stream})">
            <summary>
            Stores data to file using given action that writes to created file stream.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="fileStreamWriteAction">Action that writes data to the given stream.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="M:CMS.ContinuousIntegration.FileSystemWriter.GetFileCryptoStream(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Gets CryptoStream for writing to the file with given relative path.
            </summary>
            <param name="relativePath">Relative path to the file.</param>
            <param name="hashAlgorithm">Hash algorithm that is used by CryptoStream.</param>
            <returns>CryptoStream for writing to the file with given relative path.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.ICachedFileSystemReader">
            <summary>
            Describes data reading access in repository with caching support.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ICachedFileSystemReader.RemoveFromCache(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes cached content of each path in <paramref name="relativePaths"/> collection
            from internal caches and also from <see cref="T:CMS.ContinuousIntegration.RepositoryHashManager"/>.
            </summary>
            <param name="relativePaths">Collection of relative path of the file.</param>
            <remarks>Only non-empty and not-null paths are processed.</remarks>
        </member>
        <member name="T:CMS.ContinuousIntegration.IFileSystemReader">
            <summary>
            Describes data reading operations in repository
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemReader.ReadBytes(System.String)">
            <summary>
            Reads given file from the repository and computes its hash.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <returns>Array of bytes representing file's content.</returns>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemReader.ReadString(System.String)">
            <summary>
            Reads given file from the repository and computes its hash.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <returns>Unicode string representing file's content.</returns>
        </member>
        <member name="T:CMS.ContinuousIntegration.IFileSystemStorageOperations">
            <summary>
            Basic file operations in repository
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.IFileSystemStorageOperations.RepositoryConfiguration">
            <summary>
            Configuration of a file system repository.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.IFileSystemStorageOperations.RepositoryHashManager">
            <summary>
            Collection of repository locations and hashes of the content of all parts of the object serialized or amended by a inheriting class method call.
            If hash value is null, the file in the corresponding location has been removed (typically occurs when base info uses separated fields
            with dynamic extension and the extension has changed, resulting in new file being created).
            </summary>
            <remarks>
            Repository location is a relative path starting from the repository root.
            <para>Repository is incremental (i.e. repeated invokes of jobs supporting multiple executions potentially results in growing
            of number of locations and hashes stored within the manager.</para>
            </remarks>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemStorageOperations.GetFileHash(System.String)">
            <summary>
            Returns hash of file stored under <paramref name="relativePath"/> in the <see cref="P:CMS.ContinuousIntegration.IFileSystemStorageOperations.RepositoryHashManager"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> is null or empty.</exception>
        </member>
        <member name="T:CMS.ContinuousIntegration.IFileSystemWriter">
            <summary>
            Describes data writing operations in repository
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemWriter.WriteToFile(System.String,System.Byte[])">
            <summary>
            Stores binary data to a repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="binaryData">Binary data to be stored.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemWriter.WriteToFile(System.String,System.String)">
            <summary>
            Stores text data to a repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="textData">Content to be stored.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemWriter.WriteToFile(System.String,System.Xml.XmlDocument)">
            <summary>
            Stores given document to a repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path of the file.</param>
            <param name="document">Document to be stored.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.IFileSystemWriter.DeleteFile(System.String,System.Boolean)">
            <summary>
            Deletes repository file identified by its repository <paramref name="relativePath"/>.
            </summary>
            <param name="relativePath">Relative path to the file within repository.</param>
            <param name="checkFileExistance">Indicates whether file's existence is checked before deleting it (to prevent <see cref="T:System.IO.DirectoryNotFoundException"/> from being thrown).</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.ContinuousIntegrationUsageDataSource">
            <summary>
            Module usage data for continuous integration.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.ContinuousIntegrationUsageDataSource.Name">
            <summary>
            Continuous integration usage data source name.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationUsageDataSource.GetData">
            <summary>
            Get Continuous integration usage data.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.ContinuousIntegrationCustomClassHandlers">
            <summary>
            Custom classes event handling
            Re-stores existing items when data class is changed or deleted 
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationCustomClassHandlers.Init">
            <summary>
            Initializes the events handlers.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.ContinuousIntegrationHandlers">
            <summary>
            Event handling for continuous integration processes
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationHandlers.Init">
            <summary>
            Initializes the events handlers.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.ContinuousIntegrationModule">
            <summary>
            Represents the Serialization module.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.ContinuousIntegrationRepositoryHandlers">
            <summary>
            Data classes event handling
            Rebuilds CI configuration when any data class is changed
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ContinuousIntegrationRepositoryHandlers.Init">
            <summary>
            Initializes the events handlers.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.LogItem">
            <summary>
            Represents one record in log.
            </summary>
            <remarks>
            Instance of this class is immutable.
            </remarks>
        </member>
        <member name="P:CMS.ContinuousIntegration.LogItem.ActionType">
            <summary>
            Type of the action which logged the message
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.LogItem.Type">
            <summary>
            Type of message.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.LogItem.Message">
            <summary>
            Message text.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.LogItem.#ctor(System.String,CMS.ContinuousIntegration.LogItemTypeEnum,CMS.ContinuousIntegration.LogItemActionTypeEnum)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message text.</param>
            <param name="messageType">Type of message.</param>
            <param name="actionType">Type of the action which logged the message.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.LogItem.ToString">
            <summary>
            Return type and content of message in single string.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.LogItemActionTypeEnum">
            <summary>
            Log item action type used for <see cref="T:CMS.ContinuousIntegration.LogItem"/> object.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.LogItemActionTypeEnum.Unknown">
            <summary>
            Unknown action type
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.LogItemActionTypeEnum.Update">
            <summary>
            Update action
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.LogItemActionTypeEnum.Delete">
            <summary>
            Delete action
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.LogItemTypeEnum">
            <summary>
            Log item type used for <see cref="T:CMS.ContinuousIntegration.LogItem"/> object.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.LogItemTypeEnum.Info">
            <summary>
            Informational message type.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.LogItemTypeEnum.Error">
            <summary>
            Error message type.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.LogItemTypeEnum.Warning">
            <summary>
            Warning message type.
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.ObjectSerializationException">
            <summary>
            Thrown when object serialization fails.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> class with default values.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectSerializationException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.ObjectTypeSerializationException">
            <summary>
            Thrown when serialization of objects of given object type fails.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.ObjectTypeSerializationException.ObjectTypeName">
            <summary>
            Name of object type which serialization failed.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.ObjectTypeSerializationException.InfoObjectId">
            <summary>
            Identifier of the object that causes serialization to fail.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectTypeSerializationException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectTypeSerializationException"/> class with default values.
            </summary>
            <param name="objectTypeName">Name of object type the serialization failed on.</param>
            <param name="infoObjectId">Identifier of an instance of the object type the serialization failed on.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectTypeSerializationException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectTypeSerializationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="objectTypeName">Name of object type the serialization failed on.</param>
            <param name="infoObjectId">Identifier of an instance of the object type the serialization failed on.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectTypeSerializationException.#ctor(System.String,System.Exception,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectTypeSerializationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="objectTypeName">Name of object type the serialization failed on.</param>
            <param name="infoObjectId">Identifier of an instance of the object type the serialization failed on.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectTypeSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.ContinuousIntegration.ObjectTypeSerializationException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:CMS.ContinuousIntegration.ObjectTypeSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets <paramref name="info"/>  with information about the exception.
            </summary>
            <param name="info">Stores all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
        </member>
        <member name="T:CMS.ContinuousIntegration.RepositoryActionContext">
            <summary>
            Context for the repository actions.
            </summary>
        </member>
        <member name="F:CMS.ContinuousIntegration.RepositoryActionContext.mIsRestoreOperationRunning">
            <summary>
            Indicates whether objects are being currently restored or not.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryActionContext.IsRestoreOperationRunning">
            <summary>
            Indicates whether objects are being restored or not.
            </summary>
        </member>
        <member name="P:CMS.ContinuousIntegration.RepositoryActionContext.CurrentIsRestoreOperationRunning">
            <summary>
            Indicates whether objects are being restored or not.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RepositoryActionContext.RestoreOriginalValues">
            <summary>
            Restores the original values to the context
            </summary>
        </member>
        <member name="T:CMS.ContinuousIntegration.RebuildConfigurationWebFarmTask">
            <summary>
            Web farm task used to rebuild CI configuration.
            </summary>
        </member>
        <member name="M:CMS.ContinuousIntegration.RebuildConfigurationWebFarmTask.ExecuteTask">
            <summary>
            Rebuilds CI configuration.
            </summary>
        </member>
    </members>
</doc>
