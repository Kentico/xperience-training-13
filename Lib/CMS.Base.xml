<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.Base</name>
    </assembly>
    <members>
        <member name="T:CMS.Base.AbstractBaseProvider`1">
            <summary>
            Abstract class for providers.
            </summary>
        </member>
        <member name="F:CMS.Base.AbstractBaseProvider`1.mProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractBaseProvider`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractBaseProvider`1.ProviderObject">
            <summary>
            Provider object.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractBaseProvider`1.SetAsDefaultProvider">
            <summary>
            Sets this object as the default provider
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractHelper`1">
            <summary>
            Abstract helper.
            </summary>
        </member>
        <member name="F:CMS.Base.AbstractHelper`1.mHelperObject">
            <summary>
            Helper object.
            </summary> 
        </member>
        <member name="P:CMS.Base.AbstractHelper`1.HelperObject">
            <summary>
            Helper object.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHelper`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHelper`1.SetAsDefaultHelper">
            <summary>
            Sets this object as the default helper
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractHelper">
            <summary>
            Abstract helper.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHelper.SetAsDefaultHelper">
            <summary>
            Sets this object as the default helper
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractManager`1">
            <summary>
            Abstract manager
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractManager`1.ChangeManagerTypeTo(System.Type)">
            <summary>
            Changes the manager type to the given type
            </summary>
            <param name="newType">New manager type</param>
        </member>
        <member name="M:CMS.Base.AbstractManager`1.GetInstance">
            <summary>
            Gets the instance of the helper.
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractManager">
            <summary>
            Abstract manager
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractManager.LoadManager``1">
            <summary>
            Loads the manager.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractManager.ChangeManagerTypeTo(System.Type)">
            <summary>
            Changes the manager type to the given type
            </summary>
            <param name="newType">New manager type</param>
        </member>
        <member name="M:CMS.Base.AbstractManager.ChangeManagerType``1(System.Type)">
            <summary>
            Changes the default manager type to the given type
            </summary>
            <param name="newType">New manager type</param>
        </member>
        <member name="T:CMS.Base.ICustomizableProvider">
            <summary>
            Interface for the customizable provider
            </summary>
        </member>
        <member name="M:CMS.Base.ICustomizableProvider.SetAsDefaultProvider">
            <summary>
            Sets the provider object as a default provider
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractDataContainer`1">
            <summary>
            Abstract class for data container objects
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractDataContainer`1.ColumnNames">
            <summary>
            Available column names.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractDataContainer`1.ContainsColumn(System.String)">
            <summary>
            Returns true if specified column is available in current structure.
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractHierarchicalObject`1">
            <summary>
            Abstract class for the hierarchical objects
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHierarchicalObject`1.UseLocalProperties">
            <summary>
            If true, the object uses local properties
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHierarchicalObject`1.PropertyList">
            <summary>
            Used property list
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHierarchicalObject`1.Properties">
            <summary>
            Properties available through the context.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHierarchicalObject`1.RegisteredPropertiesObject">
            <summary>
            Registered properties object
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHierarchicalObject`1.RegisteredProperties">
            <summary>
            Registered properties
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.RegisterProperty(System.String,System.Object,System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given parameterized property to the object.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="parameter">Parameter for the lambda expression</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.RegisterProperty(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.RegisterProperty``1(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="ex">Lambda expression</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.RegisterProperties">
            <summary>
            Registers the properties of this object
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.CombineWith(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object},`0[])">
            <summary>
            Combines current instance with other properties (modifies current instace!). 
            List properties are merged from all the participating typeinfos, other properties are taken as first non-null value (non-null is determined by nullValues collection).
            </summary>
            <param name="excludedProperties">Properties which should be ignored by the merging process</param>
            <param name="nullValues">Values which are considered as null values (value not specified)</param>
            <param name="objToMergeWith">Objects to be merged with current instance</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.HasSetter(System.String)">
            <summary>
            Returns true if given property has a setter
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.SetProperty(System.String,System.Object)">
            <summary>
            Gets the context property.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.GetProperty(System.String)">
            <summary>
            Gets the context property.
            </summary>
            <param name="name">Property name</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.TryGetProperty(System.String,System.Object@)">
            <summary>
            Gets the context property.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Returning the value</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="columnName">Property name</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.GetPropertyEmptyObject(System.String)">
            <summary>
            Gets the empty object of the given property
            </summary>
            <param name="columnName">Property name</param>
        </member>
        <member name="M:CMS.Base.AbstractHierarchicalObject`1.TryGetProperty(System.String,System.Object@,System.Boolean)">
            <summary>
            Returns value of property.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <param name="notNull">If true, the property attempts to return non-null values, at least it returns the empty object of the correct type</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="P:CMS.Base.AbstractHierarchicalObject`1.Item(System.String)">
            <summary>
            Gets the value of particular property
            </summary>
            <param name="name">Property name</param>
        </member>
        <member name="T:CMS.Base.AbstractSimpleDataContainer`1">
            <summary>
            Abstract class for the data container with no functionality
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractSimpleDataContainer`1.UseLocalColumns">
            <summary>
            If true, the object uses local columns
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractSimpleDataContainer`1.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="P:CMS.Base.AbstractSimpleDataContainer`1.RegisteredColumnsObject">
            <summary>
            Registered Columns object
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractSimpleDataContainer`1.RegisteredColumns">
            <summary>
            Registered Columns
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.RegisterColumn(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lamda expression for the getter of the property (object, parameter) => return value</param>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.RegisterColumn``1(System.String,System.Func{`0,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lamda expression for the getter of the property (object, parameter) => return value</param>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.RegisterColumn(System.String,System.Func{`0,System.Object},System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lamda expression for the getter of the property (object, parameter) => return value</param>
            <param name="setLambdaExpr">Lamda expression for the setter of the property (object, parameter, value) => set</param>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.RegisterColumn``1(System.String,System.Func{`0,System.Object},System.Func{`0,System.Object,System.Object})">
            <summary>
            Registers the given Column to the object
            </summary>
            <param name="columnName">Column name</param>
            <param name="lambdaExpr">Lamda expression for the getter of the property (object, parameter) => return value</param>
            <param name="setLambdaExpr">Lamda expression for the setter of the property (object, parameter, value) => set</param>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.RegisterColumns">
            <summary>
            Registers the Columns of this object
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.GetValue(System.String)">
            <summary>
            Gets the object value.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.AbstractSimpleDataContainer`1.SetValue(System.String,System.Object)">
            <summary>
            Sets the object value.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="T:CMS.Base.DisposableObject">
            <summary>
            Base class for the disposable objects that can carry other depending disposable objects
            </summary>
        </member>
        <member name="F:CMS.Base.DisposableObject.mUsing">
            <summary>
            List of objects allocated with the where condition
            </summary>
        </member>
        <member name="M:CMS.Base.DisposableObject.Lock(System.Object)">
            <summary>
            Locks the event on the given lock object. The context stays locked until the handler is disposed.
            </summary>
            <param name="lockObject">Lock object</param>
        </member>
        <member name="M:CMS.Base.DisposableObject.ExitLock(System.Object)">
            <summary>
            Exists the given lock object
            </summary>
            <param name="lockObject">Lock object to exit</param>
        </member>
        <member name="M:CMS.Base.DisposableObject.CallOnDispose(System.Action)">
            <summary>
            Adds the given action to the list of actions called when the handler object is disposed
            </summary>
            <param name="method">Method to call</param>
        </member>
        <member name="M:CMS.Base.DisposableObject.Using(System.IDisposable)">
            <summary>
            Adds the given object to the list of the allocated objects to dispose
            </summary>
            <param name="obj">Object to register</param>
        </member>
        <member name="M:CMS.Base.DisposableObject.DisposeUsings">
            <summary>
            Disposes the objects that were previously registered by the Using method
            </summary>
        </member>
        <member name="M:CMS.Base.DisposableObject.Dispose">
            <summary>
            Make sure the objects get disposed
            </summary>
        </member>
        <member name="T:CMS.Base.ReadOnlyAbstractHierarchicalObject`1">
            <summary>
            Read-only version of the abstract hierarchical object with SetValue hidden
            </summary>
        </member>
        <member name="M:CMS.Base.ReadOnlyAbstractHierarchicalObject`1.SetValue(System.String,System.Object)">
            <summary>
            Hide the set value method
            </summary>
        </member>
        <member name="T:CMS.Base.ApplicationEvents">
            <summary>
            Holds events that allow performing of custom logic at specific points within the application's life cycle.
            </summary>
            <remarks>
            <para>
            The events are represented by fields of the <see cref="T:CMS.Base.SimpleHandler"/> type. Handler methods need to be assigned to the Execute event of individual fields.
            </para>
            <para>
            Some of the ApplicationEvents are not raised out of web-based applications without the CMSApplication module (when using the Kentico API externally).
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.PreInitialized">
            <summary>
            Occurs after the application pre-initialization.
            </summary>
            <remarks>
            Fires only once during the application lifetime. Handlers need to be attached in the PreInit of modules.
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.UpdateData">
            <summary>
            Occurs when the application is ready to perform an upgrade routine.
            </summary>
            <remarks>
            <para>
            This event is not intended to be used in custom code.
            </para>
            <para>
            This event fires on every application start.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.Initialized">
            <summary>
            Occurs after the application finishes initialization.
            </summary>
            <remarks>
            <para>
            When this event occurs, the database connection is available and all modules are initialized.
            </para>
            <para>
            Fires only once during the application lifetime. Handlers need to be attached in the PreInit or Init of modules.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.PostStart">
            <summary>
            Occurs after the end of the first application request after successful initialization.
            </summary>
            <remarks>
            <para>
            Fires only once during the application lifetime. Use to perform additional async tasks needed for application startup.
            </para>
            <para>
            Response time can be affected by long running operations.
            </para>
            <para>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.End">
            <summary>
            Occurs just before the application shuts down.
            </summary>
            <remarks>
            <para>
            Fires only once during the application lifetime.
            </para>
            <para>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </para>
            <para>
            Do not use this event for performing critical actions. Code execution can be forcibly interrupted after a short period of time.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.Finalize">
            <summary>
            Occurs just before the application shuts down, after the <see cref="F:CMS.Base.ApplicationEvents.End"/> application event.
            </summary>
            <remarks>
            <para>
            This event is not intended to be used in custom code. Use <see cref="F:CMS.Base.ApplicationEvents.End"/> instead.
            </para>
            <para>
            The purpose of the event is to call actions after custom code execution within the <see cref="F:CMS.Base.ApplicationEvents.End"/> event.
            </para>
            <para>
            Fires only once during the application lifetime.
            </para>
            <para>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </para>
            <para>
            Do not use this event for performing critical actions. Code execution can be forcibly interrupted after a short period of time.
            </para>        
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.Error">
            <summary>
            Occurs when an unhandled exception is thrown.
            </summary>
            <remarks>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.SessionStart">
            <summary>
            Occurs when a new HTTP session is created for a client.
            </summary>
            <remarks>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.SessionEnd">
            <summary>
            Occurs when an HTTP session is destroyed.
            </summary>
            <remarks>
            <para>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </para>
            <para>
            May not be raised if the application is configured to use a session state mode different than InProc.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.ApplicationEvents.GetVaryByCustomString">
            <summary>
            Occurs when the application evaluates variables in custom names of output cache keys.
            </summary>
            <remarks>
            This event only occurs for web-based applications. For example, does not occur when using the Kentico API in an external console application.
            </remarks>
        </member>
        <member name="M:CMS.Base.ApplicationEvents.#ctor">
            <summary>
            The <see cref="T:CMS.Base.ApplicationEvents"/> class is not intended to be used as instance type. 
            Static modifier is not used due to possibility of using extension methods.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.ApplicationHelper">
            <summary>
            Contains methods that help with application management.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.ApplicationHelper.FireEndRequestEvents(System.EventArgs)">
            <summary>
            Fires events for handling the end of the request.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IJwtTokenService">
            <summary>
            Provides methods for issuing, validation and parsing 'JSON Web Token' (JWT).
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IJwtTokenService.Audience">
            <summary>
            Audience of the JWT token.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IJwtTokenService.Issuer">
            <summary>
            Issuer of the JWT token.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IJwtTokenService.TokenEncryption">
            <summary>
            Indicates if token will be encrypted.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IJwtTokenService.IssueToken(System.String,System.DateTime,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime})">
            <summary>
            Creates and serializes the JWT token.
            </summary>
            <param name="userName">User name (the principal that is the subject of the JWT).</param>
            <param name="validTo">Expiration date of the JWT token.</param>
            <param name="customClaims">Custom JWT token claims</param>
            <param name="validFrom">The valid-from date specifies the time the JWT token becomes effective.</param>
            <returns>Serialized the JWT token.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="userName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Throw when <paramref name="validTo"/> is in the past.</exception>
        </member>
        <member name="M:CMS.Base.Internal.IJwtTokenService.TryParseToken(System.String,System.Security.Claims.ClaimsPrincipal@,System.Boolean@)">
            <summary>
            Parses and validates a JWT token provided by <paramref name="tokenString"/> parameter.
            </summary>
            <param name="tokenString">Token string encoded as JWE or JWS.</param>
            <param name="claimsPrincipal">Claims-based identity parsed from token.</param>
            <param name="tokenExpired">Returns <c>True</c> when <paramref name="tokenString"/> has expiration time in the past.</param>
            <returns>Returns <c>True</c> whether the operation succeeded.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="tokenString"/> is null or whitespace.</exception>
        </member>
        <member name="T:CMS.Base.Internal.IJwtTokenServiceFactory">
            <summary>
            Represents a factory for <see cref="T:CMS.Base.Internal.IJwtTokenService"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IJwtTokenServiceFactory.GetJwtTokenService(System.String,System.String,System.Boolean)">
            <summary>
            Returns new instance of JWT token service.
            </summary>
            <param name="issuer">Issuer of the JWT token.</param>
            <param name="audience">Audience of the JWT token.</param>
            <param name="tokenEncryption">Indicates if token will be encrypted.</param>
            <returns>JWT token service.</returns>
        </member>
        <member name="T:CMS.Base.Internal.DefaultHttpContextRetriever">
            <summary>
            Implementation if <see cref="T:CMS.Base.Internal.IHttpContextRetriever"/> that always returns
            <see langword="null"/> as current context.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.DefaultHttpContextRetriever.GetContext">
            <summary>
            Gets the instance of <see cref="T:CMS.Base.Internal.IHttpContext"/> of current web request.
            Returns always <see langword="null"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.WebPathMapperBase">
            <summary>
            Base class for objects implementing <see cref="T:CMS.Base.Internal.IWebPathMapper"/> interface.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.WebPathMapperBase.DirectorySeparator">
            <summary>
            Platform specific directory separator.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.WebPathMapperBase.TILDA_FORWARDSLASH">
            <summary>~/</summary>
        </member>
        <member name="F:CMS.Base.Internal.WebPathMapperBase.FORWARDSLASH">
            <summary>/</summary>
        </member>
        <member name="F:CMS.Base.Internal.WebPathMapperBase.FORWARDSLASHx2">
            <summary>//</summary>
        </member>
        <member name="F:CMS.Base.Internal.WebPathMapperBase.BACKSLASH">
            <summary>\</summary>
        </member>
        <member name="F:CMS.Base.Internal.WebPathMapperBase.TILDA_BACKSLASH">
            <summary>~\</summary>
        </member>
        <member name="M:CMS.Base.Internal.WebPathMapperBase.MapPath(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Base.Internal.WebPathMapperBase.TryMapPath(System.String,System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Base.Internal.WebPathMapperBase.MapPathInternal(System.String)">
            <summary>
            Returns the full physical file path from the <paramref name="relativePath"/>.
            For the application residing in C:\\folder\\appFolder and "~/AppData" <paramref name="relativePath"/> parameter,
            the result will be C:\\folder\\appFolder\\AppData.
            </summary>
            <param name="relativePath">Relative path to be resolved.</param>
            <returns>The physical file path that corresponds to <paramref name="relativePath" />.</returns>
        </member>
        <member name="M:CMS.Base.Internal.WebPathMapperBase.GetStaticFilesRootPath">
            <inheritdoc/>
        </member>
        <member name="M:CMS.Base.Internal.WebPathMapperBase.GetRootPath">
            <summary>
            Gets the application root path.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.WebPathMapperBase.IsRelativePath(System.String)">
            <summary>
            Returns <see langword="true"/> when <paramref name="relativePath"/> represent a relative path.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.QueryCollectionExtensions">
            <summary>
            Extensions methods over <see cref="T:CMS.Base.Internal.IQueryCollection"/>.
            <para>
            This belongs to the internal namespace and is used for Kentico purposes. Avoid using members of internal namespace.
            </para>
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.QueryCollectionExtensions.ToNameValueCollection(CMS.Base.Internal.IQueryCollection)">
            <summary>
            Converts to <see cref="T:System.Collections.Specialized.NameValueCollection"/> as a copy. 
            The <see cref="T:Microsoft.Extensions.Primitives.StringValues"/> values of the collection are copied by implicit conversion to <see cref="T:System.String"/>.
            </summary>
            <param name="queryCollection">The query collection.</param>
            <returns>New NameValueCollection that is a copy of the <paramref name="queryCollection"/> keys and values.</returns>
            <remarks>
            The StringValues value of the collection is copied with implicit operator because it converts to comma separated string of the original values.
            This is for our purposes sufficient, since the Get method over NameValueCollection converts all values assigned to a key to a comma separated string.
            </remarks>
        </member>
        <member name="T:CMS.Base.Internal.UploadedFileExtensions">
            <summary>
            Provides methods to read content from <see cref="T:CMS.Base.IUploadedFile"/> input stream.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.UploadedFileExtensions.GetBytes(CMS.Base.IUploadedFile)">
            <summary>
            <para>
            Gets the content of uploaded file as byte array with array length equal to <see cref="P:CMS.Base.IUploadedFile.Length"/>.
            </para>
            <para>
            When the <see cref="P:CMS.Base.IUploadedFile.CanOpenReadStream"/> is <see langword="true"/> then
            the input stream will be accessed via <see cref="M:CMS.Base.IUploadedFile.OpenReadStream"/> method and then disposed.
            </para>
            <para>
            When the <see cref="P:CMS.Base.IUploadedFile.CanOpenReadStream"/> is <see langword="false"/> then
            the input stream will be accessed via <see cref="P:CMS.Base.IUploadedFile.InputStream"/> method, attempted to seek to
            the beginning and then read.
            </para>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown when input stream cannot be read or when the stream is not in the beginning and cannot be seek.
            </exception>
        </member>
        <member name="M:CMS.Base.Internal.UploadedFileExtensions.GetBytesFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Reads <paramref name="length"/> bytes from the <paramref name="inputStream"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.HttpCacheability">
            <summary>
            Provides enumerated values that are used to set the <see langword="Cache-Control" /> HTTP header.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheability.NoCache">
            <summary>
            Indicates that without a field name, a cache must force successful revalidation with the origin server before satisfying the request.
            With a field name, the cache may use the response to satisfy a subsequent request.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheability.Private">
            <summary>
            Default value. Specifies that the response is cacheable only on the client, not by shared caches.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheability.Server">
            <summary>
            Specifies that the response should only be cached at the server. Clients receive headers equivalent to a NoCache directive.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheability.ServerAndNoCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheability.Public">
            <summary>
            Specifies that the response is cacheable by clients and shared caches.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheability.ServerAndPrivate">
            <summary>
            
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.HttpCacheRevalidation">
            <summary>
            Provides enumerated values that are used to set revalidation-specific Cache-Control HTTP headers.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheRevalidation.AllCaches">
            <summary>
            Indicates that Cache-Control: must-revalidate should be sent.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheRevalidation.ProxyCaches">
            <summary>
            Indicates that Cache-Control: proxy-revalidate should be sent.
            </summary>
        </member>
        <member name="F:CMS.Base.Internal.HttpCacheRevalidation.None">
            <summary>
            Default value. Indicates that no property has been set. If this is set, no cache revalidation directive is sent.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.ICache">
            <summary>
            Describes implementation that contain methods for setting cache-specific HTTP headers and for controlling the web page output cache.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.ICache.SetCacheability(CMS.Base.Internal.HttpCacheability)">
            <summary>
            Sets the <see langword="Cache-Control"/> HTTP header value.
            </summary>
            <param name="cacheability">The <see cref="T:CMS.Base.Internal.HttpCacheability" /> enumeration value to set the header to.</param>
        </member>
        <member name="M:CMS.Base.Internal.ICache.SetRevalidation(CMS.Base.Internal.HttpCacheRevalidation)">
            <summary>
            Sets the <see langword="Cache-Control"/> HTTP header value to either the
            <see langword="must-revalidate"/> or the <see langword="proxy-revalidate"/>
            directives, based on the specified enumeration value.
            </summary>
            <param name="revalidation">The <see cref="T:CMS.Base.Internal.HttpCacheRevalidation"/> enumeration.</param>
        </member>
        <member name="M:CMS.Base.Internal.ICache.SetExpires(System.DateTime)">
            <summary>
            Sets the <see langword="Expires"/> HTTP header to an absolute date and time.
            </summary>
            <param name="date">The absolute expiration time.</param>
        </member>
        <member name="M:CMS.Base.Internal.ICache.SetLastModified(System.DateTime)">
            <summary>
            Sets the <see langword="Last-Modified"/> HTTP header to the specified date and time.
            </summary>
            <param name="date">The date-time value to set the <see langword="Last-Modified"/> header to.</param>
        </member>
        <member name="M:CMS.Base.Internal.ICache.SetETag(System.String)">
            <summary>
            Sets the <see langword="ETag"/> HTTP header to the specified string.
            </summary>
            <param name="etag">The text to use for the <see langword="ETag"/> header.</param>
        </member>
        <member name="T:CMS.Base.Internal.IFormCollection">
            <summary>
            Represents the collection of form values of the <see cref="T:CMS.Base.Internal.IRequest"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IFormCollection.Item(System.String)">
            <summary>
            Gets value of the form item specified by key.
            </summary>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            Value of the form item if it is present, otherwise <see cref="F:Microsoft.Extensions.Primitives.StringValues.Empty"/>.
            </returns>
        </member>
        <member name="P:CMS.Base.Internal.IFormCollection.Count">
            <summary>
            Gets the number of form items.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IFormCollection.Keys">
            <summary>
            Gets collection containing name keys of the form.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IFormCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains a form item with specified name.
            </summary>
            <param name="key">Name of the tested form item.</param>
            <returns>True if the key is present, otherwise false.</returns>
        </member>
        <member name="M:CMS.Base.Internal.IFormCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
            Retrieves value of form item specified by given name.
            </summary>
            <param name="key">Name of the form item for which value is retrieved.</param>
            <param name="value">If the key is found the value associated with the specified key, otherwise the default value for the type of the value parameter.</param>
            <returns>True if query string item was present, otherwise false.</returns>
        </member>
        <member name="P:CMS.Base.Internal.IFormCollection.Files">
            <summary>
            Gets collection of files within the form.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IHeaderDictionary">
            <summary>
            Represents <see cref="T:CMS.Base.Internal.IRequest"/> and <see cref="T:CMS.Base.Internal.IResponse"/> headers
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IHttpApplication">
            <summary>
            Defines methods for request pipeline processing.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IHttpApplication.CompleteRequest">
            <summary>
            Completes the processed request.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IHttpContext">
            <summary>
            Encapsulates all HTTP-specific information about an individual HTTP request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpContext.Items">
            <summary>
            Gets a key/value collection that can be used to organize and share data during an HTTP request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpContext.Request">
            <summary>
            Gets the <see cref="T:CMS.Base.Internal.IRequest" /> object for the current HTTP request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpContext.Response">
            <summary>
            Gets the <see cref="T:CMS.Base.Internal.IResponse" /> object for the current HTTP response.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpContext.Session">
            <summary>
            Gets the <see cref="T:CMS.Base.Internal.ISession" /> object for the current HTTP request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpContext.User">
            <summary>
            Gets or sets the <see cref="T:System.Security.Principal.IPrincipal" /> object for the current HTTP request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpContext.ApplicationInstance">
            <summary>
            Gets the <see cref="T:CMS.Base.Internal.IHttpApplication" /> object for the current HTTP request.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IHttpContextRetriever">
            <summary>
            Encapsulates the access to <see cref="T:CMS.Base.Internal.IHttpContext"/> instance.
            </summary>
            <remarks>
            The implementation of this interface is expected to have <c>Singleton</c> lifestyle.
            </remarks>
        </member>
        <member name="M:CMS.Base.Internal.IHttpContextRetriever.GetContext">
            <summary>
            Gets the instance of <see cref="T:CMS.Base.Internal.IHttpContext"/> of current web request.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IHttpCookie">
            <summary>
            Defines implementation to create and manipulate individual HTTP cookies.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.Name">
            <summary>
            Gets or sets the name of a cookie.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.Value">
            <summary>
            Gets or sets the value of a cookie.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.Expires">
            <summary>
            Gets or sets the expiration date and time for the cookie.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.HttpOnly">
            <summary>
            Gets or sets a value that specifies whether a cookie is accessible by client-side script.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.Domain">
            <summary>
            Gets or sets the domain to associate the cookie with.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.Path">
            <summary>
            Gets or sets the virtual path to transmit with the current cookie.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.SameSite">
            <summary>
            Gets or sets the value of the cookie's same site attribute.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookie.Secure">
            <summary>
            Gets or sets the value of the cookie's secure attribute.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IHttpCookieCollection">
            <summary>
            Defines implementation capable of handling collection of <see cref="T:CMS.Base.Internal.IHttpCookie"/> objects.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookieCollection.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:CMS.Base.Internal.IHttpCookieCollection" />.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IHttpCookieCollection.Item(System.String)">
            <summary>
            Gets the cookie value with the specified key wrapped into <see cref="T:CMS.Base.Internal.IHttpCookie"/> object.
            </summary>
            <param name="key">The key of the value to get.</param>
        </member>
        <member name="T:CMS.Base.Internal.IQueryCollection">
            <summary>
            Represents the <see cref="T:CMS.Base.Internal.IRequest"/> query string collection
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IQueryCollection.Item(System.String)">
            <summary>
            Gets a query string value.
            </summary>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            The element with the specified key, or <c>StringValues.Empty</c> if the key is not present.
            </returns>
        </member>
        <member name="P:CMS.Base.Internal.IQueryCollection.Count">
            <summary>
            Gets the number of set query string values.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:CMS.Base.Internal.IQueryCollection" />.
            </returns>
        </member>
        <member name="P:CMS.Base.Internal.IQueryCollection.Keys">
            <summary>
            Gets collection containing names of all set header.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object
            that implements <see cref="T:CMS.Base.Internal.IQueryCollection" />.
            </returns>
        </member>
        <member name="M:CMS.Base.Internal.IQueryCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains a query string value with specified name.
            </summary>
            <param name="key">Name of the tested query string value.</param>
            <returns>True if the key is present, otherwise false.</returns>
        </member>
        <member name="M:CMS.Base.Internal.IQueryCollection.TryGetValue(System.String,Microsoft.Extensions.Primitives.StringValues@)">
            <summary>
            Retrieves value of query string item specified by given name.
            </summary>
            <param name="key">Name of the query string item for which value is retrieved.</param>
            <param name="value">If the key is found the value associated with the specified key, otherwise the default value for the type of the value parameter.</param>
            <returns>True if query string item was present, otherwise false.</returns>
        </member>
        <member name="T:CMS.Base.Internal.IRequest">
            <summary>
            Defines implementation capable of reading the HTTP values sent by a client during a Web request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.RawUrl">
            <summary>
            The raw URL of the current request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.Url">
            <summary>
            Gets information about the URL of the current request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.Headers">
            <summary>
            Gets the collection of HTTP headers that were sent by the client.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.QueryString">
            <summary>
            Gets the collection of HTTP query-string variables.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.Cookies">
            <summary>
            Gets the collection of cookies that were sent by the client.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.HttpMethod">
            <summary>
            Gets the HTTP data-transfer method (such as <see langword="GET" />, <see langword="POST" />, or <see langword="HEAD" />) that was used by the client.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.UserAgent">
            <summary>
            Gets the complete user-agent string of the client.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.UrlReferrer">
            <summary>
            Gets information about the URL of the client request that linked to the current URL.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.UserLanguages">
            <summary>
            Gets a sorted array of client language preferences.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.AppRelativeCurrentExecutionFilePath">
            <summary>
            The portion of the request path that identifies the requested resource.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.InputStream">
            <summary>
            Gets the contents of the incoming HTTP entity body.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.IsSecureConnection">
            <summary>
            Gets a value that indicates whether the HTTP connection uses secure sockets (HTTPS protocol).
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.UserHostAddress">
            <summary>
            Gets the IP host address of the client.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.Form">
            <summary>
            Gets the form collection.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequest.RequestContext">
            <summary>
            Gets the information about an HTTP request that matches a defined route.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IRequest.ReadRequestBodyAsString">
            <summary>
            Reads the body of the request and returns text representation of it.
            Then sets position of the request stream back to start.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IRequest.GetServerVariableHttpOriginalUrl">
            <summary>
            Returns a value of a server variable 'HTTP_X_ORIGINAL_URL'.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IRequest.ReadRequestBodyAsStringAsync">
            <summary>
            Reads the body of the request asynchronously and returns text representation of it.
            Then sets position of the request stream back to start.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IRequestContext">
            <summary>
            Defines implementation encapsulating information about an HTTP request that matches a defined route.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRequestContext.RouteData">
            <summary>
            Gets <see cref="T:CMS.Base.Internal.IRouteData"/> object holding information about the requested route.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IRequestCookieCollection">
            <summary>
            Represents the HttpRequest cookie collection
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.IResponse">
            <summary>
            Defines implementation capable of preparing web response on the server.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code of the output that is returned to the client.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IResponse.ContentType">
            <summary>
            Gets content type of the current response or null if not set.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IResponse.Cookies">
            <summary>
            Gets the response cookie collection.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IResponse.Headers">
            <summary>
            Gets the collection of response headers.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IResponse.Cache">
            <summary>
            Gets the caching policy (such as expiration time, privacy settings, and vary clauses) of the current Web page.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IResponse.RedirectLocation">
            <summary>
            Gets or sets the value of the HTTP <see langword="Location" /> header.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponse.End">
            <summary>
            Sends all currently buffered output to the client, stops execution of the requested process.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponse.AddHeader(System.String,System.String)">
            <summary>
            Adds an HTTP header to the current response.
            </summary>
            <param name="name">The name of the HTTP header to add <paramref name="value" /> to.</param>
            <param name="value">The string to add to the header.</param>
        </member>
        <member name="M:CMS.Base.Internal.IResponse.Clear">
            <summary>
            Clears all headers and content output from the current response.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponse.RedirectPermanent(System.String,System.Boolean)">
            <summary>
            Performs a permanent redirect from the requested URL to the specified URL, and provides the option to complete the response.
            </summary>
            <param name="url">The location to which the request is redirected.</param>
            <param name="endResponse"><see langword="true" /> to terminate the response.</param>
        </member>
        <member name="M:CMS.Base.Internal.IResponse.Redirect(System.String,System.Boolean)">
            <summary>
            Redirects a request to the specified URL and specifies whether execution of the current process should terminate.
            </summary>
            <param name="url">The target location.</param>
            <param name="endResponse"><see langword="true" /> to terminate the response.</param>
        </member>
        <member name="T:CMS.Base.Internal.IResponseCookieCollection">
            <summary>
            Represents the HttpResponse cookie collection
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponseCookieCollection.GetNewCookie(System.String)">
            <summary>
            Creates and return new <see cref="T:CMS.Base.Internal.IHttpCookie"/> object.
            </summary>
            <param name="name">New cookie name.</param>
        </member>
        <member name="M:CMS.Base.Internal.IResponseCookieCollection.Clear">
            <summary>
            Clears all cookies from the cookie collection.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponseCookieCollection.Remove(System.String)">
            <summary>
            Removes cookie from collection.
            </summary>
            <param name="key">Name of the cookie to remove.</param>
        </member>
        <member name="M:CMS.Base.Internal.IResponseCookieCollection.Update(CMS.Base.Internal.IHttpCookie)">
            <summary>
            Updates cookie in collection.
            </summary>
            <param name="existingCookie">Cookie to update.</param>
        </member>
        <member name="T:CMS.Base.Internal.IResponseCookies">
            <summary>
            A wrapper for the response Set-Cookie header.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponseCookies.Append(CMS.Base.Internal.IHttpCookie)">
            <summary>
            Add a new cookie with value and options.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IResponseCookies.Delete(System.String)">
            <summary>
            Sets an expired cookie.
            </summary>
            <param name="key">Name of the cookie to expire.</param>
        </member>
        <member name="T:CMS.Base.Internal.IRouteData">
            <summary>
            Defines interface encapsulating information about a route.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRouteData.DataTokens">
            <summary>
            Gets a collection of custom values that are passed to the route handler but are not used when routing engine determines whether the route matches a request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IRouteData.Values">
            <summary>
            Gets a collection of URL parameter values and default values for the route.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.ISession">
            <summary>
            Defines implementation providing access to session-state values and session-level settings.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.ISession.Timeout">
            <summary>
            Gets or sets the time, in minutes, that can elapse between requests before the session-state provider ends the session.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.ISession.Keys">
            <summary>
            Gets a collection of the keys for all values that are stored in the session-state collection.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.ISession.SessionID">
            <summary>
            Gets the unique identifier for the session.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.ISession.IsReadOnly">
            <summary>
            Indicates whether the session is read-only or not.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.ISession.Abandon">
            <summary>
            Cancels the current session.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.ISession.Clear">
            <summary>
            Removes all keys and values from the session-state collection.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.ISession.Remove(System.String)">
            <summary>
            Deletes an item from the session-state collection.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.ISession.Item(System.String)">
            <summary>
            Gets or sets a session value by using the specified name.
            </summary>
            <param name="name">The key name of the session value.</param>
        </member>
        <member name="T:CMS.Base.Internal.IUploadedFilesCollection">
            <summary>
            Defines a contract for a collection of files uploaded within a request.
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.IUploadedFilesCollection.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:CMS.Base.IUploadedFile"/> object corresponding to an <paramref name="index"/> item within a request.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the valid range of indexes for the collection.</exception>
        </member>
        <member name="P:CMS.Base.Internal.IUploadedFilesCollection.Count">
            <summary>
            Returns the number of posted file objects within the request.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.ISiteStaticFileService">
            <summary>
            Provides methods for working with site static files.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.ISiteStaticFileService.FileExists(System.String)">
            <summary>
            Checks if a site static file is available on the specified relative path.
            </summary>
            <param name="relativePath">The relative path of the site static file.</param>
            <returns><c>true</c> if static file is available on the path; <c>false</c> otherwise</returns>
        </member>
        <member name="T:CMS.Base.Internal.IWebPathMapper">
            <summary>
            Defines an interface for mapping paths from the root of the web application.
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.IWebPathMapper.MapPath(System.String)">
            <summary>
            Returns the full physical file path from the <paramref name="relativePath"/>.
            <para>
            For the application residing in C:\\folder\\appFolder and "~/AppData" <paramref name="relativePath"/> parameter,
            the result will be C:\\folder\\appFolder\\AppData.
            </para>
            </summary>
            <param name="relativePath">Relative path to be resolved.</param>
            <returns>The physical file path that corresponds to <paramref name="relativePath" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="relativePath"/> does not specify a relative path.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="relativePath"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Base.Internal.IWebPathMapper.TryMapPath(System.String,System.String@)">
            <summary>
            Converts the provided relative path to a corresponding full physical path. A return value indicates whether the conversion succeeded.
            <para>
            For the application residing in C:\\folder\\appFolder and "~/AppData" <paramref name="relativePath"/> parameter,
            the result will be C:\\folder\\appFolder\\AppData.
            </para>
            </summary>
            <param name="relativePath">Relative path to be resolved.</param>
            <param name="physicalPath">
            When this method returns, contains the full physical path from the <paramref name="relativePath"/>, if the conversion succeeded 
            or <c>null</c> if the <paramref name="relativePath"/> is not a valid relative path.
            </param>
            <returns><c>true</c> if the <paramref name="relativePath"/> is converted successfully, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="relativePath"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CMS.Base.Internal.IWebPathMapper.GetStaticFilesRootPath">
            <summary>
            Returns a path to the folder containing static files for the web application.
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.Benchmark`1">
            <summary>
            Provides support for benchmarking the code
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark`1.ExecuteFunc">
            <summary>
            Function to execute within each iteration
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark`1.Result">
            <summary>
            Results of the benchmarked function
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark`1.SetupFunc">
            <summary>
            Performs the setup of the benchmark
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark`1.TearDownFunc">
            <summary>
            Performs the tear down of the benchmark
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark`1.Name">
            <summary>
            Benchmark name
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.Benchmark`1.#ctor(System.Func{CMS.Base.Internal.Benchmark{`0},`0})">
            <summary>
            Constructor
            </summary>
            <param name="executeFunc">Function to execute within each iteration</param>
        </member>
        <member name="M:CMS.Base.Internal.Benchmark`1.Run">
            <summary>
            Runs the benchmark
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.Benchmark`1.GetReport(CMS.Base.Internal.Benchmark)">
            <summary>
            Gets the results report
            </summary>
            <param name="baseLine">Base line benchmark</param>
        </member>
        <member name="M:CMS.Base.Internal.Benchmark`1.GetBaseLineComparison(CMS.Base.Internal.Benchmark)">
            <summary>
            Gets the comparison of this benchmark to the given base line
            </summary>
            <param name="baseLine">Base line</param>
        </member>
        <member name="T:CMS.Base.Internal.Benchmark">
            <summary>
            Base benchmark class
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark.Iterations">
            <summary>
            Number of iterations to run. Default 1000
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.Benchmark.Results">
            <summary>
            Results of the benchmark
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.Benchmark.Run">
            <summary>
            Runs the benchmark
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.Benchmark.GetReport(CMS.Base.Internal.Benchmark)">
            <summary>
            Gets the results report
            </summary>
            <param name="baseLine">Base line benchmark to compare to</param>
        </member>
        <member name="T:CMS.Base.Internal.BenchmarkResults">
            <summary>
            Represents the results of the benchmark
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.BenchmarkResults.TotalRunSeconds">
            <summary>
            Total seconds for running all iterations
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.BenchmarkResults.MaxRunSeconds">
            <summary>
            Maximum number of seconds per single run
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.BenchmarkResults.MinRunSeconds">
            <summary>
            Minimum seconds per single run
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.BenchmarkResults.SecondsPerRun">
            <summary>
            Average seconds per single run
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.BenchmarkResults.TotalSeconds">
            <summary>
            Total number of seconds
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.BenchmarkResults.Runs">
            <summary>
            Number of benchmark runs
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.BenchmarkResults.ToString">
            <summary>
            Returns the results as string representation
            </summary>
        </member>
        <member name="T:CMS.Base.Internal.MultiBenchmark">
            <summary>
            Wrapper to run multiple benchmarks and compare the results
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.MultiBenchmark.BaseLine">
            <summary>
            Base line benchmark to compare to
            </summary>
        </member>
        <member name="P:CMS.Base.Internal.MultiBenchmark.Benchmarks">
            <summary>
            Benchmarks covered by this benchmark
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.MultiBenchmark.#ctor(CMS.Base.Internal.Benchmark[])">
            <summary>
            Constructor
            </summary>
            <param name="benchmarks">Benchmarks to run</param>
        </member>
        <member name="M:CMS.Base.Internal.MultiBenchmark.Run">
            <summary>
            Runs the benchmarks
            </summary>
        </member>
        <member name="M:CMS.Base.Internal.MultiBenchmark.GetReport(CMS.Base.Internal.Benchmark)">
            <summary>
            Gets the benchmark report
            </summary>
            <param name="baseLine">Base line benchmark</param>
        </member>
        <member name="T:CMS.Base.ApplicationModule">
            <summary>
            Application module for registering the application events globally
            </summary>
        </member>
        <member name="M:CMS.Base.ApplicationModule.Init(System.Web.HttpApplication)">
            <summary>
            Registers the event handler(s).
            </summary>
            <param name="app">The http application</param>
        </member>
        <member name="M:CMS.Base.ApplicationModule.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:CMS.Base.ApplicationRuntime">
            <summary>
            Provides functions for application management.
            </summary>
        </member>
        <member name="M:CMS.Base.ApplicationRuntime.Restart(CMS.Base.RestartRequiredEventArgs)">
            <summary>
            Attempts to restart or stop an application using <see cref="T:CMS.Core.Internal.IApplicationRestartService"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.GetVaryByCustomStringEventArgs">
            <summary>
            Event arguments for GetVaryByCustomString event
            </summary>
        </member>
        <member name="P:CMS.Base.GetVaryByCustomStringEventArgs.Result">
            <summary>
            Result value
            </summary>
        </member>
        <member name="P:CMS.Base.GetVaryByCustomStringEventArgs.Context">
            <summary>
            Request context
            </summary>
        </member>
        <member name="P:CMS.Base.GetVaryByCustomStringEventArgs.Custom">
            <summary>
            Custom string
            </summary>
        </member>
        <member name="T:CMS.Base.GetVaryByCustomStringHandler">
            <summary>
            Automation handler
            </summary>
        </member>
        <member name="T:CMS.Base.RequestEvents">
            <summary>
            Holds events that allow performing of custom logic at specific points within the request processing.
            </summary>
            <remarks>
            <para>
            These request events allow you to handle most usable events from application without the need to create a custom HTTP module or edit global.asax.
            </para>
            <para>
            The events are represented by fields of the <see cref="T:CMS.Base.SimpleHandler"/> type. Handler methods need to be assigned to the Execute event of individual fields.
            </para>
            <para>
            The events are not raised out of web-based applications without the CMSApplication module (when using the Kentico API externally).
            </para>    
            </remarks>
        </member>
        <member name="F:CMS.Base.RequestEvents.Prepare">
            <summary>
            Occurs before the <see cref="F:CMS.Base.RequestEvents.Begin"/> event.
            </summary>
            <remarks>        
            This event is related to the <see cref="T:CMS.Base.RequestEvents"/> lifecycle only.
            </remarks>
        </member>
        <member name="F:CMS.Base.RequestEvents.Begin">
            <summary>
            Occurs as the first event in the HTTP pipeline chain of execution when ASP.NET responds to a request.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.Authenticate">
            <summary>
            Occurs when a security module has established the identity of a user.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostAuthenticate">
            <summary>
            Occurs when a security module has established the identity of the user.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.Authorize">
            <summary>
            Occurs when a security module has verified user authorization.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostAuthorize">
            <summary>
            Occurs when the user for the current request has been authorized.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.ResolveRequestCache">
            <summary>
            Occurs when ASP.NET finishes an authorization event to let the caching modules serve requests from the cache, bypassing execution of the event handler (for example, a page or an XML Web service).
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostResolveRequestCache">
            <summary>
            Occurs when ASP.NET bypasses execution of the current event handler and allows a caching module to serve a request from the cache.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.MapRequestHandler">
            <summary>
            Occurs when a handler is selected to respond to the request.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostMapRequestHandler">
            <summary>
            Occurs after ASP.NET has mapped the current request to the appropriate event handler.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.AcquireRequestState">
            <summary>
            Occurs when ASP.NET acquires the current state (for example, session state) that is associated with the current request.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostAcquireRequestState">
            <summary>
            Occurs after the request state (for example, session state) that is associated with the current request has been obtained.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PreRequestHandlerExecute">
            <summary>
            Occurs just before ASP.NET starts executing an event handler.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostRequestHandlerExecute">
            <summary>
            Occurs when the ASP.NET event handler (for example, a page or an XML Web service) finishes execution.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.ReleaseRequestState">
            <summary>
            Occurs after ASP.NET finishes executing all request event handlers. This event causes state modules to save the current state data
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostReleaseRequestState">
            <summary>
            Occurs when ASP.NET has completed executing all request event handlers and the request state data has been stored.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.UpdateRequestCache">
            <summary>
            Occurs when ASP.NET finishes executing an event handler in order to let caching modules store responses that will be used to serve subsequent requests from the cache.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostUpdateRequestCache">
            <summary>
            Occurs when ASP.NET finishes updating caching modules and storing responses that are used to serve subsequent requests from the cache.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.LogRequest">
            <summary>
            Occurs just before ASP.NET performs any logging for the current request.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PostLogRequest">
            <summary>
            Occurs when ASP.NET has completed processing all the event handlers for the <see cref="F:CMS.Base.RequestEvents.LogRequest"/> event.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.End">
            <summary>
            Occurs as the last event in the HTTP pipeline chain of execution when ASP.NET responds to a request.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.RunEndRequestTasks">
            <summary>
            Occurs after the <see cref="F:CMS.Base.RequestEvents.End"/> event has finished.
            </summary>
            <remarks>
            Response time can be affected by long running operations.
            </remarks>
        </member>
        <member name="F:CMS.Base.RequestEvents.Finalize">
            <summary>
            Occurs as the last event in the pipeline and can be used to clean up and release resources used by the request.
            </summary>
            <remarks>
            Response time can be affected by long running operations.
            </remarks>
        </member>
        <member name="F:CMS.Base.RequestEvents.RequestCompleted">
            <summary>
            Occurs when the managed objects that are associated with the request have been released.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PreSendRequestHeaders">
            <summary>
            Occurs just before ASP.NET sends HTTP headers to the client.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestEvents.PreSendRequestContent">
            <summary>
            Occurs just before ASP.NET sends content to the client.
            </summary>
        </member>
        <member name="M:CMS.Base.RequestEvents.#ctor">
            <summary>
            The <see cref="T:CMS.Base.RequestEvents"/> class is not intended to be used as instance type. 
            Static modifier is not used due to possibility of using extension methods.
            </summary>
        </member>
        <member name="T:CMS.Base.BaseExtensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:CMS.Base.BaseExtensions.Replace(System.Text.RegularExpressions.Regex,System.String,System.String,System.Boolean)">
            <summary>
            Replaces a re
            </summary>
            <param name="regEx">Regular expression</param>
            <param name="input">Input text to replace</param>
            <param name="replacement">Replacement string</param>
            <param name="allowSubstitutions">If set to false, substitutions are not allowed within the replacement string</param>
        </member>
        <member name="M:CMS.Base.BaseExtensions.EscapeSubstitutions(System.String)">
            <summary>
            Escapes substitutions within the given string
            </summary>
            <param name="inputText">Input text</param>
        </member>
        <member name="M:CMS.Base.BaseExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns input in batches of <paramref name="batchSize"/> size.
            </summary>
            <param name="collection">Collection to be batched</param>
            <param name="batchSize">Size of each chunk (except for the last one)</param>
        </member>
        <member name="M:CMS.Base.BaseExtensions.BatchImpl``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Implementation of <see cref="M:CMS.Base.BaseExtensions.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:CMS.Base.BaseExtensions.AsDataContainer(System.Data.DataRow)">
            <summary>
            Converts a DataRow to IDataContainer. Returns null if the original data row is null.
            </summary>
            <param name="dr">Data row</param>
        </member>
        <member name="T:CMS.Base.ClassEventArgs">
            <summary>
            Class event attributes
            </summary>
        </member>
        <member name="P:CMS.Base.ClassEventArgs.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.Base.ClassEventArgs.AssemblyName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="P:CMS.Base.ClassEventArgs.Object">
            <summary>
            Returning the object of the given class
            </summary>
        </member>
        <member name="T:CMS.Base.ClassHelper">
            <summary>
            Helper to provide general access to assemblies and classes.
            </summary>
        </member>
        <member name="F:CMS.Base.ClassHelper.ASSEMBLY_APPCODE">
            <summary>
            AppCode constant.
            </summary>
        </member>
        <member name="F:CMS.Base.ClassHelper.OnGetCustomClass">
            <summary>
            Fires when the custom class is required.
            </summary>
        </member>
        <member name="P:CMS.Base.ClassHelper.DefaultAssembly">
            <summary>
            Gets or sets default assembly for loading classes. Default assembly is used when the assembly given by a parameter is not found.
            </summary>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetCustomClassKey(System.String,System.String)">
            <summary>
            Gets the dictionary key for the custom class
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.RegisterAliasFor``1(System.String,System.String)">
            <summary>
            Registers the class alias for backward compatibility
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.RegisterCustomClass(System.String,System.String,CMS.Core.IObjectFactory)">
            <summary>
            Registers the custom class under the given assembly name and class name. Overrides the default one
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Class name</param>
            <param name="factory">Object factory to provide the class</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.RegisterCustomClass``1(System.String)">
            <summary>
            Registers the custom App_Code class under the class name. Overrides the default one
            </summary>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.RegisterCustomClass``1(System.String,System.String)">
            <summary>
            Registers the custom class under the given assembly name and class name. Overrides the default one
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetAssembly(System.String)">
            <summary>
            Loads the given assembly.
            </summary>
            <param name="assemblyName">Assembly name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetAssemblyNames(System.String,CMS.Base.ClassTypeSettings)">
            <summary>
            Gets list of assembly names by given restrictions.
            </summary>
            <param name="assembliesFilter">File system filter for list assemblies</param>
            <param name="settings">Settings used for filter list of classes</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClassType(System.String,System.String)">
            <summary>
            Gets the new object of given class.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClass(System.String,System.String)">
            <summary>
            Gets the new object of given class.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClass``1(System.String,System.String)">
            <summary>
            Gets the new object of given class.
            </summary>
            <typeparam name="ReturnType">Return class type</typeparam>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClasses(System.String,CMS.Base.ClassTypeSettings)">
            <summary>
            Gets classes for given assembly name and filter settings
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="settings">Settings used for filter list of classes</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetEmptyObject(System.Type)">
            <summary>
            Gets the empty object of the given type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetCustomClassNames">
            <summary>
            Gets the list of registered custom class names.
            </summary>
        </member>
        <member name="M:CMS.Base.ClassHelper.ClassLoaded(System.String,System.String)">
            <summary>
            Indicates if given class is loaded.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.IsCustomClass(System.String)">
            <summary>
            Indicates if given assembly name represents custom class
            </summary>
            <param name="assemblyName">Assembly name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.IsAllowed(System.Type,CMS.Base.ClassTypeSettings)">
            <summary>
            Checks if given type is allowed based on base class name.
            </summary>
            <param name="type">Type of class</param>
            <param name="settings">Settings used for filter list of classes</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetBaseTypes(System.Type)">
            <summary>
            Return all base types of given <paramref name="type"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> has null value.</exception>
        </member>
        <member name="M:CMS.Base.ClassHelper.ClassLoadedInternal(System.String,System.String)">
            <summary>
            Indicates if given class is loaded.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetCustomClassNamesInternal">
            <summary>
            Gets the list of registered custom class names.
            </summary>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetAssemblyInternal(System.String)">
            <summary>
            Loads the given assembly.
            </summary>
            <param name="assemblyName">Assembly name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetAssemblyNamesInternal(System.String,CMS.Base.ClassTypeSettings)">
            <summary>
            Gets list of assembly names by given restrictions. Returns assemblies that contains at least one class fulfilling restrictions.
            </summary>
            <param name="assembliesFilter">String to filter list of assembly names</param>
            <param name="settings">Settings used for filter classes</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClassTypeInternal(System.String,System.String)">
            <summary>
            Gets the type of given class.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClassInternal(System.String,System.String)">
            <summary>
            Gets the new object of given class.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Full class name</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClassesInternal(System.String,CMS.Base.ClassTypeSettings)">
            <summary>
            Gets classes for given assembly name and class restrictions settings.
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="settings">Settings used for filter list of classes</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetCustomClass(System.String,System.String,System.Object@)">
            <summary>
            Attempts to get the custom class
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="className">Class name</param>
            <param name="obj">Returns the class object</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetClassCondition(System.Type,CMS.Base.ClassTypeSettings)">
            <summary>
            Returns visibility condition for given class type.
            </summary>
            <param name="type">Class type</param>
            <param name="settings">Settings used for filter list of classes</param>
        </member>
        <member name="M:CMS.Base.ClassHelper.TypeCanBeCreatedAutomatically(System.Type)">
            <summary>
            Returns <c>true</c> if type is creatable automatically by <see cref="M:System.Activator.CreateInstance(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:CMS.Base.ClassHelper.GetBaseTypesCore(System.Type)">
            <summary>
            Return all base types of given <paramref name="type"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.ClassNotLoadedException">
            <summary>
            Exception which is thrown when the custom class is not loaded.
            </summary>
        </member>
        <member name="M:CMS.Base.ClassNotLoadedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="T:CMS.Base.ClassTypeSettings">
            <summary>
            Class type settings class.
            </summary>
        </member>
        <member name="P:CMS.Base.ClassTypeSettings.CheckAutoCreation">
            <summary>
            Indicates whether automatic type creation by system should be checked.
            </summary>
            <remarks>Checks whether system is able to create type automatically</remarks>
        </member>
        <member name="P:CMS.Base.ClassTypeSettings.ShowClasses">
            <summary>
            Indicates if classes should be selected.
            </summary>
        </member>
        <member name="P:CMS.Base.ClassTypeSettings.ShowEnumerations">
            <summary>
            Indicates if enumerations should be selected.
            </summary>
        </member>
        <member name="P:CMS.Base.ClassTypeSettings.ShowInterfaces">
            <summary>
            Indicates if interfaces should be selected.
            </summary>
        </member>
        <member name="P:CMS.Base.ClassTypeSettings.BaseClassNames">
            <summary>
            Gets or sets base class names, separated by semi-colon, to filter classes.
            </summary>
        </member>
        <member name="P:CMS.Base.ClassTypeSettings.BaseTypes">
            <summary>
            Gets list of current base types for class validation
            </summary>
        </member>
        <member name="M:CMS.Base.ClassTypeSettings.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="baseClassNames">Base class names (separated by semi-colon) to filter its child classes.</param>
            <param name="showClasses">Indicates if classes should be selected.</param>
            <param name="showEnumerations">Indicates if enumerations should be selected.</param>
            <param name="showInterfaces">Indicates if interfaces should be selected.</param>
        </member>
        <member name="M:CMS.Base.ClassTypeSettings.GetCacheKey(System.String)">
            <summary>
            Returns key to access cached data for given assembly name.
            </summary>
            <param name="assemblyName">Assembly name</param>
        </member>
        <member name="M:CMS.Base.ClassTypeSettings.CheckInterfaces(System.Type)">
            <summary>
            Checks if selected class is child of given interface.
            </summary>
            <param name="type">Type of selected class</param>
        </member>
        <member name="T:CMS.Base.CMSVersion">
            <summary>
            CMS version
            </summary>
        </member>
        <member name="P:CMS.Base.CMSVersion.DevelopmentModel">
            <summary>
            Get the value that indicates current development model.
            </summary>
            <remarks>This property should not be used directly by custom code.</remarks>
            <exclude />
        </member>
        <member name="P:CMS.Base.CMSVersion.HotfixVersion">
            <summary>
            Hotfix version.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSVersion.MainVersion">
            <summary>
            Version of the system, e.g. "8.0 RC"
            </summary>
        </member>
        <member name="P:CMS.Base.CMSVersion.Version">
            <summary>
            Returns the system version.
            </summary>
            <returns>Actual version of CMS</returns>
        </member>
        <member name="P:CMS.Base.CMSVersion.VersionSuffix">
            <summary>
            Suffix of the system version, e.g. "BETA"
            </summary>
        </member>
        <member name="P:CMS.Base.CMSVersion.InformationalVersion">
            <summary>
            Gets [AssemblyInformationalVersion] of the current assembly.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSVersion.FileVersion">
            <summary>
            Gets [AssemblyFileVersion] of the current assembly.
            Contains 4 digits separated by dot.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSVersion.FileVersionInfo">
            <summary>
            Gets file version info of current assembly, which is used to determine product versions.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSVersion.GetVersion(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns string representation of system version. Private since build and hotfix numbers are mutually exclusive.
            </summary>
            <param name="major">Major version</param>
            <param name="minor">Minor version</param>
            <param name="build">Build number</param>
            <param name="hotfix">Hotfix number</param>
            <param name="revision">Revision number</param>
            <param name="suffix">Version suffix</param>
        </member>
        <member name="M:CMS.Base.CMSVersion.GetVersion(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns string representation of full hotfix version. All parts of the version are optional.
            </summary>
            <param name="major">Major version</param>
            <param name="minor">Minor version</param>
            <param name="hotfix">Hotfix version</param>
            <param name="suffix">Version suffix</param>
        </member>
        <member name="M:CMS.Base.CMSVersion.GetVersion(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns string representation of full system version. All parts of the version are optional.
            </summary>
            <param name="major">Major version</param>
            <param name="minor">Minor version</param>
            <param name="build">Build number</param>
            <param name="revision">Revision number</param>
            <param name="suffix">Version suffix</param>
        </member>
        <member name="M:CMS.Base.CMSVersion.IsBetaVersion">
            <summary>
            Indicates if current version is BETA version.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSVersion.GetFriendlySystemVersion(System.Boolean)">
            <summary>
            Returns system version text.
            </summary>
            <param name="includeBuildNumber">Includes buildnumber</param>
        </member>
        <member name="T:CMS.Base.MultiKeyDictionary`1">
            <summary>
            Hashtable which can use multiple keys to access the same data. The keys are separated by the separator.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.Base.MultiKeyDictionary`1.Item(System.String)">
            <summary>
            Gets or sets the item.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.#ctor(System.Collections.IDictionary)">
            <summary>
            Constructor.
            </summary>
            <param name="d">Source data dictionary</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.GetMainKey(System.String)">
            <summary>
            Gets the main object key for the given key.
            </summary>
            <param name="key">Key to find</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.Add(System.Object,System.Object)">
            <summary>
            Adds the value to the table.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.Clear">
            <summary>
            Clears the table.
            </summary>
        </member>
        <member name="P:CMS.Base.MultiKeyDictionary`1.Item(System.Object)">
            <summary>
            Gets or sets the value associated with key value
            </summary>
            <param name="key">Key value</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.Contains(System.Object)">
            <summary>
            Returns true if the table contains specific key.
            </summary>
            <param name="key">Key to find</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.ContainsKey(System.Object)">
            <summary>
            Returns true if the table contains specific key.
            </summary>
            <param name="key">Key to find</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.Remove(System.Object)">
            <summary>
            Removes the item from the table.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:CMS.Base.MultiKeyDictionary`1.Clone">
            <summary>
            Gets the cloned Hashtable.
            </summary>
        </member>
        <member name="T:CMS.Base.SafeDictionary`2">
            <summary>
            Represents a thread-safe collection of key/value pairs that can be modified by multiple threads concurrently.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <remarks>
            <para>
            Keep in mind that the operations of this class are thread-safe. However, a sequence of operations inherently cannot be thread-safe.
            If you want to perform multiple operations as one atomic operation, use the <see cref="P:CMS.Base.SafeDictionary`2.SyncRoot"/> object.
            </para>
            <para>
            In current implementation some read operations do not require locking (i.e. multiple threads can read even though some other thread has the lock).
            If your situation requires all the readers to wait when the dictionary is locked by some other thread, consider some other collection suitable for readers-writers synchronization problem.
            </para>
            </remarks>
        </member>
        <member name="F:CMS.Base.SafeDictionary`2.mDefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:CMS.Base.SafeDictionary`2.mNullValue">
            <summary>
            Null value.
            </summary>
        </member>
        <member name="F:CMS.Base.SafeDictionary`2.mUseWeakReferences">
            <summary>
            If true, the weak references are used for the items so the memory can be cleared upon request
            </summary>
        </member>
        <member name="F:CMS.Base.SafeDictionary`2.mCopyToNewThread">
            <summary>
            If true, the dictionary is copied (not cloned) to a new thread
            </summary>
        </member>
        <member name="F:CMS.Base.SafeDictionary`2.mSyncRoot">
            <summary>
            Object used for underlying Hashtable access synchronization.
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.IsSynchronized">
            <summary>
            Returns true if dictionary is synchronized.
            </summary>
            <remarks>
            Current implementation ensures thread-safety for read/write operations (read operations are safe to be performed without the need for locking).
            To synchronize enumeration or multiple operations use <see cref="P:CMS.Base.SafeDictionary`2.SyncRoot"/>.
            </remarks>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:CMS.Base.SafeDictionary`2"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:CMS.Base.SafeDictionary`2"/>.
            </returns>
            <remarks>
            <para>
            Utilize this property when you need to perform multiple dictionary operations as a single atomic operation,
            or when you need to enumerate the entries.
            </para>
            <para>
            Obtaining a lock does not prevent all other threads from read operations, since most read operations do not
            need to use locking.
            </para>
            </remarks>
            <example>
            Use the following snippet to enumerate the dictionary entries in a thread-safe way.
            <code>
            lock (dictionary.SyncRoot)
            {
                foreach (var entry in dictionary)
                {
                    // Perform some operation
                    // Try to avoid time consuming operations to release the lock as soon as possible
                    // No other thread can modify the dictionary when it is locked using the SyncRoot property
                    // However, read access does not require locking, therefore any other thread can still read the dictionary's content
                }
            }
            </code>
            </example>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.TypedKeys">
            <summary>
            Gets a typed collection of keys in this dictionary
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.TypedValues">
            <summary>
            Gets a typed collection of values in this dictionary
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.Item(System.Object)">
            <summary>
            Items indexer. Gets or sets the value in the dictionary.
            </summary>
            <param name="key">Value key</param>
            <remarks>
            The <see cref="M:CMS.Base.SafeDictionary`2.get_Item(System.Object)"/> operation does not require locking for concurrent access.
            </remarks>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.Item(`0)">
            <summary>
            Items indexer. Gets or sets the value in the dictionary.
            </summary>
            <param name="key">Value key</param>
            <remarks>
            The <see cref="M:CMS.Base.SafeDictionary`2.get_Item(`0)"/> operation does not require locking for concurrent access.
            </remarks>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.AllowNulls">
            <summary>
            If true, the dictionary allows null values as valid.
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.NullValue">
            <summary>
            Null value.
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.UseWeakReferences">
            <summary>
            If true, the weak references are used for the items so the memory can be cleared upon request.
            The property can be set only when the dictionary is empty. To ensure thread-safety, you have
            to perform the check for emptiness and property assignment in a critical section (use <see cref="P:CMS.Base.SafeDictionary`2.SyncRoot"/> for that purpose).
            </summary>
            <example>
            Use the following code snippet to ensure thread-safety while changing this property.
            <code>
            lock (dictionary.SyncRoot)
            {
                dictionary.Clear();
                dictionary.UseWeakReferences = true;
            }
            </code>
            </example>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.CopyToNewThread">
            <summary>
            If true, the dictionary is copied (not cloned) to a new thread
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.#ctor">
            <summary>
            SafeDictionary constructor.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.#ctor(System.Collections.IEqualityComparer)">
            <summary>
            SafeDictionary constructor.
            </summary>
            <param name="comparer">Equality comparer for the items</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="d">Source data dictionary</param>
            <param name="comparer">Equality comparer for the items</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.Clone">
            <summary>
            Clones the dictionary
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.CopyPropertiesTo(CMS.Base.SafeDictionary{`0,`1})">
            <summary>
            Copies the dictionary properties to the target dictionary
            </summary>
            <param name="target">Target dictionary</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Object serialization.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Context</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.GetRealCount">
            <summary>
            Gets the real count of the objects in the dictionary.
            </summary>
            <remarks>
            <para>
            The dictionary's content can be changed by other threads after computing
            the result. If you want to make sure the dictionary's content does
            not change until the real count is used, use the <see cref="P:CMS.Base.SafeDictionary`2.SyncRoot"/>.
            </para>
            <para>
            Important: When the dictionary uses weak references, no lock can guarantee you
            that no item has been released from the memory while computing the real count.
            </para>
            </remarks>
            <example>
            <code>
            lock (dictionary.SyncRoot)
            {
                int realCount = dictionary.GetRealCount();
            
                // The realCount corresponds to current dictionary's state only when weak references are NOT used
                // Otherwise, some entries might have been released from the memory regardless of the lock
            }
            </code>
            </example>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.GetInternalValue(`0)">
            <summary>
            Gets the value from the internal dictionary
            </summary>
            <param name="key">Object key</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.SetInternalValue(`0,System.Object)">
            <summary>
            Sets the value in the internal dictionary
            </summary>
            <param name="key">Object key</param>
            <param name="value">Object value</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value, returns true if the retrieval was successful.
            </summary>
            <param name="key">Value key</param>
            <param name="value">Returning value</param>
            <remarks>
            This operation does not require locking for concurrent access.
            </remarks>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Adds the value to the dictionary if it does not exist.
            Updates existing, if it does exist.
            </summary>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <example>
            If you want to add some key-value pair only if it does not exist within the dictionary, use the following
            snippet to do so in a thread-safe way.
            <code>
            if (!dictionary.ContainsKey(myKey))
            {
                lock (dictionary.SyncRoot)
                {
                    if (!dictionary.ContainsKey(myKey))
                    {
                        dictionary.Add(myKey, myValue);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.ContainsKey(System.Object)">
            <summary>
            Returns true if the dictionary contains the given key
            </summary>
            <param name="key">Key</param>
            <remarks>
            This operation does not require locking for concurrent access.
            </remarks>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.Contains(System.Object)">
            <summary>
            Returns true if the dictionary contains the given key
            </summary>
            <param name="key">Key</param>
            <remarks>
            This operation does not require locking for concurrent access.
            </remarks>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.ContainsValue(System.Object)">
            <summary>
            Returns true if the dictionary contains the given value
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.AddMultiple(System.String[],System.Boolean)">
            <summary>
            Adds multiple items with same value to the dictionary
            </summary>
            <param name="items">Items to add</param>
            <param name="value">Items value</param>
            /// <remarks>
            The operation is not performed in a critical section. If you want to make sure
            no other thread modifies the dictionary (e.g. adds/removes an item) while the dictionary
            is being filled with items, use the <see cref="P:CMS.Base.SafeDictionary`2.SyncRoot"/>.
            </remarks>
            <example>
            Use the following snippet to make sure no other thread modifies the dictionary while
            it is being populated by <paramref name="items"/>.
            <code>
            string[] items = GetItems(...);
            lock (dictionary.SyncRoot)
            {
                dictionary.AddMultiple(items, true);
            
                // All the items are set to true now
            }
            </code>
            
            The following approach is also thread-safe, but the result may differ from the previous one if another thread performs any write operation
            while the items are being added.
            <code>
            string[] items = GetItems(...);
            dictionary.AddMultiple(items, true);
            
            // Any other thread might have modified some entry (i.e. the items are not guaranteed to be set to true)
            </code>
            </example>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.Clear">
            <summary>
             Removes all elements from the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the System.Collections.Hashtable elements to a one-dimensional System.Array instance at the specified index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the System.Collections.DictionaryEntry objects copied from System.Collections.Hashtable. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <remarks>
            The <paramref name="array"/> has to be large enough to accommodate all the dictionary entries. Unless the dictionary has a fixed number of entries
            (or the entries count is limited somehow and the limit is a known number), you should perform the array allocation in a thread-safe way.
            </remarks>
            <example>
            Use the following code snippet to ensure the proper array size.
            <code>
            lock (dictionary.SyncRoot)
            {
                // The lock makes sure the entries count does not change between the array allocation and the copy operation
                // The GetArrayOfSize is only an illustrational method
                Array destinationArray = GetArrayOfSize(dictionary.Count);
                dictionary.CopyTo(destinationArray, 0);
            }
            </code>
            </example>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.Keys">
            <summary>
            Gets an Collection containing the keys in the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="P:CMS.Base.SafeDictionary`2.Values">
            <summary>
            Gets a Collection containing the values in the System.Collections.Hashtable.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the System.Collections.Hashtable.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Get XML schema
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads XML serialized data and fills the dictionary with them (the current dictionary content is cleared).
            </summary>
            <param name="reader">XML reader</param>
            <remarks>
            The operation is not performed in a critical section. If you want to make sure
            no other thread modifies the dictionary (e.g. adds/removes an item) while the dictionary
            is being filled with values from the XML, use the <see cref="P:CMS.Base.SafeDictionary`2.SyncRoot"/>.
            </remarks>
            <example>
            Use the following snippet to make sure no other thread modifies the dictionary while
            it is being populated from the XML.
            <code>
            XmlReader xmlReader = GetReader(...);
            lock (dictionary.SyncRoot)
            {
                dictionary.ReadXml(xmlReader);
            
                // The dictionary contains only entries from the XML
            }
            </code>
            
            The following approach is also thread-safe, but the result may differ from the previous one if another thread performs any write operation
            while the XML is being read.
            <code>
            XmlReader xmlReader = GetReader(...);
            dictionary.ReadXml(xmlReader);
            
            // Any other thread might have added or modified some entry from the XML, the dictionary's entries may differ from the XML content
            </code>
            </example>
        </member>
        <member name="M:CMS.Base.SafeDictionary`2.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            XML serialization method.
            </summary>
            <param name="writer">XML writer</param>
            <remarks>
            The operation writes a snapshot of the dictionary entries to XML.
            </remarks>
        </member>
        <member name="T:CMS.Base.SafeHashSet`1">
            <summary>
            Thread-safe variant of a generic hash set
            </summary>
            <remarks>Even for reference types, null is not supported value in the safe hash set.</remarks>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="comparer">Equality comparer</param>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="collection">Source collection</param>
            <param name="comparer">Equality comparer</param>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.Contains(`0)">
            <summary>
            Returns true if the hash set contains the given value
            </summary>
            <param name="item">Value to check</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.Add(`0)">
            <summary>
            Adds the item to the hash set
            </summary>
            <param name="item">Value to add</param>
            <returns>true if item added, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds the item to the hash set
            </summary>
            <param name="item">Value to add</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.Remove(`0)">
            <summary>
            Removes the value from the hash set
            </summary>
            <param name="item">Value to remove</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all elements in the specified collection from the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.
            </summary>
            <param name="other">The collection of items to remove from the <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:CMS.Base.SafeHashSet`1" /> object to contain only elements that are present in that object and in the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CMS.Base.SafeHashSet`1" /> object is a proper subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CMS.Base.SafeHashSet`1" /> object is a proper superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CMS.Base.SafeHashSet`1" /> object is a subset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CMS.Base.SafeHashSet`1" /> object is a superset of the specified collection.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the current <see cref="T:CMS.Base.SafeHashSet`1" /> object and a specified collection share common elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether a <see cref="T:CMS.Base.SafeHashSet`1" /> object and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:CMS.Base.SafeHashSet`1" /> object to contain only elements that are present either in that object or in the specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Modifies the current <see cref="T:CMS.Base.SafeHashSet`1" /> object to contain all elements that are present in itself, the specified collection, or both.
            </summary>
            <param name="other">The collection to merge into the current <see cref="T:CMS.Base.SafeHashSet`1" /> object.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="other" /> is null.</exception>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.Clear">
            <summary>
            Removes all elements from a <see cref="T:CMS.Base.SafeHashSet`1" /> object.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of a <see cref="T:CMS.Base.SafeHashSet`1" /> object to an array, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:CMS.Base.SafeHashSet`1" /> object. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="arrayIndex" /> is less than the lower bound of <paramref name="array" />.</exception>
            <exception cref="T:System.ArgumentException">If the number of elements in set is greater than the available number of elements from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="P:CMS.Base.SafeHashSet`1.Count">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
        </member>
        <member name="P:CMS.Base.SafeHashSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether a collection is read-only.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeHashSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="T:CMS.Base.StringSafeDictionary`1">
            <summary>
            Safe dictionary indexed by string
            </summary>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="d">Source data dictionary</param>
            <param name="comparer">Equality comparer for items</param>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.#ctor(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="d">Source data dictionary</param>
            <param name="caseSensitive">If true, the access to the dictionary is case sensitive</param>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.#ctor">
            <summary>
            Default constructor, creates case insensitive dictionary
            </summary>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="caseSensitive">If true, the access to the dictionary is case sensitive</param>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization constructor.
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.GetComparer(System.Boolean)">
            <summary>
            Gets the comparer for the dictionary
            </summary>
            <param name="caseSensitive">If true, the access to the dictionary is case sensitive</param>
        </member>
        <member name="M:CMS.Base.StringSafeDictionary`1.Clone">
            <summary>
            Clones the dictionary
            </summary>
        </member>
        <member name="T:CMS.Base.TwoLevelDictionary`3">
            <summary>
            Dictionary with two levels of hierarchy
            </summary>
        </member>
        <member name="F:CMS.Base.TwoLevelDictionary`3.mDictionary">
            <summary>
            Inner dictionary of dictionaries
            </summary>
        </member>
        <member name="P:CMS.Base.TwoLevelDictionary`3.Dictionary">
            <summary>
            Inner dictionary of dictionaries
            </summary>
        </member>
        <member name="P:CMS.Base.TwoLevelDictionary`3.Item(`0)">
            <summary>
            Gets the second level of dictionary based on the given key
            </summary>
            <param name="primaryKey">Primary key</param>
        </member>
        <member name="P:CMS.Base.TwoLevelDictionary`3.CaseInsensitive">
            <summary>
            If true, the dictionary handles string keys as case insensitive
            </summary>
        </member>
        <member name="P:CMS.Base.TwoLevelDictionary`3.Item(`0,`1)">
            <summary>
            Gets or sets the dictionary value
            </summary>
            <param name="primaryKey">Primary key</param>
            <param name="secondaryKey">Secondary key</param>
        </member>
        <member name="M:CMS.Base.TwoLevelDictionary`3.NewDictionary``2">
            <summary>
            Creates a new internal dictionary
            </summary>
        </member>
        <member name="M:CMS.Base.TwoLevelDictionary`3.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.TwoLevelDictionary`3.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="caseSensitive">If true, the dictionary is case sensitive</param>
        </member>
        <member name="M:CMS.Base.TwoLevelDictionary`3.GetInnerPrimaryKey(`0)">
            <summary>
            Converts the primary key to its inner representation
            </summary>
            <param name="key">Primary key</param>
        </member>
        <member name="M:CMS.Base.TwoLevelDictionary`3.HandleCaseSensitivity``1(``0)">
            <summary>
            Handles the case sensitivity settings for the given key
            </summary>
            <param name="key">Key to handle</param>
        </member>
        <member name="M:CMS.Base.TwoLevelDictionary`3.Clear">
            <summary>
            Clears the dictionary
            </summary>
        </member>
        <member name="T:CMS.Base.CMSExtensibilitySection">
            <summary>
            Extensibility section for the web.config.
            </summary> 
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.Section">
            <summary>
            Configuration section.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.Providers">
            <summary>
            Providers.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.Helpers">
            <summary>
            Helpers.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.Managers">
            <summary>
            Managers.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.LoadProvider``1">
            <summary>
            Loads the provider object.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.LoadProviderType(System.Type)">
            <summary>
            Loads provider type for <paramref name="providerType"/> from application configuration file.
            If the application configuration file does not specify any provider for <paramref name="providerType"/>,
            the passed <paramref name="providerType"/> is returned.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.LoadHelper``1">
            <summary>
            Loads the helper object.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.ChangeManagerType``1(System.Type)">
            <summary>
            Changes the default manager type to the given type
            </summary>
            <param name="newType">New manager type</param>
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.LoadManager``1">
            <summary>
            Loads the manager object. Returns given default instance if manager not present in Section.Managers.
            </summary>
        </member>
        <member name="T:CMS.Base.CMSExtensibilitySection.ExtensibilityCollection">
            <summary>
            Extensibility collection for classes registration.
            </summary> 
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.ExtensibilityCollection.CreateNewElement">
            <summary>
            Gets the new configuration element instance.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSExtensibilitySection.ExtensibilityCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">Element to analyze</param>
        </member>
        <member name="T:CMS.Base.CMSExtensibilitySection.ExtensibilityElement">
            <summary>
            Extensibility element for class registration.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.ExtensibilityElement.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.ExtensibilityElement.Assembly">
            <summary>
            Assembly.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSExtensibilitySection.ExtensibilityElement.Type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="T:CMS.Base.AppSettingsService">
            <summary>
            AppSettings service
            </summary>
        </member>
        <member name="P:CMS.Base.AppSettingsService.Item(System.String)">
            <summary>
            Gets the specific settings from the application configuration file or from a memory.
            Sets a specific settings with a value into a memory.
            </summary>
        </member>
        <member name="T:CMS.Base.CMSAppSettings">
            <summary>
            App settings.
            </summary>
        </member>
        <member name="F:CMS.Base.CMSAppSettings.SingletonLock">
            <summary>
            Lock object used for singleton
            </summary>
        </member>
        <member name="T:CMS.Base.CMSAppSettings.GetAppSettingsEventHandler">
            <summary>
            Delegate for event for reading application's settings.
            </summary>
        </member>
        <member name="E:CMS.Base.CMSAppSettings.GetApplicationSettings">
            <summary>
            Event which is raised when external application wants to read application settings.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSAppSettings.Settings">
            <summary>
            Settings dictionary.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSAppSettings.Item(System.String)">
            <summary>
            Settings key indexer.
            </summary>
            <param name="key">Settings key</param>
        </member>
        <member name="M:CMS.Base.CMSAppSettings.GetFromSettingsWithLocalizedValues(System.String)">
            <summary>
            Gets the key from settings with support for localized values. Values can be localized based on machine name and virtual directory (application path).
            
            Examples of .config key names:
            
            [Machine1]/VirtualDirectory1:CMSWebFarmEnabled
            [Machine1]CMSWebFarmEnabled
            /VirtualDirectory2:CMSWebFarmEnabled
            CMSWebFarmEnabled
            </summary>
            <param name="key">Setting key.</param>
        </member>
        <member name="M:CMS.Base.CMSAppSettings.EnsureExplicitSettings">
            <summary>
            Ensures the collection of explicit settings
            </summary>
        </member>
        <member name="M:CMS.Base.CMSAppSettings.RaiseGetSettings(System.String)">
            <summary>
            Returns application settings from Azure service configuration file.
            </summary>
            <param name="key">Setting key</param>
        </member>
        <member name="M:CMS.Base.CMSAppSettings.Clear">
            <summary>
            Clear settings.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSAppSettings.GetFromSettings(System.String[])">
            <summary>
            Attempts to get the settings key value using the given list of keys.
            </summary>
            <param name="keys">List of keys to search</param>
        </member>
        <member name="M:CMS.Base.CMSAppSettings.GetFromSettings(System.String)">
            <summary>
            Gets the settings key from the settings
            </summary>
            <param name="key">Key name</param>
        </member>
        <member name="T:CMS.Base.CMSConnectionStrings">
            <summary>
            Connection strings
            </summary>
        </member>
        <member name="F:CMS.Base.CMSConnectionStrings.ConnectionStringNames">
            <summary>
            Connection string names by their values
            </summary>
        </member>
        <member name="F:CMS.Base.CMSConnectionStrings.mExplicitSettings">
            <summary>
            Explicitly set connection strings
            </summary>
        </member>
        <member name="F:CMS.Base.CMSConnectionStrings.mSettings">
            <summary>
            Connection strings dictionary.
            </summary>
        </member>
        <member name="T:CMS.Base.CMSConnectionStrings.GetConnectionStringEventHandler">
            <summary>
            Delegate for event for reading application's connection strings.
            </summary>
        </member>
        <member name="E:CMS.Base.CMSConnectionStrings.GetConnectionString">
            <summary>
            Event which is thrown when external application wants to read application connection strings.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSConnectionStrings.Settings">
            <summary>
            Connection strings dictionary.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSConnectionStrings.Count">
            <summary>
            Gets number of connection strings.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSConnectionStrings.Item(System.String)">
            <summary>
            Connection strings indexer.
            </summary>
            <param name="key">Settings key</param>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.EnsureExplicitSettings">
            <summary>
            Ensures the collection of explicit settings
            </summary>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.RaiseGetConnectionString(System.String)">
            <summary>
            Returns application connection string from external source
            </summary>
            <param name="key">Setting key</param>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.Clear">
            <summary>
            Clear connection strings table
            </summary>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.GetItem(System.String)">
            <summary>
            Returns item by key.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.GetFromSettings(System.String[])">
            <summary>
            Attempts to get the connection string using the given list of keys.
            </summary>
            <param name="keys">List of keys to search</param>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.GetFromSettings(System.String)">
            <summary>
            Attempts to get a connection string directly from settings
            </summary>
            <param name="key">Connection string key</param>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.GetConnectionStringName(System.String)">
            <summary>
            Gets the connection string name by its value
            </summary>
            <param name="connectionString">Connection string value</param>
        </member>
        <member name="M:CMS.Base.CMSConnectionStrings.SetConnectionString(System.String,System.String)">
            <summary>
            Sets the specific connection string to a new value
            </summary>
            <param name="name">Connection string name</param>
            <param name="connectionString">Connection string value</param>
        </member>
        <member name="T:CMS.Base.ConnectionStringService">
            <summary>
            ConnectionStrings service
            </summary>
        </member>
        <member name="P:CMS.Base.ConnectionStringService.DefaultConnectionString">
            <summary>
            Default connection string
            </summary>
        </member>
        <member name="P:CMS.Base.ConnectionStringService.Item(System.String)">
            <summary>
            Gets the specific connection string from the app config
            </summary>
        </member>
        <member name="T:CMS.Base.SettingsHelper">
            <summary>
            Settings helper.
            </summary>
        </member>
        <member name="P:CMS.Base.SettingsHelper.AllowLocalConfigKeys">
            <summary>
            If true, local configuration keys are allowed within the application
            </summary>
        </member>
        <member name="P:CMS.Base.SettingsHelper.AppSettings">
            <summary>
            AppSettings collection.
            </summary>
        </member>
        <member name="P:CMS.Base.SettingsHelper.ConnectionStrings">
            <summary>
            ConnectionStrings collection.
            </summary>
        </member>
        <member name="P:CMS.Base.SettingsHelper.ApplicationConfiguration">
            <summary>
            Application configuration.
            </summary>
        </member>
        <member name="M:CMS.Base.SettingsHelper.OpenConfiguration(System.String)">
            <summary>
            Opens the application configuration from application at the given path
            </summary>
            <param name="appPath">Application path</param>
        </member>
        <member name="M:CMS.Base.SettingsHelper.SetConfigValue(System.String,System.String)">
            <summary>
            Sets or adds the specified key to the AppSettings section for web application.
            </summary>
            <param name="key">Settings key</param>
            <param name="value">Settings value</param>
        </member>
        <member name="M:CMS.Base.SettingsHelper.RemoveConfigValue(System.String)">
            <summary>
            Remove the specified key from the AppSettings section for web application.
            </summary>
            <param name="key">Settings key</param>
        </member>
        <member name="M:CMS.Base.SettingsHelper.SetConnectionString(System.String,System.String)">
            <summary>
            Sets or adds the specified connection string in the ConnectionStrings section for web application.
            </summary>
            <param name="name">ConnectionString name</param>
            <param name="connectionString">Connection string</param>
        </member>
        <member name="M:CMS.Base.SettingsHelper.RemoveConnectionString(System.String)">
            <summary>
            Removes connection string from web.config.
            </summary>
            <param name="name">Name of the connection string</param>
            <returns>Returns true if removing was successful</returns>
        </member>
        <member name="P:CMS.Base.SettingsHelper.AllowUpdateTimeStamps">
            <summary>
            If true, time stamp update of the objects is allowed.
            </summary>
        </member>
        <member name="T:CMS.Base.AggregatedDataContainer">
            <summary>
            Aggregated data container which joins the Column names from all data sources
            </summary>
        </member>
        <member name="F:CMS.Base.AggregatedDataContainer.mContainers">
            <summary>
            List of containers
            </summary>
        </member>
        <member name="F:CMS.Base.AggregatedDataContainer.mColumnNames">
            <summary>
            List of column names
            </summary>
        </member>
        <member name="M:CMS.Base.AggregatedDataContainer.#ctor(CMS.Base.IDataContainer[])">
            <summary>
            Constructor
            </summary>
            <param name="sources">Sources of data</param>
        </member>
        <member name="P:CMS.Base.AggregatedDataContainer.ColumnNames">
            <summary>
            Column names
            </summary>
        </member>
        <member name="M:CMS.Base.AggregatedDataContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.AggregatedDataContainer.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="T:CMS.Base.DataContainer">
            <summary>
            Case insensitive data container class.
            </summary>
        </member>
        <member name="F:CMS.Base.DataContainer.mHashtable">
            <summary>
            Hashtable for storing values.
            </summary>
        </member>
        <member name="P:CMS.Base.DataContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="P:CMS.Base.DataContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataContainer.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataContainer.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="M:CMS.Base.DataContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="T:CMS.Base.DataRecordContainer">
            <summary>
            Adapts the <see cref="T:System.Data.IDataRecord"/> interface to <see cref="T:CMS.Base.IDataContainer"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.DataRecordContainer.IsFromCmsDatabase">
            <summary>
            Returns true if the given data does not contain any external data (data not from CMS database).
            </summary>
        </member>
        <member name="P:CMS.Base.DataRecordContainer.Item(System.String)">
            <summary>
            Gets or sets the value of a column identified by its name.
            </summary>
            <param name="columnName">Name of column whose value to get or set.</param>
            <returns>Returns the value of the column.</returns>
            <remarks>
            The <see cref="T:CMS.Base.DataRecordContainer"/> does not support setting of column values. Calling this property setter always throws <see cref="T:System.NotSupportedException"/>.
            </remarks>
        </member>
        <member name="P:CMS.Base.DataRecordContainer.ColumnNames">
            <summary>
            Gets a list of all column names.
            </summary>
        </member>
        <member name="M:CMS.Base.DataRecordContainer.#ctor(System.Data.IDataRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.DataRecordContainer"/> class using the <paramref name="dataRecord"/> provided.
            </summary>
            <param name="dataRecord">Data record to initialize the container with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="dataRecord"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="dataRecord"/> contains duplicate column names.</exception>
        </member>
        <member name="M:CMS.Base.DataRecordContainer.ContainsColumn(System.String)">
            <summary>
            Gets a value indicating whether the record container contains the specified column.
            </summary>
            <param name="columnName">Name of column whose presence to test.</param>
            <returns>Returns true if <paramref name="columnName"/> is contained in the record container, otherwise returns false.</returns>
        </member>
        <member name="M:CMS.Base.DataRecordContainer.GetValue(System.String)">
            <summary>
            Gets the value of a column identified by its name, if the column exists within this record container.
            </summary>
            <param name="columnName">Name of column whose value to get.</param>
            <returns>Returns the value of the column, if the column exists. Otherwise returns null.</returns>
        </member>
        <member name="M:CMS.Base.DataRecordContainer.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of a column identified by its name, if the column exists within this record container.
            </summary>
            <param name="columnName">Name of column whose value to set.</param>
            <param name="value">The value to be set.</param>
            <returns>Returns true if the <paramref name="columnName"/> was set, returns false if <paramref name="columnName"/> does not exist within the record container.</returns>
            <remarks>
            The <see cref="T:CMS.Base.DataRecordContainer"/> does not support setting of column values. Calling this method always throws <see cref="T:System.NotSupportedException"/>.
            </remarks>
        </member>
        <member name="M:CMS.Base.DataRecordContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to retrieve the value of a column identified by its name. The returned value indicates whether the <paramref name="columnName"/> exists within this record container.
            </summary>
            <param name="columnName">Name of column whose value to get.</param>
            <param name="value">The value of the column, if the column exists. Otherwise null.</param>
            <returns>Returns true if <paramref name="columnName"/> is contained in the record container, otherwise returns false.</returns>
        </member>
        <member name="T:CMS.Base.DataRowContainer">
            <summary>
            Object encapsulating DataRow objects to be accessible via macro engine.
            </summary>
        </member>
        <member name="P:CMS.Base.DataRowContainer.DataRow">
            <summary>
            Gets the encapsulated DataRow.
            </summary>
        </member>
        <member name="P:CMS.Base.DataRowContainer.AddTableProperty">
            <summary>
            If true, Table property of DataRow will be included in the supported columns of this container.
            </summary>
        </member>
        <member name="M:CMS.Base.DataRowContainer.#ctor(System.Data.DataRow)">
            <summary>
            Creates new instance of DataRowContainer.
            </summary>
            <param name="dr">DataRow object to be encapsulated</param>
        </member>
        <member name="M:CMS.Base.DataRowContainer.#ctor(System.Data.DataRowView)">
            <summary>
            Creates new instance of DataRowContainer from DataRowView.
            </summary>
            <param name="dr">DataRowView to be encapsulated</param>
        </member>
        <member name="P:CMS.Base.DataRowContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataRowContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataRowContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.Base.DataRowContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Base.DataRowContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.DataRowContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Base.DataSetContainer">
            <summary>
            Object encapsulating DataSet objects to be accessible via macro engine.
            </summary>
        </member>
        <member name="P:CMS.Base.DataSetContainer.DataSet">
            <summary>
            Gets the encapsulated DataSet.
            </summary>
        </member>
        <member name="M:CMS.Base.DataSetContainer.#ctor(System.Data.DataSet)">
            <summary>
            Creates new instance of DataSetContainer.
            </summary>
            <param name="ds">DataSet object to be encapsulated</param>
        </member>
        <member name="P:CMS.Base.DataSetContainer.Item(System.String)">
            <summary>
            Gets the value of the column, setter is not implemented.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataSetContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataSetContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.Base.DataSetContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Base.DataSetContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.DataSetContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Base.DataTableContainer">
            <summary>
            Object encapsulating DataTable objects to be accessible via macro engine.
            </summary>
        </member>
        <member name="P:CMS.Base.DataTableContainer.DataTable">
            <summary>
            Gets the encapsulated DataTable.
            </summary>
        </member>
        <member name="M:CMS.Base.DataTableContainer.#ctor(System.Data.DataTable)">
            <summary>
            Creates new instance of DataTableContainer.
            </summary>
            <param name="dt">DataTable object to be encapsulated</param>
        </member>
        <member name="P:CMS.Base.DataTableContainer.Item(System.String)">
            <summary>
            Gets the value of the column, setter is not implemented.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataTableContainer.GetValue(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.DataTableContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.Base.DataTableContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Base.DataTableContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.DataTableContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Base.EnumDataContainer">
            <summary>
            Provides wrapper for any Enum object for usage in the macro engine. Uses reflection to extract fields of the enum.
            </summary>
        </member>
        <member name="F:CMS.Base.EnumDataContainer.mEnumType">
            <summary>
            Type of the enum.
            </summary>
        </member>
        <member name="F:CMS.Base.EnumDataContainer.mColumnNames">
            <summary>
            Column names (enum items).
            </summary>
        </member>
        <member name="P:CMS.Base.EnumDataContainer.EnumType">
            <summary>
            Element type.
            </summary>
        </member>
        <member name="M:CMS.Base.EnumDataContainer.#ctor(System.Type)">
            <summary>
            Creates new instance of enum container.
            </summary>
            <param name="enumType">Type of the enum</param>
        </member>
        <member name="P:CMS.Base.EnumDataContainer.Item(System.String)">
            <summary>
            Returns the value of given enumeration item.
            </summary>
            <param name="columnName">Name of the enumeration item</param>
        </member>
        <member name="M:CMS.Base.EnumDataContainer.GetValue(System.String)">
            <summary>
            Returns the value of given enumeration item.
            </summary>
            <param name="columnName">Enumeration item name</param>
        </member>
        <member name="M:CMS.Base.EnumDataContainer.SetValue(System.String,System.Object)">
            <summary>
            Not implemented, throws an exception.
            </summary>
            <param name="columnName">Not supported</param>
            <param name="value">Not supported</param>
        </member>
        <member name="P:CMS.Base.EnumDataContainer.ColumnNames">
            <summary>
            Returns list of enumeration items.
            </summary>
        </member>
        <member name="M:CMS.Base.EnumDataContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns the value of given enumeration item.
            </summary>
            <param name="columnName">Name of the item</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.Base.EnumDataContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if given name is within the enumeration items.
            </summary>
            <param name="columnName">Name of the item</param>
        </member>
        <member name="T:CMS.Base.EnumerableDataContainer`1">
            <summary>
            Provides wrapper for any list for usage in the macro engine. 
            </summary>
        </member>
        <member name="F:CMS.Base.EnumerableDataContainer`1.mItems">
            <summary>
            Items
            </summary>
        </member>
        <member name="F:CMS.Base.EnumerableDataContainer`1.mItemsByString">
            <summary>
            Items collection by name
            </summary>
        </member>
        <member name="F:CMS.Base.EnumerableDataContainer`1.mColumnNames">
            <summary>
            List of available column names
            </summary>
        </member>
        <member name="P:CMS.Base.EnumerableDataContainer`1.ItemsByString">
            <summary>
            Items collection by name
            </summary>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates new instance from the given list
            </summary>
            <param name="items">Items to build data container</param>
        </member>
        <member name="P:CMS.Base.EnumerableDataContainer`1.Item(System.String)">
            <summary>
            Returns the value of given enumeration item.
            </summary>
            <param name="columnName">Name of the enumeration item</param>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.GetValue(System.String)">
            <summary>
            Returns the value of given enumeration item.
            </summary>
            <param name="columnName">Enumeration item name</param>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.SetValue(System.String,System.Object)">
            <summary>
            Not implemented, throws an exception.
            </summary>
            <param name="columnName">Not supported</param>
            <param name="value">Not supported</param>
        </member>
        <member name="P:CMS.Base.EnumerableDataContainer`1.ColumnNames">
            <summary>
            Returns list of enumeration items.
            </summary>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns the value of given enumeration item.
            </summary>
            <param name="columnName">Name of the item</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.ContainsColumn(System.String)">
            <summary>
            Returns true if given name is within the enumeration items.
            </summary>
            <param name="columnName">Name of the item</param>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.GetEnumerator">
            <summary>
            Gets the enumerator of internal items
            </summary>
        </member>
        <member name="M:CMS.Base.EnumerableDataContainer`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of internal items
            </summary>
        </member>
        <member name="T:CMS.Base.GroupedDataSource">
            <summary>
            Class providing DataSource grouping - one pass DataSource grouping.
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedDataSource.DataSource">
            <summary>
            Data source.
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedDataSource.ColumnName">
            <summary>
            Column name for grouping.
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedDataSource.LevelColumnName">
            <summary>
            Column name for level value.
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedDataSource.TopItem">
            <summary>
            Gets the first available item.
            </summary>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.#ctor(System.Object,System.String)">
            <summary>
            Constructor, initializes the GroupedDataSource.
            </summary>
            <param name="dataSource">Data source</param>
            <param name="columnName">Column name to use for item grouping</param>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.#ctor(System.Object,System.String,System.String)">
            <summary>
            Constructor, initializes the GroupedDataSource.
            </summary>
            <param name="dataSource">Data source</param>
            <param name="columnName">Column name to use for item grouping</param>
            <param name="levelColumnName">Column name to use for level item</param>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.LoadGroups">
            <summary>
            Loads the data groups.
            </summary>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.AddDataRow(System.Collections.Generic.IDictionary{System.Object,System.Collections.Generic.List{System.Data.DataRowView}},System.Data.DataRowView)">
            <summary>
            Adds the item to the group table.
            </summary>
            <param name="groupTable">Group table</param>
            <param name="dr">DataRowView to add</param>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.EnsureList(System.Collections.Generic.IDictionary{System.Object,System.Collections.Generic.List{System.Data.DataRowView}},System.Object)">
            <summary>
            Ensures the list with specified key value.
            </summary>
            <param name="groupTable">Group table</param>
            <param name="key">List key</param>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.GetItems(System.Object)">
            <summary>
            Gets the children based on the given key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.GetGroupView(System.Object)">
            <summary>
            Returns the array list of items from specified group, type of the item depends on the DataSource
            DataSet, DataView, DataTable -> DataRowView
            </summary>
            <param name="itemValue">Key item value</param>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.GetGroup(System.Object)">
            <summary>
            Returns the array list of items from specified group, type of the item depends on the DataSource
            DataSet, DataView, DataTable -> DataRow
            </summary>
            <param name="itemValue">Key item value</param>
            <remarks>This method is slower than GetGroupView and creates a copy of the group</remarks>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.GetGroupDataTable(System.Object)">
            <summary>
            Returns the item group as an DataTable.
            </summary>
            <param name="itemValue">Item value</param>
            <remarks>This method is slower than GetGroupView and creates a copy of the group</remarks>
        </member>
        <member name="M:CMS.Base.GroupedDataSource.GetEnumerator">
            <summary>
            Returns grouped datasource enumerator.
            </summary>
        </member>
        <member name="T:CMS.Base.GroupedEnumerable`1">
            <summary>
            Class providing enumerable grouping - one pass enumerable grouping.
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedEnumerable`1.Items">
            <summary>
            Data source.
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedEnumerable`1.GetItemKey">
            <summary>
            Lambda to evaluate the key of the item
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedEnumerable`1.GetItemLevel">
            <summary>
            Lambda to evaluate the level of the item
            </summary>
        </member>
        <member name="P:CMS.Base.GroupedEnumerable`1.TopItem">
            <summary>
            Gets the first available item.
            </summary>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Object},System.Func{`0,System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="data">Data</param>
            <param name="getItemKey">Lambda to evaluate the key of the item</param>
            <param name="getItemLevel">Lambda to evaluate the level of the item</param>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.LoadGroups">
            <summary>
            Loads the data groups.
            </summary>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.AddItem(System.Collections.Generic.IDictionary{System.Object,System.Collections.Generic.List{`0}},`0)">
            <summary>
            Adds the item to the group table.
            </summary>
            <param name="groupTable">Table containing the groups</param>
            <param name="item">Item to add</param>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.EnsureList(System.Collections.Generic.IDictionary{System.Object,System.Collections.Generic.List{`0}},System.Object)">
            <summary>
            Ensures the list with specified key value.
            </summary>
            <param name="groupTable">Group table</param>
            <param name="key">List key</param>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.GetItems(System.Object)">
            <summary>
            Gets the children based on the given key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.GetGroupView(System.Object)">
            <summary>
            Returns the array list of items from specified group, type of the item depends on the DataSource
            DataSet, DataView, DataTable -> DataRowView
            </summary>
            <param name="itemValue">Key item value</param>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.GetGroup(System.Object)">
            <summary>
            Returns the array list of items from specified group, type of the item depends on the DataSource
            DataSet, DataView, DataTable -> DataRow
            </summary>
            <param name="itemValue">Key item value</param>
            <remarks>This method is slower than GetGroupView and creates a copy of the group</remarks>
        </member>
        <member name="M:CMS.Base.GroupedEnumerable`1.GetEnumerator">
            <summary>
            Returns grouped datasource enumerator.
            </summary>
        </member>
        <member name="T:CMS.Base.ObjectContainer">
            <summary>
            Object container for the Hashtable records.
            </summary>
        </member>
        <member name="F:CMS.Base.ObjectContainer.mValue">
            <summary>
            Stored object.
            </summary>
        </member>
        <member name="F:CMS.Base.ObjectContainer.mLastModified">
            <summary>
            Time when the object was modified the last time.
            </summary>
        </member>
        <member name="F:CMS.Base.ObjectContainer.mKey">
            <summary>
            Object key.
            </summary>
        </member>
        <member name="P:CMS.Base.ObjectContainer.LastModified">
            <summary>
            Gets the time when the object was last modified.
            </summary>
        </member>
        <member name="P:CMS.Base.ObjectContainer.Value">
            <summary>
            Gets / sets the object value
            </summary>
        </member>
        <member name="M:CMS.Base.ObjectContainer.#ctor(System.Object,System.Object)">
            <summary>
            Object container.
            </summary>
            <param name="key">Object key</param>
            <param name="value">Object value</param>
        </member>
        <member name="T:CMS.Base.AbstractPropertyAttribute">
            <summary>
            Defines a column registered within the object
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractPropertyAttribute.Name">
            <summary>
            Property name, if not set, the original property name is used
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractPropertyAttribute.Hidden">
            <summary>
            If true, the property is hidden from listing
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractPropertyAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractPropertyAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Property name, if not set, the original property name is used</param>
        </member>
        <member name="T:CMS.Base.PropertySettings`1">
            <summary>
            Settings object for general properties registering in BaseGenericInfo.
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mParameter">
            <summary>
            Parameter passed to the parametrized.
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mPropertyFunction">
            <summary>
            Property getter without parameters.
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mPropertySetFunction">
            <summary>
            Property setter without parameters
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mParametrizedFunction">
            <summary>
            Property getter with one parameter.
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mParametrizedSetFunction">
            <summary>
            Property setter with one parameter
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mPropertyType">
            <summary>
            Property type
            </summary>
        </member>
        <member name="F:CMS.Base.PropertySettings`1.mEmptyObject">
            <summary>
            Empty object
            </summary>
        </member>
        <member name="P:CMS.Base.PropertySettings`1.EmptyObject">
            <summary>
            Empty object of the given type
            </summary>
        </member>
        <member name="P:CMS.Base.PropertySettings`1.EmptyObjectFactory">
            <summary>
            Object factory that provides an empty object to properly determine dynamic type
            </summary>
        </member>
        <member name="P:CMS.Base.PropertySettings`1.PropertyType">
            <summary>
            Property type
            </summary>
        </member>
        <member name="P:CMS.Base.PropertySettings`1.Hidden">
            <summary>
            If true, this property is hidden (doesn't report in properties list)
            </summary>
        </member>
        <member name="M:CMS.Base.PropertySettings`1.#ctor(System.String,System.Func{`0,System.Object},System.Action{`0,System.Object},System.Type)">
            <summary>
            Creates new instance of property
            </summary>
            <param name="name">Property name</param>
            <param name="lambdaExpr">Lamda expression for the getter of the property</param>
            <param name="setLambdaExpr">Lamda expression for the setter of the property</param>
            <param name="propertyType">Property type</param>
        </member>
        <member name="M:CMS.Base.PropertySettings`1.#ctor(System.String,System.Func{`0,System.Object,System.Object},System.Action{`0,System.Object,System.Object},System.Object,System.Type)">
            <summary>
            Creates new instance of parametrized property with a setter
            </summary>
            <param name="name">Property name</param>
            <param name="lambdaExpr">Lamda expression for the getter of the property (object, parameter) => return value</param>
            <param name="setLambdaExpr">Lamda expression for the setter of the property (object, parameter, value) => set</param>
            <param name="parameter">Parameter to pass to the lambda functions</param>
            <param name="propertyType">Property type</param>
        </member>
        <member name="M:CMS.Base.PropertySettings`1.HasSetter">
            <summary>
            Returns true if given property has a setter
            </summary>
        </member>
        <member name="M:CMS.Base.PropertySettings`1.Set(`0,System.Object)">
            <summary>
            Evaluates the property.
            </summary>
            <param name="info">Info object to evaluate the lambda expression on</param>
            <param name="newValue">New value to set to the property</param>
        </member>
        <member name="M:CMS.Base.PropertySettings`1.Evaluate(`0)">
            <summary>
            Evaluates the property.
            </summary>
            <param name="info">Info object to evaluate the lambda expression on</param>
        </member>
        <member name="M:CMS.Base.PropertySettings`1.SetEmptyObject(System.Object)">
            <summary>
            Sets the empty object to the factory
            </summary>
        </member>
        <member name="T:CMS.Base.RegisteredProperties`1">
            <summary>
            Container for the property registration
            </summary>
        </member>
        <member name="F:CMS.Base.RegisteredProperties`1.mPropertyFunctions">
            <summary>
            Collection of the properties registered by the lambda function.
            </summary>
        </member>
        <member name="F:CMS.Base.RegisteredProperties`1.mRegisteredProperties">
            <summary>
            List of registered properties
            </summary>
        </member>
        <member name="F:CMS.Base.RegisteredProperties`1.mPropertiesRegistered">
            <summary>
            If true, the properties of this type were already registered
            </summary>
        </member>
        <member name="T:CMS.Base.RegisteredProperties`1.RegistrationCallbackHandler">
            <summary>
            Registration callback handler
            </summary>
        </member>
        <member name="F:CMS.Base.RegisteredProperties`1.mRegistrationCallback">
            <summary>
            Registration callback method
            </summary>
        </member>
        <member name="F:CMS.Base.RegisteredProperties`1.PROPERTY_FLAGS">
            <summary>
            Flags to identify the properties to register
            </summary>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.AddProperty(System.String)">
            <summary>
            Adds the property name to the collection of registered properties (Ensures locking for thread safety)
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.RemoveProperty(System.String)">
            <summary>
            Removes the property name to the collection of registered properties (Ensures locking for thread safety)
            </summary>
            <param name="propertyName">Property name</param>
            <returns>Returns true if property name was successfully removed, otherwise false</returns>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.#ctor(CMS.Base.RegisteredProperties{`0}.RegistrationCallbackHandler)">
            <summary>
            Constructor
            </summary>
            <param name="registrationCallback">Callback method called when the request for registering of the properties is made</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.GetRegisteredProperties">
            <summary>
            Gets list of registered properties.
            </summary>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.GetPropertyType(System.String)">
            <summary>
            Gets the type of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.GetPropertyEmptyObject(System.String)">
            <summary>
            Gets the empty object of the given property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.Contains(System.String)">
            <summary>
            Returns true if given property is already registered.
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.Evaluate(`0,System.String,System.Object@)">
            <summary>
            Evaluates the particular property
            </summary>
            <param name="obj">Calling object</param>
            <param name="columnName">Column name</param>
            <param name="value">Returning the property value</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.Set(`0,System.String,System.Object)">
            <summary>
            Evaluates the particular property
            </summary>
            <param name="obj">Calling object</param>
            <param name="columnName">Column name</param>
            <param name="value">Returning the property value</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.HasSetter(System.String)">
            <summary>
            Returns true if given property has a setter
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.Add``1(System.String,System.Object,System.Func{`0,System.Object,System.Object},System.Action{`0,System.Object,System.Object})">
            <summary>
            Registers the given parametrized property to the object.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="parameter">Parameter for the lambda expression</param>
            <param name="lambdaExpr">Lambda expression for the getter of the property (object, parameter) => return value</param>
            <param name="setLambdaExpr">Lambda expression for the setter of the property (object, parameter, value) => set</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.Add``1(System.String,System.Func{`0,System.Object},System.Action{`0,System.Object})">
            <summary>
            Registers the given property to the object
            </summary>
            <param name="propertyName">Property name</param>
            <param name="lambdaExpr">Lambda expression for the getter of the property (object) => return value</param>
            <param name="setLambdaExpr">Lambda expression for the setter of the property (object, value) => set</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.Hide(System.String)">
            <summary>
            Hides the given property from the property list
            </summary>
            <param name="propertyName">Property name</param>
            <exception cref="T:System.Exception">Thrown when property is not registered and therefore cannot be hidden.</exception>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.CollectProperties(System.Type)">
            <summary>
            Collects the marked properties from the given object
            </summary>
            <param name="type">Type for which collect the properties</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.CollectColumns(System.Type)">
            <summary>
            Collects the marked properties from the given object
            </summary>
            <param name="type">Type for which collect the properties</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.RegisterProperty(System.Reflection.PropertyInfo,System.String,System.Boolean)">
            <summary>
            Registers the given property
            </summary>
            <param name="propertyInfo">Property info</param>
            <param name="name">Property name</param>
            <param name="hidden">If true, the property is registered as hidden</param>
        </member>
        <member name="M:CMS.Base.RegisteredProperties`1.RegisterField(System.Reflection.FieldInfo,System.String,System.Boolean)">
            <summary>
            Registers the given property
            </summary>
            <param name="fieldInfo">Field info</param>
            <param name="name">Field name</param>
            <param name="hidden">If true, the field is registered as hidden</param>
        </member>
        <member name="T:CMS.Base.SafeDictionaryContainer`1">
            <summary>
            Container to wrap the StringSafeDictionary structure
            </summary>
        </member>
        <member name="F:CMS.Base.SafeDictionaryContainer`1.mInnerDictionary">
            <summary>
            Wrapped dictionary
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionaryContainer`1.#ctor(CMS.Base.StringSafeDictionary{`0})">
            <summary>
            Constructor
            </summary>
            <param name="dictionary">Wrapped dictionary</param>
        </member>
        <member name="P:CMS.Base.SafeDictionaryContainer`1.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.SafeDictionaryContainer`1.GetValue(System.String)">
            <summary>
            Gets the value from QueryString.
            </summary>
            <param name="key">QueryString key</param>
        </member>
        <member name="M:CMS.Base.SafeDictionaryContainer`1.SetValue(System.String,System.Object)">
            <summary>
            Not implemented.
            </summary>
            <param name="key">QueryString key</param>
            <param name="value">New value</param>
        </member>
        <member name="P:CMS.Base.SafeDictionaryContainer`1.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Base.SafeDictionaryContainer`1.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.SafeDictionaryContainer`1.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Base.AbstractContext`1">
            <summary>
            Base context object class.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractContext`1.CurrentContext">
            <summary>
            Current request data
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractContext`1.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractContext`1.Ensure(System.Object)">
            <summary>
            Ensures that the given value is cached within a context.
            </summary>
            <param name="property">Property to ensure</param>
        </member>
        <member name="T:CMS.Base.AbstractActionContext`1">
            <summary>
            Base class for action context
            </summary>
        </member>
        <member name="F:CMS.Base.AbstractActionContext`1.mRestoreOriginal">
            If true, the original values are restored in the context
        </member>
        <member name="P:CMS.Base.AbstractActionContext`1.OriginalData">
            <summary>
            Previous context data
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractActionContext`1.RestoreOriginal">
            <summary>
            If true, the original values are restored in the context
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractActionContext`1.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractActionContext`1.RestoreOriginalValues">
            <summary>
            Restores the original values to the context
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractActionContext`1.StoreOriginalValue``1(System.Nullable{``0}@,``0)">
            <summary>
            Stores current value as the original value if original value hasn't been stored yet.
            </summary>
            <typeparam name="TValue">Type of the property</typeparam>
            <param name="originalValueProperty">Original value property inner field.</param>
            <param name="currentValue">Value of the property before it has been changed, hence the original value.</param>
        </member>
        <member name="M:CMS.Base.AbstractActionContext`1.StoreOriginalValue``1(``0@,``0)">
            <summary>
            Stores current value as the original value.
            </summary>
            <typeparam name="TValue">Type of the property</typeparam>
            <param name="originalValueProperty">Original value property inner field.</param>
            <param name="currentValue">Value of the property before it has been changed, hence the original value.</param>
        </member>
        <member name="T:CMS.Base.CMSActionContext">
            <summary>
            Ensures context for the actions block.
            </summary>
            <example>
            using(var ctx = new CMSActionContext() { LogEvents = false })
            {
                DoSomeAction();
            }
            </example>
        </member>
        <member name="P:CMS.Base.CMSActionContext.User">
            <summary>
            User of the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.LogSynchronization">
            <summary>
            Indicates if the staging tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.LogIntegration">
            <summary>
            Indicates if the integration tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.EnableLogContext">
            <summary>
            Indicates whether logging through log context (LogContext) is currently enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.LogEvents">
            <summary>
            Indicates if the events should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.LogWebFarmTasks">
            <summary>
            Indicates if the web farm tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.TouchCacheDependencies">
            <summary>
            Indicates if the objects cache dependencies should be touched.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.UpdateTimeStamp">
            <summary>
            Indicates if the objects time stamps should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CreateSearchTask">
            <summary>
            Indicates if the search task should be created for the objects.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.LogExport">
            <summary>
            Indicates if the export tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CreateVersion">
            <summary>
            Indicates if the object version should be created. In the context of Delete, false means the object will be destroyed, true means it will be in the recycle bin.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.AllowAsyncActions">
            <summary>
            Indicates if the actions can run asynchronously. Default is true, if the application is web site, otherwise false.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.ThreadGuid">
            <summary>
            Guid of the current CMSTread. Guid.Empty when execution is not running under CMSThread.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.SendNotifications">
            <summary>
            Indicates if the notifications should be sent.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.UpdateSystemFields">
            <summary>
            Indicates if the system fields should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.UseCacheForSynchronizationXMLs">
            <summary>
            Indicates if XMLs in synchronization module should be cached/obtained from cache.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.AllowInitUser">
            <summary>
            Indicates if the current user should be initialized.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.Disconnected">
            <summary>
            Indicates if the objects within current context should behave as disconnected
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.TouchParent">
            <summary>
            Indicates if the objects within current context should touch parent object
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.SendEmails">
            <summary>
            Indicates if email should be sent.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.UseGlobalAdminContext">
            <summary>
            Indicates if global admin context should be used.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.EnableSmartSearchIndexer">
            <summary>
            Indicates whether a search task should be executed when it is created.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.DeletePhysicalFiles">
            <summary>
            Indicates whether a physical files should be deleted for attachments, meta files and media files.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.UpdateUserCounts">
            <summary>
            Indicates whether a user activity points should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.AllowLicenseRedirect">
            <summary>
            Indicates whether a redirect is allowed in case the license check fails. If not, an exception is thrown instead.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.LogLicenseWarnings">
            <summary>
            Indicates whether a warning is logged when license check for feature availability fails.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CheckLicense">
            <summary>
            Indicates whether a license check should be performed when managing objects.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.ResetChanges">
            <summary>
            Indicates whether the changes made to the object instance should be reseted.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.DisableRecursionDetection">
            <summary>
            Disabled recursion detection.
            </summary>
            <seealso cref="T:CMS.Base.RecursionControl"/>
        </member>
        <member name="P:CMS.Base.CMSActionContext.EmptyDataForInvalidLicense">
            <summary>
            Indicates whether a get data queries for object that are not allowed under current license returns empty data set or throw an error.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.ThreadCulture">
            <summary>
            Current thread culture.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.ContinuousIntegrationAllowObjectSerialization">
            <summary>
            Configures if object serialization within continuous integration is allowed in the given context
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentSite">
            <summary>
            Current site of the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentUser">
            <summary>
            Current user of the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentLogSynchronization">
            <summary>
            Indicates if the staging tasks should be logged within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentLogIntegration">
            <summary>
            Indicates if the integration tasks should be logged within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentEnableLogContext">
            <summary>
            Indicates whether logging through log context (LogContext) is currently enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentLogEvents">
            <summary>
            Indicates if the events should be logged within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentLogWebFarmTasks">
            <summary>
            Indicates if the web farm tasks should be logged within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentTouchCacheDependencies">
            <summary>
            Indicates if the objects cache dependencies should be touched within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentUpdateTimeStamp">
            <summary>
            Indicates if the objects time stamps should be updated within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentCreateSearchTask">
            <summary>
            Indicates if the search task should be created for the objects within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentLogExport">
            <summary>
            Indicates if the export tasks should be logged within the context.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentCreateVersion">
            <summary>
            Indicates if the object version should be created.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentSendNotifications">
            <summary>
            Indicates if the notifications should be sent.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentAllowAsyncActions">
            <summary>
            Indicates if the actions can run asynchronously. Default is true.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentThreadGuid">
            <summary>
            Guid of the current CMSTread. Empty guid when execution is not running under CMSThread.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentUpdateSystemFields">
            <summary>
            Indicates if the system fields should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentUseCacheForSynchronizationXMLs">
            <summary>
            Indicates if XMLs in synchronization module should be cached/obtained from cache.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentAllowInitUser">
            <summary>
            Indicates if the current user should be initialized.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentDisconnected">
            <summary>
            Indicates if the objects within current context should behave as disconnected
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentTouchParent">
            <summary>
            Indicates if the objects within current context should touch parent object
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentSendEmails">
            <summary>
            Indicates if the emails should be sent.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentUseGlobalAdminContext">
            <summary>
            Indicates if global admin context should be used.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentEnableSmartSearchIndexer">
            <summary>
            Indicates whether a search task should be executed when it is created.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentDeletePhysicalFiles">
            <summary>
            Indicates whether a physical files should be deleted for attachments, meta files and media files.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentUpdateUserCounts">
            <summary>
            Indicates whether a user activity points should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentAllowLicenseRedirect">
            <summary>
            Indicates whether a redirect is allowed in case the license check fails. If not, an exception is thrown instead.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentLogLicenseWarnings">
            <summary>
            Indicates whether a warning is logged when license check for feature availability fails.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentCheckLicense">
            <summary>
            Indicates whether a license check should be performed when managing objects.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentEmptyDataForInvalidLicense">
            <summary>
            Indicates whether a get data queries for object that are not allowed under current license returns empty data set or throw an error.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentResetChanges">
            <summary>
            Indicates whether the changes made to the object instance should be reseted.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentContinuousIntegrationAllowObjectSerialization">
            <summary>
            Indicates if object serialization within continuous integration is allowed in the given context
            </summary>
        </member>
        <member name="P:CMS.Base.CMSActionContext.CurrentDisableRecursionDetection">
            <summary>
            Indicates whether the recursion check is disabled.
            </summary>
            <seealso cref="T:CMS.Base.RecursionControl"/>
        </member>
        <member name="M:CMS.Base.CMSActionContext.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.#ctor(CMS.Base.IUserInfo)">
            <summary>
            Constructor. Ensures that all actions during the life of this object will use the given user context.
            </summary>
            <param name="user">User to use within all actions</param>
        </member>
        <member name="M:CMS.Base.CMSActionContext.EnsureRequiredValues">
            <summary>
            Initialize context, ensures values in current thread, if the values are already set, they are not overwritten.
            </summary>
            <remarks>
            Used when new CMSThread is started, so the thread has all the values it needs.
            </remarks>
        </member>
        <member name="M:CMS.Base.CMSActionContext.DisableAll">
            <summary>
            Disables all automated actions except for the ones necessary to keep the system consistent
            
            Disables:
                Logging for synchronization, event log, web farm tasks, versioning and cache dependencies 
                Timestamp update 
                Object invalidation
                Cache usage
                Asynchronous actions
                Sending of emails
                Smart search indexing
                Updating ratings
            
            Does not disable:
                Object serialization
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.DisableLogging">
            <summary>
            Disables logging of event log, staging and export tasks
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.RestoreOriginalValues">
            <summary>
            Restores the original values to the context
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.LogObjectChange">
            <summary>
            Indicates if the object change should be logged.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.LogDocumentChange">
            <summary>
            Indicates if the document change should be logged.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.GetCurrentUser">
            <summary>
            Gets the current user from context
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.GetCurrentSite">
            <summary>
            Gets the current site from context
            </summary>
        </member>
        <member name="M:CMS.Base.CMSActionContext.CloneForNewThread">
            <summary>
            Clones the object for the new thread
            </summary>
        </member>
        <member name="T:CMS.Base.ExtendedActionContext`1">
            <summary>
            Base class for the extended action context
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.ActionContext">
            <summary>
            Action context
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.User">
            <summary>
            User of the context.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.LogSynchronization">
            <summary>
            Indicates if the staging tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.LogIntegration">
            <summary>
            Indicates if the integration tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.EnableLogContext">
            <summary>
            Indicates whether logging through log context (LogContext) is currently enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.LogEvents">
            <summary>
            Indicates if the events should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.LogWebFarmTasks">
            <summary>
            Indicates if the web farm tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.TouchCacheDependencies">
            <summary>
            Indicates if the objects cache dependencies should be touched.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.UpdateTimeStamp">
            <summary>
            Indicates if the objects time stamps should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.CreateSearchTask">
            <summary>
            Indicates if the search task should be created for the objects.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.LogExport">
            <summary>
            Indicates if the export tasks should be logged.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.CreateVersion">
            <summary>
            Indicates if the object version should be created.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.AllowAsyncActions">
            <summary>
            Indicates if the actions can run asynchronously. Default is true, if the application is web site, otherwise false.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.ThreadGuid">
            <summary>
            Guid of the current CMSTread. Guid.Empty when execution is not running under CMSThread.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.SendNotifications">
            <summary>
            Indicates if the notifications should be sent.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.UpdateSystemFields">
            <summary>
            Indicates if the system fields should be updated.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.UseCacheForSynchronizationXMLs">
            <summary>
            Indicates if cache should be used for data operations.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.AllowInitUser">
            <summary>
            Indicates if the current user should be initialized.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.Disconnected">
            <summary>
            Indicates if the objects within current context should behave as disconnected
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.TouchParent">
            <summary>
            Indicates if the objects within current context should touch parent object
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.SendEmails">
            <summary>
            Indicates if email should be sent.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.UseGlobalAdminContext">
            <summary>
            Indicates if global admin context should be used.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.EnableSmartSearchIndexer">
            <summary>
            Indicates whether a search task should be executed when it is created.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.DeletePhysicalFiles">
            <summary>
            Indicates whether a physical files should be deleted for attachments, meta files and media files.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtendedActionContext`1.UpdateUserCounts">
            <summary>
            Indicates whether a user activity points should be updated.
            </summary>
        </member>
        <member name="M:CMS.Base.ExtendedActionContext`1.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CMS.Base.ExtendedActionContext`1.DisableAll">
            <summary>
            Disables logging for synchronization, event log, web farm tasks, versioning and cache dependencies 
            Disables timestamp update 
            Disables object invalidation
            Disables cache usage
            Disables asynchronous actions
            Disables sending of emails
            </summary>
        </member>
        <member name="M:CMS.Base.ExtendedActionContext`1.DisableLogging">
            <summary>
            Disables logging of event log, staging and export tasks
            </summary>
        </member>
        <member name="T:CMS.Base.CMSStatic`1">
            <summary>
            Class for storing static data based on current connection context.
            Each connection context accesses its own data.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSStatic`1.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.#ctor(System.Func{`0})">
            <summary>
            Constructor
            </summary>
            <param name="initMethod">Initializing method for a new instance of the value</param>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.InitializeMainValue">
            <summary>
            Initializes the main value
            </summary>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.Reset">
            <summary>
            Resets the static field to its original state
            </summary>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.GetDefaultValue">
            <summary>
            Gets the default value for a new context
            </summary>
        </member>
        <member name="M:CMS.Base.CMSStatic`1.op_Implicit(CMS.Base.CMSStatic{`0})~`0">
            <summary>
            Implicit conversion from the property to its value
            </summary>
            <param name="property">Property to convert</param>
        </member>
        <member name="T:CMS.Base.DebugConstants">
            <summary>
            Debug related constants.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.SQL_QUERIES_DEBUG_NAME">
            <summary>
            Name of the SQL queries debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.HANDLERS_DEBUG_NAME">
            <summary>
            Name of the event handlers debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.CACHE_ACCESS_DEBUG_NAME">
            <summary>
            Name of the cache access debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.SECURITY_DEBUG_NAME">
            <summary>
            Name of the security debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.FILE_DEBUG_NAME">
            <summary>
            Name of the IO debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.MACRO_DEBUG_NAME">
            <summary>
            Name of the macro debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.WEB_FARM_DEBUG_NAME">
            <summary>
            Name of the web farm debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugConstants.DEBUG_SECURITY_TOKEN">
            <summary>
            Name of the request header entry for debug security token.
            </summary>
        </member>
        <member name="T:CMS.Base.DebugContext">
            <summary>
            Debug context
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.RequestGUID">
            <summary>
            Request GUID to identify debugs of the current thread
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.DebugPresentInResponse">
            <summary>
            Gets or sets the value that indicates whether debug information is present in response
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.RequestContext">
            <summary>
            Request context.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.CurrentLogFolder">
            <summary>
            Current subfolder for debug log
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.CurrentRequestLogs">
            <summary>
            Returns the logs for current request.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.CurrentExecutionContext">
            <summary>
            Current context identifier.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.CurrentRequestSettings">
            <summary>
            Returns current request settings.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugContext.CurrentThreadStack">
            <summary>
            Current thread stack
            </summary>
        </member>
        <member name="M:CMS.Base.DebugContext.ThreadStarted(CMS.Base.ThreadDebugItem)">
            <summary>
            Notifies the debug that a specific thread started in current context
            </summary>
            <param name="thread">Thread debug item</param>
        </member>
        <member name="M:CMS.Base.DebugContext.ThreadFinished">
            <summary>
            Notifies the debug that a thread finished in current context
            </summary>
        </member>
        <member name="M:CMS.Base.DebugContext.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
        </member>
        <member name="T:CMS.Base.DebugContextScope">
            <summary>
            Wrapper around <see cref="M:CMS.Base.DebugHelper.SetContext(System.String)"/> / <see cref="M:CMS.Base.DebugHelper.ReleaseContext"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugContextScope.#ctor(System.String)">
            <summary>
            Sets the debugging context.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugContextScope.Dispose">
            <summary>
            Releases the last context.
            </summary>
        </member>
        <member name="T:CMS.Base.DebugHelper">
            <summary>
            Debug helping methods.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugDisabled">
            <summary>
            If true all debugs are disabled. The debug is disabled by default to prevent unwanted debugs during application PreInit phase. Debug gets initialized in the Init phase through SetApplicationStartDebug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mAnyDebugLogToFileEnabled">
            <summary>
            If true, at least one debug has the logging to file enabled.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mLogEverythingToFile">
            <summary>
            If true, operations for everything are logged to the file (for debug purposes).
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugEverythingEverywhere">
            <summary>
            Debug everything everywhere?
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugEverything">
            <summary>
            Debug everything?
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugAllForEverything">
            <summary>
            Debug everything on all pages?
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugStackForEverything">
            <summary>
            Debug everything stack?
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mEverythingLogLength">
            <summary>
            Everything log length (number of requests to log).
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugResources">
            <summary>
            If false, all the resources (GetResource a GetCSS) requests are ignored in debugging.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugScheduler">
            <summary>
            If false, scheduler tasks are ignored in debugs.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugImportExport">
            <summary>
            If false, pages with Import/Export are excluded from debugs.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mExcludedMethods">
            <summary>
            The table of the method excluded from stack trace.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.tableLock">
            <summary>
            Table lock for loading.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mDebugCounter">
            <summary>
            Counter used to merge different debugs in time order.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mAnyDebugEnabled">
            <summary>
            If true, at least one debug is enabled.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mRegisteredDebugs">
            <summary>
            Dictionary of the registered debugs
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mRegisteredDebugsList">
            <summary>
            List of the registered debugs
            </summary>
        </member>
        <member name="F:CMS.Base.DebugHelper.mLogFolder">
            <summary>
            Folder for the debug logs
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.MaxLogSize">
            <summary>
            Maximum debug log size
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.RegisteredDebugs">
            <summary>
            Returns the list of registered debugs
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.LogFolder">
            <summary>
            File path, to which the debug logs operations
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.RegisteredDebugsCount">
            <summary>
            Number of registered debugs
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.AnyDebugEnabled">
            <summary>
            Returns true if any debug is enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.AnyDebugLogToFileEnabled">
            <summary>
            Returns true if any debug has the logging to file enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugDisabled">
            <summary>
            Indicates whether all debugs are disabled.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugResources">
            <summary>
            If false, all the resources (GetResource a GetCSS) requests are ignored in debugging.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugScheduler">
            <summary>
            If false, scheduler tasks are ignored in debugs.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugImportExport">
            <summary>
            If false, pages with Import/Export are excluded from debugs.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.LogEverythingToFile">
            <summary>
            Logs operations for everything?
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugEverythingEverywhere">
            <summary>
            Debug Everything everywhere?
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugEverything">
            <summary>
            Debug Everything?
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugAllForEverything">
            <summary>
            Debug all pages for everything.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.DebugStackForEverything">
            <summary>
            Track stack when debugging everything.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.EverythingLogLength">
            <summary>
            Maximum length of the Everything log in number of requests.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugHelper.ExcludedMethods">
            <summary>
            The table of the method excluded from stack trace.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.CanDebug(System.Reflection.MethodInfo)">
            <summary>
            Returns true if the given method can be included in debug
            </summary>
            <param name="method">Method to check</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetSetting(CMS.Base.CMSStatic{System.Nullable{System.Boolean}},System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Gets the value of given setting, initializes the variable based on key name and default value if not available
            </summary>
            <param name="variable">Setting variable</param>
            <param name="key">Key name</param>
            <param name="defaultValue">Default value</param>
            <param name="checkDisabled">If true, the disabled setting of the debug is checked</param>
            <param name="initValue">Initialization value</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.RegisterDebug(CMS.Base.DebugSettings)">
            <summary>
            Registers the debug to the debug helper
            </summary>
            <param name="settings">Debug settings</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.DisableSchedulerDebug">
            <summary>
            Disables all debugs if DebugHelper.DebugScheduler is false, returns original settings which can be restored afterwards.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.RestoreDebugSettings(CMS.Base.RequestSettings)">
            <summary>
            Restores the debug settings from array of values.
            </summary>
            <param name="settings">Settings to restore</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.ResetDebugSettings(System.Boolean)">
            <summary>
            Sets all the debug settings to null and causes them to be reloaded. This method is synchronized through all web farm servers.
            </summary>
            <param name="createWebFarmTask">If true, reset is synchronized to all web farm servers</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetDebugBoolSetting(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns logical or of setting in web.config and setting.
            </summary>
            <param name="keyName">Name of the setting</param>
            <param name="defaultValue">Default value of the web.config setting</param>
            <param name="checkDisabled">If true, the disabled setting is checked for this setting</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetDebugBoolSetting(System.String)">
            <summary>
            Returns logical or of setting in web.config and setting.
            </summary>
            <param name="keyName">Name of the setting</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetDebugLogLength(System.String)">
            <summary>
            Returns log length of given debug (looks first to the settings, if the value is not defined, takes value from web.config, if not defined even in web.config, returns 10 as default value).
            </summary>
            <param name="keyName">Name of the setting</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetDebugLogLength(System.String,System.Int32)">
            <summary>
            Returns log length of given debug (looks first to the settings, if the value is not defined, takes value from web.config, if not defined even in web.config, returns 10 as default value).
            </summary>
            <param name="keyName">Name of the setting</param>
            <param name="defaultValue">Web.config default value</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.SetContext(System.String)">
            <summary>
            Sets the debugging context.
            </summary>
            <param name="newContext">New context</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.ReleaseContext">
            <summary>
            Releases the last context.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetRequestUrl">
            <summary>
            Gets the request URL for the log purposes.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetThreadStack">
            <summary>
            Gets the current stack.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetStack(System.Int32)">
            <summary>
            Gets the current stack.
            </summary>
            <param name="depth">Stack depth</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.ExcludeMethod(System.Reflection.MethodBase,System.String)">
            <summary>
            Returns true if the given method is excluded from debug (should not be listed in debug)
            </summary>
            <param name="method">Method to check</param>
            <param name="methodName">Method name</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.StopOnMethod(System.Reflection.MethodBase)">
            <summary>
            Returns true if the given method should be skipped from the stack trace
            </summary>
            <param name="m">Method to check</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetMethodName(System.Reflection.MethodBase)">
            <summary>
            Gets the method name
            </summary>
            <param name="m">Method</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetDebugCounter(System.Boolean)">
            <summary>
            Returns state of the debug counter.
            </summary>
            <param name="increment">If true, counter is incremented</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.EnsureDiskPath(System.String,System.String)">
            <summary>
            Checks if all folders of the given path exist and if not, it creates them.
            </summary>
            <param name="path">Full disk path of the file including file name</param>
            <param name="startingPath">Starting path where folders can be checked and created</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.CreateLogTable(System.String,System.Data.DataColumn[])">
            <summary>
            Creates new debug log table
            </summary>
            <param name="name">Table name</param>
            <param name="columns">Columns</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.FindRequestLogs(System.Guid)">
            <summary>
            Finds the collection of request logs by the given request GUID
            </summary>
            <param name="requestGuid">Request GUID</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.FindRequestLog(System.Guid)">
            <summary>
            Finds the first log found by the given request GUID
            </summary>
            <param name="requestGuid">Request GUID</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.WriteRequestLogs">
            <summary>
            Writes all request logs to the files
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.IsDebugEnabled(System.String)">
            <summary>
            Returns true if the given debug is enabled
            </summary>
            <param name="name">Debug name</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.SetApplicationStartDebug">
            <summary>
            Returns true if the given debug is enabled
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.SetInitialDebug">
            <summary>
            Sets the initial debugging settings.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.SetSystemPageDebug">
            <summary>
            Sets the debug flags for system page
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.SetContentPageDebug">
            <summary>
            Sets the debug flags for content page
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.DisableDebug">
            <summary>
            Disables all debugs in the context of current request / thread
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.ClearLogs">
            <summary>
            Clears all logs within all debugs
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.RegisterLogs">
            <summary>
            Registers all request logs to the appropriate log lists.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetSettings(System.String)">
            <summary>
            Gets the settings for a given debug
            </summary>
            <param name="name">Debug name</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetContext(System.Boolean)">
            <summary>
            Gets the context for debug operation
            </summary>
            <param name="stack">If true, the stack information is retrieved</param>
        </member>
        <member name="M:CMS.Base.DebugHelper.GetExcludedMethods">
            <summary>
            Gets the table of the method excluded from stack trace.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHelper.EnsureDurationColumn(System.Data.DataTable,System.String)">
            <summary>
            Ensures the Duration column in the datateble of Request log.
            </summary>
            <param name="dt">DataTable of the request log</param>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Base.DebugEventArgs">
            <summary>
            Debug event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.DebugEventArgs.DebugData">
            <summary>
            DataRow with debug information.
            </summary>
        </member>
        <member name="T:CMS.Base.DebugEvents">
            <summary>
            Debug events handlers.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.MacroDebugItemLogged">
            <summary>
            Fires when a new macro debug item is logged to debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.SQLDebugItemLogged">
            <summary>
            Fires when a new SQL debug item is logged to debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.IODebugItemLogged">
            <summary>
            Fires when a new IO debug item is logged to debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.CacheDebugItemLogged">
            <summary>
            Fires when a new cache debug item is logged to debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.ViewStateDebugItemLogged">
            <summary>
            Fires when a new macro debug item is logged to debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.SecurityDebugItemLogged">
            <summary>
            Fires when a new security debug item is logged to debug.
            </summary>
        </member>
        <member name="F:CMS.Base.DebugEvents.SettingsReset">
            <summary>
            Fires when debug settings are reset. The event arguments do not contain any debug data.
            </summary>
        </member>
        <member name="T:CMS.Base.DebugHandler">
            <summary>
            Debug event handler.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugHandler.StartEvent(System.Data.DataRow)">
            <summary>
            Initiates the event handling.
            </summary>
            <param name="debugData">DataRow with debug information</param>
        </member>
        <member name="T:CMS.Base.ExcludeFromDebug">
            <summary>
            Marks the method as not being included in debug
            </summary>
        </member>
        <member name="T:CMS.Base.HideFromDebugContextAttribute">
            <summary>
            Marks a specific member or class to be excluded from debug context information
            </summary>
        </member>
        <member name="T:CMS.Base.RequestLog">
            <summary>
            Contains the log information for the request.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.Settings">
            <summary>
            Debug settings
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.RequestGUID">
            <summary>
            Request GUID.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.ParentLogs">
            <summary>
            Parent logs.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.LogTable">
            <summary>
            Logs table.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.RequestURL">
            <summary>
            Request URL.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.RequestTime">
            <summary>
            Request time.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.CurrentLogItem">
            <summary>
            Currently active log item.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.CurrentContextItem">
            <summary>
            Currently active context item.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.Value">
            <summary>
            Value for general single value purposes.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.ValueCollections">
            <summary>
            Value collections for multiple values purposes.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.NotLoggedItems">
            <summary>
            Number of items that weren't logged due to exceeding of max log size
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLog.ThreadStack">
            <summary>
            Current thread stack
            </summary>
        </member>
        <member name="M:CMS.Base.RequestLog.#ctor">
            <summary>
            Constructor used by deserialization.
            </summary>
        </member>
        <member name="M:CMS.Base.RequestLog.#ctor(CMS.Base.RequestLogs,System.Data.DataTable,CMS.Base.DebugSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="parentLogs">Parent logs container</param>
            <param name="logTable">DataTable for the log</param>
            <param name="settings">Debug settings</param>
        </member>
        <member name="M:CMS.Base.RequestLog.LogNewItem(System.Action{System.Data.DataRow},System.Boolean,System.Boolean)">
            <summary>
            Log a new item to the debug. Returns the item Data row if the item was logged
            </summary>
            <param name="itemSetup">Item setup</param>
            <param name="addBeforeLast">If true, the new item is added before the last item</param>
            <param name="rememberItem">If true, the item is remembered in context for further editing</param>
        </member>
        <member name="M:CMS.Base.RequestLog.FinalizeData">
            <summary>
            Finalizes the debug data
            </summary>
        </member>
        <member name="M:CMS.Base.RequestLog.Register">
            <summary>
            Registers the log within the log list.
            </summary>
        </member>
        <member name="M:CMS.Base.RequestLog.FindByGUID(System.Collections.Generic.IEnumerable{CMS.Base.RequestLog},System.Guid)">
            <summary>
            Attempts to find the log by the GUID.
            </summary>
            <param name="logs">Logs to search</param>
            <param name="guid">Guid to search</param>
        </member>
        <member name="T:CMS.Base.RequestLogs">
            <summary>
            Class encapsulating the request logs.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestLogs.logs">
            <summary>
            Flags for enabled status of particular debugs
            </summary>
        </member>
        <member name="P:CMS.Base.RequestLogs.RegisterNewLogs">
            <summary>
            If true, new logs are automatically registered
            </summary>
        </member>
        <member name="P:CMS.Base.RequestLogs.Item(System.Int32)">
            <summary>
            Gets or sets the enabled status for particular debug
            </summary>
            <param name="key">Debug key</param>
        </member>
        <member name="P:CMS.Base.RequestLogs.Item(CMS.Base.DebugSettings)">
            <summary>
            Gets or sets the enabled status for particular debug
            </summary>
            <param name="debug">Debug</param>
        </member>
        <member name="P:CMS.Base.RequestLogs.RequestGUID">
            <summary>
            Request GUID.
            </summary>
        </member>
        <member name="P:CMS.Base.RequestLogs.RequestTime">
            <summary>
            Request time.
            </summary>
        </member>
        <member name="P:CMS.Base.RequestLogs.RequestURL">
            <summary>
            Request URL.
            </summary>
        </member>
        <member name="P:CMS.Base.RequestLogs.ThreadStack">
            <summary>
            Current thread stack
            </summary>
        </member>
        <member name="M:CMS.Base.RequestLogs.#ctor(System.Guid)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CMS.Base.RequestLogs.CreateLog(System.Data.DataTable,CMS.Base.DebugSettings)">
            <summary>
            Creates new request log.
            </summary>
            <param name="dt">Log table</param>
            <param name="settings">Debug settings</param>
        </member>
        <member name="M:CMS.Base.RequestLogs.EnsureLog(CMS.Base.DebugSettings,System.Func{System.Data.DataTable})">
            <summary>
            Ensures the request log for the given settings
            </summary>
            <param name="settings">Debug settings</param>
            <param name="newTable">New log table function</param>
        </member>
        <member name="M:CMS.Base.RequestLogs.GetEnumerator">
            <summary>
            Gets the logs enumerator
            </summary>
        </member>
        <member name="T:CMS.Base.DebugSettings">
            <summary>
            Container for the particular debug settings
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.DebugKey">
            <summary>
            Debug settings key to access the RequestDebugs flags
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.Name">
            <summary>
            Name of the debug
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.LogOperations">
            <summary>
            Returns true, if the debug is allowed to log the operations, either to file or to debug tables
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.LogToFile">
            <summary>
            If true, the debug logs operations to physical file?
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.Enabled">
            <summary>
            If true, the debug is enabled
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.All">
            <summary>
            Debug on all pages, including the UI and preview pages.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.Stack">
            <summary>
            Track stack when debugging.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.LogLength">
            <summary>
            Maximum length of the log in number of requests.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.RequestLog">
            <summary>
            Current request query log.
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.CurrentIndent">
            <summary>
            Gets or sets current indentation of the debug
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.LastLogs">
            <summary>
            Last requests query logs, contains the arrays of [URL, SecurityLog, Time].
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.SizeColumn">
            <summary>
            Column in the log containing the data size in the operation
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.DurationColumn">
            <summary>
            Column in the log containing the duration of the operation
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.FinalizeData">
            <summary>
            Method that finalizes the data prior the reporting
            </summary>
        </member>
        <member name="P:CMS.Base.DebugSettings.LogControl">
            <summary>
            Log control that displays the debug log
            </summary>
        </member>
        <member name="M:CMS.Base.DebugSettings.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Debug name</param>
        </member>
        <member name="M:CMS.Base.DebugSettings.EnsureValue``1(System.Nullable{``0}@,System.Func{``0},``0)">
            <summary>
            Ensures boolean value or default value if initialization is detected
            </summary>
            <param name="value">Value to load</param>
            <param name="init">Initializer</param>
            <param name="defaultValue">Default value to use</param>
        </member>
        <member name="M:CMS.Base.DebugSettings.ResetSettings">
            <summary>
            Sets all the debug settings to null and causes them to be reloaded.
            </summary>
        </member>
        <member name="M:CMS.Base.DebugSettings.WriteRequestLog(System.String)">
            <summary>
            Writes the request log to the log file.
            </summary>
            <param name="folder">Folder to which the log is written</param>
        </member>
        <member name="M:CMS.Base.DebugSettings.WriteToLogFile(System.String,System.Text.StringBuilder)">
            <summary>
            Writes the given 
            </summary>
            <param name="folder">Log folder</param>
            <param name="logSb">Content to log</param>
        </member>
        <member name="M:CMS.Base.DebugSettings.GetLogFolder(System.String)">
            <summary>
            File path, to which the debug logs operations
            </summary>
            <param name="folder">Folder to which the log is written</param>
        </member>
        <member name="T:CMS.Base.RequestSettings">
            <summary>
            Container containing current request settings.
            </summary>
        </member>
        <member name="F:CMS.Base.RequestSettings.mFlags">
            <summary>
            Flags for enabled status of particular debugs
            </summary>
        </member>
        <member name="P:CMS.Base.RequestSettings.Flags">
            <summary>
            Flags for enabled status of particular debugs
            </summary>
        </member>
        <member name="P:CMS.Base.RequestSettings.Item(System.Int32)">
            <summary>
            Gets or sets the enabled status for particular debug
            </summary>
            <param name="key">Debug key</param>
        </member>
        <member name="P:CMS.Base.RequestSettings.Item(CMS.Base.DebugSettings)">
            <summary>
            Gets or sets the enabled status for particular debug
            </summary>
            <param name="debug">Debug</param>
        </member>
        <member name="M:CMS.Base.RequestSettings.Clone">
            <summary>
            Creates a new instance of <see cref="T:CMS.Base.RequestSettings"/> 
            and initialize the <see cref="P:CMS.Base.RequestSettings.Flags"/> with shallow copy of current <see cref="P:CMS.Base.RequestSettings.Flags"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.DefaultSiteStaticFileService">
            <summary>
            Fallback implementation if <see cref="T:CMS.Base.Internal.ISiteStaticFileService"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultSiteStaticFileService.FileExists(System.String)">
            <summary>
            Checks if a site static file is available on the specified relative path.
            </summary>
            <param name="relativePath">The relative path of the site static file.</param>
            <returns>
              always <c>false</c>
            </returns>
        </member>
        <member name="T:CMS.Base.DefaultWebPathMapper">
            <summary>
            Fallback implementation if <see cref="T:CMS.Base.Internal.IWebPathMapper"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultWebPathMapper.GetStaticFilesRootPath">
            <summary>
            Gets the application static files root path. Value is read from <see cref="T:CMS.Base.SystemContext"/> and is the same as value returned from <see cref="M:CMS.Base.DefaultWebPathMapper.GetRootPath"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultWebPathMapper.GetRootPath">
            <summary>
            Gets the application root path. Value is read from <see cref="T:CMS.Base.SystemContext"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.HttpHelper">
            <summary>
            Provides an instance of the <see cref="T:CMS.Base.Internal.IHttpContext"/> associated with the current request.
            </summary>
        </member>
        <member name="P:CMS.Base.HttpHelper.AllowHttpContextForContextContainer">
            <summary>
            Gets or sets a value indicating whether the instance of <see cref="T:CMS.Base.Internal.IHttpContext"/> returned by
            the <see cref="T:CMS.Base.Internal.IHttpContextRetriever"/> property is used for backing store of <see cref="T:CMS.Base.ContextContainer`1"/>
            based instances. Default value is <see langword="true"/>.
            </summary>
            <remarks>
            Property should be used just in <see cref="T:CMS.Base.ContextContainer`1"/> implementation to avoid
            context switching in method <see cref="M:CMS.Base.ContextContainer`1.EnsureContextContainer"/> when
            the <see cref="T:CMS.Base.Internal.IHttpContextRetriever"/> is mocked in tests.
            </remarks>
        </member>
        <member name="T:CMS.Base.ICMSStatic">
            <summary>
            Interface defining non-generic methods for <see cref="T:CMS.Base.CMSStatic`1"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.ICMSStatic.Reset">
            <summary>
            Resets the static field to its original state.
            </summary>
        </member>
        <member name="T:CMS.Base.IContext">
            <summary>
            Context interface
            </summary>
        </member>
        <member name="T:CMS.Base.IThreadContextItems">
            <summary>
            Represents collection of items that can be used to organize and share data during a thread execution.
            </summary>
        </member>
        <member name="P:CMS.Base.IThreadContextItems.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">
            The key of the value to get or set.
            </param>
            <returns>
            The value associated with the specified key. If the specified key is not found, a get operation
            returns <see langword="null"/>, and a set operation creates a new element with the specified key.
            </returns>
        </member>
        <member name="M:CMS.Base.IThreadContextItems.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:CMS.Base.IThreadContextItems"/> contains the specified key.
            </summary>
            <param name="key">
            The key to locate in the <see cref="T:CMS.Base.IThreadContextItems"/>.
            </param>
            <returns>
            <see langword="true"/> if the <see cref="T:CMS.Base.IThreadContextItems"/> contains an element with the specified key;
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:CMS.Base.IThreadContextItems.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the <see cref="T:CMS.Base.IThreadContextItems"/>.
            </summary>
            <param name="key">
            The key of the element to remove.
            </param>
            <returns>
            <see langword="true"/> if the element is successfully found and removed;
            otherwise, <see langword="false"/>.
            This method returns <see langword="false"/> if key is not found in the <see cref="T:CMS.Base.IThreadContextItems"/>.
            </returns>
        </member>
        <member name="T:CMS.Base.IUploadedFile">
            <summary>
            Describes implementation that contain methods to access the content of uploaded file.
            </summary>
        </member>
        <member name="P:CMS.Base.IUploadedFile.CanOpenReadStream">
            <summary>
            Gets a value that indicates whether the <see cref="T:CMS.Base.IUploadedFile"/> implementation supports accessing
            the input stream via <see cref="M:CMS.Base.IUploadedFile.OpenReadStream"/> method.
            </summary>
            <return>
            <list type="bullet">
            <item><see langword="true"/> when the input stream must be accessed via <see cref="M:CMS.Base.IUploadedFile.OpenReadStream"/> method.</item>
            <item><see langword="false"/> when the input stream must be accessed via <see cref="P:CMS.Base.IUploadedFile.InputStream"/> property.</item>
            </list>
            </return>
        </member>
        <member name="P:CMS.Base.IUploadedFile.ContentType">
            <summary>
            Gets the MIME content type of an uploaded file.
            </summary>
        </member>
        <member name="P:CMS.Base.IUploadedFile.Length">
            <summary>
            Gets the size of an uploaded file in bytes.
            </summary>
        </member>
        <member name="P:CMS.Base.IUploadedFile.FileName">
            <summary>
            Gets the fully qualified name of the file on the client.
            </summary>
        </member>
        <member name="P:CMS.Base.IUploadedFile.InputStream">
            <summary>
            Gets a <see cref="T:System.IO.Stream"/> object that points to an uploaded file. This property
            will return the same object when it is accessed multiple times.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the implementation of <see cref="T:CMS.Base.IUploadedFile"/> does not support
            accessing the input stream via shared object
            and the input stream must be accessed via <see cref="M:CMS.Base.IUploadedFile.OpenReadStream"/> method.
            </exception>
        </member>
        <member name="M:CMS.Base.IUploadedFile.OpenReadStream">
            <summary>
            Opens the request stream for reading the uploaded file. Once the read is completed
            this stream should be disposed manually.
            </summary>
            <exception cref="T:System.NotSupportedException">
            Thrown when the implementation of <see cref="T:CMS.Base.IUploadedFile"/> does not support
            accessing the input stream via opening of a new stream
            and the input stream must be accessed via <see cref="P:CMS.Base.IUploadedFile.InputStream"/> property.
            </exception>
        </member>
        <member name="T:CMS.Base.SameSiteMode">
            <summary>
            Enum containing constants that indicate the value for the SameSite attribute of a cookie.
            </summary>
        </member>
        <member name="F:CMS.Base.SameSiteMode.None">
            <summary>
            The cookie will be sent with all requests.
            </summary>
        </member>
        <member name="F:CMS.Base.SameSiteMode.Lax">
            <summary>
            The cookie will be sent with "same-site" requests, and with "cross-site" top level navigation.
            </summary>
        </member>
        <member name="F:CMS.Base.SameSiteMode.Strict">
            <summary>
            The cookie will only be sent along with "same-site" requests.
            </summary>
        </member>
        <member name="T:CMS.Base.ContextItemsDictionary`2">
            <summary>
            Context items dictionary implementing <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.ContextItemsDictionary`2.CopyToNewThread">
            <summary>
            If true, the dictionary is copied (not cloned) to a new thread
            </summary>
            <remarks>
            This is a leftover from <see cref="T:CMS.Base.SafeDictionary`2"/>/<see cref="T:CMS.Base.ICloneThreadItem"/>.
            </remarks>
        </member>
        <member name="P:CMS.Base.ContextItemsDictionary`2.TypedValues">
            <summary>
            Gets a typed collection of values in this dictionary
            </summary>
            <remarks>
            This is a leftover from <see cref="T:CMS.Base.SafeDictionary`2"/>/<see cref="T:CMS.Base.ICloneThreadItem"/>.
            </remarks>
        </member>
        <member name="M:CMS.Base.ContextItemsDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.ContextItemsDictionary`2"/> class
            that is empty, has the default concurrency level, has the default initial capacity,
            and uses the default comparer for the key type.
            </summary>
        </member>
        <member name="M:CMS.Base.ContextItemsDictionary`2.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
            <remarks>
            This is a leftover from <see cref="T:CMS.Base.SafeDictionary`2"/>/<see cref="T:CMS.Base.ICloneThreadItem"/>.
            </remarks>
        </member>
        <member name="M:CMS.Base.ContextItemsDictionary`2.Copy">
            <summary>
            Copies the items dictionary for a new thread
            </summary>
        </member>
        <member name="M:CMS.Base.ContextItemsDictionary`2.Copy(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`1}})">
            <summary>
            Copies the items dictionary specified as a parameter for a new thread.
            </summary>
            <param name="source">Items source</param>
            <returns>Copy of the <paramref name="source"/>.</returns>
        </member>
        <member name="M:CMS.Base.ContextItemsDictionary`2.CopyInternal(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`1}})">
            <summary>
            Performs a copy of items from source dictionary to target context items dictionary.
            </summary>
            <param name="itemsSource">Items source.</param>
            <returns>Copy of the <paramref name="itemsSource"/>.</returns>
        </member>
        <member name="T:CMS.Base.ICloneThreadItem">
            <summary>
            Interface to mark the objects to be cloned for new thread items
            </summary>
        </member>
        <member name="M:CMS.Base.ICloneThreadItem.CloneForNewThread">
            <summary>
            Clones the object for new thread
            </summary>
        </member>
        <member name="T:CMS.Base.INotCopyThreadItem">
            <summary>
            Interface to mark the objects to be not copied to new thread items
            </summary>
        </member>
        <member name="T:CMS.Base.ItemsFunctions">
            <summary>
            Items collections functions.
            </summary>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Add(System.Collections.IDictionary,System.String,System.Object,System.Boolean)">
            <summary>
            Add item.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Add(CMS.Base.IThreadContextItems,System.String,System.Object,System.Boolean)">
            <summary>
            Add item.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Remove(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Remove item.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Remove(CMS.Base.IThreadContextItems,System.String,System.Boolean)">
            <summary>
            Remove item.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Contains(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Check if stock contain item.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Contains(CMS.Base.IThreadContextItems,System.String,System.Boolean)">
            <summary>
            Check if stock contain item.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.GetItem(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Returns object which matches by key.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.GetItem(CMS.Base.IThreadContextItems,System.String,System.Boolean)">
            <summary>
            Returns object which matches by key.
            </summary>
            <param name="items">Items collection</param>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Clear(System.Collections.IDictionary,System.String)">
            <summary>
            Remove items which start with selected name.
            </summary>
            <param name="items">Items collection</param>
            <param name="startsWith">Starting string of the objects to be removed</param>
        </member>
        <member name="M:CMS.Base.ItemsFunctions.Clear(CMS.Base.IThreadContextItems,System.String)">
            <summary>
            Remove items which start with selected name.
            </summary>
            <param name="items">Items collection</param>
            <param name="startsWith">Starting string of the objects to be removed</param>
        </member>
        <member name="T:CMS.Base.RequestItems">
            <summary>
            Inserts items into HttpContext.Current.Items.
            </summary>
        </member>
        <member name="P:CMS.Base.RequestItems.CurrentItems">
            <summary>
            Gets the current items.
            </summary>
        </member>
        <member name="P:CMS.Base.RequestItems.ReadOnlyCurrentItems">
            <summary>
            Gets the current items or null if they don't exist
            </summary>
        </member>
        <member name="M:CMS.Base.RequestItems.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Add item.
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.RequestItems.GetItem(System.String,System.Boolean)">
            <summary>
            Returns object which matches by key.
            </summary>
            <param name="key">Object key</param>
            <param name="caseSensitive">If true, the key is case sensitive</param>
        </member>
        <member name="M:CMS.Base.RequestItems.Clear(System.String)">
            <summary>
            Remove items which start with selected name.
            </summary>
            <param name="startsWith">Starting string of the objects to be removed</param>
        </member>
        <member name="M:CMS.Base.RequestItems.Ensure``1(System.String)">
            <summary>
            Ensures the item with the given key
            </summary>
            <param name="key">Item key</param>
        </member>
        <member name="T:CMS.Base.ThreadContext">
            <summary>
            Thread context
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContext.CurrentContainers">
            <summary>
            Holds a collection of containers used within current thread.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContext.Items">
            <summary>
            Thread items.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContext.Containers">
            <summary>
            Holds a collection of containers used within current thread
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContext.#cctor">
            <summary>
             Ensures that current context is not added to the collection of current containers to avoid infinite loop, this one is handled separately by thread start.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContext.Reset">
            <summary>
            Clears all containers in the current context.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContext.CopyForNewThread">
            <summary>
            Copies current context values to the <see cref="T:CMS.Base.ThreadContext"/> to be available for new <see cref="T:CMS.Base.CMSThread"/>.
            </summary>
            <returns><see cref="T:CMS.Base.ThreadContext" /> instance for a new <see cref="T:CMS.Base.CMSThread"/>.</returns>
        </member>
        <member name="M:CMS.Base.ThreadContext.SetAsCurrent">
            <summary>
            Sets the current instance as the current thread item.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContext.CloneForNewThread">
            <summary>
            Clones the object for new thread.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContext.GetContextForNewThread(System.Boolean)">
            <summary>
            Gets the context for a new thread
            </summary>
            <param name="multipleThreads">If true, the wrapped method may be used by multiple threads. Use this parameter to ensure that all the threads receive the original context values.</param>
        </member>
        <member name="M:CMS.Base.ThreadContext.SetParentThread(System.Int32,System.Type)">
            <summary>
            Sets the context parent thread.
            </summary>
            <param name="parentThreadId">Thread ID</param>
            <param name="parentThreadType">Thread type</param>
        </member>
        <member name="T:CMS.Base.ThreadContextItemsDictionaryWrapper">
            <summary>
            Wrapper over <see cref="T:System.Collections.IDictionary"/> object implementing <see cref="T:CMS.Base.IThreadContextItems"/> interface. 
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.ThreadContextItemsDictionaryWrapper"/> class.
            </summary>
            <param name="dict">Underlying dictionary.</param>
        </member>
        <member name="P:CMS.Base.ThreadContextItemsDictionaryWrapper.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:CMS.Base.ThreadContextItemsDictionaryWrapper"/> contains the specified key.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the <see cref="T:CMS.Base.ThreadContextItemsDictionaryWrapper"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:CMS.Base.IThreadContextItems"/> collection.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator.#ctor(System.Collections.IDictionaryEnumerator)">
            <summary>
            Initializes new instance of <see cref="T:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsDictionaryWrapper.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper">
            <summary>
            Wrapper over <see cref="T:System.Collections.Generic.IDictionary`2"/> whose generic type argument are (<see cref="T:System.Object"/>, <see cref="T:System.Object"/>)
            implementing <see cref="T:CMS.Base.IThreadContextItems"/> interface. 
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.#ctor(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper"/> class.
            </summary>
            <param name="dictionary">Underlying dictionary.</param>
        </member>
        <member name="P:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper"/> contains the specified key.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the <see cref="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:CMS.Base.IThreadContextItems"/> collection.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Object,System.Object}})">
            <summary>
            Initializes new instance of <see cref="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            <see langword="true"/> if the enumerator was successfully advanced to the next element;
            <see langword="false"/> if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:CMS.Base.ThreadContextItemsGenericDictionaryWrapper.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadItems">
            <summary>
            Thread items collection.
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadItems.AllowAnonymousThreadItems">
            <summary>
            If true, anonymous threads are allowed to work with their thread items
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadItems.CurrentItems">
            <summary>
            Current items collection.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadItems.ReadOnlyCurrentItems">
            <summary>
            Current items collection for read-only purposes, returns null if the items were not yet registered.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadItems.EnsureItems(CMS.Base.CMSThread)">
            <summary>
            Ensures the items collection of the given thread.
            </summary>
            <param name="thread">Thread for which to ensure the items. Pass null for current thread.</param>
        </member>
        <member name="M:CMS.Base.ThreadItems.GetItems(System.Boolean,System.Boolean,CMS.Base.CMSThread)">
            <summary>
            Gets the items collection of a thread, optionally creates new ones
            </summary>
            <param name="createIfNotFound">If true, the items will be created if not found</param>
            <param name="allowAnonymous">If true, allows creation of the items in the anonymous thread</param>
            <param name="thread">Thread for which to get the items, or null for current thread.</param>
        </member>
        <member name="T:CMS.Base.ThreadItemsDictionaryInternal">
            <summary>
            Thread items dictionary.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadRequiredContextAttribute">
            <summary>
            Indicates whether the marked class should be ensured before the new <see cref="T:CMS.Base.CMSThread"/> is started to be available with current values within the <see cref="T:CMS.Base.CMSThread"/> run.
            </summary>
            <remarks>
            Marked class must implement <see cref="T:CMS.Base.IContextContainer"/> interface.
            </remarks>
        </member>
        <member name="P:CMS.Base.ThreadRequiredContextAttribute.MarkedType">
            <summary>
            Type of the context.
            </summary>
            <remarks>
            Must implements <see cref="T:CMS.Base.IContextContainer"/>.
            </remarks>
        </member>
        <member name="M:CMS.Base.ThreadRequiredContextAttribute.#ctor(System.Type)">
            <summary>
            Creates new instance of <see cref="T:CMS.Base.ThreadRequiredContextAttribute"/>.
            </summary>
            <param name="markedType"><see cref="T:CMS.Base.IContextContainer"/> context type.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="markedType"/> is not set.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="markedType"/> is not implementing <see cref="T:CMS.Base.IContextContainer"/>.</exception>
        </member>
        <member name="M:CMS.Base.ThreadRequiredContextAttribute.PreInit">
            <summary>
            Registers context of <see cref="P:CMS.Base.ThreadRequiredContextAttribute.MarkedType"/> type.
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown when <see cref="P:CMS.Base.ThreadRequiredContextAttribute.MarkedType"/> is not defined.</exception>
        </member>
        <member name="T:CMS.Base.ThreadRequiredContexts">
            <summary>
            Holds collection of required <see cref="T:CMS.Base.IContextContainer"/>s and provides initialization for <see cref="T:CMS.Base.CMSThread"/>.
            </summary>
            <threadsafety static="false" instance="false"/>
        </member>
        <member name="P:CMS.Base.ThreadRequiredContexts.ThreadRequiredContextCollection">
            <summary>
            Collection of registered contexts.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadRequiredContexts.Register(CMS.Base.IContextContainer)">
            <summary>
            Registers <see cref="T:CMS.Base.IContextContainer"/> that needs to be ensured for every <see cref="T:CMS.Base.CMSThread"/>.
            </summary>
            <param name="contextContainer">Context that needs to be initialized and copied into every new CMSThread</param>
        </member>
        <member name="M:CMS.Base.ThreadRequiredContexts.EnsureContextsForThread">
            <summary>
            Ensures registered contexts into current <see cref="T:CMS.Base.ThreadContext"/>, so they can be copied into new <see cref="T:CMS.Base.CMSThread"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.LockedSection">
            <summary>
            Locked section, locks only when the object lock is available.
            </summary>
        </member>
        <member name="F:CMS.Base.LockedSection.mLock">
            <summary>
            Object for the synchronization.
            </summary>
        </member>
        <member name="F:CMS.Base.LockedSection.mBoolCondition">
            <summary>
            Boolean condition for the locking.
            </summary>
        </member>
        <member name="F:CMS.Base.LockedSection.mWasBlocked">
            <summary>
            Flag whether the execution was blocked by another code or not.
            </summary>
        </member>
        <member name="P:CMS.Base.LockedSection.WasBlocked">
            <summary>
            Returns whether the execution was blocked by another code or not.
            </summary>
        </member>
        <member name="M:CMS.Base.LockedSection.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor, locks the section on the given string key.
            </summary>
            <param name="condition">Boolean condition for the locking</param>
            <param name="lockKey">String key to use for the lock</param>
        </member>
        <member name="M:CMS.Base.LockedSection.#ctor(System.Boolean,System.Object)">
            <summary>
            Constructor, locks the section on specific object.
            </summary>
            <param name="condition">Boolean condition for the locking</param>
            <param name="lockObject">Lock object</param>
        </member>
        <member name="M:CMS.Base.LockedSection.Enter">
            <summary>
            Enters the monitor.
            </summary>
        </member>
        <member name="M:CMS.Base.LockedSection.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="T:CMS.Base.LockHelper">
            <summary>
            Class to provide lock objects based on the given key.
            </summary>
        </member>
        <member name="M:CMS.Base.LockHelper.GetLockObject(System.String)">
            <summary>
            Gets the object for lock.
            </summary>
            <param name="key">Lock object key</param>
        </member>
        <member name="M:CMS.Base.LockHelper.Ensure``1(``0@,System.Object)">
            <summary>
            Ensures the value of the given variable in a locked context to prevent multiple loads.
            Uses the default constructor of <typeparamref name="T"/> to initialize the value.
            </summary>
            <param name="variable">Variable to load</param>
            <param name="lockObject">Object to use for locking context to ensure only one load</param>
            <exception cref="T:System.ArgumentNullException">Throws when lock object is not defined</exception>
        </member>
        <member name="M:CMS.Base.LockHelper.Ensure``1(``0@,System.Func{``0},System.Object)">
            <summary>
            Ensures the value of the given variable in a locked context to prevent multiple loads.
            Uses the <paramref name="loadMethod"/> to initialize the value.
            </summary>
            <param name="variable">Variable to load</param>
            <param name="loadMethod">Methods that provides the variable value</param>
            <param name="lockObject">Object to use for locking context to ensure only one load</param>
            <exception cref="T:System.ArgumentNullException">Throws when lock object is not defined</exception>
        </member>
        <member name="M:CMS.Base.LockHelper.ExecuteOnceInLifetime(System.Action,System.Object,System.Boolean@)">
            <summary>
            Ensures that the given action is executed only once
            </summary>
            <param name="action">Action to execute</param>
            <param name="lockObject">Object to use for locking context to ensure only one load</param>
            <param name="executedFlag">Flag that indicates if the action was already executed</param>
            <exception cref="T:System.ArgumentNullException">Throws when lock object is not defined</exception>
        </member>
        <member name="T:CMS.Base.LockObject">
            <summary>
            Locking object
            </summary>
        </member>
        <member name="F:CMS.Base.LockObject.syncLock">
            <summary>
            Synchronization lock for potentially colliding operations
            </summary>
        </member>
        <member name="F:CMS.Base.LockObject.fullLock">
            <summary>
            Full access lock
            </summary>
        </member>
        <member name="F:CMS.Base.LockObject.readLock">
            <summary>
            Read lock
            </summary>
        </member>
        <member name="F:CMS.Base.LockObject.mDataReferences">
            <summary>
            Number of readers waiting for the data
            </summary>
        </member>
        <member name="T:CMS.Base.LockObject.InvalidData">
            <summary>
            Invalid data container
            </summary>
        </member>
        <member name="F:CMS.Base.LockObject.InvalidData.Value">
            <summary>
            Invalid data
            </summary>
        </member>
        <member name="P:CMS.Base.LockObject.ReadFailed">
            <summary>
            Flag indicating that the read failed
            </summary>
        </member>
        <member name="P:CMS.Base.LockObject.Data">
            <summary>
            Read data
            </summary>
        </member>
        <member name="P:CMS.Base.LockObject.Exception">
            <summary>
            Exception that occurred within data reading
            </summary>
        </member>
        <member name="P:CMS.Base.LockObject.Key">
            <summary>
            Lock object key
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.EnterRead``1(``0@)">
            <summary>
            Attempts to enter read lock. Returns true if the lock was acquired
            </summary>
            <param name="output">Returns the read data in case other thread is reading. Waits until the other reading finishes before returning the data.</param>
        </member>
        <member name="M:CMS.Base.LockObject.TryEnterRead">
            <summary>
            Tries to enter the read state, returns true if the read lock was acquired. If the read lock is acquired, resets internal state so that other threads can receive the result.
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.WaitForOutput``1(``0@)">
            <summary>
            Waits for the output from other thread that is reading the data. Returns true, if the output was provided.
            </summary>
            <param name="output">Returns the read data in case other thread is reading. Waits until the other reading finishes before returning the data.</param>
        </member>
        <member name="M:CMS.Base.LockObject.AddDataReference">
            <summary>
            Enters the data reading process
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.ReleaseDataReference">
            <summary>
            Exists the data reading process
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.ResetState">
            <summary>
            Resets the lock object state
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.FinishReadFailed">
            <summary>
            Finishes the read operation with failure
            </summary>
        </member>
        <member name="M:CMS.Base.LockObject.FinishRead``1(``0)">
            <summary>
            Finishes the read operation
            </summary>
            <param name="output">Output type</param>
        </member>
        <member name="T:CMS.Base.StaticContext">
            <summary>
            Static context properties
            </summary>
        </member>
        <member name="P:CMS.Base.StaticContext.CurrentContextIndex">
            <summary>
            Current context index
            </summary>
        </member>
        <member name="P:CMS.Base.StaticContext.CurrentContextName">
            <summary>
            Current context index
            </summary>
        </member>
        <member name="P:CMS.Base.StaticContext.ContextMapping">
            <summary>
            Gets the context mapping dictionary [name] -> [index] 
            </summary>
        </member>
        <member name="M:CMS.Base.StaticContext.GetContextIndex(System.String,System.Boolean)">
            <summary>
            Gets the current context name
            </summary>
            <param name="contextName">Context name</param>
            <param name="createNew">If true, new index is created if context is not yet registered</param>
        </member>
        <member name="M:CMS.Base.StaticContext.Register(CMS.Base.ICMSStatic)">
            <summary>
            Registers the given static field instance
            </summary>
            <param name="field">Field instance</param>
        </member>
        <member name="M:CMS.Base.StaticContext.Reset">
            <summary>
            Resets all existing static fields
            </summary>
        </member>
        <member name="T:CMS.Base.CoreExtensions">
            <summary>
            Base extensions
            </summary>
            <exclude/>
        </member>
        <member name="M:CMS.Base.CoreExtensions.ToInteger(System.Object,System.Int32)">
            <summary>
            Returns the integer representation of an object or default value if not.
            </summary>
            <param name="obj">Object</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.ToBoolean(System.Object,System.Boolean)">
            <summary>
            Returns the boolean representation of an object or default value if not.
            </summary>
            <param name="obj">Object</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.ToDouble(System.Object,System.Double,System.String)">
            <summary>
            Returns the double representation of an object or default value if not.
            </summary>
            <param name="obj">Object</param>
            <param name="defaultValue">Default value</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.ToDateTime(System.Object,System.DateTime,System.String)">
            <summary>
            Returns the DateTime representation of an object or default value if not.
            </summary>
            <param name="obj">Object</param>
            <param name="defaultValue">Default value</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.ToGuid(System.Object,System.Guid)">
            <summary>
            Returns the Guid representation of an object or default value if not.
            </summary>
            <param name="obj">Object</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.ToString(System.Object,System.String)">
            <summary>
            Returns the string representation of an object or default value if not.
            </summary>
            <param name="obj">Object</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.TrimEnd(System.Decimal)">
            <summary>
            Removes unnecessary zero values at the end of given decimal number.
            </summary>
            <param name="value">Decimal number.</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.StaticProperty``1(System.Type,System.String)">
            <summary>
            Gets the static property of the given type
            </summary>
            <param name="type">Parent type</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.CoreExtensions.GetStaticProperties``1(System.Type)">
            <summary>
            Gets the static property of the given type
            </summary>
            <param name="type">Parent type</param>
        </member>
        <member name="T:CMS.Base.CoreMethods">
            <summary>
            Base class for helpers
            </summary>
        </member>
        <member name="M:CMS.Base.CoreMethods.GetString(System.String,System.String)">
            <summary>
            Gets the string by the specified resource key
            </summary>
            <param name="resourceKey">Resource key</param>
            <param name="culture">Culture</param>
        </member>
        <member name="M:CMS.Base.CoreMethods.GetAPIString(System.String,System.String,System.String)">
            <summary>
            Gets the string by the specified resource key
            </summary>
            <param name="resourceKey">Key of the string</param>
            <param name="culture">Culture</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:CMS.Base.LogStatusEnum">
            <summary>
            Logs status mode enumeration.
            </summary>
        </member>
        <member name="F:CMS.Base.LogStatusEnum.Info">
            <summary>
            Information during process.
            </summary>
        </member>
        <member name="F:CMS.Base.LogStatusEnum.Error">
            <summary>
            Finished with error.
            </summary>
        </member>
        <member name="F:CMS.Base.LogStatusEnum.Warning">
            <summary>
            Warning during the process.
            </summary>
        </member>
        <member name="F:CMS.Base.LogStatusEnum.Finish">
            <summary>
            Successfully finished.
            </summary>
        </member>
        <member name="F:CMS.Base.LogStatusEnum.UnexpectedFinish">
            <summary>
            Unexpectedly finished.
            </summary>
        </member>
        <member name="F:CMS.Base.LogStatusEnum.Start">
            <summary>
            Process starting.
            </summary>
        </member>
        <member name="T:CMS.Base.ProcessStatus">
            <summary>
            Process status enumeration.
            </summary>
        </member>
        <member name="F:CMS.Base.ProcessStatus.Stopped">
            <summary>
            Stopped.
            </summary>
        </member>
        <member name="F:CMS.Base.ProcessStatus.Running">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:CMS.Base.ProcessStatus.Finished">
            <summary>
            Finished.
            </summary>
        </member>
        <member name="F:CMS.Base.ProcessStatus.Error">
            <summary>
            Error occurred.
            </summary>
        </member>
        <member name="F:CMS.Base.ProcessStatus.Restarted">
            <summary>
            Application restarted.
            </summary>
        </member>
        <member name="T:CMS.Base.UserPrivilegeLevelEnum">
            <summary>
            User privilege level enum
            </summary>
        </member>
        <member name="F:CMS.Base.UserPrivilegeLevelEnum.None">
            <summary>
            User has no privilege level
            </summary>
        </member>
        <member name="F:CMS.Base.UserPrivilegeLevelEnum.Editor">
            <summary>
            User is able to use administration interface
            </summary>
        </member>
        <member name="F:CMS.Base.UserPrivilegeLevelEnum.Admin">
            <summary>
            User can use all applications except the global applications and functionality
            </summary>
        </member>
        <member name="F:CMS.Base.UserPrivilegeLevelEnum.GlobalAdmin">
            <summary>
            User can use all applications and functionality without any exceptions
            </summary>
        </member>
        <member name="T:CMS.Base.Extender`1">
            <summary>
            Represents a behavior that can be attached to objects of specific type.
            </summary>
            <typeparam name="T">The type of objects that this behavior can be attached to.</typeparam>
            <remarks>
            The derived classes must implement a parameterless constructor.
            The extender is a singleton, the same instance is used to attach behavior to multiple ojects.
            The process of attaching a behavior specifies a scope and excludes extenders with a scope that does not match.
            Two scopes are considered equal when the string values are equal. The comparison is case-insensitive.
            </remarks>
        </member>
        <member name="F:CMS.Base.Extender`1.mScope">
            <summary>
            The extender scope.
            </summary>
        </member>
        <member name="P:CMS.Base.Extender`1.Scope">
            <summary>
            Gets the extender scope.
            </summary>
        </member>
        <member name="M:CMS.Base.Extender`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Extender class with the specified scope.
            </summary>
            <param name="scope">The extender scope.</param>
            <remarks>
            Two scopes are considered equal when the string values are equal. The comparison is case-insensitive.
            </remarks>
        </member>
        <member name="M:CMS.Base.Extender`1.InitializeInternal(`0)">
            <summary>
            Allows the extender to attach a behavior to the specified instance. This method is for internal use only.
            </summary>
            <param name="instance">The instance to attach a behavior to.</param>
        </member>
        <member name="M:CMS.Base.Extender`1.Initialize(`0)">
            <summary>
            Allows the extender to attach a behavior to the specified instance.
            </summary>
            <param name="instance">The instance to attach a behavior to.</param>
        </member>
        <member name="T:CMS.Base.ObjectExtensions">
            <summary>
            Provides methods to initialize extenders.
            </summary>
        </member>
        <member name="M:CMS.Base.ObjectExtensions.InitializeExtenders``1(``0,System.String)">
            <summary>
            Attaches new behavior using extenders with the matching scope.
            </summary>
            <typeparam name="T">The type of instance to attach new behavior to.</typeparam>
            <param name="instance">The instance to attach new behavior to.</param>
            <param name="scope">The scope to limit a selection of extenders.</param>
        </member>
        <member name="T:CMS.Base.ExtensionAttribute">
            <summary>
            Extension attribute. Place above particular class to register its extension.
            </summary>
        </member>
        <member name="P:CMS.Base.ExtensionAttribute.ExtensionType">
            <summary>
            Extension type
            </summary>
        </member>
        <member name="M:CMS.Base.ExtensionAttribute.#ctor(System.Type)">
            <summary>
            Extends the class with the specified extension
            </summary>
            <param name="extensionType">Extension type</param>
        </member>
        <member name="M:CMS.Base.ExtensionAttribute.RegisterTo(System.Type)">
            <summary>
            Registers the extension within the system
            </summary>
            <param name="type">Object type to which the extension will be registered</param>
        </member>
        <member name="M:CMS.Base.ExtensionAttribute.GetExtensionObject">
            <summary>
            Creates an extension object based on extension type
            </summary>
        </member>
        <member name="T:CMS.Base.PropertyAttribute">
            <summary>
            Extension attribute
            </summary>
        </member>
        <member name="P:CMS.Base.PropertyAttribute.PropertyName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="M:CMS.Base.PropertyAttribute.#ctor(System.Type,System.String)">
            <summary>
            Extends the class with the specified extension
            </summary>
            <param name="extensionType">Extension type</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.PropertyAttribute.RegisterTo(System.Type)">
            <summary>
            Registers the extension within the system
            </summary>
            <param name="type">Object type to which the extension will be registered</param>
        </member>
        <member name="T:CMS.Base.Extend`1">
            <summary>
            Extension storage
            </summary>
        </member>
        <member name="M:CMS.Base.Extend`1.WithMetadata``1">
            <summary>
            Extends the object with the given static extension
            </summary>
        </member>
        <member name="M:CMS.Base.Extend`1.With``1">
            <summary>
            Extends the object with the given static extension
            </summary>
        </member>
        <member name="M:CMS.Base.Extend`1.WithProperty``1(System.String)">
            <summary>
            Extends the type with a new generic property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extend`1.WithStaticProperty``1(System.String)">
            <summary>
            Extends the type with a new generic static property
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extend`1.WithStaticProperty``1(System.String,System.Func{``0},System.Action{``0})">
            <summary>
            Extends the type with a new generic static property
            </summary>
            <param name="propertyName">Property name</param>
            <param name="getter">Getter function</param>
            <param name="setter">Setter function</param>
        </member>
        <member name="T:CMS.Base.ExtendList`2">
            <summary>
            List extensions
            </summary>
        </member>
        <member name="M:CMS.Base.ExtendList`2.With(System.String)">
            <summary>
            Extends the object with the given static extension
            </summary>
            <param name="itemName">Item name</param>
        </member>
        <member name="T:CMS.Base.AbstractObject">
            <summary>
            Abstract class for the data container with no functionality
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractObject.Property``1(System.String)">
            <summary>
            Returns the extension property for the object
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="T:CMS.Base.IExtensible">
            <summary>
            Defines an object extensible by other objects as properties
            </summary>
        </member>
        <member name="M:CMS.Base.IExtensible.Property``1(System.String)">
            <summary>
            Returns the property of the object
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="T:CMS.Base.Extension">
            <summary>
            Helper methods for creating extension objects from specific type
            </summary>
        </member>
        <member name="F:CMS.Base.Extension.LockObject">
            <summary>
            Object for locking the context. We lock with a single global lock for all extensions to avoid deadlocks when chaining through multiple generic classes.
            </summary>
        </member>
        <member name="M:CMS.Base.Extension.CreateFromType(System.Type)">
            <summary>
            Creates a generic extension from the given type
            </summary>
        </member>
        <member name="M:CMS.Base.Extension.CreatePropertyFromType(System.Type)">
            <summary>
            Creates a generic property from the given type
            </summary>
        </member>
        <member name="T:CMS.Base.Extension`1">
            <summary>
            Storage for static extensions
            </summary>
        </member>
        <member name="M:CMS.Base.Extension`1.AddAsProperty(System.Type,System.String)">
            <summary>
            Adds the property to the given type
            </summary>
            <param name="type">Type to which register the property</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddAsProperty(System.Type,System.String,CMS.Base.GenericExtension{`0})">
            <summary>
            Adds the property to the given type
            </summary>
            <param name="type">Type to which register the property</param>
            <param name="propertyName">Property name</param>
            <param name="ext">Extension object</param>
            <exception cref="T:System.ArgumentException">Thrown when <see cref="T:CMS.Base.IExtensible"/> can not be assigned to the type of <paramref name="type"/> parameter</exception>
        </member>
        <member name="M:CMS.Base.Extension`1.GetPropertyForObject(System.Object,System.String)">
            <summary>
            Gets all extensions for the given object
            </summary>
            <param name="obj">Object to process</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetPropertyForType(System.Type,System.String)">
            <summary>
            Gets all extensions for the given object
            </summary>
            <param name="type">Type to search</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddPropertiesForType(CMS.Base.StringSafeDictionary{CMS.Base.GenericExtension{`0}}@,System.Type)">
            <summary>
            Adds the extension for the given type to the list of extensions
            </summary>
            <param name="properties">List of extensions</param>
            <param name="type">Type to add</param>
        </member>
        <member name="M:CMS.Base.Extension`1.CollectPropertiesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets all static properties for the given object type
            </summary>
            <param name="type">Type to check</param>
            <param name="includeInheritedTypes">Include inherited types</param>
            <param name="includeInterfaces">Include interfaces</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetPropertiesForType(System.Type)">
            <summary>
            Gets all extensions for the given object type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Base.Extension`1.FindPropertyForType(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the property for the given type
            </summary>
            <param name="type">Type to search</param>
            <param name="propertyName">Property name</param>
            <param name="includeInheritedTypes">Include inherited types</param>
            <param name="includeInterfaces">Include interfaces</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetPropertyForSpecificType(System.Type,System.String)">
            <summary>
            Tries to get property for specific type
            </summary>
            <param name="type">Type to check</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddAsStaticProperty(System.Type,System.String)">
            <summary>
            Adds the static property to the given type
            </summary>
            <param name="type">Type to which register the property</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddAsStaticProperty(System.Type,System.String,CMS.Base.GenericProperty{`0})">
            <summary>
            Adds the static property to the given type
            </summary>
            <param name="type">Type to which register the property</param>
            <param name="propertyName">Property name</param>
            <param name="ext">Extension object</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetBaseProperties(CMS.Base.GenericProperty{`0})">
            <summary>
            Gets the base property from the property
            </summary>
            <param name="ext">Extension</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetStaticPropertyForType(System.Type,System.String)">
            <summary>
            Tries to get property for specific type
            </summary>
            <param name="type">Type to check</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.FindStaticPropertyForType(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the static property for the given type
            </summary>
            <param name="type">Type to search</param>
            <param name="propertyName">Property name</param>
            <param name="includeInheritedTypes">Include inherited types</param>
            <param name="includeInterfaces">Include interfaces</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetStaticPropertyForSpecificType(System.Type,System.String)">
            <summary>
            Tries to get property for specific type
            </summary>
            <param name="type">Type to check</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetStaticPropertiesForObject(System.Object)">
            <summary>
            Tries to get static properties for specific type
            </summary>
            <param name="obj">Object to check</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetStaticPropertiesForSpecificType(System.Type)">
            <summary>
            Tries to get static properties for specific type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetStaticPropertiesForType(System.Type)">
            <summary>
            Gets all extensions for the given object type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Base.Extension`1.CollectStaticPropertiesForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets all static properties for the given object type
            </summary>
            <param name="type">Type to check</param>
            <param name="includeInheritedTypes">Include inherited types</param>
            <param name="includeInterfaces">Include interfaces</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddStaticPropertiesForType(CMS.Base.StringSafeDictionary{CMS.Base.GenericProperty{`0}}@,System.Type)">
            <summary>
            Adds the extension for the given type to the list of extensions
            </summary>
            <param name="properties">List of extensions</param>
            <param name="type">Type to add</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddTo(System.Type)">
            <summary>
            Adds the extension to the given type
            </summary>
            <param name="type">Type to which register the extension</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddTo(System.Type,CMS.Base.GenericExtension{`0})">
            <summary>
            Adds the extension to the given type
            </summary>
            <param name="type">Type to which register the extension</param>
            <param name="ext">Extension to register</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetBaseExtensions(CMS.Base.GenericExtension{`0})">
            <summary>
            Gets the base property from the property
            </summary>
            <param name="ext">Extension</param>
        </member>
        <member name="M:CMS.Base.Extension`1.GetExtensionsForType``1">
            <summary>
            Gets all extensions for the given object type
            </summary>
        </member>
        <member name="M:CMS.Base.Extension`1.GetExtensionsForType(System.Type)">
            <summary>
            Gets all extensions for the given object type
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.Base.Extension`1.CollectExtensionsForType(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Gets all extensions for the given object type
            </summary>
            <param name="type">Type to check</param>
            <param name="includeInheritedTypes">Include inherited types</param>
            <param name="includeInterfaces">Include interfaces</param>
        </member>
        <member name="M:CMS.Base.Extension`1.AddExtensionsForType(System.Collections.Generic.List{System.Lazy{`0}}@,System.Type)">
            <summary>
            Adds the extension for the given type to the list of extensions
            </summary>
            <param name="extensions">List of extensions</param>
            <param name="type">Type to add</param>
        </member>
        <member name="M:CMS.Base.Extension`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.Extension`1.GetExtensions">
            <summary>
            Returns the merged list of all the extensions for all the types.
            </summary>
        </member>
        <member name="M:CMS.Base.Extension`1.ClearExtensions">
            <summary>
            Clears the registered extensions
            </summary>
            <remarks>
            This method is intended for tests only. Clearing the extensions while other threads
            collect the extensions may give unexpected results.
            </remarks>
        </member>
        <member name="M:CMS.Base.Extension`1.EnsureRegisteredAttributes(System.Type)">
            <summary>
            Ensures that the attributes for the given type are registered within extensions
            </summary>
            <param name="type">Type to process</param>
        </member>
        <member name="T:CMS.Base.GenericExtension`1">
            <summary>
            Generic extension container
            </summary>
        </member>
        <member name="P:CMS.Base.GenericExtension`1.Instance">
            <summary>
            Property value. Initializes the extension object if not available
            </summary>
        </member>
        <member name="P:CMS.Base.GenericExtension`1.LazyInstance">
            <summary>
            Lazy instance of the extension
            </summary>
        </member>
        <member name="P:CMS.Base.GenericExtension`1.IsInitialized">
            <summary>
            Returns true if the extension is initialized
            </summary>
        </member>
        <member name="P:CMS.Base.GenericExtension`1.PropertyInitializer">
            <summary>
            Property initializer
            </summary>
        </member>
        <member name="P:CMS.Base.GenericExtension`1.ParentExtension">
            <summary>
            Parent extension. If set, provides instance object to current extension
            </summary>
        </member>
        <member name="P:CMS.Base.GenericExtension`1.Name">
            <summary>
            Name of the extension
            </summary>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.GetInstance">
            <summary>
            Gets the extension object instance
            </summary>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.SetInstance(System.Object)">
            <summary>
            Sets the extension object instance
            </summary>
            <param name="value">New instance value</param>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.Initialize">
            <summary>
            Initializes the extension
            </summary>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.NewValue">
            <summary>
            Creates a new value of the given type
            </summary>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.NewGenericProperty(System.Object)">
            <summary>
            Creates a new property of the given type, initialized to the extension value
            </summary>
            <param name="obj">Parent object for the property</param>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.NewProperty(System.Object)">
            <summary>
            Creates a new property of the given type, initialized to the extension value
            </summary>
            <param name="obj">Parent object for the property</param>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.WithLazyInitialization(System.Func{System.Object,`0})">
            <summary>
            Sets up the lazy initialization over this property
            </summary>
            <param name="initializer">Property initializer</param>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.RegisterAsPropertyTo(System.Type,System.String)">
            <summary>
            Registers the extension as a property to the given type
            </summary>
            <param name="type">Target type</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.GenericExtension`1.RegisterAsExtensionTo(System.Type)">
            <summary>
            Registers the extension as an extension to the given type
            </summary>
            <param name="type">Target type</param>
        </member>
        <member name="T:CMS.Base.IGenericExtension">
            <summary>
            Interface for the generic extension
            </summary>
        </member>
        <member name="P:CMS.Base.IGenericExtension.ParentExtension">
            <summary>
            Parent extension. If set, provides instance object to current extension
            </summary>
        </member>
        <member name="M:CMS.Base.IGenericExtension.GetInstance">
            <summary>
            Returns the extension object instance
            </summary>
        </member>
        <member name="M:CMS.Base.IGenericExtension.SetInstance(System.Object)">
            <summary>
            Sets the extension object instance
            </summary>
            <param name="value">New instance value</param>
        </member>
        <member name="M:CMS.Base.IGenericExtension.RegisterAsPropertyTo(System.Type,System.String)">
            <summary>
            Registers the extension as a property to the given type
            </summary>
            <param name="type">Target type</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.IGenericExtension.RegisterAsExtensionTo(System.Type)">
            <summary>
            Registers the extension as an extension to the given type
            </summary>
            <param name="type">Target type</param>
        </member>
        <member name="M:CMS.Base.IGenericExtension.NewGenericProperty(System.Object)">
            <summary>
            Creates a new property inferred from this extension
            </summary>
        </member>
        <member name="T:CMS.Base.AttributeHelper">
            <summary>
            Provides methods to access types attributes. Supports extra attributes provided by the <see cref="T:CMS.Base.Extension"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.AttributeHelper.GetCustomAttributes(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Gets the custom attributes of the given type for the given member.
            </summary>
            <param name="method">Method for which extract the custom attributes.</param>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned.</param>
        </member>
        <member name="T:CMS.Base.IMetadata">
            <summary>
            Basic interface for injecting metadata
            </summary>
        </member>
        <member name="T:CMS.Base.MetadataContainer">
            <summary>
            Container for the extra metadata for the given type
            </summary>
        </member>
        <member name="P:CMS.Base.MetadataContainer.MetadataType">
            <summary>
            Type that defines the extra metadata
            </summary>
        </member>
        <member name="M:CMS.Base.MetadataContainer.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:CMS.Base.MetadataContainer.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="metadataType">Type that defines the extra metadata</param>
        </member>
        <member name="T:CMS.Base.DynamicProperty`1">
            <summary>
            Represents a generic property
            </summary>
        </member>
        <member name="P:CMS.Base.DynamicProperty`1.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="P:CMS.Base.DynamicProperty`1.Getter">
            <summary>
            Gets or sets the getter for the property
            </summary>
        </member>
        <member name="P:CMS.Base.DynamicProperty`1.Setter">
            <summary>
            Gets or sets the setter for the property
            </summary>
        </member>
        <member name="M:CMS.Base.DynamicProperty`1.#ctor(System.String,System.Func{`0},System.Action{`0})">
            <summary>
            Constructor
            </summary>
            <param name="name">Property name</param>
            <param name="getter">Getter function</param>
            <param name="setter">Setter function</param>
        </member>
        <member name="T:CMS.Base.ExtensionProperties">
            <summary>
            Extension properties
            </summary>
        </member>
        <member name="M:CMS.Base.ExtensionProperties.EnsureProperty``1(System.Object,System.String)">
            <summary>
            Ensures that the given property is properly initialized
            </summary>
            <param name="obj">Parent object</param>
            <param name="propertyName">Property name</param>
            <exception cref="T:System.InvalidOperationException">Thrown when property of name from <paramref name="propertyName"/> is not found in <paramref name="obj"/>.</exception>
        </member>
        <member name="T:CMS.Base.GenericProperty`1">
            <summary>
            Represents a generic property
            </summary>
        </member>
        <member name="P:CMS.Base.GenericProperty`1.ValueIsSingleton">
            <summary>
            If true, the property ensures an object instance in it's value if null
            </summary>
        </member>
        <member name="P:CMS.Base.GenericProperty`1.Initializer">
            <summary>
            Property initializer
            </summary>
        </member>
        <member name="P:CMS.Base.GenericProperty`1.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="P:CMS.Base.GenericProperty`1.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:CMS.Base.GenericProperty`1.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="P:CMS.Base.GenericProperty`1.ParentProperty">
            <summary>
            Parent property. If set, provides value to current extension
            </summary>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.#ctor">
            <summary>
            Empty constructor, creates a property without a name, which expects that its parent property will be set
            </summary>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Property name</param>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.RegisterAsStaticPropertyTo(System.Type,System.String)">
            <summary>
            Registers the extension as a property to the given type
            </summary>
            <param name="type">Target type</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.GetValue">
            <summary>
            Gets the property value for internal purposes
            </summary>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.AsSingleton">
            <summary>
            If set, the value of the object points to a singleton of this object
            </summary>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.WithLazyInitialization(System.Func{`0})">
            <summary>
            Sets up the lazy initialization over this property
            </summary>
            <param name="initializer">Property initializer</param>
        </member>
        <member name="M:CMS.Base.GenericProperty`1.op_Implicit(CMS.Base.GenericProperty{`0})~`0">
            <summary>
            Implicit conversion to extension type
            </summary>
            <param name="ext">Extension to convert</param>
        </member>
        <member name="T:CMS.Base.IGenericProperty">
            <summary>
            Interface for the generic extension
            </summary>
        </member>
        <member name="P:CMS.Base.IGenericProperty.ParentProperty">
            <summary>
            Parent property. If set, provides value to current extension
            </summary>
        </member>
        <member name="P:CMS.Base.IGenericProperty.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:CMS.Base.IGenericProperty.Type">
            <summary>
            Type of the property
            </summary>
        </member>
        <member name="M:CMS.Base.IGenericProperty.RegisterAsStaticPropertyTo(System.Type,System.String)">
            <summary>
            Registers the extension as a property to the given type
            </summary>
            <param name="type">Target type</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:CMS.Base.IGenericProperty.GetValue">
            <summary>
            Gets the value of the property
            </summary>
        </member>
        <member name="T:CMS.Base.Property`1">
            <summary>
            Defines a property implementation
            </summary>
        </member>
        <member name="P:CMS.Base.Property`1.Setter">
            <summary>
            Property setter
            </summary>
        </member>
        <member name="P:CMS.Base.Property`1.Getter">
            <summary>
            Property getter
            </summary>
        </member>
        <member name="P:CMS.Base.Property`1.InnerValue">
            <summary>
            Inner property value
            </summary>
        </member>
        <member name="P:CMS.Base.Property`1.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="M:CMS.Base.Property`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.Property`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Constructor
            </summary>
            <param name="getter">Property getter</param>
            <param name="setter">Property setter</param>
        </member>
        <member name="M:CMS.Base.Property`1.op_Implicit(CMS.Base.Property{`0})~`0">
            <summary>
            Implicit conversion operator to property value
            </summary>
            <param name="prop">Property</param>
        </member>
        <member name="T:CMS.Base.ConditionalObjectFactory`1">
            <summary>
            Object factory which includes condition on the object creation
            </summary>
        </member>
        <member name="P:CMS.Base.ConditionalObjectFactory`1.Conditions">
            <summary>
            Condition function which evaluates whether the object of the given type can be created based on the input data
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalObjectFactory`1.CanCreateObject(System.Object)">
            <summary>
            Returns true if the factory is able to create the object based on the given parameter
            </summary>
            <param name="parameter">Object parameter</param>
        </member>
        <member name="M:CMS.Base.ConditionalObjectFactory`1.WhenParameter``1(System.Func{``0,System.Boolean})">
            <summary>
            Adds the object condition to the factory
            </summary>
            <param name="condition">Condition that must be matched</param>
        </member>
        <member name="T:CMS.Base.IConditionalObjectFactory">
            <summary>
            Interface for the conditional object factory
            </summary>
        </member>
        <member name="M:CMS.Base.IConditionalObjectFactory.WhenParameter``1(System.Func{``0,System.Boolean})">
            <summary>
            Adds the object condition to the factory
            </summary>
            <param name="condition">Condition that must be matched</param>
        </member>
        <member name="T:CMS.Base.IObjectCondition">
            <summary>
            Interface for the object condition
            </summary>
        </member>
        <member name="M:CMS.Base.IObjectCondition.Matches(System.Object)">
            <summary>
            Returns true if the condition over the given object matches
            </summary>
            <param name="value">Value to match</param>
        </member>
        <member name="T:CMS.Base.ObjectCondition`1">
            <summary>
            Generic object condition
            </summary>
        </member>
        <member name="P:CMS.Base.ObjectCondition`1.Condition">
            <summary>
            Condition function which evaluates whether the object of the given type can be created based on the input data
            </summary>
        </member>
        <member name="M:CMS.Base.ObjectCondition`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="condition">Condition for the factory</param>
        </member>
        <member name="M:CMS.Base.ObjectCondition`1.Matches(System.Object)">
            <summary>
            Returns true if the condition over the given object matches
            </summary>
            <param name="value">Value to match</param>
        </member>
        <member name="T:CMS.Base.ObjectGenerator`1">
            <summary>
            Generator class for the various type of objects
            </summary>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.#ctor(CMS.Core.IObjectFactory)">
            <summary>
            Constructor
            </summary>
            <param name="defaultFactory">Default factory that will be used if no object type matches</param>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.CreateNewObject(System.Object)">
            <summary>
            Creates new object of the given type
            </summary>
            <param name="parameter">Parameter used in <see cref="M:CMS.Core.IObjectFactory.CanCreateObject(System.Object)"/> method.</param>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.CreateNewObject(System.String)">
            <summary>
            Creates new object of the given type
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.TryFactory(CMS.Core.IObjectFactory,System.Object)">
            <summary>
            Tries to create an object using given factory
            </summary>
            <param name="factory">Factory to try</param>
            <param name="parameter">Object parameter</param>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.RegisterDefaultFactory(CMS.Core.IObjectFactory,System.Boolean)">
            <summary>
            Registers the default object factory
            </summary>
            <param name="factory">Object factory to register</param>
            <param name="topPriority">If true, this factory is prioritized against </param>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.RegisterObjectType(System.String,CMS.Core.IObjectFactory)">
            <summary>
            Registers the given object type
            </summary>
            <param name="objectType">Object type string</param>
            <param name="factory">Object factory</param>
        </member>
        <member name="M:CMS.Base.ObjectGenerator`1.RegisterObjectType``1(System.String)">
            <summary>
            Registers the given object type
            </summary>
            <param name="objectType">Object type string</param>
        </member>
        <member name="T:CMS.Base.AbstractAdvancedHandler">
            <summary>
            Base class for advanced handler classes
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractAdvancedHandler.Continue">
            <summary>
            Specifies whether the context of execution should continue. If set to false, no additional events will be fired.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractAdvancedHandler.SupportsCancel">
            <summary>
            If true, the handler supports cancelling of the event. If set and handler is already cancelled, throws an exception.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractAdvancedHandler.Finish">
            <summary>
            Finishes the event and raises the After event actions
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractHandler">
            <summary>
            Base class for handler classes
            </summary>
        </member>
        <member name="F:CMS.Base.AbstractHandler.mExecutions">
            <summary>
            Number of executions of the event
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.Name">
            <summary>
            Event name. The name serves for debug purposes and to uniquely identify the handler.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.ControlRecursion">
            <summary>
            If true, the recursion control is enabled on this handler.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.IsEvent">
            <summary>
            Returns true if the handler instance is representing an executed event. Returns false in case of static handler base.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.OneTime">
            <summary>
            If true, this event can be executed only once. If the event was already executed, and new handler is added, it executes immediately.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.WasExecuted">
            <summary>
            Returns true if the event was already executed
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.Debug">
            <summary>
            If true, the handler is included in debug
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractHandler.IsStatic">
            <summary>
            True, if the handler is a static handler
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHandler.AssignCurrentHandler(System.EventArgs)">
            <summary>
            Assigns the current handler to the event arguments
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.CheckBase(System.String)">
            <summary>
            Checks if the handler is base handler instance, and fires an exception if not
            </summary>
            <param name="member">Member that is called</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.CheckEvent(System.String)">
            <summary>
            Checks if the handler is event handler instance, and fires an exception if not
            </summary>
            <param name="member">Member that is called</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.CountExecution">
            <summary>
            Counts the execution of the event
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHandler.RemoveEvent``1(System.Collections.Generic.List{``0}@,``0)">
            <summary>
            Removes the event from the list
            </summary>
            <param name="list">List of events</param>
            <param name="h">Event to remove</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.AddEvent``1(System.Collections.Generic.List{``0}@,``0)">
            <summary>
            Adds the event to the list
            </summary>
            <param name="list">List of events</param>
            <param name="h">Event to add</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.Raise``1(System.String,System.Collections.Generic.List{System.EventHandler{``0}},``0,System.Boolean)">
            <summary>
            Raises the list of events
            </summary>
            <param name="partName">Name of the part executing the handler</param>
            <param name="list">List of events to raise</param>
            <param name="e">Event arguments</param>
            <param name="important">If true, the event if considered important</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.CallEventHandler``1(System.EventHandler{``0},``0)">
            <summary>
            Calls the event handler
            </summary>
            <param name="h">Handler to call</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.SetParent(CMS.Base.AbstractHandler)">
            <summary>
            Sets the parent event of the event
            </summary>
            <param name="parent">New parent event</param>
        </member>
        <member name="M:CMS.Base.AbstractHandler.Clear">
            <summary>
            Clears all bound event handlers from the event and resets the number of executions of the event
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHandler.Reset">
            <summary>
            Resets the number of executions of the event
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractHandler.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="T:CMS.Base.ActionCancelledException">
            <summary>
            Exception thrown in case the action was cancelled
            </summary>
        </member>
        <member name="M:CMS.Base.ActionCancelledException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CMS.Base.ActionCancelledException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CMS.Base.AdvancedHandler`1">
            <summary>
            General CMS handler with one generic parameter
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`1.StartEvent(`0)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.Base.AdvancedHandler">
            <summary>
            General CMS handler
            </summary>
        </member>
        <member name="T:CMS.Base.AdvancedHandler`2">
            <summary>
            Generic handler class
            </summary>
        </member>
        <member name="F:CMS.Base.AdvancedHandler`2.mSupportsCancel">
            <summary>
            If true, the handler supports cancelling of the event
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.WasFinished">
            <summary>
            Flag indicating whether the event was finished or not
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.Allow">
            <summary>
            If true, the event is allowed to be raised
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.Parent">
            <summary>
            Parent handler
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.EventArguments">
            <summary>
            Handler arguments
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.Continue">
            <summary>
            Specifies whether the context of execution should continue. If set to false, no additional events will be fired.
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.SupportsCancel">
            <summary>
            If true, the handler supports cancelling of the event. If set and handler is already cancelled, throws an exception.
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.IsBound">
            <summary>
            Returns true if the handler has some events bound
            </summary>
        </member>
        <member name="P:CMS.Base.AdvancedHandler`2.LogItem">
            <summary>
            Handlers log item of this handler
            </summary>
        </member>
        <member name="E:CMS.Base.AdvancedHandler`2.Before">
            <summary>
            Raised before the event occurs
            </summary>
        </member>
        <member name="E:CMS.Base.AdvancedHandler`2.After">
            <summary>
            Raised after the event occurs
            </summary>
        </member>
        <member name="E:CMS.Base.AdvancedHandler`2.Failure">
            <summary>
            Raised in case the event handler didn't properly call finalization
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.Clear">
            <summary>
            Clears all bound event handlers from the event and resets the number of executions of the event
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.RaiseBefore(`1)">
            <summary>
            Raises the before event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.RaiseAfter(`1)">
            <summary>
            Raises the after event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.RaiseFailure(`1)">
            <summary>
            Raises the failure event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.CheckContinue">
            <summary>
            Checks whether the action can continue and if not, fires an exception.
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.StartEvent">
            <summary>
            Initiates the new handler context
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.StartEvent(System.EventArgs)">
            <summary>
            Initiates the new handler context
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.StartEvent(`1,System.Boolean)">
            <summary>
            Initiates the new handler context
            </summary>
            <param name="e">Event arguments</param>
            <param name="allowEvent">If true, it is allowed to raise the event</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.Finish">
            <summary>
            Finishes the event and raises the After event actions
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.SetParent(CMS.Base.AbstractHandler)">
            <summary>
            Sets the parent event of the event
            </summary>
            <param name="parent">New parent event</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.AddBefore">
            <summary>
            Adds the conditional before handler
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.AddAfter">
            <summary>
            Adds the conditional after handler
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandler`2.AddFailure">
            <summary>
            Adds the conditional after handler
            </summary>
        </member>
        <member name="T:CMS.Base.AdvancedHandlerInvoker`2">
            <summary>
            Represents an event invoker that can raise specified event for each item in collection.
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandlerInvoker`2.StartEvents(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`1})">
            <summary>
            Raise specified event for each item in collection.
            </summary>
            <param name="items">Items over which the handler iterates.</param>
            <param name="startFunc">Function which starts individual handler iterations.</param>
        </member>
        <member name="M:CMS.Base.AdvancedHandlerInvoker`2.FinishEvents">
            <summary>
            Executes <see cref="M:CMS.HandlersExtensions.FinishEvent(CMS.Base.AbstractAdvancedHandler)"/> method for all handlers created within the item iteration.
            </summary>
        </member>
        <member name="M:CMS.Base.AdvancedHandlerInvoker`2.Dispose">
            <summary>
            Executes <see cref="M:CMS.Base.AbstractHandler.Dispose"/> method for all handlers created within the item iteration.
            </summary>
        </member>
        <member name="T:CMS.Base.CMSEventArgs`1">
            <summary>
            Base class for the CMS event arguments with one generic parameter
            </summary>
        </member>
        <member name="P:CMS.Base.CMSEventArgs`1.Parameter">
            <summary>
            Event parameter
            </summary>
        </member>
        <member name="T:CMS.Base.CMSEventArgs">
            <summary>
            Base class for the CMS event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.CMSEventArgs.OriginalEventArgs">
            <summary>
            Original event arguments for the event
            </summary>
        </member>
        <member name="P:CMS.Base.CMSEventArgs.CurrentHandler">
            <summary>
            Currently executing handler
            </summary>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.#ctor(System.EventArgs)">
            <summary>
            Constructor
            </summary>
            <param name="e">Original event arguments for the event</param>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.Lock(System.Object)">
            <summary>
            Locks the event on the given lock object. The context stays locked until the handler is disposed.
            </summary>
            <param name="lockObject">Lock object</param>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.DetectRecursion(System.String)">
            <summary>
            Prevents the recursion of the handler execution using the given unique key. The handler won't execute again with the given key until the current execution is finished. Returns true, if recursion is detected and the code shouldn't continue. Otherwise returns false.
            </summary>
            <param name="recursionKey">Recursion key</param>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.Using(System.IDisposable)">
            <summary>
            Adds the given object to the list of object that get disposed when the handler object is disposed
            </summary>
            <param name="obj">Object to dispose</param>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.Dispose">
            <summary>
            Make sure the objects get disposed
            </summary>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.CallOnDispose(System.Action)">
            <summary>
            Adds the given action to the list of actions called when the handler object is disposed
            </summary>
            <param name="method">Method to call</param>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.CallWhenFinished(System.Action)">
            <summary>
            Adds the given action to be called when the handler finishes
            </summary>
            <param name="method">Action to call</param>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.CallFinishActions">
            <summary>
            Disposes the objects that were previously registered by the Using method
            </summary>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.DisposeUsedObjects">
            <summary>
            Disposes all objects used by this handler
            </summary>
        </member>
        <member name="M:CMS.Base.CMSEventArgs.Cancel">
            <summary>
            Cancels the current handler execution
            </summary>
        </member>
        <member name="T:CMS.Base.SimpleHandler`1">
            <summary>
            General simple handler with one generic parameter
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleHandler`1.StartEvent(`0)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="obj">Handled object</param>
        </member>
        <member name="T:CMS.Base.SimpleHandler">
            <summary>
            General simple handler
            </summary>
        </member>
        <member name="T:CMS.Base.SimpleHandler`2">
            <summary>
            Generic handler class
            </summary>
        </member>
        <member name="P:CMS.Base.SimpleHandler`2.Parent">
            <summary>
            Parent handler
            </summary>
        </member>
        <member name="P:CMS.Base.SimpleHandler`2.EventArguments">
            <summary>
            Handler arguments
            </summary>
        </member>
        <member name="P:CMS.Base.SimpleHandler`2.IsBound">
            <summary>
            Returns true if the handler has some events bound
            </summary>
        </member>
        <member name="F:CMS.Base.SimpleHandler`2.mExecute">
            <summary>
            Raised before the event occurs
            </summary>
        </member>
        <member name="E:CMS.Base.SimpleHandler`2.Execute">
            <summary>
            Raised before the event occurs
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleHandler`2.RaiseExecute(`1)">
            <summary>
            Raises the execute event
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.SimpleHandler`2.StartEvent(`1)">
            <summary>
            Initiates the new handler context
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CMS.Base.SimpleHandler`2.SetParent(CMS.Base.AbstractHandler)">
            <summary>
            Sets the parent event of the event
            </summary>
            <param name="parent">New parent event</param>
        </member>
        <member name="M:CMS.Base.SimpleHandler`2.Clear">
            <summary>
            Clears all bound event handlers from the event and resets the number of executions of the event
            </summary>
        </member>
        <member name="T:CMS.Base.BeforeConditionalEvent`1">
            <summary>
            Conditional event execute in before handler
            </summary>
        </member>
        <member name="P:CMS.Base.BeforeConditionalEvent`1.CancelEvent">
            <summary>
            If true, the event is canceled after calling the handler
            </summary>
        </member>
        <member name="M:CMS.Base.BeforeConditionalEvent`1.ThenCancel">
            <summary>
            Ensures that the event gets cancelled after this handler is called
            </summary>
        </member>
        <member name="M:CMS.Base.BeforeConditionalEvent`1.ThenContinue">
            <summary>
            Ensures that the event continues after this handler is called. Also dismissed the ThenCancel call.
            </summary>
        </member>
        <member name="M:CMS.Base.BeforeConditionalEvent`1.ExecuteHandler(System.Object,`0)">
            <summary>
            Executes the handler
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:CMS.Base.ConditionalEvent`1">
            <summary>
            Conditional event execute in before handler
            </summary>
        </member>
        <member name="T:CMS.Base.ConditionalEventBase`2">
            <summary>
            Defines a conditional event
            </summary>
        </member>
        <member name="T:CMS.Base.ConditionalEventBase`2.ConditionFunction">
            <summary>
            Delegate for the handler condition
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="P:CMS.Base.ConditionalEventBase`2.Conditions">
            <summary>
            Condition for the handler execution. If set, must return true in order to execute the handler
            </summary>
        </member>
        <member name="P:CMS.Base.ConditionalEventBase`2.Handler">
            <summary>
            Handler to execute
            </summary>
        </member>
        <member name="P:CMS.Base.ConditionalEventBase`2.Repeats">
            <summary>
            Number of repeats of the action
            </summary>
        </member>
        <member name="P:CMS.Base.ConditionalEventBase`2.TypedThis">
            <summary>
            Strongly typed identity
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.Call(System.Action)">
            <summary>
            Calls the given handler
            </summary>
            <param name="handler">Handler to call</param>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.Call(System.Action{`1})">
            <summary>
            Calls the given handler
            </summary>
            <param name="handler">Handler to call</param>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.Call(System.EventHandler{`1})">
            <summary>
            Calls the given handler
            </summary>
            <param name="handler">Handler to call</param>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.When(CMS.Base.ConditionalEventBase{`0,`1}.ConditionFunction)">
            <summary>
            Adds the condition to the conditional event
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.When(System.Func{`1,System.Boolean})">
            <summary>
            Adds the condition to the conditional event
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.When(System.Func{System.Boolean})">
            <summary>
            Adds the condition to the conditional event
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.Repeat(System.Int32)">
            <summary>
            Sets the number of allowed calls to the event
            </summary>
            <param name="i">Number of allowed calls</param>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.CanExecute(System.Object,`1)">
            <summary>
            Checks if the given handler can execute
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.GetHandler">
            <summary>
            Implicit operator to convert to event handler
            </summary>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.ExecuteHandler(System.Object,`1)">
            <summary>
            Executes the handler
            </summary>
            <param name="sender">Sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:CMS.Base.ConditionalEventBase`2.op_Implicit(CMS.Base.ConditionalEventBase{`0,`1})~System.EventHandler{`1}">
            <summary>
            Implicit operator to convert to event handler
            </summary>
        </member>
        <member name="T:CMS.Base.IConditionalEvent`1">
            <summary>
            Interface for conditional events
            </summary>
        </member>
        <member name="M:CMS.Base.IConditionalEvent`1.When(System.Func{System.Boolean})">
            <summary>
            Adds the condition to the conditional event
            </summary>
        </member>
        <member name="T:CMS.Base.OnDisposedCallback">
            <summary>
            Represents a method wrapper for a method which is called when the wrapper is disposed
            </summary>
        </member>
        <member name="P:CMS.Base.OnDisposedCallback.Callback">
            <summary>
            Method called when this object is disposed
            </summary>
        </member>
        <member name="M:CMS.Base.OnDisposedCallback.#ctor(System.Action)">
            <summary>
            Constructor
            </summary>
            <param name="callback">Callback to execute when the object is disposes</param>
        </member>
        <member name="M:CMS.Base.OnDisposedCallback.Dispose">
            <summary>
            Fires when the object disposes
            </summary>
        </member>
        <member name="T:CMS.Base.EventList">
            <summary>
            Dynamic event list that allows to register and raise events
            </summary>
        </member>
        <member name="F:CMS.Base.EventList.GLOBAL_ACTION">
            <summary>
            Global handler key
            </summary>
        </member>
        <member name="F:CMS.Base.EventList.mEvents">
            <summary>
            Table of registered events
            </summary>
        </member>
        <member name="P:CMS.Base.EventList.Name">
            <summary>
            Event list name
            </summary>
        </member>
        <member name="P:CMS.Base.EventList.IsStatic">
            <summary>
            True, if the event list is static
            </summary>
        </member>
        <member name="M:CMS.Base.EventList.RaiseEvent(System.Object,System.EventArgs,System.String)">
            <summary>
            Raises the given event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:CMS.Base.EventList.RaiseComponentEvent(System.Object,System.EventArgs,System.String,System.String)">
            <summary>
            Raises the given component event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
            <param name="componentName">Component name</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:CMS.Base.EventList.RaiseComponentEvent(System.Object,System.EventArgs,System.String,System.String,System.String)">
            <summary>
            Raises the given component event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
            <param name="componentName">Component name</param>
            <param name="eventName">Event name</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="M:CMS.Base.EventList.RaiseEvent(System.Object,System.EventArgs,System.String,System.String)">
            <summary>
            Raises the given event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
            <param name="eventName">Event name</param>
            <param name="actionName">Action name</param>
        </member>
        <member name="M:CMS.Base.EventList.RegisterForComponentEvent(System.String,System.String,System.EventHandler{System.EventArgs})">
            <summary>
            Registers the given event handler for an event to a specific component by its name
            </summary>
            <param name="componentName">Component name</param>
            <param name="eventName">Event name</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:CMS.Base.EventList.RegisterForComponentEvent(System.String,System.String,System.String,System.EventHandler{System.EventArgs})">
            <summary>
            Registers the given event handler for an event to a specific component by its name
            </summary>
            <param name="componentName">Component name</param>
            <param name="eventName">Event name</param>
            <param name="actionName">Action name</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:CMS.Base.EventList.RegisterForComponentEvent``1(System.String,System.String,System.String,System.EventHandler{``0})">
            <summary>
            Registers the given event handler for an event to a specific component by its name
            </summary>
            <param name="componentName">Component name</param>
            <param name="eventName">Event name</param>
            <param name="actionName">Action name</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:CMS.Base.EventList.RegisterForEvent(System.String,System.EventHandler{System.EventArgs})">
            <summary>
            Registers the given event handler for an event
            </summary>
            <param name="eventName">Event name</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:CMS.Base.EventList.RegisterForEvent(System.String,System.String,System.EventHandler{System.EventArgs})">
            <summary>
            Registers the given event handler for an event
            </summary>
            <param name="eventName">Event name</param>
            <param name="actionName">Action name</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="M:CMS.Base.EventList.RegisterForEvent``1(System.String,System.String,System.EventHandler{``0})">
            <summary>
            Registers the given event handler for an event
            </summary>
            <param name="eventName">Event name</param>
            <param name="actionName">Action name</param>
            <param name="handler">Handler method</param>
        </member>
        <member name="T:CMS.Base.HandlersDebug">
            <summary>
            Handlers debug methods
            </summary>
        </member>
        <member name="P:CMS.Base.HandlersDebug.Settings">
            <summary>
            Debug settings
            </summary>
        </member>
        <member name="P:CMS.Base.HandlersDebug.CurrentRequestLog">
            <summary>
            Current request log.
            </summary>
        </member>
        <member name="P:CMS.Base.HandlersDebug.DebugCurrentRequest">
            <summary>
            Debug current request security operations.
            </summary>
        </member>
        <member name="M:CMS.Base.HandlersDebug.GetDebugSettings">
            <summary>
            Gets the debug settings
            </summary>
        </member>
        <member name="M:CMS.Base.HandlersDebug.NewLogTable">
            <summary>
            Creates a new table for the security log.
            </summary>
        </member>
        <member name="M:CMS.Base.HandlersDebug.StartHandlerOperation(System.String,System.String)">
            <summary>
            Logs the handler operation. Logs the handler operation to the file and to current request log for debugging.
            </summary>
            <param name="name">Name of the handler or method</param>
            <param name="partName">Name of the part of the handler that is called</param>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.Base.HandlersDebug.SetLogItemImportant(System.Data.DataRow)">
            <summary>
            Sets the log item as important one
            </summary>
            <param name="dr">Security log item</param>
        </member>
        <member name="M:CMS.Base.HandlersDebug.StartHandlerOperation(System.Reflection.MethodInfo)">
            <summary>
            Logs the handler operation. Logs the handler operation to the file and to current request log for debugging.
            </summary>
            <param name="method">Called method</param>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.Base.HandlersDebug.FinishHandlerOperation(System.Data.DataRow,System.Int32)">
            <summary>
            Finishes the log item
            </summary>
            <param name="dr">Log item</param>
            <param name="handlersCalled">Number of handlers that were called during the operation</param>
        </member>
        <member name="M:CMS.Base.HandlersDebug.LogHandlerOperation(System.String,System.String,System.Int32)">
            <summary>
            Logs the handler operation. Logs the handler operation to the file and to current request log for debugging.
            </summary>
            <param name="name">Name of the handler or method</param>
            <param name="partName">Name of the part of the handler that is called</param>
            <param name="indent">Indentation of the logged record</param>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.Base.HandlersDebug.LogHandlerOperationInternal(System.String,System.String,System.Int32)">
            <summary>
            Logs the handler operation. Logs the handler operation to the file and to current request log for debugging.
            </summary>
            <param name="name">Name of the handler or method</param>
            <param name="partName">Name of the part of the handler that is called</param>
            <param name="indent">Indentation of the logged record</param>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.Base.HandlersDebug.LogHandlerOperation(System.Reflection.MethodInfo,System.Boolean,System.Int32)">
            <summary>
            Logs the handler operation. Logs the handler operation to the file and to current request log for debugging.
            </summary>
            <param name="method">Methods called by the handler</param>
            <param name="methodExecuted">If true, the method was actually executed</param>
            <param name="indent">Indentation of the logged record</param>
            <returns>Returns the DataRow with new log item</returns>
        </member>
        <member name="M:CMS.Base.HandlersDebug.LogToFile(System.String,System.String,System.Int32)">
            <summary>
            Logs the handler operation to the log file.
            </summary>
            <param name="name">Name of the handler or method</param>
            <param name="partName">Name of the part of the handler that is called</param>
            <param name="indent">Indentation of the log</param>
        </member>
        <member name="T:CMS.Base.IRecursionControlHandler`1">
            <summary>
            Interface that defines the recursion control for the given handler
            </summary>
        </member>
        <member name="M:CMS.Base.IRecursionControlHandler`1.GetRecursionKey(`0)">
            <summary>
            Gets the recursion key of the class to identify recursion
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:CMS.Base.RecursionControl">
            <summary>
            Defines the section that can control and prevent recursion
            </summary>
        </member>
        <member name="P:CMS.Base.RecursionControl.Key">
            <summary>
            Section key - Uniquely identifies the section entry
            </summary>
        </member>
        <member name="P:CMS.Base.RecursionControl.AllowRecursion">
            <summary>
            If true, and the section key is set, the recursion is allowed for the calls with the same key
            </summary>
        </member>
        <member name="P:CMS.Base.RecursionControl.Continue">
            <summary>
            If true, the section is allowed to continue the execution
            </summary>
        </member>
        <member name="P:CMS.Base.RecursionControl.Storage">
            <summary>
            Storage that the section uses
            </summary>
        </member>
        <member name="M:CMS.Base.RecursionControl.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="key">Section key - Uniquely identifies the section entry</param>
            <param name="allowRecursion">If true, and the section key is set, the recursion is allowed for the calls with the same key</param>
        </member>
        <member name="M:CMS.Base.RecursionControl.Dispose">
            <summary>
            Disposes the object and releases recursion flag
            </summary>
        </member>
        <member name="T:CMS.Base.RestartRequiredEventArgs">
            <summary>
            Event arguments for <see cref="F:CMS.Base.SystemEvents.RestartRequired"/> event.
            </summary>
        </member>
        <member name="P:CMS.Base.RestartRequiredEventArgs.IsRestarted">
            <summary>
            Gets or sets whether the application was restarted during <see cref="F:CMS.Base.SystemEvents.RestartRequired"/> event execution.
            </summary>
        </member>
        <member name="T:CMS.Base.RestartRequiredHandler">
            <summary>
            Event handler for <see cref="F:CMS.Base.SystemEvents.RestartRequired"/> event.
            </summary>
        </member>
        <member name="T:CMS.Base.SimpleSystemHandler">
            <summary>
            Simple System handler
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleSystemHandler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleSystemHandler.#ctor(CMS.Base.SimpleSystemHandler)">
            <summary>
            Constructor
            </summary>
            <param name="parentHandler">Parent handler</param>
        </member>
        <member name="M:CMS.Base.SimpleSystemHandler.StartEvent(System.Exception,System.Boolean@)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="ex">Raised exception</param>
            <param name="logException">If true, the exception is logged to the event log</param>
        </member>
        <member name="T:CMS.Base.SystemEventArgs">
            <summary>
            System event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.SystemEventArgs.Exception">
            <summary>
            Raised exception
            </summary>
        </member>
        <member name="P:CMS.Base.SystemEventArgs.LogException">
            <summary>
            If true, the exception is allowed to be logged
            </summary>
        </member>
        <member name="M:CMS.Base.SystemEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:CMS.Base.SystemEvents">
            <summary>
            System events
            </summary>
        </member>
        <member name="F:CMS.Base.SystemEvents.Exception">
            <summary>
            Fires when exception occurs
            </summary>
        </member>
        <member name="F:CMS.Base.SystemEvents.RestartRequired">
            <summary>
            Fires when request for application restart was performed.
            </summary>
        </member>
        <member name="T:CMS.Base.ISiteInfo">
            <summary>
            Objects containing SiteInfo properties.
            </summary>
        </member>
        <member name="P:CMS.Base.ISiteInfo.SiteName">
            <summary>
            Site name
            </summary>
        </member>
        <member name="P:CMS.Base.ISiteInfo.DisplayName">
            <summary>
            Site display name.
            </summary>
        </member>
        <member name="P:CMS.Base.ISiteInfo.SiteID">
            <summary>
            Site ID
            </summary>
        </member>
        <member name="T:CMS.Base.ITreeNode">
            <summary>
            Objects containing TreeNode properties.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.NodeID">
            <summary>
            Gets the node ID.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.NodeGUID">
            <summary>
            Gets the node GUID.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.DocumentID">
            <summary>
            Gets the document ID.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.DocumentCulture">
            <summary>
            Gets the document culture.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.NodeAliasPath">
            <summary>
            Gets the node alias path.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.IsLink">
            <summary>
            Indicates whether the document is link to another document.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.NodeSiteID">
            <summary>
            Gets the node site ID.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.NodeSiteName">
            <summary>
            Gets the node site name.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.ClassName">
            <summary>
            Gets the node class name.
            </summary>
        </member>
        <member name="P:CMS.Base.ITreeNode.OriginalNodeSiteID">
            <summary>
            Gets the original node site ID. Returns NodeSiteID for standard document, LinkedNodeSiteID for linked document.
            </summary>
        </member>
        <member name="M:CMS.Base.ITreeNode.GetDocumentName">
            <summary>
            Gets friendly document name.
            </summary>
        </member>
        <member name="T:CMS.Base.IUserInfo">
            <summary>
            Objects containing UserInfo properties.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.SitesRoles">
            <summary>
            Gets the HashTable of the user sites and roles.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserIsHidden">
            <summary>
            Indicates if the user is hidden.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.LastName">
            <summary>
            Last name of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.FullName">
            <summary>
            Full name of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.LastLogon">
            <summary>
            Last logon date and time of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.PreferredCultureCode">
            <summary>
            Preferred culture code.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.MiddleName">
            <summary>
            Middle name of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.PreferredUICultureCode">
            <summary>
            Preferred UI culture code.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserEnabled">
            <summary>
            Indicates whether the user is enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.FirstName">
            <summary>
            First name of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserCreated">
            <summary>
            Date and time when was the user created.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserID">
            <summary>
            User ID.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserPasswordFormat">
            <summary>
            Format of the user's password.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.Email">
            <summary>
            E-mail address of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.Enabled">
            <summary>
            Indicates if the user is enabled.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.PasswordFormat">
            <summary>
            Format of the user password.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserStartingAliasPath">
            <summary>
             Starting alias path of the user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserHasAllowedCultures">
            <summary>
            Indicates if the user has allowed more than one culture.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserGUID">
            <summary>
            User GUID.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserLastModified">
            <summary>
            Date and time of the user last modification.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserIsDomain">
            <summary>
            Determines whether user is domain user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserAuthenticationGUID">
            <summary>
            Represents a secret for invalidating JSON Web Tokens.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserIsExternal">
            <summary>
            Indicates if the user is external.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserAvatarID">
            <summary>
            User avatar ID.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserSignature">
            <summary>
            User signature.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserDescription">
            <summary>
            User description.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserNickName">
            <summary>
            User nick name.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserURLReferrer">
            <summary>
            URL Referrer of user.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserCampaign">
            <summary>
            User campaign.
            </summary>
        </member>
        <member name="P:CMS.Base.IUserInfo.UserTimeZoneID">
            <summary>
            User time zone ID
            </summary>
        </member>
        <member name="M:CMS.Base.IUserInfo.IsPublic">
            <summary>
            Returns true if the user is public user record.
            </summary>
        </member>
        <member name="M:CMS.Base.IUserInfo.IsAuthorizedPerResource(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns true if given user is granted with specified permission.
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="permissionName">Permission name</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Base.IUserInfo.IsAuthorizedPerClassName(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Checks whether the user is authorized for given class name and permission, returns true if so.
            </summary>
            <param name="className">Class name</param>
            <param name="permissionName">Permission name to check</param>
            <param name="siteName">Site name</param>
            <param name="exceptionOnFailure">If true, PermissionCheckException is thrown whenever a permission check fails</param>
        </member>
        <member name="M:CMS.Base.IUserInfo.FilterSearchResults(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean@)">
            <summary>
            Filters the user search results
            </summary>
            <param name="inRoles">List of roles in which the user should be</param>
            <param name="notInRoles">List of roles in which the user should not be</param>
            <param name="addToIndex">Flag if the results should be added to the index</param>
        </member>
        <member name="M:CMS.Base.IUserInfo.CheckPrivilegeLevel(CMS.Base.UserPrivilegeLevelEnum,System.String)">
            <summary>
            Returns true if user fulfils the required privilege level (the higher level contains all children: GlobalAdmin -> Admin -> Editor -> None)
            </summary>
            <param name="privilegeLevel">Required privilege level</param>
            <param name="siteName">Site name for editor assignment. If not set current site name is used</param>
        </member>
        <member name="T:CMS.Base.ITypedCollection">
            <summary>
            Interface to provide result type over collection
            </summary>
        </member>
        <member name="P:CMS.Base.ITypedCollection.ItemType">
            <summary>
            Result type
            </summary>
        </member>
        <member name="T:CMS.Base.IVirtualTypedCollection">
            <summary>
            Interface to provide result type over collection
            </summary>
        </member>
        <member name="M:CMS.Base.IVirtualTypedCollection.GetEmptyObject">
            <summary>
            Gets the virtual empty object representing the collection item
            </summary>
        </member>
        <member name="T:CMS.Base.IAdvancedDataContainer">
            <summary>
            Data container with advanced functionality.
            </summary>
        </member>
        <member name="P:CMS.Base.IAdvancedDataContainer.HasChanged">
            <summary>
            Returns true if the object changed.
            </summary>
        </member>
        <member name="P:CMS.Base.IAdvancedDataContainer.IsComplete">
            <summary>
            Returns true if the object is complete (has all columns).
            </summary>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.RevertChanges">
            <summary>
            Reverts the object changes to the original values.
            </summary>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.ResetChanges">
            <summary>
            Resets the object changes and keeps the new values as unchanged.
            </summary>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.GetOriginalValue(System.String)">
            <summary>
            Returns the original value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.ItemChanged(System.String)">
            <summary>
            Returns true if the item on specified column name changed.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.ChangedColumns">
            <summary>
            Returns list of column names which values were changed.
            </summary>
            <returns>List of column names</returns>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.MakeComplete(System.Boolean)">
            <summary>
            Makes the object data complete.
            </summary>
            <param name="loadFromDb">If true, the data to complete the object is loaded from database</param>
        </member>
        <member name="M:CMS.Base.IAdvancedDataContainer.DataChanged(System.String)">
            <summary>
            Returns true if the object changed.
            </summary>
            <param name="excludedColumns">List of columns excluded from change (separated by ';')</param>
        </member>
        <member name="T:CMS.Base.ICMSObject">
            <summary>
            Interface for distinguishing TreeNode and BaseInfo data types.
            </summary>
        </member>
        <member name="T:CMS.Base.ICMSStorage">
            <summary>
            Interface to access the CMS objects and collections as storages
            </summary>
        </member>
        <member name="P:CMS.Base.ICMSStorage.IsDisconnected">
            <summary>
            Returns true if the storage is disconnected
            </summary>
        </member>
        <member name="P:CMS.Base.ICMSStorage.IsCachedObject">
            <summary>
            If true, the object is cached within the system for later use
            </summary>
        </member>
        <member name="T:CMS.Base.IDataContainer">
            <summary>
            General data container interface.
            </summary>
        </member>
        <member name="P:CMS.Base.IDataContainer.ColumnNames">
            <summary>
            Column names.
            </summary>
        </member>
        <member name="M:CMS.Base.IDataContainer.TryGetValue(System.String,System.Object@)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="M:CMS.Base.IDataContainer.ContainsColumn(System.String)">
            <summary>
            Returns true if the object contains specified column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="T:CMS.Base.IHierarchicalDataContainer">
            <summary>
            General data container interface.
            </summary>
        </member>
        <member name="T:CMS.Base.IHierarchicalObject">
            <summary>
            Interface for the hierarchically accessible object. This object provides the properties to access its connected objects.
            </summary>
        </member>
        <member name="P:CMS.Base.IHierarchicalObject.Properties">
            <summary>
            Properties of the object available through GetProperty.
            </summary>
        </member>
        <member name="M:CMS.Base.IHierarchicalObject.GetProperty(System.String)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.IHierarchicalObject.TryGetProperty(System.String,System.Object@)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="T:CMS.Base.IMacroObject">
            <summary>
            Interface for the objects which are used in macro processing. Defines their default resolving behavior.
            </summary>
        </member>
        <member name="M:CMS.Base.IMacroObject.ToMacroString">
            <summary>
            Returns the default text representation in the macros (this is called when the expression is resolved to its final value and should be converted to string).
            </summary>
        </member>
        <member name="M:CMS.Base.IMacroObject.MacroRepresentation">
            <summary>
            Returns the object which represents current object in the macro engine. 
            Whenever the object implementing IMacroObject interface is used within macro engine this method is called its result is used instead.
            </summary>
            <remarks>Return this if object doesn't have special representation for macro engine.</remarks>
        </member>
        <member name="T:CMS.Base.ISimpleDataContainer">
            <summary>
            Simple data container interface (does not provide any information about the columns).
            </summary>
        </member>
        <member name="P:CMS.Base.ISimpleDataContainer.Item(System.String)">
            <summary>
            Gets or sets the value of the column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.ISimpleDataContainer.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
        </member>
        <member name="M:CMS.Base.ISimpleDataContainer.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param> 
        </member>
        <member name="T:CMS.Base.IVirtualHierarchicalObject">
            <summary>
            Interface for hierarchical object that is able to provide virtual content (for properties that would return null)
            </summary>
        </member>
        <member name="M:CMS.Base.IVirtualHierarchicalObject.TryGetProperty(System.String,System.Object@,System.Boolean)">
            <summary>
            Returns property with given name (either object or property value).
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Returns the value</param>
            <param name="notNull">If true, the object always tries to return non-null value for properties, at least, it returns empty objects</param>
            <returns>Returns true if the operation was successful (the value was present)</returns>
        </member>
        <member name="T:CMS.Base.IGroupedData">
            <summary>
            Hierarchical data interface
            </summary>
        </member>
        <member name="P:CMS.Base.IGroupedData.TopItem">
            <summary>
            Top item in the hierarchy
            </summary>
        </member>
        <member name="M:CMS.Base.IGroupedData.GetItems(System.Object)">
            <summary>
            Gets the items based on the given key
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="T:CMS.Base.GeneralIndexableWrapper`2">
            <summary>
            Wrapper for general indexable interface
            </summary>
        </member>
        <member name="P:CMS.Base.GeneralIndexableWrapper`2.Source">
            <summary>
            Source data
            </summary>
        </member>
        <member name="M:CMS.Base.GeneralIndexableWrapper`2.#ctor(CMS.Base.IGeneralIndexable)">
            <summary>
            Constructor
            </summary>
            <param name="source">Source data</param>
        </member>
        <member name="P:CMS.Base.GeneralIndexableWrapper`2.Item(`0)">
            <summary>
            Typed indexer
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:CMS.Base.GeneralIndexableWrapper`2.Item(System.Object)">
            <summary>
            General indexer
            </summary>
            <param name="index">General indexer</param>
        </member>
        <member name="T:CMS.Base.IGeneralIndexable">
            <summary>
            Interface to access collections through specific key type
            </summary>
        </member>
        <member name="P:CMS.Base.IGeneralIndexable.Item(System.Object)">
            <summary>
            General indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="T:CMS.Base.IGeneralIndexable`2">
            <summary>
            Interface to access collections through specific key type
            </summary>
        </member>
        <member name="P:CMS.Base.IGeneralIndexable`2.Item(`0)">
            <summary>
            Integer indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="T:CMS.Base.IIndexable">
            <summary>
            Interface to access collections through int and string indexers
            </summary>
        </member>
        <member name="P:CMS.Base.IIndexable.Item(System.Int32)">
            <summary>
            Integer indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="T:CMS.Base.IIndexable`1">
            <summary>
            Interface to access collections through int and string indexers
            </summary>
        </member>
        <member name="P:CMS.Base.IIndexable`1.Item(System.Int32)">
            <summary>
            Integer indexer, gets or sets the value on the specified index
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="T:CMS.Base.INamedEnumerable`1">
            <summary>
            Sorted enumerable interface
            </summary>
        </member>
        <member name="T:CMS.Base.INamedEnumerable">
            <summary>
            Sorted enumerable interface
            </summary>
        </member>
        <member name="P:CMS.Base.INamedEnumerable.ItemsHaveNames">
            <summary>
            Returns true if the items in the collection have names
            </summary>
        </member>
        <member name="P:CMS.Base.INamedEnumerable.SortNames">
            <summary>
            Specifies whether the names should be sorted or not
            </summary>
        </member>
        <member name="M:CMS.Base.INamedEnumerable.GetObjectName(System.Object)">
            <summary>
            Returns the name of the given object
            </summary>
            <param name="obj">Object for which to get the name</param>
        </member>
        <member name="T:CMS.Base.INameIndexable">
            <summary>
            Interface to access collections through string indexers by name
            </summary>
        </member>
        <member name="P:CMS.Base.INameIndexable.Item(System.String)">
            <summary>
            String indexer, gets or sets the value with the specified name
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:CMS.Base.INameIndexable`1">
            <summary>
            Interface to access collections through string indexers by name - Generic variant
            </summary>
        </member>
        <member name="P:CMS.Base.INameIndexable`1.Item(System.String)">
            <summary>
            String indexer, gets or sets the value with the specified name
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:CMS.Base.IRelatedData">
            <summary>
            Objects containing the related data reference.
            </summary>
        </member>
        <member name="P:CMS.Base.IRelatedData.RelatedData">
            <summary>
            Custom data connected to the object.
            </summary>
        </member>
        <member name="T:CMS.Base.DefaultAuthenticationService">
            <summary>
            Default authentication service
            </summary>
        </member>
        <member name="P:CMS.Base.DefaultAuthenticationService.CurrentUser">
            <summary>
            Currently authenticated user
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultAuthenticationService.GetUser(System.String)">
            <summary>
            Get user info of given user.
            </summary>
            <param name="userName">name of given user</param>
            <returns>user info of given user</returns>
        </member>
        <member name="T:CMS.Base.DefaultSiteService">
            <summary>
            Default site service
            </summary>
        </member>
        <member name="P:CMS.Base.DefaultSiteService.CurrentSite">
            <summary>
            Current context site.
            </summary>
            <value>
            Always <see langword="null"/> in this default implementation.
            </value>
        </member>
        <member name="P:CMS.Base.DefaultSiteService.IsLiveSite">
            <summary>
            Returns true, if the current context executes on live site.
            </summary>
            <value>
            Always <see langword="true"/> in this default implementation.
            </value>
        </member>
        <member name="T:CMS.Base.IAuthenticationService">
            <summary>
            Interface for authentication service
            </summary>
        </member>
        <member name="P:CMS.Base.IAuthenticationService.CurrentUser">
            <summary>
            Currently authenticated user
            </summary>
        </member>
        <member name="M:CMS.Base.IAuthenticationService.GetUser(System.String)">
            <summary>
            Get user info of given user.
            </summary>
            <param name="userName">name of given user</param>
            <returns>user info of given user</returns>
        </member>
        <member name="T:CMS.Base.ISiteService">
            <summary>
            Interface for site service
            </summary>
        </member>
        <member name="P:CMS.Base.ISiteService.CurrentSite">
            <summary>
            Current context site.
            </summary>
        </member>
        <member name="P:CMS.Base.ISiteService.IsLiveSite">
            <summary>
            Returns true, if the current context executes on live site.
            </summary>
        </member>
        <member name="T:CMS.Base.AppSetting`1">
            <summary>
            Defined lazy initialized setting
            </summary>
        </member>
        <member name="P:CMS.Base.AppSetting`1.Converter">
            <summary>
            Conversion function
            </summary>
        </member>
        <member name="P:CMS.Base.AppSetting`1.KeyName">
            <summary>
            Settings key name
            </summary>
        </member>
        <member name="P:CMS.Base.AppSetting`1.DefaultValueInitializer">
            <summary>
            Function to retrieve the default value
            </summary>
        </member>
        <member name="P:CMS.Base.AppSetting`1.MasterKeyName">
            <summary>
            Defines the master key name which is used in case the key name value is not found
            </summary>
        </member>
        <member name="M:CMS.Base.AppSetting`1.#ctor(System.String,`0,System.Func{System.Object,`0,`0})">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Settings key name</param>
            <param name="defaultValue">Default value</param>
            <param name="converter">Conversion function</param>
        </member>
        <member name="M:CMS.Base.AppSetting`1.ConvertValue(System.Object,`0)">
            <summary>
            Converts the value to the correct type
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.AppSetting`1.NewValue">
            <summary>
            Initializes a new value
            </summary>
        </member>
        <member name="M:CMS.Base.AppSetting`1.GetDefaultValue">
            <summary>
            Gets the default value
            </summary>
        </member>
        <member name="M:CMS.Base.AppSetting`1.ToString">
            <summary>
            Returns value converted to string.
            </summary>
        </member>
        <member name="T:CMS.Base.BoolAppSetting">
            <summary>
            Defined lazy initialized boolean setting
            </summary>
        </member>
        <member name="M:CMS.Base.BoolAppSetting.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Settings key name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.BoolAppSetting.ConvertValue(System.Object,System.Boolean)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:CMS.Base.IntAppSetting">
            <summary>
            Defined lazy initialized integer setting
            </summary>
        </member>
        <member name="M:CMS.Base.IntAppSetting.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Settings key name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.IntAppSetting.ConvertValue(System.Object,System.Int32)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:CMS.Base.StringAppSetting">
            <summary>
            Defined lazy initialized string setting
            </summary>
        </member>
        <member name="M:CMS.Base.StringAppSetting.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="keyName">Settings key name</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.StringAppSetting.ConvertValue(System.Object,System.String)">
            <summary>
            Converts the value to a proper type
            </summary>
            <param name="value">Value to convert</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:CMS.Base.CMSLazy`1">
            <summary>
            Provides lazy initialization
            </summary>
        </member>
        <member name="F:CMS.Base.CMSLazy`1.mData">
            <summary>
            Underlying data (direct value)
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.RequestStockKey">
            <summary>
            Defines the key under which the object value should be stored in the request stock helper. If set, the object exists only within the particular request
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.AllowCloneForNewThread">
            <summary>
            If true, the item is copied for the new thread
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.CurrentData">
            <summary>
            Returns the current data used by the lazy object
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.Initializer">
            <summary>
            Value initialization function
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.IsValueCreated">
            <summary>
            Returns true if the value was already created
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazy`1.Value">
            <summary>
            Gets or sets the object value
            </summary>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.#ctor(System.Func{`0},`0)">
            <summary>
            Constructor
            </summary>
            <param name="initializer">Value initialization function</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.GetDataFromItems">
            <summary>
            Gets the data from the current thread items.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.EnsureValue(CMS.Base.CMSLazyData{`0})">
            <summary>
            Ensures the internal value of the object
            </summary>
            <param name="data">Data container in which ensure the data. If null, current data is used</param>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.NewValue">
            <summary>
            Creates a new value using the initializer
            </summary>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.Reset">
            <summary>
            Resets the state of the object to re-initialize the value on the next request
            </summary>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.op_Implicit(CMS.Base.CMSLazy{`0})~`0">
            <summary>
            Implicit operator for conversion of the lazy object to its value type
            </summary>
            <param name="obj">Object to convert</param>
        </member>
        <member name="M:CMS.Base.CMSLazy`1.CanInitialize">
            <summary>
            Returns true, if the object value can initialize
            </summary>
        </member>
        <member name="T:CMS.Base.CMSLazyData`1">
            <summary>
            Lazy data container
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazyData`1.IsValueCreated">
            <summary>
            Returns true if the value is already created (initialized)
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazyData`1.Value">
            <summary>
            Gets or sets the object value
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazyData`1.InitializingFromThreadId">
            <summary>
            If set, the value is currently initializing (flag to prevent infinite loop)
            </summary>
        </member>
        <member name="P:CMS.Base.CMSLazyData`1.AllowCloneForNewThread">
            <summary>
            If true, the item is copied for the new thread
            </summary>
        </member>
        <member name="M:CMS.Base.CMSLazyData`1.Reset">
            <summary>
            Resets the state of the object to re-initialize the value on the next request
            </summary>
        </member>
        <member name="M:CMS.Base.CMSLazyData`1.CloneForNewThread">
            <summary>
            Clones the object for the new thread
            </summary>
        </member>
        <member name="T:CMS.Base.CMSRegex">
            <summary>
            Defined lazy initialized regular expression
            </summary>
        </member>
        <member name="F:CMS.Base.CMSRegex.IgnoreCase">
            <summary>
            Defines the options for ignoring case within regular expression
            </summary>
        </member>
        <member name="M:CMS.Base.CMSRegex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Constructor
            </summary>
            <param name="pattern">Expression pattern</param>
            <param name="options">Options</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="pattern">Expression pattern</param>
            <param name="ignoreCase">If true, the regular expression is case insensitive</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.EnsureCorrectOptions(System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Adds CultureInvariant option when there is ignore case to ensure correct behavior in Turkish culture.
            </summary>
            <param name="options">Options to be modified</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.GetDefaultOptions(System.Boolean)">
            <summary>
            Gets the default options for a regular expression
            </summary>
            <param name="ignoreCase">If true, the regular expression is case insensitive</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the specified pattern within the given input with the given replacement
            </summary>
            <param name="input">Input string</param>
            <param name="replacement">Replacement</param>
            <param name="allowSubstitutions">If set to false, substitutions are not allowed within the replacement string</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            Replaces the specified pattern within the given input with the given replacement
            </summary>
            <param name="input">Input string</param>
            <param name="evaluator">Match evaluator</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.IsMatch(System.String)">
            <summary>
            Returns true if the given pattern is found within the input string
            </summary>
            <param name="input">Input string</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.Matches(System.String)">
            <summary>
            Searches the specified input for all recurrences of regular expression
            </summary>
            <param name="input">Input text</param>
        </member>
        <member name="M:CMS.Base.CMSRegex.Match(System.String)">
            <summary>
            Searches the specified input string for the first occurrence of the regular expression
            </summary>
            <param name="input">Input text</param>
        </member>
        <member name="T:CMS.Base.ContextContainer`1">
            <summary>
            Container class for storing ambient context data. The container is backed by both the HTTP context items (if available)
            and an <see cref="T:System.Threading.AsyncLocal`1"/> field so that the data are available along the asynchronous control flow in a web application.
            </summary>
            <remarks>
            <para>
            To prevent the ambient context data from flowing along the asynchronous control flow or to child threads use the <see cref="M:System.Threading.ExecutionContext.SuppressFlow"/> method.
            </para>
            <para>
            The <see cref="T:CMS.Base.CMSThread"/> class prevents the ambient context data from implicitly flowing. Instead, the context data are explicitly cloned upon initializing the new thread.
            </para>
            </remarks>
            <seealso cref="T:CMS.Base.CMSThread"/>
        </member>
        <member name="F:CMS.Base.ContextContainer`1.mKey">
            <summary>
            Unique container key
            </summary>
        </member>
        <member name="F:CMS.Base.ContextContainer`1.AddToContainers">
            <summary>
            If true (default), the object is added to the thread containers so that it is cloned for a new thread
            </summary>
        </member>
        <member name="F:CMS.Base.ContextContainer`1.mCurrent">
            <summary>
            Current context for the asynchronous control flow.
            </summary>
        </member>
        <member name="P:CMS.Base.ContextContainer`1.Key">
            <summary>
            Unique container key
            </summary>
        </member>
        <member name="P:CMS.Base.ContextContainer`1.IsDefault">
            <summary>
            Returns true if the context is the default request context
            </summary>
        </member>
        <member name="P:CMS.Base.ContextContainer`1.Current">
            <summary>
            Current request data
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.EnsureContextContainer">
            <summary>
            Ensures current <see cref="T:CMS.Base.ContextContainer`1"/>.
            </summary>
            <remarks>
            <para>
            Stores the container in HTTP context items, if available.
            The container is also stored in an <see cref="T:System.Threading.AsyncLocal`1"/> field so that the context
            works correctly in both web requests and asynchronous library calls.
            </para>
            <para>
            If the container is not yet available, creates a new one.
            </para>
            </remarks>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.CreateNew">
            <summary>
            Creates a new object for the current thread
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.Clear">
            <summary>
            Clears the current context value
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.ClearCurrent">
            <summary>
            Clears the current context value
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.CMS#Base#IContextContainer#CreateEmpty">
            <summary>
            Creates an empty context container of the implementing type.
            </summary>
            <returns>Returns an empty container instance.</returns>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.EnsureValue``1(``0@,System.Func{``0})">
            <summary>
            Ensures the value
            </summary>
            <param name="value">Value to ensure</param>
            <param name="initializer">Value initializer</param>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.SetAsCurrent">
            <summary>
            Sets the current instance as the current thread item
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.FromThread(CMS.Base.CMSThread)">
            <summary>
            Gets the current container from the provided thread
            </summary>
        </member>
        <member name="M:CMS.Base.ContextContainer`1.EnsureCurrent">
            <summary>
            Creates the internal <see cref="T:CMS.Base.ContextContainer`1"/> storage if it does not exist yet.
            </summary>
        </member>
        <member name="T:CMS.Base.ContextContainersDictionary">
            <summary>
            Dictionary to store the context containers
            </summary>
        </member>
        <member name="T:CMS.Base.IContextContainer">
            <summary>
            Request container interface
            </summary>
        </member>
        <member name="P:CMS.Base.IContextContainer.Key">
            <summary>
            Unique container key.
            </summary>
        </member>
        <member name="M:CMS.Base.IContextContainer.ClearCurrent">
            <summary>
            Clears the current container.
            </summary>
        </member>
        <member name="M:CMS.Base.IContextContainer.CreateEmpty">
            <summary>
            Creates an empty context container of the implementing type.
            </summary>
            <returns>Returns an empty container instance.</returns>
        </member>
        <member name="M:CMS.Base.IContextContainer.SetAsCurrent">
            <summary>
            Sets the current instance as the current thread item.
            </summary>
        </member>
        <member name="M:CMS.Base.IContextContainer.EnsureCurrent">
            <summary>
            Creates the internal <see cref="T:CMS.Base.ContextContainer`1"/> storage if it does not exist yet.
            </summary>
        </member>
        <member name="T:CMS.Base.RequestStockValue`1">
            <summary>
            Defines a lazy loaded value stored in the request stock helper
            </summary>
        </member>
        <member name="M:CMS.Base.RequestStockValue`1.#ctor(System.String,System.Func{`0})">
            <summary>
            Constructor
            </summary>
            <param name="requestStockKey">Request stock key</param>
            <param name="initializer">Initializer for the new value</param>
        </member>
        <member name="M:CMS.Base.RequestStockValue`1.#ctor(System.String,`0)">
            <summary>
            Constructor
            </summary>
            <param name="requestStockKey">Request stock key</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="T:CMS.Base.TypeHelper">
            <summary>
            Type helper.
            </summary>
        </member>
        <member name="F:CMS.Base.TypeHelper.MAX_NAME_LENGTH">
            <summary>
            Maximal length of the node document name.
            </summary>
        </member>
        <member name="P:CMS.Base.TypeHelper.MaxCodeNameLength">
            <summary>
            Maximal length of the node document name.
            </summary>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetNiceObjectTypeName(System.String,System.String)">
            <summary>
            Gets the nice object type name for this type
            </summary>
            <param name="objectType">Type to localize</param>
            <param name="culture">Culture code</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.EnsureMaxCodeNameLength(System.String,System.Int32)">
            <summary>
            Ensures maximal allowed code name length.
            </summary>
            <param name="codeName">Original name</param>
            <param name="maxLength">Maximum code name length, if not set (0), cuts the code name to the general MaxCodeNameLength</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetMaxCodeNameLength(System.Int32)">
            <summary>
            Gets the maximum code name length
            </summary>
            <param name="maxLength">Maximum code name length, if not set (0), returns MaxCodeNameLength</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetNiceName(System.String)">
            <summary>
            Gets nice name from the given object type
            </summary>
            <param name="name">Name to convert to nice name</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetObjectTypeResourceKey(System.String)">
            <summary>
            Gets the resource key for the name of the object type. Name of type should be in singular form.
            </summary>
            <param name="objectType">Object type</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetPlural(System.String)">
            <summary>
            Gets the plural for the given name
            </summary>
            <param name="name">Name to convert</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.NewList(System.Collections.ICollection[])">
            <summary>
            Returns a new list created from the given values
            </summary>
            <param name="names">Values</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetTypes(System.String)">
            <summary>
            Resolves the object types.
            </summary>
            <param name="objectTypes">Object types constants separated by semicolon</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.AddTypes(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Adds the specified types to the resulting array.
            </summary>
            <param name="list">Current types list</param>
            <param name="addList">Object types to add</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.AddType(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Adds the type to the type list.
            </summary>
            <param name="list">Type list</param>
            <param name="type">Type to add</param>
        </member>
        <member name="M:CMS.Base.TypeHelper.GetTasksResourceKey(System.String)">
            <summary>
            Gets the resource key for groups or categories of objects (usually plural), typically used in object trees to label nodes with children. 
            </summary>
            <remarks>
            Not all object types are guaranteed to have a translation for the resource string produced by this function.
            </remarks>
            <param name="objectType">Object type</param>
        </member>
        <member name="T:CMS.Base.DefaultModuleUsageCounter">
            <summary>
            Provides access to module usage counters that are used for feature usage tracking.
            </summary>
            <remarks>
            This is default empty implementation which doesn't store any value in the database. 
            Module usage tracking module registers its own implementation of the interface when installed.
            </remarks>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageCounter.GetValue(System.String)">
            <summary>
            Gets current value of the specified counter.
            </summary>
            <param name="counterName">Name of the counter.</param>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageCounter.Increment(System.String)">
            <summary>
            Increments value of the specified counter.
            </summary>
            <param name="counterName">Name of the counter.</param>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageCounter.Clear(System.String)">
            <summary>
            Clears value of the specified counter.
            </summary>
            <param name="counterName">Name of the counter.</param>
        </member>
        <member name="T:CMS.Base.DefaultModuleUsageDataCollection">
            <summary>
            Collection of module usage data provided by module usage data source
            </summary>
            <remarks>
            This is default empty implementation which doesn't store any value. 
            Module usage tracking module registers its own implementation of the interface when installed.
            </remarks>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.String)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.Byte[])">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.Boolean)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.DateTime)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.Double)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.Guid)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.Int32)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Add(System.String,System.Int64)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Get(System.String)">
            <summary>
            Gets item with specified key.
            </summary>
            <param name="key">Key of item to retrieve</param>
            <returns>Item if found, null otherwise</returns>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataCollection.Remove(System.String)">
            <summary>
            Remove item from collection.
            </summary>
            <param name="key">Key of item to remove</param>
            <returns>True when item was removed, false if item wasn't present in collection.</returns>
        </member>
        <member name="T:CMS.Base.DefaultModuleUsageDataSourceContainer">
            <summary>
            Default container for registering and retrieving module usage data sources.
            </summary>
            <remarks>
            This is default empty implementation which doesn't return any data source. 
            Module usage tracking module registers its own implementation of the interface when installed.
            </remarks>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataSourceContainer.RegisterDataSource(CMS.Base.RegisterModuleUsageDataSourceAttribute)">
            <summary>
            Register module usage data source.
            </summary>
            <param name="registerAttribute">Attribute registering data source object for collecting data.</param>
        </member>
        <member name="M:CMS.Base.DefaultModuleUsageDataSourceContainer.GetDataSources">
            <summary>
            Get all registered module usage data sources.
            </summary>
        </member>
        <member name="T:CMS.Base.IModuleUsageCounter">
            <summary>
            Provides access to module usage counters that are used for feature usage tracking.
            </summary>
        </member>
        <member name="M:CMS.Base.IModuleUsageCounter.GetValue(System.String)">
            <summary>
            Gets current value of the specified counter.
            </summary>
            <param name="counterName">Name of the counter.</param>
        </member>
        <member name="M:CMS.Base.IModuleUsageCounter.Increment(System.String)">
            <summary>
            Increments value of the specified counter.
            </summary>
            <param name="counterName">Name of the counter.</param>
        </member>
        <member name="M:CMS.Base.IModuleUsageCounter.Clear(System.String)">
            <summary>
            Clears value of the specified counter.
            </summary>
            <param name="counterName">Name of the counter.</param>
        </member>
        <member name="T:CMS.Base.IModuleUsageDataSource">
            <summary>
            Provides statistical information about module.
            </summary>
        </member>
        <member name="P:CMS.Base.IModuleUsageDataSource.Name">
            <summary>
            Get the data source name.
            </summary>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataSource.GetData">
            <summary>
            Get all module statistical data.
            </summary>
        </member>
        <member name="T:CMS.Base.IModuleUsageDataSourceContainer">
            <summary>
            Container for registering and retrieving module usage data sources.
            </summary>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataSourceContainer.RegisterDataSource(CMS.Base.RegisterModuleUsageDataSourceAttribute)">
            <summary>
            Register module usage data source.
            </summary>
            <param name="registerAttribute">Attribute registering data source object for collecting data.</param>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataSourceContainer.GetDataSources">
            <summary>
            Get all registered module usage data sources.
            </summary>
        </member>
        <member name="T:CMS.Base.IModuleUsageDataCollection">
            <summary>
            Collection of module usage data
            </summary>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.String)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.Byte[])">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.Boolean)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.DateTime)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.Double)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.Guid)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.Int32)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Add(System.String,System.Int64)">
            <summary>
            Adds usage data item to collection.
            </summary>
            <param name="key">Item identifier</param>
            <param name="value">Item value</param>
            <returns>True if the element is added, false if the element is already present.</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Get(System.String)">
            <summary>
            Gets item with specified key.
            </summary>
            <param name="key">Key of item to retrieve</param>
            <returns>Item if found, null otherwise</returns>
        </member>
        <member name="M:CMS.Base.IModuleUsageDataCollection.Remove(System.String)">
            <summary>
            Remove item from collection.
            </summary>
            <param name="key">Key of item to remove</param>
            <returns>True when item was removed, false if item wasn't present in collection.</returns>
        </member>
        <member name="T:CMS.Base.IModuleUsageDataItem">
            <summary>
            Represents one fragment of module usage data
            </summary>
        </member>
        <member name="P:CMS.Base.IModuleUsageDataItem.Key">
            <summary>
            Key representing the item. Must be unique within one data source.
            </summary>
        </member>
        <member name="P:CMS.Base.IModuleUsageDataItem.Value">
            <summary>
            Item value
            </summary>
        </member>
        <member name="T:CMS.Base.RegisterModuleUsageDataSourceAttribute">
            <summary>
            Registers class to be a source of a module statistical data.
            </summary>
        </member>
        <member name="P:CMS.Base.RegisterModuleUsageDataSourceAttribute.MarkedType">
            <summary>
            Gets the type of the module data provider.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value to set is null</exception>
            <exception cref="T:System.ArgumentException">Thrown when value to set is not implementing <see cref="T:CMS.Base.IModuleUsageDataSource"/> interface</exception>
        </member>
        <member name="M:CMS.Base.RegisterModuleUsageDataSourceAttribute.#ctor(System.Type)">
            <summary>
            Registers class to be a source of a module statistical data.
            </summary>
            <param name="moduleDataProviderType">Type of registered provider.</param>
            <exception cref="T:System.ArgumentException">Some of given attributes is invalid.</exception>
            <exception cref="T:System.ArgumentNullException">Some of given attributes is null.</exception>
        </member>
        <member name="M:CMS.Base.RegisterModuleUsageDataSourceAttribute.Init">
            <summary>
            Registers given data provider to module usage provider.
            </summary>
        </member>
        <member name="T:CMS.Base.BaseModule">
            <summary>
            Represents the Settings Provider module.
            </summary>
        </member>
        <member name="M:CMS.Base.BaseModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.Base.BaseModule.OnPreInit">
            <summary>
            Pre-initializes the module
            </summary>
        </member>
        <member name="M:CMS.Base.BaseModule.OnInit">
            <summary>
            Initializes the module
            </summary>
        </member>
        <member name="T:CMS.Base.BaseModuleMetadata">
            <summary>
            Represents the Settings Provider module metadata.
            </summary>
        </member>
        <member name="M:CMS.Base.BaseModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.Base.BaseSynchronization">
            <summary>
            Base module synchronization class (debug synchronization is registered here for example).
            </summary>
        </member>
        <member name="M:CMS.Base.BaseSynchronization.Init">
            <summary>
            Initializes the tasks for debug synchronization.
            </summary>
        </member>
        <member name="T:CMS.Base.ResetDebugSettingsWebFarmTask">
            <summary>
            Web farm task used to reset debug settings.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.Base.ResetDebugSettingsWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.Base.DebugHelper.ResetDebugSettings(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSActionResult">
            <summary>
            Defines an abstract action result.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSActionResult.Cacheability">
            <summary>
            Sets the cacheability part of <see langword="Cache-Control"/> HTTP header value.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSActionResult.CacheRevalidation">
            <summary>
            Sets the revalidation part of <see langword="Cache-Control"/> HTTP header value.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSActionResult.LastModified">
            <summary>
            Sets the <see langword="Last-Modified"/> HTTP header to the specified date and time.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSActionResult.Expires">
            <summary>
            Sets the <see langword="Expires"/> HTTP header to an absolute date and time.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSActionResult.NoStore">
            <summary>
            Sets the <see langword="Cache-Control: no-store"/> HTTP header.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSActionResult.#ctor">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSActionResult"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSActionResult.#ctor(CMS.Base.Routing.CMSActionResult)">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSActionResult"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSActionResult.SetTimeStamps(System.DateTime,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the last modified and expires header to the response
            </summary>
            <param name="lastModified">Last modified date.</param>
            <param name="allowClientCache">True if client cache is allowed for the current action.</param>
            <param name="clientCacheMinutes">Cache minutes.</param>
            <param name="publicCache">True if object can be cached by clients and proxies, false if only by clients.</param>
        </member>
        <member name="M:CMS.Base.Routing.CMSActionResult.SetNoCacheCacheability">
            <summary>
            Sets No-Cache cache-ability.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSActionResult.SetPublicCacheability">
            <summary>
            Sets the public cache-ability.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSActionResult.SetRevalidation(System.Boolean)">
            <summary>
            Sets the revalidation of the client caches.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSContentResult">
            <summary>
            Defines action result that outputs to the body of the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSContentResult.Content">
            <summary>
            Gets or set the content representing the body of the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSContentResult.ContentType">
            <summary>
            Gets or sets the <see langword="Content-Type"/> header for the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSContentResult.EntityTag">
            <summary>
            Gets or sets the <see langword="ETag"/> for the content.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSContentResult.StatusCode">
            <summary>
            Gets or sets the HTTP status code.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSDirectActionResult">
            <summary>
            An <see cref="T:CMS.Base.Routing.CMSActionResult"/> that invokes action specified.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSDirectActionResult.Action">
            <summary>
            Action to invoke.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSDirectActionResult.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.Routing.CMSDirectActionResult"/> class with the values provided.
            </summary>
            <param name="action">Action to invoke.</param>
        </member>
        <member name="T:CMS.Base.Routing.CMSFileContentResult">
            <summary>
            Represents an <see cref="T:CMS.Base.Routing.CMSActionResult"/> that when executed will write a binary file to the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileContentResult.FileContents">
            <summary>
            Gets or sets the file contents.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSFileContentResult.#ctor">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSFileContentResult"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSFileContentResult.#ctor(CMS.Base.Routing.CMSFileResult)">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSFileContentResult"/> instance with base
            properties values copied from <paramref name="fileResult"/>.
            </summary>
            <param name="fileResult">The <see cref="T:CMS.Base.Routing.CMSFileResult"/> object to copy properties from.</param>
        </member>
        <member name="T:CMS.Base.Routing.CMSFileResult">
            <summary>
            Represents an <see cref="T:CMS.Base.Routing.CMSActionResult"/> that when executed will write a file as the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileResult.ContentDisposition">
            <summary>
            Gets or sets the <see langword="Content-Disposition"/> header for the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileResult.ContentType">
            <summary>
            Gets or sets the <see langword="Content-Type"/> header for the response.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileResult.EnableRangeProcessing">
            <summary>
            Gets or sets the value that enables range processing for the <see cref="T:CMS.Base.Routing.CMSFileResult"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileResult.EntityTag">
            <summary>
            Gets or sets the <see langword="ETag"/> associated with the <see cref="T:CMS.Base.Routing.CMSFileResult"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileResult.LogExceptions">
            <summary>
            Logs the exceptions caused by the process.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSFileResult.LogCommunicationExceptions">
            <summary>
            Whether to log exception caused by communication problems (e.g. when remote host closes the connection).
            Log exceptions has to be set to TRUE.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSFileResult.#ctor">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSFileResult"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSFileResult.#ctor(CMS.Base.Routing.CMSFileResult)">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSFileResult"/> instance with base
            properties values copied from <paramref name="fileResult"/>.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSForbiddenResult">
            <summary>
            Defines an HTTP 403 Error Forbidden result.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSForbiddenResult.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSNotFoundResult">
            <summary>
            Defines an HTTP 404 Error Not Found result.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSNotFoundResult.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSNotModifiedResult">
            <summary>
            Defines an HTTP 304 Not Modified result.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSNotModifiedResult.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSNotModifiedResult.EntityTag">
            <summary>
            Gets or sets the <see langword="ETag"/> for the file.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSNotModifiedResult.ContentType">
            <summary>
            Gets or sets the <see langword="Content-Type"/> header for the response.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSNotModifiedResult.#ctor">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSNotModifiedResult"/> instance.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSNotModifiedResult.#ctor(CMS.Base.Routing.CMSActionResult)">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSNotModifiedResult"/> instance.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSPhysicalFileResult">
            <summary>
            A <see cref="T:CMS.Base.Routing.CMSActionResult"/> on execution will write a file from disk to the response using mechanisms provided by the host.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSPhysicalFileResult.FileName">
            <summary>
            Gets the path to the file that will be sent back as the response.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSPhysicalFileResult.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSPhysicalFileResult"/> instance.
            </summary>
            <param name="fileName">Path to the file that will be sent back as the response.</param>
        </member>
        <member name="M:CMS.Base.Routing.CMSPhysicalFileResult.#ctor(System.String,CMS.Base.Routing.CMSFileResult)">
            <summary>
            Creates a new <see cref="T:CMS.Base.Routing.CMSPhysicalFileResult"/> instance with base
            properties values copied from <paramref name="fileResult"/>.
            </summary>
            <param name="fileName">Path to the file that will be sent back as the response.</param>
            <param name="fileResult">The <see cref="T:CMS.Base.Routing.CMSFileResult"/> object to copy properties from.</param>
        </member>
        <member name="T:CMS.Base.Routing.CMSRedirectPermanentResult">
            <summary>
            An <see cref="T:CMS.Base.Routing.CMSActionResult"/> that returns a Moved Permanently (301)
            response with a Location header to the supplied URL.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSRedirectPermanentResult.Permanent">
            <summary>
            Gets the value that specifies that the redirect should be permanent if true or temporary if false.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSRedirectPermanentResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.Routing.CMSRedirectPermanentResult"/> class with the values provided.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSRedirectResult">
            <summary>
            An <see cref="T:CMS.Base.Routing.CMSActionResult"/> that returns a Found (302)
            response with a Location header to the supplied URL.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSRedirectResult.Url">
            <summary>
            Gets the URL to redirect to.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSRedirectResult.Permanent">
            <summary>
            Gets the value that specifies that the redirect should be permanent if true or temporary if false.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSRedirectResult.SeeOther">
            <summary>
            Gets the value that specifies that the redirect should be done with <c>303 See Other</c> status code.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSRedirectResult.SiteName">
            <summary>
            Gets the SiteName value to check the settings if permanent redirects are allowed.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSRedirectResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.Routing.CMSRedirectResult"/> class with the values provided.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSRewritePathResult">
            <summary>
            An <see cref="T:CMS.Base.Routing.CMSActionResult"/> that rewrites the URL by using the specified path.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSRewritePathResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.Routing.CMSRewritePathResult"/> class with the values provided.
            </summary>
            <param name="path">The replacement path.</param>
        </member>
        <member name="T:CMS.Base.Routing.CMSSeeOtherResult">
            <summary>
            An <see cref="T:CMS.Base.Routing.CMSActionResult"/> that returns a See Other (303)
            response with a Location header to the supplied URL.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSSeeOtherResult.SeeOther">
            <summary>
            Gets the value that specifies that the redirect should be done with <c>303 See Other</c> status code.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.CMSSeeOtherResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.Routing.CMSSeeOtherResult"/> class with the values provided.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.CMSUnauthorizedResult">
            <summary>
            Defines an HTTP 401 Error Unauthorized result.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.CMSUnauthorizedResult.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.ICMSEntityTagActionResult">
            <summary>
            Represents an <see cref="T:CMS.Base.Routing.CMSActionResult"/> that when executed will produce an HTTP response
            with the specified <see langword="ETag"/> response header.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.ICMSEntityTagActionResult.EntityTag">
            <summary>
            Gets the <see langword="ETag"/> for the response.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.ICMSStatusCodeActionResult">
            <summary>
            Represents an <see cref="T:CMS.Base.Routing.CMSActionResult"/> that when executed will produce an HTTP response
            with the specified StatusCode.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.ICMSStatusCodeActionResult.StatusCode">
            <summary>
            Gets the HTTP status code.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.HttpHandlerRouteTable">
            <summary>
            Stores the URL routes to Kentico HTTP handlers.
            </summary>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="F:CMS.Base.Routing.HttpHandlerRouteTable.mDescriptors">
            <summary>
            A collection of attributes used for a registration of Kentico HTTP handlers.
            </summary>
        </member>
        <member name="F:CMS.Base.Routing.HttpHandlerRouteTable.mInstance">
            <summary>
            The default instance of the <see cref="T:CMS.Base.Routing.HttpHandlerRouteTable"/> class.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.HttpHandlerRouteTable.Default">
            <summary>
            Gets the default instance of the <see cref="T:CMS.Base.Routing.HttpHandlerRouteTable"/> class.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.HttpHandlerRouteTable.Register(CMS.Base.Routing.RegisterHttpHandlerAttribute)">
            <summary>
            Adds a route to Kentico HTTP handler.
            </summary>
            <param name="descriptor">The attribute used for a registration of Kentico HTTP handlers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="descriptor"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">The route template is already registered.</exception>
        </member>
        <member name="M:CMS.Base.Routing.HttpHandlerRouteTable.IsHandlerTypeValid(System.Type)">
            <summary>
            Returns <see langword="true"/> when <paramref name="markedType"/> is expected and valid in this context.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.HttpHandlerRouteTable.GetHttpHandlers">
            <summary>
            Returns an enumerable collection of Kentico HTTP handlers.
            </summary>
            <returns>An enumerable collection of Kentico HTTP handlers.</returns>
        </member>
        <member name="M:CMS.Base.Routing.HttpHandlerRouteTable.GetRoutes``1(System.Func{CMS.Base.Routing.RegisterHttpHandlerAttribute,``0})">
            <summary>
            Returns an enumerable collection of routes to Kentico HTTP handlers.
            </summary>
            <returns>An enumerable collection of routes to Kentico HTTP handlers.</returns>
        </member>
        <member name="T:CMS.Base.Routing.IActionResultService">
            <summary>
            Defines the contract to process HTTP Web requests.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.IActionResultService.IsReusable">
            <summary>
            Gets a value indicating whether the instance of the service can be re-used for multiple requests.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.IActionResultService.GetActionResult">
            <summary>
            Evaluates web request and returns the <see cref="T:CMS.Base.Routing.CMSActionResult"/> object with result of the process.
            </summary>
        </member>
        <member name="T:CMS.Base.Routing.RegisterHttpHandlerAttribute">
            <summary>
            Represents a route to a Kentico HTTP handler using a route template that supports inline constraints.
            </summary>
            <remarks>
            Route templates are compatible with ASP.NET MVC 5 route templates with the following exceptions:
            <list type="bullet">
            <item><description>Only <c>guid</c> and <c>int</c> inline constraints are supported, other constraints are ignored.</description></item>
            <item><description>There must be no unpaired braces except the escaped ones, otherwise an exception is thrown.</description></item>
            </list>
            Routes to Kentico HTTP handlers are excluded from URL generation, i.e. in MVC applications it is not possible
            to accidentally generate an URL to a Kentico HTTP handler instead of a controller action.
            </remarks>
        </member>
        <member name="P:CMS.Base.Routing.RegisterHttpHandlerAttribute.MarkedType">
            <summary>
            Gets the type of a Kentico HTTP handler.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.RegisterHttpHandlerAttribute.RouteTemplate">
            <summary>
            Gets the route template.
            </summary>
        </member>
        <member name="P:CMS.Base.Routing.RegisterHttpHandlerAttribute.Order">
            <summary>
            Gets or sets the order weight of the route.
            </summary>
            <remarks>
            Routes are sorted for each HTTP handler in increasing order based on the order value.
            Routes without the order weight specified have an order value of 0.
            Negative values are valid and can be used to position a route before all non-negative routes.
            </remarks>
        </member>
        <member name="P:CMS.Base.Routing.RegisterHttpHandlerAttribute.CMSMainApplicationOnly">
            <summary>
            Gets or sets value representing if this route should be registered for main (administration) application only.
            </summary>
        </member>
        <member name="M:CMS.Base.Routing.RegisterHttpHandlerAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.Routing.RegisterHttpHandlerAttribute"/> class.
            </summary>
            <param name="routeTemplate">The route template.</param>
            <param name="handlerType">The type of a Kentico HTTP handler.</param>
        </member>
        <member name="M:CMS.Base.Routing.RegisterHttpHandlerAttribute.PreInit">
            <summary>
            Adds this instance to the table with routes to Kentico HTTP handlers.
            </summary>
        </member>
        <member name="T:CMS.Base.SiteDevelopmentModelEnum">
            <summary>
            Development models
            </summary>
            <exclude />
        </member>
        <member name="F:CMS.Base.SiteDevelopmentModelEnum.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:CMS.Base.SiteDevelopmentModelEnum.Admin">
            <summary>
            Administration instance
            </summary>
        </member>
        <member name="F:CMS.Base.SiteDevelopmentModelEnum.MVC">
            <summary>
            MVC model
            </summary>
        </member>
        <member name="F:CMS.Base.SiteDevelopmentModelEnum.Core">
            <summary>
            .NET Core model
            </summary>
        </member>
        <member name="T:CMS.Base.CMSString">
            <summary>
            Helper (replace) methods for string class
            </summary>
        </member>
        <member name="M:CMS.Base.CMSString.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings. Returns an integer that indicates the relationship of the two strings to each other in the sort order.
            </summary>
            <param name="strA">The first string to compare</param>
            <param name="strB">The second string to compare</param>
            <param name="ignoreCase">If true, compare is case insensitive</param>
        </member>
        <member name="M:CMS.Base.CMSString.Compare(System.String,System.String,System.StringComparison)">
            <summary>
            Compares two strings. Returns an integer that indicates the relationship of the two strings to each other in the sort order.
            </summary>
            <param name="strA">The first string to compare</param>
            <param name="strB">The second string to compare</param>
            <param name="stringComparison">One of the enumeration values that specifies the rules to use in the comparison</param>
        </member>
        <member name="M:CMS.Base.CMSString.Equals(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value
            </summary>
            <param name="strA">The first string to compare, or Nothing</param>
            <param name="strB">The second string to compare, or Nothing</param>
        </member>
        <member name="M:CMS.Base.CMSString.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether two specified String objects have the same value
            </summary>
            <param name="strA">The first string to compare, or Nothing</param>
            <param name="strB">The second string to compare, or Nothing</param>
            <param name="ignoreCase">If true, compare is case insensitive</param>
        </member>
        <member name="M:CMS.Base.CMSString.IsInvariantCompareCulture">
            <summary>
            Returns true if <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> should be used instead of 
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> to perform case insensitive operations.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSString.IsInvariantCompareCulture(System.Globalization.CultureInfo)">
            <summary>
            Returns true if <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> should be used instead of passed culture to perform case insensitive operations.
            </summary>
        </member>
        <member name="T:CMS.Base.StringExtensions">
            <summary>
            Extensions for the <see cref="T:System.String"/> class
            </summary>
        </member>
        <member name="M:CMS.Base.StringExtensions.StartsWithAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns true if the string starts with any of the given strings
            </summary>
            <param name="value">Value to check</param>
            <param name="comparison">Comparison type</param>
            <param name="prefixes">Prefixes to check</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.StartsWithCSafe(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">The string to compare</param>
            <param name="ignoreCase">If true comparison is case insensitive</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="str"/> is null.</exception>
        </member>
        <member name="M:CMS.Base.StringExtensions.StartsWithCSafe(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">The string to compare</param>
            <param name="comparison">Comparison type</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.StartsWithCSafe(System.String,System.String)">
            <summary>
            Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">The string to compare</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EndsWithCSafe(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether the ending of this string instance matches the specified string. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">The string to compare</param>
            <param name="ignoreCase">If true comparison is case insensitive</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EndsWithCSafe(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether the ending of this string instance matches the specified string. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">The string to compare</param>
            <param name="comparison">Comparison type</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EndsWithCSafe(System.String,System.String)">
            <summary>
            Determines whether the ending of this string instance matches the specified string when compared using the specified comparison option. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">The string to compare</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EndsWithAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Returns true if the string ends with any of the given strings
            </summary>
            <param name="value">Value to check</param>
            <param name="comparison">Comparison type</param>
            <param name="suffixes">Suffixes to check</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.ToLowerCSafe(System.String)">
            <summary>
            Converts string to lower case. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="str">String source data</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.ToUpperCSafe(System.String)">
            <summary>
            Converts string to upper case. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="str">String source data</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EqualsCSafe(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="strA">String source data</param>
            <param name="strB">String to compare</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EqualsCSafe(System.String,System.String,System.Boolean)">
            <summary>
            Determines whether two specified String objects have the same value
            </summary>
            <param name="strA">String source data</param>
            <param name="strB">String to compare</param>
            <param name="ignoreCase">If true, compare is case insensitive</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EqualsCSafe(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether two specified String objects have the same value. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="strA">String source data</param>
            <param name="strB">String to compare</param>
            <param name="comparison">String comparison options</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.EqualsCSafe(System.String,System.Object)">
            <summary>
            Determines whether two specified String objects have the same value. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="strA">String source data</param>
            <param name="strB">Object to compare</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.CompareToCSafe(System.String,System.String,System.Boolean)">
            <summary>
            Compares the current string with another string. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="strA">String source data</param>
            <param name="strB">String to compare</param>
            <param name="ignoreCase">If true, compare is case insensitive</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.CompareToCSafe(System.String,System.String)">
            <summary>
            Compares the current string with another string. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="strA">String source data</param>
            <param name="strB">String to compare</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.IndexOfCSafe(System.String,System.String,System.Boolean)">
            <summary>
            Reports the index of the first occurrence of the specified string in the current String object. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object.</param>
            <param name="str">String to find</param>
            <param name="ignoreCase">If true, search is case insensitive.</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.IndexOfCSafe(System.String,System.Char,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified char in this instance. The search starts at a specified character position. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">Value object</param>
            <param name="chr">Char to find</param>
            <param name="index">The search starting position</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.IndexOfCSafe(System.String,System.Char)">
            <summary>
            Reports the index of the first occurrence of the specified char in this instance. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">Value object</param>
            <param name="chr">Char to find</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.IndexOfCSafe(System.String,System.String,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified string in this instance. The search starts at a specified character position. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">Value object</param>
            <param name="str">String to find</param>
            <param name="startIndex">The search starting position</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.IndexOfCSafe(System.String,System.String)">
            <summary>
            Reports the index of the first occurrence of the specified string in the current String object. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">String to find</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.IndexOfCSafe(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Reports the index of the first occurrence of the specified string in this instance. The search starts at a specified character position. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object.</param>
            <param name="str">String to find</param>
            <param name="startIndex">The search starting position</param>
            <param name="ignoreCase">If true, search is case insensitive</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.LastIndexOfCSafe(System.String,System.String,System.Boolean)">
            <summary>
            Reports the index position of the last occurrence of a specified string within this instance. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">String to find</param>
            <param name="ignoreCase">True if comparison should be made incasesensitive</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.LastIndexOfCSafe(System.String,System.Char)">
            <summary>
            Reports the index position of the last occurrence of a specified char within this instance. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="chr">Char to find</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.LastIndexOfCSafe(System.String,System.String,System.Int32)">
            <summary>
            Reports the index position of the last occurrence of a specified string within this instance. The search starts at a specified character position. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">String to find</param>
            <param name="startIndex">The search starting position</param>
        </member>
        <member name="M:CMS.Base.StringExtensions.LastIndexOfCSafe(System.String,System.String)">
            <summary>
            Reports the index position of the last occurrence of a specified string within this instance. The search starts at a specified character position. This method is culture safe - it fixes some problems with different cultures.
            </summary>
            <param name="value">String object</param>
            <param name="str">String to find</param>
        </member>
        <member name="T:CMS.Base.StringList">
            <summary>
            Represents a list of strings separated by semicolon
            </summary>
        </member>
        <member name="P:CMS.Base.StringList.Items">
            <summary>
            Items that take part in the list
            </summary>
        </member>
        <member name="P:CMS.Base.StringList.Separator">
            <summary>
            List separator
            </summary>
        </member>
        <member name="P:CMS.Base.StringList.StringRepresentation">
            <summary>
            String representation of the list
            </summary>
        </member>
        <member name="M:CMS.Base.StringList.#ctor(System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="items">List items</param>
        </member>
        <member name="M:CMS.Base.StringList.WithSeparator(System.String)">
            <summary>
            Sets the separator to the list
            </summary>
            <param name="separator">Separator to use</param>
        </member>
        <member name="M:CMS.Base.StringList.ToString">
            <summary>
            Returns the string representation of the list
            </summary>
        </member>
        <member name="M:CMS.Base.StringList.op_Implicit(CMS.Base.StringList)~System.String">
            <summary>
            Implicit operator to convert list of strings to string
            </summary>
            <param name="list">List of values</param>
        </member>
        <member name="T:CMS.Base.SystemContext">
            <summary>
            Environment variables
            </summary>
        </member>
        <member name="F:CMS.Base.SystemContext.EnglishCulture">
            <summary>
            English culture.
            </summary>
        </member>
        <member name="F:CMS.Base.SystemContext.IsWebProjectDebug">
            <summary>
            True if web project is compiled in debug mode.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.IsCMSRunningAsMainApplication">
            <summary>
            Indicates whether hosting environment is CMS web-based application (is not running as a part of external application).
            </summary>
            <remarks>
            This property should be used only internally.
            </remarks>
        </member>
        <member name="P:CMS.Base.SystemContext.IsWebApplicationProject">
            <summary>
            Returns true if web application is installed (instead of web project).
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.IsRunningOnAzure">
            <summary>
            Indicates whether current instance is an Azure Cloud Services deployment (is false for Azure Web Apps).
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.IsPrecompiledWebsite">
            <summary>
            Returns true if the website is precompiled (checks existence of codebehind file of Logon page).
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.ServerName">
            <summary>
            Server name.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.MachineName">
            <summary>
            Machine name.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.InstanceName">
            <summary>
            Returns unique name of the instance, i.e. ServerName for multi-instance environments or MachineName with ApplicationPath in other cases.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.ApplicationPath">
            <summary>
            Web application path (e.g. /WebProject1)
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.WebApplicationVirtualPath">
            <summary>
            Returns the application virtual path.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.WebApplicationPhysicalPath">
            <summary>
            Web application physical path. Trimmed backslash '\' at the end. E.g. c:\inetpub\wwwroot\MySite
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.DiagnosticLogging">
            <summary>
            Indicates whether diagnostic information should be additionally logged to the event log.
            </summary>
            <remarks>
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
            <exclude />
        </member>
        <member name="P:CMS.Base.SystemContext.DevelopmentMode">
            <summary>
            Development mode type.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.UseWebApplicationConfiguration">
            <summary>
            Indicates if WebApplicationPhysicalPath property should be used to initialize the configuration manager.
            </summary>
        </member>
        <member name="P:CMS.Base.SystemContext.IsWebSite">
            <summary>
            Indicates whether the application runs on a web server, or as part of some other tool (e.g. Console application).
            </summary>
            <remarks>
            <para>
            To distinguish a web site from a web application, <see cref="P:CMS.Base.SystemContext.IsWebApplicationProject"/> is suitable.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.Base.SystemContext.InstanceNameSuffix">
            <summary>
            Gets the suffix used for <see cref="M:CMS.Base.SystemContext.GenerateUniqueInstanceName"/>.
            </summary>
            <remarks>
            Suffix is optional and helps distinguish applications on the same machine. 
            Suffix is added automatically when not defined in application config and application is considered as web application but not main application.
            </remarks>
        </member>
        <member name="M:CMS.Base.SystemContext.GenerateUniqueInstanceName">
            <summary>
            Gets the automatic server name that is using for current instance
            </summary>
        </member>
        <member name="T:CMS.Base.AbstractWorker">
            <summary>
            Abstract class for the thread worker.
            </summary>
        </member>
        <member name="E:CMS.Base.AbstractWorker.OnStop">
            <summary>
            Raised when worker finishes.
            </summary>
        </member>
        <member name="P:CMS.Base.AbstractWorker.RunInSequence">
            <summary>
            If true, the thread is a part of the sequence and should perform the actions after the previous thread finishes.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractWorker.RunAsync">
            <summary>
            Runs the worker as a new thread.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractWorker.RaiseStop">
            <summary>
            Raises OnStop event.
            </summary>
        </member>
        <member name="M:CMS.Base.AbstractWorker.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="T:CMS.Base.CMSParallel">
            <summary>
            Wrapper for a Parallel class, providing additional operations to make threads compatible with CMS API (such as CMSThread class)
            </summary>
        </member>
        <member name="M:CMS.Base.CMSParallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <summary>
            Executes a for each operation on an System.Collections.IEnumerable{TSource} in which iterations may run in parallel. Wraps the operation into CMSThread to ensure proper context.
            </summary>
            <param name="source">Parallel sources</param>
            <param name="body">Executing body</param>
            <param name="options">Options for executing</param>
            <param name="count">Number of the items that will be executed. If set, optimizes the performance in case there is none or one items in the source.</param>
        </member>
        <member name="M:CMS.Base.CMSParallel.ForEach``1(``0[],System.Action{``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Executes a for each operation on an System.Collections.IEnumerable{TSource} in which iterations may run in parallel. Wraps the operation into CMSThread to ensure proper context.
            </summary>
            <param name="source">Parallel sources</param>
            <param name="body">Executing body</param>
            <param name="options">Options for executing</param>
        </member>
        <member name="M:CMS.Base.CMSParallel.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Executes a for each operation on an System.Collections.IEnumerable{TSource} in which iterations may run in parallel. Wraps the operation into CMSThread to ensure proper context.
            </summary>
            <param name="source">Parallel sources</param>
            <param name="body">Executing body</param>
            <param name="options">Options for executing</param>
        </member>
        <member name="M:CMS.Base.CMSParallel.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Executes a for each operation on an System.Collections.IEnumerable{TSource} in which iterations may run in parallel. Wraps the operation into CMSThread to ensure proper context.
            </summary>
            <param name="source">Parallel sources</param>
            <param name="body">Executing body</param>
            <param name="options">Options for executing</param>
        </member>
        <member name="T:CMS.Base.CMSThread">
            <summary>
            Wrapper class for <see cref="T:System.Threading.Thread"/> object with additional debug, log and context item possibilities.
            </summary>
            <remarks>
            Based on the <see cref="P:CMS.Base.ThreadSettings.UseEmptyContext"/> flag, the <see cref="T:CMS.Base.CMSThread"/> starts with empty context items or copies context items from the parent thread.
            Only context items based on the <see cref="T:CMS.Base.AbstractContext`1"/> class are copied.
            </remarks>
        </member>
        <member name="F:CMS.Base.CMSThread.ABORT_REASON_STOP">
            <summary>
            Thread was stopped by the user.
            </summary>
        </member>
        <member name="F:CMS.Base.CMSThread.THREAD_GUID_ABORT_DATA_NAME">
            <summary>
            String constant used to store Thread GUID in <see cref="T:CMS.Base.ThreadAbortData"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.Aborted">
            <summary>
            If true, the thread  was aborted
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.DisableDebug">
            <summary>
            Gets or sets the value that indicates whether debug should be disabled for current thread
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.DebugItem">
            <summary>
            Current debug item
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.LogContextAccessor">
            <summary>
            Provides access to the current event log context and methods to manage existing event log contexts.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.RunningThreads">
            <summary>
            Counter of running Threads.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.ConnectionString">
            <summary>
            Connection string name that the thread should use to access the database
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.InnerThread">
            <summary>
            Worker object.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.ThreadID">
            <summary>
            Thread ID.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.ThreadGUID">
            <summary>
            Thread GUID.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.ThreadStarted">
            <summary>
            Time when the thread started.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.ThreadFinished">
            <summary>
            Time when the thread finished.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.MethodName">
            <summary>
            Name of the method which is running the thread actions.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.MethodClassName">
            <summary>
            Name of the class which is running the thread actions.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.RequestUrl">
            <summary>
            Request URL which created the thread.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.Log">
            <summary>
            Logs for long running operations.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.AllowAsyncActions">
            <summary>
            Indicates if new threads can be created within this thread. (By default no new threads are created.)
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.Mode">
            <summary>
            If true, the thread runs synchronously
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.Context">
            <summary>
            Thread context
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.IsBackground">
            <summary>
            Defines if a thread is a background thread
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.Priority">
            <summary>
            Specifies the scheduling priority.
            </summary>
        </member>
        <member name="P:CMS.Base.CMSThread.Settings">
            <summary>
            Thread settings
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.#ctor(System.Threading.ThreadStart,System.Boolean,CMS.Base.ThreadModeEnum)">
            <summary>
            Creates new instance of <see cref="T:CMS.Base.CMSThread"/>.
            </summary>
            <param name="start">Thread start method</param>
            <param name="createLog">Indicates whether thread should create it's own log.</param>
            <param name="mode">Thread mode</param>
        </member>
        <member name="M:CMS.Base.CMSThread.#ctor(System.Threading.ThreadStart,CMS.Base.ThreadSettings)">
            <summary>
            Creates new instance of <see cref="T:CMS.Base.CMSThread"/>.
            </summary>
            <param name="start">A <see cref="T:System.Threading.ThreadStart"/> delegate that represents the methods to be invoked when this thread begins executing.</param>
            <param name="settings">Settings object with required behavior of <see cref="T:CMS.Base.CMSThread"/> object. The <paramref name="settings"/> object must not be modified.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.SetThreadMode(CMS.Base.ThreadModeEnum)">
            <summary>
            Sets the <see cref="P:CMS.Base.CMSThread.Mode"/> property value based on <paramref name="initialMode"/> and <see cref="P:CMS.Base.CMSActionContext.CurrentAllowAsyncActions"/>.
            </summary>
            <param name="initialMode">Requested thread mode.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.CreateInnerThread">
            <summary>
            Creates a new inner thread
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.GetCurrentThreadId">
            <summary>
            Gets the current thread ID
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.LoadTargetDelegateInfo(System.Delegate)">
            <summary>
            Sets the target delegate information
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.Join">
            <summary>
            Blocks the calling thread until a thread terminates, while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <seealso cref="M:System.Threading.Thread.Join"/>
        </member>
        <member name="M:CMS.Base.CMSThread.Join(System.Int32)">
            <summary>
            Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses,
            while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate.</param>
            <returns>True if the thread has terminated. False if the thread has not terminated after the amount of time specified by the <paramref name="millisecondsTimeout"/> parameter has elapsed.</returns>
            <seealso cref="M:System.Threading.Thread.Join(System.Int32)"/>
        </member>
        <member name="M:CMS.Base.CMSThread.Start(System.Boolean)">
            <summary>
            Starts the thread.
            </summary>
            <param name="sequence">If true, the thread is a part of the sequence and should perform the actions after the previous thread finishes</param>
        </member>
        <member name="M:CMS.Base.CMSThread.Abort">
            <summary>
            Raises a <see cref="T:System.Threading.ThreadAbortException"/> in the thread on which it is invoked,
             to begin the process of terminating the thread. Calling this method usually terminates the thread.
            </summary>
            <remarks>In case of <see cref="F:CMS.Base.ThreadModeEnum.Sync"/> this method also kills all CMSThreads running within the same thread.</remarks>
            <seealso cref="M:CMS.Base.CMSThread.Stop"/>
        </member>
        <member name="M:CMS.Base.CMSThread.StopAllThreads(System.Boolean,System.Boolean)">
            <summary>
            Stops all running threads
            </summary>
            <param name="allowNewThreads">If true, new threads are </param>
            <param name="waitForAbort">If true, the process waits for all threads to be finished</param>
        </member>
        <member name="M:CMS.Base.CMSThread.ThrowThreadNotJoined(CMS.Base.CMSThread,System.Int32)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> for <see cref="T:CMS.Base.CMSThread"/> that has failed to terminate within <paramref name="millisecondsTimeout"/> period.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.Stop">
            <summary>
            Stops the thread execution.
            </summary>
            <remarks>
            <para>
            The thread is aborted but <seealso cref="T:System.Threading.ThreadAbortException"/> is not logged.
            </para>
            <para>
            In case of <seealso cref="F:CMS.Base.ThreadModeEnum.Sync"/> mode this method only stops this and child synchronous threads. 
            </para>
            <para>
            Parent threads running under same InnerThread will continue running.
            </para>
            </remarks>
            <seealso cref="M:CMS.Base.CMSThread.Abort"/>
        </member>
        <member name="M:CMS.Base.CMSThread.Stopped(System.Threading.ThreadAbortException)">
            <summary>
            Returns true if thread was aborted with ABORT_REASON_STOP state info e.g. Thread.Abort(CMSThread.ABORT_REASON_STOP);
            </summary>
            <param name="exception">The thread abort exception.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/></exception>
        </member>
        <member name="M:CMS.Base.CMSThread.RunAsync">
            <summary>
            Runs the worker as a new thread. For internal purposes only, use method Start instead.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.SetCultureAndRun(System.Object)">
            <summary>
            Sets thread culture and runs the action.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.LogThreadError(System.Exception)">
            <summary>
            Logs a general thread error
            </summary>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:CMS.Base.CMSThread.LogThreadAbort(System.Threading.ThreadAbortException)">
            <summary>
            Logs the thread abort exception
            </summary>
            <param name="abortEx">Abort exception</param>
        </member>
        <member name="M:CMS.Base.CMSThread.RunThread">
            <summary>
            Runs the thread
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.FinalizeThread">
            <summary>
            Finalizes the thread run
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.GetThread(System.Guid)">
            <summary>
            Finds the thread based on the given GUID.
            </summary>
            <param name="threadGuid">Thread GUID</param>
        </member>
        <member name="M:CMS.Base.CMSThread.PrepareEmptyThreadContext">
            <summary>
            Prepares empty thread context for thread with <see cref="P:CMS.Base.ThreadSettings.UseEmptyContext"/> set.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.PrepareThreadContext">
            <summary>
            Prepares the thread context
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.CopyContext(CMS.Base.ThreadContext)">
            <summary>
            Creates a copy of the given thread context. If the context is not given, creates a copy of current context
            </summary>
            <param name="context">Thread context</param>
        </member>
        <member name="T:CMS.Base.CMSThread.ThreadCulture">
            <summary>
            Wrapper object used as a single parameter to <see cref="M:CMS.Base.CMSThread.SetCultureAndRun(System.Object)"/> method
            to pass <see cref="T:System.Globalization.CultureInfo"/> parameters from parent to inner thread.
            </summary>
        </member>
        <member name="M:CMS.Base.CMSThread.Execute(System.Action,CMS.Base.ThreadContext,System.Delegate)">
            <summary>
            Executes the given code as it was executed in a context of CMSThread. Use this method to wrap a code, that runs from anonymous thread that you have no control over. 
            </summary>
            <param name="action">Action to execute</param>
            <param name="sourceContext">Source context of the originating thread</param>
            <param name="originalAction">Original action</param>
        </member>
        <member name="M:CMS.Base.CMSThread.ExecuteFunc``1(System.Func{``0},CMS.Base.ThreadContext,System.Delegate)">
            <summary>
            Executes the given function as it was executed in a context of CMSThread. Use this method to wrap a code, that runs from anonymous thread that you have no control over. 
            </summary>
            <param name="action">Action to execute</param>
            <param name="sourceContext">Source context items of the originating thread</param>
            <param name="originalAction">Original action</param>
        </member>
        <member name="M:CMS.Base.CMSThread.AllowEmptyContext(CMS.Base.CMSThread)">
            <summary>
            Allows anonymous thread to use new dedicated context in subsequent calls.
            Call this method in case the anonymous thread isn't initiated from a request thread, or in case you want to start with an empty thread context on purpose.
            </summary>
            <param name="thread">Thread for which to allow the empty context. Pass null for current thread.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.Wrap``2(System.Action{``0,``1},System.Boolean)">
            <summary>
            Wraps the given method into CMSThread context
            </summary>
            <param name="action">Action to wrap</param>
            <param name="multipleThreads">If true, the wrapped method may be used by multiple threads. Use this parameter to ensure that all the threads receive the original context values.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.Wrap``1(System.Action{``0},System.Boolean)">
            <summary>
            Wraps the given method into CMSThread context
            </summary>
            <param name="action">Action to wrap</param>
            <param name="multipleThreads">If true, the wrapped method may be used by multiple threads. Use this parameter to ensure that all the threads receive the original context values.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.Wrap(System.Action,System.Boolean)">
            <summary>
            Wraps the given method into CMSThread context
            </summary>
            <param name="action">Action to wrap</param>
            <param name="multipleThreads">If true, the wrapped method may be used by multiple threads. Use this parameter to ensure that all the threads receive the original context values.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.WrapFunc``2(System.Func{``0,``1},System.Boolean)">
            <summary>
            Wraps the given method into CMSThread context
            </summary>
            <param name="action">Action to wrap</param>
            <param name="multipleThreads">If true, the wrapped method may be used by multiple threads. Use this parameter to ensure that all the threads receive the original context values.</param>
        </member>
        <member name="M:CMS.Base.CMSThread.WrapFunc``1(System.Func{``0},System.Boolean)">
            <summary>
            Wraps the given method into CMSThread context
            </summary>
            <param name="action">Action to wrap</param>
            <param name="multipleThreads">If true, the wrapped method may be used by multiple threads. Use this parameter to ensure that all the threads receive the original context values.</param>
        </member>
        <member name="T:CMS.Base.SimpleThreadHandler">
            <summary>
            Simple thread handler
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleThreadHandler.StartEvent(CMS.Base.CMSThread)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="thread">Handled thread</param>
        </member>
        <member name="T:CMS.Base.ThreadEventArgs">
            <summary>
            Thread event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadEventArgs.Thread">
            <summary>
            Thread
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadEvents">
            <summary>
            Events raised within thread processing
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadEvents.Init">
            <summary>
            Fires when the thread gets initialized. Runs from the original thread context.
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadEvents.Run">
            <summary>
            Fires when the thread runs. Runs from the new thread context.
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadEvents.Finalize">
            <summary>
            Fires when the finalizes its execution. Runs from the new thread context.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadHandler">
            <summary>
            Thread handler
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadHandler.StartEvent(CMS.Base.CMSThread)">
            <summary>
            Initiates the event handling
            </summary>
            <param name="thread">Handled thread</param>
        </member>
        <member name="T:CMS.Base.ThreadAbortData">
            <summary>
            Container class used as state info for Thread.Abort method parameter
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadAbortData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.Base.ThreadAbortData"/> class.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadAbortData.AbortReason">
            <summary>
            Gets or sets the abort reason.         
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadAbortData.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified column name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:CMS.Base.ThreadAbortData.GetValue(System.String)">
            <summary>
            Returns value of column.
            </summary>
            <param name="columnName">Column name</param>
            <returns></returns>
        </member>
        <member name="M:CMS.Base.ThreadAbortData.SetValue(System.String,System.Object)">
            <summary>
            Sets value of column.
            </summary>
            <param name="columnName">Column name</param>
            <param name="value">Column value</param>
            <returns></returns>
        </member>
        <member name="M:CMS.Base.ThreadAbortData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:CMS.Base.ThreadDebug">
            <summary>
            Thread debug helper
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebug.MaxFinishedThreadsLogged">
            <summary>
            Maximum number of finished threads that should be logged by the system.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebug.LiveThreadItems">
            <summary>
            Gets the List of currently running threads. This property is intended for internal use only. 
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebug.FinishedThreadItems">
            <summary>
            Gets the List of finished threads. This property is intended for internal use only. 
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadDebug.ThreadStarted(CMS.Base.CMSThread)">
            <summary>
            Registers the thread to the thread list
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadDebug.ThreadFinished(CMS.Base.CMSThread)">
            <summary>
            Proceeds the necessary actions when the thread finished
            </summary>
            <param name="thread">Thread that finished</param>
        </member>
        <member name="T:CMS.Base.ThreadDebugItem">
            <summary>
            Thread debug item used in debug report. This class is intended for internal use only. 
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.ThreadGuid">
            <summary>
            Gets the thread GUID
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.MethodClassName">
            <summary>
            Gets the method class name
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.MethodName">
            <summary>
            Gets the method name
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.ThreadId">
            <summary>
            Gets the thread id
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.RequestUrl">
            <summary>
            Gets the request URL
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.HasLog">
            <summary>
            Gets the value that indicates whether thread has log
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.ThreadFinished">
            <summary>
            Gets the thread finished time
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.Duration">
            <summary>
            Gets the thread duration in seconds
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.Status">
            <summary>
            Gets the thread status
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.ThreadStarted">
            <summary>
            Gets or sets the thread starting time
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadDebugItem.RequestGuid">
            <summary>
            Request GUID to identify debugs of the current thread
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadDebugItem.#ctor(CMS.Base.CMSThread)">
            <summary>
            Constructor
            </summary>
            <param name="thread">Source thread object</param>
        </member>
        <member name="M:CMS.Base.ThreadDebugItem.ToString">
            <summary>
            Returns the string representation of the object
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadModeEnum">
            <summary>
            Enumeration of the thread modes
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadModeEnum.Async">
            <summary>
            Asynchronous execution within thread newly created from CMSThread or request. Ensures the new thread proper context.
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadModeEnum.Sync">
            <summary>
            Synchronous execution within existing CMSThread or request. Keeps the execution context of current thread.
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadModeEnum.Wrapper">
            <summary>
            Synchronous execution within existing anonymous thread. Ensures the anonymous thread proper context as it was a CMSThread.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadSettings">
            <summary>
            The <see cref="T:CMS.Base.ThreadSettings" /> class specifies basic features of a <see cref="T:CMS.Base.CMSThread" />.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadSettings.CreateLog">
            <summary>
            Indicates whether <see cref="T:CMS.Base.CMSThread"/> should create it's own log.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadSettings.Mode">
            <summary>
            Thread mode indicating whether the thread runs asynchronously, synchronously, or represents a wrapper for an anonymous thread.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadSettings.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread. Applies only to thread which run in <see cref="F:CMS.Base.ThreadModeEnum.Async"/> mode.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadSettings.Priority">
            <summary>
            Specifies the scheduling priority. Applies only to thread which run in <see cref="F:CMS.Base.ThreadModeEnum.Async"/> mode.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadSettings.UseEmptyContext">
            <summary>
            If true, the thread uses a new empty context
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadWorker`1">
            <summary>
            Worker processing actions in single (one per application and generic variant), ever-running asynchronous thread.
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadWorker`1.LOG_MAX_LENGTH">
            <summary>
            Maximum length of the worker log to prevent memory leaks
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadWorker`1.ThreadStopped">
            <summary>
            Event indicating that the thread stopped
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadWorker`1.SyncRoot">
            <summary>
            Lock this object when doing actions that might change the result of condition run while stopping execution
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.MaintenanceInterval">
            <summary>
            Gets the maintenance interval in milliseconds for the worker. When 0 (default), the maintenance is not performed.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.UseLogContext">
            <summary>
            If true, the thread uses a log context for its operations
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.ProcessingPaused">
            <summary>
            Indicates whether worker routine is temporarily paused.
            </summary>
            <remarks>
            This property supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.PollThread">
            <summary>
            Gets or sets thread which is periodically checking for new tasks.  
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.DefaultInterval">
            <summary>
            Gets the default interval in milliseconds for the worker.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.Interval">
            <summary>
            Returns interval value used to run worker tasks periodically.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.StopRequestToken">
            <summary>
            The <see cref="T:System.Threading.CancellationToken"/> to be checked if the thread should stop execution.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadWorker`1.Current">
            <summary>
            Current thread worker object
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Process">
            <summary>
            Method processing actions.
            </summary>
            <remarks>If exception from override arises, the thread will not end, but exception will not be logged. Custom implementation of exception handling is required.</remarks>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Finish">
            <summary>
            Finishes the worker process.
            </summary>
            <remarks>
            <para>
            Implement this method to specify what the worker must do in order to not lose its internal data when being finished.
            </para>
            <para>
            Execution or completeness is not guaranteed. Do not use this method for time-consuming actions. Code execution can be forcibly interrupted after a short period of time. 
            </para>
            <para>
            The <see cref="M:CMS.Base.ThreadWorker`1.Finish"/> method is called in following scenarios: 
            <list type="bullet">
            <item><description>Application is terminating and <see cref="F:CMS.Base.ApplicationEvents.Finalize"/> event is called.</description></item>
            <item><description>Thread was aborted (for any reason).</description></item>
            <item><description><see cref="M:CMS.Base.ThreadWorker`1.StopExecution(System.Func{System.Boolean})"/> method was called.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.DoMaintenance">
            <summary>
            Runs the maintenance routine for the worker
            </summary>
            <remarks>If exception from override arises, the thread will not end, but exception will not be logged. Custom implementation of exception handling is required.</remarks>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Reset">
            <summary>
            Resets the instance to initial state.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.GetNextMaintenanceTime(System.DateTime,System.DateTime)">
            <summary>
            Returns next time maintenance should be scheduled.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.GetTimeBeforeNextRun(System.DateTime,System.DateTime)">
            <summary>
            Returns time required to sleep
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.IsThreadRunning">
            <summary>
            Returns true if the worker thread is currently running
            </summary>
            <remarks>
            This method supports the framework infrastructure and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.StartAsyncThread">
            <summary>
            Runs the task in an asynchronous thread.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.CreateThreadSettings">
            <summary>
            Creates <see cref="T:CMS.Base.ThreadSettings"/> object and enables the <see cref="P:CMS.Base.ThreadSettings.IsBackground"/> and <see cref="P:CMS.Base.ThreadSettings.UseEmptyContext"/> properties.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.CreateThread">
            <summary>
            Creates a worker thread object. Override to modify the thread configuration
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Run(System.Security.Principal.WindowsIdentity)">
            <summary>
            Runs the action under given identity.
            </summary>
            <param name="wi">Windows identity</param>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.ExecuteCancellableSteps(System.Action[])">
            <summary>
            Executes specified actions with stop request check before each step and after all steps
            </summary>
            <returns><c>true</c> if can continue; otherwise <c>false</c></returns>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Run">
            <summary>
            Runs the action.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.RunProcess">
            <summary>
            Runs the internal process of the worker
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Initialize">
            <summary>
            Initializes the worker. Runs in the worker thread before the thread processes the first iteration.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.EnsureRunningThread">
            <summary>
            Ensures a running thread for this processor
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.StopExecution(System.Func{System.Boolean})">
            <summary>
            Stops the worker after finishing its job.
            </summary>
            <remarks>
            You should use parameter <paramref name="condition"/> to make sure that it is safe to stop the worker and no data are lost. 
            </remarks>
            <param name="condition">Enables you to cancel stopping the worker by returning false from the function.</param>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.RunFinish">
            <summary>
            Runs the finish action
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Dispose">
            <summary>
            Disposes instance of thread worker.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.Dispose(System.Boolean)">
            <summary>
            Disposes instance of thread worker.
            </summary>
            <param name="disposing">Indicates to dispose managed resources.</param>
        </member>
        <member name="M:CMS.Base.ThreadWorker`1.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="T:CMS.Base.WindowsIdentityHelper">
            <summary>
            Helper class for managing Windows identity.
            </summary>
        </member>
        <member name="M:CMS.Base.WindowsIdentityHelper.Impersonate(System.Security.Principal.WindowsIdentity,System.Action)">
            <summary>
            Run given <paramref name="action"/> under user represented by <paramref name="identity"/>.
            </summary>
            <param name="identity">Represents user used for impersonation.</param>
            <param name="action">Action to run.</param>
        </member>
        <member name="M:CMS.Base.WindowsIdentityHelper.GetCurrent">
            <summary>
            For Windows OS returns the identity of the current user, otherwise returns null.
            </summary>
        </member>
        <member name="T:CMS.Base.SimpleQueueItem">
            <summary>
            Item containing <see cref="P:CMS.Base.SimpleQueueItem.Action"/> and identificator used for checking duplicity in queue of <see cref="T:CMS.Base.SimpleQueueWorker`1"/>. 
            </summary>
        </member>
        <member name="P:CMS.Base.SimpleQueueItem.Action">
            <summary>
            <see cref="P:CMS.Base.SimpleQueueItem.Action"/> to be run by <see cref="T:CMS.Base.SimpleQueueWorker`1"/>.
            </summary>
        </member>
        <member name="P:CMS.Base.SimpleQueueItem.Key">
            <summary>
            Key for checking duplicity in queue of <see cref="T:CMS.Base.SimpleQueueWorker`1"/>. 
            Default value is unique <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleQueueItem.Equals(System.Object)">
            <summary>
            Equals override checking equality of actions by <see cref="P:CMS.Base.SimpleQueueItem.Key"/> property.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:CMS.Base.SimpleQueueItem.GetHashCode">
            <summary>
            Override required by compiler.
            </summary>
        </member>
        <member name="T:CMS.Base.SimpleQueueWorker`1">
            <summary>
            Worker for running various simple asynchronous actions.
            </summary>
            <remarks>Duplicity of items being enqueued is checks by <see cref="P:CMS.Base.SimpleQueueItem.Key"/>.</remarks>
        </member>
        <member name="P:CMS.Base.SimpleQueueWorker`1.DefaultInterval">
            <summary>
            Default interval of processing cycle.
            </summary>
        </member>
        <member name="P:CMS.Base.SimpleQueueWorker`1.MaintenanceInterval">
            <summary>
            Maintenance interval for turning off the thread.
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleQueueWorker`1.DoMaintenance">
            <summary>
            Turns off thread in case of inactivity.
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleQueueWorker`1.Initialize">
            <summary>
            Initialize item counter event.
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleQueueWorker`1.Finish">
            <summary>
            Finishes the worker process.
            </summary>
        </member>
        <member name="M:CMS.Base.SimpleQueueWorker`1.Enqueue(System.Action)">
            <summary>
            Enqueue action with random unique key.
            </summary>
            <param name="action">Action to be enqueued.</param>
        </member>
        <member name="M:CMS.Base.SimpleQueueWorker`1.Enqueue(System.String,System.Action)">
            <summary>
            Enqueue action with given key.
            </summary>
            <param name="key">Action key.</param>
            <param name="action">Action to be enqueued.</param>
        </member>
        <member name="M:CMS.Base.SimpleQueueWorker`1.ProcessItem(CMS.Base.SimpleQueueItem)">
            <summary>
            Processing of single action.
            </summary>
            <param name="item">Item to be processed.</param>
        </member>
        <member name="T:CMS.Base.ThreadQueueWorker`2">
            <summary>
            Worker processing queue in single (one per application and generic variant), ever-running asynchronous thread
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadQueueWorker`2.Events">
            <summary>
            Events fired by the worker
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadQueueWorker`2.AllowEnqueue">
            <summary>
            <para>
            Indicates whether <see cref="M:CMS.Base.ThreadQueueWorker`2.Enqueue(`0,System.Boolean)"/> method can put items in queue for asynchronous processing. True by default. Work items are processed synchronously when set to false.
            </para>
            <para>
            Unless explicitly set, the default implementation returns value of <see cref="P:CMS.Base.ThreadQueueWorkerSettings.AllowEnqueue"/> flag.
            </para>
            </summary>
            <remarks>
            <para>
            Setting this flag to false does not affect existing queue items.
            </para>
            <para>
            Setting this flag to false can cause deadlocks as work items which would be queued and processed from synchronization context of one worker thread are processed synchronously from possibly multiple threads.
            </para>
            <para>
            Setting this flag to false is recommended in context of tests only. It is not intended to be set to false in production environment.
            </para>
            </remarks>
        </member>
        <member name="P:CMS.Base.ThreadQueueWorker`2.ItemsInQueue">
            <summary>
            Return the current number of items in the queue
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadQueueWorker`2.CheckDuplicity">
            <summary>
            If true, the queue checks the duplicity when inserting items. The duplicity is checked using the default comparer of the item.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.Enqueue(`0,System.Boolean)">
            <summary>
            Adds new item to processing queue.
            </summary>
            <param name="newItem">Adds the item to the queue</param>
            <param name="ensureThread">If true, the processing thread is ensured</param>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.Dequeue">
            <summary>
            Returns the first item in the queue and removes it
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.Process">
            <summary>
            Method processing queued actions.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.Process(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Method processing given actions.
            </summary>
            <param name="items">Items to be processed.</param>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.FetchItemsToProcess">
            <summary>
            Gets the queued items to process.
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.ProcessItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Processes the given list of items. Override this method to process queued items as a bulk. Returns the number of processed items.
            </summary>
            <param name="items">Worker queue.</param>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.ProcessItem(`0)">
            <summary>
            Processes the item in the queue. Override this method to process a single item from the queue.
            </summary>
            <param name="item">Item to process.</param>
            <remarks>
            If exception from override arises, the thread will not end, the rest of queue will be processed, but exception will not be logged. 
            Please consider implementing exception handling mechanism.
            </remarks>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorker`2.#cctor">
            <summary>
            Static constructor registering the generic type.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadQueueWorkerEventArgs`1">
            <summary>
            Thread queue worker event arguments
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadQueueWorkerEventArgs`1.ItemsProcessed">
            <summary>
            Number of items processed in current cycle.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadQueueWorkerEventArgs`1.Items">
            <summary>
            Items to process. Does not support multiple enumerations since it is working over a queue.
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadQueueWorkerEvents`2">
            <summary>
            Events fired by the worker
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorkerEvents`2.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CMS.Base.ThreadQueueWorkerEvents`2.ProcessItems">
            <summary>
            Fires when the items from the queue are processed
            </summary>
        </member>
        <member name="T:CMS.Base.ThreadQueueWorkerHandler`1">
            <summary>
            Thread queue worker handler
            </summary>
        </member>
        <member name="M:CMS.Base.ThreadQueueWorkerHandler`1.StartEvent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initiates the event handling
            </summary>
            <param name="items">Worker queue</param>
        </member>
        <member name="T:CMS.Base.ThreadQueueWorkerSettings">
            <summary>
            Settings common for all <see cref="T:CMS.Base.ThreadQueueWorker`2"/>s.
            </summary>
        </member>
        <member name="P:CMS.Base.ThreadQueueWorkerSettings.AllowEnqueue">
            <summary>
            Indicates whether <see cref="M:CMS.Base.ThreadQueueWorker`2.Enqueue(`0,System.Boolean)"/> method can put items in a queue for asynchronous processing. True by default. Work items are processed synchronously when set to false.
            </summary>
        </member>
        <member name="T:CMS.Base.IValidationError">
            <summary>
            Represents an error resulting from a validation.
            </summary>
            <seealso cref="T:CMS.Base.IValidator"/>
        </member>
        <member name="P:CMS.Base.IValidationError.MessageKey">
            <summary>
            Gets a key which can be used to retrieve a localized error message.
            </summary>
        </member>
        <member name="P:CMS.Base.IValidationError.MessageParameters">
            <summary>
            Gets an array of parameters to be substituted to localized error message.
            Returns an empty array when no parameters are available.
            </summary>
        </member>
        <member name="T:CMS.Base.IValidationErrorExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:CMS.Base.IValidationError"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.IValidationErrorExtensions.GetMessage(CMS.Base.IValidationError,System.String)">
            <summary>
            Returns a localized message with substituted parameters for <paramref name="validationError"/>.
            </summary>
            <param name="validationError">Validation error whose localized message to retrieve.</param>
            <param name="culture">Culture to use for localization.</param>
            <returns>Returns a localized message for validation error.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="validationError"/> is null.</exception>
            <seealso cref="T:CMS.Core.ILocalizationService"/>
            <remarks>
            The default culture is used for messages which are missing localization in specified <paramref name="culture"/>.
            </remarks>
        </member>
        <member name="T:CMS.Base.IValidator">
            <summary>
            Declares members of a validator.
            </summary>
            <remarks>
            Validators represent a reusable validation logic.
            </remarks>
        </member>
        <member name="P:CMS.Base.IValidator.Errors">
            <summary>
            Gets an enumeration of validation errors associated with this validator. An empty enumeration is returned
            if validation succeeded.
            </summary>
            <remarks>
            Accessing this property must be preceded by a call to the <see cref="M:CMS.Base.IValidator.Validate"/> method.
            </remarks>
        </member>
        <member name="P:CMS.Base.IValidator.IsValid">
            <summary>
            Gets a value indicating whether validation succeeded.
            </summary>
            <remarks>
            Accessing this property must be preceded by a call to the <see cref="M:CMS.Base.IValidator.Validate"/> method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown when <see cref="M:CMS.Base.IValidator.Validate"/> has not been called yet.</exception>
        </member>
        <member name="M:CMS.Base.IValidator.Validate">
            <summary>
            Performs validation on this validator. The validation result is returned and can be later retrieved via <see cref="P:CMS.Base.IValidator.IsValid"/> property.
            When validation fails, an enumeration of errors associated with the validation is available in <see cref="P:CMS.Base.IValidator.Errors"/>.
            </summary>
            <returns>Returns a value indicating whether validation succeeded.</returns>
        </member>
        <member name="T:CMS.Base.IValidatorExtensions">
            <summary>
            Provides a set of extension methods for <see cref="T:CMS.Base.IValidator"/>.
            </summary>
        </member>
        <member name="M:CMS.Base.IValidatorExtensions.Contains``1(CMS.Base.IValidator)">
            <summary>
            Returns a value indicating whether a validation error of type <typeparamref name="TValidatorError"/> is in <see cref="P:CMS.Base.IValidator.Errors"/>.
            </summary>
            <typeparam name="TValidatorError">Validation error type to search for.</typeparam>
            <param name="validator">Validator whose errors to examine.</param>
            <returns>Returns true if a validation error of type <typeparamref name="TValidatorError"/> is in <see cref="P:CMS.Base.IValidator.Errors"/>, otherwise returns false.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:CMS.Base.IValidatorExtensions.FirstErrorType(CMS.Base.IValidator)">
            <summary>
            Returns <see cref="T:System.Type"/> of the first validation error in <see cref="P:CMS.Base.IValidator.Errors"/>.
            </summary>
            <param name="validator">Validator whose first error type to retrieve.</param>
            <returns>Returns <see cref="T:System.Type"/> of the first validation error.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="validator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the <see cref="P:CMS.Base.IValidator.Errors"/> property of <paramref name="validator"/> is an empty enumeration.</exception>
        </member>
        <member name="M:CMS.Base.IValidatorExtensions.GetErrorMessages(CMS.Base.IValidator,System.String)">
            <summary>
            Returns collection of localized error messages that occurred during validation.
            </summary>
            <param name="validator">Validator for which to get error message.</param>
            <param name="culture">Culture to use for localization.</param>
            <remarks>
            The default culture is used for messages which are missing localization in specified <paramref name="culture"/>.
            </remarks>
            <returns>Collection containing error messages of the validator.</returns>
        </member>
        <member name="T:CMS.RegisterCustomClassAttribute">
            <summary>
            Registers the custom class within the system or overrides the existing one.
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomClassAttribute.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomClassAttribute.AssemblyName">
            <summary>
            Class assembly name
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomClassAttribute.MarkedType">
            <summary>
            Document factory
            </summary>
        </member>
        <member name="M:CMS.RegisterCustomClassAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="className">Class name</param>
            <param name="type">Object type</param>
        </member>
        <member name="M:CMS.RegisterCustomClassAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="T:CMS.RegisterCustomHelperAttribute">
            <summary>
            Registers the custom helper within the system, replaces the default helper from which the defined one inherits.
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomHelperAttribute.MarkedType">
            <summary>
            Gets the type used as helper implementation.
            </summary>
        </member>
        <member name="M:CMS.RegisterCustomHelperAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type used as helper implementation.</param>
        </member>
        <member name="M:CMS.RegisterCustomHelperAttribute.Init">
            <summary>
            Applies the attribute
            </summary>
        </member>
        <member name="T:CMS.RegisterCustomManagerAttribute">
            <summary>
            Registers the custom manager within the system, replaces the default manager from which the defined one inherits.
            </summary>
        </member>
        <member name="P:CMS.RegisterCustomManagerAttribute.MarkedType">
            <summary>
            Gets the type used as manager implementation.
            </summary>
        </member>
        <member name="M:CMS.RegisterCustomManagerAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type used as manager implementation.</param>
        </member>
        <member name="M:CMS.RegisterCustomManagerAttribute.Init">
            <summary>
            Applies the attribute
            </summary>
        </member>
        <member name="T:CMS.NotRegisterPropertyAttribute">
            <summary>
            When used, the given property is not registered within the object
            </summary>
        </member>
        <member name="T:CMS.RegisterAllPropertiesAttribute">
            <summary>
            When used, defined if class registers its all public properties as properties of the object, except for ones excluded with ExcludeProperty attribute
            </summary>
        </member>
        <member name="T:CMS.RegisterColumnAttribute">
            <summary>
            Defines a column registered within the object
            </summary>
        </member>
        <member name="M:CMS.RegisterColumnAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.RegisterColumnAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Property name, if not set, the original property name is used</param>
        </member>
        <member name="T:CMS.RegisterPropertyAttribute">
            <summary>
            Defines a property registered within the object
            </summary>
        </member>
        <member name="M:CMS.RegisterPropertyAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CMS.RegisterPropertyAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Property name, if not set, the original property name is used</param>
        </member>
        <member name="T:CMS.Helpers.CMSHttpContext">
            <summary>
            Provides an instance of the HttpContext associated with the current request.
            </summary>
            <remarks>
            The instance could be set programmatically to support testing scenarios.
            </remarks>
        </member>
        <member name="P:CMS.Helpers.CMSHttpContext.CurrentWrapper">
            <summary>
            Gets an instance of the <see cref="T:System.Web.HttpContextBase"/> class associated with the current request.
            </summary>
        </member>
        <member name="P:CMS.Helpers.CMSHttpContext.Current">
            <summary>
            Gets or sets an instance of the <see cref="T:System.Web.HttpContextBase"/> class associated with the current request.
            </summary>
            <remarks>
            This property is thread-safe, however, multiple instances of the <see cref="T:System.Web.HttpContextBase"/> class could be created simultaneously.
            </remarks>
        </member>
        <member name="T:CMS.RegisterExtenderAttribute">
            <summary>
            Specifies the extender in the assembly being attributed.
            </summary>
        </member>
        <member name="M:CMS.RegisterExtenderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the RegisterExtenderAttribute class with the specified extender type.
            </summary>
            <param name="extenderType">The type of the extender class.</param>
        </member>
        <member name="T:CMS.RegisterExtensionAttribute">
            <summary>
            Marks the class as extension of the given class
            </summary>
        </member>
        <member name="P:CMS.RegisterExtensionAttribute.ExtensionType">
            <summary>
            Gets the extension type
            </summary>
        </member>
        <member name="P:CMS.RegisterExtensionAttribute.MarkedType">
            <summary>
            Gets the extended type
            </summary>
        </member>
        <member name="M:CMS.RegisterExtensionAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="extensionType">Extension type</param>
            <param name="extendedType">Extended type</param>
        </member>
        <member name="M:CMS.RegisterExtensionAttribute.PreInit">
            <summary>
            Initializes the attribute
            </summary>
        </member>
        <member name="M:CMS.RegisterExtensionAttribute.GetExtensionObject">
            <summary>
            Creates an extension object based on extension type
            </summary>
        </member>
        <member name="T:CMS.HandlersExtensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:CMS.HandlersExtensions.FinishEvent(CMS.Base.AbstractAdvancedHandler)">
            <summary>
            Finishes the event and raises the After event actions.
            </summary>
            <param name="handler">Handler to finish</param>
        </member>
        <member name="M:CMS.HandlersExtensions.CanContinue(CMS.Base.AbstractAdvancedHandler)">
            <summary>
            Checks whether the context of execution should continue.
            </summary>
            <param name="handler">Handler to check</param>
        </member>
        <member name="M:CMS.HandlersExtensions.DontSupportCancel(CMS.Base.AbstractAdvancedHandler)">
            <summary>
            Disables the ability to cancel continuation of the execution context.
            </summary>
            <param name="handler">Handler to modify</param>
        </member>
    </members>
</doc>
