<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CMS.LicenseProvider</name>
    </assembly>
    <members>
        <member name="T:CMS.LicenseProvider.LicenseContext">
            <summary>
            Request license key values
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseContext.CurrentLicenseInfo">
            <summary>
            Returns license key info for current domain.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseCheckEvents">
            <summary>
            License check events
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseCheckEvents.ObjectCountCheckEvent">
            <summary>
            Fires when checking the current number of feature-related objects that are limited by license limitations.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.ObjectCountCheckEventArgs">
            <summary>
            Event arguments for handler <see cref="T:CMS.LicenseProvider.ObjectCountCheckHandler"/>.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.ObjectCountCheckEventArgs.ObjectCount">
            <summary>
            Number of <see cref="P:CMS.LicenseProvider.ObjectCountCheckEventArgs.Feature"/>-related objects on current website.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.ObjectCountCheckEventArgs.Feature">
            <summary>
            Feature to be checked.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.ObjectCountCheckHandler">
            <summary>
            Handler for checking the current number of feature-related objects that are limited by license limitations.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.ILicenseAddressService">
            <summary>
            Provides IP address functions for licensing.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.ILicenseAddressService.IsLocal(System.String)">
            <summary>
            Returns true when given domain is local loopback, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.ILicenseAddressService.ToFullFormat(System.String)">
            <summary>
            Returns given domain name transformed to non-shortened format.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseAddressService">
            <summary>
            Provides IP address functions for licensing.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseAddressService.IsLocal(System.String)">
            <summary>
            Returns true when given domain is local loopback, otherwise false.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseAddressService.ToFullFormat(System.String)">
            <summary>
            Returns given domain name transformed to non-shortened format.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseKeyInfo">
            <summary>
            LicenseKeyInfo data container class.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.OBJECT_TYPE">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.TYPEINFO">
            <summary>
            Type information.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.LICENSE_EXPIRATION_DATE_FORMAT">
            <summary>
            Default timestamp format for license expiration date.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.TIME_UNLIMITED_LICENSE">
            <summary>
            Unlimited license.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.SERVERS_UNLIMITED">
            <summary>
            Unlimited webfarm servers constant.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.TRIAL_KEY_LENGTH">
            <summary>
            Trial key length.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.ValidProductCodes">
            <summary>
            Valid product codes for current version.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mLicenseLoaded">
            <summary>
            If false, the license information is not loaded.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.E4">
            <summary>
            Salt for the trial license.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.AAC">
            <summary>
            Defines when the all licenses within the system will expire (used for time limited builds).
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mVersion">
            <summary>
            License version
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mValidationResult">
            <summary>
            Validation result
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mEditionValue">
            <summary>
            Edition type value
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mEdition">
            <summary>
            Edition type
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mLicenseServers">
            <summary>
            License servers
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mOwner">
            <summary>
            Name of license owner.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfo.mLicenseGuid">
            <summary>
            License identifier, used for subscription licenses.
            Used only for subscription type licenses since v13.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.IsTrial">
            <summary>
            Returns true if key is trial.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.EditionValue">
            <summary>
            Edition value.
            </summary>        
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.Version">
            <summary>
            License version.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.Owner">
            <summary>
            Name of license owner.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.Edition">
            <summary>
            License edition.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.LicenseGuid">
            <summary>
            Subscription license identifier.        
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.EditionChar">
            <summary>
            Edition character.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.ExpirationDate">
            <summary>
            Expiration date.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.ExpirationDateReal">
            <summary>
            Real expiration date.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.Domain">
            <summary>
            Domain which is assigned to license.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.Key">
            <summary>
            License key.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.LicenseServers">
            <summary>
            Gets number of webfarm servers allowed by license.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.LicenseKeyID">
            <summary>
            ID of license key.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfo.ValidationResult">
            <summary>
            Validation result.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.#ctor(System.Data.DataRow)">
            <summary>
            Constructor - Creates license key from DataRow.
            </summary>
            <param name="dr">DataRow with the license data</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.DeleteObject">
            <summary>
            Deletes the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.SetObject">
            <summary>
            Updates the object using appropriate provider.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.ProductCode">
            <summary>
            Creates product code of license key info.
            </summary>
            <returns>Product code</returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.ValidateProductCode(System.String)">
            <summary>
            Validates product code.
            </summary>
            <param name="productCode">License key info product code</param>
            <returns>True if valid, else false</returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.RemoveDependencies">
            <summary>
            Validates expiration date.
            </summary>
            <returns>True if not expired, else false</returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.LoadLicense(System.String,System.String)">
            <summary>
            Loads the license.
            </summary>
            <param name="key">License key</param>
            <param name="domain">Domain name</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.SetDomainInfo(System.String)">
            <summary>
            Validates license and stores the result into a private variable.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.ComputeTrialKey">
            <summary>
            Computes trial key using SHA1 hash.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfo.VerifyRSA(System.String,System.String)">
            <summary>
            Verifies RSA signed license key.
            </summary>
            <param name="inputText">License key</param>
            <param name="publicKey">RSA public key</param>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseKeyInfoProvider">
            <summary>
            Class providing LicenseKeyInfo management.
            </summary>
            <remarks>
            This provider is not managed by the IoC container.
            </remarks>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseKeyInfoProvider.TIME_UNLIMITED_LICENSE_CODENAME">
            <summary>
            Codename which identifies time unlimited license
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfoProvider.B">
            <summary>
            Table of license keys indexed by domain name
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfoProvider.C">
            <summary>
            Table of available features indexed by domain name and feature
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseKeyInfoProvider.J2656">
            <summary>
            Validation of license for specific edition
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.GetLicenseDictionary">
            <summary>
            Gets an empty dictionary for licenses
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.GetLicenseKeyInfo(System.Int32)">
            <summary>
            Returns the LicenseKeyInfo structure for the specified licenseKey.
            </summary>
            <param name="licenseKeyId">LicenseKey id</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.ParseDomainName(System.String)">
            <summary>
            Parses domain name from URL.
            </summary>
            <param name="url">URL</param>
            <returns>Domain name</returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.GetLicenseKeyInfo(System.String)">
            <summary>
            Returns the LicenseKeyInfo structure for the specified domain.
            </summary>
            <param name="domain">LicenseDomain</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.GetBestLicense">
            <summary>
            Returns the best available license for the given feature.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsBetterLicense(CMS.LicenseProvider.LicenseKeyInfo,CMS.LicenseProvider.LicenseKeyInfo)">
            <summary>
            Returns true if first license is better than the other for specified feature.
            </summary>
            <param name="license1">First license</param>
            <param name="license2">Second license</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.GetLicenseKeyInfoFromDB(System.String)">
            <summary>
            Returns LicenseKeyInfo object for specified domain.
            </summary>
            <param name="domain">License domain</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.GetLicenseKeys">
            <summary>
            Returns the query for all licenses.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.LicenseEditionExists(CMS.LicenseProvider.ProductEditionEnum)">
            <summary>
            Returns true if exists at least one valid license for specific edition
            </summary>
            <param name="edition">Product edition enum</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.SetLicenseKeyInfo(CMS.LicenseProvider.LicenseKeyInfo)">
            <summary>
            Sets specified licenseKey.
            </summary>
            <param name="licenseKey">LicenseKey to set</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.DeleteLicenseKeyInfo(CMS.LicenseProvider.LicenseKeyInfo)">
            <summary>
            Deletes specified license key.
            </summary>
            <param name="licenseKey">License key object</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.ClearHashtables(CMS.LicenseProvider.LicenseKeyInfo)">
            <summary>
            Clears the hashtables based on the given license key
            </summary>
            <param name="lki">License key</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.DeleteLicenseKeyInfo(System.Int32)">
            <summary>
            Deletes specified licenseKey.
            </summary>
            <param name="licenseKeyId">LicenseKey id</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.LoadKeys">
            <summary>
            Loads all keys from the database into LicenseKeys hashtable.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsCommonFeature(CMS.DataEngine.FeatureEnum)">
            <summary>
            Returns true if feature is somewhat enabled(version limitations) in all editions.
            </summary>
            <param name="feature">Feature to check</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsFeatureAvailable(CMS.LicenseProvider.ProductEditionEnum,CMS.DataEngine.FeatureEnum)">
            <summary>
            Checks if specified feature is available for specified edition.
            </summary>
            <param name="edition">Product edition</param>
            <param name="feature">Feature</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsFeatureAvailable(CMS.LicenseProvider.LicenseKeyInfo,CMS.DataEngine.FeatureEnum)">
            <summary>
            Checks if specified feature is available for specified domain.
            </summary>
            <param name="lki">License key</param>
            <param name="feature">Feature</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsFeatureAvailable(System.String,CMS.DataEngine.FeatureEnum)">
            <summary>
            Checks if specified feature is available for specified domain.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature type</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsFeatureAvailable(CMS.DataEngine.FeatureEnum)">
            <summary>
            Checks if feature is available for current domain.
            </summary>
            <param name="feature">Feature to check</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.VersionLimitations(CMS.LicenseProvider.LicenseKeyInfo,CMS.DataEngine.FeatureEnum)">
            <summary>
            Returns specified number for selected feature.
            </summary>
            <param name="lki">License key</param>
            <param name="feature">Feature</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.VersionLimitations(System.String,CMS.DataEngine.FeatureEnum,System.Boolean)">
            <summary>
            Returns specified number for selected feature.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature type</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Admin, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.Clear">
            <summary>
            Clear hashtables.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.RemoveFromStaticCollection(System.String)">
            <summary>
            Removes domain from cached collection of licencese
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsLicenseExistForDomain(CMS.LicenseProvider.LicenseKeyInfo)">
            <summary>
            Checks if license key exist for specified domain.
            </summary>
            <param name="licenseKey">License key info with specified domain</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.IsLocalDomain(System.String)">
            <summary>
            Check if given domain is localhost domain.
            </summary>
            <param name="domain">Domain to check.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.EditionToString(CMS.LicenseProvider.ProductEditionEnum)">
            <summary>
            Converts ProductEditionEnum to string.
            </summary>
            <param name="edition">Edition of the product</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.StringToEdition(System.String)">
            <summary>
            Converts string to ProductEditionEnum.
            </summary>
            <param name="data">String</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseKeyInfoProvider.ProcessWebFarmTask(System.String,System.String,System.Byte[])">
            <summary>
            Runs the processing of specific web farm task for current provider
            </summary>
            <param name="actionName">Action name</param>
            <param name="data">Custom data</param>
            <param name="binary">Binary data</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseService.CheckLicense(CMS.DataEngine.FeatureEnum,System.String,System.Boolean)">
            <summary>
            Checks the license based on feature and perform actions based on given arguments
            </summary>
            <param name="feature">Feature to check</param>
            <param name="domain">Domain to check. If null, function tries to get domain from HttpContext</param>
            <param name="throwError">Indicates whether throw error after false check</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseService.IsFeatureAvailable(CMS.DataEngine.FeatureEnum,System.String)">
            <summary>
            Checks whether the given <paramref name="feature"/> is available on given <paramref name="domain"/>.
            </summary>
            <remarks>
            If the method is called outside the request and <paramref name="domain"/> is <c>null</c>, check is performed against the best license available on the instance.
            </remarks>
            <param name="feature">Feature to be checked</param>
            <param name="domain">Domain the <paramref name="feature"/> is checked against. If <c>null</c>, the domain will be obtained from the context</param>
            <returns><c>true</c> if the <paramref name="feature"/> is available on given <paramref name="domain"/>; otherwise, <c>false</c></returns>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseHelperNamespace">
            <summary>
            Wrapper class to provide basic licensing methods namespace in the MacroEngine.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseMethods">
            <summary>
            Wrapper class to provide basic licensing methods in the MacroEngine.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseMethods.CheckFeature(System.Object[])">
            <summary>
            Returns the cached data context
            </summary>
            <param name="parameters">Macro functions parameters ([0] - feature type</param>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseUsageDataSource">
            <summary>
            Class for retrieving statistical information about current web application instance license.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseUsageDataSource.Name">
            <summary>
            Get the name of the license data source.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseUsageDataSource.GetData">
            <summary>
            Get information about current web application instance license.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseHandlers">
            <summary>
            License module event handlers
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHandlers.Init">
            <summary>
            Initializes the handlers
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHandlers.CheckApplicationValidityAndLicense(System.Object,System.EventArgs)">
            <summary>
            Checks the application validity and license for external application
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHandlers.CheckLicenseForCurrentDomainInExternalApplication">
            <summary>
            Checks whether a license for the current domain exists and is valid.
            When the license is not valid, respond with HTTP503 status code.
            </summary>
            <remarks>
            Prevents an external application (e.g. MVC) with registered CMSApplication module from running without license.
            </remarks>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseModule">
            <summary>
            Represents the License module.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseModule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseModule.OnPreInit">
            <summary>
            Pre-initializes the module.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseModule.OnInit">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseModule.InitMacros">
            <summary>
            Initializes the macros with license module values
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseModule.ClearHashtables(System.Boolean)">
            <summary>
            Clears the module hashtables.
            </summary>
            <param name="logTasks">If true, web farm tasks are logged</param>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseModuleMetadata">
            <summary>
            Represents the License module metadata.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseModuleMetadata.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.RentedUpdater">
            <summary>
            Class representing update logic for rented licenses.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.RentedUpdater.LOG_SOURCE">
            <summary>
            Event log source for rented license updates
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.RentedUpdater.EVENT_CODE">
            <summary>
            Event log code for rented license updates
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.RentedUpdater.RentedKeyCodeRegEx">
            <summary>
            Regular expression for rented key code
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.RentedUpdater.ServiceUrl">
            <summary>
            Gets or sets rented license webservice url
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.#ctor">
            <summary>
            Rented updater constructor
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.#ctor(System.String)">
            <summary>
            Constructor which can set rented license webservice url.
            If null default url is used.
            </summary>
            <param name="serviceUrl">Service URL to be set</param>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.RenewLicenseKeysAsync(System.String[])">
            <summary>
            Renews license keys for domains specified by rented keys.
            </summary>
            <param name="rentedKeys">Rented key codes</param>        
            <returns>Information message</returns>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.GetDomains(System.String[])">
            <summary>
            Creates array of domain from rented key codes.
            Domain is the suffix of rented key code.
            </summary>
            <param name="rentedKeys">Array with rented key codes</param>        
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.CheckForDuplicitDomains(System.String[])">
            <summary>
            Checks if array of domains contains two domains with same domain name, which is invalid.        
            </summary>
            <exception cref="T:System.InvalidOperationException">If such duplicity exists exception is thrown.</exception>
            <param name="domains">Array of domain names</param>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.ParseDateTime(System.String)">
            <summary>
            Returns the DateTime representation of a US short date string.
            </summary>
            <param name="value">Value to convert.</param>   
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.UpdateLicenseKeys(System.Collections.Generic.IEnumerable{CMS.LicenseProvider.RentedLicenseWebService.DomainLicense})">
            <summary>
            Updates license keys - deletes old ones and adds new.        
            </summary>
            <param name="domains">Array of domain licenses</param>
            <returns>Number of updated keys.</returns>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.GetCurrentLicensesWithExpiration(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets licenses and their expiration for specified domains.
            </summary>
            <param name="domains">Array of domains.</param>
            <returns>Dictionary for fast search, domain as key, DataRow as value</returns>
        </member>
        <member name="M:CMS.LicenseProvider.RentedUpdater.GetSystemVersion">
            <summary>
            Returns CMS version as int, to be able to use it for generating the license.
            Based on CMSVersion.NUMBER
            </summary>        
        </member>
        <member name="T:CMS.LicenseProvider.ISubscriptionLicenseService">
            <summary>
            Service providing functionality to handle subscription licenses.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.ISubscriptionLicenseService.UpdateSubscriptionLicenses">
            <summary>
            Updates the subscription licenses registered in the application if there are new license keys available.
            </summary>
            <returns>A message if the update process encountered and error with some of the licenses.</returns>
        </member>
        <member name="T:CMS.LicenseProvider.SubscriptionLicenseService">
            <summary>
            Service providing functionality to handle subscription licenses.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.SubscriptionLicenseService.#ctor(CMS.LicenseProvider.ISubscriptionRenewalService,CMS.Core.IEventLogService)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.LicenseProvider.SubscriptionLicenseService"/> class.
            </summary>
            <param name="eventLogService">The service for logging into the system event log.</param>
            <param name="subscriptionRenewalService">The service that handles the requests to subscription renewal web service API.</param>
        </member>
        <member name="M:CMS.LicenseProvider.SubscriptionLicenseService.UpdateSubscriptionLicenses">
            <summary>
            Updates the subscription licenses registered in the application if there are new license keys available.
            </summary>
            <returns>A message if the update process encountered and error with some of the licenses.</returns>
        </member>
        <member name="T:CMS.LicenseProvider.ISubscriptionRenewalService">
            <summary>
            Service connecting to subscription licenses API.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.ISubscriptionRenewalService.RenewLicenses(System.Collections.Generic.IEnumerable{CMS.LicenseProvider.LicenseKeyInfo})">
            <summary>
            Renews the subscription licenses by calling external web service and sends subscriptions licenses to renew.
            </summary>
            <param name="licenses">The list of subscription licenses.</param>
            <returns>
            A collection corresponding to provided licenses where for each license a license key
            is returned or an error message. The returned license key may be updated or unchanged.
            </returns>
        </member>
        <member name="T:CMS.LicenseProvider.SubscriptionLicenseRenewalResult">
            <summary>
            Object representing the response of the subscription license renewal web service.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.SubscriptionLicenseRenewalResult.Domain">
            <summary>
            Domain for which the renewed license is registered.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.SubscriptionLicenseRenewalResult.ErrorMessage">
            <summary>
            Contains information why the renewal for this license failed, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.SubscriptionLicenseRenewalResult.Key">
            <summary>
            When the license is found in the web service, the license key is returned into this property.
            If an error occurred during renewal for this license then <c>null</c> is returned and <see cref="P:CMS.LicenseProvider.SubscriptionLicenseRenewalResult.ErrorMessage"/> 
            will contain the information.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.SubscriptionRenewalService">
            <summary>
            Service connecting to subscription licenses API.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.SubscriptionRenewalService.#ctor(CMS.Core.IAppSettingsService)">
            <summary>
            Initializes a new instance of the <see cref="T:CMS.LicenseProvider.SubscriptionRenewalService"/> class.
            </summary>
            <param name="appSettingsService">The application settings service.</param>
        </member>
        <member name="M:CMS.LicenseProvider.SubscriptionRenewalService.RenewLicenses(System.Collections.Generic.IEnumerable{CMS.LicenseProvider.LicenseKeyInfo})">
            <summary>
            Renews the subscription licenses by calling external web service and sends subscriptions licenses to renew.
            </summary>
            <param name="licenses">The list of subscription licenses.</param>
            <returns>
            A collection corresponding to provided licenses where for each license a license key
            is returned or an error message. The returned license key may be updated or unchanged.
            </returns>
        </member>
        <member name="M:CMS.LicenseProvider.SubscriptionRenewalService.GetRenewalServiceUrl">
            <summary>
            For testing purposes an app-setting with different URL may be used.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.ClearLicenseLimitationCacheWebFarmTask">
            <summary>
            Web farm task used to clear basic license limitation tables.
            </summary>
            <seealso cref="P:CMS.Core.IWebFarmTask.TaskTextData"/>
        </member>
        <member name="M:CMS.LicenseProvider.ClearLicenseLimitationCacheWebFarmTask.ExecuteTask">
            <summary>
            Processes the web farm task by invoking the <see cref="M:CMS.LicenseProvider.LicenseHelper.ClearLicenseLimitation(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.CanDisableLicenseCheckAttribute">
            <summary>
            Marks the method or class as one which can disable the license check
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.CanDisableLicenseCheckAttribute.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.CanDisableLicenseCheckAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="signature">Signature</param>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseCheckDisabler">
            <summary>
            Allows disabling license checks while calling methods
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.ExecuteWithoutLicenseCheck(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Executes the given method without license checks. The method must be signed with AllowDisableLicense attribute with a valid hash in order to proceed. If the method is missing the signature, or the hash is invalid, this call throws an exception.
            </summary>
            <param name="expression">Action to execute</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.CanDisableLicenseCheck(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Returns true if the given action is allowed to disable the license check
            </summary>
            <param name="expression">Expression to check</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.GetMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the method info from the given expression
            </summary>
            <param name="expression">Method expression</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.CanDisableLicenseCheck(System.Reflection.MethodInfo)">
            <summary>
            Returns true if the given method is allowed to disable the license check
            </summary>
            <param name="method">Method to check</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.CanDisableLicenseCheck(System.Type)">
            <summary>
            Returns true if the given type is allowed to disable the license check
            </summary>
            <param name="type">Type to check</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.GetMethodIdentifier(System.Reflection.MethodInfo)">
            <summary>
            Gets a unique method signature
            </summary>
            <param name="method">Method</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.GetTypeIdentifier(System.Type)">
            <summary>
            Gets a unique type identifier
            </summary>
            <param name="type">Type</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseCheckDisabler.VerifySignature(System.String,System.String)">
            <summary>
            Verifies that a signature for the content matches
            </summary>
            <param name="content">Signed content</param>
            <param name="signature">Signature to verify</param>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseHelper">
            <summary>
            LicenseHelper class.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseHelper.LICENSE_LIMITATION_EVENTCODE">
            <summary>
            Event log messages about version limitations will have this event code.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseHelper.LIMITATIONS_UNLIMITED">
            <summary>
            Number of items(given feature) is not limited in product version.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseHelper.LIMITATIONS_NOITEMS">
            <summary>
            No items(given feature) is allowed in product version.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseHelper.LIMITATIONS_BASICWORKFLOW">
            <summary>
            Allows basic workflow(no custom steps) in product version.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelper.ApplicationExpires">
            <summary>
            The time when the application expires.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelper.CurrentEdition">
            <summary>
            Gets product edition for current domain.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelper.InternalHelper">
            <summary>
            Gets or sets internal helper instance.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.CheckLicenseLimitations(CMS.DataEngine.FeatureEnum,System.Int32@,System.Int32@)">
            <summary>
            Checks that number of <paramref name="feature"/>-related objects on current website does not exceed the license limitations.
            </summary>
            <param name="feature">Feature to be checked</param>
            <param name="currentObjectCount">Number of feature-related objects on current website</param>
            <param name="maxObjectCount">Maximum allowed number of feature-related objects. 0 is unlimited</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.CheckApplicationValidity">
            <summary>
            Returns true if the version is valid.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.ValidateLicenseForDomain(System.String)">
            <summary>
            Validates license for specified domain.
            </summary>
            <param name="domain">Domain</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.GetAllAvailableKeys(CMS.DataEngine.FeatureEnum)">
            <summary>
            Reports that the license limit was exceeded
            </summary>
            <param name="feature">Feature enum</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.CheckFeatureAndRedirect(System.String,CMS.DataEngine.FeatureEnum)">
            <summary>
            Gets the license key for the URL and checks if the feature is supported for its product edition. 
            If not, it redirects the user to ~/CMSMessages/FeatureNotAvailable.aspx
            </summary>
            <param name="domain">Domain</param>
            <param name="feature">Feature type</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.CheckFeature(System.String,CMS.DataEngine.FeatureEnum)">
            <summary>
            Returns true if the feature is available for current URL.
            </summary>
            <param name="url">URL</param>
            <param name="feature">Feature type</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.RequestFeature(System.String,CMS.DataEngine.FeatureEnum)">
            <summary>
            Gets the license key for the URL and checks if the feature is supported for its product edition. 
            If not, it throws and exception.
            </summary>
            <param name="url">URL</param>
            <param name="feature">Feature type</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.ClearLicenseLimitation(System.Boolean)">
            <summary>
            Clear license limitations tables.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.GetSiteIDbyDomain(System.String)">
            <summary>
            Returns site id by domains.
            </summary>
            <param name="domain">Domain name</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.LicenseVersionCheck(System.String,CMS.DataEngine.FeatureEnum,CMS.DataEngine.ObjectActionEnum)">
            <summary>
            License version checker.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature type</param>
            <param name="action">Type of action - edit, insert, delete</param>
            <returns>Returns true if feature is without any limitations for domain and action</returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.GetEditionName(CMS.LicenseProvider.ProductEditionEnum)">
            <summary>
            Returns edition name.
            </summary>
            <param name="edition">Edition type</param>        
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.IsFeatureAvailableInBestLicense(CMS.DataEngine.FeatureEnum,System.String)">
            <summary>
            Indicates if specified feature is available based on whether equivalent module is loaded and specified feature is available in user's best license.
            </summary>
            <param name="feature">Feature to check if it is available in user's best license.</param>         
            <param name="moduleName">Module to check if it is loaded. The check is omitted if module name is null or empty.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.IsFeatureAvailableInUI(CMS.DataEngine.FeatureEnum,System.String)">
            <summary>
            Indicates if specified feature is available in UI based on whether equivalent module is loaded and specified feature is available in user's license.
            </summary>
            <param name="feature">Feature to check if it is available in user's license.</param>         
            <param name="moduleName">Module to check if it is loaded. The check is omitted if module name is null or empty.</param>        
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.IsModuleLoadedOrNull(System.String)">
            <summary>
            Checks if module is loaded.
            </summary>
            <param name="moduleName">Module to check if it is loaded.</param>
            <returns>True if module is loaded or <paramref name="moduleName"/> is <c>null</c></returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.IsUnavailableUIHidden">
            <summary>
            Determines whether the user interface, which is unavailable due to the license, should be hidden from all sites.
            </summary>  
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.Clear">
            <summary>
            Clears the hashtable with URL results.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.GetValidationResultString(CMS.LicenseProvider.LicenseValidationEnum)">
            <summary>
            Converts license validation result to its string representation.
            </summary>
            <param name="result">License validation result.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.AddTrialLicenseKeys(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates trial license keys.
            </summary>
            <param name="trialKey">Trial license key</param>
            <param name="deleteKeysFirst">If true all previous keys is deleted</param>
            <param name="ignoreExpired">If true expired licenses is ignored</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.ReportExceededFeatureLimit(CMS.DataEngine.FeatureEnum,System.String)">
            <summary>
            Reports that <paramref name="feature"/> limit is exceeded for <paramref name="domain"/> license.
            </summary>
            <param name="feature">Feature for which the limit is exceeded.</param>
            <param name="domain">Domain with insufficient license.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.ReportFailedLicenseCheck(CMS.DataEngine.FeatureEnum,System.String,System.Boolean)">
            <summary>
            Reports failed license check for given <paramref name="feature"/>.
            </summary>
            <param name="feature">Feature for which license check failed.</param>
            <param name="domain">Domain with insufficient license.</param>
            <param name="throwError">Indicates whether <see cref="T:CMS.DataEngine.LicenseException"/> should be thrown or just failed attempt should be logged.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelper.GetSiteIDFromDataSet(System.Data.DataSet)">
            <summary>
            Returns Site ID from given dataset when SiteStatus for given site in dataset is running.
            </summary>
            <param name="ds">DataSet.</param>
        </member>
        <member name="T:CMS.LicenseProvider.LicenseHelperInternal">
            <summary>
            Internal class for LicenseHelper. It contains all external dependencies.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelperInternal.A7FB5">
            <summary>
            Specifies application expiration date.
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelperInternal.A7BF6">
            <summary>
            Hashtable to store result of checked URLs. [domain -> LicenseKeyInfo]
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelperInternal.SiteIds">
            <summary>
            Site IDs by domain
            </summary>
        </member>
        <member name="P:CMS.LicenseProvider.LicenseHelperInternal.A7FB6">
            <summary>
            License version document table
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.ValidateLicenseForDomain(System.String)">
            <summary>
            Validates license for specified domain.
            </summary>
            <param name="domain">Domain</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.LogLicenseEvent(CMS.DataEngine.FeatureEnum,System.String)">
            <summary>
            Creates warning record in event log.
            </summary>        
            <param name="feature">Feature which will be used as event source</param>
            <param name="message">Message describing the license problem</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.ReportLicenseError(System.String,System.String)">
            <summary>
            Reports the invalid license, either by redirecting to given URL, or by throwing an exception .
            </summary>
            <param name="redirectUrl">URL to redirect.</param>
            <param name="message">Message to report</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.IsFeatureAvailable(System.String,CMS.DataEngine.FeatureEnum)">
            <summary>
            Returns whether is feature available for given domain.
            </summary>
            <param name="domain">Domain.</param>
            <param name="feature">Feature to check.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.GetLicenseLimitationString">
            <summary>
            Returns "License limitation" resource string.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.GetFeatureLimitExceededString">
            <summary>
            Returns "Feature limit exceeded" resource string.
            </summary>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.ParseDomainName(System.String)">
            <summary>
            Parses domain name from URL.
            </summary>
            <param name="url">URL to parse.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.GetSiteIDFromSiteTable(System.String)">
            <summary>
            Calls query which returns dataset with SiteID and SiteStatus of all sites which uses given domain.
            </summary>
            <param name="domain">Domain.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.GetSiteIDFromSiteAliasTable(System.String)">
            <summary>
            Calls query which returns SiteID and SiteStatus of all sites which uses given domain as an domain alias.
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.VersionLimitations(System.String,CMS.DataEngine.FeatureEnum,System.Boolean)">
            <summary>
            Returns version limitations.
            </summary>
            <param name="domain">Domain name</param>
            <param name="feature">Feature type</param>
            <param name="siteCheck">If true limitations are not applied under URLs in Site manager, CMS Desk, CMSModules and CMSPages/Logon</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.GetDataClassInfo(System.String)">
            <summary>
            Returns DataClassInfo object according to 
            </summary>
            <param name="className">Class name.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.GetNumberOfDocuments(System.String)">
            <summary>
            Calls query which returns number of documents for current domain.
            </summary>
            <param name="domain">Domain.</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.CheckFeature(System.String,CMS.DataEngine.FeatureEnum)">
            <summary>
            Returns true if the feature is available for current URL.
            </summary>
            <param name="url">URL</param>
            <param name="feature">Feature type</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.IsModuleLoaded(System.String)">
            <summary>
            Indicates if the module is loaded.
            </summary>
            <param name="moduleName">Module name</param>
        </member>
        <member name="M:CMS.LicenseProvider.LicenseHelperInternal.IsUnavailableUIHidden">
            <summary>
            Determines whether the user interface, which is unavailable due to the license, should be hidden from all sites.
            </summary>       
        </member>
        <member name="T:CMS.LicenseProvider.LicenseValidationEnum">
            <summary>
            Type of license validity.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseValidationEnum.Valid">
            <summary>
            Valid.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseValidationEnum.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseValidationEnum.Expired">
            <summary>
            Expired.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseValidationEnum.WrongFormat">
            <summary>
            WrongFormat.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseValidationEnum.NotAvailable">
            <summary>
            NotAvailable.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.LicenseValidationEnum.Unknown">
            <summary>
            Unknown license status.
            </summary>
        </member>
        <member name="T:CMS.LicenseProvider.ProductEditionEnum">
            <summary>
            License types. The higher the integer value, the better the license type is.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.ProductEditionEnum.Free">
            <summary>
            Free.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.ProductEditionEnum.Base">
            <summary>
            Base.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.ProductEditionEnum.SmallBusiness">
            <summary>
            Small business license.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.ProductEditionEnum.UltimateV7">
            <summary>
            Ultimate version 7 and higher.
            </summary>
        </member>
        <member name="F:CMS.LicenseProvider.ProductEditionEnum.EnterpriseMarketingSolution">
            <summary>
            Enterprise marketing solution
            </summary>
        </member>
    </members>
</doc>
