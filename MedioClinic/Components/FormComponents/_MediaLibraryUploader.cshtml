@using CMS.Helpers
@using MedioClinic.Components.FormComponents
@using Microsoft.AspNetCore.Html
@using MedioClinic.Controllers
@using MedioClinic.Extensions
@model MediaLibraryUploader

@functions{
    /// <summary>
    /// Gets the URL for the MediaLibraryUploaderController's action.
    /// </summary>
    /// <param name="fileInputElementId">HTML element to fill with the file GUID.</param>
    /// <returns>The controller action's URL.</returns>
    string GetActionUrl(string fileInputElementId) =>
        Url.Kentico().AuthenticateUrlRaw(Url.Action("Upload", "MediaLibraryUploader", new
        {
            fileInputElementId,
            mediaLibraryId = Model?.Properties?.MediaLibraryId
        }));
}

@{
    var buttonCssClasses = "btn-small waves-effect waves-light";
    string currentFileGuidHiddenElementId = Html.IdFor(model => model.FileGuidAsString).ToString();
    var textInputAttributes = ViewData.Kentico().GetEditorHtmlAttributes();
    var fileInputAttributes = ViewData.Kentico().GetEditorHtmlAttributes();
    fileInputAttributes.AddOrAppendItem("onchange", $"window.medioClinic.mediaLibraryUploaderFormComponent.onFileSelected(this);", ';');
    var fileGuidAttributes = ViewData.Kentico().GetEditorHtmlAttributes();
    fileGuidAttributes.AddOrAppendItem("class", "mc-file-guid-hidden");
    var fileNameAttributes = ViewData.Kentico().GetEditorHtmlAttributes();
    fileNameAttributes.AddOrAppendItem("class", "mc-file-name-hidden");
    var buttonAttributes = ViewData.Kentico().GetEditorHtmlAttributes();
    var currentUrl = GetActionUrl(currentFileGuidHiddenElementId);
    var requiredLiteral = Model?.Properties?.Required.ToString().ToLowerInvariant();

    buttonAttributes.AddOrAppendItem(
        "onclick",
        $"window.medioClinic.mediaLibraryUploaderFormComponent.uploadFile(this, '{currentUrl}', {requiredLiteral}, '{currentFileGuidHiddenElementId}');", ';');

    buttonAttributes.AddOrAppendItem("class", buttonCssClasses);
}

<div class="mc-media-library-uploader grey lighten-5">
    <div class="row">
        <div class="col s6">
            @Html.FileInput("General.ChooseFile", Guid.NewGuid().ToString(), fileInputAttributes, textInputAttributes, buttonCssClasses)
        </div>
        <div class="mc-upload-file-details col s6">
            @Html.HiddenFor(model => model.FileGuidAsString, fileGuidAttributes)
            <div class="mc-file-size"></div>
            <div class="mc-file-type"></div>
            <div class="mc-form-messages"></div>
        </div>
    </div>
    <div class="row">
        <div class="col s6 upload-button">
            @Html.Button("General.Upload", buttonAttributes)
        </div>
    </div>
    @{
        var imagePath = Model.ImageRelativePath;

        if (Model.ShowViewFileLink && !string.IsNullOrEmpty(imagePath))
        {
            <div class="row">
                <div class="col s6">
                    <a href="@Url.Content(imagePath)" target="_blank">View file</a>
                </div>
            </div>
        }
    }
</div>

@* Partial views don't support @section directives. *@
<script>
    @{
        var warnAboutFileLiteral = $"window.medioClinic.mediaLibraryUploaderFormComponent.checkForUnuploadedFile({requiredLiteral}, '{currentFileGuidHiddenElementId}');";
    }
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", function () {
            @Html.Raw(warnAboutFileLiteral)
        });
    } else {
        @Html.Raw(warnAboutFileLiteral)
    }
</script>